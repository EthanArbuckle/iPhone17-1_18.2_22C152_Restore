ShaderGraph::NodePersonality::ShaderType_optional __swiftcall NodePersonality.ShaderType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::NodePersonality::ShaderType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodePersonality.ShaderType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = ShaderGraph_NodePersonality_ShaderType_geometryModifier;
  }
  else {
    v4.value = ShaderGraph_NodePersonality_ShaderType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t NodePersonality.ShaderType.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x65636166727573;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodePersonality.ShaderType(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    unint64_t v3 = 0xD000000000000010;
  }
  else {
    unint64_t v3 = 0x65636166727573;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0x800000025C41FDD0;
  }
  if (*a2) {
    unint64_t v5 = 0xD000000000000010;
  }
  else {
    unint64_t v5 = 0x65636166727573;
  }
  if (*a2) {
    unint64_t v6 = 0x800000025C41FDD0;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodePersonality.ShaderType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodePersonality.ShaderType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodePersonality.ShaderType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NodePersonality.ShaderType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodePersonality.ShaderType.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NodePersonality.ShaderType(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x65636166727573;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x800000025C41FDD0;
  if (!*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void NodePersonality.hash(into:)(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 61)
  {
    case 1uLL:
      uint64_t v5 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      Hasher._combine(_:)(3uLL);
      swift_retain();
      String.hash(into:)();
      (*(void (**)(uint64_t))(*(void *)v5 + 120))(a1);
      goto LABEL_5;
    case 2uLL:
      uint64_t v6 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      Hasher._combine(_:)(4uLL);
      swift_retain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(*(void *)v6 + 120))(a1);
LABEL_5:
      swift_release();
      return;
    case 3uLL:
      Swift::UInt v7 = 6;
      goto LABEL_11;
    case 4uLL:
      Swift::UInt v7 = 7;
      goto LABEL_11;
    case 5uLL:
      Swift::UInt v7 = 8;
LABEL_11:
      Hasher._combine(_:)(v7);
      String.hash(into:)();
      break;
    case 6uLL:
      long long v8 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
      v13[7] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
      v13[8] = v8;
      v14[0] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
      *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
      long long v9 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
      v13[3] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      v13[4] = v9;
      long long v10 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
      v13[5] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
      v13[6] = v10;
      long long v11 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      v13[0] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v13[1] = v11;
      v13[2] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      Hasher._combine(_:)(9uLL);
      outlined retain of Graph((uint64_t)v13);
      Graph.hash(into:)(a1);
      outlined release of Graph((uint64_t)v13);
      break;
    case 7uLL:
      if (a2 == 0xE000000000000000)
      {
        Swift::UInt v12 = 1;
      }
      else if (a2 == 0xE000000000000008)
      {
        Swift::UInt v12 = 2;
      }
      else
      {
        Swift::UInt v12 = 5;
      }
      Hasher._combine(_:)(v12);
      break;
    default:
      outlined init with take of SGDataTypeStorage(a2 + 16, (uint64_t)v13);
      uint64_t v4 = *(void *)(a2 + 88);
      Hasher._combine(_:)(0);
      outlined retain of SGDataTypeStorage((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      swift_retain();
      SGDataTypeStorage.hash(into:)();
      (*(void (**)(uint64_t))(*(void *)v4 + 120))(a1);
      outlined retain of SGDataTypeStorage((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      swift_release();
      break;
  }
}

Swift::Int NodePersonality.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  NodePersonality.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodePersonality()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonality.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NodePersonality(uint64_t a1)
{
  NodePersonality.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodePersonality()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonality.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodePersonality(unint64_t *a1, unint64_t *a2)
{
  return specialized static NodePersonality.== infix(_:_:)(*a1, *a2);
}

unint64_t NodePersonalityType.rawValue.getter(char a1)
{
  unint64_t result = 0x746E6174736E6F43;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6153657461657243;
      break;
    case 4:
      unint64_t result = 0x636E75466C6C6143;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x746C75736552;
      break;
    case 7:
      unint64_t result = 0x65706F7250746547;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0x6C6169726574614DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodePersonalityType(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = NodePersonalityType.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == NodePersonalityType.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodePersonalityType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonalityType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodePersonalityType()
{
  NodePersonalityType.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodePersonalityType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonalityType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NodePersonalityType@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized NodePersonalityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NodePersonalityType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = NodePersonalityType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t NodePersonality.typeName.getter(unint64_t a1)
{
  uint64_t result = a1 >> 61;
  switch(result)
  {
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 7;
      break;
    case 5:
      uint64_t result = 8;
      break;
    case 6:
      uint64_t result = 9;
      break;
    case 7:
      if (a1 == 0xE000000000000008) {
        unsigned int v3 = 3;
      }
      else {
        unsigned int v3 = 6;
      }
      if (a1 == 0xE000000000000000) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = v3;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t NodePersonality.emitFunctionNodes(node:context:into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(void **)(a1 + 24);
  long long v10 = *(void **)(a1 + 32);
  v327 = (uint64_t *)a1;
  char v11 = *(unsigned char *)(a1 + 40);
  uint64_t v300 = a3;
  switch(a4 >> 61)
  {
    case 0uLL:
      uint64_t v265 = a2;
      outlined init with take of SGDataTypeStorage(a4 + 16, (uint64_t)v323);
      uint64_t v259 = *(void *)(v4 + 88);
      uint64_t v12 = v327[2];
      uint64_t v305 = v12;
      unint64_t v13 = *(void *)(v12 + 16);
      if (!v13)
      {
        v280._uint64_t countAndFlagsBits = v6;
        v280._char object = (void *)v7;
        v281._uint64_t countAndFlagsBits = v8;
        v281._char object = v9;
        v282._uint64_t countAndFlagsBits = (uint64_t)v10;
        LOBYTE(v282._object) = v11 & 1;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v280);
        v287._uint64_t countAndFlagsBits = 0;
        v287._char object = (void *)0xE000000000000000;
        swift_retain();
        swift_retain();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
        _StringGuts.grow(_:)(73);
        v128._char object = (void *)0x800000025C421630;
        v128._uint64_t countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v128);
        v129._uint64_t countAndFlagsBits = 0xD000000000000047;
        v129._char object = (void *)0x800000025C421810;
        String.append(_:)(v129);
        Swift::String v130 = v287;
        v131 = v327;
        outlined init with take of NodePersonality(v327, &v302);
        uint64_t v301 = v131[1];
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
        Swift::String v299 = v130;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        Swift::String *v132 = v287;
        Swift::String v133 = v291;
        Swift::String v135 = v288;
        Swift::String v134 = v289;
        v132[3] = v290;
        v132[4] = v133;
        v132[1] = v135;
        v132[2] = v134;
        Swift::String v136 = v295;
        Swift::String v138 = v292;
        Swift::String v137 = v293;
        v132[7] = v294;
        v132[8] = v136;
        v132[5] = v138;
        v132[6] = v137;
        Swift::String v139 = v299;
        Swift::String v141 = v296;
        Swift::String v140 = v297;
        v132[11] = v298;
        v132[12] = v139;
        v132[9] = v141;
        v132[10] = v140;
        outlined retain of [Input]((uint64_t)&v305);
        outlined retain of NodePersonality(&v302);
        outlined retain of [Input]((uint64_t)&v301);
        swift_willThrow();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        swift_release();
        return swift_release();
      }
      if (v13 != 1)
      {
        v280._uint64_t countAndFlagsBits = v6;
        v280._char object = (void *)v7;
        v281._uint64_t countAndFlagsBits = v8;
        v281._char object = v9;
        v282._uint64_t countAndFlagsBits = (uint64_t)v10;
        LOBYTE(v282._object) = v11 & 1;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v280);
        v287._uint64_t countAndFlagsBits = 0;
        v287._char object = (void *)0xE000000000000000;
        swift_retain();
        swift_retain();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
        _StringGuts.grow(_:)(84);
        v142._char object = (void *)0x800000025C421630;
        v142._uint64_t countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v142);
        v143._uint64_t countAndFlagsBits = 0xD000000000000046;
        v143._char object = (void *)0x800000025C4217C0;
        String.append(_:)(v143);
        v273._uint64_t countAndFlagsBits = v13;
        v144._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v144);
        swift_bridgeObjectRelease();
        v145._uint64_t countAndFlagsBits = 0x74757074756F2029;
        v145._char object = (void *)0xEA00000000002E73;
        String.append(_:)(v145);
        Swift::String v146 = v287;
        v147 = v327;
        outlined init with take of NodePersonality(v327, &v304);
        uint64_t v303 = v147[1];
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
        Swift::String v299 = v146;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        Swift::String *v148 = v287;
        Swift::String v149 = v291;
        Swift::String v151 = v288;
        Swift::String v150 = v289;
        v148[3] = v290;
        v148[4] = v149;
        v148[1] = v151;
        v148[2] = v150;
        Swift::String v152 = v295;
        Swift::String v154 = v292;
        Swift::String v153 = v293;
        v148[7] = v294;
        v148[8] = v152;
        v148[5] = v154;
        v148[6] = v153;
        Swift::String v155 = v299;
        Swift::String v157 = v296;
        Swift::String v156 = v297;
        v148[11] = v298;
        v148[12] = v155;
        v148[9] = v157;
        v148[10] = v156;
        outlined retain of NodePersonality(&v304);
        outlined retain of [Input]((uint64_t)&v303);
        outlined retain of [Input]((uint64_t)&v305);
        swift_willThrow();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        swift_release();
        return swift_release();
      }
      uint64_t v14 = *(void *)(v12 + 32);
      uint64_t v15 = *(void *)(v12 + 40);
      uint64_t v16 = *(void *)(v12 + 48);
      uint64_t v17 = *(void *)(v12 + 56);
      uint64_t v18 = *(void *)(v12 + 64);
      char v19 = *(unsigned char *)(v12 + 72);
      uint64_t v20 = *(void *)(v12 + 80);
      v320[0] = v14;
      v320[1] = v15;
      v320[2] = v16;
      v320[3] = v17;
      v320[4] = v18;
      char v321 = v19;
      uint64_t v322 = v20;
      v21 = *(uint64_t (**)(uint64_t))(*(void *)v259 + 144);
      int64_t v22 = *(void *)v259 + 144;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v23 = outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      uint64_t v24 = v21(v23);
      if (!v24)
      {
        v280._uint64_t countAndFlagsBits = v259;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)&v280);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        Swift::String v299 = (Swift::String)0;
        swift_allocError();
        Swift::String *v187 = v287;
        Swift::String v188 = v291;
        Swift::String v190 = v288;
        Swift::String v189 = v289;
        v187[3] = v290;
        v187[4] = v188;
        v187[1] = v190;
        v187[2] = v189;
        Swift::String v191 = v295;
        Swift::String v193 = v292;
        Swift::String v192 = v293;
        v187[7] = v294;
        v187[8] = v191;
        v187[5] = v193;
        v187[6] = v192;
        Swift::String v194 = v299;
        Swift::String v196 = v296;
        Swift::String v195 = v297;
        v187[11] = v298;
        v187[12] = v194;
        v187[9] = v196;
        v187[10] = v195;
        swift_retain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        swift_release();
        return swift_release();
      }
      uint64_t v25 = *(void *)(a3 + 48);
      unint64_t v26 = v25 + 1;
      if (!__OFADD__(v25, 1))
      {
        uint64_t v27 = v24;
        *(void *)(a3 + 48) = v26;
        type metadata accessor for MetalLiteralValueNode();
        swift_allocObject();
        swift_retain();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
        swift_retain();
        uint64_t v28 = MetalLiteralValueNode.init(id:resultType:value:)(v25, v27, (uint64_t)v323);
        uint64_t v29 = specialized MetalShaderProgram.add<A>(_:)(v28);
        swift_retain();
        swift_release();
        uint64_t v30 = swift_release();
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 128))(v30);
        swift_retain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v287._uint64_t countAndFlagsBits = *(void *)(v265 + 192);
        *(void *)(v265 + 192) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)v320, isUniquelyReferenced_nonNull_native);
        *(void *)(v265 + 192) = v287._countAndFlagsBits;
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        outlined retain of SGDataTypeStorage((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        return v300;
      }
      __break(1u);
      goto LABEL_115;
    case 1uLL:
      uint64_t v34 = *(void *)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v33 = *(void **)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      v35 = *(void **)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      v37 = v327;
      outlined init with take of NodePersonality(v327, &v307);
      uint64_t v306 = v37[2];
      swift_retain();
      outlined retain of NodePersonality(&v307);
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)&v306);
      swift_retain();
      uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D476897context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(v7, a2, (uint64_t)v37, &v300);
      if (v267)
      {
        outlined release of NodePersonality(&v307);
        outlined release of [Input]((uint64_t)&v306);
        swift_release();
LABEL_64:
        swift_release();
        return swift_bridgeObjectRelease();
      }
      uint64_t v85 = v38;
      uint64_t v262 = v34;
      outlined release of NodePersonality(&v307);
      outlined release of [Input]((uint64_t)&v306);
      uint64_t v86 = swift_bridgeObjectRelease();
      uint64_t v87 = *(void *)(v85 + 16);
      v255 = v35;
      uint64_t v257 = v85;
      if (!v87) {
        goto LABEL_36;
      }
      uint64_t v88 = v85 + 32;
      swift_bridgeObjectRetain();
      uint64_t v89 = v88;
      uint64_t v90 = v87;
      do
      {
        outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v89, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        uint64_t countAndFlagsBits = v292._countAndFlagsBits;
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        if (!countAndFlagsBits)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          while (1)
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v88, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            if (!v292._countAndFlagsBits) {
              break;
            }
            outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            v88 += 96;
            if (!--v87)
            {
              swift_bridgeObjectRelease_n();
              __break(1u);
              break;
            }
          }
          swift_bridgeObjectRelease();
          Swift::String v271 = v289;
          v272[0] = v290;
          v272[1] = v291;
          v272[2] = v292;
          Swift::String v269 = v287;
          Swift::String v270 = v288;
          swift_bridgeObjectRelease();
          if (!v269._object)
          {
LABEL_121:
            __break(1u);
            JUMPOUT(0x25C2826ECLL);
          }
          Swift::String v273 = v269;
          Swift::String v274 = v270;
          uint64_t v275 = v271._countAndFlagsBits;
          char object = (char)v271._object;
          uint64_t v277 = *(void *)&v272[0];
          outlined init with take of MetalFunctionNode?((uint64_t)v272 + 8, (uint64_t)v278, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          Swift::String v287 = v269;
          Swift::String v288 = v270;
          v289._uint64_t countAndFlagsBits = v271._countAndFlagsBits;
          LOBYTE(v289._object) = v271._object;
          v290._uint64_t countAndFlagsBits = *(void *)&v272[0];
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v278, (uint64_t)&v290._object, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          swift_bridgeObjectRetain();
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290._object, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v280);
          v287._uint64_t countAndFlagsBits = 0;
          v287._char object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(77);
          v197._char object = (void *)0x800000025C421630;
          v197._uint64_t countAndFlagsBits = 0xD000000000000025;
          String.append(_:)(v197);
          v198._uint64_t countAndFlagsBits = 0xD000000000000016;
          v198._char object = (void *)0x800000025C421760;
          String.append(_:)(v198);
          uint64_t v279 = v327[3];
          v199._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v199);
          swift_bridgeObjectRelease();
          v200._uint64_t countAndFlagsBits = 1701080942;
          v200._char object = (void *)0xE400000000000000;
          String.append(_:)(v200);
          swift_bridgeObjectRelease();
          v201._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
          v201._char object = (void *)0x800000025C421780;
          String.append(_:)(v201);
          String.append(_:)(v270);
          swift_bridgeObjectRelease();
          v202._uint64_t countAndFlagsBits = 0xD000000000000014;
          v202._char object = (void *)0x800000025C4217A0;
          String.append(_:)(v202);
          Swift::String v203 = v287;
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
          Swift::String v299 = v203;
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          swift_allocError();
          Swift::String *v204 = v287;
          Swift::String v205 = v291;
          Swift::String v207 = v288;
          Swift::String v206 = v289;
          v204[3] = v290;
          v204[4] = v205;
          v204[1] = v207;
          v204[2] = v206;
          Swift::String v208 = v295;
          Swift::String v210 = v292;
          Swift::String v209 = v293;
          v204[7] = v294;
          v204[8] = v208;
          v204[5] = v210;
          v204[6] = v209;
          Swift::String v211 = v299;
          Swift::String v213 = v296;
          Swift::String v212 = v297;
          v204[11] = v298;
          v204[12] = v211;
          v204[9] = v213;
          v204[10] = v212;
          swift_willThrow();
          swift_release();
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v273, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          return swift_release();
        }
        v89 += 96;
        --v90;
      }
      while (v90);
      uint64_t v86 = swift_bridgeObjectRelease();
      v35 = v255;
LABEL_36:
      uint64_t v92 = (*(uint64_t (**)(uint64_t))(*v35 + 144))(v86);
      if (!v92)
      {
        swift_bridgeObjectRelease();
        v280._uint64_t countAndFlagsBits = (uint64_t)v35;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)&v280);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        Swift::String v299 = (Swift::String)0;
        swift_allocError();
        Swift::String *v214 = v287;
        Swift::String v215 = v291;
        Swift::String v217 = v288;
        Swift::String v216 = v289;
        v214[3] = v290;
        v214[4] = v215;
        v214[1] = v217;
        v214[2] = v216;
        Swift::String v218 = v295;
        Swift::String v220 = v292;
        Swift::String v219 = v293;
        v214[7] = v294;
        v214[8] = v218;
        v214[5] = v220;
        v214[6] = v219;
        Swift::String v221 = v299;
        Swift::String v223 = v296;
        Swift::String v222 = v297;
        v214[11] = v298;
        v214[12] = v221;
        v214[9] = v223;
        v214[10] = v222;
LABEL_83:
        swift_willThrow();
        return swift_release();
      }
      uint64_t v93 = v300;
      uint64_t v94 = *(void *)(v300 + 48);
      if (!__OFADD__(v94, 1))
      {
        uint64_t v95 = v92;
        *(void *)(v300 + 48) = v94 + 1;
        uint64_t v253 = type metadata accessor for MetalFunctionCallNode();
        uint64_t v96 = swift_allocObject();
        v97 = (void *)MEMORY[0x263F8EE78];
        *(unsigned char *)(v96 + 72) = 0;
        *(void *)(v96 + 40) = 0;
        *(void *)(v96 + 24) = v97;
        *(void *)(v96 + 32) = v95;
        *(void *)(v96 + 48) = 0;
        *(void *)(v96 + 56) = v262;
        *(void *)(v96 + 64) = v33;
        v287._uint64_t countAndFlagsBits = v262;
        v287._char object = v33;
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        v98._uint64_t countAndFlagsBits = 0x6974636E75666E5CLL;
        v98._char object = (void *)0xEA00000000006E6FLL;
        String.append(_:)(v98);
        swift_release();
        Swift::String v99 = v287;
        swift_beginAccess();
        *(Swift::String *)(v96 + 40) = v99;
        swift_bridgeObjectRelease();
        *(void *)(v96 + 16) = v94;
        uint64_t v100 = specialized MetalShaderProgram.add<A>(_:)(v96);
        swift_retain();
        swift_release();
        swift_release();
        if (v87)
        {
          uint64_t v101 = v257 + 32;
          swift_bridgeObjectRetain();
          do
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v101, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            Swift::String v280 = v287;
            Swift::String v281 = v288;
            v282._uint64_t countAndFlagsBits = v289._countAndFlagsBits;
            LOBYTE(v282._object) = v289._object;
            v283._uint64_t countAndFlagsBits = v290._countAndFlagsBits;
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290._object, (uint64_t)&v283._object, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
            outlined init with take of MetalFunctionNode?((uint64_t)&v283._object, (uint64_t)&v273, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
            v102 = v274._object;
            if (v274._object)
            {
              uint64_t v103 = v275;
              __swift_project_boxed_opaque_existential_1(&v273, (uint64_t)v274._object);
              uint64_t v104 = (*(uint64_t (**)(void *, uint64_t))(v103 + 24))(v102, v103);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v273);
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
              }
              unint64_t v106 = v97[2];
              unint64_t v105 = v97[3];
              if (v106 >= v105 >> 1) {
                v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v105 > 1), v106 + 1, 1, v97);
              }
              v97[2] = v106 + 1;
              v97[v106 + 4] = v104;
            }
            else
            {
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v273, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            }
            v101 += 96;
            --v87;
          }
          while (v87);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        (*(void (**)(void *))(*(void *)v100 + 160))(v97);
        v289._uint64_t countAndFlagsBits = (uint64_t)&protocol witness table for MetalFunctionCallNode;
        v288._char object = (void *)v253;
        v287._uint64_t countAndFlagsBits = v100;
        swift_retain();
        UserGraphCompiler.CompileContext.setOutput(_:for:)(&v287, v327);
        swift_release();
        swift_release();
        goto LABEL_110;
      }
      __break(1u);
LABEL_117:
      swift_once();
LABEL_97:
      uint64_t v230 = *(void *)(v93 + 48);
      uint64_t v231 = MEMORY[0x263F8EE78];
      if (__OFADD__(v230, 1))
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      uint64_t v232 = static MetalDataType.sampler;
      *(void *)(v93 + 48) = v230 + 1;
      uint64_t v264 = type metadata accessor for MetalFunctionCallNode();
      uint64_t v233 = swift_allocObject();
      *(unsigned char *)(v233 + 72) = 0;
      *(void *)(v233 + 40) = 0;
      *(void *)(v233 + 24) = v231;
      *(void *)(v233 + 32) = v232;
      *(void *)(v233 + 48) = 0;
      *(void *)(v233 + 56) = 0x72656C706D6173;
      *(void *)(v233 + 64) = 0xE700000000000000;
      v287._uint64_t countAndFlagsBits = 0x72656C706D6173;
      v287._char object = (void *)0xE700000000000000;
      swift_retain_n();
      v234._uint64_t countAndFlagsBits = 0x6974636E75666E5CLL;
      v234._char object = (void *)0xEA00000000006E6FLL;
      String.append(_:)(v234);
      swift_release();
      Swift::String v235 = v287;
      swift_beginAccess();
      *(Swift::String *)(v233 + 40) = v235;
      swift_bridgeObjectRelease();
      *(void *)(v233 + 16) = v230;
      uint64_t v236 = specialized MetalShaderProgram.add<A>(_:)(v233);
      swift_retain();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t))(*(void *)v236 + 232))(1);
      v287._uint64_t countAndFlagsBits = 0;
      v287._char object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v287._uint64_t countAndFlagsBits = 0xD000000000000011;
      v287._char object = (void *)0x800000025C421660;
      uint64_t v237 = v327[3];
      v280._uint64_t countAndFlagsBits = 1701080942;
      v280._char object = (void *)0xE400000000000000;
      v273._uint64_t countAndFlagsBits = v237;
      v238._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v238);
      swift_bridgeObjectRelease();
      v239._uint64_t countAndFlagsBits = 1701080942;
      v239._char object = (void *)0xE400000000000000;
      String.append(_:)(v239);
      swift_bridgeObjectRelease();
      v240._uint64_t countAndFlagsBits = 39;
      v240._char object = (void *)0xE100000000000000;
      String.append(_:)(v240);
      (*(void (**)(uint64_t, void *))(*(void *)v236 + 208))(v287._countAndFlagsBits, v287._object);
      int64_t v241 = v35[2];
      if (v241)
      {
        uint64_t v258 = v236;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v241, 0);
        uint64_t v242 = (uint64_t)(v35 + 4);
        do
        {
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v242, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          Swift::String v280 = v287;
          Swift::String v281 = v288;
          v282._uint64_t countAndFlagsBits = v289._countAndFlagsBits;
          LOBYTE(v282._object) = v289._object;
          v283._uint64_t countAndFlagsBits = v290._countAndFlagsBits;
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290._object, (uint64_t)&v283._object, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          if (!v285._countAndFlagsBits) {
            goto LABEL_119;
          }
          outlined init with take of MetalFunctionNode((long long *)&v283._object, (uint64_t)&v273);
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          uint64_t v243 = v231;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v231 + 16) + 1, 1);
            uint64_t v243 = v231;
          }
          unint64_t v245 = *(void *)(v243 + 16);
          unint64_t v244 = *(void *)(v243 + 24);
          if (v245 >= v244 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v244 > 1, v245 + 1, 1);
            uint64_t v243 = v231;
          }
          *(void *)(v243 + 16) = v245 + 1;
          outlined init with take of MetalFunctionNode((long long *)&v273._countAndFlagsBits, v243 + 40 * v245 + 32);
          v242 += 96;
          --v241;
        }
        while (v241);
        swift_release();
        uint64_t v236 = v258;
        uint64_t v246 = v264;
      }
      else
      {
        swift_release();
        uint64_t v243 = MEMORY[0x263F8EE78];
        uint64_t v246 = v264;
      }
      (*(void (**)(uint64_t))(*(void *)v236 + 256))(v243);
      swift_bridgeObjectRelease();
      v289._uint64_t countAndFlagsBits = (uint64_t)&protocol witness table for MetalFunctionCallNode;
      v288._char object = (void *)v246;
      v287._uint64_t countAndFlagsBits = v236;
      swift_retain();
      UserGraphCompiler.CompileContext.setOutput(_:for:)(&v287, v327);
LABEL_110:
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v287);
      return v300;
    case 2uLL:
      uint64_t v265 = a2;
      v39 = *(void **)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      if (*(unsigned char *)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x10))
      {
        uint64_t v40 = one-time initialization token for geometry_parameters_private;
        swift_retain();
        swift_retain();
        uint64_t v41 = v267;
        v42 = v327;
        uint64_t v256 = 0xD00000000000001BLL;
        uint64_t v260 = 0x800000025C4216C0;
        if (v40 != -1) {
          swift_once();
        }
        v43 = &static MetalDataType.re.geometry_parameters_private;
      }
      else
      {
        uint64_t v77 = one-time initialization token for surface_parameters_private;
        swift_retain();
        swift_retain();
        uint64_t v41 = v267;
        v42 = v327;
        uint64_t v256 = 0xD000000000000018;
        uint64_t v260 = 0x800000025C421740;
        if (v77 != -1) {
          swift_once();
        }
        v43 = &static MetalDataType.re.surface_parameters_private;
      }
      uint64_t v78 = *v43;
      swift_retain();
      v79 = *(uint64_t (**)(uint64_t))(*v39 + 200);
      uint64_t v80 = swift_retain();
      char v81 = v79(v80);
      type metadata accessor for MetalDataType.Reference();
      swift_allocObject();
      uint64_t v82 = specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(v39, v81 & 1, 0);
      swift_release();
      uint64_t v83 = v42[1];
      outlined init with take of NodePersonality(v42, &v309);
      uint64_t v308 = v42[2];
      outlined retain of NodePersonality(&v309);
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)&v308);
      uint64_t v84 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D476897context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(v83, v265, (uint64_t)v42, &v300);
      if (v41)
      {
        outlined release of NodePersonality(&v309);
        outlined release of [Input]((uint64_t)&v308);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      uint64_t v121 = v84;
      outlined release of NodePersonality(&v309);
      outlined release of [Input]((uint64_t)&v308);
      swift_bridgeObjectRelease();
      uint64_t v122 = MEMORY[0x263F8EE78];
      v273._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
      uint64_t v123 = *(void *)(v121 + 16);
      if (!v123)
      {
LABEL_67:
        swift_bridgeObjectRelease();
        if (*(void *)(v122 + 16) == 1)
        {
          swift_retain();
          swift_retain();
          uint64_t v172 = MetalShaderProgram.createRESurfaceShaderFunctionNode(named:paramsInput:uniformsInput:)(v256, v260, 12324, 0xE200000000000000, v78, 12580, 0xE200000000000000, v82);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v268 = v172;
          swift_beginAccess();
          *(void *)(v172 + 104) = 0xD00000000000001BLL;
          *(void *)(v172 + 112) = 0x800000025C421720;
          swift_bridgeObjectRelease();
          uint64_t v279 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v122 + 32, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          Swift::String v280 = v287;
          Swift::String v281 = v288;
          v282._uint64_t countAndFlagsBits = v289._countAndFlagsBits;
          LOBYTE(v282._object) = v289._object;
          v283._uint64_t countAndFlagsBits = v290._countAndFlagsBits;
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290._object, (uint64_t)&v283._object, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          if (v285._countAndFlagsBits)
          {
            outlined init with take of MetalFunctionNode((long long *)&v283._object, (uint64_t)&v273);
            outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            uint64_t v173 = v279;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v173 + 16) + 1, 1);
              uint64_t v173 = v279;
            }
            unint64_t v13 = *(void *)(v173 + 16);
            unint64_t v26 = *(void *)(v173 + 24);
            int64_t v22 = v13 + 1;
            if (v13 >= v26 >> 1)
            {
LABEL_115:
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v22, 1);
              uint64_t v173 = v279;
            }
            *(void *)(v173 + 16) = v22;
            outlined init with take of MetalFunctionNode((long long *)&v273._countAndFlagsBits, v173 + 40 * v13 + 32);
            swift_release();
            specialized MetalFunctionNode.setInputs(_:)(v173);
            swift_bridgeObjectRelease();
            uint64_t v174 = v327[3];
            swift_beginAccess();
            uint64_t v175 = *(void *)(v268 + 88);
            char v176 = swift_isUniquelyReferenced_nonNull_native();
            v280._uint64_t countAndFlagsBits = *(void *)(v265 + 176);
            *(void *)(v265 + 176) = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v175, v174, v176);
            *(void *)(v265 + 176) = v280._countAndFlagsBits;
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return v300;
          }
          goto LABEL_120;
        }
        swift_release();
        swift_bridgeObjectRelease();
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v280);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
        v299._uint64_t countAndFlagsBits = 0xD000000000000037;
        v299._char object = (void *)0x800000025C4216E0;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        Swift::String *v177 = v287;
        Swift::String v178 = v291;
        Swift::String v180 = v288;
        Swift::String v179 = v289;
        v177[3] = v290;
        v177[4] = v178;
        v177[1] = v180;
        v177[2] = v179;
        Swift::String v181 = v295;
        Swift::String v183 = v292;
        Swift::String v182 = v293;
        v177[7] = v294;
        v177[8] = v181;
        v177[5] = v183;
        v177[6] = v182;
        Swift::String v184 = v299;
        Swift::String v186 = v296;
        Swift::String v185 = v297;
        v177[11] = v298;
        v177[12] = v184;
        v177[9] = v186;
        v177[10] = v185;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      unint64_t v4 = 0;
      uint64_t v124 = v121 + 32;
      while (v4 < *(void *)(v121 + 16))
      {
        outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v124, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        if (v292._countAndFlagsBits)
        {
          Swift::String v282 = v289;
          Swift::String v283 = v290;
          Swift::String v284 = v291;
          Swift::String v285 = v292;
          Swift::String v280 = v287;
          Swift::String v281 = v288;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v122 + 16) + 1, 1);
          }
          uint64_t v122 = v273._countAndFlagsBits;
          unint64_t v126 = *(void *)(v273._countAndFlagsBits + 16);
          unint64_t v125 = *(void *)(v273._countAndFlagsBits + 24);
          if (v126 >= v125 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v125 > 1, v126 + 1, 1);
            uint64_t v122 = v273._countAndFlagsBits;
          }
          *(void *)(v122 + 16) = v126 + 1;
          v127 = (_OWORD *)(v122 + 96 * v126);
          v127[4] = v282;
          v127[5] = v283;
          v127[6] = v284;
          v127[7] = v285;
          v127[2] = v280;
          v127[3] = v281;
        }
        else
        {
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        }
        ++v4;
        v124 += 96;
        if (v123 == v4) {
          goto LABEL_67;
        }
      }
      __break(1u);
      goto LABEL_112;
    case 3uLL:
      uint64_t v44 = *(void *)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v45 = *(void **)((a4 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v314 = v8;
      uint64_t v46 = *(void *)(v8 + 16);
      if (!v46)
      {
        v280._uint64_t countAndFlagsBits = v6;
        v280._char object = (void *)v7;
        v281._uint64_t countAndFlagsBits = v8;
        v281._char object = v9;
        v282._uint64_t countAndFlagsBits = (uint64_t)v10;
        LOBYTE(v282._object) = v11 & 1;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v280);
        v287._uint64_t countAndFlagsBits = 0;
        v287._char object = (void *)0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        v287._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
        v287._char object = (void *)0x800000025C421680;
        v107 = v327;
        v273._uint64_t countAndFlagsBits = 1701080942;
        v273._char object = (void *)0xE400000000000000;
        v108._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v108);
        swift_bridgeObjectRelease();
        String.append(_:)(v273);
        swift_bridgeObjectRelease();
        v109._uint64_t countAndFlagsBits = 0xD000000000000010;
        v109._char object = (void *)0x800000025C4216A0;
        String.append(_:)(v109);
        Swift::String v110 = v287;
        outlined init with take of NodePersonality(v107, &v311);
        uint64_t v310 = v107[1];
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
        Swift::String v299 = v110;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        Swift::String *v111 = v287;
        Swift::String v112 = v291;
        Swift::String v114 = v288;
        Swift::String v113 = v289;
        v111[3] = v290;
        v111[4] = v112;
        v111[1] = v114;
        v111[2] = v113;
        Swift::String v115 = v295;
        Swift::String v117 = v292;
        Swift::String v116 = v293;
        v111[7] = v294;
        v111[8] = v115;
        v111[5] = v117;
        v111[6] = v116;
        Swift::String v118 = v299;
        Swift::String v120 = v296;
        Swift::String v119 = v297;
        v111[11] = v298;
        v111[12] = v118;
        v111[9] = v120;
        v111[10] = v119;
        outlined retain of [Input]((uint64_t)&v314);
        outlined retain of NodePersonality(&v311);
        outlined retain of [Input]((uint64_t)&v310);
        goto LABEL_83;
      }
      v252 = v45;
      uint64_t v254 = v44;
      v47 = (void **)(v8 + 56 * v46);
      uint64_t v48 = (uint64_t)*(v47 - 3);
      v49 = *(v47 - 2);
      uint64_t v50 = (uint64_t)*(v47 - 1);
      v51 = *v47;
      v52 = v47[1];
      char v53 = *((unsigned char *)v47 + 16);
      v54 = v47[3];
      uint64_t v250 = v50;
      uint64_t v251 = v48;
      v324[0] = v48;
      v324[1] = v49;
      v324[2] = v50;
      v324[3] = v51;
      uint64_t v249 = (uint64_t)v52;
      v324[4] = v52;
      char v248 = v53;
      char v325 = v53;
      uint64_t v247 = (uint64_t)v54;
      v326 = v54;
      v261 = *(uint64_t (**)(uint64_t))(*(void *)v49 + 144);
      swift_retain();
      swift_retain();
      uint64_t v55 = swift_bridgeObjectRetain();
      uint64_t v56 = v261(v55);
      if (v56)
      {
        uint64_t v57 = v56;
        swift_retain();
        uint64_t v58 = MetalShaderProgram.createGetArgument(resultType:argumentName:)(v57, v254, (uint64_t)v252);
        swift_release();
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        v287._uint64_t countAndFlagsBits = 0x6772412064616552;
        v287._char object = (void *)0xEF5B20746E656D75;
        v59._uint64_t countAndFlagsBits = v254;
        v59._char object = v252;
        String.append(_:)(v59);
        v60._uint64_t countAndFlagsBits = 93;
        v60._char object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        uint64_t v61 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v58 + 176))(0x6772412064616552, 0xEF5B20746E656D75);
        uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 120))(v61);
        swift_retain();
        swift_bridgeObjectRetain();
        char v63 = swift_isUniquelyReferenced_nonNull_native();
        v287._uint64_t countAndFlagsBits = *(void *)(a2 + 192);
        *(void *)(a2 + 192) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v62, (uint64_t)v324, v63);
        *(void *)(a2 + 192) = v287._countAndFlagsBits;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        return v300;
      }
      v161 = v327;
      outlined init with take of NodePersonality(v327, &v313);
      uint64_t v312 = v161[1];
      v280._uint64_t countAndFlagsBits = v251;
      v280._char object = v49;
      v281._uint64_t countAndFlagsBits = v250;
      v281._char object = v51;
      v282._uint64_t countAndFlagsBits = v249;
      LOBYTE(v282._object) = v248;
      v283._uint64_t countAndFlagsBits = v247;
      v283._char object = (void *)v6;
      v284._uint64_t countAndFlagsBits = v7;
      v284._char object = (void *)v8;
      v285._uint64_t countAndFlagsBits = (uint64_t)v9;
      v285._char object = v10;
      char v286 = v11 & 1;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi27_((uint64_t)&v280);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v280, (uint64_t)&v287);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      Swift::String v299 = (Swift::String)0;
      swift_allocError();
      Swift::String *v162 = v287;
      Swift::String v163 = v291;
      Swift::String v165 = v288;
      Swift::String v164 = v289;
      v162[3] = v290;
      v162[4] = v163;
      v162[1] = v165;
      v162[2] = v164;
      Swift::String v166 = v295;
      Swift::String v168 = v292;
      Swift::String v167 = v293;
      v162[7] = v294;
      v162[8] = v166;
      v162[5] = v168;
      v162[6] = v167;
      Swift::String v169 = v299;
      Swift::String v171 = v296;
      Swift::String v170 = v297;
      v162[11] = v298;
      v162[12] = v169;
      v162[9] = v171;
      v162[10] = v170;
      outlined retain of [Input]((uint64_t)&v314);
      outlined retain of NodePersonality(&v313);
      outlined retain of [Input]((uint64_t)&v312);
      swift_willThrow();
      return swift_release();
    case 7uLL:
      switch(a4)
      {
        case 0xE000000000000000:
          goto LABEL_19;
        case 0xE000000000000008:
          v159 = v327;
          outlined init with take of NodePersonality(v327, &v316);
          uint64_t v315 = v159[2];
          swift_retain();
          outlined retain of NodePersonality(&v316);
          swift_bridgeObjectRetain();
          outlined retain of [Input]((uint64_t)&v315);
          uint64_t v160 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D476897context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(v7, a2, (uint64_t)v159, &v300);
          if (v267)
          {
            outlined release of NodePersonality(&v316);
            outlined release of [Input]((uint64_t)&v315);
            goto LABEL_64;
          }
          unint64_t v4 = v160;
          outlined release of NodePersonality(&v316);
          outlined release of [Input]((uint64_t)&v315);
          swift_bridgeObjectRelease();
          v35 = (void *)MEMORY[0x263F8EE78];
          v273._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
          uint64_t v263 = *(void *)(v4 + 16);
          if (!v263)
          {
LABEL_96:
            swift_bridgeObjectRelease();
            uint64_t v93 = v300;
            uint64_t v229 = one-time initialization token for sampler;
            swift_retain();
            if (v229 != -1) {
              goto LABEL_117;
            }
            goto LABEL_97;
          }
          unint64_t v224 = 0;
          uint64_t v225 = v4 + 32;
          while (v224 < *(void *)(v4 + 16))
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v225, (uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            if (v292._countAndFlagsBits)
            {
              Swift::String v282 = v289;
              Swift::String v283 = v290;
              Swift::String v284 = v291;
              Swift::String v285 = v292;
              Swift::String v280 = v287;
              Swift::String v281 = v288;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1);
              }
              v35 = (void *)v273._countAndFlagsBits;
              unint64_t v227 = *(void *)(v273._countAndFlagsBits + 16);
              unint64_t v226 = *(void *)(v273._countAndFlagsBits + 24);
              if (v227 >= v226 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v226 > 1, v227 + 1, 1);
                v35 = (void *)v273._countAndFlagsBits;
              }
              v35[2] = v227 + 1;
              v228 = &v35[12 * v227];
              v228[4] = v282;
              v228[5] = v283;
              v228[6] = v284;
              v228[7] = v285;
              v228[2] = v280;
              v228[3] = v281;
            }
            else
            {
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v287, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            }
            ++v224;
            v225 += 96;
            if (v263 == v224) {
              goto LABEL_96;
            }
          }
LABEL_112:
          __break(1u);
          break;
        case 0xE000000000000010:
LABEL_19:
          swift_retain();
          return v300;
        default:
LABEL_20:
          uint64_t v64 = one-time initialization token for logger;
          swift_retain();
          if (v64 == -1) {
            goto LABEL_21;
          }
          break;
      }
      swift_once();
LABEL_21:
      uint64_t v65 = type metadata accessor for Logger();
      __swift_project_value_buffer(v65, (uint64_t)logger);
      v66 = v327;
      outlined init with take of NodePersonality(v327, &v319);
      uint64_t v67 = v66[2];
      uint64_t v318 = v66[1];
      uint64_t v317 = v67;
      outlined copy of NodePersonality(v4);
      outlined retain of NodePersonality(&v319);
      outlined retain of [Input]((uint64_t)&v318);
      outlined retain of [Input]((uint64_t)&v317);
      outlined copy of NodePersonality(v4);
      outlined retain of NodePersonality(&v319);
      outlined retain of [Input]((uint64_t)&v318);
      outlined retain of [Input]((uint64_t)&v317);
      v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        v280._uint64_t countAndFlagsBits = v71;
        *(_DWORD *)uint64_t v70 = 136315650;
        v287._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x800000025C421630, &v280._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v70 + 12) = 2080;
        v287._uint64_t countAndFlagsBits = v4;
        outlined copy of NodePersonality(v4);
        uint64_t v72 = String.init<A>(describing:)();
        v287._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v280._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v4);
        outlined consume of NodePersonality(v4);
        *(_WORD *)(v70 + 22) = 2080;
        uint64_t v74 = v327[3];
        v287._uint64_t countAndFlagsBits = 1701080942;
        v287._char object = (void *)0xE400000000000000;
        v273._uint64_t countAndFlagsBits = v74;
        v75._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        v287._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v287._countAndFlagsBits, (unint64_t)v287._object, &v280._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of NodePersonality(&v319);
        outlined release of [Input]((uint64_t)&v318);
        outlined release of [Input]((uint64_t)&v317);
        outlined release of NodePersonality(&v319);
        outlined release of [Input]((uint64_t)&v318);
        outlined release of [Input]((uint64_t)&v317);
        _os_log_impl(&dword_25C27E000, v68, v69, "%s: Called with unhandled node type %s. Node: '%s'", (uint8_t *)v70, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x261185880](v71, -1, -1);
        MEMORY[0x261185880](v70, -1, -1);
      }
      else
      {
        outlined consume of NodePersonality(v4);
        outlined consume of NodePersonality(v4);
        outlined release of NodePersonality(&v319);
        outlined release of [Input]((uint64_t)&v318);
        outlined release of [Input]((uint64_t)&v317);
        outlined release of NodePersonality(&v319);
        outlined release of [Input]((uint64_t)&v318);
        outlined release of [Input]((uint64_t)&v317);
      }

      return v300;
    default:
      goto LABEL_20;
  }
}

uint64_t specialized MetalFunctionNode.setInputs(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = a1 + 32;
    uint64_t v3 = v16;
    do
    {
      outlined init with copy of MetalFunctionNode(v5, (uint64_t)v13);
      uint64_t v6 = v14;
      uint64_t v7 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v16;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v16;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(void *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  uint64_t v11 = *v1;
  swift_beginAccess();
  *(void *)(v11 + 96) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for FunctionGraphInsertable.emitFunctionNodes(node:context:into:) in conformance NodePersonality(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NodePersonality.emitFunctionNodes(node:context:into:)(a1, a2, a3, *v3);
}

uint64_t closure #1 in ShaderGraphNode.mapConnectedInputs(context:into:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v83 = a3;
  Swift::String v10 = (Swift::String)a1[1];
  long long v73 = *a1;
  Swift::String v74 = v10;
  long long v75 = a1[2];
  uint64_t v76 = *((void *)a1 + 6);
  long long v11 = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 96);
  v79[7] = *(_OWORD *)(a2 + 112);
  v79[8] = v11;
  v80[0] = v12;
  *(_OWORD *)((char *)v80 + 9) = *(_OWORD *)(a2 + 153);
  long long v14 = *(_OWORD *)(a2 + 80);
  v79[4] = *(_OWORD *)(a2 + 64);
  v79[5] = v14;
  v79[6] = v13;
  long long v15 = *(_OWORD *)(a2 + 16);
  v79[0] = *(_OWORD *)a2;
  v79[1] = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  v79[2] = *(_OWORD *)(a2 + 32);
  v79[3] = v16;
  outlined retain of Graph((uint64_t)v79);
  Graph.edge(to:)((uint64_t)&v73, v70);
  uint64_t v17 = outlined init with take of MetalFunctionNode?((uint64_t)v70, (uint64_t)v71, &demangling cache variable for type metadata for Edge?);
  uint64_t v18 = v72;
  if (v72)
  {
    uint64_t v64 = a5;
    uint64_t v19 = *((void *)&v73 + 1);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(**((void **)&v73 + 1) + 144))(v17);
    if (v20 || (uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v18 + 144))()) != 0)
    {
      long long v21 = *(_OWORD *)(a2 + 176);
      v77[10] = *(_OWORD *)(a2 + 160);
      v77[11] = v21;
      uint64_t v78 = *(void *)(a2 + 192);
      long long v22 = *(_OWORD *)(a2 + 112);
      v77[6] = *(_OWORD *)(a2 + 96);
      v77[7] = v22;
      long long v23 = *(_OWORD *)(a2 + 144);
      v77[8] = *(_OWORD *)(a2 + 128);
      v77[9] = v23;
      long long v24 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v77[3] = v24;
      long long v25 = *(_OWORD *)(a2 + 80);
      v77[4] = *(_OWORD *)(a2 + 64);
      v77[5] = v25;
      long long v26 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v26;
      uint64_t v27 = *a4;
      outlined retain of UserGraphCompiler.CompileContext((uint64_t)v77);
      swift_retain();
      UserGraphCompiler.CompileContext.compiledNode(for:in:)((uint64_t)&v73, v27, (uint64_t)&v66);
      swift_release();
      outlined release of UserGraphCompiler.CompileContext((uint64_t)v77);
      if (v67)
      {
        outlined release of Graph((uint64_t)v79);
        outlined release of Edge?(v70);
        swift_release();
        outlined init with take of MetalFunctionNode((long long *)&v66._countAndFlagsBits, (uint64_t)v68);
        Swift::String v28 = v74;
        Swift::String v82 = v74;
        *(_OWORD *)a6 = v73;
        *(Swift::String *)(a6 + 16) = v28;
        *(_OWORD *)(a6 + 32) = v75;
        *(void *)(a6 + 48) = v76;
        outlined init with take of MetalFunctionNode(v68, a6 + 56);
        swift_retain();
        return outlined retain of String((uint64_t)&v82);
      }
      else
      {
        uint64_t result = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v66, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
        uint64_t v31 = *(void *)(*a4 + 48);
        if (__OFADD__(v31, 1))
        {
          __break(1u);
        }
        else
        {
          *(void *)(*a4 + 48) = v31 + 1;
          uint64_t v65 = type metadata accessor for MetalPassthroughNode();
          uint64_t v32 = swift_allocObject();
          *(void *)(v32 + 32) = 0;
          *(void *)(v32 + 40) = 0;
          *(void *)(v32 + 48) = MEMORY[0x263F8EE78];
          *(unsigned char *)(v32 + 56) = 0;
          *(void *)(v32 + 16) = v31;
          *(void *)(v32 + 24) = v20;
          swift_retain();
          swift_retain();
          uint64_t v33 = specialized MetalShaderProgram.add<A>(_:)(v32);
          swift_retain();
          swift_release();
          swift_release();
          *(void *)&v68[0] = 0;
          *((void *)&v68[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(25);
          swift_bridgeObjectRelease();
          *(void *)&v68[0] = 0xD000000000000013;
          *((void *)&v68[0] + 1) = 0x800000025C421990;
          v66._uint64_t countAndFlagsBits = 1701080942;
          v66._char object = (void *)0xE400000000000000;
          v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          String.append(_:)(v66);
          swift_bridgeObjectRelease();
          v35._uint64_t countAndFlagsBits = 58;
          v35._char object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          Swift::String v36 = v74;
          swift_bridgeObjectRetain();
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          v37._uint64_t countAndFlagsBits = 93;
          v37._char object = (void *)0xE100000000000000;
          String.append(_:)(v37);
          uint64_t v38 = (*(uint64_t (**)(void, void))(*(void *)v33 + 152))(*(void *)&v68[0], *((void *)&v68[0] + 1));
          uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 120))(v38);
          swift_retain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v68[0] = *(void *)(a2 + 184);
          *(void *)(a2 + 184) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v39, (uint64_t)&v73, isUniquelyReferenced_nonNull_native);
          *(void *)(a2 + 184) = *(void *)&v68[0];
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          Swift::String v41 = v74;
          *(_OWORD *)a6 = v73;
          *(Swift::String *)(a6 + 16) = v41;
          *(_OWORD *)(a6 + 32) = v75;
          *(void *)(a6 + 48) = v76;
          *(void *)(a6 + 80) = v65;
          *(void *)(a6 + 88) = &protocol witness table for MetalPassthroughNode;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined release of Graph((uint64_t)v79);
          outlined release of Edge?(v70);
          uint64_t result = swift_release();
          *(void *)(a6 + 56) = v33;
        }
      }
    }
    else
    {
      v66._uint64_t countAndFlagsBits = v19;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)&v66);
      *(void *)&v68[0] = 0;
      *((void *)&v68[0] + 1) = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(61);
      v42._uint64_t countAndFlagsBits = 0xD000000000000022;
      v42._char object = (void *)0x800000025C421960;
      String.append(_:)(v42);
      Swift::String v43 = v74;
      swift_bridgeObjectRetain();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._uint64_t countAndFlagsBits = 0x646F6E206E6F2027;
      v44._char object = (void *)0xEB00000000272065;
      String.append(_:)(v44);
      v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46._uint64_t countAndFlagsBits = 1701080942;
      v46._char object = (void *)0xE400000000000000;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._uint64_t countAndFlagsBits = 0x3D65707954202E27;
      v47._char object = (void *)0xE900000000000027;
      String.append(_:)(v47);
      uint64_t v48 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 136);
      uint64_t v49 = swift_retain();
      v50._uint64_t countAndFlagsBits = v48(v49);
      String.append(_:)(v50);
      swift_release();
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = 39;
      v51._char object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      long long v52 = v68[0];
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v66, (uint64_t)v68);
      long long v69 = v52;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      uint64_t v53 = swift_allocError();
      _OWORD *v54 = v68[0];
      long long v55 = v68[4];
      long long v57 = v68[1];
      long long v56 = v68[2];
      v54[3] = v68[3];
      v54[4] = v55;
      v54[1] = v57;
      v54[2] = v56;
      long long v58 = v68[8];
      long long v60 = v68[5];
      long long v59 = v68[6];
      v54[7] = v68[7];
      v54[8] = v58;
      v54[5] = v60;
      v54[6] = v59;
      long long v61 = v69;
      long long v63 = v68[9];
      long long v62 = v68[10];
      v54[11] = v68[11];
      v54[12] = v61;
      v54[9] = v63;
      v54[10] = v62;
      swift_willThrow();
      outlined release of Edge?(v70);
      uint64_t result = outlined release of Graph((uint64_t)v79);
      *uint64_t v64 = v53;
    }
  }
  else
  {
    outlined release of Graph((uint64_t)v79);
    Swift::String v30 = v74;
    Swift::String v81 = v74;
    *(_OWORD *)a6 = v73;
    *(Swift::String *)(a6 + 16) = v30;
    *(_OWORD *)(a6 + 32) = v75;
    *(void *)(a6 + 48) = v76;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_OWORD *)(a6 + 72) = 0u;
    *(void *)(a6 + 88) = 0;
    swift_retain();
    return outlined retain of String((uint64_t)&v81);
  }
  return result;
}

uint64_t (*default argument 2 of SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)())()
{
  return default argument 1 of OSSignpostIntervalState.init(id:isOpen:);
}

uint64_t default argument 2 of SGInput.init(name:type:attachment:)()
{
  return 0;
}

uint64_t default argument 2 of SGOutput.init(name:type:attachment:)()
{
  return 0;
}

uint64_t default argument 2 of DataTypeProperty.init(label:type:attributes:index:visible:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 4 of DataTypeProperty.init(label:type:attributes:index:visible:)()
{
  return 1;
}

uint64_t default argument 1 of MetalDataType.Pointer.init(to:isConst:addressSpace:)()
{
  return 0;
}

uint64_t default argument 0 of MetalDataType.Function.init(resultType:argumentTypes:)()
{
  if (one-time initialization token for void != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t default argument 1 of MetalDataType.Function.init(resultType:argumentTypes:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of MetalDataType.Reference.init(to:isConst:addressSpace:)()
{
  return 0;
}

uint64_t default argument 1 of SGGraph.ReplacementNode.init(name:_:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 10 of NodeDef.init(name:nodeName:inherit:nodegroup:version:isdefaultversion:targets:uiName:inputs:outputs:available:)()
{
  return 0;
}

uint64_t default argument 1 of createDotText(representing:inputNodeIDs:outputNodeIDs:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of createDotText(representing:inputNodeIDs:outputNodeIDs:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of Graph.init(label:inputs:outputs:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of Graph.init(label:inputs:outputs:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 0 of OrderedSet.removeAll(keepingCapacity:)()
{
  return 0;
}

uint64_t outlined retain of Graph(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  unint64_t v4 = *(void *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t outlined copy of NodePersonality(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined release of Graph(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  unint64_t v4 = *(void *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NodePersonality(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t outlined consume of NodePersonality(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t default argument 1 of OrderedSet.init(minimumCapacity:persistent:)()
{
  return 0;
}

uint64_t default argument 1 of OrderedDictionary.init(minimumCapacity:persistent:)()
{
  return 0;
}

uint64_t default argument 2 of MetalFunctionGraphError.init(_:details:underlyingErrors:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t outlined init with take of SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

id outlined copy of SGDataTypeStorage(id result, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 23 || a9 == 22) {
    return result;
  }
  if (a9 == 6) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of SGDataTypeStorage(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

void outlined consume of SGDataTypeStorage(void *a1, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 23 || a9 == 22)
  {
  }
  else if (a9 == 6)
  {
    swift_bridgeObjectRelease();
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance SGDataType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGDataType(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGDataType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SGDataType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGDataType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x261183E60](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SGDataType(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef()
{
  swift_getWitnessTable();
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSURLResourceKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x261183E60](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v3 = lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSURLResourceKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  uint64_t v4 = 1701080942;
  unint64_t v5 = 0xE400000000000000;
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void *(*a1)(uint64_t *__return_ptr))
{
  Swift::String v1 = a1(&v4);
  uint64_t v2 = (*(uint64_t (**)(void *))(*(void *)v4 + 136))(v1);
  swift_release();
  return v2;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLElement>, &demangling cache variable for type metadata for XMLElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>, (uint64_t)&type metadata for InputSpec, (void (*)(void, int64_t, void *, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalConstExprFunctionNode>, &demangling cache variable for type metadata for MetalConstExprFunctionNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLNode>, &demangling cache variable for type metadata for XMLNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.IOSpec>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>, (uint64_t)&type metadata for OutputSpec, (void (*)(void, int64_t, void *, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MaterialXDataType)>, (uint64_t)&demangling cache variable for type metadata for (name: String, type: MaterialXDataType), (void (*)(void, int64_t, void *, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(element: XMLElement, node: ShaderGraphNode)>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalSourceGenerator>, (uint64_t *)&demangling cache variable for type metadata for MetalSourceGenerator);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MetalDataType)>, (uint64_t)&demangling cache variable for type metadata for (name: String, type: MetalDataType), (void (*)(void, int64_t, void *, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGOutput)>, (uint64_t)&demangling cache variable for type metadata for (String, SGOutput), (void (*)(void, int64_t, void *, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGInput)>, (uint64_t)&demangling cache variable for type metadata for (String, SGInput), (void (*)(void, int64_t, void *, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FunctionNodeID>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[22 * v8 + 4]) {
          memmove(v12, a4 + 4, 176 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (String, MetalDataType))>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedTexture>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Path>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ObjectIdentifier, ShaderGraphNode.ID)>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MTLLibrary)>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(DataTypeProperty, UInt32)>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Element>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Node>);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4]) {
          memmove(v12, a4 + 4, 160 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DebugConfig.Group>);
      Swift::String v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    Swift::String v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    Swift::String v10 = (char *)MEMORY[0x263F8EE78];
  }
  long long v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      size_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      long long v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v9 + 4]) {
          memmove(v13, a4 + 4, 56 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      size_t v11 = (void *)MEMORY[0x263F8EE78];
      long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x263F06EA8], MEMORY[0x263F06EA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.Implementation>, type metadata accessor for NodeDef.Implementation, type metadata accessor for NodeDef.Implementation);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  void *v16;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      void v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakBox<SGEdge>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = (unint64_t)(v10 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = MEMORY[0x263F8EE78] + 32;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 8 * v8)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t a6, void (*a7)(void, int64_t, void *, void *, uint64_t))
{
  char v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v12 = a2;
    goto LABEL_8;
  }
  unint64_t v11 = a4[3];
  int64_t v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v12 + 0x4000000000000000 >= 0)
  {
    int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v12 = a2;
    }
LABEL_8:
    int64_t v13 = a4[2];
    if (v12 <= v13) {
      int64_t v14 = a4[2];
    }
    else {
      int64_t v14 = v12;
    }
    if (v14)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v15 = (void *)swift_allocObject();
      size_t v16 = _swift_stdlib_malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
      unint64_t v17 = v15 + 4;
      if (v10)
      {
LABEL_13:
        if (v15 != a4 || v17 >= &a4[3 * v13 + 4]) {
          memmove(v17, a4 + 4, 24 * v13);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v15 = (void *)MEMORY[0x263F8EE78];
      unint64_t v17 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    a7(0, v13, v17, a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 + 31;
      }
      v13[2] = v11;
      void v13[3] = 2 * (v15 >> 6);
      size_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v13 = (void *)MEMORY[0x263F8EE78];
      size_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[8 * v11 + 4]) {
          memmove(v16, a4 + 4, v11 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<FunctionNodeID>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode.ID>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x263F06EA8]);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.IOSpec>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[ShaderGraphNode.ID]>, &demangling cache variable for type metadata for [ShaderGraphNode.ID]);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalConstExprFunctionNode>, &demangling cache variable for type metadata for MetalConstExprFunctionNode);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(FunctionNodeID, MetalFunctionNode)]>, &demangling cache variable for type metadata for [(FunctionNodeID, MetalFunctionNode)]);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TypedTexture]>, &demangling cache variable for type metadata for [TypedTexture]);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TextureAssignment>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MaterialXDataType)>, (uint64_t *)&demangling cache variable for type metadata for (name: String, type: MaterialXDataType));
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGNode)>, &demangling cache variable for type metadata for (String, SGNode));
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGOutput)>, &demangling cache variable for type metadata for (String, SGOutput));
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGInput)>, &demangling cache variable for type metadata for (String, SGInput));
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Output>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Input>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.GeomProp>);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.Implementation>, type metadata accessor for NodeDef.Implementation);
  *unint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FunctionNodeID>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode.ID>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph.Adjacent>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[112 * v8] || v12 >= &v13[112 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BuiltInDefinition>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedTexture>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureSource>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  int64_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Path>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BuiltInDefinition.OutputSpec>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BuiltInDefinition.InputSpec>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  uint64_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Element>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[144 * v8]) {
      memmove(v12, v13, 144 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[144 * v8] || v12 >= &v13[144 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MetalLibrary>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  uint64_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Node>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[160 * v8]) {
      memmove(v12, v13, 160 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[160 * v8] || v12 >= &v13[160 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetalDataType?)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetalDataType?));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(input: Input, fNode: MetalFunctionNode?)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OrderedSet<Input>>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrderedSet<Input>);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Output?>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output?);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (uniformPropertyName: String, type: MetalDataType))>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (uniformPropertyName: String, type: MetalDataType)));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FunctionNodeID, MetalFunctionNode)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<XMLNode>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XMLNode);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, BuiltInDefinition)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 4;
  int64_t v14 = a4 + 4;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v10 + 4, a4 + 4, v8 << 6);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, BuiltInDefinition));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakBox<SGEdge>>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v13 >= v14 + 8 * v8)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexingIterator<[SGNode]>>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[SGNode]>);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TypedTexture]>, &demangling cache variable for type metadata for [TypedTexture]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(BuiltInDefinition.InputSpec, SGInput)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BuiltInDefinition.InputSpec, SGInput));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  int64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ShaderGraphNode)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 4;
  int64_t v14 = a4 + 4;
  uint64_t v15 = v8 << 6;
  if (a1)
  {
    if (v10 != a4 || v13 >= (void *)((char *)v14 + v15)) {
      memmove(v10 + 4, a4 + 4, v15);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (void *)((char *)v13 + v15) || v13 >= (void *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ShaderGraphNode));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Key, String)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Key, String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, GeomPropDef)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  int64_t v14 = 10 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GeomPropDef));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NodeDef)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 160 * v8) {
      memmove(v10 + 4, a4 + 4, 160 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 160 * v8 || v12 >= v13 + 160 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NodeDef));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9]) {
      memmove(v13, v14, 56 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v9] || v13 >= &v14[56 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  uint64_t v15 = 48 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v9] || v13 >= &v14[24 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 144);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  uint64_t v15 = 144 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  size_t v16 = v9 << 6;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    unint64_t v15 = v14 - 32;
    if (v14 < 32) {
      unint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    void v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11) {
      memmove(v13 + 4, a4 + 4, 24 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  long long v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  int64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    __swift_destroy_boxed_opaque_existential_1Tm(v17);
    return outlined init with take of MetalFunctionNode(a1, v17);
  }
LABEL_13:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(*(void *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  long long v18 = *(_OWORD *)(a2 + 16);
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
  swift_retain();
  return outlined retain of String((uint64_t)&v18);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t vars8;

  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(*(void *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  long long v18;

  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(*(void *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  long long v18 = *(_OWORD *)(a2 + 16);
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
  swift_retain();
  return outlined retain of String((uint64_t)&v18);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      long long v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  long long v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + (v12 << 6);
    return outlined assign with take of GeomPropDef((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      long long v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  long long v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 144 * v12;
    return outlined assign with take of NodeDef((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, _OWORD *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7] + 48 * v10;
      outlined consume of NodePersonality(*(void *)v17);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v19 = a1[1];
      *(_OWORD *)uint64_t v17 = *a1;
      *(_OWORD *)(v17 + 16) = v19;
      *(_OWORD *)(v17 + 25) = *(_OWORD *)((char *)a1 + 25);
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with take of SGDataTypeStorage((uint64_t)a2, (uint64_t)v22);
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
  outlined retain of SGDataTypeStorage((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
  return swift_retain();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      long long v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_bridgeObjectRelease();
      *long long v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, _OWORD *a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      long long v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *long long v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with take of SGDataTypeStorage((uint64_t)a3, (uint64_t)v23);
  specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
  outlined retain of SGDataTypeStorage((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
  return swift_retain();
}

uint64_t specialized static NodePersonality.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 61)
  {
    case 1uLL:
      if (a2 >> 61 != 1) {
        goto LABEL_52;
      }
      uint64_t v7 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      BOOL v8 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)
        && *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      if (v8 || (char v6 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        char v9 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 128);
        swift_retain();
        uint64_t v10 = swift_retain();
        char v6 = v9(v10);
        swift_release();
        swift_release();
      }
      return v6 & 1;
    case 2uLL:
      if (a2 >> 61 != 2) {
        goto LABEL_52;
      }
      uint64_t v11 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v12 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      BOOL v13 = *(unsigned char *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) == 0;
      if (*(unsigned char *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)) {
        unint64_t v14 = 0xD000000000000010;
      }
      else {
        unint64_t v14 = 0x65636166727573;
      }
      if (v13) {
        unint64_t v15 = 0xE700000000000000;
      }
      else {
        unint64_t v15 = 0x800000025C41FDD0;
      }
      if (*(unsigned char *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)) {
        unint64_t v16 = 0xD000000000000010;
      }
      else {
        unint64_t v16 = 0x65636166727573;
      }
      if (*(unsigned char *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)) {
        unint64_t v17 = 0x800000025C41FDD0;
      }
      else {
        unint64_t v17 = 0xE700000000000000;
      }
      if (v14 == v16 && v15 == v17)
      {
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          swift_release();
          swift_release();
          goto LABEL_52;
        }
      }
      char v31 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 128))(v12);
      swift_release();
      swift_release();
      return v31 & 1;
    case 3uLL:
      if (a2 >> 61 != 3) {
        goto LABEL_52;
      }
      goto LABEL_36;
    case 4uLL:
      if (a2 >> 61 != 4) {
        goto LABEL_52;
      }
      goto LABEL_36;
    case 5uLL:
      if (a2 >> 61 != 5) {
        goto LABEL_52;
      }
LABEL_36:
      if (*(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)
        && *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18))
      {
        goto LABEL_50;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    case 6uLL:
      long long v22 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
      v32[7] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
      v32[8] = v22;
      v33[0] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
      *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
      long long v23 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
      v32[3] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      v32[4] = v23;
      long long v24 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
      v32[5] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
      v32[6] = v24;
      long long v25 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      v32[0] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v32[1] = v25;
      v32[2] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      if (a2 >> 61 != 6) {
        goto LABEL_52;
      }
      long long v26 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
      v34[7] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
      v34[8] = v26;
      v35[0] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
      *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
      long long v27 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
      v34[3] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      v34[4] = v27;
      long long v28 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
      v34[5] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
      v34[6] = v28;
      long long v29 = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      v34[0] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v34[1] = v29;
      v34[2] = *(_OWORD *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      outlined retain of Graph((uint64_t)v32);
      outlined retain of Graph((uint64_t)v34);
      char v6 = specialized static Graph.== infix(_:_:)((uint64_t)v32, (uint64_t)v34);
      outlined release of Graph((uint64_t)v34);
      outlined release of Graph((uint64_t)v32);
      return v6 & 1;
    case 7uLL:
      unint64_t v30 = 0xE000000000000000;
      if (a1 == 0xE000000000000000 || (unint64_t v30 = 0xE000000000000008, a1 == 0xE000000000000008))
      {
        if (a2 != v30) {
          goto LABEL_52;
        }
      }
      else if (a2 != 0xE000000000000010)
      {
        goto LABEL_52;
      }
LABEL_50:
      char v6 = 1;
      break;
    default:
      outlined init with take of SGDataTypeStorage(a1 + 16, (uint64_t)v32);
      if (a2 >> 61) {
        goto LABEL_52;
      }
      uint64_t v4 = *(void *)(a1 + 88);
      outlined init with take of SGDataTypeStorage(a2 + 16, (uint64_t)v34);
      uint64_t v5 = *(void *)(a2 + 88);
      outlined retain of SGDataTypeStorage((uint64_t)v32, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      swift_retain();
      swift_retain();
      if (specialized static SGDataTypeStorage.== infix(_:_:)((uint64_t)v32, (uint64_t)v34))
      {
        char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v5);
        swift_release();
        swift_release();
        outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        outlined retain of SGDataTypeStorage((uint64_t)v32, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      }
      else
      {
        swift_release();
        swift_release();
        outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        outlined retain of SGDataTypeStorage((uint64_t)v32, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
LABEL_52:
        char v6 = 0;
      }
      break;
  }
  return v6 & 1;
}

unint64_t specialized NodePersonalityType.init(rawValue:)(Swift::String string)
{
  char object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._char object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodePersonalityType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *outlined init with take of NodePersonality(void *a1, void *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t *outlined retain of NodePersonality(unint64_t *a1)
{
  return a1;
}

uint64_t outlined retain of [Input](uint64_t a1)
{
  return a1;
}

unint64_t *outlined release of NodePersonality(unint64_t *a1)
{
  return a1;
}

uint64_t outlined release of [Input](uint64_t a1)
{
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataTypeProperty, UInt32));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (element: XMLElement, node: ShaderGraphNode));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MTLLibrary));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 176 * a1 + 32;
    unint64_t v6 = a3 + 176 * v4;
    if (v5 >= v6 || v5 + 176 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (String, MetalDataType)));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 160 * a1 + 32;
    unint64_t v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MetalShaderProgram.add<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalLiteralValueNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalLiteralValueNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalLiteralValueNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalPassthroughNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalPassthroughNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalPassthroughNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalFunctionCallNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalFunctionCallNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalFunctionCallNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  void *v3;
  void *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long v11;
  uint64_t v12;
  _UNKNOWN **v13;

  unint64_t v3 = (void *)(v1 + 16);
  swift_beginAccess();
  uint64_t v4 = *(void **)(v1 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 16) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *unint64_t v3 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *unint64_t v3 = v4;
  }
  unint64_t v8 = type metadata accessor for RESurfaceShaderFunctionNode();
  uint64_t v12 = v8;
  long long v13 = &protocol witness table for RESurfaceShaderFunctionNode;
  *(void *)&uint64_t v11 = a1;
  v4[2] = v7 + 1;
  outlined init with take of MetalFunctionNode(&v11, (uint64_t)&v4[5 * v7 + 4]);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v12 = v8;
  long long v13 = &protocol witness table for RESurfaceShaderFunctionNode;
  *(void *)&uint64_t v11 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalFunctionParameterNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalFunctionParameterNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalFunctionParameterNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalFunctionDefinitionNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalFunctionDefinitionNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalFunctionDefinitionNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalStructGetterNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalStructGetterNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalStructGetterNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *uint64_t v4 = v5;
  }
  uint64_t v9 = type metadata accessor for MetalStructGetterOffsetNode();
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalStructGetterOffsetNode;
  *(void *)&long long v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v10);
  uint64_t v14 = v9;
  unint64_t v15 = &protocol witness table for MetalStructGetterOffsetNode;
  *(void *)&long long v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D47689LL7context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v35 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v35;
    uint64_t v12 = (void *)(a1 + 80);
    while (1)
    {
      uint64_t v13 = *(v12 - 5);
      uint64_t v14 = *(v12 - 4);
      uint64_t v15 = *(v12 - 3);
      uint64_t v16 = *(v12 - 2);
      char v17 = *((unsigned char *)v12 - 8);
      uint64_t v18 = *v12;
      *(void *)&long long v28 = *(v12 - 6);
      *((void *)&v28 + 1) = v13;
      uint64_t v29 = v14;
      uint64_t v30 = v15;
      uint64_t v31 = v16;
      char v32 = v17;
      uint64_t v33 = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      closure #1 in ShaderGraphNode.mapConnectedInputs(context:into:)(&v28, a2, a3, a4, &v27, (uint64_t)v34);
      if (v5) {
        break;
      }
      uint64_t v5 = 0;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v35 = v7;
      unint64_t v20 = *(void *)(v7 + 16);
      unint64_t v19 = *(void *)(v7 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v7 = v35;
      }
      v12 += 7;
      *(void *)(v7 + 16) = v20 + 1;
      uint64_t v21 = (_OWORD *)(v7 + 96 * v20);
      long long v22 = v34[1];
      v21[2] = v34[0];
      v21[3] = v22;
      long long v23 = v34[2];
      long long v24 = v34[3];
      long long v25 = v34[5];
      v21[6] = v34[4];
      v21[7] = v25;
      v21[4] = v23;
      v21[5] = v24;
      if (!--v6) {
        return v7;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v7;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of MetalFunctionNode(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi27_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x7000000000000000;
  return result;
}

uint64_t outlined init with take of UserGraphError.ErrorType(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError()
{
  unint64_t result = lazy protocol witness table cache variable for type UserGraphError and conformance UserGraphError;
  if (!lazy protocol witness table cache variable for type UserGraphError and conformance UserGraphError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserGraphError and conformance UserGraphError);
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x7C00000000000000;
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_(uint64_t a1)
{
  *(void *)a1 = 13;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t outlined destroy of (input: Input, fNode: MetalFunctionNode?)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_(uint64_t a1)
{
  *(void *)a1 = 10;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x7400000000000000;
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 24 * a1 + 32;
    unint64_t v7 = a3 + 24 * v5;
    if (v6 >= v7 || v6 + 24 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType()
{
  unint64_t result = lazy protocol witness table cache variable for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType;
  if (!lazy protocol witness table cache variable for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodePersonality and conformance NodePersonality()
{
  unint64_t result = lazy protocol witness table cache variable for type NodePersonality and conformance NodePersonality;
  if (!lazy protocol witness table cache variable for type NodePersonality and conformance NodePersonality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodePersonality and conformance NodePersonality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodePersonalityType and conformance NodePersonalityType()
{
  unint64_t result = lazy protocol witness table cache variable for type NodePersonalityType and conformance NodePersonalityType;
  if (!lazy protocol witness table cache variable for type NodePersonalityType and conformance NodePersonalityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodePersonalityType and conformance NodePersonalityType);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for NodePersonality(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of NodePersonality(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for NodePersonality(unint64_t *a1)
{
  return outlined consume of NodePersonality(*a1);
}

unint64_t *assignWithCopy for NodePersonality(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of NodePersonality(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of NodePersonality(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for NodePersonality(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of NodePersonality(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodePersonality(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x79 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 121);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x78) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NodePersonality(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x78)
  {
    *(void *)unint64_t result = a2 - 121;
    if (a3 >= 0x79) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x79) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for NodePersonality(void *a1)
{
  uint64_t v1 = *a1 >> 61;
  if (v1 == 7) {
    return (*a1 >> 3) + 7;
  }
  else {
    return v1;
  }
}

void *destructiveProjectEnumData for NodePersonality(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for NodePersonality(unint64_t *result, uint64_t a2)
{
  if (a2 < 7)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 61;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 7);
    unint64_t v3 = 0xE000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for NodePersonality()
{
  return &type metadata for NodePersonality;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NodePersonality.ShaderType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NodePersonality.ShaderType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C28F710);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for NodePersonality.ShaderType(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for NodePersonality.ShaderType(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NodePersonality.ShaderType()
{
  return &type metadata for NodePersonality.ShaderType;
}

uint64_t getEnumTagSinglePayload for NodePersonalityType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NodePersonalityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C28F8BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for NodePersonalityType(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NodePersonalityType()
{
  return &type metadata for NodePersonalityType;
}

void type metadata accessor for CGColorSpaceRef(uint64_t a1)
{
}

void type metadata accessor for SGBlending(uint64_t a1)
{
}

void type metadata accessor for SGLightingModel(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

void type metadata accessor for SGDataType(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in SGDataType()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, type metadata accessor for SGDataType);
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t lazy protocol witness table accessor for type SGDataType and conformance SGDataType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t outlined assign with take of NodeDef(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of GeomPropDef(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of MetalFunctionNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of MetalFunctionNode?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *outlined release of Edge?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of Edge?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of UserGraphCompiler.CompileContext(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  unint64_t v4 = *(void *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of UserGraphCompiler.CompileContext(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  unint64_t v4 = *(void *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NodePersonality(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CGColorSpaceRef(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void MetalDataType.__allocating_init(note:typeName:size:alignment:isConst:fields:)()
{
}

uint64_t OrderedSet.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v17[1] = a3;
  v17[2] = a4;
  uint64_t v6 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[4] = a1;
  v17[5] = a2;
  v17[3] = a2;
  uint64_t v13 = *MEMORY[0x263F8E7E8];
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  type metadata accessor for OrderedSet();
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8E830], v6);
  swift_retain();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F8E830];
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedSet<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedSet.customMirror.getter(*v2, v2[1], *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for Error._domain.getter in conformance NestedError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance NestedError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance NestedError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance NestedError()
{
  return MEMORY[0x270F9FB30]();
}

Swift::String __swiftcall NestedError.summarized()()
{
  unint64_t v1 = v0;
  uint64_t v21 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (unint64_t *)(v2 + 16);
  swift_retain();
  outlined copy of NestedError(v1);
  swift_beginAccess();
  for (unint64_t i = *v3; (~*v3 & 0xF000000000000007) != 0; unint64_t i = *v3)
  {
    if ((i & 0x8000000000000000) != 0)
    {
      uint64_t v11 = *(void **)((i & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v10 = *(void *)((i & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
      *uint64_t v3 = v10;
      id v12 = v11;
    }
    else
    {
      *uint64_t v3 = 0xF000000000000007;
      unint64_t v10 = i;
    }
    outlined copy of NestedError(v10);
    outlined consume of NestedError?(i);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v15 = v14;
    uint64_t v16 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
      uint64_t v16 = v21;
    }
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v17 = *(void *)(v16 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      uint64_t v16 = v21;
    }
    *(void *)(v16 + 16) = v18 + 1;
    uint64_t v19 = v16 + 16 * v18;
    *(void *)(v19 + 32) = v13;
    *(void *)(v19 + 40) = v15;
  }
  swift_release_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v7 = v6;
  swift_release();
  uint64_t v8 = v5;
  uint64_t v9 = v7;
  result._char object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

void NestedError.last()(unint64_t a1)
{
  outlined copy of NestedError(a1);
  specialized Sequence.reversed()(a1);
  if (*(void *)(v2 + 16))
  {
    id v3 = *(id *)(v2 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized Sequence.reversed()(unint64_t a1)
{
  specialized _copySequenceToContiguousArray<A>(_:)(a1);
  id v3 = v2;
  unint64_t v4 = v2[2];
  outlined consume of NestedError(a1);
  if (v4 < 2) {
    return;
  }
  unint64_t v5 = 0;
  unint64_t v6 = v4 >> 1;
  for (unint64_t i = v4 + 3; ; --i)
  {
    unint64_t v8 = i - 4;
    if (v5 == i - 4) {
      goto LABEL_4;
    }
    unint64_t v9 = v3[2];
    if (v5 >= v9) {
      break;
    }
    if (v8 >= v9) {
      goto LABEL_13;
    }
    unint64_t v10 = (void *)v3[v5 + 4];
    uint64_t v11 = (void *)v3[i];
    id v12 = v10;
    id v13 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    }
    uint64_t v14 = &v3[v5];

    v14[4] = v11;
    if (v8 >= v3[2]) {
      goto LABEL_14;
    }

    v3[i] = v10;
LABEL_4:
    if (v6 == ++v5) {
      return;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t specialized Sequence.reversed()(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v17 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v17 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v8 = v18;
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x2611848A0](v5, v18);
          id v12 = (id)MEMORY[0x2611848A0](v3 - (v5 + 1), v18);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v18 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v18 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v8;
        }
        uint64_t v14 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v14 + 32) = v13;
        specialized Array._endMutation()();
        uint64_t v15 = v18;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        specialized Array._endMutation()();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v18;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    uint64_t v18 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

id NestedError.first()(unint64_t a1)
{
  id v1 = (id)a1;
  if ((a1 & 0x8000000000000000) != 0) {
    id v1 = *(id *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  }
  id v2 = v1;
  return v1;
}

uint64_t NestedError.debugDescription.getter(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    a1 = *(void *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  }
  id v1 = (id)a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NestedError()
{
  unint64_t v1 = (unint64_t)*v0;
  if (((unint64_t)*v0 & 0x8000000000000000) != 0) {
    unint64_t v1 = *(void *)((v1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  }
  id v2 = (id)v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t NestedError.makeIterator()(unint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Error>>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in NestedError.makeIterator();
  *(void *)(v3 + 24) = v2;
  outlined copy of NestedError(a1);
  return v3;
}

void closure #1 in NestedError.makeIterator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (unint64_t *)(a1 + 16);
  swift_beginAccess();
  unint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 16);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      unint64_t v5 = *(void **)((v6 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v8 = *(void *)((v6 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
      swift_beginAccess();
      unint64_t v9 = *v4;
      *unint64_t v4 = v8;
      id v10 = v5;
      outlined copy of NestedError(v8);
      outlined consume of NestedError?(v9);
    }
    else
    {
      swift_beginAccess();
      unint64_t v7 = *v4;
      *unint64_t v4 = 0xF000000000000007;
      outlined copy of NestedError(v6);
      outlined consume of NestedError?(v7);
      unint64_t v5 = (void *)v6;
    }
  }
  *a2 = v5;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance NestedError@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Error>>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in NestedError.makeIterator();
  *(void *)(result + 24) = v4;
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance NestedError()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NestedError()
{
  unint64_t v1 = *v0;
  specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  uint64_t v3 = v2;
  outlined consume of NestedError(v1);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NestedError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NestedError()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1)
{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v4;
  if (!result || a1 > *(void *)(v4 + 24) >> 1)
  {
    return a2();
  }
  return result;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(void, uint64_t, uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(v2 + 16) + 1;
    return a1(0, v4, 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1)) {
    return a2(v3 > 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = v6;
  unint64_t v10 = v5
      + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * a1;
  return v8(v10, a2, v9);
}

unint64_t specialized NestedError.init(_:_:)(uint64_t a1, id a2)
{
  id v4 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = v7;
  }
  else
  {

    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
  }
  return v5 | 0x8000000000000000;
}

uint64_t sub_25C290FE8()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of NestedError(v1);
  }
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void outlined consume of NestedError(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    swift_release();
  }
  else {
}
  }

id outlined copy of NestedError(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    return (id)swift_retain();
  }
  else {
    return (id)a1;
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void outlined consume of NestedError?(unint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0) {
    outlined consume of NestedError(a1);
  }
}

void partial apply for closure #1 in NestedError.makeIterator()(void *a1@<X8>)
{
  closure #1 in NestedError.makeIterator()(v1, a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NestedError()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type AnyIterator<Error> and conformance AnyIterator<A>, &demangling cache variable for type metadata for AnyIterator<Error>);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for NestedError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of NestedError(*a2);
  *a1 = v3;
  return a1;
}

void destroy for NestedError(unint64_t *a1)
{
}

unint64_t *assignWithCopy for NestedError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of NestedError(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of NestedError(v4);
  return a1;
}

unint64_t *assignWithTake for NestedError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of NestedError(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NestedError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NestedError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for NestedError(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for NestedError(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for NestedError(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NestedError()
{
  return &type metadata for NestedError;
}

uint64_t sub_25C2912C8()
{
  outlined consume of NestedError(*(void *)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized Array.count.getter(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

void *RESurfaceShaderMaterial.surfaceShaderFunctionName.unsafeMutableAddressor()
{
  return &static RESurfaceShaderMaterial.surfaceShaderFunctionName;
}

void *RESurfaceShaderMaterial.geometryModifierFunctionName.unsafeMutableAddressor()
{
  return &static RESurfaceShaderMaterial.geometryModifierFunctionName;
}

uint64_t RESurfaceShaderMaterial.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RESurfaceShaderMaterial.surfaceShader.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  char v8 = *(unsigned char *)(v1 + 56);
  outlined copy of NodePersonality(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderMaterial.geometryModifier.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v1 + 64, a1, &demangling cache variable for type metadata for ShaderGraphNode?);
}

uint64_t RESurfaceShaderMaterial.graph.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Graph(v1 + 112, a1);
}

uint64_t outlined init with copy of Graph(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t RESurfaceShaderMaterial.uniforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderMaterial.textureAssignments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderMaterial.customUniformsType.getter()
{
  return swift_retain();
}

double RESurfaceShaderMaterial.init(name:surfaceShader:geometryModifier:graph:uniforms:textureAssignments:customUniformsType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  outlined init with take of MetalFunctionNode?(a4, (uint64_t)v34, &demangling cache variable for type metadata for ShaderGraphNode?);
  long long v17 = a5[6];
  *(_OWORD *)&v37[119] = a5[7];
  long long v18 = a5[9];
  *(_OWORD *)&v37[135] = a5[8];
  *(_OWORD *)&v37[151] = v18;
  *(_OWORD *)&v37[160] = *(_OWORD *)((char *)a5 + 153);
  long long v19 = a5[2];
  *(_OWORD *)&v37[55] = a5[3];
  long long v20 = a5[5];
  *(_OWORD *)&v37[71] = a5[4];
  uint64_t v21 = v35;
  char v22 = v36;
  uint64_t v23 = *a3;
  char v38 = a3[5] & 1;
  char v24 = v38;
  *(_OWORD *)&v37[87] = v20;
  *(_OWORD *)&v37[103] = v17;
  long long v25 = a5[1];
  *(_OWORD *)&v37[7] = *a5;
  *(_OWORD *)&v37[23] = v25;
  *(_OWORD *)&v37[39] = v19;
  long long v26 = v34[0];
  long long v27 = v34[1];
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v23;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)(a3 + 3);
  *(unsigned char *)(a9 + 56) = v24;
  *(_OWORD *)(a9 + 64) = v26;
  *(_OWORD *)(a9 + 80) = v27;
  *(void *)(a9 + 96) = v21;
  *(unsigned char *)(a9 + 104) = v22;
  long long v28 = *(_OWORD *)&v37[128];
  *(_OWORD *)(a9 + 217) = *(_OWORD *)&v37[112];
  *(_OWORD *)(a9 + 233) = v28;
  long long v29 = *(_OWORD *)&v37[160];
  *(_OWORD *)(a9 + 249) = *(_OWORD *)&v37[144];
  *(_OWORD *)(a9 + 265) = v29;
  long long v30 = *(_OWORD *)&v37[32];
  *(_OWORD *)(a9 + 153) = *(_OWORD *)&v37[48];
  *(_OWORD *)(a9 + 169) = *(_OWORD *)&v37[64];
  long long v31 = *(_OWORD *)&v37[96];
  *(_OWORD *)(a9 + 185) = *(_OWORD *)&v37[80];
  *(_OWORD *)(a9 + 201) = v31;
  double result = *(double *)v37;
  long long v33 = *(_OWORD *)&v37[16];
  *(_OWORD *)(a9 + 105) = *(_OWORD *)v37;
  *(_OWORD *)(a9 + 121) = v33;
  *(_OWORD *)(a9 + 137) = v30;
  *(void *)(a9 + 288) = a6;
  *(void *)(a9 + 296) = a7;
  *(void *)(a9 + 304) = a8;
  return result;
}

unint64_t static RESurfaceShaderMaterial.surfaceShaderFunctionName.getter()
{
  return 0xD000000000000018;
}

unint64_t static RESurfaceShaderMaterial.geometryModifierFunctionName.getter()
{
  return 0xD00000000000001BLL;
}

void *RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  double result = specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(a1, a2, a3, a4, a5, a6, __src);
  if (!v7) {
    return memcpy(a7, __src, 0x138uLL);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v14;
  void *result;
  unsigned char __src[312];

  uint64_t v14 = specialized Dictionary<>.init(_:)(a3);
  double result = specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(a1, a2, v14, a4, a5, a6, __src);
  if (!v7) {
    return memcpy(a7, __src, 0x138uLL);
  }
  return result;
}

uint64_t $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v19 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  unint64_t v10 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v11 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v12 = v19;
    if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v2, v0) == *MEMORY[0x263F90238])
    {
      id v13 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v2, v0);
      id v13 = "";
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v10, v11, v16, "transform", v13, v15, 2u);
    MEMORY[0x261185880](v15, -1, -1);

    long long v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v9, v3);
    return ((uint64_t (*)(char *, uint64_t))v17)(v7, v3);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

uint64_t Graph.surfaceNode()@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  long long v41 = v1[8];
  v42[0] = v3;
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v1 + 153);
  Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v41, (uint64_t)v39);
  uint64_t v4 = *(void *)&v39[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = a1;
  uint64_t v43 = v5;
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v5 + 40);
    uint64_t v8 = MEMORY[0x263F8EE78];
    do
    {
      unint64_t v9 = *(v7 - 1);
      if (v9 >> 61 == 5)
      {
        uint64_t v10 = *v7;
        uint64_t v11 = v7[1];
        long long v37 = *((_OWORD *)v7 + 1);
        char v12 = *((unsigned char *)v7 + 32);
        uint64_t v13 = *(void *)((v9 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v14 = *(void *)((v9 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v9);
        if (specialized Surface.init(nodeDefID:)(v13, v14) >= 3u)
        {
          outlined consume of NodePersonality(v9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v39[0] = v8;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
            uint64_t v8 = *(void *)&v39[0];
          }
          unint64_t v17 = *(void *)(v8 + 16);
          unint64_t v16 = *(void *)(v8 + 24);
          if (v17 >= v16 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            uint64_t v8 = *(void *)&v39[0];
          }
          *(void *)(v8 + 16) = v17 + 1;
          uint64_t v18 = v8 + 48 * v17;
          *(void *)(v18 + 32) = v9;
          *(void *)(v18 + 40) = v10;
          *(void *)(v18 + 48) = v11;
          *(_OWORD *)(v18 + 56) = v37;
          *(unsigned char *)(v18 + 72) = v12;
        }
      }
      v7 += 6;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v8 + 16))
  {
    unint64_t v19 = *(void *)(v8 + 32);
    uint64_t v20 = *(void *)(v8 + 40);
    uint64_t v22 = *(void *)(v8 + 48);
    uint64_t v21 = *(void *)(v8 + 56);
    uint64_t v23 = *(void *)(v8 + 64);
    char v24 = *(unsigned char *)(v8 + 72);
    outlined copy of NodePersonality(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    *(void *)uint64_t v36 = v19;
    *(void *)(v36 + 8) = v20;
    *(void *)(v36 + 16) = v22;
    *(void *)(v36 + 24) = v21;
    *(void *)(v36 + 32) = v23;
    *(unsigned char *)(v36 + 40) = v24;
  }
  else
  {
    swift_release();
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi35_((uint64_t)v38);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v38, (uint64_t)v39);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v40 = 0uLL;
    swift_allocError();
    *long long v26 = v39[0];
    long long v27 = v39[4];
    long long v29 = v39[1];
    long long v28 = v39[2];
    v26[3] = v39[3];
    v26[4] = v27;
    v26[1] = v29;
    v26[2] = v28;
    long long v30 = v39[8];
    long long v32 = v39[5];
    long long v31 = v39[6];
    v26[7] = v39[7];
    v26[8] = v30;
    v26[5] = v32;
    v26[6] = v31;
    long long v33 = v40;
    long long v35 = v39[9];
    long long v34 = v39[10];
    v26[11] = v39[11];
    v26[12] = v33;
    v26[9] = v35;
    v26[10] = v34;
    return swift_willThrow();
  }
  return result;
}

uint64_t Graph.geometryModifierNode()@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  long long v28 = v1[8];
  v29[0] = v3;
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v1 + 153);
  Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v28, (uint64_t)&v27);
  uint64_t v4 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v4 + 40);
    uint64_t v7 = MEMORY[0x263F8EE78];
    do
    {
      unint64_t v8 = *(v6 - 1);
      if (v8 >> 61 == 5)
      {
        uint64_t v9 = *v6;
        uint64_t v10 = v6[1];
        long long v26 = *((_OWORD *)v6 + 1);
        char v11 = *((unsigned char *)v6 + 32);
        uint64_t v12 = *(void *)((v8 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v13 = *(void *)((v8 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v8);
        if (specialized Surface.init(nodeDefID:)(v12, v13) == 3)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v27 = v7;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
            uint64_t v7 = v27;
          }
          long long v15 = v26;
          unint64_t v17 = *(void *)(v7 + 16);
          unint64_t v16 = *(void *)(v7 + 24);
          if (v17 >= v16 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            long long v15 = v26;
            uint64_t v7 = v27;
          }
          *(void *)(v7 + 16) = v17 + 1;
          uint64_t v18 = v7 + 48 * v17;
          *(void *)(v18 + 32) = v8;
          *(void *)(v18 + 40) = v9;
          *(void *)(v18 + 48) = v10;
          *(_OWORD *)(v18 + 56) = v15;
          *(unsigned char *)(v18 + 72) = v11;
        }
        else
        {
          outlined consume of NodePersonality(v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      v6 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v7 + 16))
  {
    unint64_t v19 = *(void *)(v7 + 32);
    uint64_t v20 = *(void *)(v7 + 40);
    uint64_t v21 = *(void *)(v7 + 48);
    uint64_t v22 = *(void *)(v7 + 56);
    uint64_t v23 = *(void *)(v7 + 64);
    char v24 = *(unsigned char *)(v7 + 72);
    outlined copy of NodePersonality(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    char v24 = 0;
  }
  uint64_t result = swift_release();
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v22;
  *(void *)(a1 + 32) = v23;
  *(unsigned char *)(a1 + 40) = v24;
  return result;
}

void Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t Graph.replaceRootNodeWithInternal(root:customUniformsType:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *a1;
  if (*a1 >> 61 != 5)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi38_((uint64_t)&v177);
    *(void *)&long long v186 = 0;
    *((void *)&v186 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v25._uint64_t countAndFlagsBits = 0xD000000000000035;
    v25._char object = (void *)0x800000025C421B90;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = 0xD000000000000022;
    v26._char object = (void *)0x800000025C421BD0;
    String.append(_:)(v26);
    unint64_t v27 = a1[3];
    *(void *)&long long v167 = 1701080942;
    *((void *)&v167 + 1) = 0xE400000000000000;
    unint64_t v176 = v27;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 1701080942;
    v29._char object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    unint64_t v30 = 0xD000000000000012;
    unint64_t v31 = 0x800000025C421C00;
LABEL_29:
    String.append(_:)(*(Swift::String *)&v30);
    long long v32 = v186;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v177, (uint64_t)&v186);
    long long v198 = v32;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
LABEL_30:
    swift_allocError();
    _OWORD *v33 = v186;
    long long v34 = v190;
    long long v36 = v187;
    long long v35 = v188;
    v33[3] = v189;
    v33[4] = v34;
    v33[1] = v36;
    _OWORD v33[2] = v35;
    long long v37 = v194;
    long long v39 = v191;
    long long v38 = v192;
    v33[7] = v193;
    v33[8] = v37;
    v33[5] = v39;
    v33[6] = v38;
    long long v40 = v198;
    long long v42 = v195;
    long long v41 = v196;
    v33[11] = v197;
    v33[12] = v40;
    v33[9] = v42;
    v33[10] = v41;
    return swift_willThrow();
  }
  uint64_t v148 = v4;
  uint64_t v156 = v3;
  uint64_t v9 = *(void *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v8 = *(void **)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  if ((v9 != 0xD000000000000022 || v8 != (void *)0x800000025C41FEF0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (v9 != 0xD000000000000021 || v8 != (void *)0x800000025C41FF20)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (v9 != 0xD00000000000001FLL || v8 != (void *)0x800000025C41FF50))
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v11 = v9 == 0xD000000000000021 && v8 == (void *)0x800000025C421C20;
    BOOL v12 = v11;
    if ((v10 & 1) == 0 && !v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v9 == 0xD00000000000002BLL && v8 == (void *)0x800000025C421C50
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v9 == 0xD00000000000002FLL && v8 == (void *)0x800000025C421C80
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (one-time initialization token for geometry_parameters_private != -1) {
          goto LABEL_99;
        }
        goto LABEL_90;
      }
      uint64_t v128 = one-time initialization token for shared;
      swift_bridgeObjectRetain();
      if (v128 != -1) {
        swift_once();
      }
      uint64_t v129 = static NodeDefStore.shared;
      if (*(void *)(static NodeDefStore.shared + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v130 = specialized __RawDictionaryStorage.find<A>(_:)(v9, (uint64_t)v8);
        if (v131)
        {
          v132 = (long long *)(*(void *)(v129 + 56) + 144 * v130);
          long long v167 = *v132;
          long long v133 = v132[3];
          long long v134 = v132[4];
          long long v135 = v132[2];
          long long v168 = v132[1];
          long long v169 = v135;
          long long v170 = v133;
          long long v171 = v134;
          long long v136 = v132[5];
          long long v137 = v132[6];
          long long v138 = v132[8];
          long long v174 = v132[7];
          long long v175 = v138;
          long long v172 = v136;
          long long v173 = v137;
          outlined retain of NodeDef((uint64_t)&v167);
          swift_bridgeObjectRelease();
          long long v183 = v173;
          long long v184 = v174;
          long long v185 = v175;
          long long v179 = v169;
          long long v180 = v170;
          long long v181 = v171;
          long long v182 = v172;
          long long v177 = v167;
          long long v178 = v168;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi19_((uint64_t)&v177);
          *(void *)&long long v186 = 0;
          *((void *)&v186 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          *(void *)&long long v186 = 0xD000000000000054;
          *((void *)&v186 + 1) = 0x800000025C421CB0;
          v139._uint64_t countAndFlagsBits = v9;
          v139._char object = v8;
          String.append(_:)(v139);
          swift_bridgeObjectRelease();
          unint64_t v30 = 39;
          unint64_t v31 = 0xE100000000000000;
          goto LABEL_29;
        }
        swift_bridgeObjectRelease();
      }
      *(void *)&long long v177 = v9;
      *((void *)&v177 + 1) = v8;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v177);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v177, (uint64_t)&v186);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v198 = 0uLL;
      goto LABEL_30;
    }
  }
  if (one-time initialization token for surface_parameters_private != -1) {
    swift_once();
  }
  char v145 = 0;
  for (unint64_t i = &static MetalDataType.re.surface_parameters_private; ; unint64_t i = &static MetalDataType.re.geometry_parameters_private)
  {
    uint64_t v140 = a3;
    uint64_t v14 = *i;
    swift_retain();
    unint64_t v15 = a1[1];
    unint64_t v235 = v15;
    int64_t v16 = *(void *)(v15 + 16);
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v151 = v14;
    int64_t v154 = v16;
    unint64_t v165 = v15;
    if (v16)
    {
      unint64_t v265 = v7;
      *(void *)&long long v186 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
      uint64_t v17 = v186;
      uint64_t v18 = (uint64_t *)(v15 + 56);
      do
      {
        uint64_t v19 = *(v18 - 2);
        uint64_t v20 = *(v18 - 1);
        uint64_t v21 = *v18;
        *(void *)&long long v186 = v17;
        unint64_t v23 = *(void *)(v17 + 16);
        unint64_t v22 = *(void *)(v17 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          uint64_t v17 = v186;
        }
        *(void *)(v17 + 16) = v23 + 1;
        char v24 = (void *)(v17 + 24 * v23);
        v24[4] = v20;
        v24[5] = v21;
        v24[6] = v19;
        v18 += 7;
        --v16;
      }
      while (v16);
      outlined release of [Input]((uint64_t)&v235);
      uint64_t v14 = v151;
      unint64_t v7 = v265;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_25C418EE0;
    *(void *)(v44 + 32) = 12324;
    *(void *)(v44 + 40) = 0xE200000000000000;
    *(void *)(v44 + 48) = v14;
    *(void *)&long long v186 = v44;
    swift_retain_n();
    specialized Array.append<A>(contentsOf:)(v17);
    uint64_t v45 = v186;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_25C418EE0;
    if (one-time initialization token for void != -1) {
      swift_once();
    }
    uint64_t v47 = static MetalDataType.void;
    *(void *)(v46 + 32) = 7632239;
    *(void *)(v46 + 40) = 0xE300000000000000;
    *(void *)(v46 + 48) = v47;
    unint64_t v48 = *(void *)(v156 + 40);
    swift_retain();
    uint64_t v146 = v156 + 64;
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v48, v45, v46, v7, v156 + 64, v156, v199);
    unint64_t v49 = v199[1];
    unint64_t v150 = v199[2];
    unint64_t v141 = v199[0];
    unint64_t v142 = v199[3];
    unint64_t v143 = v199[4];
    char v144 = v200;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_bridgeObjectRelease();
    unint64_t v234 = v49;
    unint64_t v149 = v49;
    uint64_t v159 = *(void *)(v49 + 16);
    if (!v159) {
      goto LABEL_50;
    }
    unint64_t v157 = v49 + 32;
    swift_bridgeObjectRetain();
    uint64_t v50 = 0;
    int64_t v51 = v154;
    while (2)
    {
      unint64_t v53 = v157 + 56 * v50;
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      uint64_t v56 = *(void *)(v53 + 16);
      uint64_t v57 = *(void *)(v53 + 24);
      uint64_t v58 = *(void *)(v53 + 32);
      char v59 = *(unsigned char *)(v53 + 40);
      uint64_t v60 = *(void *)(v53 + 48);
      *(void *)&long long v259 = v54;
      *((void *)&v259 + 1) = v55;
      uint64_t v260 = v56;
      uint64_t v261 = v57;
      uint64_t v262 = v58;
      char v263 = v59;
      uint64_t v264 = v60;
      if (!v51) {
        goto LABEL_38;
      }
      uint64_t v162 = v50;
      long long v61 = (void *)(v165 + 80);
      do
      {
        unint64_t v62 = *(v61 - 6);
        uint64_t v63 = *(v61 - 5);
        uint64_t v65 = *(v61 - 4);
        uint64_t v64 = *(v61 - 3);
        uint64_t v66 = *(v61 - 2);
        char v67 = *((unsigned char *)v61 - 8);
        uint64_t v68 = *v61;
        if (v65 == v56 && v64 == v57)
        {
          uint64_t v52 = v57;
LABEL_36:
          unint64_t v252 = v62;
          uint64_t v253 = v63;
          uint64_t v254 = v56;
          uint64_t v255 = v52;
          uint64_t v256 = v66;
          char v257 = v67;
          uint64_t v258 = v68;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdge(from:to:)((uint64_t)&v252, &v259);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_37;
        }
        unint64_t v265 = *(v61 - 6);
        uint64_t v70 = v64;
        uint64_t v71 = v56;
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          uint64_t v56 = v65;
          uint64_t v52 = v70;
          unint64_t v62 = v265;
          goto LABEL_36;
        }
        v61 += 7;
        --v51;
        uint64_t v56 = v71;
      }
      while (v51);
      unint64_t v252 = v265;
      uint64_t v253 = v63;
      uint64_t v254 = v65;
      uint64_t v255 = v70;
      uint64_t v256 = v66;
      char v257 = v67;
      uint64_t v258 = v68;
LABEL_37:
      int64_t v51 = v154;
      uint64_t v50 = v162;
LABEL_38:
      if (++v50 != v159) {
        continue;
      }
      break;
    }
    outlined release of [Input]((uint64_t)&v234);
LABEL_50:
    unint64_t v233 = v150;
    uint64_t v160 = *(void *)(v150 + 16);
    if (!v160) {
      goto LABEL_67;
    }
    unint64_t v72 = a1[2];
    uint64_t v73 = *(void *)(v72 + 16);
    swift_bridgeObjectRetain();
    uint64_t v74 = 0;
    Swift::String v153 = (void *)(v72 + 80);
    uint64_t v155 = v73;
    while (2)
    {
      uint64_t v76 = v150 + 32 + 56 * v74;
      uint64_t v77 = *(void *)v76;
      uint64_t v78 = *(void *)(v76 + 8);
      uint64_t v79 = *(void *)(v76 + 16);
      uint64_t v80 = *(void *)(v76 + 24);
      uint64_t v81 = *(void *)(v76 + 32);
      char v82 = *(unsigned char *)(v76 + 40);
      uint64_t v83 = *(void *)(v76 + 48);
      v249[0] = v77;
      v249[1] = v78;
      v249[2] = v79;
      v249[3] = v80;
      v249[4] = v81;
      char v250 = v82;
      uint64_t v251 = v83;
      if (!v73) {
        goto LABEL_55;
      }
      uint64_t v163 = v74;
      uint64_t v84 = v153;
      while (2)
      {
        unint64_t v85 = *(v84 - 6);
        uint64_t v86 = *(v84 - 5);
        uint64_t v88 = *(v84 - 4);
        uint64_t v87 = *(v84 - 3);
        uint64_t v89 = *(v84 - 2);
        char v90 = *((unsigned char *)v84 - 8);
        uint64_t v91 = *v84;
        if (v88 == v79 && v87 == v80)
        {
          uint64_t v75 = v80;
LABEL_53:
          unint64_t v242 = v85;
          uint64_t v243 = v86;
          uint64_t v244 = v79;
          uint64_t v245 = v75;
          uint64_t v246 = v89;
          char v247 = v90;
          uint64_t v248 = v91;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdges(from:to:)((uint64_t)&v242, (uint64_t)v249);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_54;
        }
        unint64_t v265 = *(v84 - 6);
        uint64_t v75 = v87;
        uint64_t v93 = v79;
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          uint64_t v79 = v88;
          unint64_t v85 = v265;
          goto LABEL_53;
        }
        v84 += 7;
        --v73;
        uint64_t v79 = v93;
        if (v73) {
          continue;
        }
        break;
      }
      unint64_t v242 = v265;
      uint64_t v243 = v86;
      uint64_t v244 = v88;
      uint64_t v245 = v75;
      uint64_t v246 = v89;
      char v247 = v90;
      uint64_t v248 = v91;
LABEL_54:
      uint64_t v73 = v155;
      uint64_t v74 = v163;
LABEL_55:
      if (++v74 != v160) {
        continue;
      }
      break;
    }
    outlined release of [Input]((uint64_t)&v233);
LABEL_67:
    specialized Graph.remove(_:)(a1[3]);
    uint64_t v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = xmmword_25C418EE0;
    uint64_t v95 = static MetalDataType.void;
    *(void *)(v94 + 32) = 28265;
    *(void *)(v94 + 40) = 0xE200000000000000;
    *(void *)(v94 + 48) = v95;
    uint64_t v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = xmmword_25C418EE0;
    *(void *)(v96 + 32) = 7632239;
    *(void *)(v96 + 40) = 0xE300000000000000;
    *(void *)(v96 + 48) = v95;
    uint64_t v97 = swift_allocObject();
    *(unsigned char *)(v97 + 16) = v145;
    *(void *)(v97 + 24) = a2;
    unint64_t v98 = v97 | 0x4000000000000000;
    unint64_t v99 = *(void *)(v156 + 40);
    swift_retain_n();
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v99, v94, v96, v98, v146, v156, &v201);
    long long v166 = v202;
    unint64_t v158 = v201;
    unint64_t v265 = v203;
    uint64_t v164 = v204;
    char v161 = v205;
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v100 = swift_allocObject();
    *(_OWORD *)(v100 + 16) = xmmword_25C418EE0;
    *(void *)(v100 + 32) = 7632239;
    *(void *)(v100 + 40) = 0xE300000000000000;
    *(void *)(v100 + 48) = v151;
    uint64_t v101 = swift_allocObject();
    *(void *)(v101 + 16) = 12324;
    *(void *)(v101 + 24) = 0xE200000000000000;
    unint64_t v102 = v101 | 0x6000000000000000;
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v99, MEMORY[0x263F8EE78], v100, v102, v146, v156, &v206);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v209);
    if (v148)
    {
      swift_release();
      outlined init with take of NodePersonality(&v206, &v232);
      outlined release of NodePersonality(&v232);
      uint64_t v231 = v207;
      outlined release of [Input]((uint64_t)&v231);
      uint64_t v230 = v208;
      outlined release of [Input]((uint64_t)&v230);
      outlined init with take of NodePersonality(&v201, &v229);
      outlined release of NodePersonality(&v229);
      uint64_t v228 = v202;
      outlined release of [Input]((uint64_t)&v228);
      uint64_t v227 = *((void *)&v202 + 1);
      outlined release of [Input]((uint64_t)&v227);
      outlined init with take of NodePersonality(v199, &v226);
      outlined release of NodePersonality(&v226);
      outlined release of [Input]((uint64_t)&v234);
      outlined release of [Input]((uint64_t)&v233);
      return swift_release();
    }
    uint64_t v103 = *(void *)(v149 + 16);
    if (!v103) {
      break;
    }
    unint64_t v7 = v149 + 80;
    while (1)
    {
      uint64_t v105 = *(void *)(v7 - 48);
      uint64_t v104 = *(void *)(v7 - 40);
      uint64_t v106 = *(void *)(v7 - 32);
      unint64_t v107 = *(void *)(v7 - 24);
      uint64_t v108 = *(void *)(v7 - 16);
      char v109 = *(unsigned char *)(v7 - 8);
      uint64_t v110 = *(void *)v7;
      if (v106 == 12324 && v107 == 0xE200000000000000) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_79;
      }
      v7 += 56;
      if (!--v103) {
        goto LABEL_77;
      }
    }
    unint64_t v107 = 0xE200000000000000;
LABEL_79:
    v239[0] = v105;
    v239[1] = v104;
    v239[2] = v106;
    v239[3] = v107;
    v239[4] = v108;
    char v240 = v109;
    uint64_t v241 = v110;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.connect(_:to:)((uint64_t)v209, (unint64_t)v239);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    long long v225 = v210;
    outlined release of String((uint64_t)&v225);
    ShaderGraphNode.out.getter((uint64_t)v211);
    a3 = 0;
    if (*(void *)(v202 + 16))
    {
      uint64_t v122 = *(void *)(v202 + 40);
      uint64_t v123 = *(void *)(v202 + 48);
      uint64_t v124 = *(void *)(v202 + 56);
      uint64_t v125 = *(void *)(v202 + 64);
      char v126 = *(unsigned char *)(v202 + 72);
      uint64_t v127 = *(void *)(v202 + 80);
      v236[0] = *(void *)(v202 + 32);
      v236[1] = v122;
      v236[2] = v123;
      v236[3] = v124;
      v236[4] = v125;
      char v237 = v126;
      uint64_t v238 = v127;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)((uint64_t)v211, (unint64_t)v236);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      swift_release();
      long long v224 = v212;
      outlined release of String((uint64_t)&v224);
      outlined init with take of NodePersonality(&v206, &v223);
      outlined release of NodePersonality(&v223);
      uint64_t v222 = v207;
      outlined release of [Input]((uint64_t)&v222);
      uint64_t v221 = v208;
      uint64_t result = outlined release of [Input]((uint64_t)&v221);
      *(void *)uint64_t v140 = v141;
      *(void *)(v140 + 8) = v149;
      *(void *)(v140 + 16) = v150;
      *(void *)(v140 + 24) = v142;
      *(void *)(v140 + 32) = v143;
      *(unsigned char *)(v140 + 40) = v144;
      *(void *)(v140 + 48) = v158;
      *(_OWORD *)(v140 + 56) = v166;
      *(void *)(v140 + 72) = v265;
      *(void *)(v140 + 80) = v164;
      *(unsigned char *)(v140 + 88) = v161;
      return result;
    }
    __break(1u);
LABEL_99:
    swift_once();
LABEL_90:
    char v145 = 1;
  }
LABEL_77:
  outlined init with take of NodePersonality(v199, &v220);
  *(void *)&long long v177 = v141;
  *((void *)&v177 + 1) = v149;
  *(void *)&long long v178 = v150;
  *((void *)&v178 + 1) = v142;
  *(void *)&long long v179 = v143;
  BYTE8(v179) = v144;
  *(void *)&long long v180 = 12324;
  *((void *)&v180 + 1) = 0xE200000000000000;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v177);
  outlined init with take of UserGraphError.ErrorType((uint64_t)&v177, (uint64_t)&v186);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  long long v198 = 0uLL;
  swift_allocError();
  *Swift::String v112 = v186;
  long long v113 = v190;
  long long v115 = v187;
  long long v114 = v188;
  v112[3] = v189;
  v112[4] = v113;
  v112[1] = v115;
  v112[2] = v114;
  long long v116 = v194;
  long long v118 = v191;
  long long v117 = v192;
  v112[7] = v193;
  v112[8] = v116;
  v112[5] = v118;
  v112[6] = v117;
  long long v119 = v198;
  long long v121 = v195;
  long long v120 = v196;
  v112[11] = v197;
  v112[12] = v119;
  v112[9] = v121;
  v112[10] = v120;
  outlined retain of [Input]((uint64_t)&v234);
  outlined retain of [Input]((uint64_t)&v233);
  outlined retain of NodePersonality(&v220);
  swift_willThrow();
  swift_release();
  swift_release();
  long long v219 = v210;
  outlined release of String((uint64_t)&v219);
  outlined init with take of NodePersonality(&v206, &v218);
  outlined release of NodePersonality(&v218);
  uint64_t v217 = v207;
  outlined release of [Input]((uint64_t)&v217);
  uint64_t v216 = v208;
  outlined release of [Input]((uint64_t)&v216);
  outlined init with take of NodePersonality(&v201, &v215);
  outlined release of NodePersonality(&v215);
  uint64_t v214 = v202;
  outlined release of [Input]((uint64_t)&v214);
  uint64_t v213 = *((void *)&v202 + 1);
  outlined release of [Input]((uint64_t)&v213);
  outlined release of NodePersonality(&v220);
  outlined release of [Input]((uint64_t)&v234);
  outlined release of [Input]((uint64_t)&v233);
  return swift_release();
}

uint64_t *closure #2 in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(uint64_t *result)
{
  uint64_t v1 = *result;
  if (!((unint64_t)*result >> 61))
  {
    uint64_t v2 = result[3];
    type metadata accessor for MaterialXDataType();
    uint64_t result = (uint64_t *)swift_dynamicCastClass();
    if (result)
    {
      if (result[3])
      {
        *(void *)&v24[0] = 0;
        *((void *)&v24[0] + 1) = 0xE000000000000000;
        swift_retain_n();
        _StringGuts.grow(_:)(35);
        v3._char object = (void *)0x800000025C421F20;
        v3._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v3);
        v23[1] = 0xE400000000000000;
        uint64_t v26 = v2;
        v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        v5._uint64_t countAndFlagsBits = 1701080942;
        v5._char object = (void *)0xE400000000000000;
        String.append(_:)(v5);
        swift_bridgeObjectRelease();
        v6._uint64_t countAndFlagsBits = 0x6574614D20736920;
        v6._char object = (void *)0xEE0020586C616972;
        String.append(_:)(v6);
        v23[0] = v1;
        _print_unlocked<A, B>(_:_:)();
        long long v7 = v24[0];
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        swift_bridgeObjectRetain();
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          BOOL v11 = (uint8_t *)swift_slowAlloc();
          uint64_t v12 = swift_slowAlloc();
          *(void *)&v24[0] = v12;
          *(_DWORD *)BOOL v11 = 136315138;
          swift_bridgeObjectRetain();
          v23[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, *((unint64_t *)&v7 + 1), (uint64_t *)v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25C27E000, v9, v10, "%s", v11, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261185880](v12, -1, -1);
          MEMORY[0x261185880](v11, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)v23);
        outlined init with take of UserGraphError.ErrorType((uint64_t)v23, (uint64_t)v24);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v25 = 0uLL;
        swift_allocError();
        *uint64_t v13 = v24[0];
        long long v14 = v24[4];
        long long v15 = v24[2];
        long long v16 = v24[1];
        void v13[3] = v24[3];
        v13[4] = v14;
        v13[1] = v16;
        v13[2] = v15;
        long long v17 = v24[8];
        long long v18 = v24[6];
        long long v19 = v24[5];
        v13[7] = v24[7];
        v13[8] = v17;
        v13[5] = v19;
        v13[6] = v18;
        long long v20 = v25;
        long long v21 = v24[10];
        long long v22 = v24[9];
        v13[11] = v24[11];
        v13[12] = v20;
        _OWORD v13[9] = v22;
        v13[10] = v21;
        swift_willThrow();
        return (uint64_t *)swift_release_n();
      }
    }
  }
  return result;
}

Swift::Bool __swiftcall RESurfaceShaderMaterial.surfaceShaderUsesCustomUniformType()()
{
  long long v1 = v0[16];
  v9[10] = v0[15];
  v10[0] = v1;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v0 + 265);
  long long v2 = v0[12];
  v9[6] = v0[11];
  v9[7] = v2;
  long long v3 = v0[14];
  v9[8] = v0[13];
  v9[9] = v3;
  long long v4 = v0[8];
  v9[2] = v0[7];
  v9[3] = v4;
  long long v5 = v0[10];
  v9[4] = v0[9];
  v9[5] = v5;
  long long v6 = v0[2];
  long long v8 = v0[1];
  v9[0] = v6;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 41);
  return (unint64_t)Graph.uniqueArgumentCount(for:)((uint64_t)&v8) > 1;
}

uint64_t Graph.uniqueArgumentCount(for:)(uint64_t a1)
{
  Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v15);
  uint64_t v1 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    long long v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = 32;
    do
    {
      unint64_t v6 = *(void *)(v1 + v4);
      if (v6 >> 61 == 3)
      {
        uint64_t v7 = v6 & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v9 = *(void *)(v7 + 16);
        uint64_t v8 = *(void *)(v7 + 24);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1) {
          long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v3);
        }
        v3[2] = v11 + 1;
        long long v5 = &v3[2 * v11];
        v5[4] = v9;
        v5[5] = v8;
      }
      v4 += 48;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v3 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = specialized Set.init<A>(_:)((uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  return v13;
}

Swift::Bool __swiftcall RESurfaceShaderMaterial.geometryModifierUsesCustomUniformType()()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);
  unint64_t v5 = *(void *)(v0 + 64);
  v8[0] = v5;
  v8[1] = v1;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  char v9 = *(unsigned char *)(v0 + 104) & 1;
  outlined copy of NodePersonality(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = Graph.uniqueArgumentCount(for:)((uint64_t)v8);
  outlined consume of ShaderGraphNode?(v5, v1);
  return v6 > 1;
}

uint64_t Graph.firstSurfaceOfType(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  long long v5 = v2[9];
  long long v32 = v2[8];
  v33[0] = v5;
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v2 + 153);
  Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v32, (uint64_t)&v31);
  uint64_t v6 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v29 = a2;
  if (v7)
  {
    if (a1) {
      uint64_t v8 = 54;
    }
    else {
      uint64_t v8 = 53;
    }
    char v9 = (uint64_t *)(v6 + 40);
    uint64_t v10 = MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v11 = *(v9 - 1);
      if (v11 >> 61 == 5)
      {
        uint64_t v12 = *v9;
        uint64_t v13 = v9[1];
        long long v30 = *((_OWORD *)v9 + 1);
        char v14 = *((unsigned char *)v9 + 32);
        uint64_t v15 = *(void *)((v11 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v16 = *(void *)((v11 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v11);
        unsigned int v17 = specialized Surface.init(nodeDefID:)(v15, v16);
        if (v17 >= 3)
        {
          if (v17 == 3 && v8 == 54)
          {
LABEL_14:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v31 = v10;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
              uint64_t v10 = v31;
            }
            unint64_t v20 = *(void *)(v10 + 16);
            unint64_t v19 = *(void *)(v10 + 24);
            if (v20 >= v19 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
              uint64_t v10 = v31;
            }
            *(void *)(v10 + 16) = v20 + 1;
            uint64_t v21 = v10 + 48 * v20;
            *(void *)(v21 + 32) = v11;
            *(void *)(v21 + 40) = v12;
            *(void *)(v21 + 48) = v13;
            *(_OWORD *)(v21 + 56) = v30;
            *(unsigned char *)(v21 + 72) = v14;
            goto LABEL_7;
          }
        }
        else if (v8 == 53)
        {
          goto LABEL_14;
        }
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_7:
      v9 += 6;
      if (!--v7) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(v10 + 16))
  {
    unint64_t v22 = *(void *)(v10 + 32);
    uint64_t v23 = *(void *)(v10 + 40);
    uint64_t v25 = *(void *)(v10 + 48);
    uint64_t v24 = *(void *)(v10 + 56);
    uint64_t v26 = *(void *)(v10 + 64);
    char v27 = *(unsigned char *)(v10 + 72);
    outlined copy of NodePersonality(v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
  }
  uint64_t result = swift_release();
  *(void *)uint64_t v29 = v22;
  *(void *)(v29 + 8) = v23;
  *(void *)(v29 + 16) = v25;
  *(void *)(v29 + 24) = v24;
  *(void *)(v29 + 32) = v26;
  *(unsigned char *)(v29 + 40) = v27;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceInvalidImageNodes()()
{
  Class isa = v0[8].isa;
  int64_t v3 = *((void *)isa + 2);
  if (v3)
  {
    uint64_t v4 = (char *)isa + 32;
    Class v18 = v0[8].isa;
    swift_bridgeObjectRetain_n();
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = &v4[48 * v5];
      uint64_t v7 = *((void *)v6 + 3);
      if (v7 == -7)
      {
        if ((uint64_t)++v5 >= v3) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v9 = *(void *)v6;
        uint64_t v8 = *((void *)v6 + 1);
        uint64_t v10 = *((void *)v6 + 2);
        char v11 = v6[40];
        uint64_t v12 = *((void *)v6 + 4);
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v8;
        uint64_t v14 = v10;
        uint64_t v15 = v7;
        uint64_t v16 = v12;
        char v17 = v11;
        outlined copy of NodePersonality(v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.replaceInvalidImageNodes()(&v13, v0);
        if (v1)
        {
          outlined consume of NodePersonality(v9);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        ++v5;
        outlined consume of NodePersonality(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v5 >= v3) {
          goto LABEL_10;
        }
      }
      if (v5 >= v3)
      {
        __break(1u);
LABEL_10:
        swift_bridgeObjectRelease_n();
        return;
      }
    }
  }
}

void closure #1 in Graph.replaceInvalidImageNodes()(long long *a1, NSObject *a2)
{
  long long v3 = *a1;
  long long v4 = a1[1];
  *(_OWORD *)&v541[9] = *(long long *)((char *)a1 + 25);
  long long v540 = v3;
  *(_OWORD *)v541 = v4;
  unint64_t v5 = v3;
  if ((unint64_t)v3 >> 61 != 5) {
    return;
  }
  uint64_t v7 = *(void **)a1;
  *(_OWORD *)v441 = *(long long *)((char *)a1 + 8);
  long long v428 = *(long long *)((char *)a1 + 24);
  char v8 = *((unsigned char *)a1 + 40);
  swift_bridgeObjectRetain();
  v9._char object = (void *)0x800000025C421DA0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000013;
  Swift::Bool v10 = String.hasPrefix(_:)(v9);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = 0x6567616D695F444ELL;
    v20._char object = (void *)0xE800000000000000;
    Swift::Bool v21 = String.hasPrefix(_:)(v20);
    swift_bridgeObjectRelease();
    if (!v21)
    {
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = 0xD000000000000017;
      v22._char object = (void *)0x800000025C421D80;
      Swift::Bool v23 = String.hasPrefix(_:)(v22);
      swift_bridgeObjectRelease();
      if (!v23)
      {
        swift_bridgeObjectRetain();
        v24._uint64_t countAndFlagsBits = 0xD000000000000014;
        v24._char object = (void *)0x800000025C421D60;
        Swift::Bool v25 = String.hasPrefix(_:)(v24);
        swift_bridgeObjectRelease();
        if (!v25) {
          return;
        }
      }
    }
    uint64_t v26 = *(void *)(*((void *)&v540 + 1) + 16);
    if (!v26) {
      return;
    }
    char v410 = v8;
    v413 = v7;
    unint64_t v426 = v5;
    os_log_t loga = a2;
    uint64_t v434 = v2;
    swift_bridgeObjectRetain_n();
    uint64_t v420 = *((void *)&v540 + 1);
    char v27 = (void *)(*((void *)&v540 + 1) + 80);
    while (1)
    {
      uint64_t v29 = *(v27 - 6);
      uint64_t v28 = *(v27 - 5);
      uint64_t v31 = *(v27 - 4);
      long long v30 = (uint8_t *)*(v27 - 3);
      uint64_t v32 = *(v27 - 2);
      char v33 = *((unsigned char *)v27 - 8);
      uint64_t v34 = *v27;
      uint64_t v35 = one-time initialization token for filename;
      swift_retain();
      v566 = v30;
      swift_bridgeObjectRetain();
      if (v35 != -1) {
        swift_once();
      }
      if ((*(uint64_t (**)(uint64_t))(*(void *)v28 + 128))(static MaterialXDataType.filename)) {
        break;
      }
      v27 += 7;
      swift_bridgeObjectRelease();
      swift_release();
      if (!--v26)
      {
        swift_bridgeObjectRelease_n();
        return;
      }
    }
    v551[0] = v29;
    v551[1] = v28;
    v551[2] = v31;
    v551[3] = v566;
    v551[4] = v32;
    char v552 = v33;
    uint64_t v553 = v34;
    long long v36 = (long long *)*((void *)&v540 + 1);
    swift_bridgeObjectRelease_n();
    long long v37 = *(_OWORD *)&loga[16].isa;
    long long v38 = *(_OWORD *)&loga[18].isa;
    long long v39 = *(_OWORD *)&loga[12].isa;
    long long v558 = *(_OWORD *)&loga[14].isa;
    long long v559 = v37;
    v560[0] = v38;
    *(_OWORD *)((char *)v560 + 9) = *(_OWORD *)((char *)&loga[19].isa + 1);
    long long v40 = *(_OWORD *)&loga[10].isa;
    long long v555 = *(_OWORD *)&loga[8].isa;
    long long v556 = v40;
    long long v557 = v39;
    long long v41 = *(_OWORD *)&loga[2].isa;
    v554[0] = *(_OWORD *)&loga->isa;
    v554[1] = v41;
    long long v42 = *(_OWORD *)&loga[6].isa;
    v554[2] = *(_OWORD *)&loga[4].isa;
    v554[3] = v42;
    outlined retain of Graph((uint64_t)v554);
    Graph.edge(to:)((uint64_t)v551, v466);
    unint64_t v43 = v466[0];
    outlined init with take of MetalFunctionNode?((uint64_t)v466, (uint64_t)v480, &demangling cache variable for type metadata for Edge?);
    if (!v481)
    {
LABEL_25:
      outlined release of Graph((uint64_t)v554);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    if (v43 == -7)
    {
      outlined release of Edge?(v466);
      goto LABEL_25;
    }
    if ((v43 & 0x8000000000000000) != 0)
    {
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
LABEL_366:
      __break(1u);
LABEL_367:
      __break(1u);
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
      goto LABEL_370;
    }
    if (v43 >= *(void *)(v555 + 16)) {
      goto LABEL_365;
    }
    unint64_t v78 = *(void *)(v555 + 48 * v43 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v78);
    outlined release of Edge?(v466);
    outlined release of Graph((uint64_t)v554);
    if (v78 >> 61 || *(unsigned char *)(v78 + 80) != 6)
    {
      outlined consume of NodePersonality(v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    uint64_t v79 = *(void *)(v78 + 64);
    uint64_t v80 = *(void *)(v78 + 72);
    uint64_t v403 = *(void *)(v78 + 48);
    uint64_t v408 = *(void *)(v78 + 56);
    uint64_t v395 = *(void *)(v78 + 32);
    uint64_t v399 = *(void *)(v78 + 40);
    unint64_t v81 = *(void *)(v78 + 16);
    unint64_t v82 = *(void *)(v78 + 24);
    outlined copy of SGDataTypeStorage((id)v81, (id)v82, v395, v399, v403, v408, v79, v80, 6);
    outlined consume of NodePersonality(v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of SGDataTypeStorage((void *)v81, (id)v82, v395, v399, v403, v408, v79, v80, 6);
    uint64_t v83 = HIBYTE(v82) & 0xF;
    if ((v82 & 0x2000000000000000) == 0) {
      uint64_t v83 = v81 & 0xFFFFFFFFFFFFLL;
    }
    if (v83) {
      goto LABEL_58;
    }
    uint64_t v107 = *(void *)(v420 + 16);
    if (v107)
    {
      uint64_t v108 = (void *)(v420 + 80);
      while (1)
      {
        uint64_t v109 = *(v108 - 6);
        uint64_t v32 = *(v108 - 5);
        uint64_t v110 = *(v108 - 4);
        uint64_t v111 = *(v108 - 2);
        char v112 = *((unsigned char *)v108 - 8);
        uint64_t v113 = *v108;
        if (v110 == 0x746C7561666564 && *(v108 - 3) == 0xE700000000000000) {
          break;
        }
        unint64_t v115 = *(v108 - 3);
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_164;
        }
        v108 += 7;
        if (!--v107)
        {
          uint64_t v542 = v109;
          uint64_t v543 = v32;
          uint64_t v544 = v110;
          unint64_t v545 = v115;
          uint64_t v546 = v111;
          char v547 = v112;
          uint64_t v548 = v113;
          goto LABEL_94;
        }
      }
      unint64_t v115 = 0xE700000000000000;
LABEL_164:
      uint64_t v542 = v109;
      uint64_t v543 = v32;
      uint64_t v544 = v110;
      unint64_t v545 = v115;
      uint64_t v546 = v111;
      char v547 = v112;
      uint64_t v548 = v113;
      uint64_t v73 = loga;
      long long v174 = *(_OWORD *)&loga[16].isa;
      long long v175 = *(_OWORD *)&loga[18].isa;
      long long v176 = *(_OWORD *)&loga[12].isa;
      v549[7] = *(_OWORD *)&loga[14].isa;
      v549[8] = v174;
      v550[0] = v175;
      *(_OWORD *)((char *)v550 + 9) = *(_OWORD *)((char *)&loga[19].isa + 1);
      long long v177 = *(_OWORD *)&loga[10].isa;
      v549[4] = *(_OWORD *)&loga[8].isa;
      v549[5] = v177;
      v549[6] = v176;
      long long v178 = *(_OWORD *)&loga[2].isa;
      v549[0] = *(_OWORD *)&loga->isa;
      v549[1] = v178;
      long long v179 = *(_OWORD *)&loga[6].isa;
      v549[2] = *(_OWORD *)&loga[4].isa;
      v549[3] = v179;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v549);
      Graph.edge(to:)((uint64_t)&v542, v467);
      outlined release of Graph((uint64_t)v549);
      outlined init with take of MetalFunctionNode?((uint64_t)v467, (uint64_t)&v476, &demangling cache variable for type metadata for Edge?);
      if (*((void *)&v476 + 1))
      {
        long long v36 = &v450;
        v482[0] = v476;
        v482[1] = v477;
        v482[2] = v478;
        uint64_t v483 = v479;
        long long v484 = v477;
        swift_retain();
        outlined retain of String((uint64_t)&v484);
        outlined release of Edge?(v467);
        ShaderGraphNode.out.getter((uint64_t)v468);
        uint64_t v180 = v434;
        if (v434) {
          goto LABEL_359;
        }
        Graph.moveEdges(from:to:)((uint64_t)v468, (uint64_t)v482);
        swift_release();
        long long v489 = v469;
        outlined release of String((uint64_t)&v489);
        uint64_t v247 = *(void *)v541;
        uint64_t v561 = *(void *)v541;
        uint64_t v400 = *(void *)(*(void *)v541 + 16);
        if (!v400) {
          goto LABEL_289;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v248 = (uint64_t *)(v247 + 40);
        uint64_t v249 = (uint64_t *)(v247 + 48);
        char v250 = (uint64_t *)(v247 + 56);
        uint64_t v251 = (uint64_t *)(v247 + 64);
        unint64_t v252 = (char *)(v247 + 72);
        uint64_t v253 = (uint64_t *)(v247 + 80);
        uint64_t v32 = 1;
        uint64_t v254 = (Swift::UInt *)(v247 + 32);
        uint64_t v396 = v247 + 32;
        while (1)
        {
          Swift::UInt v255 = *v254;
          uint64_t v256 = *v248;
          uint64_t v257 = *v249;
          uint64_t v258 = *v250;
          uint64_t v259 = *v251;
          char v260 = *v252;
          uint64_t v261 = *v253;
          v537[0] = v255;
          v537[1] = v256;
          v537[2] = v257;
          v537[3] = v258;
          uint64_t v405 = v259;
          uint64_t v409 = v261;
          v537[4] = v259;
          char v411 = v260;
          char v538 = v260;
          uint64_t v539 = v261;
          long long v262 = v73[9];
          long long v458 = v73[8];
          v459[0] = v262;
          *(_OWORD *)((char *)v459 + 9) = *(_OWORD *)((char *)v73 + 153);
          long long v263 = v73[5];
          long long v454 = v73[4];
          long long v455 = v263;
          long long v264 = v73[7];
          long long v456 = v73[6];
          long long v457 = v264;
          long long v265 = v73[1];
          long long v450 = *v73;
          long long v451 = v265;
          long long v266 = v73[3];
          long long v452 = v73[2];
          long long v453 = v266;
          unint64_t v121 = v265;
          uint64_t v267 = (void *)(*((void *)&v450 + 1) + 32);
          uint64_t v268 = *(void *)(*((void *)&v450 + 1) + 16);
          uint64_t v442 = v258;
          if ((void)v450)
          {
            uint64_t v269 = v256;
            unint64_t v270 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v255, (uint64_t)v267, v268, (void *)(v450 + 16), v450 + 32);
            if (v271) {
              goto LABEL_272;
            }
            uint64_t v256 = v269;
            if ((v270 & 0x8000000000000000) != 0) {
              goto LABEL_282;
            }
          }
          else
          {
            if (!v268) {
              goto LABEL_272;
            }
            if (*v267 == v255)
            {
              unint64_t v270 = 0;
            }
            else
            {
              if (v268 == 1) {
                goto LABEL_272;
              }
              if (*(void *)(*((void *)&v450 + 1) + 40) == v255)
              {
                unint64_t v270 = 1;
              }
              else
              {
                if (v268 == 2)
                {
LABEL_271:
                  uint64_t v73 = loga;
                  long long v36 = &v450;
LABEL_272:
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined retain of Graph((uint64_t)&v450);
                  uint64_t v282 = MEMORY[0x263F8EE78];
                  goto LABEL_273;
                }
                if (*(void *)(*((void *)&v450 + 1) + 48) == v255)
                {
                  unint64_t v270 = 2;
                  long long v36 = &v450;
                }
                else
                {
                  uint64_t v293 = 0;
                  do
                  {
                    if (v268 - 3 == v293) {
                      goto LABEL_271;
                    }
                    uint64_t v294 = *(void *)(*((void *)&v450 + 1) + 56 + 8 * v293++);
                  }
                  while (v294 != v255);
                  unint64_t v270 = v293 + 2;
                  long long v36 = &v450;
                  if (v293 + 2 < 0)
                  {
LABEL_282:
                    __break(1u);
                    goto LABEL_283;
                  }
                }
              }
            }
          }
          if (v270 >= *(void *)(v121 + 16)) {
            goto LABEL_387;
          }
          unint64_t v392 = v32;
          v272 = (void *)(v121 + 48 * v270);
          uint64_t v274 = v272[4];
          uint64_t v273 = v272[5];
          uint64_t v275 = v272[6];
          uint64_t v276 = *(void *)(v273 + 16);
          *(void *)&long long v428 = v256;
          uint64_t v438 = v180;
          if (!v274) {
            break;
          }
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v450);
          swift_retain();
          swift_retain();
          swift_retain();
          Swift::Int v277 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v537, v273 + 32, v276, (void *)(v274 + 16), v274 + 32);
          uint64_t v278 = v275;
          if (v279)
          {
            swift_release();
            swift_release();
            swift_release();
            uint64_t v282 = MEMORY[0x263F8EE78];
            uint64_t v73 = loga;
            goto LABEL_266;
          }
          unint64_t v280 = v277;
          if (v277 < 0) {
            goto LABEL_389;
          }
LABEL_239:
          uint64_t v73 = loga;
          uint64_t v32 = v392;
          if (v280 >= *(void *)(v278 + 16)) {
            goto LABEL_388;
          }
          uint64_t v281 = *(void *)(v278 + 16 * v280 + 40);
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v282 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v281, v537);
          uint64_t v180 = v438;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_273:
          outlined release of Graph((uint64_t)&v450);
          uint64_t v292 = *(void *)(v282 + 16);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v292)
          {
            outlined release of [Input]((uint64_t)&v561);
            outlined release of [Input]((uint64_t)&v561);
            goto LABEL_359;
          }
          if (v32 == v400)
          {
            outlined release of [Input]((uint64_t)&v561);
            outlined release of [Input]((uint64_t)&v561);
LABEL_289:
            uint64_t v295 = swift_bridgeObjectRetain();
            unint64_t v296 = specialized Sequence.compactMap<A>(_:)(v295, v73);
            swift_bridgeObjectRelease();
            uint64_t v406 = *(void *)(v296 + 16);
            if (v406)
            {
              unint64_t v401 = v296 + 32;
              swift_bridgeObjectRetain();
              uint64_t v297 = 0;
              do
              {
                uint64_t v412 = v297;
                Swift::String v298 = (long long *)(v401 + 112 * v297);
                long long v299 = *v298;
                long long v300 = v298[2];
                v536[1] = v298[1];
                v536[2] = v300;
                v536[0] = v299;
                long long v301 = v298[3];
                long long v302 = v298[4];
                long long v303 = v298[6];
                v536[5] = v298[5];
                v536[6] = v303;
                v536[3] = v301;
                v536[4] = v302;
                outlined retain of Edge((uint64_t)v536);
                Graph.remove(_:)((uint64_t)v536);
                if (*(void *)&v536[0] != -7)
                {
                  if ((*(void *)&v536[0] & 0x8000000000000000) != 0) {
                    goto LABEL_385;
                  }
                  uint64_t v304 = *((void *)v73 + 8);
                  if (*(void *)&v536[0] >= *(void *)(v304 + 16))
                  {
LABEL_386:
                    __break(1u);
LABEL_387:
                    __break(1u);
LABEL_388:
                    __break(1u);
LABEL_389:
                    __break(1u);
                    return;
                  }
                  uint64_t v305 = (void *)(v304 + 48 * *(void *)&v536[0]);
                  unint64_t v306 = v305[4];
                  uint64_t v307 = v305[6];
                  uint64_t v393 = v305[7];
                  unint64_t v397 = v306;
                  uint64_t v424 = *(void *)(v307 + 16);
                  if (v424)
                  {
                    uint64_t v439 = v180;
                    uint64_t v308 = (Swift::UInt *)(v307 + 32);
                    unint64_t v309 = (uint64_t *)v305[6];
                    swift_bridgeObjectRetain_n();
                    outlined copy of NodePersonality(v306);
                    swift_bridgeObjectRetain();
                    uint64_t v310 = 0;
                    unint64_t v311 = v309 + 5;
                    uint64_t v312 = v309 + 6;
                    unint64_t v313 = v309 + 7;
                    uint64_t v314 = 1;
                    uint64_t v315 = v308;
                    v415 = v308;
                    while (1)
                    {
                      Swift::UInt v316 = *v315;
                      uint64_t v317 = *v311;
                      uint64_t v318 = &v308[7 * v310];
                      *(void *)&long long v428 = v314;
                      uint64_t v32 = *v313;
                      Swift::UInt v319 = v318[6];
                      char v320 = *((unsigned char *)v318 + 40);
                      uint64_t v321 = v318[4];
                      uint64_t v322 = *v312;
                      v533[0] = v316;
                      v533[1] = v317;
                      v533[2] = v322;
                      v533[3] = v32;
                      v533[4] = v321;
                      char v534 = v320;
                      Swift::UInt v535 = v319;
                      long long v323 = v73[9];
                      long long v458 = v73[8];
                      v459[0] = v323;
                      *(_OWORD *)((char *)v459 + 9) = *(_OWORD *)((char *)v73 + 153);
                      long long v324 = v73[5];
                      long long v454 = v73[4];
                      long long v455 = v324;
                      long long v325 = v73[7];
                      long long v456 = v73[6];
                      long long v457 = v325;
                      long long v326 = v73[1];
                      long long v450 = *v73;
                      long long v451 = v326;
                      long long v327 = v73[3];
                      long long v452 = v73[2];
                      long long v453 = v327;
                      long long v36 = (long long *)v450;
                      v328 = (void *)(*((void *)&v450 + 1) + 32);
                      uint64_t v329 = v326;
                      if ((void)v450) {
                        break;
                      }
                      uint64_t v344 = *(void *)(*((void *)&v450 + 1) + 16);
                      if (!v344)
                      {
                        long long v36 = &v450;
LABEL_327:
                        uint64_t v310 = v428;
                        swift_retain();
                        swift_bridgeObjectRetain();
                        outlined retain of Graph((uint64_t)&v450);
                        uint64_t v355 = MEMORY[0x263F8EE78];
                        goto LABEL_329;
                      }
                      if (*v328 == v316)
                      {
                        unint64_t v340 = 0;
                        long long v36 = &v450;
                        goto LABEL_316;
                      }
                      long long v36 = &v450;
                      if (v344 == 1) {
                        goto LABEL_327;
                      }
                      if (*(void *)(*((void *)&v450 + 1) + 40) == v316)
                      {
                        unint64_t v340 = 1;
                        goto LABEL_316;
                      }
                      if (v344 == 2) {
                        goto LABEL_327;
                      }
                      if (*(void *)(*((void *)&v450 + 1) + 48) == v316)
                      {
                        unint64_t v340 = 2;
                        goto LABEL_316;
                      }
                      uint64_t v357 = 0;
                      uint64_t v358 = v344 - 3;
                      do
                      {
                        if (v358 == v357)
                        {
                          uint64_t v73 = loga;
                          long long v36 = &v450;
                          goto LABEL_327;
                        }
                        uint64_t v359 = *(void *)(*((void *)&v450 + 1) + 56 + 8 * v357++);
                      }
                      while (v359 != v316);
                      unint64_t v340 = v357 + 2;
                      long long v36 = &v450;
                      if (v357 + 2 < 0)
                      {
LABEL_372:
                        __break(1u);
                        goto LABEL_373;
                      }
LABEL_316:
                      if (v340 >= *(void *)(v329 + 16))
                      {
LABEL_373:
                        __break(1u);
LABEL_374:
                        __break(1u);
LABEL_375:
                        __break(1u);
LABEL_376:
                        __break(1u);
                        goto LABEL_377;
                      }
                      uint64_t v345 = v32;
                      v346 = (void *)(v329 + 48 * v340);
                      uint64_t v347 = v346[4];
                      uint64_t v348 = v346[5];
                      uint64_t v349 = v346[6];
                      uint64_t v350 = *(void *)(v348 + 16);
                      if (!v347)
                      {
                        swift_retain();
                        swift_bridgeObjectRetain();
                        outlined retain of Graph((uint64_t)&v450);
                        swift_retain();
                        swift_retain();
                        unint64_t v351 = specialized Collection<>.firstIndex(of:)(v533, v348 + 32, v350);
                        if (v353) {
                          goto LABEL_328;
                        }
LABEL_322:
                        if ((v351 & 0x8000000000000000) == 0)
                        {
                          if (v351 < *(void *)(v349 + 16))
                          {
                            uint64_t v354 = *(void *)(v349 + 16 * v351 + 40);
                            swift_retain();
                            swift_retain();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_retain();
                            uint64_t v32 = v345;
                            swift_bridgeObjectRetain();
                            uint64_t v355 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v354, v533);
                            swift_release();
                            swift_release();
                            swift_bridgeObjectRelease();
                            swift_release();
                            uint64_t v73 = loga;
                            long long v36 = &v450;
                            uint64_t v310 = v428;
                            goto LABEL_329;
                          }
LABEL_381:
                          __break(1u);
LABEL_382:
                          swift_once();
LABEL_169:
                          uint64_t v181 = type metadata accessor for Logger();
                          __swift_project_value_buffer(v181, (uint64_t)logger);
                          uint64_t v564 = *(void *)v541;
                          outlined copy of NodePersonality((unint64_t)v73);
                          swift_bridgeObjectRetain();
                          outlined retain of [Input]((uint64_t)&v564);
                          outlined copy of NodePersonality((unint64_t)v73);
                          swift_bridgeObjectRetain();
                          outlined retain of [Input]((uint64_t)&v564);
                          long long v182 = Logger.logObject.getter();
                          os_log_type_t v183 = static os_log_type_t.error.getter();
                          if (!os_log_type_enabled(v182, v183))
                          {
                            swift_bridgeObjectRelease();
                            swift_release();
                            outlined consume of NodePersonality((unint64_t)v73);
                            swift_bridgeObjectRelease();
                            outlined release of [Input]((uint64_t)&v564);
                            outlined consume of NodePersonality((unint64_t)v73);
                            swift_bridgeObjectRelease();
                            outlined release of [Input]((uint64_t)&v564);

                            return;
                          }
                          long long v184 = (uint8_t *)swift_slowAlloc();
                          os_log_t logb = (os_log_t)swift_slowAlloc();
                          *(_DWORD *)long long v184 = 136315138;
                          *(void *)&long long v450 = 1701080942;
                          *((void *)&v450 + 1) = 0xE400000000000000;
                          p_Class isa = &logb->isa;
                          v185._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                          String.append(_:)(v185);
                          swift_bridgeObjectRelease();
                          *(void *)&long long v450 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v450, *((unint64_t *)&v450 + 1), (uint64_t *)&p_isa);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease();
                          outlined consume of NodePersonality((unint64_t)v73);
                          swift_bridgeObjectRelease();
                          outlined release of [Input]((uint64_t)&v564);
                          outlined consume of NodePersonality((unint64_t)v73);
                          swift_bridgeObjectRelease();
                          outlined release of [Input]((uint64_t)&v564);
                          _os_log_impl(&dword_25C27E000, v182, v183, "Could not replace image node '%s' with an invalid asset name by its default value because its default input is not connected to anything.", v184, 0xCu);
                          swift_arrayDestroy();
                          MEMORY[0x261185880](logb, -1, -1);
                          MEMORY[0x261185880](v184, -1, -1);

LABEL_58:
                          swift_bridgeObjectRelease();
                          swift_release();
                          return;
                        }
LABEL_380:
                        __break(1u);
                        goto LABEL_381;
                      }
                      uint64_t v73 = (_OWORD *)(v347 + 32);
                      swift_retain();
                      swift_bridgeObjectRetain();
                      outlined retain of Graph((uint64_t)&v450);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      long long v36 = &v450;
                      unint64_t v351 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v533, v348 + 32, v350, (void *)(v347 + 16), v347 + 32);
                      if ((v352 & 1) == 0) {
                        goto LABEL_322;
                      }
LABEL_328:
                      swift_release();
                      swift_release();
                      swift_release();
                      uint64_t v355 = MEMORY[0x263F8EE78];
                      uint64_t v73 = loga;
                      uint64_t v310 = v428;
                      uint64_t v32 = v345;
LABEL_329:
                      outlined release of Graph((uint64_t)&v450);
                      uint64_t v356 = *(void *)(v355 + 16);
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();
                      if (v356)
                      {
                        swift_bridgeObjectRelease_n();
                        outlined consume of NodePersonality(v397);
                        swift_bridgeObjectRelease();
                        uint64_t v180 = v439;
                        goto LABEL_292;
                      }
                      uint64_t v180 = v439;
                      if (v310 == v424)
                      {
                        swift_bridgeObjectRelease_n();
                        goto LABEL_345;
                      }
                      uint64_t v308 = v415;
                      uint64_t v315 = &v415[7 * v310];
                      unint64_t v311 = (uint64_t *)(v315 + 1);
                      uint64_t v312 = (uint64_t *)(v315 + 2);
                      unint64_t v313 = (uint64_t *)(v315 + 3);
                      uint64_t v314 = v310 + 1;
                    }
                    uint64_t v330 = v32;
                    unint64_t v43 = v450 + 16;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v316);
                    Swift::Int v331 = Hasher._finalize()();
                    uint64_t v332 = 1 << *(void *)v43;
                    unint64_t v333 = v332 - 1;
                    if (!__OFSUB__(v332, 1))
                    {
                      Swift::Int v334 = v333 & v331;
                      uint64_t v335 = _HashTable.UnsafeHandle._startIterator(bucket:)(v333 & v331, (void *)v36 + 2, (uint64_t)(v36 + 2));
                      p_Class isa = v36 + 1;
                      *(void *)&long long v445 = v36 + 2;
                      *((void *)&v445 + 1) = v334;
                      *(void *)&long long v446 = v335;
                      *((void *)&v446 + 1) = v336;
                      uint64_t v447 = v337;
                      LOBYTE(v448) = 0;
                      if (v335)
                      {
                        unint64_t v338 = (v335 ^ v333) + (*((uint64_t *)v36 + 3) >> 6);
                        if (v338 >= v333) {
                          unint64_t v339 = v333;
                        }
                        else {
                          unint64_t v339 = 0;
                        }
                        unint64_t v340 = v338 - v339;
                        uint64_t v73 = loga;
                        long long v36 = &v450;
                        uint64_t v32 = v330;
                        if (v328[v340] == v316)
                        {
LABEL_311:
                          if ((v340 & 0x8000000000000000) != 0) {
                            goto LABEL_372;
                          }
                          goto LABEL_316;
                        }
                        while (1)
                        {
                          _HashTable.BucketIterator.advance()();
                          if (!(void)v446) {
                            break;
                          }
                          uint64_t v341 = -1 << *p_isa;
                          unint64_t v342 = (v341 ^ ~(void)v446) + ((uint64_t)p_isa[1] >> 6);
                          if (v342 >= ~v341) {
                            uint64_t v343 = ~v341;
                          }
                          else {
                            uint64_t v343 = 0;
                          }
                          unint64_t v340 = v342 - v343;
                          if (v328[v340] == v316) {
                            goto LABEL_311;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v73 = loga;
                        long long v36 = &v450;
                        uint64_t v32 = v330;
                      }
                      goto LABEL_327;
                    }
LABEL_370:
                    __break(1u);
LABEL_371:
                    swift_once();
                    goto LABEL_102;
                  }
                  swift_bridgeObjectRetain();
                  outlined copy of NodePersonality(v306);
                  swift_bridgeObjectRetain();
LABEL_345:
                  uint64_t v360 = swift_bridgeObjectRetain();
                  unint64_t v361 = specialized Sequence.compactMap<A>(_:)(v360, v73);
                  swift_bridgeObjectRelease();
                  uint64_t v362 = *(void *)(v361 + 16);
                  if (v362)
                  {
                    swift_bridgeObjectRetain();
                    unint64_t v43 = 32;
                    do
                    {
                      long long v363 = *(_OWORD *)(v361 + v43);
                      long long v364 = *(_OWORD *)(v361 + v43 + 32);
                      v532[1] = *(_OWORD *)(v361 + v43 + 16);
                      v532[2] = v364;
                      v532[0] = v363;
                      long long v365 = *(_OWORD *)(v361 + v43 + 48);
                      long long v366 = *(_OWORD *)(v361 + v43 + 64);
                      long long v367 = *(_OWORD *)(v361 + v43 + 96);
                      v532[5] = *(_OWORD *)(v361 + v43 + 80);
                      v532[6] = v367;
                      v532[3] = v365;
                      v532[4] = v366;
                      outlined retain of Edge((uint64_t)v532);
                      Graph.remove(_:)((uint64_t)v532);
                      if (*(void *)&v532[0] != -7)
                      {
                        if ((*(void *)&v532[0] & 0x8000000000000000) != 0) {
                          goto LABEL_368;
                        }
                        uint64_t v368 = *((void *)v73 + 8);
                        if (*(void *)&v532[0] >= *(void *)(v368 + 16)) {
                          goto LABEL_369;
                        }
                        v369 = (void *)(v368 + 48 * *(void *)&v532[0]);
                        unint64_t v370 = v369[4];
                        uint64_t v32 = v369[5];
                        uint64_t v443 = v369[7];
                        outlined copy of NodePersonality(v370);
                        swift_bridgeObjectRetain();
                        uint64_t v371 = swift_bridgeObjectRetain();
                        if (specialized Sequence.allSatisfy(_:)(v371, v73))
                        {
                          uint64_t v372 = swift_bridgeObjectRetain();
                          unint64_t v440 = v370;
                          unint64_t v373 = specialized Sequence.compactMap<A>(_:)(v372, v73);
                          swift_bridgeObjectRelease();
                          specialized Sequence.forEach(_:)(v373, v73);
                          swift_bridgeObjectRelease();
                          specialized Graph.remove(_:)(v443);
                          unint64_t v370 = v440;
                        }
                        outlined consume of NodePersonality(v370);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v73 = loga;
                        long long v36 = &v450;
                      }
                      outlined release of Edge((uint64_t)v532);
                      v43 += 112;
                      --v362;
                    }
                    while (v362);
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  specialized Graph.remove(_:)(v393);
                  outlined consume of NodePersonality(v397);
                  swift_bridgeObjectRelease();
LABEL_292:
                  swift_bridgeObjectRelease();
                }
                outlined release of Edge((uint64_t)v536);
                uint64_t v297 = v412 + 1;
              }
              while (v412 + 1 != v406);
              swift_bridgeObjectRelease_n();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            specialized Graph.remove(_:)(*(uint64_t *)&v541[8]);
LABEL_359:
            swift_release();
            outlined release of String((uint64_t)&v484);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return;
          }
          uint64_t v254 = (Swift::UInt *)(v396 + 56 * v32);
          uint64_t v248 = (uint64_t *)(v254 + 1);
          uint64_t v249 = (uint64_t *)(v254 + 2);
          char v250 = (uint64_t *)(v254 + 3);
          uint64_t v251 = (uint64_t *)(v254 + 4);
          unint64_t v252 = (char *)(v254 + 5);
          uint64_t v253 = (uint64_t *)(v254 + 6);
          ++v32;
        }
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of Graph((uint64_t)&v450);
        swift_retain();
        swift_retain();
        if (!v276)
        {
LABEL_264:
          swift_release();
          swift_release();
          uint64_t v282 = MEMORY[0x263F8EE78];
          uint64_t v73 = loga;
          uint64_t v180 = v438;
          long long v36 = &v450;
LABEL_266:
          uint64_t v32 = v392;
          goto LABEL_273;
        }
        uint64_t v391 = v257;
        unint64_t v280 = 0;
        Swift::String v283 = (void *)(v273 + 80);
        while (1)
        {
          if (*(v283 - 6) == v255)
          {
            uint64_t v284 = v276;
            uint64_t v285 = *(v283 - 4);
            uint64_t v286 = *(v283 - 3);
            uint64_t v414 = *(v283 - 2);
            char v287 = *((unsigned char *)v283 - 8);
            uint64_t v427 = *v283;
            Swift::String v288 = *(uint64_t (**)(void))(*(void *)*(v283 - 5) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v288(v428))
            {
              if (v285 == v391 && v286 == v442)
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v276 = v284;
              }
              else
              {
                char v290 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v276 = v284;
                if ((v290 & 1) == 0) {
                  goto LABEL_245;
                }
              }
              if (v287)
              {
                char v291 = v411;
                if (v427 != v409) {
                  char v291 = 0;
                }
                if (v291)
                {
LABEL_263:
                  long long v36 = &v450;
                  uint64_t v278 = v275;
                  goto LABEL_239;
                }
              }
              else if ((v411 & 1) == 0 && v414 == v405 && v427 == v409)
              {
                goto LABEL_263;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v276 = v284;
            }
          }
LABEL_245:
          v283 += 7;
          if (v276 == ++v280) {
            goto LABEL_264;
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v73 = (_OWORD *)v426;
    }
    else
    {
LABEL_94:
      v565[0] = *(void *)v541;
      p_Class isa = v413;
      long long v445 = *(_OWORD *)v441;
      long long v446 = v428;
      LOBYTE(v447) = v410;
      uint64_t v448 = 0x746C7561666564;
      unint64_t v449 = 0xE700000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&p_isa);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&p_isa, (uint64_t)&v450);
      uint64_t v461 = 0;
      uint64_t v460 = 0;
      uint64_t v73 = (_OWORD *)v426;
      outlined copy of NodePersonality(v426);
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)v565);
      outlined release of UserGraphError((uint64_t *)&v450);
    }
    if (one-time initialization token for logger != -1) {
      goto LABEL_382;
    }
    goto LABEL_169;
  }
  uint64_t v562 = *(void *)v541;
  uint64_t v11 = *(void *)(*(void *)v541 + 16);
  if (!v11)
  {
LABEL_33:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)logger);
    uint64_t v563 = *((void *)&v540 + 1);
    outlined retain of [Input]((uint64_t)&v562);
    outlined copy of NodePersonality(v5);
    outlined retain of [Input]((uint64_t)&v563);
    outlined retain of [Input]((uint64_t)&v562);
    outlined copy of NodePersonality(v5);
    outlined retain of [Input]((uint64_t)&v563);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      unint64_t v57 = v5;
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136315138;
      v566 = v56 + 4;
      *(void *)&long long v450 = 1701080942;
      *((void *)&v450 + 1) = 0xE400000000000000;
      p_Class isa = v58;
      v59._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      *(void *)&long long v450 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701080942, 0xE400000000000000, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v57);
      outlined release of [Input]((uint64_t)&v563);
      outlined release of [Input]((uint64_t)&v562);
      outlined consume of NodePersonality(v57);
      outlined release of [Input]((uint64_t)&v563);
      outlined release of [Input]((uint64_t)&v562);
      _os_log_impl(&dword_25C27E000, v54, v55, "Unable to find sample node connected to %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v58, -1, -1);
      MEMORY[0x261185880](v56, -1, -1);
    }
    else
    {
      outlined consume of NodePersonality(v5);
      outlined release of [Input]((uint64_t)&v563);
      outlined release of [Input]((uint64_t)&v562);
      outlined consume of NodePersonality(v5);
      outlined release of [Input]((uint64_t)&v563);
      outlined release of [Input]((uint64_t)&v562);
    }

    return;
  }
  os_log_t log = a2;
  uint64_t v433 = v2;
  uint64_t v419 = *(void *)v541 + 32;
  unint64_t v425 = v5;
  uint64_t v416 = *(void *)v541;
  uint64_t v12 = (void *)(*(void *)v541 + 80);
  while (1)
  {
    uint64_t v13 = *(v12 - 6);
    v566 = (uint8_t *)*(v12 - 5);
    uint64_t v14 = *(v12 - 4);
    uint64_t v15 = *(v12 - 2);
    char v16 = *((unsigned char *)v12 - 8);
    uint64_t v17 = *v12;
    if (v14 == 7632239 && *(v12 - 3) == 0xE300000000000000)
    {
      unint64_t v44 = 0xE300000000000000;
      goto LABEL_28;
    }
    unint64_t v19 = *(v12 - 3);
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    v12 += 7;
    if (!--v11)
    {
      uint64_t v523 = v13;
      v524 = v566;
      uint64_t v525 = v14;
      unint64_t v526 = v19;
      uint64_t v527 = v15;
      char v528 = v16;
      uint64_t v529 = v17;
      goto LABEL_32;
    }
  }
  unint64_t v44 = v19;
LABEL_28:
  uint64_t v523 = v13;
  v524 = v566;
  uint64_t v525 = v14;
  unint64_t v526 = v44;
  uint64_t v527 = v15;
  char v528 = v16;
  uint64_t v529 = v17;
  uint64_t v32 = (uint64_t)log;
  long long v45 = *(_OWORD *)&log[16].isa;
  long long v46 = *(_OWORD *)&log[18].isa;
  long long v47 = *(_OWORD *)&log[12].isa;
  v530[7] = *(_OWORD *)&log[14].isa;
  v530[8] = v45;
  v531[0] = v46;
  *(_OWORD *)((char *)v531 + 9) = *(_OWORD *)((char *)&log[19].isa + 1);
  long long v48 = *(_OWORD *)&log[10].isa;
  v530[4] = *(_OWORD *)&log[8].isa;
  v530[5] = v48;
  v530[6] = v47;
  long long v49 = *(_OWORD *)&log[2].isa;
  v530[0] = *(_OWORD *)&log->isa;
  v530[1] = v49;
  long long v50 = *(_OWORD *)&log[6].isa;
  v530[2] = *(_OWORD *)&log[4].isa;
  v530[3] = v50;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)v530);
  unint64_t v43 = Graph.edges(from:)((uint64_t)&v523);
  outlined release of Graph((uint64_t)v530);
  if (!*(void *)(v43 + 16))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  int64_t v51 = *(_OWORD **)(v43 + 56);
  unint64_t v52 = *(void *)(v43 + 88);
  long long v36 = *(long long **)(v43 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v52 == -7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_32:
    unint64_t v5 = v425;
    goto LABEL_33;
  }
  if ((v52 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_361;
  }
  Class isa = log[8].isa;
  if (v52 >= *((void *)isa + 2))
  {
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
    goto LABEL_364;
  }
  long long v61 = (char *)isa + 48 * v52;
  unint64_t v63 = *((void *)v61 + 4);
  uint64_t v62 = *((void *)v61 + 5);
  uint64_t v65 = *((void *)v61 + 6);
  uint64_t v64 = *((void *)v61 + 7);
  uint64_t v66 = *((void *)v61 + 8);
  char v67 = v61[72];
  unint64_t v498 = v63;
  uint64_t v499 = v62;
  uint64_t v500 = v65;
  uint64_t v501 = v64;
  uint64_t v502 = v66;
  char v503 = v67;
  uint64_t v68 = *(void *)(*((void *)&v540 + 1) + 16);
  if (!v68)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_74;
  }
  char v386 = v67;
  uint64_t v389 = v66;
  v398 = v51;
  uint64_t v402 = v64;
  uint64_t v69 = *((void *)&v540 + 1);
  swift_bridgeObjectRetain_n();
  uint64_t v407 = v65;
  swift_bridgeObjectRetain();
  unint64_t v392 = v63;
  outlined copy of NodePersonality(v63);
  uint64_t v394 = v62;
  swift_bridgeObjectRetain();
  uint64_t v70 = (void *)(v69 + 80);
  while (1)
  {
    uint64_t v72 = *(v70 - 6);
    uint64_t v71 = *(v70 - 5);
    uint64_t v74 = *(v70 - 4);
    uint64_t v73 = (_OWORD *)*(v70 - 3);
    uint64_t v75 = *(v70 - 2);
    char v429 = *((unsigned char *)v70 - 8);
    uint64_t v76 = *v70;
    uint64_t v77 = one-time initialization token for filename;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v77 != -1) {
      swift_once();
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v71 + 128))(static MaterialXDataType.filename)) {
      break;
    }
    v70 += 7;
    swift_bridgeObjectRelease();
    swift_release();
    if (!--v68)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of NodePersonality(v392);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_74:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
  }
  v513[0] = v72;
  v513[1] = v71;
  v513[2] = v74;
  v513[3] = v73;
  v513[4] = v75;
  char v514 = v429;
  uint64_t v515 = v76;
  swift_bridgeObjectRelease_n();
  long long v84 = *(_OWORD *)&log[16].isa;
  long long v85 = *(_OWORD *)&log[18].isa;
  long long v86 = *(_OWORD *)&log[12].isa;
  long long v520 = *(_OWORD *)&log[14].isa;
  long long v521 = v84;
  v522[0] = v85;
  *(_OWORD *)((char *)v522 + 9) = *(_OWORD *)((char *)&log[19].isa + 1);
  long long v87 = *(_OWORD *)&log[10].isa;
  long long v517 = *(_OWORD *)&log[8].isa;
  long long v518 = v87;
  long long v519 = v86;
  long long v88 = *(_OWORD *)&log[2].isa;
  v516[0] = *(_OWORD *)&log->isa;
  v516[1] = v88;
  long long v89 = *(_OWORD *)&log[6].isa;
  v516[2] = *(_OWORD *)&log[4].isa;
  v516[3] = v89;
  outlined retain of Graph((uint64_t)v516);
  Graph.edge(to:)((uint64_t)v513, v462);
  unint64_t v90 = v462[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v462, (uint64_t)v474, &demangling cache variable for type metadata for Edge?);
  uint64_t v91 = v394;
  uint64_t v92 = v407;
  if (v475)
  {
    if (v90 != -7)
    {
      if ((v90 & 0x8000000000000000) != 0) {
        goto LABEL_378;
      }
      uint64_t v73 = v398;
      long long v36 = (long long *)v392;
      if (v90 >= *(void *)(v517 + 16))
      {
LABEL_379:
        __break(1u);
        goto LABEL_380;
      }
      uint64_t v104 = v517 + 48 * v90;
      unint64_t v43 = *(void *)(v104 + 32);
      uint64_t v32 = *(void *)(v104 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v43);
      outlined release of Edge?(v462);
      outlined release of Graph((uint64_t)v516);
      if (v43 >> 61 || *(unsigned char *)(v43 + 80) != 6)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v392);
        goto LABEL_105;
      }
      unint64_t v105 = *(void *)(v43 + 24);
      if ((v105 & 0x2000000000000000) != 0) {
        uint64_t v106 = HIBYTE(v105) & 0xF;
      }
      else {
        uint64_t v106 = *(void *)(v43 + 16) & 0xFFFFFFFFFFFFLL;
      }
      if (v106)
      {
        outlined consume of NodePersonality(v43);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v392);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_105;
      }
      goto LABEL_64;
    }
    outlined release of Edge?(v462);
  }
  outlined release of Graph((uint64_t)v516);
  unint64_t v43 = 0;
  uint64_t v32 = 0;
  long long v36 = (long long *)v392;
LABEL_64:
  uint64_t v93 = *(void *)(v394 + 16);
  uint64_t v385 = v32;
  *(void *)&long long v428 = v43;
  if (!v93) {
    goto LABEL_73;
  }
  uint64_t v94 = (void *)(v394 + 80);
  do
  {
    uint64_t v96 = *(v94 - 6);
    uint64_t v95 = *(v94 - 5);
    uint64_t v97 = *(v94 - 4);
    uint64_t v98 = *(v94 - 2);
    char v99 = *((unsigned char *)v94 - 8);
    uint64_t v100 = *v94;
    if (v97 == 0x746C7561666564 && *(v94 - 3) == 0xE700000000000000)
    {
      unint64_t v103 = 0xE700000000000000;
      goto LABEL_97;
    }
    uint64_t v102 = *(v94 - 5);
    unint64_t v103 = *(v94 - 3);
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      uint64_t v95 = v102;
LABEL_97:
      uint64_t v504 = v96;
      uint64_t v505 = v95;
      uint64_t v506 = v97;
      unint64_t v507 = v103;
      uint64_t v508 = v98;
      char v509 = v99;
      uint64_t v510 = v100;
      uint64_t v32 = (uint64_t)log;
      long long v116 = *(_OWORD *)&log[12].isa;
      long long v36 = &v450;
      v511[7] = *(_OWORD *)&log[14].isa;
      long long v117 = *(_OWORD *)&log[18].isa;
      v511[8] = *(_OWORD *)&log[16].isa;
      v512[0] = v117;
      *(_OWORD *)((char *)v512 + 9) = *(_OWORD *)((char *)&log[19].isa + 1);
      long long v118 = *(_OWORD *)&log[10].isa;
      v511[4] = *(_OWORD *)&log[8].isa;
      v511[5] = v118;
      v511[6] = v116;
      long long v119 = *(_OWORD *)&log[2].isa;
      v511[0] = *(_OWORD *)&log->isa;
      v511[1] = v119;
      long long v120 = *(_OWORD *)&log[6].isa;
      v511[2] = *(_OWORD *)&log[4].isa;
      v511[3] = v120;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v511);
      Graph.edge(to:)((uint64_t)&v504, v463);
      outlined release of Graph((uint64_t)v511);
      outlined init with take of MetalFunctionNode?((uint64_t)v463, (uint64_t)&v470, &demangling cache variable for type metadata for Edge?);
      if (!*((void *)&v470 + 1))
      {
        swift_bridgeObjectRelease();
        swift_release();
        long long v36 = (long long *)v392;
        uint64_t v32 = v385;
        unint64_t v43 = v428;
        goto LABEL_101;
      }
      v485[0] = v470;
      v485[1] = v471;
      v485[2] = v472;
      uint64_t v486 = v473;
      uint64_t v73 = (_OWORD *)*((void *)&v470 + 1);
      long long v487 = v471;
      swift_retain();
      outlined retain of String((uint64_t)&v487);
      outlined release of Edge?(v463);
      ShaderGraphNode.out.getter((uint64_t)v464);
      unint64_t v121 = v428;
      if (v433)
      {
        swift_release();
        outlined release of String((uint64_t)&v487);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of ShaderGraphNode?(v428, v385);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v392);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_286:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      Graph.moveEdges(from:to:)((uint64_t)v464, (uint64_t)v485);
      uint64_t v127 = *(void *)(v416 + 16);
      v404 = v73;
      if (!v127) {
        goto LABEL_174;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v128 = (uint64_t *)(v416 + 40);
      uint64_t v129 = (uint64_t *)(v416 + 48);
      unint64_t v130 = (uint64_t *)(v416 + 56);
      char v131 = (uint64_t *)(v416 + 64);
      v132 = (char *)(v416 + 72);
      long long v133 = (uint64_t *)(v416 + 80);
      uint64_t v134 = 1;
      long long v135 = (Swift::UInt *)v419;
      uint64_t v374 = v127;
      while (2)
      {
        Swift::UInt v136 = *v135;
        uint64_t v137 = *v128;
        uint64_t v138 = *v129;
        uint64_t v139 = *v130;
        uint64_t v140 = *v131;
        char v141 = *v132;
        uint64_t v142 = *v133;
        v495[0] = v136;
        v495[1] = v137;
        uint64_t v379 = v138;
        v495[2] = v138;
        v495[3] = v139;
        uint64_t v375 = v140;
        uint64_t v376 = v142;
        v495[4] = v140;
        char v377 = v141;
        char v496 = v141;
        uint64_t v497 = v142;
        long long v143 = *(_OWORD *)(v32 + 144);
        long long v458 = *(_OWORD *)(v32 + 128);
        v459[0] = v143;
        *(_OWORD *)((char *)v459 + 9) = *(_OWORD *)(v32 + 153);
        long long v144 = *(_OWORD *)(v32 + 80);
        long long v454 = *(_OWORD *)(v32 + 64);
        long long v455 = v144;
        long long v145 = *(_OWORD *)(v32 + 112);
        long long v456 = *(_OWORD *)(v32 + 96);
        long long v457 = v145;
        long long v146 = *(_OWORD *)(v32 + 16);
        long long v450 = *(_OWORD *)v32;
        long long v451 = v146;
        long long v147 = *(_OWORD *)(v32 + 48);
        long long v452 = *(_OWORD *)(v32 + 32);
        long long v453 = v147;
        uint64_t v148 = v146;
        unint64_t v149 = (void *)(*((void *)&v450 + 1) + 32);
        uint64_t v150 = *(void *)(*((void *)&v450 + 1) + 16);
        uint64_t v435 = v139;
        uint64_t v383 = v134;
        if ((void)v450)
        {
          uint64_t v151 = v137;
          unint64_t v152 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v136, (uint64_t)v149, v150, (void *)(v450 + 16), v450 + 32);
          if ((v153 & 1) == 0)
          {
            uint64_t v137 = v151;
            if ((v152 & 0x8000000000000000) != 0) {
              goto LABEL_377;
            }
            goto LABEL_120;
          }
LABEL_117:
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v450);
          uint64_t v154 = MEMORY[0x263F8EE78];
          goto LABEL_151;
        }
        if (!v150) {
          goto LABEL_117;
        }
        if (*v149 == v136)
        {
          unint64_t v152 = 0;
          goto LABEL_120;
        }
        if (v150 == 1) {
          goto LABEL_117;
        }
        if (*(void *)(*((void *)&v450 + 1) + 40) == v136)
        {
          unint64_t v152 = 1;
          goto LABEL_120;
        }
        if (v150 == 2) {
          goto LABEL_117;
        }
        if (*(void *)(*((void *)&v450 + 1) + 48) == v136)
        {
          unint64_t v152 = 2;
          goto LABEL_120;
        }
        uint64_t v172 = 0;
        do
        {
          if (v150 - 3 == v172)
          {
            uint64_t v32 = (uint64_t)log;
            long long v36 = &v450;
            uint64_t v73 = v404;
            uint64_t v127 = v374;
            goto LABEL_117;
          }
          uint64_t v173 = *(void *)(*((void *)&v450 + 1) + 56 + 8 * v172++);
        }
        while (v173 != v136);
        unint64_t v152 = v172 + 2;
        uint64_t v32 = (uint64_t)log;
        long long v36 = &v450;
        if (v172 + 2 < 0)
        {
LABEL_377:
          __break(1u);
LABEL_378:
          __break(1u);
          goto LABEL_379;
        }
LABEL_120:
        if (v152 >= *(void *)(v148 + 16)) {
          goto LABEL_376;
        }
        uint64_t v155 = (void *)(v148 + 48 * v152);
        uint64_t v157 = v155[4];
        uint64_t v156 = v155[5];
        uint64_t v158 = v155[6];
        uint64_t v159 = *(void *)(v156 + 16);
        uint64_t v417 = v137;
        if (!v157)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v450);
          swift_retain();
          swift_retain();
          if (!v159)
          {
LABEL_148:
            swift_release();
            swift_release();
            uint64_t v154 = MEMORY[0x263F8EE78];
            long long v36 = &v450;
            goto LABEL_150;
          }
          unint64_t v162 = 0;
          uint64_t v164 = (void *)(v156 + 80);
          uint64_t v390 = v159;
          while (2)
          {
            if (*(v164 - 6) == v136)
            {
              uint64_t v165 = *(v164 - 4);
              uint64_t v166 = *(v164 - 3);
              uint64_t v378 = *(v164 - 2);
              char v387 = *((unsigned char *)v164 - 8);
              uint64_t v381 = *v164;
              long long v167 = *(uint64_t (**)(uint64_t))(*(void *)*(v164 - 5) + 128);
              swift_retain();
              swift_bridgeObjectRetain();
              if (v167(v417))
              {
                if (v165 == v379 && v166 == v435)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v159 = v390;
LABEL_139:
                  if (v387)
                  {
                    char v170 = v377;
                    if (v381 != v376) {
                      char v170 = 0;
                    }
                    if (v170)
                    {
LABEL_147:
                      long long v36 = &v450;
LABEL_124:
                      if (v162 < *(void *)(v158 + 16))
                      {
                        uint64_t v163 = *(void *)(v158 + 16 * v162 + 40);
                        swift_retain();
                        swift_retain();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_retain();
                        swift_bridgeObjectRetain();
                        uint64_t v154 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v163, v495);
                        swift_release();
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_release();
                        uint64_t v73 = v404;
                        uint64_t v127 = v374;
                        goto LABEL_151;
                      }
LABEL_384:
                      __break(1u);
LABEL_385:
                      __break(1u);
                      goto LABEL_386;
                    }
                  }
                  else if ((v377 & 1) == 0 && v378 == v375 && v381 == v376)
                  {
                    goto LABEL_147;
                  }
                }
                else
                {
                  char v169 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v159 = v390;
                  if (v169) {
                    goto LABEL_139;
                  }
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v159 = v390;
              }
            }
            v164 += 7;
            if (v159 == ++v162) {
              goto LABEL_148;
            }
            continue;
          }
        }
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of Graph((uint64_t)&v450);
        swift_retain();
        swift_retain();
        swift_retain();
        Swift::Int v160 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v495, v156 + 32, v159, (void *)(v157 + 16), v157 + 32);
        if ((v161 & 1) == 0)
        {
          unint64_t v162 = v160;
          if ((v160 & 0x8000000000000000) == 0) {
            goto LABEL_124;
          }
          __break(1u);
          goto LABEL_384;
        }
        swift_release();
        swift_release();
        swift_release();
        uint64_t v154 = MEMORY[0x263F8EE78];
LABEL_150:
        uint64_t v73 = v404;
        uint64_t v127 = v374;
LABEL_151:
        outlined release of Graph((uint64_t)&v450);
        uint64_t v171 = *(void *)(v154 + 16);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        if (v171)
        {
          outlined release of [Input]((uint64_t)&v562);
          outlined release of [Input]((uint64_t)&v562);
          unint64_t v121 = v428;
          goto LABEL_285;
        }
        unint64_t v121 = v428;
        if (v383 != v127)
        {
          long long v135 = (Swift::UInt *)(v419 + 56 * v383);
          uint64_t v128 = (uint64_t *)(v135 + 1);
          uint64_t v129 = (uint64_t *)(v135 + 2);
          unint64_t v130 = (uint64_t *)(v135 + 3);
          char v131 = (uint64_t *)(v135 + 4);
          v132 = (char *)(v135 + 5);
          long long v133 = (uint64_t *)(v135 + 6);
          uint64_t v134 = v383 + 1;
          continue;
        }
        break;
      }
      outlined release of [Input]((uint64_t)&v562);
      outlined release of [Input]((uint64_t)&v562);
LABEL_174:
      uint64_t v186 = swift_bridgeObjectRetain();
      unint64_t v187 = specialized Sequence.compactMap<A>(_:)(v186, (_OWORD *)v32);
      swift_bridgeObjectRelease();
      uint64_t v388 = *(void *)(v187 + 16);
      if (v388)
      {
        unint64_t v384 = v187 + 32;
        swift_bridgeObjectRetain();
        uint64_t v188 = 0;
        do
        {
          uint64_t v418 = v188;
          long long v189 = (long long *)(v384 + 112 * v188);
          long long v190 = *v189;
          long long v191 = v189[1];
          v494[2] = v189[2];
          v494[1] = v191;
          v494[0] = v190;
          long long v192 = v189[3];
          long long v193 = v189[4];
          long long v194 = v189[5];
          v494[6] = v189[6];
          v494[5] = v194;
          v494[4] = v193;
          v494[3] = v192;
          outlined retain of Edge((uint64_t)v494);
          Graph.remove(_:)((uint64_t)v494);
          if (*(void *)&v494[0] != -7)
          {
            if ((*(void *)&v494[0] & 0x8000000000000000) != 0) {
              goto LABEL_374;
            }
            uint64_t v195 = *(void *)(v32 + 64);
            if (*(void *)&v494[0] >= *(void *)(v195 + 16)) {
              goto LABEL_375;
            }
            long long v196 = (void *)(v195 + 48 * *(void *)&v494[0]);
            unint64_t v197 = v196[4];
            uint64_t v198 = v196[6];
            uint64_t v380 = v196[7];
            unint64_t v382 = v197;
            uint64_t v436 = *(void *)(v198 + 16);
            if (v436)
            {
              Swift::String v199 = (Swift::UInt *)(v198 + 32);
              char v200 = (uint64_t *)v196[6];
              swift_bridgeObjectRetain_n();
              outlined copy of NodePersonality(v197);
              swift_bridgeObjectRetain();
              uint64_t v201 = 0;
              long long v202 = v200 + 5;
              unint64_t v203 = v200 + 6;
              uint64_t v204 = v200 + 7;
              uint64_t v205 = 1;
              unint64_t v206 = v199;
              v422 = v199;
              while (1)
              {
                Swift::UInt v207 = *v206;
                uint64_t v208 = *v202;
                Swift::String v209 = &v199[7 * v201];
                uint64_t v201 = v205;
                uint64_t v210 = *v204;
                Swift::UInt v211 = v209[6];
                char v212 = *((unsigned char *)v209 + 40);
                uint64_t v213 = v209[4];
                uint64_t v214 = *v203;
                v491[0] = *v206;
                v491[1] = v208;
                v491[2] = v214;
                v491[3] = v210;
                v491[4] = v213;
                char v492 = v212;
                Swift::UInt v493 = v211;
                long long v215 = *(_OWORD *)(v32 + 144);
                long long v458 = *(_OWORD *)(v32 + 128);
                v459[0] = v215;
                *(_OWORD *)((char *)v459 + 9) = *(_OWORD *)(v32 + 153);
                long long v216 = *(_OWORD *)(v32 + 80);
                long long v454 = *(_OWORD *)(v32 + 64);
                long long v455 = v216;
                long long v217 = *(_OWORD *)(v32 + 112);
                long long v456 = *(_OWORD *)(v32 + 96);
                long long v457 = v217;
                long long v218 = *(_OWORD *)(v32 + 16);
                long long v450 = *(_OWORD *)v32;
                long long v451 = v218;
                long long v219 = *(_OWORD *)(v32 + 48);
                long long v452 = *(_OWORD *)(v32 + 32);
                long long v453 = v219;
                unint64_t v43 = v218;
                unint64_t v220 = (void *)(*((void *)&v450 + 1) + 32);
                uint64_t v221 = *(void *)(*((void *)&v450 + 1) + 16);
                if ((void)v450)
                {
                  unint64_t v222 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v207, (uint64_t)v220, v221, (void *)(v450 + 16), v450 + 32);
                  if (v223) {
                    goto LABEL_197;
                  }
                  if ((v222 & 0x8000000000000000) != 0) {
                    goto LABEL_367;
                  }
                }
                else
                {
                  if (!v221) {
                    goto LABEL_197;
                  }
                  if (*v220 == v207)
                  {
                    unint64_t v222 = 0;
                  }
                  else
                  {
                    if (v221 == 1) {
                      goto LABEL_197;
                    }
                    if (*(void *)(*((void *)&v450 + 1) + 40) == v207)
                    {
                      unint64_t v222 = 1;
                    }
                    else
                    {
                      if (v221 == 2) {
                        goto LABEL_197;
                      }
                      if (*(void *)(*((void *)&v450 + 1) + 48) != v207)
                      {
                        uint64_t v232 = 0;
                        while (v221 - 3 != v232)
                        {
                          uint64_t v233 = *(void *)(*((void *)&v450 + 1) + 56 + 8 * v232++);
                          if (v233 == v207)
                          {
                            unint64_t v222 = v232 + 2;
                            if (((v232 + 2) & 0x8000000000000000) == 0) {
                              goto LABEL_191;
                            }
                            goto LABEL_367;
                          }
                        }
LABEL_197:
                        swift_retain();
                        swift_bridgeObjectRetain();
                        outlined retain of Graph((uint64_t)&v450);
                        uint64_t v230 = MEMORY[0x263F8EE78];
                        goto LABEL_198;
                      }
                      unint64_t v222 = 2;
                    }
                  }
                }
LABEL_191:
                if (v222 >= *(void *)(v43 + 16)) {
                  goto LABEL_366;
                }
                long long v224 = (void *)(v43 + 48 * v222);
                uint64_t v225 = v224[4];
                uint64_t v226 = v224[5];
                uint64_t v227 = v224[6];
                swift_retain_n();
                swift_bridgeObjectRetain_n();
                outlined retain of Graph((uint64_t)&v450);
                swift_retain();
                swift_retain();
                swift_retain();
                specialized OrderedDictionary.subscript.getter((uint64_t)v491, v225, v226, v227);
                uint64_t v229 = v228;
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                if (v229)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  uint64_t v230 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v229, v491);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                }
                else
                {
                  uint64_t v230 = MEMORY[0x263F8EE78];
                }
                long long v36 = &v450;
                uint64_t v73 = v404;
LABEL_198:
                outlined release of Graph((uint64_t)&v450);
                uint64_t v231 = *(void *)(v230 + 16);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                if (v231)
                {
                  swift_bridgeObjectRelease_n();
                  outlined consume of NodePersonality(v382);
                  swift_bridgeObjectRelease();
                  unint64_t v121 = v428;
                  uint64_t v32 = (uint64_t)log;
                  goto LABEL_177;
                }
                uint64_t v32 = (uint64_t)log;
                unint64_t v121 = v428;
                if (v201 == v436)
                {
                  swift_bridgeObjectRelease_n();
                  goto LABEL_213;
                }
                Swift::String v199 = v422;
                unint64_t v206 = &v422[7 * v201];
                long long v202 = (uint64_t *)(v206 + 1);
                unint64_t v203 = (uint64_t *)(v206 + 2);
                uint64_t v204 = (uint64_t *)(v206 + 3);
                uint64_t v205 = v201 + 1;
              }
            }
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v197);
            swift_bridgeObjectRetain();
LABEL_213:
            uint64_t v234 = swift_bridgeObjectRetain();
            unint64_t v235 = specialized Sequence.compactMap<A>(_:)(v234, (_OWORD *)v32);
            swift_bridgeObjectRelease();
            uint64_t v236 = *(void *)(v235 + 16);
            if (v236)
            {
              swift_bridgeObjectRetain();
              unint64_t v43 = 32;
              do
              {
                long long v239 = *(_OWORD *)(v235 + v43);
                long long v240 = *(_OWORD *)(v235 + v43 + 16);
                v490[2] = *(_OWORD *)(v235 + v43 + 32);
                v490[1] = v240;
                v490[0] = v239;
                long long v241 = *(_OWORD *)(v235 + v43 + 48);
                long long v242 = *(_OWORD *)(v235 + v43 + 64);
                long long v243 = *(_OWORD *)(v235 + v43 + 80);
                v490[6] = *(_OWORD *)(v235 + v43 + 96);
                v490[5] = v243;
                v490[4] = v242;
                v490[3] = v241;
                outlined retain of Edge((uint64_t)v490);
                Graph.remove(_:)((uint64_t)v490);
                if (*(void *)&v490[0] != -7)
                {
                  if ((*(void *)&v490[0] & 0x8000000000000000) != 0) {
                    goto LABEL_362;
                  }
                  uint64_t v244 = *(void *)(v32 + 64);
                  if (*(void *)(v244 + 16) <= *(void *)&v490[0]) {
                    goto LABEL_363;
                  }
                  uint64_t v245 = v244 + 48 * *(void *)&v490[0];
                  uint64_t v423 = *(void *)(v245 + 56);
                  unint64_t v437 = *(void *)(v245 + 32);
                  outlined copy of NodePersonality(v437);
                  swift_bridgeObjectRetain();
                  uint64_t v246 = swift_bridgeObjectRetain();
                  if (specialized Sequence.allSatisfy(_:)(v246, (_OWORD *)v32))
                  {
                    uint64_t v237 = swift_bridgeObjectRetain();
                    unint64_t v238 = specialized Sequence.compactMap<A>(_:)(v237, (_OWORD *)v32);
                    swift_bridgeObjectRelease();
                    specialized Sequence.forEach(_:)(v238, (long long *)v32);
                    long long v36 = &v450;
                    swift_bridgeObjectRelease();
                    specialized Graph.remove(_:)(v423);
                  }
                  outlined consume of NodePersonality(v437);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v73 = v404;
                }
                outlined release of Edge((uint64_t)v490);
                v43 += 112;
                --v236;
              }
              while (v236);
              swift_bridgeObjectRelease();
              unint64_t v121 = v428;
            }
            swift_bridgeObjectRelease();
            specialized Graph.remove(_:)(v380);
            outlined consume of NodePersonality(v382);
            swift_bridgeObjectRelease();
LABEL_177:
            swift_bridgeObjectRelease();
          }
          outlined release of Edge((uint64_t)v494);
          uint64_t v188 = v418 + 1;
        }
        while (v418 + 1 != v388);
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_283:
        swift_bridgeObjectRelease();
      }
      specialized Graph.remove(_:)(*(uint64_t *)&v541[8]);
LABEL_285:
      swift_release();
      long long v488 = v465;
      outlined release of String((uint64_t)&v488);
      swift_release();
      outlined release of String((uint64_t)&v487);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of ShaderGraphNode?(v121, v385);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of NodePersonality(v392);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_286;
    }
    v94 += 7;
    --v93;
  }
  while (v93);
  uint64_t v504 = v96;
  uint64_t v505 = v102;
  uint64_t v506 = v97;
  unint64_t v507 = v103;
  uint64_t v508 = v98;
  char v509 = v99;
  uint64_t v510 = v100;
  uint64_t v91 = v394;
  uint64_t v92 = v407;
  long long v36 = (long long *)v392;
  uint64_t v32 = v385;
  unint64_t v43 = v428;
LABEL_73:
  p_Class isa = v36;
  *(void *)&long long v445 = v91;
  *((void *)&v445 + 1) = v92;
  *(void *)&long long v446 = v402;
  *((void *)&v446 + 1) = v389;
  LOBYTE(v447) = v386;
  uint64_t v448 = 0x746C7561666564;
  unint64_t v449 = 0xE700000000000000;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&p_isa);
  outlined init with take of UserGraphError.ErrorType((uint64_t)&p_isa, (uint64_t)&v450);
  uint64_t v461 = 0;
  uint64_t v460 = 0;
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality((unint64_t)v36);
  swift_bridgeObjectRetain();
  outlined release of UserGraphError((uint64_t *)&v450);
LABEL_101:
  if (one-time initialization token for logger != -1) {
    goto LABEL_371;
  }
LABEL_102:
  uint64_t v122 = type metadata accessor for Logger();
  __swift_project_value_buffer(v122, (uint64_t)logger);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality((unint64_t)v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality((unint64_t)v36);
  swift_bridgeObjectRetain();
  uint64_t v123 = Logger.logObject.getter();
  os_log_type_t v124 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v123, v124))
  {
    uint64_t v125 = (uint8_t *)swift_slowAlloc();
    v421 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v125 = 136315138;
    *(void *)&long long v450 = 1701080942;
    *((void *)&v450 + 1) = 0xE400000000000000;
    p_Class isa = v421;
    v126._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v126);
    swift_bridgeObjectRelease();
    *(void *)&long long v450 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v450, *((unint64_t *)&v450 + 1), (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality((unint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality((unint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25C27E000, v123, v124, "Could not replace image node '%s' with an invalid asset name by its default value because its default input is not connected to anything.", v125, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v421, -1, -1);
    MEMORY[0x261185880](v125, -1, -1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of ShaderGraphNode?(v428, v385);
    outlined consume of NodePersonality((unint64_t)v36);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality((unint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v43, v32);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality((unint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality((unint64_t)v36);
  }
LABEL_105:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t UserGraphCompiler.compiledShaderProgram(for:)(uint64_t a1)
{
  type metadata accessor for MetalShaderProgram();
  long long v3 = (void *)swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8EE78];
  v3[2] = MEMORY[0x263F8EE78];
  v3[3] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v3[4] = v4;
  v3[5] = v4;
  v3[6] = 1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v1 + 120))(a1, v3);
  swift_release();
  return v5;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = a1 + 64;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (String, MetalDataType)));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (uniformPropertyName: String, type: MetalDataType)));
      swift_dynamicCast();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v13;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v13;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = v2 + 40 * v6;
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      *(void *)(v7 + 48) = v11;
      *(_OWORD *)(v7 + 56) = v12;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    BOOL v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  long long *v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  char v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = *(_OWORD *)(a1 + 144);
  long long v39 = *(_OWORD *)(a1 + 128);
  long long v40 = v4;
  uint64_t v5 = *(_OWORD *)(a1 + 176);
  long long v41 = *(_OWORD *)(a1 + 160);
  long long v42 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 80);
  uint64_t v35 = *(_OWORD *)(a1 + 64);
  long long v36 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 112);
  long long v37 = *(_OWORD *)(a1 + 96);
  long long v38 = v7;
  uint64_t v8 = *(_OWORD *)(a1 + 48);
  char v33 = *(_OWORD *)(a1 + 32);
  uint64_t v34 = v8;
  char v10 = *((void *)&v33 + 1);
  uint64_t v9 = v33;
  outlined retain of (String, NodeDef)((uint64_t)&v33);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if (v12)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  BOOL v13 = 192;
  while (1)
  {
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v14 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v14 = v9;
    v14[1] = v10;
    uint64_t v15 = (_OWORD *)(v2[7] + 144 * result);
    *uint64_t v15 = v34;
    uint64_t v16 = v35;
    long long v17 = v36;
    Class v18 = v38;
    v15[3] = v37;
    v15[4] = v18;
    v15[1] = v16;
    v15[2] = v17;
    unint64_t v19 = v39;
    Swift::String v20 = v40;
    Swift::Bool v21 = v42;
    v15[7] = v41;
    v15[8] = v21;
    v15[5] = v19;
    v15[6] = v20;
    Swift::String v22 = v2[2];
    Swift::Bool v23 = __OFADD__(v22, 1);
    Swift::String v24 = v22 + 1;
    if (v23) {
      break;
    }
    v2[2] = v24;
    if (!--v3) {
      goto LABEL_9;
    }
    Swift::Bool v25 = v13 + 160;
    uint64_t v26 = (long long *)(a1 + v13);
    char v27 = v26[7];
    long long v39 = v26[6];
    long long v40 = v27;
    uint64_t v28 = v26[9];
    long long v41 = v26[8];
    long long v42 = v28;
    uint64_t v29 = v26[3];
    uint64_t v35 = v26[2];
    long long v36 = v29;
    long long v30 = v26[5];
    long long v37 = v26[4];
    long long v38 = v30;
    uint64_t v31 = v26[1];
    char v33 = *v26;
    uint64_t v34 = v31;
    char v10 = *((void *)&v33 + 1);
    uint64_t v9 = v33;
    outlined retain of (String, NodeDef)((uint64_t)&v33);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    BOOL v13 = v25;
    if (v32) {
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  if (!*(void *)(a1 + 16))
  {
    long long v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  Swift::Bool v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (unsigned char *)(a1 + 104);
  while (1)
  {
    Swift::String v22 = v4;
    uint64_t v6 = *((void *)v5 - 9);
    uint64_t v7 = *((void *)v5 - 8);
    uint64_t v9 = *((void *)v5 - 7);
    uint64_t v8 = *((void *)v5 - 6);
    char v10 = *((void *)v5 - 5);
    uint64_t v11 = *((void *)v5 - 4);
    uint64_t v12 = *((void *)v5 - 3);
    BOOL v13 = *(v5 - 16);
    Swift::Bool v25 = *(v5 - 15);
    Swift::String v24 = *((void *)v5 - 1);
    Swift::Bool v23 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of GeomPropDef.GeomProp(v11, v12, v13);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v16 = v6;
    v16[1] = v7;
    long long v17 = v3[7] + (result << 6);
    *(void *)long long v17 = v9;
    *(void *)(v17 + 8) = v8;
    *(void *)(v17 + 16) = v10;
    *(void *)(v17 + 24) = v11;
    *(void *)(v17 + 32) = v12;
    *(unsigned char *)(v17 + 40) = v13;
    *(unsigned char *)(v17 + 41) = v25;
    *(void *)(v17 + 48) = v24;
    *(unsigned char *)(v17 + 56) = v23;
    Class v18 = v3[2];
    unint64_t v19 = __OFADD__(v18, 1);
    Swift::String v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v3[2] = v20;
    v5 += 80;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDef.Implementation]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Input, FunctionNodeID>, (uint64_t (*)(long long *))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Output, FunctionNodeID>, (uint64_t (*)(long long *))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SGGraph.ReplacementNode>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 3);
    uint64_t v6 = *((void *)v4 - 2);
    uint64_t v7 = *((void *)v4 - 1);
    uint64_t v15 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[7] + 24 * result;
    *(void *)uint64_t v11 = v7;
    *(_OWORD *)(v11 + 8) = v15;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    uint64_t v4 = (_OWORD *)((char *)v4 + 40);
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  _OWORD *v15;
  long long v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  unsigned char v28[41];
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, ShaderGraphNode>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = v3 - 1;
  for (unint64_t i = 32; ; i += 128)
  {
    *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + i + 96);
    *(_OWORD *)&v28[25] = *(_OWORD *)(a1 + i + 105);
    uint64_t v6 = *(_OWORD *)(a1 + i + 80);
    char v27 = *(_OWORD *)(a1 + i + 64);
    *(_OWORD *)uint64_t v28 = v6;
    uint64_t v7 = *(_OWORD *)(a1 + i + 16);
    Swift::Bool v23 = *(_OWORD *)(a1 + i);
    Swift::String v24 = v7;
    uint64_t v8 = *(_OWORD *)(a1 + i + 48);
    Swift::Bool v25 = *(_OWORD *)(a1 + i + 32);
    uint64_t v26 = v8;
    Swift::String v22 = *(_OWORD *)&v28[8];
    uint64_t v9 = *(void *)&v28[24];
    char v10 = *(void *)&v28[32];
    uint64_t v11 = v28[40];
    uint64_t v12 = v6;
    uint64_t v29 = v23;
    long long v30 = v24;
    uint64_t v31 = v25;
    uint64_t v32 = v8;
    LOBYTE(v33) = v27;
    *((void *)&v33 + 1) = *((void *)&v27 + 1);
    outlined retain of (Key, ShaderGraphNode)((uint64_t)&v23);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(&v29);
    if (v14) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v15 = (_OWORD *)(v2[6] + 80 * result);
    uint64_t v16 = v32;
    v15[2] = v31;
    v15[3] = v16;
    v15[4] = v33;
    long long v17 = v30;
    *uint64_t v15 = v29;
    v15[1] = v17;
    Class v18 = v2[7] + 48 * result;
    *(void *)Class v18 = v12;
    *(_OWORD *)(v18 + 8) = v22;
    *(void *)(v18 + 24) = v9;
    *(void *)(v18 + 32) = v10;
    *(unsigned char *)(v18 + 40) = v11;
    unint64_t v19 = v2[2];
    Swift::String v20 = __OFADD__(v19, 1);
    Swift::Bool v21 = v19 + 1;
    if (v20) {
      goto LABEL_12;
    }
    v2[2] = v21;
    if (!v4)
    {
      swift_release();
      goto LABEL_10;
    }
    --v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  _OWORD *v18;
  long long v19;
  long long v20;
  void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = (void *)*(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    uint64_t v9 = v4[1];
    char v10 = v4[2];
    uint64_t v11 = v4[3];
    uint64_t v12 = *((unsigned char *)v4 + 32);
    BOOL v13 = v4[5];
    uint64_t v14 = v4[6];
    uint64_t v15 = v4[7];
    *(void *)&Swift::Bool v25 = *(v4 - 4);
    *((void *)&v25 + 1) = v5;
    *(void *)&uint64_t v26 = v6;
    *((void *)&v26 + 1) = v7;
    *(void *)&char v27 = v8;
    *((void *)&v27 + 1) = v9;
    *(void *)&uint64_t v28 = v10;
    *((void *)&v28 + 1) = v11;
    LOBYTE(v29) = v12;
    *((void *)&v29 + 1) = v13;
    outlined copy of SGDataTypeStorage((id)v25, v5, v6, v7, v8, v9, v10, v11, v12);
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(&v25);
    if (v17) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    Class v18 = (_OWORD *)(v2[6] + 80 * result);
    unint64_t v19 = v28;
    v18[2] = v27;
    v18[3] = v19;
    v18[4] = v29;
    Swift::String v20 = v26;
    *Class v18 = v25;
    v18[1] = v20;
    Swift::Bool v21 = (void *)(v2[7] + 16 * result);
    *Swift::Bool v21 = v14;
    v21[1] = v15;
    Swift::String v22 = v2[2];
    Swift::Bool v23 = __OFADD__(v22, 1);
    Swift::String v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v4 += 12;
    v2[2] = v24;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : String]>);
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, InputSpec>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 3);
    uint64_t v6 = *((void *)v4 - 2);
    uint64_t v7 = *((void *)v4 - 1);
    uint64_t v15 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[7] + 24 * result;
    *(void *)uint64_t v11 = v7;
    *(_OWORD *)(v11 + 8) = v15;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    uint64_t v4 = (_OWORD *)((char *)v4 + 40);
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ShaderGraphNode.ID>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MetalDataType, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    char v10 = (void *)(v2[7] + 16 * result);
    *char v10 = v6;
    v10[1] = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    long long v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (MetalDataType, Any?)?>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, (MetalDataType, Any?)?));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)&v17, v3[7] + 40 * result, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MTLFunctionStitchingInputNode>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ShaderGraphNode.ID>);
    long long v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      char v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, ShaderGraphNode.ID>);
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;

  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, MetalFunctionNode>);
    long long v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of MetalFunctionNode(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      char v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, FunctionNodeID>);
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
    long long v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      char v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(long long *))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  uint64_t v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(v7 - 1);
    uint64_t v9 = *v7;
    uint64_t v10 = v7[1];
    uint64_t v11 = v7[2];
    char v12 = *((unsigned char *)v7 + 24);
    uint64_t v13 = v7[4];
    uint64_t v14 = v7[5];
    *(void *)&long long v22 = *(v7 - 2);
    *((void *)&v22 + 1) = v8;
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v10;
    *(void *)&long long v24 = v11;
    BYTE8(v24) = v12;
    uint64_t v25 = v13;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = a3(&v22);
    if (v16) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v17 = v5[6] + 56 * result;
    long long v18 = v23;
    *(_OWORD *)uint64_t v17 = v22;
    *(_OWORD *)(v17 + 16) = v18;
    *(_OWORD *)(v17 + 32) = v24;
    *(void *)(v17 + 48) = v25;
    *(void *)(v5[7] + 8 * result) = v14;
    uint64_t v19 = v5[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7 += 8;
    v5[2] = v21;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  long long v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v6 = *(i - 1);
      uint64_t v7 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      if (v9) {
        break;
      }
      *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v10 = 8 * result;
      *(void *)(v4[6] + v10) = v6;
      *(void *)(v4[7] + v10) = v7;
      uint64_t v11 = v4[2];
      uint64_t v12 = __OFADD__(v11, 1);
      BOOL v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v4[2] = v13;
      if (!--v2) {
        return (unint64_t)v4;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    unint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XMLElement);
    unint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, (void (*)(void))type metadata accessor for MaterialXTarget);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, (void (*)(void))type metadata accessor for SGWarning);
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, void (*a2)(void))
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    a2(0);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

unint64_t specialized Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v88 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    uint64_t v84 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v7 = v88 + 48 * v6;
      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        unint64_t v11 = *(void *)v7;
        char v10 = *(char **)(v7 + 8);
        long long v87 = *(_OWORD *)(v7 + 24);
        char v85 = *(unsigned char *)(v7 + 40);
        swift_bridgeObjectRetain_n();
        unint64_t v90 = v11;
        outlined copy of NodePersonality(v11);
        uint64_t v111 = v10;
        swift_bridgeObjectRetain();
        uint64_t v12 = v8 + 56;
        while (1)
        {
          uint64_t v13 = *(void *)(v12 - 16);
          uint64_t v14 = one-time initialization token for sampler;
          swift_retain();
          swift_bridgeObjectRetain();
          if (v14 != -1) {
            swift_once();
          }
          char v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 128))(static MaterialXDataType.sampler);
          swift_bridgeObjectRelease();
          swift_release();
          if (v15) {
            break;
          }
          v12 += 56;
          if (!--v9)
          {
            swift_bridgeObjectRelease();
            outlined consume of NodePersonality(v90);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v5 = v82;
            goto LABEL_3;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v16 = v84;
        *(void *)&v93[0] = v84;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1);
          uint64_t v16 = *(void *)&v93[0];
        }
        uint64_t v5 = v82;
        uint64_t v17 = v111;
        unint64_t v19 = *(void *)(v16 + 16);
        unint64_t v18 = *(void *)(v16 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v16 = *(void *)&v93[0];
        }
        *(void *)(v16 + 16) = v19 + 1;
        uint64_t v84 = v16;
        uint64_t v20 = v16 + 48 * v19;
        *(void *)(v20 + 32) = v90;
        *(void *)(v20 + 40) = v17;
        *(void *)(v20 + 48) = v8;
        *(_OWORD *)(v20 + 56) = v87;
        *(unsigned char *)(v20 + 72) = v85;
      }
LABEL_3:
      ++v6;
    }
    while (v6 != v5);
    uint64_t v4 = a1;
    swift_bridgeObjectRelease();
    uint64_t v21 = v81;
    uint64_t v22 = *(void *)(v84 + 16);
    if (v22) {
      goto LABEL_17;
    }
LABEL_54:
    swift_release();
    if (v5) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
  uint64_t v21 = v3;
  uint64_t v22 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v22) {
    goto LABEL_54;
  }
LABEL_17:
  long long v23 = *(void **)(v83 + 64);
  long long v24 = (unint64_t *)(swift_retain() + 56);
  while (1)
  {
    unint64_t v25 = *(v24 - 3);
    unint64_t v26 = *v24;
    outlined copy of NodePersonality(v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      long long v23 = (void *)result;
      if ((v26 & 0x8000000000000000) == 0) {
        goto LABEL_20;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      swift_release_n();
      uint64_t v5 = v82;
      *(void *)(v83 + 64) = v23;
      uint64_t v21 = v81;
      uint64_t v4 = a1;
      if (v82)
      {
LABEL_26:
        swift_bridgeObjectRetain();
        uint64_t v30 = MEMORY[0x263F8EE78];
        uint64_t v31 = (uint64_t *)(v4 + 40);
        uint64_t v111 = (char *)0x800000025C421DA0;
        do
        {
          unint64_t v32 = *(v31 - 1);
          if (v32 >> 61 == 5)
          {
            uint64_t v33 = v5;
            uint64_t v34 = v30;
            uint64_t v35 = *v31;
            uint64_t v36 = v31[1];
            long long v91 = *((_OWORD *)v31 + 1);
            char v37 = *((unsigned char *)v31 + 32);
            outlined copy of NodePersonality(v32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v38._uint64_t countAndFlagsBits = 0xD000000000000013;
            v38._char object = v111;
            Swift::Bool v39 = String.hasPrefix(_:)(v38);
            swift_bridgeObjectRelease();
            if (v39)
            {
              uint64_t v30 = v34;
              *(void *)&v93[0] = v34;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
                uint64_t v30 = *(void *)&v93[0];
              }
              long long v40 = v91;
              unint64_t v42 = *(void *)(v30 + 16);
              unint64_t v41 = *(void *)(v30 + 24);
              if (v42 >= v41 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
                long long v40 = v91;
                uint64_t v30 = *(void *)&v93[0];
              }
              *(void *)(v30 + 16) = v42 + 1;
              uint64_t v43 = v30 + 48 * v42;
              *(void *)(v43 + 32) = v32;
              *(void *)(v43 + 40) = v35;
              *(void *)(v43 + 48) = v36;
              *(_OWORD *)(v43 + 56) = v40;
              *(unsigned char *)(v43 + 72) = v37;
            }
            else
            {
              outlined consume of NodePersonality(v32);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v30 = v34;
            }
            uint64_t v5 = v33;
          }
          v31 += 6;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
        uint64_t v44 = v30;
        uint64_t v21 = v81;
        uint64_t v45 = *(void *)(v30 + 16);
        if (v45)
        {
LABEL_38:
          long long v46 = (_OWORD *)(v44 + 40);
          swift_retain();
          for (uint64_t i = v45 - 1; ; uint64_t i = v89 - 1)
          {
            uint64_t v89 = i;
            uint64_t v48 = *(void *)v46;
            uint64_t v49 = *((void *)v46 + 1);
            char v50 = *((unsigned char *)v46 + 32);
            unint64_t v106 = *((void *)v46 - 1);
            uint64_t v107 = v48;
            uint64_t v108 = v49;
            uint64_t v111 = (char *)v46;
            long long v109 = v46[1];
            char v110 = v50;
            unint64_t v92 = v106;
            outlined copy of NodePersonality(v106);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v51 = v21;
            ShaderGraphNode.out.getter((uint64_t)&v95);
            if (v21)
            {
              outlined consume of NodePersonality(v92);
              swift_bridgeObjectRelease();
              swift_release_n();
              return swift_bridgeObjectRelease();
            }
            long long v52 = *(_OWORD *)(v83 + 144);
            v93[8] = *(_OWORD *)(v83 + 128);
            v94[0] = v52;
            *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)(v83 + 153);
            long long v53 = *(_OWORD *)(v83 + 80);
            v93[4] = *(_OWORD *)(v83 + 64);
            v93[5] = v53;
            long long v54 = *(_OWORD *)(v83 + 112);
            v93[6] = *(_OWORD *)(v83 + 96);
            v93[7] = v54;
            long long v55 = *(_OWORD *)(v83 + 16);
            v93[0] = *(_OWORD *)v83;
            v93[1] = v55;
            long long v56 = *(_OWORD *)(v83 + 48);
            v93[2] = *(_OWORD *)(v83 + 32);
            v93[3] = v56;
            uint64_t v57 = v55;
            unint64_t result = specialized OrderedSet._find(_:)(v95, *(uint64_t *)&v93[0], *((void **)&v93[0] + 1));
            if (v58)
            {
              uint64_t v65 = MEMORY[0x263F8EE78];
              if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
                goto LABEL_50;
              }
            }
            else
            {
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_61;
              }
              if (result >= *(void *)(v57 + 16)) {
                goto LABEL_62;
              }
              Swift::String v59 = (void *)(v57 + 48 * result);
              uint64_t v60 = v59[4];
              uint64_t v61 = v59[5];
              uint64_t v62 = v59[6];
              long long v99 = v96;
              swift_retain();
              swift_retain();
              swift_retain();
              outlined retain of String((uint64_t)&v99);
              outlined retain of Graph((uint64_t)v93);
              swift_retain();
              specialized OrderedDictionary.subscript.getter((uint64_t)&v95, v60, v61, v62);
              uint64_t v64 = v63;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              outlined release of String((uint64_t)&v99);
              if (v64)
              {
                swift_retain();
                outlined retain of String((uint64_t)&v99);
                uint64_t v65 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v64, &v95);
                swift_release();
                outlined release of String((uint64_t)&v99);
                swift_release();
                swift_release();
              }
              else
              {
                uint64_t v65 = MEMORY[0x263F8EE78];
              }
              outlined release of Graph((uint64_t)v93);
              uint64_t v21 = v51;
              if (!*(void *)(v65 + 16))
              {
LABEL_50:
                swift_bridgeObjectRelease();
                swift_release();
                long long v97 = v96;
                outlined release of String((uint64_t)&v97);
                goto LABEL_51;
              }
            }
            uint64_t v66 = *(void *)(v65 + 88);
            uint64_t v67 = *(void *)(v65 + 96);
            uint64_t v69 = *(void *)(v65 + 104);
            uint64_t v68 = *(void *)(v65 + 112);
            uint64_t v70 = *(void *)(v65 + 120);
            char v86 = *(unsigned char *)(v65 + 128);
            uint64_t v71 = *(void *)(v65 + 136);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            unint64_t result = swift_bridgeObjectRelease();
            v103[0] = v66;
            v103[1] = v67;
            v103[2] = v69;
            v103[3] = v68;
            v103[4] = v70;
            char v104 = v86;
            uint64_t v105 = v71;
            if (!*(void *)(v48 + 16)) {
              goto LABEL_60;
            }
            uint64_t v72 = *(void *)(v48 + 40);
            uint64_t v73 = *(void *)(v48 + 48);
            uint64_t v74 = *(void *)(v48 + 56);
            uint64_t v75 = *(void *)(v48 + 64);
            char v76 = *(unsigned char *)(v48 + 72);
            uint64_t v77 = *(void *)(v48 + 80);
            v100[0] = *(void *)(v48 + 32);
            v100[1] = v72;
            v100[2] = v73;
            v100[3] = v74;
            v100[4] = v75;
            char v101 = v76;
            uint64_t v102 = v77;
            swift_retain();
            swift_bridgeObjectRetain();
            Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v100, (unint64_t)v103, a2, a3);
            swift_release();
            long long v98 = v96;
            outlined release of String((uint64_t)&v98);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
LABEL_51:
            outlined consume of NodePersonality(v92);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v89) {
              return swift_release_n();
            }
            long long v46 = v111 + 48;
          }
        }
        return swift_release();
      }
LABEL_55:
      uint64_t v44 = MEMORY[0x263F8EE78];
      uint64_t v45 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v45) {
        goto LABEL_38;
      }
      return swift_release();
    }
    if ((v26 & 0x8000000000000000) != 0) {
      goto LABEL_24;
    }
LABEL_20:
    if (v26 >= v23[2]) {
      break;
    }
    v24 += 6;
    uint64_t v28 = &v23[6 * v26];
    unint64_t v29 = v28[4];
    v28[4] = 0xE000000000000008;
    outlined consume of NodePersonality(v29);
    outlined consume of NodePersonality(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v22) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

unint64_t specialized Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(result + 16);
  if (!v5) {
    return result;
  }
  unint64_t v312 = result + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v307 = v5;
  while (1)
  {
    unint64_t v7 = v312 + 48 * v6;
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v9 = *(void *)(v7 + 24);
    uint64_t v11 = *(void *)(v7 + 32);
    char v12 = *(unsigned char *)(v7 + 40);
    unint64_t v481 = *(void *)v7;
    uint64_t v482 = v8;
    uint64_t v483 = v10;
    uint64_t v484 = v9;
    uint64_t v485 = v11;
    char v486 = v12;
    if (v481 >> 61 != 5) {
      goto LABEL_5;
    }
    uint64_t v308 = v6;
    unint64_t v313 = v481;
    outlined copy of NodePersonality(v481);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13._uint64_t countAndFlagsBits = 0x6567616D695F444ELL;
    v13._char object = (void *)0xE800000000000000;
    Swift::Bool v14 = String.hasPrefix(_:)(v13);
    swift_bridgeObjectRelease();
    if (v14) {
      break;
    }
LABEL_4:
    outlined consume of NodePersonality(v313);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v307;
    uint64_t v6 = v308;
LABEL_5:
    if (++v6 == v5) {
      return swift_bridgeObjectRelease();
    }
  }
  ShaderGraphNode.out.getter((uint64_t)v360);
  if (v4)
  {
    swift_bridgeObjectRelease();
LABEL_283:
    outlined consume of NodePersonality(v313);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = v361;
  long long v438 = v362;
  uint64_t v16 = outlined release of String((uint64_t)&v438);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 144))(v16);
  swift_release();
  if (!v17)
  {
    ShaderGraphNode.out.getter((uint64_t)v370);
    *(void *)&long long v337 = v313;
    *((void *)&v337 + 1) = v8;
    uint64_t v338 = v10;
    uint64_t v339 = v9;
    uint64_t v340 = v11;
    char v341 = v12;
    long long v342 = v370[0];
    long long v343 = v370[1];
    uint64_t v344 = v371;
    char v345 = v372;
    uint64_t v346 = v373;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v359 = 0uLL;
    swift_allocError();
    *long long v224 = v347;
    long long v225 = v351;
    long long v227 = v348;
    long long v226 = v349;
    v224[3] = v350;
    v224[4] = v225;
    v224[1] = v227;
    v224[2] = v226;
    long long v228 = v355;
    long long v230 = v352;
    long long v229 = v353;
    v224[7] = v354;
    v224[8] = v228;
    v224[5] = v230;
    v224[6] = v229;
    long long v231 = v359;
    long long v233 = v356;
    long long v232 = v357;
    v224[11] = v358;
    v224[12] = v231;
    v224[9] = v233;
    v224[10] = v232;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  specialized ShaderGraphNode.metalTextureType.getter(v313);
  uint64_t v18 = swift_retain();
  Graph.insertImageNode(metalTextureType:resultType:)(v18, v17, &v363);
  long long v303 = v363;
  uint64_t v304 = v364;
  uint64_t v305 = v365;
  uint64_t v306 = v366;
  char v19 = v367;
  swift_release();
  ShaderGraphNode.out.getter((uint64_t)v368);
  ShaderGraphNode.out.getter((uint64_t)v374);
  char v302 = v19;
  Graph.moveEdges(from:to:)((uint64_t)v368, (uint64_t)v374);
  swift_release();
  long long v437 = v375;
  outlined release of String((uint64_t)&v437);
  swift_release();
  long long v436 = v369;
  outlined release of String((uint64_t)&v436);
  *(void *)&long long v347 = 0;
  *((void *)&v347 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  *(void *)&long long v347 = 0xD000000000000018;
  *((void *)&v347 + 1) = 0x800000025C421E10;
  *(void *)&long long v337 = 1701080942;
  *((void *)&v337 + 1) = 0xE400000000000000;
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 1701080942;
  v21._char object = (void *)0xE400000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 39;
  v22._char object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  specialized Graph.insertCreateSampler(label:)(&v376);
  long long v299 = v376;
  uint64_t v300 = v377;
  uint64_t v301 = v378;
  uint64_t v23 = v379;
  char v24 = v380;
  swift_bridgeObjectRelease();
  ShaderGraphNode.out.getter((uint64_t)v381);
  uint64_t v297 = v23;
  char v298 = v24;
  uint64_t v25 = *((void *)&v363 + 1);
  specialized Sequence.first(where:)(*((uint64_t *)&v363 + 1), 115, 0xE100000000000000, v383);
  uint64_t v4 = 0;
  outlined init with take of MetalFunctionNode?((uint64_t)v383, (uint64_t)v392, (uint64_t *)&demangling cache variable for type metadata for Input?);
  if (!*((void *)&v392[0] + 1))
  {
    outlined init with take of NodePersonality(&v363, &v435);
    uint64_t v434 = v364;
    long long v337 = v303;
    uint64_t v338 = v304;
    uint64_t v339 = v305;
    uint64_t v340 = v306;
    char v341 = v302;
    *(void *)&long long v342 = 115;
    *((void *)&v342 + 1) = 0xE100000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v359 = 0uLL;
    swift_allocError();
    _OWORD *v204 = v347;
    long long v205 = v351;
    long long v207 = v348;
    long long v206 = v349;
    v204[3] = v350;
    v204[4] = v205;
    v204[1] = v207;
    v204[2] = v206;
    long long v208 = v355;
    long long v210 = v352;
    long long v209 = v353;
    v204[7] = v354;
    v204[8] = v208;
    v204[5] = v210;
    v204[6] = v209;
    long long v211 = v359;
    long long v213 = v356;
    long long v212 = v357;
    v204[11] = v358;
    v204[12] = v211;
    v204[9] = v213;
    v204[10] = v212;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v435);
    outlined retain of [Input]((uint64_t)&v434);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    long long v433 = v382;
    outlined release of String((uint64_t)&v433);
    outlined init with take of NodePersonality(&v376, &v432);
    outlined release of NodePersonality(&v432);
    uint64_t v431 = *((void *)&v376 + 1);
    outlined release of [Input]((uint64_t)&v431);
    uint64_t v430 = v377;
    outlined release of [Input]((uint64_t)&v430);
    outlined release of NodePersonality(&v435);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v434);
    swift_release();
    goto LABEL_283;
  }
  long long v394 = v392[0];
  long long v395 = v392[1];
  long long v396 = v392[2];
  uint64_t v397 = v393;
  Graph.connect(_:to:)((uint64_t)v381, (unint64_t)&v394);
  swift_release();
  long long v398 = v395;
  outlined release of String((uint64_t)&v398);
  swift_release();
  long long v429 = v382;
  outlined release of String((uint64_t)&v429);
  uint64_t v314 = *(void *)(v8 + 16);
  if (!v314)
  {
LABEL_3:
    outlined init with take of NodePersonality(&v376, &v403);
    outlined release of NodePersonality(&v403);
    uint64_t v402 = *((void *)&v376 + 1);
    outlined release of [Input]((uint64_t)&v402);
    uint64_t v401 = v377;
    outlined release of [Input]((uint64_t)&v401);
    outlined init with take of NodePersonality(&v363, &v400);
    outlined release of NodePersonality(&v400);
    swift_bridgeObjectRelease();
    uint64_t v399 = v364;
    outlined release of [Input]((uint64_t)&v399);
    swift_release();
    goto LABEL_4;
  }
  uint64_t v316 = v8 + 32;
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  unint64_t v296 = (void *)(v25 + 192);
  uint64_t v309 = v25;
  uint64_t v315 = v8;
  while (1)
  {
    if (v26 >= *(void *)(v8 + 16))
    {
      __break(1u);
LABEL_289:
      long long v337 = v299;
      uint64_t v338 = v300;
      uint64_t v339 = v301;
      uint64_t v340 = v297;
      char v341 = v298;
      *(void *)&long long v342 = 0x746C69665F67616DLL;
      *((void *)&v342 + 1) = 0xEA00000000007265;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v359 = 0uLL;
      swift_allocError();
      *uint64_t v244 = v347;
      long long v245 = v351;
      long long v247 = v348;
      long long v246 = v349;
      v244[3] = v350;
      v244[4] = v245;
      v244[1] = v247;
      v244[2] = v246;
      long long v248 = v355;
      long long v250 = v352;
      long long v249 = v353;
      v244[7] = v354;
      v244[8] = v248;
      v244[5] = v250;
      v244[6] = v249;
      long long v251 = v359;
      long long v253 = v356;
      long long v252 = v357;
      v244[11] = v358;
      v244[12] = v251;
      v244[9] = v253;
      v244[10] = v252;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      outlined init with take of NodePersonality(&v363, &v424);
      outlined release of NodePersonality(&v424);
      swift_bridgeObjectRelease();
      uint64_t v423 = v364;
      long long v193 = &v423;
LABEL_294:
      outlined release of [Input]((uint64_t)v193);
      swift_bridgeObjectRelease();
      goto LABEL_279;
    }
    uint64_t v27 = v316 + 56 * v26;
    uint64_t v28 = *(void *)v27;
    uint64_t v335 = v4;
    uint64_t v336 = *(void *)(v27 + 8);
    uint64_t v30 = *(void *)(v27 + 16);
    unint64_t v29 = *(void *)(v27 + 24);
    uint64_t v31 = *(void *)(v27 + 32);
    char v32 = *(unsigned char *)(v27 + 40);
    uint64_t v33 = *(void *)(v27 + 48);
    v439[0] = v28;
    v439[1] = v336;
    v439[2] = v30;
    v439[3] = v29;
    v439[4] = v31;
    char v440 = v32;
    uint64_t v441 = v33;
    BOOL v34 = v30 == 1701603686 && v29 == 0xE400000000000000;
    unint64_t v487 = v29;
    unint64_t v334 = v26;
    if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v35 = *(void *)(v25 + 16);
      if (!v35) {
        goto LABEL_277;
      }
      uint64_t v36 = *(void *)(v25 + 32);
      uint64_t v37 = *(void *)(v25 + 40);
      uint64_t v38 = *(void *)(v25 + 48);
      unint64_t v39 = *(void *)(v25 + 56);
      uint64_t v40 = *(void *)(v25 + 64);
      char v41 = *(unsigned char *)(v25 + 72);
      uint64_t v42 = *(void *)(v25 + 80);
      if (v38 == 1701603686 && v39 == 0xE400000000000000)
      {
        uint64_t v318 = *(void *)(v25 + 80);
        char v325 = *(unsigned char *)(v25 + 72);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        unint64_t v39 = 0xE400000000000000;
        uint64_t v38 = 1701603686;
      }
      else
      {
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          uint64_t v318 = v42;
          char v325 = v41;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          if (v35 == 1) {
            goto LABEL_277;
          }
          uint64_t v36 = *(void *)(v25 + 88);
          uint64_t v37 = *(void *)(v25 + 96);
          uint64_t v38 = *(void *)(v25 + 104);
          unint64_t v39 = *(void *)(v25 + 112);
          uint64_t v40 = *(void *)(v25 + 120);
          char v52 = *(unsigned char *)(v25 + 128);
          uint64_t v53 = *(void *)(v25 + 136);
          if (v38 == 1701603686 && v39 == 0xE400000000000000)
          {
            uint64_t v318 = *(void *)(v25 + 136);
            char v325 = *(unsigned char *)(v25 + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            unint64_t v39 = 0xE400000000000000;
            uint64_t v38 = 1701603686;
          }
          else
          {
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if (v35 == 2)
              {
LABEL_277:
                swift_retain();
                swift_bridgeObjectRetain();
                outlined init with take of NodePersonality(&v363, &v408);
                uint64_t v407 = v364;
                long long v337 = v303;
                uint64_t v338 = v304;
                uint64_t v339 = v305;
                uint64_t v340 = v306;
                char v341 = v302;
                *(void *)&long long v342 = 1701603686;
                *((void *)&v342 + 1) = 0xE400000000000000;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
                outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                long long v359 = 0uLL;
                swift_allocError();
                *os_log_type_t v183 = v347;
                long long v184 = v351;
                long long v186 = v348;
                long long v185 = v349;
                v183[3] = v350;
                v183[4] = v184;
                v183[1] = v186;
                v183[2] = v185;
                long long v187 = v355;
                long long v189 = v352;
                long long v188 = v353;
                v183[7] = v354;
                v183[8] = v187;
                v183[5] = v189;
                v183[6] = v188;
                long long v190 = v359;
                long long v192 = v356;
                long long v191 = v357;
                v183[11] = v358;
                v183[12] = v190;
                v183[9] = v192;
                v183[10] = v191;
                swift_bridgeObjectRetain();
                outlined retain of NodePersonality(&v408);
                outlined retain of [Input]((uint64_t)&v407);
                swift_willThrow();
                outlined init with take of NodePersonality(&v376, &v406);
                outlined release of NodePersonality(&v406);
                uint64_t v405 = *((void *)&v376 + 1);
                outlined release of [Input]((uint64_t)&v405);
                uint64_t v404 = v377;
                outlined release of [Input]((uint64_t)&v404);
                outlined release of NodePersonality(&v408);
                swift_bridgeObjectRelease();
                long long v193 = &v407;
                goto LABEL_294;
              }
              uint64_t v63 = 2;
              uint64_t v64 = v296;
              while (1)
              {
                uint64_t v65 = v63 + 1;
                if (__OFADD__(v63, 1)) {
                  break;
                }
                uint64_t v36 = *(v64 - 6);
                uint64_t v37 = *(v64 - 5);
                uint64_t v38 = *(v64 - 4);
                unint64_t v39 = *(v64 - 3);
                uint64_t v40 = *(v64 - 2);
                char v325 = *((unsigned char *)v64 - 8);
                uint64_t v318 = *v64;
                if (v38 == 1701603686 && v39 == 0xE400000000000000)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  unint64_t v39 = 0xE400000000000000;
                  uint64_t v38 = 1701603686;
LABEL_80:
                  uint64_t v25 = v309;
                  goto LABEL_81;
                }
                if (_stringCompareWithSmolCheck(_:_:expecting:)())
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  goto LABEL_80;
                }
                v64 += 7;
                ++v63;
                if (v65 == v35) {
                  goto LABEL_277;
                }
              }
              __break(1u);
              goto LABEL_291;
            }
            uint64_t v318 = v53;
            char v325 = v52;
            swift_retain();
            swift_bridgeObjectRetain();
          }
LABEL_81:
          swift_retain();
        }
        swift_bridgeObjectRetain();
      }
      v442[0] = v36;
      v442[1] = v37;
      v442[2] = v38;
      v442[3] = v39;
      v442[4] = v40;
      char v443 = v325;
      uint64_t v444 = v318;
      Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v439, (unint64_t)v442, a2, a3);
      uint64_t v4 = v335;
      goto LABEL_114;
    }
    BOOL v43 = v30 == 0x746C7561666564 && v29 == 0xE700000000000000;
    if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
    uint64_t v44 = *(void *)(v25 + 16);
    if (!v44) {
      goto LABEL_278;
    }
    uint64_t v45 = *(void *)(v25 + 32);
    uint64_t v46 = *(void *)(v25 + 40);
    uint64_t v47 = *(void *)(v25 + 48);
    unint64_t v48 = *(void *)(v25 + 56);
    uint64_t v49 = *(void *)(v25 + 64);
    char v50 = *(unsigned char *)(v25 + 72);
    uint64_t v51 = *(void *)(v25 + 80);
    if (v47 == 0x56746C7561666564 && v48 == 0xEA00000000006C61)
    {
      uint64_t v326 = *(void *)(v25 + 80);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v48 = 0xEA00000000006C61;
      uint64_t v47 = 0x56746C7561666564;
LABEL_112:
      uint64_t v4 = v335;
      goto LABEL_113;
    }
    uint64_t v319 = *(void *)(v25 + 32);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v44 == 1) {
        goto LABEL_278;
      }
      uint64_t v45 = *(void *)(v25 + 88);
      uint64_t v46 = *(void *)(v25 + 96);
      uint64_t v47 = *(void *)(v25 + 104);
      unint64_t v48 = *(void *)(v25 + 112);
      uint64_t v49 = *(void *)(v25 + 120);
      char v50 = *(unsigned char *)(v25 + 128);
      uint64_t v62 = *(void *)(v25 + 136);
      if (v47 == 0x56746C7561666564 && v48 == 0xEA00000000006C61)
      {
        uint64_t v326 = *(void *)(v25 + 136);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v47 = 0x56746C7561666564;
        unint64_t v48 = 0xEA00000000006C61;
      }
      else
      {
        char v67 = *(unsigned char *)(v25 + 128);
        uint64_t v68 = *(void *)(v25 + 120);
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v44 != 2)
          {
            uint64_t v77 = 2;
            unint64_t v78 = v296;
            while (1)
            {
              uint64_t v79 = v77 + 1;
              if (__OFADD__(v77, 1)) {
                break;
              }
              uint64_t v45 = *(v78 - 6);
              uint64_t v46 = *(v78 - 5);
              uint64_t v47 = *(v78 - 4);
              unint64_t v48 = *(v78 - 3);
              uint64_t v49 = *(v78 - 2);
              char v50 = *((unsigned char *)v78 - 8);
              uint64_t v326 = *v78;
              if (v47 == 0x56746C7561666564 && v48 == 0xEA00000000006C61)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                uint64_t v47 = 0x56746C7561666564;
                unint64_t v48 = 0xEA00000000006C61;
                uint64_t v25 = v309;
                goto LABEL_111;
              }
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                uint64_t v25 = v309;
                goto LABEL_111;
              }
              v78 += 7;
              ++v77;
              if (v79 == v44) {
                goto LABEL_278;
              }
            }
            __break(1u);
LABEL_296:
            __break(1u);
            goto LABEL_297;
          }
LABEL_278:
          swift_retain();
          swift_bridgeObjectRetain();
          outlined init with take of NodePersonality(&v363, &v413);
          uint64_t v412 = v364;
          long long v337 = v303;
          uint64_t v338 = v304;
          uint64_t v339 = v305;
          uint64_t v340 = v306;
          char v341 = v302;
          *(void *)&long long v342 = 0x56746C7561666564;
          *((void *)&v342 + 1) = 0xEA00000000006C61;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          long long v359 = 0uLL;
          swift_allocError();
          *long long v194 = v347;
          long long v195 = v351;
          long long v197 = v348;
          long long v196 = v349;
          v194[3] = v350;
          v194[4] = v195;
          v194[1] = v197;
          v194[2] = v196;
          long long v198 = v355;
          long long v200 = v352;
          long long v199 = v353;
          v194[7] = v354;
          v194[8] = v198;
          v194[5] = v200;
          v194[6] = v199;
          long long v201 = v359;
          long long v203 = v356;
          long long v202 = v357;
          v194[11] = v358;
          v194[12] = v201;
          v194[9] = v203;
          v194[10] = v202;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v413);
          outlined retain of [Input]((uint64_t)&v412);
          swift_willThrow();
          outlined init with take of NodePersonality(&v376, &v411);
          outlined release of NodePersonality(&v411);
          uint64_t v410 = *((void *)&v376 + 1);
          outlined release of [Input]((uint64_t)&v410);
          uint64_t v409 = v377;
          outlined release of [Input]((uint64_t)&v409);
          outlined release of NodePersonality(&v413);
          swift_bridgeObjectRelease();
          outlined release of [Input]((uint64_t)&v412);
          swift_bridgeObjectRelease();
          goto LABEL_279;
        }
        uint64_t v326 = v62;
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v49 = v68;
        char v50 = v67;
      }
LABEL_111:
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_112;
    }
    uint64_t v326 = v51;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v4 = v335;
    uint64_t v45 = v319;
LABEL_113:
    *(void *)&long long v445 = v45;
    *((void *)&v445 + 1) = v46;
    uint64_t v446 = v47;
    unint64_t v447 = v48;
    uint64_t v448 = v49;
    char v449 = v50;
    uint64_t v450 = v326;
    Graph.moveEdge(from:to:)((uint64_t)v439, &v445);
LABEL_114:
    swift_bridgeObjectRelease();
LABEL_115:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_116:
    unint64_t v26 = v334;
LABEL_117:
    ++v26;
    uint64_t v8 = v315;
    if (v26 == v314)
    {
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
  }
  BOOL v54 = v30 == 0x64726F6F63786574 && v29 == 0xE800000000000000;
  if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v55 = *(void *)(v25 + 16);
    if (!v55) {
      goto LABEL_284;
    }
    uint64_t v56 = *(void *)(v309 + 32);
    uint64_t v57 = *(void *)(v309 + 40);
    uint64_t v58 = *(void *)(v309 + 48);
    unint64_t v59 = *(void *)(v309 + 56);
    char v60 = *(unsigned char *)(v309 + 72);
    uint64_t v320 = *(void *)(v309 + 80);
    uint64_t v327 = *(void *)(v309 + 64);
    if (v58 == 0x64726F6F63786574 && v59 == 0xE800000000000000)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v59 = 0xE800000000000000;
      uint64_t v25 = v309;
      uint64_t v61 = v320;
      uint64_t v58 = 0x64726F6F63786574;
      goto LABEL_151;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v25 = v309;
      uint64_t v61 = v320;
      goto LABEL_151;
    }
    if (v55 == 1) {
      goto LABEL_284;
    }
    uint64_t v56 = *(void *)(v309 + 88);
    uint64_t v57 = *(void *)(v309 + 96);
    unint64_t v59 = *(void *)(v309 + 112);
    uint64_t v327 = *(void *)(v309 + 120);
    char v60 = *(unsigned char *)(v309 + 128);
    uint64_t v61 = *(void *)(v309 + 136);
    if (*(void *)(v309 + 104) == 0x64726F6F63786574 && v59 == 0xE800000000000000)
    {
LABEL_87:
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v59 = 0xE800000000000000;
      uint64_t v58 = 0x64726F6F63786574;
      uint64_t v4 = v335;
LABEL_150:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v25 = v309;
LABEL_151:
      v451[0] = v56;
      v451[1] = v57;
      v451[2] = v58;
      v451[3] = v59;
      v451[4] = v327;
      char v452 = v60;
      uint64_t v453 = v61;
      char v104 = (long long *)v451;
LABEL_152:
      Graph.moveEdge(from:to:)((uint64_t)v439, v104);
      swift_bridgeObjectRelease();
      goto LABEL_115;
    }
    uint64_t v58 = *(void *)(v309 + 104);
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    }
    if (v55 != 2)
    {
      uint64_t v91 = 2;
      unint64_t v92 = v296;
      do
      {
        uint64_t v93 = v91 + 1;
        if (__OFADD__(v91, 1)) {
          goto LABEL_296;
        }
        uint64_t v56 = *(v92 - 6);
        uint64_t v57 = *(v92 - 5);
        uint64_t v58 = *(v92 - 4);
        unint64_t v59 = *(v92 - 3);
        uint64_t v327 = *(v92 - 2);
        char v60 = *((unsigned char *)v92 - 8);
        uint64_t v61 = *v92;
        if (v58 == 0x64726F6F63786574 && v59 == 0xE800000000000000) {
          goto LABEL_87;
        }
        uint64_t v322 = *v92;
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v4 = v335;
          uint64_t v61 = v322;
          goto LABEL_150;
        }
        v92 += 7;
        ++v91;
      }
      while (v93 != v55);
    }
LABEL_284:
    swift_retain();
    swift_bridgeObjectRetain();
    outlined init with take of NodePersonality(&v363, &v418);
    uint64_t v417 = v364;
    long long v337 = v303;
    uint64_t v338 = v304;
    uint64_t v339 = v305;
    uint64_t v340 = v306;
    char v341 = v302;
    *(void *)&long long v342 = 0x64726F6F63786574;
    *((void *)&v342 + 1) = 0xE800000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v359 = 0uLL;
    swift_allocError();
    _OWORD *v214 = v347;
    long long v215 = v351;
    long long v217 = v348;
    long long v216 = v349;
    v214[3] = v350;
    v214[4] = v215;
    v214[1] = v217;
    v214[2] = v216;
    long long v218 = v355;
    long long v220 = v352;
    long long v219 = v353;
    v214[7] = v354;
    v214[8] = v218;
    v214[5] = v220;
    v214[6] = v219;
    long long v221 = v359;
    long long v223 = v356;
    long long v222 = v357;
    v214[11] = v358;
    v214[12] = v221;
    v214[9] = v223;
    v214[10] = v222;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v418);
    outlined retain of [Input]((uint64_t)&v417);
    swift_willThrow();
    outlined init with take of NodePersonality(&v376, &v416);
    outlined release of NodePersonality(&v416);
    uint64_t v415 = *((void *)&v376 + 1);
    outlined release of [Input]((uint64_t)&v415);
    uint64_t v414 = v377;
    outlined release of [Input]((uint64_t)&v414);
    outlined release of NodePersonality(&v418);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v417);
    swift_bridgeObjectRelease();
LABEL_279:
    swift_release();
    swift_release();
    outlined consume of NodePersonality(v313);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  BOOL v69 = v30 == 0x7373657264646175 && v29 == 0xEC00000065646F6DLL;
  if (!v69 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if ((v30 != 0x7373657264646176 || v29 != 0xEC00000065646F6DLL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if ((v30 != 0x79747265746C6966 || v29 != 0xEA00000000006570)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v30 != 0x726579616CLL || v29 != 0xE500000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v30 != 0x6E6172656D617266 || v29 != 0xEA00000000006567)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          unint64_t v110 = v26;
          if ((v30 != 0x66666F656D617266 || v29 != 0xEB00000000746573)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v30 != 0x646E65656D617266 || v29 != 0xEE006E6F69746361)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v111 = one-time initialization token for logger;
            swift_retain();
            swift_bridgeObjectRetain();
            if (v111 != -1) {
              swift_once();
            }
            uint64_t v112 = type metadata accessor for Logger();
            __swift_project_value_buffer(v112, (uint64_t)logger);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            uint64_t v113 = Logger.logObject.getter();
            os_log_type_t v114 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v113, v114))
            {
              uint64_t v115 = swift_slowAlloc();
              uint64_t v116 = swift_slowAlloc();
              *(void *)&long long v347 = v116;
              *(_DWORD *)uint64_t v115 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)(v115 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, (uint64_t *)&v347);
              swift_release_n();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_25C27E000, v113, v114, "Ignoring unexpected image node input '%s'", (uint8_t *)v115, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x261185880](v116, -1, -1);
              MEMORY[0x261185880](v115, -1, -1);
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
          }
          uint64_t v25 = v309;
          unint64_t v26 = v110;
        }
        goto LABEL_117;
      }
      uint64_t v323 = *((void *)&v376 + 1);
      uint64_t v95 = *(void *)(*((void *)&v376 + 1) + 16);
      if (!v95) {
        goto LABEL_289;
      }
      long long v96 = (void *)(*((void *)&v376 + 1) + 80);
      uint64_t v295 = *((void *)&v376 + 1) + 80;
      while (1)
      {
        uint64_t v97 = *(v96 - 6);
        uint64_t v330 = *(v96 - 5);
        uint64_t v98 = *(v96 - 4);
        unint64_t v99 = *(v96 - 3);
        uint64_t v100 = *(v96 - 2);
        char v101 = *((unsigned char *)v96 - 8);
        uint64_t v102 = *v96;
        if (v98 == 0x746C69665F67616DLL && v99 == 0xEA00000000007265) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_186;
        }
        v96 += 7;
        if (!--v95) {
          goto LABEL_289;
        }
      }
      unint64_t v99 = 0xEA00000000007265;
LABEL_186:
      v478[0] = v97;
      v478[1] = v330;
      v478[2] = v98;
      v478[3] = v99;
      v478[4] = v100;
      char v479 = v101;
      uint64_t v480 = v102;
      uint64_t v117 = v317[2];
      char v287 = (void *)v317[1];
      uint64_t v290 = *v317;
      unint64_t result = specialized OrderedSet._find(_:)(v97, *v317, v287);
      if (v118)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        goto LABEL_218;
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_299;
      }
      if (result >= *(void *)(v117 + 16)) {
        goto LABEL_300;
      }
      long long v119 = (void *)(v117 + 48 * result);
      uint64_t v120 = v119[7];
      uint64_t v121 = v119[8];
      uint64_t v122 = v119[9];
      uint64_t v123 = *(void *)(v121 + 16);
      if (v120)
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v478, v121 + 32, v123, (void *)(v120 + 16), v120 + 32);
        if (v124)
        {
LABEL_217:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_218;
        }
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        unint64_t result = specialized Collection<>.firstIndex(of:)(v478, v121 + 32, v123);
        if (v132) {
          goto LABEL_217;
        }
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_307;
      }
      if (result >= *(void *)(v122 + 16)) {
        goto LABEL_308;
      }
      uint64_t v133 = v122 + 56 * result;
      uint64_t v134 = *(void *)(v133 + 40);
      outlined copy of Output?(*(void *)(v133 + 32), v134);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v134)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_232;
      }
LABEL_218:
      unint64_t result = specialized OrderedSet._find(_:)(v28, v290, v287);
      if (v135) {
        goto LABEL_229;
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_301;
      }
      if (result >= *(void *)(v117 + 16)) {
        goto LABEL_302;
      }
      Swift::UInt v136 = (void *)(v117 + 48 * result);
      uint64_t v137 = v136[7];
      uint64_t v138 = v136[8];
      uint64_t v139 = v136[9];
      uint64_t v140 = *(void *)(v138 + 16);
      if (v137)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v439, v138 + 32, v140, (void *)(v137 + 16), v137 + 32);
        if (v141)
        {
LABEL_230:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_231;
        }
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        unint64_t result = specialized Collection<>.firstIndex(of:)(v439, v138 + 32, v140);
        if (v142) {
          goto LABEL_230;
        }
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_309;
      }
      if (result >= *(void *)(v139 + 16)) {
        goto LABEL_310;
      }
      long long v143 = (void *)(v139 + 56 * result);
      uint64_t v144 = v143[5];
      uint64_t v145 = v143[7];
      uint64_t v285 = v143[6];
      uint64_t v288 = v143[4];
      uint64_t v284 = v143[8];
      uint64_t v291 = v143[9];
      uint64_t v332 = v143[10];
      outlined copy of Output?(v288, v144);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (!v144)
      {
LABEL_229:
        swift_bridgeObjectRelease();
      }
      else
      {
        v475[0] = v288;
        v475[1] = v144;
        v475[2] = v285;
        v475[3] = v145;
        v475[4] = v284;
        char v476 = v291 & 1;
        uint64_t v477 = v332;
        swift_retain();
        swift_release();
        Graph.connect(_:to:)((uint64_t)v475, (unint64_t)v478);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
LABEL_231:
      swift_release();
LABEL_232:
      uint64_t v146 = *(void *)(v323 + 16);
      if (!v146)
      {
LABEL_292:
        long long v337 = v299;
        uint64_t v338 = v300;
        uint64_t v339 = v301;
        uint64_t v340 = v297;
        char v341 = v298;
        *(void *)&long long v342 = 0x746C69665F70696DLL;
        *((void *)&v342 + 1) = 0xEA00000000007265;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v359 = 0uLL;
        swift_allocError();
        *long long v264 = v347;
        long long v265 = v351;
        long long v267 = v348;
        long long v266 = v349;
        v264[3] = v350;
        v264[4] = v265;
        v264[1] = v267;
        v264[2] = v266;
        long long v268 = v355;
        long long v270 = v352;
        long long v269 = v353;
        v264[7] = v354;
        v264[8] = v268;
        v264[5] = v270;
        v264[6] = v269;
        long long v271 = v359;
        long long v273 = v356;
        long long v272 = v357;
        v264[11] = v358;
        v264[12] = v271;
        v264[9] = v273;
        v264[10] = v272;
        swift_willThrow();
        outlined init with take of NodePersonality(&v363, &v426);
        outlined release of NodePersonality(&v426);
        swift_bridgeObjectRelease();
        uint64_t v425 = v364;
        long long v193 = &v425;
        goto LABEL_294;
      }
      long long v147 = (void *)v295;
      while (1)
      {
        uint64_t v148 = *(v147 - 6);
        uint64_t v333 = *(v147 - 5);
        uint64_t v150 = *(v147 - 4);
        unint64_t v149 = *(v147 - 3);
        uint64_t v151 = *(v147 - 2);
        char v152 = *((unsigned char *)v147 - 8);
        uint64_t v153 = *v147;
        if (v150 == 0x746C69665F70696DLL && v149 == 0xEA00000000007265) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_242;
        }
        v147 += 7;
        if (!--v146) {
          goto LABEL_292;
        }
      }
      unint64_t v149 = 0xEA00000000007265;
LABEL_242:
      v472[0] = v148;
      v472[1] = v333;
      v472[2] = v150;
      v472[3] = v149;
      v472[4] = v151;
      char v473 = v152;
      uint64_t v474 = v153;
      uint64_t v156 = *v317;
      uint64_t v155 = (void *)v317[1];
      uint64_t v157 = v317[2];
      unint64_t result = specialized OrderedSet._find(_:)(v148, *v317, v155);
      if (v158)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        goto LABEL_255;
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_303;
      }
      uint64_t v293 = v155;
      if (result >= *(void *)(v157 + 16)) {
        goto LABEL_304;
      }
      uint64_t v159 = (void *)(v157 + 48 * result);
      uint64_t v160 = v159[7];
      uint64_t v161 = v159[8];
      uint64_t v162 = v159[9];
      uint64_t v292 = v161 + 32;
      uint64_t v286 = v157;
      uint64_t v289 = *(void *)(v161 + 16);
      if (v160)
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v163 = v162;
        swift_retain();
        swift_retain();
        unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v472, v292, v289, (void *)(v160 + 16), v160 + 32);
        if (v164)
        {
LABEL_254:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v155 = v293;
          uint64_t v157 = v286;
          goto LABEL_255;
        }
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v163 = v162;
        swift_retain();
        unint64_t result = specialized Collection<>.firstIndex(of:)(v472, v292, v289);
        if (v165) {
          goto LABEL_254;
        }
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_311;
      }
      if (result >= *(void *)(v163 + 16)) {
        goto LABEL_312;
      }
      uint64_t v166 = v163 + 56 * result;
      uint64_t v167 = *(void *)(v166 + 40);
      outlined copy of Output?(*(void *)(v166 + 32), v167);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v155 = v293;
      uint64_t v157 = v286;
      if (v167)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_265:
        uint64_t v173 = *(void *)(v323 + 16);
        long long v174 = (void *)v295;
        if (!v173)
        {
LABEL_293:
          long long v337 = v299;
          uint64_t v338 = v300;
          uint64_t v339 = v301;
          uint64_t v340 = v297;
          char v341 = v298;
          *(void *)&long long v342 = 0x746C69665F6E696DLL;
          *((void *)&v342 + 1) = 0xEA00000000007265;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          long long v359 = 0uLL;
          swift_allocError();
          *uint64_t v274 = v347;
          long long v275 = v351;
          long long v277 = v348;
          long long v276 = v349;
          v274[3] = v350;
          v274[4] = v275;
          v274[1] = v277;
          v274[2] = v276;
          long long v278 = v355;
          long long v280 = v352;
          long long v279 = v353;
          v274[7] = v354;
          v274[8] = v278;
          v274[5] = v280;
          v274[6] = v279;
          long long v281 = v359;
          long long v283 = v356;
          long long v282 = v357;
          v274[11] = v358;
          v274[12] = v281;
          v274[9] = v283;
          v274[10] = v282;
          swift_willThrow();
          outlined init with take of NodePersonality(&v363, &v428);
          outlined release of NodePersonality(&v428);
          swift_bridgeObjectRelease();
          uint64_t v427 = v364;
          long long v193 = &v427;
          goto LABEL_294;
        }
        while (1)
        {
          uint64_t v176 = *(v174 - 6);
          uint64_t v175 = *(v174 - 5);
          uint64_t v177 = *(v174 - 4);
          unint64_t v178 = *(v174 - 3);
          uint64_t v179 = *(v174 - 2);
          char v180 = *((unsigned char *)v174 - 8);
          uint64_t v181 = *v174;
          if (v177 == 0x746C69665F6E696DLL && v178 == 0xEA00000000007265) {
            break;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_274;
          }
          v174 += 7;
          if (!--v173) {
            goto LABEL_293;
          }
        }
        unint64_t v178 = 0xEA00000000007265;
LABEL_274:
        *(void *)&long long v463 = v176;
        *((void *)&v463 + 1) = v175;
        uint64_t v464 = v177;
        unint64_t v465 = v178;
        uint64_t v466 = v179;
        char v467 = v180;
        uint64_t v468 = v181;
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)v439, &v463);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v4 = v335;
        uint64_t v25 = v309;
        goto LABEL_116;
      }
LABEL_255:
      unint64_t result = specialized OrderedSet._find(_:)(v28, v156, v155);
      if ((v168 & 1) == 0)
      {
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_305;
        }
        if (result >= *(void *)(v157 + 16)) {
          goto LABEL_306;
        }
        char v169 = (void *)(v157 + 48 * result);
        uint64_t v170 = v169[7];
        uint64_t v171 = v169[8];
        uint64_t v172 = v169[9];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        specialized OrderedDictionary.subscript.getter((uint64_t)v439, v170, v171, v172, v384);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined init with take of MetalFunctionNode?((uint64_t)v384, (uint64_t)&v385, &demangling cache variable for type metadata for Output??);
        if (v386)
        {
          if (v386 != 1)
          {
            v469[0] = v385;
            v469[1] = v386;
            v469[2] = v387;
            v469[3] = v388;
            v469[4] = v389;
            char v470 = v390 & 1;
            uint64_t v471 = v391;
            swift_retain();
            swift_release();
            Graph.connect(_:to:)((uint64_t)v469, (unint64_t)v472);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_264:
            swift_release();
            goto LABEL_265;
          }
        }
        else
        {
          outlined release of Output??(v384);
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_264;
    }
    uint64_t v81 = *((void *)&v376 + 1);
    uint64_t v82 = *(void *)(*((void *)&v376 + 1) + 16);
    if (!v82) {
      goto LABEL_291;
    }
    uint64_t v84 = *(void *)(*((void *)&v376 + 1) + 32);
    uint64_t v83 = *(void *)(*((void *)&v376 + 1) + 40);
    uint64_t v85 = *(void *)(*((void *)&v376 + 1) + 48);
    unint64_t v86 = *(void *)(*((void *)&v376 + 1) + 56);
    uint64_t v87 = *(void *)(*((void *)&v376 + 1) + 64);
    char v88 = *(unsigned char *)(*((void *)&v376 + 1) + 72);
    uint64_t v89 = *(void *)(*((void *)&v376 + 1) + 80);
    if (v85 == 0x7365726464615F74 && v86 == 0xE900000000000073)
    {
      char v90 = *(unsigned char *)(*((void *)&v376 + 1) + 72);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v85 = 0x7365726464615F74;
      unint64_t v86 = 0xE900000000000073;
      goto LABEL_215;
    }
    uint64_t v329 = *(void *)(*((void *)&v376 + 1) + 64);
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      char v90 = v88;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v4 = v335;
      uint64_t v87 = v329;
    }
    else
    {
      if (v82 == 1) {
        goto LABEL_291;
      }
      uint64_t v84 = *(void *)(v81 + 88);
      uint64_t v83 = *(void *)(v81 + 96);
      uint64_t v85 = *(void *)(v81 + 104);
      unint64_t v86 = *(void *)(v81 + 112);
      uint64_t v87 = *(void *)(v81 + 120);
      char v105 = *(unsigned char *)(v81 + 128);
      uint64_t v89 = *(void *)(v81 + 136);
      if (v85 == 0x7365726464615F74 && v86 == 0xE900000000000073)
      {
        char v90 = *(unsigned char *)(v81 + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v85 = 0x7365726464615F74;
        unint64_t v86 = 0xE900000000000073;
      }
      else
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v82 != 2)
          {
            uint64_t v125 = (void *)(v81 + 192);
            uint64_t v126 = 2;
            while (1)
            {
              uint64_t v127 = v126 + 1;
              if (__OFADD__(v126, 1)) {
                goto LABEL_298;
              }
              uint64_t v128 = *(v125 - 5);
              uint64_t v85 = *(v125 - 4);
              unint64_t v86 = *(v125 - 3);
              uint64_t v324 = *(v125 - 6);
              uint64_t v331 = *(v125 - 2);
              char v129 = *((unsigned char *)v125 - 8);
              uint64_t v130 = *v125;
              if (v85 == 0x7365726464615F74 && v86 == 0xE900000000000073) {
                break;
              }
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                goto LABEL_213;
              }
              v125 += 7;
              ++v126;
              if (v127 == v82) {
                goto LABEL_291;
              }
            }
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v85 = 0x7365726464615F74;
            unint64_t v86 = 0xE900000000000073;
LABEL_213:
            uint64_t v83 = v128;
            char v90 = v129;
            uint64_t v87 = v331;
            uint64_t v89 = v130;
            uint64_t v84 = v324;
            goto LABEL_214;
          }
LABEL_291:
          swift_retain();
          swift_bridgeObjectRetain();
          long long v337 = v299;
          uint64_t v338 = v300;
          uint64_t v339 = v301;
          uint64_t v340 = v297;
          char v341 = v298;
          *(void *)&long long v342 = 0x7365726464615F74;
          *((void *)&v342 + 1) = 0xE900000000000073;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          long long v359 = 0uLL;
          swift_allocError();
          *uint64_t v254 = v347;
          long long v255 = v351;
          long long v257 = v348;
          long long v256 = v349;
          v254[3] = v350;
          v254[4] = v255;
          v254[1] = v257;
          v254[2] = v256;
          long long v258 = v355;
          long long v260 = v352;
          long long v259 = v353;
          v254[7] = v354;
          v254[8] = v258;
          v254[5] = v260;
          v254[6] = v259;
          long long v261 = v359;
          long long v263 = v356;
          long long v262 = v357;
          v254[11] = v358;
          v254[12] = v261;
          v254[9] = v263;
          v254[10] = v262;
          swift_willThrow();
          outlined init with take of NodePersonality(&v363, &v422);
          outlined release of NodePersonality(&v422);
          swift_bridgeObjectRelease();
          uint64_t v421 = v364;
          long long v193 = &v421;
          goto LABEL_294;
        }
        char v90 = v105;
        swift_retain();
        swift_bridgeObjectRetain();
      }
LABEL_214:
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_215:
      uint64_t v4 = v335;
    }
    *(void *)&long long v457 = v84;
    *((void *)&v457 + 1) = v83;
    uint64_t v458 = v85;
    unint64_t v459 = v86;
    uint64_t v460 = v87;
    char v461 = v90;
    uint64_t v462 = v89;
    Graph.moveEdge(from:to:)((uint64_t)v439, &v457);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v25 = v309;
    goto LABEL_116;
  }
  uint64_t v70 = *((void *)&v376 + 1);
  uint64_t v71 = *(void *)(*((void *)&v376 + 1) + 16);
  if (!v71) {
    goto LABEL_287;
  }
  uint64_t v72 = *(void *)(*((void *)&v376 + 1) + 32);
  uint64_t v73 = *(void *)(*((void *)&v376 + 1) + 40);
  uint64_t v75 = *(void *)(*((void *)&v376 + 1) + 48);
  unint64_t v74 = *(void *)(*((void *)&v376 + 1) + 56);
  char v294 = *(unsigned char *)(*((void *)&v376 + 1) + 72);
  uint64_t v321 = *(void *)(*((void *)&v376 + 1) + 80);
  uint64_t v328 = *(void *)(*((void *)&v376 + 1) + 64);
  if (v75 == 0x7365726464615F73 && v74 == 0xE900000000000073)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v74 = 0xE900000000000073;
    uint64_t v4 = v335;
    uint64_t v75 = 0x7365726464615F73;
    uint64_t v25 = v309;
    char v76 = v294;
LABEL_195:
    v454[0] = v72;
    v454[1] = v73;
    v454[2] = v75;
    v454[3] = v74;
    v454[4] = v328;
    char v455 = v76;
    uint64_t v456 = v321;
    char v104 = (long long *)v454;
    goto LABEL_152;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v4 = v335;
    uint64_t v25 = v309;
    char v76 = v294;
    goto LABEL_195;
  }
  if (v71 == 1) {
    goto LABEL_287;
  }
  uint64_t v72 = *(void *)(v70 + 88);
  uint64_t v73 = *(void *)(v70 + 96);
  unint64_t v74 = *(void *)(v70 + 112);
  char v76 = *(unsigned char *)(v70 + 128);
  uint64_t v321 = *(void *)(v70 + 136);
  uint64_t v328 = *(void *)(v70 + 120);
  if (*(void *)(v70 + 104) == 0x7365726464615F73 && v74 == 0xE900000000000073)
  {
LABEL_122:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v75 = 0x7365726464615F73;
    unint64_t v74 = 0xE900000000000073;
LABEL_194:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v4 = v335;
    uint64_t v25 = v309;
    goto LABEL_195;
  }
  uint64_t v75 = *(void *)(v70 + 104);
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result)
  {
LABEL_193:
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_194;
  }
  if (v71 == 2)
  {
LABEL_287:
    swift_retain();
    swift_bridgeObjectRetain();
    long long v337 = v299;
    uint64_t v338 = v300;
    uint64_t v339 = v301;
    uint64_t v340 = v297;
    char v341 = v298;
    *(void *)&long long v342 = 0x7365726464615F73;
    *((void *)&v342 + 1) = 0xE900000000000073;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v359 = 0uLL;
    swift_allocError();
    *uint64_t v234 = v347;
    long long v235 = v351;
    long long v237 = v348;
    long long v236 = v349;
    v234[3] = v350;
    v234[4] = v235;
    v234[1] = v237;
    v234[2] = v236;
    long long v238 = v355;
    long long v240 = v352;
    long long v239 = v353;
    v234[7] = v354;
    v234[8] = v238;
    v234[5] = v240;
    v234[6] = v239;
    long long v241 = v359;
    long long v243 = v356;
    long long v242 = v357;
    v234[11] = v358;
    v234[12] = v241;
    v234[9] = v243;
    v234[10] = v242;
    swift_willThrow();
    outlined init with take of NodePersonality(&v363, &v420);
    outlined release of NodePersonality(&v420);
    swift_bridgeObjectRelease();
    uint64_t v419 = v364;
    long long v193 = &v419;
    goto LABEL_294;
  }
  unint64_t v106 = (void *)(v70 + 192);
  uint64_t v107 = 2;
  while (1)
  {
    uint64_t v108 = v107 + 1;
    if (__OFADD__(v107, 1)) {
      break;
    }
    uint64_t v72 = *(v106 - 6);
    uint64_t v73 = *(v106 - 5);
    uint64_t v75 = *(v106 - 4);
    unint64_t v74 = *(v106 - 3);
    char v76 = *((unsigned char *)v106 - 8);
    uint64_t v321 = *v106;
    uint64_t v328 = *(v106 - 2);
    if (v75 == 0x7365726464615F73 && v74 == 0xE900000000000073) {
      goto LABEL_122;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_193;
    }
    v106 += 7;
    ++v107;
    if (v108 == v71) {
      goto LABEL_287;
    }
  }
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
  return result;
}

uint64_t specialized Graph.transformMaterialXCubeimageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v6 = v2;
  long long v259 = v1;
  uint64_t v7 = *(void *)(result + 16);
  if (!v7) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t v233 = v4;
  uint64_t v234 = v5;
  uint64_t v9 = result + 32;
  uint64_t v10 = v335;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v250 = v9;
  uint64_t v251 = v7;
  while (1)
  {
    uint64_t v12 = v9 + 48 * v11;
    unint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v16 = *(void *)(v12 + 16);
    uint64_t v15 = *(void *)(v12 + 24);
    uint64_t v17 = *(void *)(v12 + 32);
    char v18 = *(unsigned char *)(v12 + 40);
    unint64_t v410 = v13;
    uint64_t v411 = v14;
    uint64_t v412 = v16;
    uint64_t v413 = v15;
    uint64_t v414 = v17;
    char v415 = v18;
    if (v13 >> 61 != 5) {
      goto LABEL_4;
    }
    uint64_t v254 = v17;
    char v255 = v18;
    uint64_t v258 = v15;
    uint64_t v256 = v11;
    outlined copy of NodePersonality(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 0xD000000000000017;
    v19._char object = (void *)0x800000025C421D80;
    Swift::Bool v20 = String.hasPrefix(_:)(v19);
    swift_bridgeObjectRelease();
    if (v20) {
      break;
    }
LABEL_3:
    outlined consume of NodePersonality(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v250;
    uint64_t v7 = v251;
    uint64_t v11 = v256;
LABEL_4:
    if (++v11 == v7) {
      return swift_bridgeObjectRelease();
    }
  }
  ShaderGraphNode.out.getter((uint64_t)v280);
  if (v6)
  {
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  uint64_t v21 = v281;
  long long v409 = v282;
  uint64_t v22 = outlined release of String((uint64_t)&v409);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 144))(v22);
  swift_release();
  uint64_t v249 = v23;
  if (!v23)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi34_((uint64_t)&v260);
    *(void *)&long long v267 = 0;
    *((void *)&v267 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&long long v267 = 0xD000000000000025;
    *((void *)&v267 + 1) = 0x800000025C421DC0;
    v167._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v167);
    swift_bridgeObjectRelease();
    v168._uint64_t countAndFlagsBits = 1701080942;
    v168._char object = (void *)0xE400000000000000;
    String.append(_:)(v168);
    swift_bridgeObjectRelease();
    v169._uint64_t countAndFlagsBits = 39;
    v169._char object = (void *)0xE100000000000000;
    String.append(_:)(v169);
    long long v170 = v267;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
    long long v279 = v170;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *uint64_t v171 = v267;
    long long v172 = v271;
    long long v174 = v268;
    long long v173 = v269;
    v171[3] = v270;
    v171[4] = v172;
    v171[1] = v174;
    v171[2] = v173;
    long long v175 = v275;
    long long v177 = v272;
    long long v176 = v273;
    v171[7] = v274;
    v171[8] = v175;
    v171[5] = v177;
    v171[6] = v176;
    long long v178 = v279;
    long long v180 = v276;
    long long v179 = v277;
    v171[11] = v278;
    v171[12] = v178;
    v171[9] = v180;
    v171[10] = v179;
    swift_willThrow();
    outlined consume of NodePersonality(v13);
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  *(void *)&long long v267 = 0xD00000000000001CLL;
  *((void *)&v267 + 1) = 0x800000025C421DF0;
  *(void *)&long long v260 = 1701080942;
  *((void *)&v260 + 1) = 0xE400000000000000;
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 1701080942;
  v25._char object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 39;
  v26._char object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  specialized Graph.insertCreateSampler(label:)(&v283);
  long long v240 = v283;
  uint64_t v243 = v284;
  uint64_t v244 = v285;
  uint64_t v252 = v286;
  char v27 = v287;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(v14 + 16);
  if (!v28)
  {
LABEL_83:
    *(void *)&long long v260 = v13;
    *((void *)&v260 + 1) = v14;
    uint64_t v261 = v16;
    uint64_t v262 = v258;
    uint64_t v263 = v254;
    char v264 = v255;
    uint64_t v265 = 0x79747265746C6966;
    unint64_t v266 = 0xEA00000000006570;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v279 = 0uLL;
    swift_allocError();
    *char v105 = v267;
    long long v106 = v271;
    long long v108 = v268;
    long long v107 = v269;
    v105[3] = v270;
    v105[4] = v106;
    v105[1] = v108;
    v105[2] = v107;
    long long v109 = v275;
    long long v111 = v272;
    long long v110 = v273;
    v105[7] = v274;
    v105[8] = v109;
    v105[5] = v111;
    v105[6] = v110;
    long long v112 = v279;
    long long v114 = v276;
    long long v113 = v277;
    v105[11] = v278;
    v105[12] = v112;
    v105[9] = v114;
    v105[10] = v113;
    outlined copy of NodePersonality(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v283, &v364);
    outlined release of NodePersonality(&v364);
    uint64_t v363 = *((void *)&v283 + 1);
    outlined release of [Input]((uint64_t)&v363);
    uint64_t v362 = v284;
    uint64_t v115 = &v362;
LABEL_84:
    outlined release of [Input]((uint64_t)v115);
    swift_release();
LABEL_85:
    outlined consume of NodePersonality(v13);
LABEL_86:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v238 = v27;
  long long v231 = v10;
  unint64_t v257 = v13;
  uint64_t v247 = v16;
  uint64_t v248 = v8;
  uint64_t v29 = v14;
  uint64_t v30 = (void *)(v14 + 80);
  long long v232 = (void *)(v14 + 80);
  while (1)
  {
    uint64_t v31 = *(v30 - 6);
    uint64_t v477 = *(v30 - 5);
    uint64_t v32 = *(v30 - 4);
    uint64_t v33 = *(v30 - 2);
    char v34 = *((unsigned char *)v30 - 8);
    uint64_t v35 = *v30;
    unint64_t v36 = 0xEA00000000006570;
    if (v32 == 0x79747265746C6966 && *(v30 - 3) == 0xEA00000000006570)
    {
      uint64_t v246 = v29;
      goto LABEL_20;
    }
    unint64_t v38 = *(v30 - 3);
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    v30 += 7;
    if (!--v28)
    {
      uint64_t v430 = v31;
      uint64_t v431 = v477;
      uint64_t v432 = v32;
      unint64_t v433 = v38;
      uint64_t v434 = v33;
      char v435 = v34;
      uint64_t v436 = v35;
      uint64_t v16 = v247;
      uint64_t v14 = v29;
      unint64_t v13 = v257;
      goto LABEL_83;
    }
  }
  uint64_t v246 = v29;
  unint64_t v36 = v38;
LABEL_20:
  uint64_t v430 = v31;
  uint64_t v431 = v477;
  uint64_t v432 = v32;
  unint64_t v433 = v36;
  uint64_t v434 = v33;
  char v435 = v34;
  uint64_t v436 = v35;
  uint64_t v408 = *((void *)&v283 + 1);
  uint64_t v39 = *(void *)(*((void *)&v283 + 1) + 16);
  unint64_t v40 = v257;
  if (!v39)
  {
LABEL_87:
    outlined init with take of NodePersonality(&v283, &v366);
    uint64_t v365 = v284;
    long long v260 = v240;
    uint64_t v261 = v243;
    uint64_t v262 = v244;
    uint64_t v263 = v252;
    char v264 = v238;
    uint64_t v265 = 0x746C69665F67616DLL;
    unint64_t v266 = 0xEA00000000007265;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v279 = 0uLL;
    swift_allocError();
    *uint64_t v116 = v267;
    long long v117 = v271;
    long long v119 = v268;
    long long v118 = v269;
    v116[3] = v270;
    v116[4] = v117;
    v116[1] = v119;
    v116[2] = v118;
    long long v120 = v275;
    long long v122 = v272;
    long long v121 = v273;
    v116[7] = v274;
    v116[8] = v120;
    v116[5] = v122;
    v116[6] = v121;
    long long v123 = v279;
    long long v125 = v276;
    long long v124 = v277;
    v116[11] = v278;
    v116[12] = v123;
    v116[9] = v125;
    v116[10] = v124;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of [Input]((uint64_t)&v408);
    outlined retain of NodePersonality(&v366);
    outlined retain of [Input]((uint64_t)&v365);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v366);
    outlined release of [Input]((uint64_t)&v408);
    outlined release of [Input]((uint64_t)&v365);
    swift_release();
    unint64_t v126 = v40;
    goto LABEL_93;
  }
  char v41 = (void *)(*((void *)&v283 + 1) + 80);
  uint64_t v235 = *((void *)&v283 + 1) + 80;
  uint64_t v236 = *((void *)&v283 + 1);
  while (1)
  {
    uint64_t v43 = *(v41 - 6);
    uint64_t v42 = *(v41 - 5);
    uint64_t v44 = *(v41 - 4);
    unint64_t v45 = *(v41 - 3);
    uint64_t v46 = *(v41 - 2);
    char v47 = *((unsigned char *)v41 - 8);
    uint64_t v48 = *v41;
    if (v44 == 0x746C69665F67616DLL && v45 == 0xEA00000000007265) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_30;
    }
    v41 += 7;
    if (!--v39)
    {
      uint64_t v460 = v43;
      uint64_t v461 = v42;
      uint64_t v462 = v44;
      unint64_t v463 = v45;
      uint64_t v464 = v46;
      char v465 = v47;
      uint64_t v466 = v48;
      unint64_t v40 = v257;
      goto LABEL_87;
    }
  }
  unint64_t v45 = 0xEA00000000007265;
LABEL_30:
  uint64_t v460 = v43;
  uint64_t v461 = v42;
  uint64_t v462 = v44;
  unint64_t v463 = v45;
  uint64_t v464 = v46;
  char v465 = v47;
  uint64_t v466 = v48;
  long long v50 = v259[8];
  long long v51 = v259[9];
  long long v52 = v259[6];
  long long v474 = v259[7];
  long long v475 = v50;
  v476[0] = v51;
  *(_OWORD *)((char *)v476 + 9) = *(long long *)((char *)v259 + 153);
  long long v53 = v259[5];
  long long v471 = v259[4];
  long long v472 = v53;
  long long v473 = v52;
  long long v54 = v259[1];
  long long v467 = *v259;
  long long v468 = v54;
  long long v55 = v259[3];
  long long v469 = v259[2];
  long long v470 = v55;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)&v460, v288);
  outlined init with take of MetalFunctionNode?((uint64_t)v288, (uint64_t)v347, &demangling cache variable for type metadata for Edge?);
  unint64_t v56 = v257;
  if (v348)
  {
    outlined release of Edge?(v288);
  }
  else
  {
    Graph.edge(to:)((uint64_t)&v430, v289);
    outlined init with take of MetalFunctionNode?((uint64_t)v289, (uint64_t)&v343, &demangling cache variable for type metadata for Edge?);
    if (*((void *)&v343 + 1))
    {
      v349[0] = v343;
      v349[1] = v344;
      v349[2] = v345;
      uint64_t v350 = v346;
      long long v351 = v344;
      swift_retain();
      outlined retain of String((uint64_t)&v351);
      outlined release of Edge?(v289);
      Graph.connect(_:to:)((uint64_t)v349, (unint64_t)&v460);
      swift_release();
      outlined release of String((uint64_t)&v351);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v57 = *(void *)(v236 + 16);
  if (!v57)
  {
LABEL_88:
    outlined init with take of NodePersonality(&v283, &v368);
    uint64_t v367 = v284;
    long long v260 = v240;
    uint64_t v261 = v243;
    uint64_t v262 = v244;
    uint64_t v263 = v252;
    char v264 = v238;
    uint64_t v265 = 0x746C69665F70696DLL;
    unint64_t v266 = 0xEA00000000007265;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v279 = 0uLL;
    swift_allocError();
    _OWORD *v127 = v267;
    long long v128 = v271;
    long long v130 = v268;
    long long v129 = v269;
    v127[3] = v270;
    v127[4] = v128;
    v127[1] = v130;
    v127[2] = v129;
    long long v131 = v275;
    long long v133 = v272;
    long long v132 = v273;
    v127[7] = v274;
    v127[8] = v131;
    v127[5] = v133;
    v127[6] = v132;
    long long v134 = v279;
    long long v136 = v276;
    long long v135 = v277;
    v127[11] = v278;
    v127[12] = v134;
    v127[9] = v136;
    v127[10] = v135;
    outlined retain of [Input]((uint64_t)&v408);
    outlined retain of NodePersonality(&v368);
    outlined retain of [Input]((uint64_t)&v367);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v368);
    outlined release of [Input]((uint64_t)&v408);
    outlined release of [Input]((uint64_t)&v367);
    swift_release();
    unint64_t v126 = v56;
    goto LABEL_93;
  }
  uint64_t v58 = (void *)v235;
  while (1)
  {
    uint64_t v60 = *(v58 - 6);
    uint64_t v59 = *(v58 - 5);
    uint64_t v61 = *(v58 - 4);
    unint64_t v62 = *(v58 - 3);
    uint64_t v63 = *(v58 - 2);
    char v64 = *((unsigned char *)v58 - 8);
    uint64_t v65 = *v58;
    if (v61 == 0x746C69665F70696DLL && v62 == 0xEA00000000007265) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_44;
    }
    v58 += 7;
    if (!--v57)
    {
      uint64_t v443 = v60;
      uint64_t v444 = v59;
      uint64_t v445 = v61;
      unint64_t v446 = v62;
      uint64_t v447 = v63;
      char v448 = v64;
      uint64_t v449 = v65;
      unint64_t v56 = v257;
      goto LABEL_88;
    }
  }
  unint64_t v62 = 0xEA00000000007265;
LABEL_44:
  uint64_t v443 = v60;
  uint64_t v444 = v59;
  uint64_t v445 = v61;
  unint64_t v446 = v62;
  uint64_t v447 = v63;
  char v448 = v64;
  uint64_t v449 = v65;
  long long v67 = v259[6];
  long long v457 = v259[7];
  long long v68 = v259[9];
  long long v458 = v259[8];
  v459[0] = v68;
  *(_OWORD *)((char *)v459 + 9) = *(long long *)((char *)v259 + 153);
  long long v69 = v259[5];
  long long v454 = v259[4];
  long long v455 = v69;
  long long v456 = v67;
  long long v70 = v259[1];
  long long v450 = *v259;
  long long v451 = v70;
  long long v71 = v259[3];
  long long v452 = v259[2];
  long long v453 = v71;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)&v443, v290);
  outlined init with take of MetalFunctionNode?((uint64_t)v290, (uint64_t)v341, &demangling cache variable for type metadata for Edge?);
  unint64_t v72 = v257;
  if (v342)
  {
    outlined release of Edge?(v290);
  }
  else
  {
    Graph.edge(to:)((uint64_t)&v430, v291);
    outlined init with take of MetalFunctionNode?((uint64_t)v291, (uint64_t)&v337, &demangling cache variable for type metadata for Edge?);
    if (*((void *)&v337 + 1))
    {
      v352[0] = v337;
      v352[1] = v338;
      v352[2] = v339;
      uint64_t v353 = v340;
      long long v354 = v338;
      swift_retain();
      outlined retain of String((uint64_t)&v354);
      outlined release of Edge?(v291);
      Graph.connect(_:to:)((uint64_t)v352, (unint64_t)&v443);
      swift_release();
      outlined release of String((uint64_t)&v354);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v73 = *(void *)(v236 + 16);
  if (!v73)
  {
LABEL_90:
    outlined init with take of NodePersonality(&v283, &v370);
    uint64_t v369 = v284;
    long long v260 = v240;
    uint64_t v261 = v243;
    uint64_t v262 = v244;
    uint64_t v263 = v252;
    char v264 = v238;
    uint64_t v265 = 0x746C69665F6E696DLL;
    unint64_t v266 = 0xEA00000000007265;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v279 = 0uLL;
    swift_allocError();
    *uint64_t v137 = v267;
    long long v138 = v271;
    long long v140 = v268;
    long long v139 = v269;
    v137[3] = v270;
    v137[4] = v138;
    v137[1] = v140;
    v137[2] = v139;
    long long v141 = v275;
    long long v143 = v272;
    long long v142 = v273;
    v137[7] = v274;
    v137[8] = v141;
    v137[5] = v143;
    v137[6] = v142;
    long long v144 = v279;
    long long v146 = v276;
    long long v145 = v277;
    v137[11] = v278;
    v137[12] = v144;
    v137[9] = v146;
    v137[10] = v145;
    outlined retain of [Input]((uint64_t)&v408);
    outlined retain of NodePersonality(&v370);
    outlined retain of [Input]((uint64_t)&v369);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v370);
    outlined release of [Input]((uint64_t)&v408);
    outlined release of [Input]((uint64_t)&v369);
    swift_release();
    unint64_t v126 = v72;
    goto LABEL_93;
  }
  unint64_t v74 = (void *)v235;
  while (1)
  {
    uint64_t v76 = *(v74 - 6);
    uint64_t v75 = *(v74 - 5);
    uint64_t v77 = *(v74 - 4);
    unint64_t v78 = *(v74 - 3);
    uint64_t v79 = *(v74 - 2);
    char v80 = *((unsigned char *)v74 - 8);
    uint64_t v81 = v74;
    uint64_t v82 = *v74;
    if (v77 == 0x746C69665F6E696DLL && v78 == 0xEA00000000007265) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_58;
    }
    unint64_t v74 = v81 + 7;
    if (!--v73)
    {
      *(void *)&long long v437 = v76;
      *((void *)&v437 + 1) = v75;
      uint64_t v438 = v77;
      unint64_t v439 = v78;
      uint64_t v440 = v79;
      char v441 = v80;
      uint64_t v442 = v82;
      unint64_t v72 = v257;
      goto LABEL_90;
    }
  }
  unint64_t v78 = 0xEA00000000007265;
LABEL_58:
  *(void *)&long long v437 = v76;
  *((void *)&v437 + 1) = v75;
  uint64_t v438 = v77;
  unint64_t v439 = v78;
  uint64_t v440 = v79;
  char v441 = v80;
  uint64_t v442 = v82;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.moveEdge(from:to:)((uint64_t)&v430, &v437);
  swift_bridgeObjectRelease();
  swift_release();
  specialized ShaderGraphNode.metalTextureType.getter(v257);
  uint64_t v84 = swift_retain();
  Graph.insertCubeimageNode(metalTextureType:resultType:)(v84, v249, &v292);
  long long v85 = v292;
  uint64_t v237 = v293;
  uint64_t v239 = v294;
  uint64_t v241 = v295;
  char v242 = v296;
  swift_release();
  uint64_t v86 = *(void *)(v246 + 16);
  uint64_t v87 = v232;
  if (!v86)
  {
LABEL_91:
    *(void *)&long long v260 = v257;
    *((void *)&v260 + 1) = v246;
    uint64_t v261 = v247;
    uint64_t v262 = v258;
    uint64_t v263 = v254;
    char v264 = v255;
    uint64_t v265 = 1701603686;
    unint64_t v266 = 0xE400000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v279 = 0uLL;
    swift_allocError();
    _OWORD *v147 = v267;
    long long v148 = v271;
    long long v150 = v268;
    long long v149 = v269;
    v147[3] = v270;
    v147[4] = v148;
    v147[1] = v150;
    v147[2] = v149;
    long long v151 = v275;
    long long v153 = v272;
    long long v152 = v273;
    v147[7] = v274;
    v147[8] = v151;
    v147[5] = v153;
    v147[6] = v152;
    long long v154 = v279;
    long long v156 = v276;
    long long v155 = v277;
    v147[11] = v278;
    v147[12] = v154;
    v147[9] = v156;
    v147[10] = v155;
    outlined copy of NodePersonality(v257);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v292, &v375);
    outlined release of NodePersonality(&v375);
    uint64_t v374 = *((void *)&v292 + 1);
    outlined release of [Input]((uint64_t)&v374);
    uint64_t v373 = v293;
    outlined release of [Input]((uint64_t)&v373);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v283, &v372);
    outlined release of NodePersonality(&v372);
    outlined release of [Input]((uint64_t)&v408);
    uint64_t v371 = v284;
    outlined release of [Input]((uint64_t)&v371);
    swift_release();
    outlined consume of NodePersonality(v257);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  while (1)
  {
    uint64_t v88 = *(v87 - 6);
    uint64_t v253 = *(v87 - 5);
    uint64_t v89 = *(v87 - 4);
    uint64_t v90 = *(v87 - 2);
    char v91 = *((unsigned char *)v87 - 8);
    uint64_t v92 = *v87;
    if (v89 == 1701603686 && *(v87 - 3) == 0xE400000000000000) {
      break;
    }
    unint64_t v94 = *(v87 - 3);
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_67;
    }
    v87 += 7;
    if (!--v86)
    {
      uint64_t v416 = v88;
      uint64_t v417 = v253;
      uint64_t v418 = v89;
      unint64_t v419 = v94;
      uint64_t v420 = v90;
      char v421 = v91;
      uint64_t v422 = v92;
      goto LABEL_91;
    }
  }
  unint64_t v94 = 0xE400000000000000;
LABEL_67:
  uint64_t v416 = v88;
  uint64_t v417 = v253;
  uint64_t v418 = v89;
  unint64_t v419 = v94;
  uint64_t v420 = v90;
  char v421 = v91;
  uint64_t v422 = v92;
  uint64_t v95 = *(void *)(*((void *)&v292 + 1) + 16);
  if (v95)
  {
    uint64_t v245 = *((void *)&v292 + 1);
    long long v96 = (void *)(*((void *)&v292 + 1) + 80);
    while (1)
    {
      uint64_t v98 = *(v96 - 6);
      uint64_t v97 = *(v96 - 5);
      uint64_t v100 = *(v96 - 4);
      unint64_t v99 = *(v96 - 3);
      uint64_t v101 = *(v96 - 2);
      char v102 = *((unsigned char *)v96 - 8);
      uint64_t v103 = *v96;
      if (v100 == 1701603686 && v99 == 0xE400000000000000) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_77;
      }
      v96 += 7;
      if (!--v95)
      {
        uint64_t v423 = v98;
        uint64_t v424 = v97;
        uint64_t v425 = v100;
        unint64_t v426 = v99;
        uint64_t v427 = v101;
        char v428 = v102;
        uint64_t v429 = v103;
        goto LABEL_92;
      }
    }
    unint64_t v99 = 0xE400000000000000;
LABEL_77:
    uint64_t v423 = v98;
    uint64_t v424 = v97;
    uint64_t v425 = v100;
    unint64_t v426 = v99;
    uint64_t v427 = v101;
    char v428 = v102;
    uint64_t v429 = v103;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(&v416, (unint64_t)&v423, v233, v234);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    specialized Sequence.first(where:)(v246, 0x746C7561666564, 0xE700000000000000, v297);
    outlined init with take of MetalFunctionNode?((uint64_t)v297, (uint64_t)v332, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v332[0] + 1))
    {
      *(void *)&long long v260 = v257;
      *((void *)&v260 + 1) = v246;
      uint64_t v261 = v247;
      uint64_t v262 = v258;
      uint64_t v263 = v254;
      char v264 = v255;
      uint64_t v265 = 0x746C7561666564;
      unint64_t v266 = 0xE700000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v279 = 0uLL;
      swift_allocError();
      *uint64_t v181 = v267;
      long long v182 = v271;
      long long v184 = v268;
      long long v183 = v269;
      v181[3] = v270;
      v181[4] = v182;
      v181[1] = v184;
      v181[2] = v183;
      long long v185 = v275;
      long long v187 = v272;
      long long v186 = v273;
      v181[7] = v274;
      v181[8] = v185;
      v181[5] = v187;
      v181[6] = v186;
      long long v188 = v279;
      long long v190 = v276;
      long long v189 = v277;
      v181[11] = v278;
      v181[12] = v188;
      v181[9] = v190;
      v181[10] = v189;
      outlined copy of NodePersonality(v257);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v292, &v407);
      outlined release of NodePersonality(&v407);
      swift_bridgeObjectRelease();
      uint64_t v406 = v293;
      outlined release of [Input]((uint64_t)&v406);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v283, &v405);
      outlined release of NodePersonality(&v405);
      outlined release of [Input]((uint64_t)&v408);
      uint64_t v404 = v284;
      outlined release of [Input]((uint64_t)&v404);
      swift_release();
      outlined consume of NodePersonality(v257);
      goto LABEL_86;
    }
    long long v334 = v332[0];
    v335[0] = v332[1];
    v335[1] = v332[2];
    uint64_t v336 = v333;
    specialized Sequence.first(where:)(v245, 0x56746C7561666564, 0xEA00000000006C61, v298);
    outlined init with take of MetalFunctionNode?((uint64_t)v298, (uint64_t)v326, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v326[0] + 1))
    {
      outlined init with take of NodePersonality(&v292, &v403);
      uint64_t v402 = v293;
      long long v260 = v85;
      uint64_t v261 = v237;
      uint64_t v262 = v239;
      uint64_t v263 = v241;
      char v264 = v242;
      uint64_t v265 = 0x56746C7561666564;
      unint64_t v266 = 0xEA00000000006C61;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v279 = 0uLL;
      swift_allocError();
      *long long v191 = v267;
      long long v192 = v271;
      long long v194 = v268;
      long long v193 = v269;
      v191[3] = v270;
      v191[4] = v192;
      v191[1] = v194;
      v191[2] = v193;
      long long v195 = v275;
      long long v197 = v272;
      long long v196 = v273;
      v191[7] = v274;
      v191[8] = v195;
      v191[5] = v197;
      v191[6] = v196;
      long long v198 = v279;
      long long v200 = v276;
      long long v199 = v277;
      v191[11] = v278;
      v191[12] = v198;
      v191[9] = v200;
      v191[10] = v199;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v403);
      outlined retain of [Input]((uint64_t)&v402);
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      long long v356 = *v231;
      outlined release of String((uint64_t)&v356);
      outlined release of NodePersonality(&v403);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v402);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v283, &v401);
      outlined release of NodePersonality(&v401);
      outlined release of [Input]((uint64_t)&v408);
      uint64_t v400 = v284;
      outlined release of [Input]((uint64_t)&v400);
      swift_release();
      outlined consume of NodePersonality(v257);
      goto LABEL_86;
    }
    long long v328 = v326[0];
    long long v329 = v326[1];
    long long v330 = v326[2];
    uint64_t v331 = v327;
    Graph.moveEdge(from:to:)((uint64_t)&v334, &v328);
    swift_release();
    long long v357 = v329;
    outlined release of String((uint64_t)&v357);
    swift_release();
    uint64_t v10 = v231;
    long long v355 = *v231;
    outlined release of String((uint64_t)&v355);
    specialized Sequence.first(where:)(v246, 0x64726F6F63786574, 0xE800000000000000, v299);
    outlined init with take of MetalFunctionNode?((uint64_t)v299, (uint64_t)v320, (uint64_t *)&demangling cache variable for type metadata for Input?);
    uint64_t v8 = v248;
    unint64_t v13 = v257;
    if (*((void *)&v320[0] + 1))
    {
      long long v322 = v320[0];
      long long v323 = v320[1];
      long long v324 = v320[2];
      uint64_t v325 = v321;
      specialized Sequence.first(where:)(v245, 0x64726F6F63786574, 0xE800000000000000, v300);
      outlined init with take of MetalFunctionNode?((uint64_t)v300, (uint64_t)v314, (uint64_t *)&demangling cache variable for type metadata for Input?);
      if (*((void *)&v314[0] + 1))
      {
        long long v316 = v314[0];
        long long v317 = v314[1];
        long long v318 = v314[2];
        uint64_t v319 = v315;
        Graph.moveEdge(from:to:)((uint64_t)&v322, &v316);
        swift_release();
        long long v360 = v317;
        outlined release of String((uint64_t)&v360);
        swift_release();
        long long v358 = v323;
        outlined release of String((uint64_t)&v358);
        ShaderGraphNode.out.getter((uint64_t)&v301);
        specialized Sequence.first(where:)(v245, 0x72656C706D6173, 0xE700000000000000, v303);
        outlined init with take of MetalFunctionNode?((uint64_t)v303, (uint64_t)v308, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (*((void *)&v308[0] + 1))
        {
          long long v310 = v308[0];
          long long v311 = v308[1];
          long long v312 = v308[2];
          uint64_t v313 = v309;
          Graph.connect(_:to:)((uint64_t)&v301, (unint64_t)&v310);
          swift_release();
          long long v361 = v311;
          outlined release of String((uint64_t)&v361);
          swift_release();
          long long v386 = v302;
          outlined release of String((uint64_t)&v386);
          ShaderGraphNode.out.getter((uint64_t)&v304);
          ShaderGraphNode.out.getter((uint64_t)v306);
          uint64_t v6 = 0;
          Graph.moveEdges(from:to:)((uint64_t)&v304, (uint64_t)v306);
          swift_release();
          long long v385 = v307;
          outlined release of String((uint64_t)&v385);
          swift_release();
          long long v384 = v305;
          outlined release of String((uint64_t)&v384);
          outlined init with take of NodePersonality(&v292, &v383);
          outlined release of NodePersonality(&v383);
          swift_bridgeObjectRelease();
          uint64_t v382 = v293;
          outlined release of [Input]((uint64_t)&v382);
          swift_bridgeObjectRelease();
          swift_release();
          outlined init with take of NodePersonality(&v283, &v381);
          outlined release of NodePersonality(&v381);
          outlined release of [Input]((uint64_t)&v408);
          uint64_t v380 = v284;
          outlined release of [Input]((uint64_t)&v380);
          swift_release();
          goto LABEL_3;
        }
        outlined init with take of NodePersonality(&v292, &v391);
        uint64_t v390 = v293;
        long long v260 = v85;
        uint64_t v261 = v237;
        uint64_t v262 = v239;
        uint64_t v263 = v241;
        char v264 = v242;
        uint64_t v265 = 0x72656C706D6173;
        unint64_t v266 = 0xE700000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v279 = 0uLL;
        swift_allocError();
        *long long v221 = v267;
        long long v222 = v271;
        long long v224 = v268;
        long long v223 = v269;
        v221[3] = v270;
        v221[4] = v222;
        v221[1] = v224;
        v221[2] = v223;
        long long v225 = v275;
        long long v227 = v272;
        long long v226 = v273;
        v221[7] = v274;
        v221[8] = v225;
        v221[5] = v227;
        v221[6] = v226;
        long long v228 = v279;
        long long v230 = v276;
        long long v229 = v277;
        v221[11] = v278;
        v221[12] = v228;
        v221[9] = v230;
        v221[10] = v229;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v391);
        outlined retain of [Input]((uint64_t)&v390);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        long long v389 = v302;
        outlined release of String((uint64_t)&v389);
        outlined release of NodePersonality(&v391);
        swift_bridgeObjectRelease();
        outlined release of [Input]((uint64_t)&v390);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v283, &v388);
        outlined release of NodePersonality(&v388);
        outlined release of [Input]((uint64_t)&v408);
        uint64_t v387 = v284;
        uint64_t v115 = &v387;
      }
      else
      {
        outlined init with take of NodePersonality(&v292, &v395);
        uint64_t v394 = v293;
        long long v260 = v85;
        uint64_t v261 = v237;
        uint64_t v262 = v239;
        uint64_t v263 = v241;
        char v264 = v242;
        uint64_t v265 = 0x64726F6F63786574;
        unint64_t v266 = 0xE800000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v279 = 0uLL;
        swift_allocError();
        *long long v211 = v267;
        long long v212 = v271;
        long long v214 = v268;
        long long v213 = v269;
        v211[3] = v270;
        v211[4] = v212;
        v211[1] = v214;
        v211[2] = v213;
        long long v215 = v275;
        long long v217 = v272;
        long long v216 = v273;
        v211[7] = v274;
        char v211[8] = v215;
        v211[5] = v217;
        v211[6] = v216;
        long long v218 = v279;
        long long v220 = v276;
        long long v219 = v277;
        v211[11] = v278;
        v211[12] = v218;
        v211[9] = v220;
        v211[10] = v219;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v395);
        outlined retain of [Input]((uint64_t)&v394);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        long long v359 = v323;
        outlined release of String((uint64_t)&v359);
        outlined release of NodePersonality(&v395);
        swift_bridgeObjectRelease();
        outlined release of [Input]((uint64_t)&v394);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v283, &v393);
        outlined release of NodePersonality(&v393);
        outlined release of [Input]((uint64_t)&v408);
        uint64_t v392 = v284;
        uint64_t v115 = &v392;
      }
    }
    else
    {
      *(void *)&long long v260 = v257;
      *((void *)&v260 + 1) = v246;
      uint64_t v261 = v247;
      uint64_t v262 = v258;
      uint64_t v263 = v254;
      char v264 = v255;
      uint64_t v265 = 0x64726F6F63786574;
      unint64_t v266 = 0xE800000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v279 = 0uLL;
      swift_allocError();
      *long long v201 = v267;
      long long v202 = v271;
      long long v204 = v268;
      long long v203 = v269;
      v201[3] = v270;
      v201[4] = v202;
      v201[1] = v204;
      v201[2] = v203;
      long long v205 = v275;
      long long v207 = v272;
      long long v206 = v273;
      v201[7] = v274;
      v201[8] = v205;
      v201[5] = v207;
      v201[6] = v206;
      long long v208 = v279;
      long long v210 = v276;
      long long v209 = v277;
      v201[11] = v278;
      v201[12] = v208;
      v201[9] = v210;
      v201[10] = v209;
      outlined copy of NodePersonality(v257);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v292, &v399);
      outlined release of NodePersonality(&v399);
      swift_bridgeObjectRelease();
      uint64_t v398 = v293;
      outlined release of [Input]((uint64_t)&v398);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v283, &v397);
      outlined release of NodePersonality(&v397);
      outlined release of [Input]((uint64_t)&v408);
      uint64_t v396 = v284;
      uint64_t v115 = &v396;
    }
    goto LABEL_84;
  }
LABEL_92:
  outlined init with take of NodePersonality(&v292, &v379);
  uint64_t v378 = v293;
  long long v260 = v85;
  uint64_t v261 = v237;
  uint64_t v262 = v239;
  uint64_t v263 = v241;
  char v264 = v242;
  uint64_t v265 = 1701603686;
  unint64_t v266 = 0xE400000000000000;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
  outlined init with take of UserGraphError.ErrorType((uint64_t)&v260, (uint64_t)&v267);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  long long v279 = 0uLL;
  swift_allocError();
  *uint64_t v157 = v267;
  long long v158 = v271;
  long long v160 = v268;
  long long v159 = v269;
  v157[3] = v270;
  v157[4] = v158;
  v157[1] = v160;
  v157[2] = v159;
  long long v161 = v275;
  long long v163 = v272;
  long long v162 = v273;
  v157[7] = v274;
  v157[8] = v161;
  v157[5] = v163;
  v157[6] = v162;
  long long v164 = v279;
  long long v166 = v276;
  long long v165 = v277;
  v157[11] = v278;
  v157[12] = v164;
  v157[9] = v166;
  v157[10] = v165;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of NodePersonality(&v379);
  outlined retain of [Input]((uint64_t)&v378);
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined release of NodePersonality(&v379);
  swift_bridgeObjectRelease();
  outlined release of [Input]((uint64_t)&v378);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v283, &v377);
  outlined release of NodePersonality(&v377);
  outlined release of [Input]((uint64_t)&v408);
  uint64_t v376 = v284;
  outlined release of [Input]((uint64_t)&v376);
  swift_release();
  unint64_t v126 = v257;
LABEL_93:
  outlined consume of NodePersonality(v126);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.filter(_:)(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 72;
    uint64_t v4 = MEMORY[0x263F8EE78];
    unint64_t v18 = v1 - 1;
    uint64_t v19 = result + 72;
    unint64_t v23 = *(void *)(result + 16);
    while (1)
    {
      uint64_t v20 = v4;
      uint64_t v5 = v2 <= v1 ? v1 : v2;
      uint64_t v6 = (unsigned char *)(v3 + 48 * v2);
      unint64_t v7 = v2;
      while (1)
      {
        if (v5 == v7)
        {
          __break(1u);
          return result;
        }
        unint64_t v8 = *((void *)v6 - 5);
        if (v8 >> 61 == 5) {
          break;
        }
LABEL_7:
        ++v7;
        v6 += 48;
        if (v1 == v7) {
          return v20;
        }
      }
      uint64_t v10 = *((void *)v6 - 4);
      uint64_t v9 = *((void *)v6 - 3);
      char v22 = *v6;
      uint64_t v11 = *((void *)v6 - 2);
      uint64_t v21 = *((void *)v6 - 1);
      outlined copy of NodePersonality(v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12._uint64_t countAndFlagsBits = 0xD000000000000014;
      v12._char object = (void *)0x800000025C421D60;
      Swift::Bool v13 = String.hasPrefix(_:)(v12);
      swift_bridgeObjectRelease();
      if (!v13) {
        break;
      }
      uint64_t v4 = v20;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v4 = v20;
      }
      char v14 = v22;
      unint64_t v16 = *(void *)(v4 + 16);
      unint64_t v15 = *(void *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        char v14 = v22;
        uint64_t v4 = v20;
      }
      unint64_t v2 = v7 + 1;
      *(void *)(v4 + 16) = v16 + 1;
      uint64_t v17 = v4 + 48 * v16;
      *(void *)(v17 + 32) = v8;
      *(void *)(v17 + 40) = v10;
      *(void *)(v17 + 48) = v9;
      *(void *)(v17 + 56) = v11;
      *(void *)(v17 + 64) = v21;
      *(unsigned char *)(v17 + 72) = v14;
      uint64_t v3 = v19;
      unint64_t v1 = v23;
      if (v18 == v7) {
        return v4;
      }
    }
    outlined consume of NodePersonality(v8);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v1 = v23;
    goto LABEL_7;
  }
  return MEMORY[0x263F8EE78];
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  long long *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;

  unint64_t v1 = result;
  unint64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(result + 64);
  unint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      uint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      uint64_t v10 = v9 | (v2 << 6);
      goto LABEL_23;
    }
    uint64_t v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v8) {
      goto LABEL_31;
    }
    Swift::String v12 = *(void *)(v3 + 8 * v11);
    ++v2;
    if (!v12)
    {
      unint64_t v2 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_31;
      }
      Swift::String v12 = *(void *)(v3 + 8 * v2);
      if (!v12)
      {
        unint64_t v2 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_31;
        }
        Swift::String v12 = *(void *)(v3 + 8 * v2);
        if (!v12)
        {
          unint64_t v2 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_31;
          }
          Swift::String v12 = *(void *)(v3 + 8 * v2);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v6 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v2 << 6);
LABEL_23:
    char v14 = (long long *)(*(void *)(v1 + 56) + 144 * v10);
    uint64_t v30 = *v14;
    unint64_t v15 = v14[4];
    uint64_t v17 = v14[1];
    unint64_t v16 = v14[2];
    uint64_t v33 = v14[3];
    char v34 = v15;
    uint64_t v31 = v17;
    uint64_t v32 = v16;
    unint64_t v18 = v14[8];
    uint64_t v20 = v14[5];
    uint64_t v19 = v14[6];
    uint64_t v37 = v14[7];
    unint64_t v38 = v18;
    uint64_t v35 = v20;
    unint64_t v36 = v19;
    if (*((void *)&v33 + 1))
    {
      uint64_t result = v33;
      if (v33 == __PAIR128__(0x800000025C4279E0, 0xD000000000000013)) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        continue;
      }
    }
    outlined retain of NodeDef((uint64_t)&v30);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = v7;
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
      unint64_t v7 = v39;
    }
    char v22 = *(void *)(v7 + 16);
    uint64_t v21 = *(void *)(v7 + 24);
    if (v22 >= v21 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      unint64_t v7 = v39;
    }
    *(void *)(v7 + 16) = v22 + 1;
    unint64_t v23 = (_OWORD *)(v7 + 144 * v22);
    void v23[2] = v30;
    Swift::String v24 = v31;
    Swift::String v25 = v32;
    Swift::String v26 = v34;
    v23[5] = v33;
    v23[6] = v26;
    v23[3] = v24;
    v23[4] = v25;
    char v27 = v35;
    uint64_t v28 = v36;
    uint64_t v29 = v38;
    v23[9] = v37;
    v23[10] = v29;
    v23[7] = v27;
    v23[8] = v28;
  }
  Swift::Bool v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_31:
    swift_release();
    return v7;
  }
  Swift::String v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    unint64_t v2 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v2 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v2 >= v8) {
      goto LABEL_31;
    }
    Swift::String v12 = *(void *)(v3 + 8 * v2);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Graph.replaceInvalidImageNodes()();
  if (!v7)
  {
    long long v8 = v3[9];
    long long v33 = v3[8];
    v34[0] = v8;
    *(_OWORD *)((char *)v34 + 9) = *(long long *)((char *)v3 + 153);
    long long v9 = v3[5];
    long long v29 = v3[4];
    long long v30 = v9;
    long long v10 = v3[7];
    long long v31 = v3[6];
    long long v32 = v10;
    long long v11 = v3[1];
    long long v25 = *v3;
    long long v26 = v11;
    long long v12 = v3[3];
    long long v27 = v3[2];
    long long v28 = v12;
    Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)v22);
    unint64_t v13 = v22[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    specialized Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(v13, a2, a3);
    specialized Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(v13, a2, a3);
    specialized Graph.transformMaterialXCubeimageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(v13);
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized Sequence.filter(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      unint64_t v35 = v13;
      swift_bridgeObjectRetain();
      uint64_t v17 = v15 + 40;
      do
      {
        unint64_t v19 = *(void *)(v17 - 8);
        uint64_t v18 = *(void *)v17;
        uint64_t v20 = *(void *)(v17 + 8);
        char v21 = *(unsigned char *)(v17 + 32);
        v22[0] = v19;
        v22[1] = v18;
        v22[2] = v20;
        long long v23 = *(_OWORD *)(v17 + 16);
        LOBYTE(v24) = v21;
        outlined copy of NodePersonality(v19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)((uint64_t)v22);
        outlined consume of NodePersonality(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 += 48;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void *specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  uint64_t v435 = a2;
  long long v437 = a4;
  uint64_t v438 = a6;
  uint64_t v444 = a5;
  uint64_t v445 = a3;
  unint64_t v393 = a7;
  uint64_t v439 = type metadata accessor for OSSignpostError();
  uint64_t v428 = *(void *)(v439 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v439);
  uint64_t v392 = &v383[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v390 = &v383[-v11];
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  long long v389 = &v383[-v13];
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v395 = &v383[-v15];
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v400 = &v383[-v17];
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v403 = &v383[-v19];
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v404 = &v383[-v21];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  unint64_t v407 = &v383[-v23];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  long long v409 = &v383[-v25];
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  unint64_t v410 = &v383[-v27];
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v412 = &v383[-v29];
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v414 = &v383[-v31];
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v416 = &v383[-v33];
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v418 = &v383[-v35];
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v420 = &v383[-v37];
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v422 = &v383[-v39];
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v424 = &v383[-v41];
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  unint64_t v426 = &v383[-v43];
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  long long v386 = &v383[-v45];
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v396 = &v383[-v47];
  MEMORY[0x270FA5388](v46);
  unint64_t v399 = &v383[-v48];
  uint64_t v49 = type metadata accessor for OSSignpostID();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  unint64_t v391 = &v383[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  unint64_t v388 = &v383[-v54];
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  uint64_t v387 = &v383[-v56];
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  unint64_t v397 = &v383[-v58];
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  unint64_t v401 = &v383[-v60];
  uint64_t v61 = MEMORY[0x270FA5388](v59);
  uint64_t v406 = &v383[-v62];
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  uint64_t v411 = &v383[-v64];
  uint64_t v65 = MEMORY[0x270FA5388](v63);
  uint64_t v413 = &v383[-v66];
  uint64_t v67 = MEMORY[0x270FA5388](v65);
  uint64_t v417 = &v383[-v68];
  uint64_t v69 = MEMORY[0x270FA5388](v67);
  char v421 = &v383[-v70];
  uint64_t v71 = MEMORY[0x270FA5388](v69);
  uint64_t v429 = &v383[-v72];
  uint64_t v73 = MEMORY[0x270FA5388](v71);
  uint64_t v394 = &v383[-v74];
  uint64_t v75 = MEMORY[0x270FA5388](v73);
  uint64_t v398 = &v383[-v76];
  uint64_t v77 = MEMORY[0x270FA5388](v75);
  uint64_t v402 = &v383[-v78];
  uint64_t v79 = MEMORY[0x270FA5388](v77);
  unint64_t v405 = &v383[-v80];
  uint64_t v81 = MEMORY[0x270FA5388](v79);
  uint64_t v408 = &v383[-v82];
  uint64_t v83 = MEMORY[0x270FA5388](v81);
  char v415 = &v383[-v84];
  uint64_t v85 = MEMORY[0x270FA5388](v83);
  unint64_t v419 = &v383[-v86];
  uint64_t v87 = MEMORY[0x270FA5388](v85);
  uint64_t v423 = &v383[-v88];
  uint64_t v89 = MEMORY[0x270FA5388](v87);
  uint64_t v425 = &v383[-v90];
  uint64_t v91 = MEMORY[0x270FA5388](v89);
  uint64_t v427 = &v383[-v92];
  uint64_t v93 = MEMORY[0x270FA5388](v91);
  uint64_t v449 = (uint64_t)&v383[-v94];
  MEMORY[0x270FA5388](v93);
  long long v96 = &v383[-v95];
  uint64_t v97 = type metadata accessor for OSSignposter();
  uint64_t v431 = *(void *)(v97 - 8);
  uint64_t v432 = v97;
  MEMORY[0x270FA5388](v97);
  unint64_t v99 = &v383[-((v98 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v100 = *(void *)(a1 + 32);
  uint64_t v430 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain_n();
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  uint64_t v447 = v99;
  uint64_t v101 = OSSignposter.logHandle.getter();
  LODWORD(v446) = static os_signpost_type_t.begin.getter();
  char v102 = OS_os_log.signpostsEnabled.getter();
  unint64_t v443 = v49;
  unint64_t v522 = v100;
  if (v102)
  {
    uint64_t v103 = *(void (**)(void, void, void))(v50 + 16);
    unint64_t v441 = (v50 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v442 = v103;
    v103(v449, v96, v49);
    uint64_t v104 = swift_slowAlloc();
    uint64_t v105 = swift_slowAlloc();
    uint64_t v448 = v50;
    uint64_t v106 = v105;
    *(void *)&v457[0] = v105;
    *(_DWORD *)uint64_t v104 = 141558275;
    *(void *)long long v456 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v104 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)long long v456 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v430, v100, (uint64_t *)v457);
    uint64_t v49 = v443;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v107 = v449;
    os_signpost_id_t v108 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v101, (os_signpost_type_t)v446, v108, "transform", "%{private,mask.hash}s", (uint8_t *)v104, 0x16u);
    swift_arrayDestroy();
    uint64_t v109 = v106;
    uint64_t v50 = v448;
    MEMORY[0x261185880](v109, -1, -1);
    MEMORY[0x261185880](v104, -1, -1);

    uint64_t v110 = v107;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v107, v49);
    unint64_t v112 = v441;
    long long v111 = v442;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    long long v111 = *(void (**)(void, void, void))(v50 + 16);
    unint64_t v112 = (v50 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v110 = v449;
  }
  unint64_t v441 = v112;
  uint64_t v442 = v111;
  v111(v110, v96, v49);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v113 = OSSignpostIntervalState.init(id:isOpen:)();
  long long v114 = *(void (**)(uint64_t, unint64_t))(v50 + 8);
  uint64_t v448 = v50 + 8;
  uint64_t v436 = v114;
  v114((uint64_t)v96, v49);
  long long v115 = *(_OWORD *)(a1 + 112);
  long long v116 = *(_OWORD *)(a1 + 144);
  v470[0] = *(_OWORD *)(a1 + 128);
  v470[1] = v116;
  *(_OWORD *)((char *)&v470[1] + 9) = *(_OWORD *)(a1 + 153);
  long long v117 = *(_OWORD *)(a1 + 48);
  long long v118 = *(_OWORD *)(a1 + 80);
  long long v119 = *(_OWORD *)(a1 + 96);
  v469[0] = *(_OWORD *)(a1 + 64);
  v469[1] = v118;
  uint64_t v120 = *(void *)(a1 + 48);
  v469[2] = v119;
  v469[3] = v115;
  long long v121 = *(_OWORD *)(a1 + 16);
  v467[0] = *(_OWORD *)a1;
  v467[1] = v121;
  v467[2] = *(_OWORD *)(a1 + 32);
  long long v468 = v117;
  uint64_t v446 = v120;
  swift_bridgeObjectRetain_n();
  uint64_t v433 = a1;
  outlined retain of Graph(a1);
  Graph.flatten()();
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v122 = static DebugConfig.debugMode;
  uint64_t v123 = *(void *)(static DebugConfig.debugMode + 16);
  uint64_t v440 = v113;
  if (!v123) {
    goto LABEL_13;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v124 = Hasher._finalize()();
  uint64_t v125 = -1 << *(unsigned char *)(v122 + 32);
  unint64_t v126 = v124 & ~v125;
  if (((*(void *)(v122 + 56 + ((v126 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v126) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v129 = static DebugConfig.debugMode;
    if (*(void *)(static DebugConfig.debugMode + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v130 = Hasher._finalize()();
      uint64_t v131 = -1 << *(unsigned char *)(v129 + 32);
      unint64_t v132 = v130 & ~v131;
      if ((*(void *)(v129 + 56 + ((v132 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v132))
      {
        uint64_t v133 = ~v131;
        while (2)
        {
          switch(*(unsigned char *)(*(void *)(v129 + 48) + v132))
          {
            case 6:
              goto LABEL_50;
            default:
              char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v134) {
                goto LABEL_20;
              }
              unint64_t v132 = (v132 + 1) & v133;
              if (((*(void *)(v129 + 56 + ((v132 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v132) & 1) == 0) {
                break;
              }
              continue;
          }
          break;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v135 = v439;
    }
    else
    {
      uint64_t v135 = v439;
    }
    long long v140 = v434;
    goto LABEL_32;
  }
  uint64_t v127 = ~v125;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(v122 + 48) + v126))
    {
      case 3:
LABEL_50:
        long long v136 = v434;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      default:
        char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v128 & 1) == 0)
        {
          unint64_t v126 = (v126 + 1) & v127;
          if (((*(void *)(v122 + 56 + ((v126 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v126) & 1) == 0) {
            goto LABEL_12;
          }
          continue;
        }
LABEL_20:
        long long v136 = v434;
LABEL_21:
        swift_bridgeObjectRelease();
        v520[7] = v469[3];
        v520[8] = v470[0];
        v521[0] = v470[1];
        *(_OWORD *)((char *)v521 + 9) = *(_OWORD *)((char *)&v470[1] + 9);
        v520[4] = v469[0];
        v520[5] = v469[1];
        v520[6] = v469[2];
        v520[0] = v467[0];
        v520[1] = v467[1];
        v520[2] = v467[2];
        v520[3] = v468;
        outlined retain of Graph((uint64_t)v520);
        uint64_t v137 = v136;
        createDotText(representing:)((uint64_t)v520);
        long long v140 = v136;
        if (v136)
        {
          outlined release of Graph((uint64_t)v520);
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v141 = type metadata accessor for Logger();
          __swift_project_value_buffer(v141, (uint64_t)logger);
          id v142 = v136;
          id v143 = v136;
          long long v144 = Logger.logObject.getter();
          os_log_type_t v145 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v144, v145))
          {
            long long v146 = (uint8_t *)swift_slowAlloc();
            uint64_t v147 = swift_slowAlloc();
            *(void *)&v457[0] = v147;
            *(_DWORD *)long long v146 = 136315138;
            swift_getErrorValue();
            uint64_t v148 = Error.localizedDescription.getter();
            *(void *)long long v456 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v149, (uint64_t *)v457);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_25C27E000, v144, v145, "%s", v146, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x261185880](v147, -1, -1);
            MEMORY[0x261185880](v146, -1, -1);
          }
          else
          {
          }
          long long v140 = 0;
        }
        else
        {
          uint64_t v150 = v138;
          uint64_t v151 = v139;
          outlined release of Graph((uint64_t)v520);
          *(void *)&v457[0] = v430;
          *((void *)&v457[0] + 1) = v522;
          swift_bridgeObjectRetain();
          v152._char object = (void *)0xEA00000000006870;
          v152._uint64_t countAndFlagsBits = 0x617267726573755FLL;
          String.append(_:)(v152);
          specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v150, v151, *(uint64_t *)&v457[0], *((void **)&v457[0] + 1), 7630692, 0xE300000000000000);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v135 = v439;
LABEL_32:
        v518[7] = v469[3];
        v518[8] = v470[0];
        v519[0] = v470[1];
        *(_OWORD *)((char *)v519 + 9) = *(_OWORD *)((char *)&v470[1] + 9);
        v518[4] = v469[0];
        v518[5] = v469[1];
        v518[6] = v469[2];
        v518[0] = v467[0];
        v518[1] = v467[1];
        v518[2] = v467[2];
        v518[3] = v468;
        outlined retain of Graph((uint64_t)v518);
        Graph.surfaceNode()((uint64_t)v476);
        if (v140)
        {
          outlined release of Graph((uint64_t)v518);
          outlined release of Graph((uint64_t)v518);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v153 = OSSignposter.logHandle.getter();
          long long v154 = v429;
          OSSignpostIntervalState.signpostID.getter();
          int v155 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            LODWORD(v444) = v155;
            swift_retain();
            long long v156 = v426;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            uint64_t v157 = v428;
            int v158 = (*(uint64_t (**)(unsigned char *, uint64_t))(v428 + 88))(v156, v135);
            int v159 = *MEMORY[0x263F90238];
            uint64_t v434 = v140;
            if (v158 == v159)
            {
              long long v160 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(unsigned char *, uint64_t))(v157 + 8))(v156, v135);
              long long v160 = "";
            }
            uint64_t v169 = v449;
            long long v170 = v154;
            uint64_t v171 = v154;
            unint64_t v172 = v443;
            v442(v449, v170, v443);
            long long v173 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)long long v173 = 0;
            os_signpost_id_t v174 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_25C27E000, v153, (os_signpost_type_t)v444, v174, "transform", v160, v173, 2u);
            MEMORY[0x261185880](v173, -1, -1);

            long long v175 = v436;
            v436((uint64_t)v171, v172);
            v175(v169, v172);
            swift_release();
            swift_release();
            outlined release of Graph(v433);
            int v166 = 0;
            uint64_t v168 = v431;
            uint64_t v167 = v432;
          }
          else
          {

            v436((uint64_t)v154, v443);
            swift_release();
            swift_release();
            outlined release of Graph(v433);
            int v166 = 0;
            uint64_t v168 = v431;
            uint64_t v167 = v432;
          }
          goto LABEL_85;
        }
        outlined release of Graph((uint64_t)v518);
        outlined init with take of NodePersonality(v476, &v501);
        unint64_t v500 = v476[1];
        unint64_t v499 = v476[2];
        outlined retain of Graph((uint64_t)v518);
        outlined retain of NodePersonality(&v501);
        outlined retain of [Input]((uint64_t)&v500);
        outlined retain of [Input]((uint64_t)&v499);
        Graph.geometryModifierNode()((uint64_t)v477);
        unint64_t v161 = v477[0];
        long long v162 = (unsigned char *)v477[1];
        long long v163 = (unsigned char *)v477[2];
        uint64_t v429 = (unsigned char *)v477[3];
        long long v164 = (unsigned char *)v477[4];
        int v165 = v478;
        outlined release of Graph((uint64_t)v518);
        outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined copy of ShaderGraphNode?);
        specialized Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)((uint64_t)v476, (uint64_t)v477);
        uint64_t v434 = 0;
        long long v176 = v164;
        unint64_t v385 = v161;
        unint64_t v426 = v162;
        uint64_t v424 = v163;
        int v384 = v165;
        uint64_t v177 = static DebugConfig.debugMode;
        if (!*(void *)(static DebugConfig.debugMode + 16))
        {
          long long v183 = v437;
          uint64_t v184 = v430;
          long long v185 = v176;
          goto LABEL_54;
        }
        uint64_t v427 = v164;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v178 = Hasher._finalize()();
        uint64_t v179 = -1 << *(unsigned char *)(v177 + 32);
        unint64_t v180 = v178 & ~v179;
        if (((*(void *)(v177 + 56 + ((v180 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v180) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          long long v183 = v437;
          uint64_t v184 = v430;
          long long v185 = v427;
          goto LABEL_54;
        }
        uint64_t v181 = ~v179;
        while (2)
        {
          switch(*(unsigned char *)(*(void *)(v177 + 48) + v180))
          {
            case 3:
              swift_bridgeObjectRelease();
              goto LABEL_52;
            default:
              char v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v182 & 1) == 0)
              {
                unint64_t v180 = (v180 + 1) & v181;
                if (((*(void *)(v177 + 56 + ((v180 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v180) & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  long long v183 = v437;
                  uint64_t v184 = v430;
                  goto LABEL_53;
                }
                continue;
              }
LABEL_52:
              swift_bridgeObjectRelease();
              v516[7] = v469[3];
              v516[8] = v470[0];
              v517[0] = v470[1];
              *(_OWORD *)((char *)v517 + 9) = *(_OWORD *)((char *)&v470[1] + 9);
              _OWORD v516[4] = v469[0];
              v516[5] = v469[1];
              v516[6] = v469[2];
              v516[0] = v467[0];
              v516[1] = v467[1];
              v516[2] = v467[2];
              v516[3] = v468;
              outlined retain of Graph((uint64_t)v516);
              createDotText(representing:)((uint64_t)v516);
              uint64_t v187 = v186;
              uint64_t v189 = v188;
              outlined release of Graph((uint64_t)v516);
              *(void *)&v457[0] = 0;
              *((void *)&v457[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              unint64_t v190 = v522;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v184 = v430;
              *(void *)&v457[0] = v430;
              *((void *)&v457[0] + 1) = v190;
              v191._char object = (void *)0x800000025C421F00;
              v191._uint64_t countAndFlagsBits = 0xD000000000000014;
              String.append(_:)(v191);
              specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v187, v189, *(uint64_t *)&v457[0], *((void **)&v457[0] + 1), 7630692, 0xE300000000000000);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v183 = v437;
LABEL_53:
              long long v185 = v427;
LABEL_54:
              specialized Graph.mapStringInputs(nodeDefStore:)((uint64_t)v183);
              long long v192 = v185;
              long long v193 = (void *)v444;
              specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)((uint64_t)v183, v444);
              uint64_t v427 = v192;
              v523.nodeDefs._rawValue = v183;
              v523.geomPropDefs._rawValue = v193;
              v523.implementations._rawValue = v438;
              Graph.resolvingNodegraphImplementations(nodeDefStore:)(v523);
              if (v194)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                outlined release of NodePersonality(&v501);
                outlined release of [Input]((uint64_t)&v500);
                outlined release of [Input]((uint64_t)&v499);
                outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                outlined release of NodePersonality(&v501);
                outlined release of [Input]((uint64_t)&v500);
                outlined release of [Input]((uint64_t)&v499);
                *(_OWORD *)&v458[64] = v470[0];
                *(_OWORD *)&v458[80] = v470[1];
                *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                *(_OWORD *)long long v458 = v469[0];
                *(_OWORD *)&v458[16] = v469[1];
                *(_OWORD *)&v458[32] = v469[2];
                *(_OWORD *)&v458[48] = v469[3];
                v457[0] = v467[0];
                v457[1] = v467[1];
                v457[2] = v467[2];
                v457[3] = v468;
                outlined release of Graph((uint64_t)v457);
                long long v195 = OSSignposter.logHandle.getter();
                long long v196 = v421;
                OSSignpostIntervalState.signpostID.getter();
                int v197 = static os_signpost_type_t.end.getter();
                if (OS_os_log.signpostsEnabled.getter())
                {
                  swift_retain();
                  long long v198 = v418;
                  checkForErrorAndConsumeState(state:)();
                  swift_release();
                  uint64_t v199 = v428;
                  uint64_t v200 = v439;
                  int v201 = (*(uint64_t (**)(unsigned char *, uint64_t))(v428 + 88))(v198, v439);
                  int v202 = *MEMORY[0x263F90238];
                  uint64_t v434 = v194;
                  LODWORD(v444) = v197;
                  if (v201 == v202)
                  {
                    long long v203 = "[Error] Interval already ended";
                  }
                  else
                  {
                    (*(void (**)(unsigned char *, uint64_t))(v199 + 8))(v198, v200);
                    long long v203 = "";
                  }
                  long long v210 = (void (*)(uint64_t, unsigned char *, unint64_t))v442;
                  uint64_t v211 = v449;
                  uint64_t v212 = v449;
                  long long v213 = v421;
                  goto LABEL_82;
                }
                goto LABEL_79;
              }
              uint64_t v204 = static DebugConfig.debugMode;
              if (!*(void *)(static DebugConfig.debugMode + 16)) {
                goto LABEL_68;
              }
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              Swift::Int v205 = Hasher._finalize()();
              uint64_t v206 = -1 << *(unsigned char *)(v204 + 32);
              unint64_t v207 = v205 & ~v206;
              if (((*(void *)(v204 + 56 + ((v207 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v207) & 1) == 0)
              {
LABEL_67:
                swift_bridgeObjectRelease();
                long long v183 = v437;
                uint64_t v184 = v430;
                goto LABEL_68;
              }
              uint64_t v208 = ~v206;
              while (2)
              {
                switch(*(unsigned char *)(*(void *)(v204 + 48) + v207))
                {
                  case 3:
                    swift_bridgeObjectRelease();
                    goto LABEL_81;
                  default:
                    char v209 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v209 & 1) == 0)
                    {
                      unint64_t v207 = (v207 + 1) & v208;
                      if (((*(void *)(v204 + 56 + ((v207 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v207) & 1) == 0) {
                        goto LABEL_67;
                      }
                      continue;
                    }
LABEL_81:
                    swift_bridgeObjectRelease();
                    v514[7] = v469[3];
                    v514[8] = v470[0];
                    v515[0] = v470[1];
                    *(_OWORD *)((char *)v515 + 9) = *(_OWORD *)((char *)&v470[1] + 9);
                    v514[4] = v469[0];
                    v514[5] = v469[1];
                    v514[6] = v469[2];
                    v514[0] = v467[0];
                    v514[1] = v467[1];
                    v514[2] = v467[2];
                    v514[3] = v468;
                    outlined retain of Graph((uint64_t)v514);
                    createDotText(representing:)((uint64_t)v514);
                    uint64_t v229 = v228;
                    uint64_t v231 = v230;
                    outlined release of Graph((uint64_t)v514);
                    *(void *)&v457[0] = 0;
                    *((void *)&v457[0] + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(29);
                    unint64_t v232 = v522;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    uint64_t v184 = v430;
                    *(void *)&v457[0] = v430;
                    *((void *)&v457[0] + 1) = v232;
                    v233._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
                    v233._char object = (void *)0x800000025C421EE0;
                    String.append(_:)(v233);
                    specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v229, v231, *(uint64_t *)&v457[0], *((void **)&v457[0] + 1), 7630692, 0xE300000000000000);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    long long v183 = v437;
LABEL_68:
                    specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)((uint64_t)v183, v444);
                    Graph.replaceMultiOutputNodes()();
                    if (v214)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v195 = OSSignposter.logHandle.getter();
                      long long v196 = v417;
                      OSSignpostIntervalState.signpostID.getter();
                      int v215 = static os_signpost_type_t.end.getter();
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        swift_retain();
                        long long v216 = v414;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        uint64_t v217 = v428;
                        uint64_t v218 = v439;
                        int v219 = (*(uint64_t (**)(unsigned char *, uint64_t))(v428 + 88))(v216, v439);
                        int v220 = *MEMORY[0x263F90238];
                        uint64_t v434 = v214;
                        LODWORD(v444) = v215;
                        if (v219 == v220)
                        {
                          long long v203 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v217 + 8))(v216, v218);
                          long long v203 = "";
                        }
                        long long v210 = (void (*)(uint64_t, unsigned char *, unint64_t))v442;
                        uint64_t v211 = v449;
                        uint64_t v212 = v449;
                        long long v213 = v417;
LABEL_82:
                        unint64_t v234 = v443;
                        v210(v212, v213, v443);
LABEL_83:
                        uint64_t v235 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)uint64_t v235 = 0;
                        os_signpost_id_t v236 = OSSignpostID.rawValue.getter();
                        _os_signpost_emit_with_name_impl(&dword_25C27E000, v195, (os_signpost_type_t)v444, v236, "transform", v203, v235, 2u);
                        MEMORY[0x261185880](v235, -1, -1);

                        uint64_t v237 = v436;
                        v436((uint64_t)v213, v234);
                        v237(v211, v234);
LABEL_84:
                        swift_release();
                        swift_release();
                        outlined release of Graph(v433);
                        int v166 = 0;
                        uint64_t v168 = v431;
                        uint64_t v167 = v432;
                        goto LABEL_85;
                      }
LABEL_79:

                      v436((uint64_t)v196, v443);
                      goto LABEL_84;
                    }
                    specialized Graph.removePassthroughNodes(nodeDefStore:)((uint64_t)v183);
                    Graph.removeEdgesToExplicitlyIgnoredInputs()();
                    if (v221)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v195 = OSSignposter.logHandle.getter();
                      long long v196 = v413;
                      OSSignpostIntervalState.signpostID.getter();
                      int v222 = static os_signpost_type_t.end.getter();
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        LODWORD(v444) = v222;
                        swift_retain();
                        long long v223 = v410;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        uint64_t v224 = v428;
                        uint64_t v225 = v439;
                        int v226 = (*(uint64_t (**)(unsigned char *, uint64_t))(v428 + 88))(v223, v439);
                        int v227 = *MEMORY[0x263F90238];
                        uint64_t v434 = v221;
                        if (v226 == v227)
                        {
                          long long v203 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v224 + 8))(v223, v225);
                          long long v203 = "";
                        }
                        uint64_t v211 = v449;
                        long long v213 = v413;
                        unint64_t v234 = v443;
                        v442(v449, v413, v443);
                        goto LABEL_83;
                      }
                      goto LABEL_79;
                    }
                    Graph.resolveMaterialXEnums()();
                    if (v239)
                    {
                      uint64_t v434 = v239;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v240 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v241 = static os_signpost_type_t.end.getter();
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        swift_retain();
                        char v242 = v409;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v242, v439) == *MEMORY[0x263F90238])
                        {
                          uint64_t v243 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v409, v439);
                          uint64_t v243 = "";
                        }
                        uint64_t v245 = v449;
                        uint64_t v246 = v411;
                        unint64_t v247 = v443;
                        v442(v449, v411, v443);
                        uint64_t v248 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)uint64_t v248 = 0;
                        os_signpost_id_t v249 = OSSignpostID.rawValue.getter();
                        _os_signpost_emit_with_name_impl(&dword_25C27E000, v240, v241, v249, "transform", v243, v248, 2u);
                        MEMORY[0x261185880](v248, -1, -1);

                        uint64_t v250 = v436;
                        v436((uint64_t)v246, v247);
                        v250(v245, v443);
                      }
                      else
                      {

                        v436((uint64_t)v411, v443);
                      }
                      swift_release();
LABEL_114:
                      swift_release();
                      outlined release of Graph(v433);
                      int v166 = 0;
                      goto LABEL_47;
                    }
                    uint64_t v244 = v184;
                    specialized Graph.resolveSwizzleNodes(nodeDefStore:)();
                    uint64_t v434 = 0;
                    Graph.resolveEnvironmentRadianceNode()();
                    uint64_t v434 = v251;
                    if (v251)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      uint64_t v252 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v253 = static os_signpost_type_t.end.getter();
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        swift_retain();
                        uint64_t v254 = v404;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v254, v439) == *MEMORY[0x263F90238])
                        {
                          char v255 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v404, v439);
                          char v255 = "";
                        }
                        uint64_t v262 = v406;
                        unint64_t v263 = v443;
                        v442(v449, v406, v443);
                        char v264 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)char v264 = 0;
                        os_signpost_id_t v265 = OSSignpostID.rawValue.getter();
                        _os_signpost_emit_with_name_impl(&dword_25C27E000, v252, v253, v265, "transform", v255, v264, 2u);
                        MEMORY[0x261185880](v264, -1, -1);

                        v436((uint64_t)v262, v263);
                      }
                      else
                      {

                        uint64_t v449 = (uint64_t)v406;
                      }
                      v436(v449, v443);
                      swift_release();
                      goto LABEL_114;
                    }
                    uint64_t v256 = static DebugConfig.debugMode;
                    if (!*(void *)(static DebugConfig.debugMode + 16)) {
                      goto LABEL_118;
                    }
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v257 = Hasher._finalize()();
                    uint64_t v258 = -1 << *(unsigned char *)(v256 + 32);
                    unint64_t v259 = v257 & ~v258;
                    if (((*(void *)(v256 + 56 + ((v259 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v259) & 1) == 0) {
                      goto LABEL_109;
                    }
                    uint64_t v260 = ~v258;
                    break;
                }
                break;
              }
              while (2)
              {
                switch(*(unsigned char *)(*(void *)(v256 + 48) + v259))
                {
                  case 3:
                    swift_bridgeObjectRelease();
                    goto LABEL_116;
                  default:
                    char v261 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v261 & 1) == 0)
                    {
                      unint64_t v259 = (v259 + 1) & v260;
                      if (((*(void *)(v256 + 56 + ((v259 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v259) & 1) == 0) {
                        goto LABEL_109;
                      }
                      continue;
                    }
LABEL_116:
                    swift_bridgeObjectRelease();
                    v512[7] = v469[3];
                    v512[8] = v470[0];
                    v513[0] = v470[1];
                    *(_OWORD *)((char *)v513 + 9) = *(_OWORD *)((char *)&v470[1] + 9);
                    v512[4] = v469[0];
                    v512[5] = v469[1];
                    v512[6] = v469[2];
                    v512[0] = v467[0];
                    v512[1] = v467[1];
                    _OWORD v512[2] = v467[2];
                    v512[3] = v468;
                    outlined retain of Graph((uint64_t)v512);
                    unint64_t v266 = v434;
                    createDotText(representing:)((uint64_t)v512);
                    uint64_t v434 = v266;
                    if (!v266)
                    {
                      uint64_t v294 = v267;
                      uint64_t v295 = v268;
                      outlined release of Graph((uint64_t)v512);
                      *(void *)&v457[0] = 0;
                      *((void *)&v457[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(27);
                      unint64_t v296 = v522;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      *(void *)&v457[0] = v184;
                      *((void *)&v457[0] + 1) = v296;
                      v297._uint64_t countAndFlagsBits = 0xD000000000000019;
                      v297._char object = (void *)0x800000025C421EC0;
                      String.append(_:)(v297);
                      specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v294, v295, *(uint64_t *)&v457[0], *((void **)&v457[0] + 1), 7630692, 0xE300000000000000);
                      swift_bridgeObjectRelease();
LABEL_109:
                      swift_bridgeObjectRelease();
                      goto LABEL_118;
                    }
                    outlined release of Graph((uint64_t)v512);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
                    uint64_t v269 = swift_allocObject();
                    *(_OWORD *)(v269 + 16) = xmmword_25C418EE0;
                    long long v270 = v434;
                    swift_getErrorValue();
                    uint64_t v271 = v450;
                    uint64_t v272 = v451;
                    *(void *)(v269 + 56) = v451;
                    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v269 + 32));
                    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v272 - 8) + 16))(boxed_opaque_existential_0, v271, v272);
                    print(_:separator:terminator:)();
                    swift_bridgeObjectRelease();

                    uint64_t v434 = 0;
LABEL_118:
                    uint64_t v274 = one-time initialization token for surface_parameters_private;
                    swift_bridgeObjectRetain();
                    swift_retain();
                    if (v274 != -1) {
                      swift_once();
                    }
                    long long v275 = v434;
                    specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)((uint64_t)v476, v445, v435);
                    uint64_t v434 = v275;
                    if (v275)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v276 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        swift_retain();
                        long long v278 = v403;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v278, v439) == *MEMORY[0x263F90238])
                        {
                          long long v279 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v403, v439);
                          long long v279 = "";
                        }
                        uint64_t v283 = v449;
                        uint64_t v284 = v405;
                        goto LABEL_134;
                      }

                      uint64_t v449 = (uint64_t)v405;
                      goto LABEL_135;
                    }
                    outlined init with take of MetalFunctionNode?((uint64_t)v477, (uint64_t)&v483, &demangling cache variable for type metadata for ShaderGraphNode?);
                    if (*((void *)&v483 + 1))
                    {
                      long long v485 = v483;
                      v486[0] = v484[0];
                      *(_OWORD *)((char *)v486 + 9) = *(_OWORD *)((char *)v484 + 9);
                      outlined copy of NodePersonality(v385);
                      uint64_t v280 = one-time initialization token for geometry_parameters_private;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v280 != -1) {
                        swift_once();
                      }
                      uint64_t v281 = v434;
                      specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)((uint64_t)&v485, v445, v435);
                      uint64_t v434 = v281;
                      if (v281)
                      {
                        outlined init with take of NodePersonality(&v485, &v490);
                        outlined release of NodePersonality(&v490);
                        uint64_t v491 = *((void *)&v485 + 1);
                        outlined release of [Input]((uint64_t)&v491);
                        uint64_t v492 = *(void *)&v486[0];
                        outlined release of [Input]((uint64_t)&v492);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                        outlined release of NodePersonality(&v501);
                        outlined release of [Input]((uint64_t)&v500);
                        outlined release of [Input]((uint64_t)&v499);
                        outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                        outlined release of NodePersonality(&v501);
                        outlined release of [Input]((uint64_t)&v500);
                        outlined release of [Input]((uint64_t)&v499);
                        *(_OWORD *)&v458[64] = v470[0];
                        *(_OWORD *)&v458[80] = v470[1];
                        *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                        *(_OWORD *)long long v458 = v469[0];
                        *(_OWORD *)&v458[16] = v469[1];
                        *(_OWORD *)&v458[32] = v469[2];
                        *(_OWORD *)&v458[48] = v469[3];
                        v457[0] = v467[0];
                        v457[1] = v467[1];
                        v457[2] = v467[2];
                        v457[3] = v468;
                        outlined release of Graph((uint64_t)v457);
                        long long v276 = OSSignposter.logHandle.getter();
                        OSSignpostIntervalState.signpostID.getter();
                        os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                        if (OS_os_log.signpostsEnabled.getter())
                        {
                          swift_retain();
                          long long v282 = v399;
                          checkForErrorAndConsumeState(state:)();
                          swift_release();
                          if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v282, v439) == *MEMORY[0x263F90238])
                          {
                            long long v279 = "[Error] Interval already ended";
                          }
                          else
                          {
                            (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v399, v439);
                            long long v279 = "";
                          }
                          uint64_t v283 = v449;
                          uint64_t v284 = v402;
                          goto LABEL_134;
                        }

                        uint64_t v449 = (uint64_t)v402;
                        goto LABEL_135;
                      }
                      outlined init with take of NodePersonality(&v485, &v487);
                      outlined release of NodePersonality(&v487);
                      uint64_t v488 = *((void *)&v485 + 1);
                      outlined release of [Input]((uint64_t)&v488);
                      uint64_t v489 = *(void *)&v486[0];
                      outlined release of [Input]((uint64_t)&v489);
                    }
                    uint64_t v288 = static DebugConfig.debugMode;
                    if (!*(void *)(static DebugConfig.debugMode + 16)) {
                      goto LABEL_151;
                    }
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v289 = Hasher._finalize()();
                    uint64_t v290 = -1 << *(unsigned char *)(v288 + 32);
                    unint64_t v291 = v289 & ~v290;
                    if (((*(void *)(v288 + 56 + ((v291 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v291) & 1) == 0) {
                      goto LABEL_143;
                    }
                    uint64_t v292 = ~v290;
                    break;
                }
                break;
              }
              while (2)
              {
                switch(*(unsigned char *)(*(void *)(v288 + 48) + v291))
                {
                  case 3:
                    swift_bridgeObjectRelease();
                    goto LABEL_149;
                  default:
                    char v293 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v293 & 1) == 0)
                    {
                      unint64_t v291 = (v291 + 1) & v292;
                      if (((*(void *)(v288 + 56 + ((v291 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v291) & 1) == 0) {
                        goto LABEL_143;
                      }
                      continue;
                    }
LABEL_149:
                    swift_bridgeObjectRelease();
                    v510[7] = v469[3];
                    v510[8] = v470[0];
                    v511[0] = v470[1];
                    *(_OWORD *)((char *)v511 + 9) = *(_OWORD *)((char *)&v470[1] + 9);
                    v510[4] = v469[0];
                    v510[5] = v469[1];
                    v510[6] = v469[2];
                    v510[0] = v467[0];
                    v510[1] = v467[1];
                    v510[2] = v467[2];
                    v510[3] = v468;
                    outlined retain of Graph((uint64_t)v510);
                    char v298 = v434;
                    createDotText(representing:)((uint64_t)v510);
                    uint64_t v434 = v298;
                    if (!v298)
                    {
                      uint64_t v318 = v299;
                      uint64_t v319 = v300;
                      outlined release of Graph((uint64_t)v510);
                      *(void *)&v457[0] = 0;
                      *((void *)&v457[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(22);
                      unint64_t v320 = v522;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      *(void *)&v457[0] = v184;
                      *((void *)&v457[0] + 1) = v320;
                      v321._char object = (void *)0x800000025C421EA0;
                      v321._uint64_t countAndFlagsBits = 0xD000000000000014;
                      String.append(_:)(v321);
                      specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v318, v319, *(uint64_t *)&v457[0], *((void **)&v457[0] + 1), 7630692, 0xE300000000000000);
                      swift_bridgeObjectRelease();
LABEL_143:
                      swift_bridgeObjectRelease();
                      goto LABEL_151;
                    }
                    outlined release of Graph((uint64_t)v510);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
                    uint64_t v301 = swift_allocObject();
                    *(_OWORD *)(v301 + 16) = xmmword_25C418EE0;
                    long long v302 = v434;
                    swift_getErrorValue();
                    uint64_t v303 = v452;
                    uint64_t v304 = v453;
                    *(void *)(v301 + 56) = v453;
                    long long v305 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v301 + 32));
                    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v304 - 8) + 16))(v305, v303, v304);
                    print(_:separator:terminator:)();
                    swift_bridgeObjectRelease();

                    uint64_t v434 = 0;
LABEL_151:
                    uint64_t v306 = v434;
                    Graph.replaceRootNodeWithInternal(root:customUniformsType:)(v476, v435, (uint64_t)v457);
                    uint64_t v434 = v306;
                    if (v306)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined release of NodePersonality(&v501);
                      outlined release of [Input]((uint64_t)&v500);
                      outlined release of [Input]((uint64_t)&v499);
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v276 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        swift_retain();
                        long long v307 = v400;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v307, v439) == *MEMORY[0x263F90238])
                        {
                          long long v279 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v400, v439);
                          long long v279 = "";
                        }
                        uint64_t v283 = v449;
                        uint64_t v284 = v401;
                        goto LABEL_134;
                      }

                      uint64_t v449 = (uint64_t)v401;
LABEL_135:
                      v436(v449, v443);
                      swift_release();
                      swift_release();
                      outlined release of Graph(v433);
                      int v166 = 1;
LABEL_47:
                      uint64_t v168 = v431;
                      uint64_t v167 = v432;
LABEL_85:
                      (*(void (**)(unsigned char *, uint64_t))(v168 + 8))(v447, v167);
                      swift_bridgeObjectRelease();
                      uint64_t result = (void *)swift_bridgeObjectRelease();
                      if (v166)
                      {
                        swift_release();
                        return (void *)swift_bridgeObjectRelease();
                      }
                      return result;
                    }
                    long long v308 = v457[0];
                    long long v309 = v457[1];
                    long long v310 = *(unsigned char **)&v457[2];
                    int v311 = BYTE8(v457[2]);
                    uint64_t v425 = (unsigned char *)*((void *)&v457[3] + 1);
                    unint64_t v312 = *(void *)&v457[3];
                    uint64_t v423 = *(unsigned char **)v458;
                    char v415 = *(unsigned char **)&v458[16];
                    uint64_t v416 = *(unsigned char **)&v458[8];
                    LODWORD(v414) = v458[24];
                    outlined release of NodePersonality(&v501);
                    outlined release of [Input]((uint64_t)&v500);
                    outlined release of [Input]((uint64_t)&v499);
                    outlined release of NodePersonality(&v501);
                    outlined release of [Input]((uint64_t)&v500);
                    outlined release of [Input]((uint64_t)&v499);
                    long long v506 = v308;
                    v507[0] = v309;
                    uint64_t v412 = v310;
                    uint64_t v413 = (unsigned char *)*((void *)&v309 + 1);
                    *(void *)&v507[1] = v310;
                    LODWORD(v411) = v311;
                    BYTE8(v507[1]) = v311;
                    outlined init with take of MetalFunctionNode?((uint64_t)v477, (uint64_t)&v479, &demangling cache variable for type metadata for ShaderGraphNode?);
                    if (*((void *)&v479 + 1))
                    {
                      long long v481 = v479;
                      v482[0] = v480[0];
                      *(_OWORD *)((char *)v482 + 9) = *(_OWORD *)((char *)v480 + 9);
                      outlined copy of NodePersonality(v308);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      outlined copy of NodePersonality(v312);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      uint64_t v313 = v434;
                      Graph.replaceRootNodeWithInternal(root:customUniformsType:)((unint64_t *)&v481, v435, (uint64_t)v457);
                      uint64_t v434 = v313;
                      if (v313)
                      {
                        outlined init with take of NodePersonality(&v481, &v496);
                        outlined release of NodePersonality(&v496);
                        uint64_t v497 = *((void *)&v481 + 1);
                        outlined release of [Input]((uint64_t)&v497);
                        uint64_t v498 = *(void *)&v482[0];
                        outlined release of [Input]((uint64_t)&v498);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of NodePersonality(v312);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of NodePersonality(v308);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of NodePersonality(v312);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                        outlined consume of NodePersonality(v308);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        *(_OWORD *)&v458[64] = v470[0];
                        *(_OWORD *)&v458[80] = v470[1];
                        *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                        *(_OWORD *)long long v458 = v469[0];
                        *(_OWORD *)&v458[16] = v469[1];
                        *(_OWORD *)&v458[32] = v469[2];
                        *(_OWORD *)&v458[48] = v469[3];
                        v457[0] = v467[0];
                        v457[1] = v467[1];
                        v457[2] = v467[2];
                        v457[3] = v468;
                        outlined release of Graph((uint64_t)v457);
                        long long v276 = OSSignposter.logHandle.getter();
                        OSSignpostIntervalState.signpostID.getter();
                        os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                        if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
                        {

                          uint64_t v449 = (uint64_t)v397;
                          goto LABEL_135;
                        }
                        swift_retain();
                        uint64_t v314 = v395;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v314, v439) == *MEMORY[0x263F90238])
                        {
                          long long v279 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v395, v439);
                          long long v279 = "";
                        }
                        uint64_t v283 = v449;
                        uint64_t v284 = v397;
                        goto LABEL_134;
                      }
                      unint64_t v385 = *(void *)&v457[0];
                      uint64_t v429 = (unsigned char *)*((void *)&v457[1] + 1);
                      uint64_t v424 = *(unsigned char **)&v457[1];
                      unint64_t v426 = (unsigned char *)*((void *)&v457[0] + 1);
                      uint64_t v427 = *(unsigned char **)&v457[2];
                      int v384 = BYTE8(v457[2]);
                      uint64_t v422 = (unsigned char *)*((void *)&v457[3] + 1);
                      uint64_t v420 = *(unsigned char **)&v457[3];
                      char v421 = *(unsigned char **)v458;
                      uint64_t v417 = *(unsigned char **)&v458[8];
                      uint64_t v418 = *(unsigned char **)&v458[16];
                      LODWORD(v419) = v458[24];
                      outlined retain of ShaderGraphNode?((uint64_t)v477, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
                      outlined init with take of NodePersonality(&v481, &v493);
                      outlined release of NodePersonality(&v493);
                      uint64_t v494 = *((void *)&v481 + 1);
                      outlined release of [Input]((uint64_t)&v494);
                      uint64_t v495 = *(void *)&v482[0];
                      outlined release of [Input]((uint64_t)&v495);
                    }
                    else
                    {
                      outlined copy of NodePersonality(v308);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      outlined copy of NodePersonality(v312);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      uint64_t v420 = 0;
                      char v421 = 0;
                      uint64_t v422 = 0;
                      uint64_t v417 = 0;
                      uint64_t v418 = 0;
                      LODWORD(v419) = 0;
                    }
                    uint64_t v315 = v434;
                    specialized Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(v437, v444);
                    uint64_t v434 = v315;
                    if (v315)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of NodePersonality(v312);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                      outlined consume of NodePersonality(v308);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                      outlined consume of NodePersonality(v312);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of NodePersonality(v308);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v276 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
                      {

                        uint64_t v449 = (uint64_t)v398;
                        goto LABEL_135;
                      }
                      swift_retain();
                      long long v316 = v396;
                      checkForErrorAndConsumeState(state:)();
                      swift_release();
                      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v316, v439) == *MEMORY[0x263F90238])
                      {
                        long long v279 = "[Error] Interval already ended";
                      }
                      else
                      {
                        (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v396, v439);
                        long long v279 = "";
                      }
                      uint64_t v283 = v449;
                      uint64_t v284 = v398;
                      goto LABEL_134;
                    }
                    specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)&v506, 0);
                    uint64_t v434 = 0;
                    if (v426)
                    {
                      v508[0] = v385;
                      v508[1] = v426;
                      v508[2] = v424;
                      v508[3] = v429;
                      v508[4] = v427;
                      char v509 = v384 & 1;
                      outlined copy of NodePersonality(v385);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      long long v322 = v434;
                      specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)v508, 1);
                      uint64_t v434 = v322;
                      if (v322)
                      {
                        outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of NodePersonality(v312);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                        outlined consume of NodePersonality(v308);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                        outlined consume of NodePersonality(v312);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of NodePersonality(v308);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        *(_OWORD *)&v458[64] = v470[0];
                        *(_OWORD *)&v458[80] = v470[1];
                        *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                        *(_OWORD *)long long v458 = v469[0];
                        *(_OWORD *)&v458[16] = v469[1];
                        *(_OWORD *)&v458[32] = v469[2];
                        *(_OWORD *)&v458[48] = v469[3];
                        v457[0] = v467[0];
                        v457[1] = v467[1];
                        v457[2] = v467[2];
                        v457[3] = v468;
                        outlined release of Graph((uint64_t)v457);
                        long long v276 = OSSignposter.logHandle.getter();
                        OSSignpostIntervalState.signpostID.getter();
                        os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                        if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
                        {

                          uint64_t v449 = (uint64_t)v394;
                          goto LABEL_135;
                        }
                        swift_retain();
                        long long v317 = v386;
                        checkForErrorAndConsumeState(state:)();
                        swift_release();
                        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v317, v439) == *MEMORY[0x263F90238])
                        {
                          long long v279 = "[Error] Interval already ended";
                        }
                        else
                        {
                          (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v386, v439);
                          long long v279 = "";
                        }
                        uint64_t v283 = v449;
                        uint64_t v284 = v394;
                        goto LABEL_134;
                      }
                      outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                    }
                    Graph.resolveMaterialXEnums()();
                    uint64_t v434 = v323;
                    if (v323)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of NodePersonality(v312);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                      outlined consume of NodePersonality(v308);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                      outlined consume of NodePersonality(v312);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of NodePersonality(v308);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v276 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
                      {

                        uint64_t v449 = (uint64_t)v387;
                        goto LABEL_135;
                      }
                      swift_retain();
                      long long v324 = v389;
                      checkForErrorAndConsumeState(state:)();
                      swift_release();
                      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v324, v439) == *MEMORY[0x263F90238])
                      {
                        long long v279 = "[Error] Interval already ended";
                      }
                      else
                      {
                        (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v389, v439);
                        long long v279 = "";
                      }
                      uint64_t v283 = v449;
                      uint64_t v284 = v387;
                      goto LABEL_134;
                    }
                    Graph.rewireUniformInputs(customUniformsType:)(v435);
                    uint64_t v434 = 0;
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode?>);
                    uint64_t v325 = swift_allocObject();
                    *(_OWORD *)(v325 + 16) = xmmword_25C418EF0;
                    uint64_t v326 = v425;
                    *(void *)(v325 + 32) = v312;
                    *(void *)(v325 + 40) = v326;
                    uint64_t v327 = v416;
                    *(void *)(v325 + 48) = v423;
                    *(void *)(v325 + 56) = v327;
                    *(void *)(v325 + 64) = v415;
                    *(unsigned char *)(v325 + 72) = (_BYTE)v414;
                    long long v328 = v422;
                    *(void *)(v325 + 80) = v420;
                    *(void *)(v325 + 88) = v328;
                    long long v329 = v417;
                    *(void *)(v325 + 96) = v421;
                    *(void *)(v325 + 104) = v329;
                    *(void *)(v325 + 112) = v418;
                    *(unsigned char *)(v325 + 120) = (_BYTE)v419;
                    outlined copy of NodePersonality(v312);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    outlined copy of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                    long long v330 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
                    uint64_t v331 = v330;
                    unint64_t v333 = v330[2];
                    unint64_t v332 = v330[3];
                    unint64_t v410 = (unsigned char *)(v333 + 1);
                    if (v333 >= v332 >> 1) {
                      goto LABEL_242;
                    }
LABEL_196:
                    v331[2] = v410;
                    long long v334 = &v331[6 * v333];
                    uint64_t v335 = v425;
                    v334[4] = v312;
                    v334[5] = v335;
                    uint64_t v336 = v416;
                    v334[6] = v423;
                    v334[7] = v336;
                    v334[8] = v415;
                    *((unsigned char *)v334 + 72) = (_BYTE)v414;
                    if (v422)
                    {
                      outlined copy of NodePersonality((unint64_t)v420);
                      unint64_t v333 = v331[2];
                      unint64_t v337 = v331[3];
                      uint64_t v416 = (unsigned char *)(v333 + 1);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v333 >= v337 >> 1) {
                        uint64_t v331 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v337 > 1), (int64_t)v416, 1, v331);
                      }
                      BOOL v338 = v419 != 0;
                      v331[2] = v416;
                      long long v339 = &v331[6 * v333];
                      uint64_t v340 = v422;
                      v339[4] = v420;
                      v339[5] = v340;
                      char v341 = v417;
                      v339[6] = v421;
                      v339[7] = v341;
                      v339[8] = v418;
                      *((unsigned char *)v339 + 72) = v338;
                    }
                    swift_release();
                    Graph.removeUnconnectedNodesAndEdges(roots:)((Swift::OpaquePointer)v331);
                    swift_bridgeObjectRelease();
                    uint64_t v342 = v434;
                    Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)((uint64_t)&v506, (uint64_t)v437, v444, (uint64_t)v438, 0);
                    uint64_t v434 = v342;
                    if (v342)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                      outlined consume of NodePersonality(v308);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                      outlined consume of NodePersonality(v312);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of NodePersonality(v308);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      *(_OWORD *)&v458[64] = v470[0];
                      *(_OWORD *)&v458[80] = v470[1];
                      *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                      *(_OWORD *)long long v458 = v469[0];
                      *(_OWORD *)&v458[16] = v469[1];
                      *(_OWORD *)&v458[32] = v469[2];
                      *(_OWORD *)&v458[48] = v469[3];
                      v457[0] = v467[0];
                      v457[1] = v467[1];
                      v457[2] = v467[2];
                      v457[3] = v468;
                      outlined release of Graph((uint64_t)v457);
                      long long v276 = OSSignposter.logHandle.getter();
                      OSSignpostIntervalState.signpostID.getter();
                      os_signpost_type_t v277 = static os_signpost_type_t.end.getter();
                      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
                      {

                        uint64_t v449 = (uint64_t)v391;
                        goto LABEL_135;
                      }
                      swift_retain();
                      long long v343 = v392;
                      checkForErrorAndConsumeState(state:)();
                      swift_release();
                      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v428 + 88))(v343, v439) == *MEMORY[0x263F90238])
                      {
                        long long v279 = "[Error] Interval already ended";
                      }
                      else
                      {
                        (*(void (**)(unsigned char *, uint64_t))(v428 + 8))(v392, v439);
                        long long v279 = "";
                      }
                      uint64_t v283 = v449;
                      uint64_t v284 = v391;
LABEL_134:
                      unint64_t v285 = v443;
                      v442(v283, v284, v443);
                      uint64_t v286 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)uint64_t v286 = 0;
                      os_signpost_id_t v287 = OSSignpostID.rawValue.getter();
                      _os_signpost_emit_with_name_impl(&dword_25C27E000, v276, v277, v287, "transform", v279, v286, 2u);
                      MEMORY[0x261185880](v286, -1, -1);

                      v436((uint64_t)v284, v285);
                      goto LABEL_135;
                    }
                    if (v426)
                    {
                      v504[0] = v385;
                      unint64_t v333 = (unint64_t)v426;
                      v504[1] = v426;
                      v504[2] = v424;
                      v504[3] = v429;
                      v504[4] = v427;
                      char v505 = v384 & 1;
                      outlined copy of NodePersonality(v385);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      long long v344 = v434;
                      Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)((uint64_t)v504, (uint64_t)v437, v444, (uint64_t)v438, 1);
                      uint64_t v434 = v344;
                      if (v344)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        unint64_t v345 = v385;
                        outlined consume of NodePersonality(v385);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v346 = v426;
                        swift_bridgeObjectRelease();
                        outlined consume of ShaderGraphNode?(v345, (uint64_t)v346);
                        outlined consume of NodePersonality(v308);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                        outlined consume of NodePersonality(v312);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of NodePersonality(v308);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        *(_OWORD *)&v458[64] = v470[0];
                        *(_OWORD *)&v458[80] = v470[1];
                        *(_OWORD *)&v458[89] = *(_OWORD *)((char *)&v470[1] + 9);
                        *(_OWORD *)long long v458 = v469[0];
                        *(_OWORD *)&v458[16] = v469[1];
                        *(_OWORD *)&v458[32] = v469[2];
                        *(_OWORD *)&v458[48] = v469[3];
                        v457[0] = v467[0];
                        v457[1] = v467[1];
                        v457[2] = v467[2];
                        v457[3] = v468;
LABEL_236:
                        outlined release of Graph((uint64_t)v457);
                        $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();
                        swift_release();
                        swift_release();
                        outlined release of Graph(v433);
                        int v166 = 1;
                        goto LABEL_47;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of NodePersonality(v385);
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    uint64_t v442 = *(void (**)(void, void, void))&v469[0];
                    uint64_t v449 = specialized Array._getCount()(*(void *)&v469[0]);
                    if (v449 < 0)
                    {
                      __break(1u);
LABEL_244:
                      __break(1u);
                      JUMPOUT(0x25C2A4200);
                    }
                    if (*((void *)v442 + 2) < (unint64_t)v449) {
                      goto LABEL_244;
                    }
                    if (!v449) {
                      goto LABEL_227;
                    }
                    uint64_t v448 = (uint64_t)v442 + 32;
                    swift_bridgeObjectRetain_n();
                    uint64_t v347 = 0;
                    do
                    {
                      uint64_t v348 = v448 + 48 * v347;
                      unint64_t v332 = *(void *)(v348 + 24);
                      if (v332 == -7)
                      {
                        if (__OFADD__(v347++, 1))
                        {
                          __break(1u);
LABEL_242:
                          uint64_t v331 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v332 > 1), (int64_t)v410, 1, v331);
                          goto LABEL_196;
                        }
                      }
                      else
                      {
                        unint64_t v350 = *(void *)v348;
                        uint64_t v351 = *(void *)(v348 + 8);
                        unint64_t v333 = *(void *)(v348 + 16);
                        char v352 = *(unsigned char *)(v348 + 40);
                        uint64_t v353 = *(void *)(v348 + 32);
                        *(void *)long long v456 = v350;
                        *(void *)&v456[8] = v351;
                        *(void *)&v456[16] = v333;
                        *(void *)&v456[24] = v332;
                        *(void *)&v456[32] = v353;
                        v456[40] = v352;
                        unint64_t v443 = v350;
                        outlined copy of NodePersonality(v350);
                        uint64_t v444 = v351;
                        swift_bridgeObjectRetain();
                        uint64_t v331 = (void *)v333;
                        swift_bridgeObjectRetain();
                        long long v354 = v434;
                        closure #2 in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)((uint64_t *)v456);
                        uint64_t v434 = v354;
                        if (v354)
                        {
                          outlined consume of NodePersonality(v443);
                          long long v360 = v442;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          outlined consume of NodePersonality(v312);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          outlined consume of NodePersonality(v308);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                          outlined consume of ShaderGraphNode?(v385, (uint64_t)v426);
                          outlined consume of NodePersonality(v308);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          *(_OWORD *)((char *)v457 + 8) = *(_OWORD *)((char *)v467 + 8);
                          *(_OWORD *)((char *)&v457[1] + 8) = *(_OWORD *)((char *)&v467[1] + 8);
                          *(void *)&v457[0] = *(void *)&v467[0];
                          *((void *)&v457[2] + 1) = *((void *)&v467[2] + 1);
                          v457[3] = v468;
                          *(void *)long long v458 = v360;
                          *(_OWORD *)&v458[8] = *(_OWORD *)((char *)v469 + 8);
                          *(_OWORD *)&v458[24] = *(_OWORD *)((char *)&v469[1] + 8);
                          *(_OWORD *)&v458[40] = *(_OWORD *)((char *)&v469[2] + 8);
                          v458[56] = BYTE8(v469[3]);
                          *(void *)&v458[64] = *(void *)&v470[0];
                          *(_OWORD *)&v458[72] = *(_OWORD *)((char *)v470 + 8);
                          *(_OWORD *)&v458[88] = *(_OWORD *)((char *)&v470[1] + 8);
                          v458[104] = BYTE8(v470[2]);
                          goto LABEL_236;
                        }
                        ++v347;
                        outlined consume of NodePersonality(v443);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      if (v347 >= v449) {
                        goto LABEL_226;
                      }
                    }
                    while ((v347 & 0x8000000000000000) == 0 && v347 < v449);
                    __break(1u);
LABEL_226:
                    swift_bridgeObjectRelease_n();
LABEL_227:
                    *(_OWORD *)((char *)v463 + 8) = *(_OWORD *)((char *)v467 + 8);
                    *(_OWORD *)((char *)&v463[1] + 8) = *(_OWORD *)((char *)&v467[1] + 8);
                    *(void *)&v463[0] = *(void *)&v467[0];
                    *((void *)&v463[2] + 1) = *((void *)&v467[2] + 1);
                    long long v464 = v468;
                    *(void *)&v465[0] = v442;
                    *(_OWORD *)((char *)v465 + 8) = *(_OWORD *)((char *)v469 + 8);
                    *(_OWORD *)((char *)&v465[1] + 8) = *(_OWORD *)((char *)&v469[1] + 8);
                    *(_OWORD *)((char *)&v465[2] + 8) = *(_OWORD *)((char *)&v469[2] + 8);
                    BYTE8(v465[3]) = BYTE8(v469[3]);
                    *(void *)&v466[0] = *(void *)&v470[0];
                    *(_OWORD *)((char *)v466 + 8) = *(_OWORD *)((char *)v470 + 8);
                    *(_OWORD *)((char *)&v466[1] + 8) = *(_OWORD *)((char *)&v470[1] + 8);
                    BYTE8(v466[2]) = BYTE8(v470[2]);
                    v502[1] = v463[1];
                    v502[2] = v463[2];
                    v502[0] = v463[0];
                    v502[7] = v465[3];
                    v502[8] = v466[0];
                    v503[0] = v466[1];
                    *(_OWORD *)((char *)v503 + 9) = *(_OWORD *)((char *)&v466[1] + 9);
                    v502[5] = v465[1];
                    v502[6] = v465[2];
                    v502[3] = v468;
                    v502[4] = v465[0];
                    *(_OWORD *)((char *)&v472[7] + 7) = v465[3];
                    *(_OWORD *)((char *)&v472[8] + 7) = v466[0];
                    *(_OWORD *)((char *)&v472[9] + 7) = v466[1];
                    v472[10] = *(_OWORD *)((char *)&v466[1] + 9);
                    *(_OWORD *)((char *)&v472[3] + 7) = v468;
                    *(_OWORD *)((char *)&v472[4] + 7) = v465[0];
                    *(_OWORD *)((char *)&v472[5] + 7) = v465[1];
                    *(_OWORD *)((char *)&v472[6] + 7) = v465[2];
                    *(_OWORD *)((char *)v472 + 7) = v463[0];
                    *(_OWORD *)((char *)&v472[1] + 7) = v463[1];
                    *(_OWORD *)((char *)&v472[2] + 7) = v463[2];
                    long long v474 = v506;
                    v475[0] = v507[0];
                    *(_OWORD *)((char *)v475 + 9) = *(_OWORD *)((char *)v507 + 9);
                    uint64_t v449 = static DebugConfig.debugMode;
                    if (!*(void *)(static DebugConfig.debugMode + 16))
                    {
                      outlined retain of Graph((uint64_t)v463);
                      outlined copy of NodePersonality(v308);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      outlined retain of Graph((uint64_t)v463);
                      outlined copy of ShaderGraphNode?(v385, (uint64_t)v426);
                      goto LABEL_240;
                    }
                    uint64_t v355 = v449;
                    Hasher.init(_seed:)();
                    outlined retain of Graph((uint64_t)v463);
                    outlined copy of NodePersonality(v308);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    outlined retain of Graph((uint64_t)v463);
                    outlined copy of ShaderGraphNode?(v385, (uint64_t)v426);
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v356 = Hasher._finalize()();
                    uint64_t v357 = -1 << *(unsigned char *)(v355 + 32);
                    unint64_t v358 = v356 & ~v357;
                    uint64_t v448 = v355 + 56;
                    if (((*(void *)(v355 + 56 + ((v358 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v358) & 1) == 0) {
                      goto LABEL_233;
                    }
                    uint64_t v444 = ~v357;
                    break;
                }
                break;
              }
              while (2)
              {
                switch(*(unsigned char *)(*(void *)(v449 + 48) + v358))
                {
                  case 3:
                    swift_bridgeObjectRelease();
                    uint64_t v449 = 0xE300000000000000;
                    goto LABEL_238;
                  default:
                    char v359 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v359 & 1) == 0)
                    {
                      unint64_t v358 = (v358 + 1) & v444;
                      if (((*(void *)(v448 + ((v358 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v358) & 1) == 0) {
                        goto LABEL_233;
                      }
                      continue;
                    }
LABEL_238:
                    swift_bridgeObjectRelease();
                    outlined retain of Graph((uint64_t)v463);
                    long long v361 = v434;
                    createDotText(representing:)((uint64_t)v502);
                    uint64_t v434 = v361;
                    if (!v361)
                    {
                      uint64_t v379 = v362;
                      uint64_t v380 = v363;
                      outlined release of Graph((uint64_t)v463);
                      *(void *)&v457[0] = 0;
                      *((void *)&v457[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(18);
                      unint64_t v381 = v522;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      *(void *)&v457[0] = v244;
                      *((void *)&v457[0] + 1) = v381;
                      v382._uint64_t countAndFlagsBits = 0xD000000000000010;
                      v382._char object = (void *)0x800000025C421E80;
                      String.append(_:)(v382);
                      specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v379, v380, *(uint64_t *)&v457[0], *((void **)&v457[0] + 1), 7630692, 0xE300000000000000);
                      swift_bridgeObjectRelease();
LABEL_233:
                      swift_bridgeObjectRelease();
                      goto LABEL_240;
                    }
                    outlined release of Graph((uint64_t)v463);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
                    uint64_t v364 = swift_allocObject();
                    uint64_t v448 = specialized static Array._adoptStorage(_:count:)(v364, 1);
                    unint64_t v366 = v365;
                    uint64_t v367 = v434;
                    swift_getErrorValue();
                    uint64_t v449 = v454;
                    uint64_t v368 = v455;
                    v366[3] = v455;
                    uint64_t v369 = __swift_allocate_boxed_opaque_existential_0(v366);
                    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v368 - 8) + 16))(v369, v449, v368);
                    destructiveProjectEnumData for NodePersonality.ShaderType(v448);
                    print(_:separator:terminator:)();
                    swift_bridgeObjectRelease();

                    uint64_t v434 = 0;
LABEL_240:
                    outlined consume of ShaderGraphNode?((unint64_t)v420, (uint64_t)v422);
                    outlined consume of NodePersonality(v312);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of NodePersonality(v308);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined release of Graph((uint64_t)v463);
                    unint64_t v370 = v447;
                    $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();
                    swift_release();
                    outlined release of Graph(v433);
                    (*(void (**)(unsigned char *, uint64_t))(v431 + 8))(v370, v432);
                    *(void *)long long v456 = v244;
                    *(void *)&v456[8] = v522;
                    *(_OWORD *)&v456[16] = v308;
                    *(void *)&v456[32] = v309;
                    *(void *)&v456[40] = v413;
                    *(void *)&v456[48] = v412;
                    v456[56] = (_BYTE)v411;
                    unint64_t v371 = v385;
                    *(void *)&v456[64] = v385;
                    unint64_t v372 = v427;
                    *(void *)&v456[72] = v426;
                    *(void *)&v456[80] = v424;
                    *(void *)&v456[88] = v429;
                    *(void *)&v456[96] = v427;
                    v456[104] = v384;
                    *(_OWORD *)&v456[265] = *(_OWORD *)((char *)&v466[1] + 9);
                    *(_OWORD *)&v456[240] = v466[0];
                    *(_OWORD *)&v456[256] = v466[1];
                    *(_OWORD *)&v456[176] = v465[0];
                    *(_OWORD *)&v456[192] = v465[1];
                    *(_OWORD *)&v456[224] = v465[3];
                    *(_OWORD *)&v456[208] = v465[2];
                    *(_OWORD *)&v456[112] = v463[0];
                    *(_OWORD *)&v456[128] = v463[1];
                    *(_OWORD *)&v456[160] = v464;
                    *(_OWORD *)&v456[144] = v463[2];
                    uint64_t v373 = v445;
                    *(void *)&v456[288] = v446;
                    *(void *)&v456[296] = v445;
                    uint64_t v374 = v435;
                    *(void *)&v456[304] = v435;
                    outlined retain of RESurfaceShaderMaterial(v456);
                    swift_bridgeObjectRelease();
                    uint64_t v375 = v374;
                    swift_release();
                    outlined release of Graph((uint64_t)v463);
                    unint64_t v376 = v371;
                    unint64_t v377 = v429;
                    LOBYTE(v374) = v384;
                    outlined consume of ShaderGraphNode?(v376, (uint64_t)v426);
                    outlined consume of NodePersonality(v308);
                    swift_bridgeObjectRelease();
                    unint64_t v378 = v522;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    *(_OWORD *)&v458[201] = v472[10];
                    v457[1] = v474;
                    v457[2] = v475[0];
                    *(_OWORD *)((char *)&v457[2] + 9) = *(_OWORD *)((char *)v475 + 9);
                    *(_OWORD *)&v458[153] = v472[7];
                    *(_OWORD *)&v458[169] = v472[8];
                    *(_OWORD *)&v458[185] = v472[9];
                    *(_OWORD *)&v458[89] = v472[3];
                    *(_OWORD *)&v458[105] = v472[4];
                    *(_OWORD *)&v458[121] = v472[5];
                    *(_OWORD *)&v458[137] = v472[6];
                    *(_OWORD *)&v458[41] = v472[0];
                    *(_OWORD *)&v458[57] = v472[1];
                    *(void *)&v457[0] = v430;
                    *((void *)&v457[0] + 1) = v378;
                    *(_DWORD *)((char *)&v457[3] + 9) = *(_DWORD *)v473;
                    HIDWORD(v457[3]) = *(_DWORD *)&v473[3];
                    *(void *)long long v458 = v385;
                    *(void *)&v458[8] = v426;
                    *(void *)&v458[16] = v424;
                    *(void *)&v458[24] = v377;
                    *(void *)&v458[32] = v372;
                    v458[40] = v374;
                    *(_OWORD *)&v458[73] = v472[2];
                    *(_DWORD *)unint64_t v459 = *(_DWORD *)v471;
                    *(_DWORD *)&_OWORD v459[3] = *(_DWORD *)&v471[3];
                    uint64_t v460 = v446;
                    uint64_t v461 = v373;
                    uint64_t v462 = v375;
                    outlined release of RESurfaceShaderMaterial(v457);
                    return memcpy(v393, v456, 0x138uLL);
                }
              }
          }
        }
    }
  }
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi35_(uint64_t a1)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi38_(uint64_t a1)
{
  *(void *)a1 = 4;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x4C00000000000000;
  return result;
}

uint64_t outlined retain of NodeDef(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi19_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x5000000000000000;
  return result;
}

uint64_t sub_25C2A4450()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25C2A4488()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x1C00000000000000;
  return result;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v5 = (_OWORD *)(swift_bridgeObjectRetain() + 56);
    while (1)
    {
      uint64_t v13 = *((void *)v5 - 3);
      uint64_t v12 = *((void *)v5 - 2);
      uint64_t v29 = *((void *)v5 - 1);
      uint64_t v30 = v3;
      long long v31 = *v5;
      uint64_t v14 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      uint64_t v17 = v14[2];
      BOOL v18 = (v15 & 1) == 0;
      uint64_t v19 = v17 + v18;
      if (__OFADD__(v17, v18)) {
        break;
      }
      char v20 = v15;
      if (v14[3] >= v19)
      {
        if ((a2 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a2 & 1);
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
        if ((v20 & 1) != (v22 & 1)) {
          goto LABEL_18;
        }
        unint64_t v16 = v21;
      }
      uint64_t v23 = (void *)*a3;
      if (v20)
      {
        uint64_t v6 = 24 * v16;
        uint64_t v7 = (uint64_t *)(v23[7] + 24 * v16);
        uint64_t v9 = *v7;
        uint64_t v8 = v7[1];
        uint64_t v10 = v7[2];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v11 = (void *)(v23[7] + v6);
        swift_release();
        swift_bridgeObjectRelease();
        *uint64_t v11 = v9;
        v11[1] = v8;
        v11[2] = v10;
      }
      else
      {
        v23[(v16 >> 6) + 8] |= 1 << v16;
        uint64_t v24 = (uint64_t *)(v23[6] + 16 * v16);
        *uint64_t v24 = v13;
        v24[1] = v12;
        uint64_t v25 = v23[7] + 24 * v16;
        *(void *)uint64_t v25 = v29;
        *(_OWORD *)(v25 + 8) = v31;
        uint64_t v26 = v23[2];
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27) {
          goto LABEL_17;
        }
        void v23[2] = v28;
      }
      uint64_t v5 = (_OWORD *)((char *)v5 + 40);
      a2 = 1;
      uint64_t v3 = v30 - 1;
      if (v30 == 1) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;

  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = (void *)swift_bridgeObjectRetain();
    uint64_t v8 = v6[4];
    uint64_t v7 = v6[5];
    uint64_t v9 = v6[7];
    uint64_t v54 = v6[6];
    uint64_t v55 = v6;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    uint64_t v13 = v10[2];
    uint64_t v14 = (v11 & 1) == 0;
    char v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    unint64_t v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      uint64_t v12 = v17;
      uint64_t v19 = (void *)*a3;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      char v20 = (uint64_t *)(v19[7] + 16 * v12);
      unint64_t v21 = a3;
      uint64_t v23 = *v20;
      char v22 = v20[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = (void *)(v19[7] + 16 * v12);
      swift_bridgeObjectRelease();
      *uint64_t v24 = v23;
      v24[1] = v22;
      a3 = v21;
      uint64_t v25 = v3 - 1;
      if (v3 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      long long v31 = v55 + 11;
      uint64_t v56 = a3;
      while (1)
      {
        uint64_t v37 = *(v31 - 3);
        uint64_t v36 = *(v31 - 2);
        uint64_t v38 = *(v31 - 1);
        uint64_t v39 = *v31;
        uint64_t v40 = *a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
        uint64_t v43 = *(void *)(v40 + 16);
        uint64_t v44 = (v42 & 1) == 0;
        uint64_t v29 = __OFADD__(v43, v44);
        uint64_t v45 = v43 + v44;
        if (v29) {
          goto LABEL_25;
        }
        uint64_t v46 = v42;
        if (*(void *)(v40 + 24) < v45)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, 1);
          uint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
          if ((v46 & 1) != (v47 & 1)) {
            goto LABEL_27;
          }
        }
        uint64_t v48 = (void *)*a3;
        uint64_t v49 = 16 * v41;
        if (v46)
        {
          uint64_t v32 = (uint64_t *)(v48[7] + v49);
          uint64_t v34 = *v32;
          uint64_t v33 = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v35 = (void *)(v48[7] + v49);
          swift_bridgeObjectRelease();
          void *v35 = v34;
          v35[1] = v33;
          a3 = v56;
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          uint64_t v50 = (uint64_t *)(v48[6] + v49);
          *uint64_t v50 = v37;
          v50[1] = v36;
          uint64_t v51 = (void *)(v48[7] + v49);
          _OWORD *v51 = v38;
          v51[1] = v39;
          uint64_t v52 = v48[2];
          uint64_t v29 = __OFADD__(v52, 1);
          uint64_t v53 = v52 + 1;
          a3 = v56;
          if (v29) {
            goto LABEL_26;
          }
          v48[2] = v53;
        }
        v31 += 4;
        if (!--v25) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    if (a2)
    {
      uint64_t v19 = (void *)*a3;
      if (v11) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v19 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v26 = (uint64_t *)(v19[6] + 16 * v12);
    *uint64_t v26 = v8;
    v26[1] = v7;
    BOOL v27 = (void *)(v19[7] + 16 * v12);
    *BOOL v27 = v54;
    v27[1] = v9;
    uint64_t v28 = v19[2];
    uint64_t v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v30;
    uint64_t v25 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t specialized Dictionary<>.init(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (unsigned char *)(a1 + 72);
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if ((*v3 & 1) == 0)
      {
        uint64_t v6 = *((void *)v3 - 5);
        uint64_t v7 = *((void *)v3 - 4);
        uint64_t v8 = *((void *)v3 - 3);
        uint64_t v9 = *((void *)v3 - 2);
        uint64_t v10 = *((void *)v3 - 1);
        swift_bridgeObjectRetain();
        swift_retain();
        outlined copy of TextureSource();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        }
        unint64_t v12 = v4[2];
        unint64_t v11 = v4[3];
        if (v12 >= v11 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v4);
        }
        v4[2] = v12 + 1;
        uint64_t v5 = &v4[5 * v12];
        v5[4] = v9;
        v5[5] = v10;
        v5[6] = v6;
        v5[7] = v7;
        v5[8] = v8;
      }
      v3 += 48;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v4);
  swift_bridgeObjectRelease();
  if (*(void *)(v13 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (uniformPropertyName: String, type: MetalDataType)>);
    uint64_t v14 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE80];
  }
  uint64_t v16 = v14;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v13, 1, &v16);
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t outlined consume of ShaderGraphNode?(unint64_t result, uint64_t a2)
{
  if (a2)
  {
    outlined consume of NodePersonality(result);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RESurfaceShaderMaterial(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for RESurfaceShaderMaterial(unint64_t *a1)
{
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(a1[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[9])
  {
    outlined consume of NodePersonality(a1[8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(a1[24]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(a1[30]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    unint64_t v11 = *(void *)(a2 + 64);
    outlined copy of NodePersonality(v11);
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v10;
    uint64_t v12 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v12;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  uint64_t v14 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v14;
  uint64_t v15 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v16;
  uint64_t v17 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v17;
  uint64_t v18 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v18;
  unint64_t v19 = *(void *)(a2 + 192);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v19);
  uint64_t v20 = *(void *)(a2 + 200);
  uint64_t v21 = *(void *)(a2 + 208);
  *(void *)(a1 + 192) = v19;
  *(void *)(a1 + 200) = v20;
  uint64_t v22 = *(void *)(a2 + 216);
  uint64_t v23 = *(void *)(a2 + 224);
  *(void *)(a1 + 208) = v21;
  *(void *)(a1 + 216) = v22;
  *(void *)(a1 + 224) = v23;
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  unint64_t v24 = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v24);
  uint64_t v25 = *(void *)(a2 + 248);
  uint64_t v26 = *(void *)(a2 + 256);
  *(void *)(a1 + 240) = v24;
  *(void *)(a1 + 248) = v25;
  uint64_t v27 = *(void *)(a2 + 264);
  uint64_t v28 = *(void *)(a2 + 272);
  *(void *)(a1 + 256) = v26;
  *(void *)(a1 + 264) = v27;
  *(void *)(a1 + 272) = v28;
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  uint64_t v29 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v29;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of NodePersonality(v4);
  unint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  outlined consume of NodePersonality(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = (_OWORD *)(a1 + 64);
  uint64_t v8 = (_OWORD *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v9)
    {
      unint64_t v10 = *(void *)(a2 + 64);
      outlined copy of NodePersonality(v10);
      unint64_t v11 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = v10;
      outlined consume of NodePersonality(v11);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      uint64_t v12 = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 96) = v12;
    }
    else
    {
      outlined destroy of ShaderGraphNode(a1 + 64);
      long long v15 = *(_OWORD *)(a2 + 89);
      long long v16 = *(_OWORD *)(a2 + 80);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 80) = v16;
      *(_OWORD *)(a1 + 89) = v15;
    }
  }
  else if (v9)
  {
    unint64_t v13 = *(void *)(a2 + 64);
    outlined copy of NodePersonality(v13);
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    uint64_t v14 = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(void *)(a1 + 96) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *v8;
    long long v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    *uint64_t v7 = v17;
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  unint64_t v19 = *(void *)(a2 + 192);
  outlined copy of NodePersonality(v19);
  unint64_t v20 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v19;
  outlined consume of NodePersonality(v20);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v21 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v21;
  unint64_t v22 = *(void *)(a2 + 240);
  outlined copy of NodePersonality(v22);
  unint64_t v23 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v22;
  outlined consume of NodePersonality(v23);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v24 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v24;
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of ShaderGraphNode(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy312_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  outlined consume of NodePersonality(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 72);
  if (!v7)
  {
    outlined destroy of ShaderGraphNode(a1 + 64);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_6;
  }
  unint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  outlined consume of NodePersonality(v8);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
LABEL_6:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  outlined consume of NodePersonality(v13);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v14;
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  unint64_t v15 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  outlined consume of NodePersonality(v15);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v16;
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RESurfaceShaderMaterial(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 312)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RESurfaceShaderMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 312) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 312) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RESurfaceShaderMaterial()
{
  return &type metadata for RESurfaceShaderMaterial;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, String>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    long long v10 = (void *)(v3[7] + 16 * result);
    *long long v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of (Key, ShaderGraphNode)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  outlined copy of SGDataTypeStorage(*(id *)a1, *(id *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_retain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of GeomPropDef.GeomProp(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of (String, NodeDef)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t *outlined release of UserGraphError(uint64_t *a1)
{
  outlined consume of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of UserGraphError.ErrorType(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  switch(a22 >> 58)
  {
    case 0uLL:
    case 1uLL:
    case 4uLL:
    case 5uLL:
    case 0xCuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x13uLL:
    case 0x15uLL:
    case 0x1AuLL:
      goto LABEL_13;
    case 2uLL:
    case 3uLL:
    case 0x21uLL:
    case 0x22uLL:
      outlined consume of NodePersonality(result);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_10;
    case 6uLL:
    case 7uLL:
    case 0xAuLL:
      outlined consume of NodePersonality(result);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 8uLL:
    case 0xBuLL:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of NodePersonality(a11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(a17);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 9uLL:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 0xDuLL:
    case 0xEuLL:
      goto LABEL_10;
    case 0x11uLL:
      outlined consume of ShaderGraphNode?(result, a2);
      goto LABEL_13;
    case 0x12uLL:
    case 0x17uLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
      outlined consume of NodePersonality(result);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 0x14uLL:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 0x16uLL:
      outlined consume of GeomPropDef.GeomProp(result, a2, a3 & 1);
      goto LABEL_17;
    case 0x18uLL:
    case 0x19uLL:
      return outlined consume of Input?(result, a2);
    case 0x1BuLL:
    case 0x1CuLL:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(a8);
      swift_bridgeObjectRelease();
LABEL_13:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 0x1DuLL:
LABEL_17:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of GeomPropDef.GeomProp(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of Input?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of Edge(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Edge(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of TextureSource()
{
  return swift_bridgeObjectRetain();
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi34_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0xC00000000000000;
  return result;
}

uint64_t *outlined release of Output??(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of Output??(uint64_t result, uint64_t a2)
{
  if (a2 != 1) {
    return outlined consume of Input?(result, a2);
  }
  return result;
}

uint64_t outlined copy of Output?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t outlined copy of ShaderGraphNode?(unint64_t result, uint64_t a2)
{
  if (a2)
  {
    outlined copy of NodePersonality(result);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of ShaderGraphNode?(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

void *outlined retain of RESurfaceShaderMaterial(void *a1)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  unint64_t v6 = a1[24];
  unint64_t v7 = a1[30];
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ShaderGraphNode?(v3, v4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *outlined release of RESurfaceShaderMaterial(void *a1)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  unint64_t v6 = a1[24];
  unint64_t v7 = a1[30];
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ShaderGraphNode?(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NodePersonality(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t TextureSource.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Hasher._combine(_:)(a4 & 1);
  return String.hash(into:)();
}

uint64_t static TextureSource.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static TextureSource.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

Swift::Int TextureSource.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextureSource()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TextureSource()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureSource()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextureSource(uint64_t a1, uint64_t a2)
{
  return specialized static TextureSource.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t TypedTexture.source.getter(uint64_t a1)
{
  return a1;
}

uint64_t TypedTexture.type.getter()
{
  return swift_retain();
}

uint64_t TypedTexture.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  Hasher._combine(_:)(a4 & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  unint64_t v7 = *(void (**)(uint64_t))(*(void *)a5 + 120);
  swift_retain();
  v7(a1);
  return swift_release();
}

uint64_t static TypedTexture.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return specialized static TypedTexture.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6, a7 & 1, a8);
}

Swift::Int TypedTexture.hashValue.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  unint64_t v6 = *(void (**)(unsigned char *))(*(void *)a4 + 120);
  swift_retain();
  v6(v8);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TypedTexture()
{
  return TypedTexture.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TypedTexture(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 120);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TypedTexture()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v2 + 120);
  swift_retain();
  v3(v5);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TypedTexture(uint64_t a1, uint64_t a2)
{
  return specialized static TypedTexture.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t TextureAssignment.uniformName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextureAssignment.metalType.getter()
{
  return swift_retain();
}

uint64_t TextureAssignment.source.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of TextureSource();
  return v1;
}

uint64_t TextureAssignment.init(uniformName:metalType:source:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(unsigned char *)(a7 + 40) = a6 & 1;
  return result;
}

uint64_t NodeDef.metalTextureType.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  BOOL v3 = v1 == 0x7865545655647355 && v2 == 0xEC00000065727574;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 2;
  }
  if (v1 == 0xD000000000000014 && v2 == 0x800000025C421F40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 5;
  }
  if (v1 == 0x6567616D69 && v2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0x616D6964656C6974 && v2 == 0xEA00000000006567
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000013 && v2 == 0x800000025C421F60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000010 && v2 == 0x800000025C421F80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (v1 == 0xD000000000000015 && v2 == 0x800000025C421FA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000018 && v2 == 0x800000025C421FC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD00000000000001DLL && v2 == 0x800000025C421FE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 5;
  }
  if (v1 == 0xD000000000000015 && v2 == 0x800000025C422000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (v1 == 0xD00000000000001CLL && v2 == 0x800000025C422020
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (v1 == 0xD000000000000017 && v2 == 0x800000025C422040
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 7;
  }
  if (v1 == 0xD000000000000013 && v2 == 0x800000025C422060
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000016 && v2 == 0x800000025C422080
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD00000000000001BLL && v2 == 0x800000025C4220A0)
  {
    return 2;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v7 = v1 == 0xD000000000000018 && v2 == 0x800000025C4220C0;
  uint64_t result = 2;
  if ((v5 & 1) == 0 && !v7)
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v9 = v1 == 0xD00000000000001BLL && v2 == 0x800000025C4220E0;
    BOOL v10 = v9;
    uint64_t result = 2;
    if ((v8 & 1) == 0 && !v10)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v1 == 0xD000000000000020 && v2 == 0x800000025C422100
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return 2;
      }
      if (v1 == 0xD000000000000018 && v2 == 0x800000025C422130) {
        return 3;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v13 = v1 == 0xD00000000000001BLL && v2 == 0x800000025C422150;
      uint64_t result = 3;
      if ((v11 & 1) != 0 || v13) {
        return result;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v15 = v1 == 0xD000000000000020 && v2 == 0x800000025C422170;
      BOOL v16 = v15;
      uint64_t result = 3;
      if ((v14 & 1) != 0 || v16) {
        return result;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v18 = v1 == 0xD00000000000001DLL && v2 == 0x800000025C4221A0;
      BOOL v19 = v18;
      uint64_t result = 3;
      if ((v17 & 1) != 0 || v19) {
        return result;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = v1 == 0xD000000000000020 && v2 == 0x800000025C4221C0;
      BOOL v22 = v21;
      uint64_t result = 3;
      if ((v20 & 1) != 0 || v22) {
        return result;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v1 == 0xD000000000000025 && v2 == 0x800000025C4221F0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return 3;
      }
      if (v1 == 0xD000000000000013 && v2 == 0x800000025C422220) {
        return 7;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v25 = v1 == 0xD000000000000016 && v2 == 0x800000025C422240;
      uint64_t result = 7;
      if ((v23 & 1) == 0 && !v25)
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v27 = v1 == 0xD00000000000001BLL && v2 == 0x800000025C422260;
        BOOL v28 = v27;
        uint64_t result = 7;
        if ((v26 & 1) == 0 && !v28)
        {
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v30 = v1 == 0xD000000000000018 && v2 == 0x800000025C422280;
          BOOL v31 = v30;
          uint64_t result = 7;
          if ((v29 & 1) == 0 && !v31)
          {
            char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v33 = v1 == 0xD00000000000001BLL && v2 == 0x800000025C4222A0;
            BOOL v34 = v33;
            uint64_t result = 7;
            if ((v32 & 1) == 0 && !v34)
            {
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v36 = v1 == 0xD000000000000020 && v2 == 0x800000025C4222C0;
              BOOL v37 = v36;
              uint64_t result = 7;
              if ((v35 & 1) == 0 && !v37)
              {
                if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                  return 7;
                }
                if (v1 != 0xD00000000000001ELL || v2 != 0x800000025C4222F0)
                {
                  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                    return 2;
                  }
                  else {
                    return 0;
                  }
                }
                return 2;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t MTLTextureType.sgDebugName.getter()
{
  return 0x6E776F6E6B6E75;
}

uint64_t metalDataTypeForTexture(type:elementType:)(uint64_t a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v7 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v9 = 0x443165707974;
      goto LABEL_82;
    case 1:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v20 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v22 = 0x443165707974;
      goto LABEL_73;
    case 2:
      switch(a2)
      {
        case 3:
          if (one-time initialization token for texture2d_int != -1) {
            goto LABEL_86;
          }
          return swift_retain();
        case 7:
          if (one-time initialization token for texture2d_half != -1) {
            goto LABEL_86;
          }
          return swift_retain();
        case 9:
          if (one-time initialization token for texture2d_float != -1) {
            goto LABEL_86;
          }
          return swift_retain();
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = swift_slowAlloc();
        uint64_t v6 = swift_slowAlloc();
        uint64_t v51 = v6;
        *(_DWORD *)uint64_t v5 = 136315394;
        unint64_t v42 = SGDataType.stringValue.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v5 + 12) = 2080;
        uint64_t v9 = 0x443265707974;
        goto LABEL_82;
      }
      goto LABEL_85;
    case 3:
      switch(a2)
      {
        case 3:
          if (one-time initialization token for texture2darray_int != -1) {
            goto LABEL_86;
          }
          return swift_retain();
        case 7:
          if (one-time initialization token for texture2darray_half != -1) {
            goto LABEL_86;
          }
          return swift_retain();
        case 9:
          if (one-time initialization token for texture2darray_float != -1) {
            goto LABEL_86;
          }
          return swift_retain();
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v45 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v22 = 0x443265707974;
LABEL_73:
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22 & 0xFFFFFFFFFFFFLL | 0x7241000000000000, 0xEB00000000796172, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_83;
    case 4:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v24 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      char v26 = "type2DMultisample";
      goto LABEL_49;
    case 5:
      if (a2 == 7)
      {
        if (one-time initialization token for texturecube_half != -1) {
          goto LABEL_86;
        }
        return swift_retain();
      }
      if (a2 == 9)
      {
        if (one-time initialization token for texturecube_float != -1) {
          goto LABEL_86;
        }
        return swift_retain();
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = swift_slowAlloc();
        uint64_t v6 = swift_slowAlloc();
        uint64_t v51 = v6;
        *(_DWORD *)uint64_t v5 = 136315394;
        unint64_t v39 = SGDataType.stringValue.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v5 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6562754365707974, 0xE800000000000000, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        goto LABEL_83;
      }
      goto LABEL_85;
    case 6:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v28 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6562754365707974, 0xED00007961727241, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_83;
    case 7:
      switch(a2)
      {
        case 3:
          if (one-time initialization token for texture3d_int == -1) {
            return swift_retain();
          }
          goto LABEL_86;
        case 7:
          if (one-time initialization token for texture3d_half == -1) {
            return swift_retain();
          }
LABEL_86:
          swift_once();
          return swift_retain();
        case 9:
          if (one-time initialization token for texture3d_float == -1) {
            return swift_retain();
          }
          goto LABEL_86;
      }
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = swift_slowAlloc();
        uint64_t v6 = swift_slowAlloc();
        uint64_t v51 = v6;
        *(_DWORD *)uint64_t v5 = 136315394;
        unint64_t v49 = SGDataType.stringValue.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v5 + 12) = 2080;
        uint64_t v9 = 0x443365707974;
LABEL_82:
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, 0xE600000000000000, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
LABEL_83:
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25C27E000, v3, v4, "Unsupported element type %s for texture type %s", (uint8_t *)v5, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x261185880](v6, -1, -1);
        uint64_t v18 = v5;
LABEL_84:
        MEMORY[0x261185880](v18, -1, -1);
      }
LABEL_85:

      return 0;
    case 8:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v31 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v33 = 0xD000000000000016;
      unint64_t v34 = 0x800000025C422330;
      goto LABEL_50;
    case 9:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_85;
      }
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v51 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v36 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      char v26 = "typeTextureBuffer";
LABEL_49:
      unint64_t v34 = (unint64_t)(v26 - 32) | 0x8000000000000000;
      uint64_t v33 = 0xD000000000000011;
LABEL_50:
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_83;
    default:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      BOOL v3 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v3, v11)) {
        goto LABEL_85;
      }
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v51 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      unint64_t v14 = SGDataType.stringValue.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v16 = MTLTextureType.sgDebugName.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25C27E000, v3, v11, "Unsupported element type %s for texture type %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261185880](v13, -1, -1);
      uint64_t v18 = v12;
      goto LABEL_84;
  }
}

uint64_t specialized static TypedTexture.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a3)
  {
    if ((a7 & 1) == 0) {
      return 0;
    }
  }
  else if (a7)
  {
    return 0;
  }
  if (a1 == a5 && a2 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a4 + 128))(a8) & 1;
  }
  return 0;
}

uint64_t specialized static TextureSource.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t outlined consume of TextureSource()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized SGNode.textureType(nodeDefStore:)(uint64_t a1)
{
  uint64_t v2 = v1;
  BOOL v3 = (uint64_t *)(v1 + OBJC_IVAR___SGNode_data);
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR___SGNode_data + 80) > 0x3Fu || !*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = (_OWORD *)(*(void *)(a1 + 56) + 144 * v7);
  v47[0] = *v9;
  long long v10 = v9[4];
  long long v12 = v9[1];
  long long v11 = v9[2];
  v47[3] = v9[3];
  v47[4] = v10;
  v47[1] = v12;
  v47[2] = v11;
  long long v13 = v9[7];
  long long v14 = v9[8];
  long long v15 = v9[6];
  v47[5] = v9[5];
  v47[7] = v13;
  v47[8] = v14;
  v47[6] = v15;
  outlined retain of NodeDef((uint64_t)v47);
  swift_bridgeObjectRelease();
  long long v16 = v47[0];
  if (v47[0] != __PAIR128__(0xEF65727574786554, 0x56556473555F444ELL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v19 = NodeDef.metalTextureType.getter();
    if (v20)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)logger);
      outlined retain of NodeDef((uint64_t)v47);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        unint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        v45[0] = v33;
        *(_DWORD *)unint64_t v32 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, *((unint64_t *)&v16 + 1), v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of NodeDef((uint64_t)v47);
        outlined release of NodeDef((uint64_t)v47);
        _os_log_impl(&dword_25C27E000, v30, v31, "Unable to determine texture type for nodeDef %s", v32, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261185880](v33, -1, -1);
        MEMORY[0x261185880](v32, -1, -1);
      }
      else
      {
        outlined release of NodeDef((uint64_t)v47);
        outlined release of NodeDef((uint64_t)v47);
      }
LABEL_29:

      return 0;
    }
    uint64_t v21 = v19;
    outlined release of NodeDef((uint64_t)v47);
    unint64_t v22 = *(void *)(v2 + OBJC_IVAR___SGNode_outputs);
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v23)
      {
LABEL_15:
        if ((v22 & 0xC000000000000001) != 0)
        {
          unint64_t v24 = (char *)MEMORY[0x2611848A0](0, v22);
          goto LABEL_18;
        }
        if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          unint64_t v24 = (char *)*(id *)(v22 + 32);
LABEL_18:
          unint64_t v25 = v24;
          swift_bridgeObjectRelease();
          char v26 = (uint64_t *)&v25[OBJC_IVAR___SGOutput_type];
          swift_beginAccess();
          uint64_t v27 = SGDataType.vectorElementType()(*v26);
          if ((v28 & 1) == 0)
          {
            uint64_t v17 = metalDataTypeForTexture(type:elementType:)(v21, v27);

            return v17;
          }
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v34 = type metadata accessor for Logger();
          __swift_project_value_buffer(v34, (uint64_t)logger);
          uint64_t v35 = v25;
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v30, v36))
          {

            return 0;
          }
          unint64_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v38 = swift_slowAlloc();
          uint64_t v46 = v38;
          *(_DWORD *)unint64_t v37 = 136315138;
          unint64_t v39 = SGDataType.stringValue.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25C27E000, v30, v36, "Output type has no vector element type. %s", v37, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261185880](v38, -1, -1);
          MEMORY[0x261185880](v37, -1, -1);

          goto LABEL_29;
        }
        __break(1u);
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1)
    {
LABEL_33:
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)logger);
      unint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_25C27E000, v42, v43, "Unable to find expected output on node.", v44, 2u);
        MEMORY[0x261185880](v44, -1, -1);
      }

      return 0;
    }
LABEL_38:
    swift_once();
    goto LABEL_33;
  }
  outlined release of NodeDef((uint64_t)v47);
  if (one-time initialization token for texture2d_half != -1) {
    swift_once();
  }
  uint64_t v17 = static MetalDataType.texture2d_half;
  swift_retain();
  return v17;
}

unint64_t lazy protocol witness table accessor for type TextureSource and conformance TextureSource()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureSource and conformance TextureSource;
  if (!lazy protocol witness table cache variable for type TextureSource and conformance TextureSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureSource and conformance TextureSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TypedTexture and conformance TypedTexture()
{
  unint64_t result = lazy protocol witness table cache variable for type TypedTexture and conformance TypedTexture;
  if (!lazy protocol witness table cache variable for type TypedTexture and conformance TypedTexture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedTexture and conformance TypedTexture);
  }
  return result;
}

uint64_t destroy for TextureSource()
{
  return outlined consume of TextureSource();
}

uint64_t initializeBufferWithCopyOfBuffer for TextureSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of TextureSource();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TextureSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of TextureSource();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of TextureSource();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TextureSource(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of TextureSource();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TextureSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for TextureSource(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TextureSource()
{
  return &type metadata for TextureSource;
}

uint64_t destroy for TypedTexture()
{
  outlined consume of TextureSource();
  return swift_release();
}

uint64_t initializeWithCopy for TypedTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of TextureSource();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = a2[3];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TypedTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of TextureSource();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of TextureSource();
  *(void *)(a1 + 24) = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for TypedTexture(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of TextureSource();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TypedTexture(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypedTexture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TypedTexture()
{
  return &type metadata for TypedTexture;
}

uint64_t destroy for TextureAssignment()
{
  swift_bridgeObjectRelease();
  swift_release();
  return outlined consume of TextureSource();
}

uint64_t initializeWithCopy for TextureAssignment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of TextureSource();
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for TextureAssignment(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v2[2];
  swift_retain();
  swift_release();
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  outlined copy of TextureSource();
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  outlined consume of TextureSource();
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TextureAssignment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of TextureSource();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureAssignment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureAssignment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureAssignment()
{
  return &type metadata for TextureAssignment;
}

uint64_t outlined release of NodeDef(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MaterialXAvailability(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _HashTable.Bucket.offset.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*_HashTable.Bucket.offset.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

BOOL static _HashTable.Bucket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

ValueMetadata *type metadata accessor for _HashTable.Bucket()
{
  return &type metadata for _HashTable.Bucket;
}

void OrderedSet.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v6 = ContiguousArray.count.getter();
  Hasher._combine(_:)(v6);
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = a3
       + ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80));
    uint64_t v9 = *(void *)(*(void *)(a4 - 8) + 72);
    swift_retain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_release();
  }
}

Swift::Int OrderedSet.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  OrderedSet.hash(into:)((uint64_t)v7, v5, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedSet<A>(uint64_t a1)
{
  return OrderedSet.hashValue.getter(a1, *(void *)(v1 + 8), *(void *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance OrderedSet<A>(uint64_t a1, uint64_t a2)
{
  OrderedSet.hash(into:)(a1, a2, *(void *)(v2 + 8), *(void *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedSet<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  OrderedSet.hash(into:)((uint64_t)v6, v4, *(void *)(v2 + 8), *(void *)(a2 + 16));
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v33 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v33;
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v27 = v3 + 80;
  int64_t v28 = v1;
  int v29 = v5;
  uint64_t v30 = v3 + 64;
  uint64_t v31 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v32 = v7;
    long long v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    long long v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v6);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    type metadata accessor for XMLParserDelegate.StringNode();
    uint64_t v18 = (void *)swift_allocObject();
    v18[3] = 0;
    swift_unknownObjectWeakInit();
    v18[4] = v13;
    v18[5] = v14;
    v18[6] = MEMORY[0x263F8EE78];
    v18[7] = v17;
    v18[8] = v16;
    v18[9] = 0;
    unint64_t v20 = *(void *)(v33 + 16);
    unint64_t v19 = *(void *)(v33 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v20 >= v19 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    }
    *(void *)(v33 + 16) = v20 + 1;
    uint64_t v21 = v33 + 16 * v20;
    *(void *)(v21 + 32) = v18;
    *(void *)(v21 + 40) = &protocol witness table for XMLParserDelegate.StringNode;
    uint64_t v3 = v31;
    int64_t v9 = 1 << *(unsigned char *)(v31 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v30;
    uint64_t v22 = *(void *)(v30 + 8 * v11);
    if ((v22 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v29;
    if (*(_DWORD *)(v31 + 36) != v29) {
      goto LABEL_27;
    }
    unint64_t v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      int64_t v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v28;
    }
    else
    {
      unint64_t v24 = v11 + 1;
      unint64_t v25 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v28;
      if (v11 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            unint64_t v26 = *(void *)(v27 + 8 * v11++);
            if (v26)
            {
              unint64_t v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v32 + 1;
    uint64_t v6 = v9;
    if (v32 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t XMLDocument.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t XMLDocument.shouldProcessIncludes.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

void *XMLDocument.Options.documentXInclude.unsafeMutableAddressor()
{
  return &static XMLDocument.Options.documentXInclude;
}

uint64_t XMLDocument.rootElement()(uint64_t a1, unint64_t a2, char a3)
{
  id v6 = objc_allocWithZone(MEMORY[0x263F08D58]);
  outlined copy of Data._Representation(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = (char *)objc_msgSend(v6, sel_initWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  int64_t v9 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for XMLParserDelegate()), sel_init);
  objc_msgSend(v8, sel_setDelegate_, v9);
  objc_msgSend(v8, sel_parse);
  int64_t v10 = &v9[OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement];
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  if (!*(void *)v10)
  {
    uint64_t v16 = v8;
    uint64_t v8 = v9;
LABEL_8:

    return v11;
  }
  if ((a3 & 1) == 0)
  {
    swift_unknownObjectRetain();
    goto LABEL_7;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v14 = result;
    long long v15 = *(void (**)(uint64_t, uint64_t))(result + 24);
    swift_unknownObjectRetain_n();
    v15(ObjectType, v14);
    swift_unknownObjectRelease();
LABEL_7:
    uint64_t v16 = v9;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

id XMLParserDelegate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t static XMLDocument.Options.documentXInclude.getter()
{
  return 0x10000;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance XMLDocument.Options@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance XMLDocument.Options(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance XMLDocument.Options@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance XMLDocument.Options@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance XMLDocument.Options@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance XMLDocument.Options(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance XMLDocument.Options@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance XMLDocument.Options@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance XMLDocument.Options(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance XMLDocument.Options(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance XMLDocument.Options(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance XMLDocument.Options@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance XMLDocument.Options(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance XMLDocument.Options(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance XMLDocument.Options(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance XMLDocument.Options()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance XMLDocument.Options(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance XMLDocument.Options(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t type metadata accessor for XMLParserDelegate()
{
  return self;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance XMLDocument.Options@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t XMLNodePrivate.detach()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 8))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(ObjectType, v8);
    if (v10)
    {
      uint64_t v11 = v10;
      MEMORY[0x270FA5388](v10);
      v15[2] = a1;
      v15[3] = a2;
      v15[4] = v3;
      unint64_t v12 = specialized Collection.firstIndex(where:)((uint64_t (*)(long long *))partial apply for closure #1 in XMLNodePrivate.detach(), (uint64_t)v15, v11);
      char v14 = v13;
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOytTg591_s11ShaderGraph14XMLNodePrivate33_E8B134E456AC27412A2E2468BC0E59F0LLPAAE6detachyyFySiXEfU0_0E5Graph0G0_pTf1cn_nTf4ng_n(v12, v14 & 1);
      swift_unknownObjectRelease();
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(a2 + 16))(0, 0, a1, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    long long v10 = *(_OWORD *)(v7 + 16 * v6);
    swift_unknownObjectRetain();
    char v8 = a1(&v10);
    swift_unknownObjectRelease();
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0;
    }
  }
  return v6;
}

Swift::Void __swiftcall XMLNode.dump()()
{
}

Swift::Void __swiftcall XMLNode.dump(indentLevel:)(Swift::Int indentLevel)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = MEMORY[0x261183FF0](538976288, 0xE400000000000000, indentLevel);
  uint64_t v9 = v8;
  swift_getObjectType();
  uint64_t v10 = swift_conformsToProtocol2();
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v10) {
    uint64_t v3 = 0;
  }
  Swift::Int v76 = indentLevel;
  if (v3
    && (uint64_t v12 = swift_getObjectType(), (v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 8) + 40))(v12)) != 0))
  {
    uint64_t v14 = v13;
    int64_t v15 = *(void *)(v13 + 16);
    if (v15)
    {
      uint64_t v73 = v4;
      uint64_t v74 = v7;
      uint64_t v72 = v9;
      uint64_t v78 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
      uint64_t v16 = (uint64_t *)(v14 + 40);
      do
      {
        uint64_t v17 = *v16;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);
        if (!v20) {
          uint64_t v19 = 0x3E6C696E3CLL;
        }
        unint64_t v21 = 0xE500000000000000;
        if (v20) {
          unint64_t v22 = v20;
        }
        else {
          unint64_t v22 = 0xE500000000000000;
        }
        unint64_t v23 = v22;
        String.append(_:)(*(Swift::String *)&v19);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 61;
        v24._char object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);
        if (v26)
        {
          String.append(_:)(*(Swift::String *)&v25);
          v27._uint64_t countAndFlagsBits = 34;
          v27._char object = (void *)0xE100000000000000;
          String.append(_:)(v27);
          swift_bridgeObjectRelease();
          uint64_t v28 = 34;
          unint64_t v21 = 0xE100000000000000;
        }
        else
        {
          uint64_t v28 = 0x3E6C696E3CLL;
        }
        unint64_t v29 = v21;
        String.append(_:)(*(Swift::String *)&v28);
        swift_bridgeObjectRelease();
        unint64_t v31 = *(void *)(v78 + 16);
        unint64_t v30 = *(void *)(v78 + 24);
        if (v31 >= v30 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        }
        *(void *)(v78 + 16) = v31 + 1;
        uint64_t v32 = v78 + 16 * v31;
        *(void *)(v32 + 32) = 0;
        *(void *)(v32 + 40) = 0xE000000000000000;
        v16 += 2;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      uint64_t v9 = v72;
      uint64_t v4 = v73;
      uint64_t v7 = v74;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v34 = v35;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
  }
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v5, v4);
  if (!v36) {
    goto LABEL_44;
  }
  uint64_t v37 = v36;
  uint64_t v77 = v5;
  uint64_t v38 = *(void *)(v36 + 16);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v77;
LABEL_44:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_25C418EE0;
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
    if (v62)
    {
      unint64_t v63 = v62;
    }
    else
    {
      uint64_t v61 = 0x3E6C696E3CLL;
      unint64_t v63 = 0xE500000000000000;
    }
    unint64_t v64 = v63;
    String.append(_:)(*(Swift::String *)&v61);
    swift_bridgeObjectRelease();
    v65._uint64_t countAndFlagsBits = 32;
    v65._char object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    if (v34) {
      uint64_t v66 = v33;
    }
    else {
      uint64_t v66 = 0;
    }
    if (v34) {
      unint64_t v67 = v34;
    }
    else {
      unint64_t v67 = 0xE000000000000000;
    }
    unint64_t v68 = v67;
    String.append(_:)(*(Swift::String *)&v66);
    swift_bridgeObjectRelease();
    v69._uint64_t countAndFlagsBits = 4075296;
    v69._char object = (void *)0xE300000000000000;
    String.append(_:)(v69);
    swift_bridgeObjectRetain();
    v70._uint64_t countAndFlagsBits = 60;
    v70._char object = (void *)0xE100000000000000;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = v7;
    uint64_t v59 = v9;
    *(void *)(v52 + 56) = MEMORY[0x263F8D310];
    goto LABEL_54;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_25C418EE0;
  uint64_t v71 = *(uint64_t (**)(uint64_t))(v4 + 16);
  uint64_t v40 = v71(v77);
  if (v41)
  {
    unint64_t v42 = v41;
  }
  else
  {
    uint64_t v40 = 0x3E6C696E3CLL;
    unint64_t v42 = 0xE500000000000000;
  }
  unint64_t v43 = v42;
  String.append(_:)(*(Swift::String *)&v40);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 32;
  v44._char object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  if (v34) {
    uint64_t v45 = v33;
  }
  else {
    uint64_t v45 = 0;
  }
  if (v34) {
    unint64_t v46 = v34;
  }
  else {
    unint64_t v46 = 0xE000000000000000;
  }
  unint64_t v47 = v46;
  String.append(_:)(*(Swift::String *)&v45);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 62;
  v48._char object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  uint64_t v75 = v7;
  uint64_t v79 = v7;
  swift_bridgeObjectRetain();
  v49._uint64_t countAndFlagsBits = 60;
  v49._char object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  uint64_t v50 = MEMORY[0x263F8D310];
  *(void *)(v39 + 56) = MEMORY[0x263F8D310];
  *(void *)(v39 + 32) = v79;
  *(void *)(v39 + 40) = v9;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if (!__OFADD__(v76, 1))
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = v37 + 40;
    do
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      XMLNode.dump(indentLevel:)(v76 + 1);
      swift_unknownObjectRelease();
      v51 += 16;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease_n();
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_25C418EE0;
    uint64_t v53 = ((uint64_t (*)(uint64_t, uint64_t))v71)(v77, v4);
    if (v54)
    {
      unint64_t v55 = v54;
    }
    else
    {
      uint64_t v53 = 0x3E6C696E3CLL;
      unint64_t v55 = 0xE500000000000000;
    }
    unint64_t v56 = v55;
    String.append(_:)(*(Swift::String *)&v53);
    swift_bridgeObjectRelease();
    v57._uint64_t countAndFlagsBits = 62;
    v57._char object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    swift_bridgeObjectRetain();
    v58._uint64_t countAndFlagsBits = 12092;
    v58._char object = (void *)0xE200000000000000;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = v75;
    uint64_t v59 = v9;
    *(void *)(v52 + 56) = v50;
LABEL_54:
    *(void *)(v52 + 32) = v60;
    *(void *)(v52 + 40) = v59;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t XMLElementPrivate.replaceIncludeStatements()(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 8) + 8) + 24))();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    if (v6)
    {
      uint64_t v7 = (long long *)(result + 32);
      do
      {
        long long v8 = *v7++;
        long long v9 = v8;
        swift_unknownObjectRetain();
        closure #1 in XMLElementPrivate.replaceIncludeStatements()((uint64_t *)&v9, v2, a1, a2);
        swift_unknownObjectRelease();
        --v6;
      }
      while (v6);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in XMLElementPrivate.replaceIncludeStatements()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 56))(ObjectType, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
  if (!v10) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + 24))(v6, v7, a3);
  }
  if (v9 == 0x756C636E693A6978 && v10 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + 24))(v6, v7, a3);
    }
  }
  uint64_t v13 = createDoc(for:)(v6, v7);
  if (v15 != 2)
  {
    uint64_t v16 = v13;
    unint64_t v17 = v14;
    char v18 = v15;
    uint64_t v19 = XMLDocument.rootElement()(v13, v14, v15 & 1);
    uint64_t v26 = v20;
    outlined consume of XMLDocument?(v16, v17, v18);
    if (v19)
    {
      uint64_t v21 = *(void *)(v26 + 8);
      uint64_t v22 = *(void *)(a4 + 8);
      unint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 24);
      uint64_t v24 = swift_unknownObjectRetain();
      v23(v24, v21, a3, v22);
      return swift_unknownObjectRelease_n();
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + 24))(v6, v7, a3);
}

uint64_t createDoc(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v28[-v12];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  if (!v16) {
    goto LABEL_18;
  }
  if (result != 0x756C636E693A6978 || v16 != 0xEA00000000006564)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_6;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_getObjectType();
  uint64_t v18 = swift_conformsToProtocol2();
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  if (!v18) {
    a1 = 0;
  }
  if (a1)
  {
    uint64_t v20 = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v19 + 16))(1717924456, 0xE400000000000000, v20, v19))
    {
      uint64_t v22 = v21;
      uint64_t v23 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
      a1 = v24;
      swift_unknownObjectRelease();
      if (a1)
      {
        id v25 = objc_msgSend(self, sel_defaultManager);
        id v26 = objc_msgSend(v25, sel_currentDirectoryPath);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v6, v13, v7);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
        URL.init(fileURLWithPath:relativeTo:)();
        swift_bridgeObjectRelease();
        outlined destroy of URL?((uint64_t)v6);
        a1 = Data.init(contentsOf:options:)();
        Swift::String v27 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
        v27(v11, v7);
        v27(v13, v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

uint64_t XMLParserDelegate.rootElement.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t XMLParserDelegate.rootElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*XMLParserDelegate.rootElement.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

Swift::Void __swiftcall XMLParserDelegate.parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)(NSXMLParser _, Swift::String didStartElement, Swift::String_optional namespaceURI, Swift::String_optional qualifiedName, Swift::OpaquePointer attributes)
{
}

void *XMLParserDelegate.Element.__allocating_init(name:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[3] = 0;
  swift_unknownObjectWeakInit();
  v6[6] = 0;
  v6[7] = 0;
  v6[4] = a1;
  v6[5] = a2;
  if (a3)
  {
    uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_beginAccess();
  v6[7] = v7;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t XMLParserDelegate.beginElement(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement;
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = swift_unknownObjectRelease();
    if (v6)
    {
      if (v7 == v6) {
        goto LABEL_6;
      }
      __break(1u);
    }
LABEL_10:
    __break(1u);
    return result;
  }
  if (v6) {
    goto LABEL_10;
  }
LABEL_6:
  *(void *)(v2 + v5) = a1;
  swift_release();
  return swift_retain();
}

Swift::Void __swiftcall XMLParserDelegate.endElement()()
{
  uint64_t v1 = OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (!v2)
  {
    __break(1u);
    return;
  }
  uint64_t v3 = v0;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 112);
  uint64_t v5 = swift_retain();
  uint64_t v6 = v4(v5);
  swift_release();
  if (!v6) {
    goto LABEL_5;
  }
  type metadata accessor for XMLParserDelegate.Element();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
LABEL_5:
    uint64_t v7 = 0;
  }
  *(void *)(v3 + v1) = v7;
  swift_release();
}

uint64_t (*XMLParserDelegate.Element.parent.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x261185960](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return XMLParserDelegate.Element.parent.modify;
}

uint64_t (*XMLParserDelegate.Element.children.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

void XMLParserDelegate.Element.stringValue.getter()
{
}

uint64_t XMLParserDelegate.Element.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XMLParserDelegate.Element.attributes.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*XMLParserDelegate.Element.attributes.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

void *XMLParserDelegate.Element.init(name:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = 0;
  swift_unknownObjectWeakInit();
  v3[6] = 0;
  v3[7] = 0;
  v3[4] = a1;
  v3[5] = a2;
  if (a3)
  {
    uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_beginAccess();
  v3[7] = v7;
  swift_bridgeObjectRelease();
  return v3;
}

void *XMLParserDelegate.StringNode.__allocating_init(name:stringValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[3] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = MEMORY[0x263F8EE78];
  v8[4] = a1;
  void v8[5] = a2;
  v8[6] = v9;
  v8[7] = a3;
  v8[8] = a4;
  v8[9] = 0;
  return v8;
}

uint64_t XMLParserDelegate.Element.attribute(forName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 168))();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = (uint64_t *)(v6 + 40); ; i += 2)
  {
    uint64_t v9 = *(i - 1);
    uint64_t v10 = *i;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
    swift_unknownObjectRetain();
    uint64_t v13 = v12(ObjectType, v10);
    if (!v14) {
      goto LABEL_4;
    }
    if (v13 == a1 && v14 == a2) {
      break;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_16;
    }
LABEL_4:
    swift_unknownObjectRelease();
    if (!--v7)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t XMLParserDelegate.Element.addChild(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  uint64_t v8 = swift_unknownObjectRelease();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v8);
    if (v9) {
      uint64_t v7 = (void *)v9;
    }
    else {
      uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    }
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = v7;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_6;
    }
  }
  uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
LABEL_6:
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  _OWORD v10[2] = v12 + 1;
  uint64_t v13 = &v10[2 * v12];
  v13[4] = a1;
  v13[5] = a2;
  swift_bridgeObjectRelease();
  (*(void (**)(void *))(*(void *)v3 + 144))(v10);
  type metadata accessor for XMLParserDelegate.Element();
  uint64_t v14 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(*(void *)swift_dynamicCastClassUnconditional() + 120);
  uint64_t v15 = swift_unknownObjectRetain();
  return v14(v15, &protocol witness table for XMLParserDelegate.Element);
}

uint64_t XMLParserDelegate.Element.nodes(forXPath:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 136))();
  if (!v5) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v6 = v5;
  if (a1 == 0x656465646F6E2F2ELL && a2 == (void *)0xE900000000000066
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = (long long *)(v6 + 32);
      uint64_t v9 = MEMORY[0x263F8EE78];
      while (1)
      {
        long long v78 = *v8;
        uint64_t ObjectType = swift_getObjectType();
        unint64_t v11 = *(uint64_t (**)(uint64_t, void))(*((void *)&v78 + 1) + 16);
        swift_unknownObjectRetain();
        uint64_t v12 = v11(ObjectType, *((void *)&v78 + 1));
        if (v13)
        {
          if (v12 == 0x66656465646F6ELL && v13 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
            }
            unint64_t v17 = *(void *)(v9 + 16);
            unint64_t v16 = *(void *)(v9 + 24);
            if (v17 >= v16 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            }
            *(void *)(v9 + 16) = v17 + 1;
            *(_OWORD *)(v9 + 16 * v17 + 32) = v78;
            goto LABEL_8;
          }
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_17;
          }
        }
        swift_unknownObjectRelease();
LABEL_8:
        ++v8;
        if (!--v7) {
          goto LABEL_119;
        }
      }
    }
    goto LABEL_118;
  }
  if (a1 == 0x72706D6F65672F2ELL && a2 == (void *)0xED0000666564706FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v18 = *(void *)(v6 + 16);
    if (v18)
    {
      uint64_t v19 = (long long *)(v6 + 32);
      uint64_t v9 = MEMORY[0x263F8EE78];
      while (1)
      {
        long long v79 = *v19;
        uint64_t v20 = swift_getObjectType();
        uint64_t v21 = *(uint64_t (**)(uint64_t, void))(*((void *)&v79 + 1) + 16);
        swift_unknownObjectRetain();
        uint64_t v22 = v21(v20, *((void *)&v79 + 1));
        if (v23)
        {
          if (v22 == 0x706F72706D6F6567 && v23 == 0xEB00000000666564)
          {
            swift_bridgeObjectRelease();
LABEL_38:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
            }
            unint64_t v27 = *(void *)(v9 + 16);
            unint64_t v26 = *(void *)(v9 + 24);
            if (v27 >= v26 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            }
            *(void *)(v9 + 16) = v27 + 1;
            *(_OWORD *)(v9 + 16 * v27 + 32) = v79;
            goto LABEL_29;
          }
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v25) {
            goto LABEL_38;
          }
        }
        swift_unknownObjectRelease();
LABEL_29:
        ++v19;
        if (!--v18) {
          goto LABEL_119;
        }
      }
    }
LABEL_118:
    uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_119:
    swift_bridgeObjectRelease();
    return v9;
  }
  if (a1 == 0x7475706E692F2ELL && a2 == (void *)0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v28 = *(void *)(v6 + 16);
    if (!v28) {
      goto LABEL_118;
    }
    unint64_t v29 = (long long *)(v6 + 32);
    uint64_t v9 = MEMORY[0x263F8EE78];
    while (1)
    {
      long long v80 = *v29;
      uint64_t v30 = swift_getObjectType();
      unint64_t v31 = *(uint64_t (**)(uint64_t, void))(*((void *)&v80 + 1) + 16);
      swift_unknownObjectRetain();
      uint64_t v32 = v31(v30, *((void *)&v80 + 1));
      if (v33)
      {
        if (v32 == 0x7475706E69 && v33 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_58:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
          }
          unint64_t v37 = *(void *)(v9 + 16);
          unint64_t v36 = *(void *)(v9 + 24);
          if (v37 >= v36 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          }
          *(void *)(v9 + 16) = v37 + 1;
          *(_OWORD *)(v9 + 16 * v37 + 32) = v80;
          goto LABEL_49;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v35) {
          goto LABEL_58;
        }
      }
      swift_unknownObjectRelease();
LABEL_49:
      ++v29;
      if (!--v28) {
        goto LABEL_119;
      }
    }
  }
  if (a1 == 0x74757074756F2F2ELL && a2 == (void *)0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v38 = *(void *)(v6 + 16);
    if (!v38) {
      goto LABEL_118;
    }
    uint64_t v39 = (long long *)(v6 + 32);
    uint64_t v9 = MEMORY[0x263F8EE78];
    while (1)
    {
      long long v81 = *v39;
      uint64_t v40 = swift_getObjectType();
      unint64_t v41 = *(uint64_t (**)(uint64_t, void))(*((void *)&v81 + 1) + 16);
      swift_unknownObjectRetain();
      uint64_t v42 = v41(v40, *((void *)&v81 + 1));
      if (v43)
      {
        if (v42 == 0x74757074756FLL && v43 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_78:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
          }
          unint64_t v47 = *(void *)(v9 + 16);
          unint64_t v46 = *(void *)(v9 + 24);
          if (v47 >= v46 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
          }
          *(void *)(v9 + 16) = v47 + 1;
          *(_OWORD *)(v9 + 16 * v47 + 32) = v81;
          goto LABEL_69;
        }
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v45) {
          goto LABEL_78;
        }
      }
      swift_unknownObjectRelease();
LABEL_69:
      ++v39;
      if (!--v38) {
        goto LABEL_119;
      }
    }
  }
  if (a1 == 0xD000000000000015 && a2 == (void *)0x800000025C422390
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v48 = *(void *)(v6 + 16);
    if (!v48)
    {
      uint64_t v9 = MEMORY[0x263F8EE78];
      goto LABEL_119;
    }
    Swift::String v49 = (long long *)(v6 + 32);
    uint64_t v9 = MEMORY[0x263F8EE78];
    while (1)
    {
      long long v82 = *v49;
      uint64_t v50 = *(void *)v49;
      uint64_t v51 = swift_getObjectType();
      uint64_t v52 = *(uint64_t (**)(uint64_t, void))(*((void *)&v82 + 1) + 16);
      swift_unknownObjectRetain();
      uint64_t v53 = v52(v51, *((void *)&v82 + 1));
      if (v54)
      {
        if (v53 == 0x7061726765646F6ELL && v54 == 0xE900000000000068)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v56 & 1) == 0) {
            goto LABEL_88;
          }
        }
        swift_getObjectType();
        uint64_t v57 = swift_conformsToProtocol2();
        if (v57) {
          uint64_t v58 = v57;
        }
        else {
          uint64_t v58 = 0;
        }
        if (v57) {
          uint64_t v59 = v50;
        }
        else {
          uint64_t v59 = 0;
        }
        if (v59)
        {
          uint64_t v60 = swift_getObjectType();
          uint64_t v61 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v58 + 16);
          swift_unknownObjectRetain();
          uint64_t v62 = v61(0x66656465646F6ELL, 0xE700000000000000, v60, v58);
          swift_unknownObjectRelease();
          if (v62)
          {
            swift_unknownObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
            }
            unint64_t v64 = *(void *)(v9 + 16);
            unint64_t v63 = *(void *)(v9 + 24);
            if (v64 >= v63 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
            }
            *(void *)(v9 + 16) = v64 + 1;
            *(_OWORD *)(v9 + 16 * v64 + 32) = v82;
            goto LABEL_89;
          }
        }
      }
LABEL_88:
      swift_unknownObjectRelease();
LABEL_89:
      ++v49;
      if (!--v48) {
        goto LABEL_119;
      }
    }
  }
  if (a1 == 0xD000000000000010 && a2 == (void *)0x800000025C4223B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v65 = *(void *)(v6 + 16);
    if (!v65) {
      goto LABEL_118;
    }
    uint64_t v66 = (long long *)(v6 + 32);
    uint64_t v9 = MEMORY[0x263F8EE78];
    while (1)
    {
      long long v83 = *v66;
      uint64_t v68 = swift_getObjectType();
      Swift::String v69 = *(uint64_t (**)(uint64_t, void))(*((void *)&v83 + 1) + 16);
      swift_unknownObjectRetain();
      uint64_t v70 = v69(v68, *((void *)&v83 + 1));
      if (v71)
      {
        if (v70 == 0x6E656D656C706D69 && v71 == 0xEE006E6F69746174)
        {
          swift_bridgeObjectRelease();
LABEL_131:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
          }
          unint64_t v75 = *(void *)(v9 + 16);
          unint64_t v74 = *(void *)(v9 + 24);
          if (v75 >= v74 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
          }
          *(void *)(v9 + 16) = v75 + 1;
          *(_OWORD *)(v9 + 16 * v75 + 32) = v83;
          goto LABEL_122;
        }
        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v73) {
          goto LABEL_131;
        }
      }
      swift_unknownObjectRelease();
LABEL_122:
      ++v66;
      if (!--v65) {
        goto LABEL_119;
      }
    }
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v76._uint64_t countAndFlagsBits = a1;
  v76._char object = a2;
  String.append(_:)(v76);
  v77._uint64_t countAndFlagsBits = 39;
  v77._char object = (void *)0xE100000000000000;
  String.append(_:)(v77);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t XMLParserDelegate.Element.deinit()
{
  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t XMLParserDelegate.Element.__deallocating_deinit()
{
  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for XMLElement.attribute(forName:) in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for XMLElement.addChild(_:) in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t protocol witness for XMLNodePrivate.parent.setter in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t (*protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 152))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for XMLNode.parent.getter in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t protocol witness for XMLNode.children.getter in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for XMLNode.stringValue.getter in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t protocol witness for XMLNode.attributes.getter in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t protocol witness for XMLNode.nodes(forXPath:) in conformance XMLParserDelegate.Element()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t protocol witness for XMLNode.detach() in conformance XMLParserDelegate.Element(uint64_t a1)
{
  return XMLNodePrivate.detach()(a1, (uint64_t)&protocol witness table for XMLParserDelegate.Element);
}

uint64_t XMLParserDelegate.Element.parent.getter()
{
  swift_beginAccess();
  return MEMORY[0x261185960](v0 + 16);
}

uint64_t XMLParserDelegate.Element.parent.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*XMLParserDelegate.StringNode.parent.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x261185960](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return XMLParserDelegate.Element.parent.modify;
}

void XMLParserDelegate.Element.parent.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t XMLParserDelegate.StringNode.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XMLParserDelegate.Element.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XMLParserDelegate.Element.children.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*XMLParserDelegate.StringNode.children.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t XMLParserDelegate.StringNode.stringValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XMLParserDelegate.StringNode.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

void *XMLParserDelegate.StringNode.init(name:stringValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = MEMORY[0x263F8EE78];
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = v9;
  v4[7] = a3;
  v4[8] = a4;
  v4[9] = 0;
  return v4;
}

void XMLParserDelegate.StringNode.nodes(forXPath:)()
{
}

uint64_t XMLParserDelegate.StringNode.deinit()
{
  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t XMLParserDelegate.StringNode.__deallocating_deinit()
{
  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for XMLNodePrivate.parent.setter in conformance XMLParserDelegate.StringNode()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t (*protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.StringNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 160))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

void protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for XMLNode.parent.getter in conformance XMLParserDelegate.StringNode()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for XMLNode.name.getter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for XMLNode.children.getter in conformance XMLParserDelegate.StringNode()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t protocol witness for XMLNode.stringValue.getter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for XMLNode.attributes.getter in conformance XMLParserDelegate.StringNode()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for XMLNode.nodes(forXPath:) in conformance XMLParserDelegate.StringNode()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t protocol witness for XMLNode.detach() in conformance XMLParserDelegate.StringNode(uint64_t a1)
{
  return XMLNodePrivate.detach()(a1, (uint64_t)&protocol witness table for XMLParserDelegate.StringNode);
}

id XMLParserDelegate.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id XMLParserDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOytTg591_s11ShaderGraph14XMLNodePrivate33_E8B134E456AC27412A2E2468BC0E59F0LLPAAE6detachyyFySiXEfU0_0E5Graph0G0_pTf1cn_nTf4ng_n(unint64_t a1, char a2)
{
  if (a2) {
    return a2 & 1;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v6 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(result + 40))(v8, ObjectType, result);
    if (*v7)
    {
      specialized Array.remove(at:)(a1);
      v6(v8, 0);
      swift_unknownObjectRelease();
    }
    else
    {
      v6(v8, 0);
    }
    return a2 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  objc_super v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized XMLParserDelegate.parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for XMLParserDelegate.Element();
  uint64_t v6 = (void *)swift_allocObject();
  v6[3] = 0;
  swift_unknownObjectWeakInit();
  v6[5] = a2;
  v6[6] = 0;
  v6[7] = 0;
  v6[4] = a1;
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(v7);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6[7] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(v2 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement);
  swift_beginAccess();
  uint64_t v10 = (void *)*v9;
  if (*v9)
  {
    unint64_t v11 = (_UNKNOWN **)v9[1];
  }
  else
  {
    swift_retain();
    unint64_t v11 = &protocol witness table for XMLParserDelegate.Element;
    uint64_t v10 = v6;
  }
  *uint64_t v9 = v10;
  v9[1] = v11;
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (v12)
  {
    uint64_t v13 = *(void (**)(void *, _UNKNOWN **))(*(void *)v12 + 208);
    swift_retain();
    swift_retain();
    v13(v6, &protocol witness table for XMLParserDelegate.Element);
    swift_release();
    swift_release();
  }
  XMLParserDelegate.beginElement(_:)((uint64_t)v6);
  return swift_release();
}

void specialized XMLParserDelegate.parser(_:didEndElement:namespaceURI:qualifiedName:)()
{
  uint64_t v1 = OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (!v2)
  {
    __break(1u);
    return;
  }
  uint64_t v3 = v0;
  objc_super v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 112);
  uint64_t v5 = swift_retain();
  uint64_t v6 = v4(v5);
  swift_release();
  if (!v6) {
    goto LABEL_5;
  }
  type metadata accessor for XMLParserDelegate.Element();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
LABEL_5:
    uint64_t v7 = 0;
  }
  *(void *)(v3 + v1) = v7;
  swift_release();
}

uint64_t type metadata accessor for XMLParserDelegate.Element()
{
  return self;
}

uint64_t outlined destroy of weak XMLNode?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type XMLDocument.Options and conformance XMLDocument.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

uint64_t sub_25C2ACFF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C2AD044(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 120);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_25C2AD0A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_25C2AD0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C2AD148@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_25C2AD194(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C2AD1E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C2AD234(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 128);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_25C2AD298@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_25C2AD2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t destroy for XMLDocument(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for XMLDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for XMLDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for XMLDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLDocument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLDocument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XMLDocument()
{
  return &type metadata for XMLDocument;
}

ValueMetadata *type metadata accessor for XMLDocument.Options()
{
  return &type metadata for XMLDocument.Options;
}

uint64_t dispatch thunk of XMLNode.parent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of XMLNode.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of XMLNode.children.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of XMLNode.stringValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of XMLNode.attributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of XMLNode.nodes(forXPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of XMLNode.detach()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of XMLElement.attribute(forName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of XMLElement.addChild(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t method lookup function for XMLParserDelegate.Element(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XMLParserDelegate.Element);
}

uint64_t dispatch thunk of XMLParserDelegate.Element.parent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.parent.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.parent.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.children.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.children.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.children.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.stringValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attributes.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attributes.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.__allocating_init(name:attributes:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attribute(forName:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.addChild(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.nodes(forXPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t type metadata accessor for XMLParserDelegate.StringNode()
{
  return self;
}

uint64_t method lookup function for XMLParserDelegate.StringNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XMLParserDelegate.StringNode);
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.parent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.parent.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.parent.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.children.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.children.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.children.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.__allocating_init(name:stringValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.nodes(forXPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t outlined consume of XMLDocument?(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 != 2) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL partial apply for closure #1 in XMLNodePrivate.detach()(void *a1)
{
  return *a1 == *(void *)(v1 + 32);
}

uint64_t _UnsafeBitset._count.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafeBitset._count.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafeBitset._count.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

int8x8_t *_UnsafeBitset._actualCount.getter(int8x8_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v2 = result;
      uint64_t result = 0;
      uint64_t v3 = 8 * a2;
      while (1)
      {
        uint8x8_t v4 = (uint8x8_t)vcnt_s8(*v2);
        v4.i16[0] = vaddlv_u8(v4);
        BOOL v5 = __OFADD__(result, v4.u32[0]);
        uint64_t result = (int8x8_t *)((char *)result + v4.u32[0]);
        if (v5) {
          break;
        }
        ++v2;
        v3 -= 8;
        if (!v3) {
          return result;
        }
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _UnsafeBitset.Word.count.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v20 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))((char *)&v20 - v14, 1, 1, a4);
  uint64_t v22 = a4;
  uint64_t v23 = v15;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v17 = v26;
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(a1, (uint64_t (*)(void **))partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:));
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  uint64_t v18 = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, a4);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v18, v13, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v15 - v12;
  uint64_t result = a3(a1);
  if (!v5)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v13, 0, 1, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
  }
  return result;
}

uint64_t partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(uint64_t a1)
{
  return closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(a1, *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t static _UnsafeBitset._withTemporaryBitset(capacity:run:)(uint64_t a1, uint64_t (*a2)(void **))
{
  return specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(a1, a2);
}

unint64_t static _UnsafeBitset.wordCount(forCapacity:)(uint64_t a1)
{
  return (unint64_t)(a1 + 63) >> 6;
}

uint64_t static _UnsafeBitset.Word.empty.getter()
{
  return 0;
}

unint64_t static _UnsafeBitset.word(for:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.Word.capacity.getter()
{
  return 64;
}

uint64_t static _UnsafeBitset.bit(for:)(char a1)
{
  return a1 & 0x3F;
}

unint64_t static _UnsafeBitset.split(_:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.join(word:bit:)(uint64_t a1, uint64_t a2)
{
  return a2 + (a1 << 6);
}

uint64_t _UnsafeBitset.capacity.getter(uint64_t a1, uint64_t a2)
{
  return a2 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.isValid(_:)(Swift::Int a1)
{
  return a1 >= 0 && a1 < v1 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.contains(_:)(Swift::Int a1)
{
  return (*(void *)(v1 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.contains(_:)(Swift::Int a1)
{
  return (v1 >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.insert(_:)(Swift::Int a1)
{
  unint64_t v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(*v1 + v2);
  *(void *)(*v1 + v2) = v3 | (1 << a1);
  if ((v3 & (1 << a1)) == 0)
  {
    uint64_t v4 = v1[2];
    BOOL v5 = __OFADD__(v4, 1);
    uint64_t v6 = v4 + 1;
    if (v5)
    {
      __break(1u);
      return a1;
    }
    v1[2] = v6;
  }
  LOBYTE(a1) = (v3 & (1 << a1)) == 0;
  return a1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.insert(_:)(Swift::Int a1)
{
  uint64_t v2 = 1 << a1;
  Swift::Bool result = (*v1 & (1 << a1)) == 0;
  *v1 |= v2;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.remove(_:)(Swift::Int a1)
{
  unint64_t v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(*v1 + v2);
  *(void *)(*v1 + v2) = v3 & ~(1 << a1);
  if ((v3 & (1 << a1)) != 0)
  {
    uint64_t v4 = v1[2];
    BOOL v5 = __OFSUB__(v4, 1);
    uint64_t v6 = v4 - 1;
    if (v5)
    {
      __break(1u);
      return a1;
    }
    v1[2] = v6;
  }
  LOBYTE(a1) = (v3 & (1 << a1)) != 0;
  return a1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.remove(_:)(Swift::Int a1)
{
  uint64_t v2 = 1 << a1;
  Swift::Bool result = (*v1 & (1 << a1)) != 0;
  *v1 &= ~v2;
  return result;
}

Swift::Void __swiftcall _UnsafeBitset.clear()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= 1)
  {
    if (*(void *)v0)
    {
      bzero(*(void **)v0, 8 * v1);
      *(void *)(v0 + 16) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall _UnsafeBitset.insertAll(upTo:)(Swift::Int upTo)
{
  if (upTo >= 1)
  {
    if ((unint64_t)upTo >= 0x40)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      uint64_t v3 = *(void **)v1;
      unint64_t v4 = (unint64_t)upTo >> 6;
      while (1)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)~*v3);
        v5.i16[0] = vaddlv_u8(v5);
        BOOL v6 = __OFADD__(v2, v5.u32[0]);
        v2 += v5.u32[0];
        if (v6) {
          break;
        }
        *v3++ = -1;
        if (!--v4)
        {
          *(void *)(v1 + 16) = v2;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_7:
    Swift::Int v7 = upTo & 0x3F;
    if ((upTo & 0x3F) != 0)
    {
      unint64_t v8 = 8 * ((unint64_t)upTo >> 6);
      uint64_t v9 = *(void *)(*(void *)v1 + v8);
      uint64_t v10 = -1 << v7;
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)(v9 & ~(-1 << v7)));
      v11.i16[0] = vaddlv_u8(v11);
      Swift::Int v12 = v7 - v11.u32[0];
      *(void *)(*(void *)v1 + v8) = v9 | ~v10;
      uint64_t v13 = *(void *)(v1 + 16);
      BOOL v6 = __OFADD__(v13, v12);
      Swift::Int v14 = v13 + v12;
      if (v6)
      {
LABEL_12:
        __break(1u);
        return;
      }
      *(void *)(v1 + 16) = v14;
    }
  }
}

uint64_t static _UnsafeBitset.Word.allBits.getter()
{
  return -1;
}

Swift::Int __swiftcall _UnsafeBitset.Word.insert(bitsBelow:)(Swift::Int bitsBelow)
{
  uint64_t v2 = -1 << bitsBelow;
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)(*v1 & ~(-1 << bitsBelow)));
  v3.i16[0] = vaddlv_u8(v3);
  BOOL v4 = __OFSUB__(bitsBelow, v3.u32[0]);
  Swift::Int result = bitsBelow - v3.u32[0];
  if (v4) {
    __break(1u);
  }
  else {
    *v1 |= ~v2;
  }
  return result;
}

Swift::Void __swiftcall _UnsafeBitset.removeAll(upTo:)(Swift::Int upTo)
{
  if (upTo >= 1)
  {
    if ((unint64_t)upTo >= 0x40)
    {
      uint64_t v2 = *(void *)(v1 + 16);
      uint8x8_t v3 = *(int8x8_t **)v1;
      unint64_t v4 = (unint64_t)upTo >> 6;
      while (1)
      {
        uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v3);
        v5.i16[0] = vaddlv_u8(v5);
        BOOL v6 = __OFSUB__(v2, v5.u32[0]);
        v2 -= v5.u32[0];
        if (v6) {
          break;
        }
        *v3++ = 0;
        if (!--v4)
        {
          *(void *)(v1 + 16) = v2;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_7:
    if ((upTo & 0x3F) != 0)
    {
      unint64_t v7 = 8 * ((unint64_t)upTo >> 6);
      uint64_t v8 = -1 << (upTo & 0x3F);
      uint64_t v9 = *(void *)(*(void *)v1 + v7);
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)(v9 & ~v8));
      v10.i16[0] = vaddlv_u8(v10);
      *(void *)(*(void *)v1 + v7) = v9 & v8;
      uint64_t v11 = *(void *)(v1 + 16);
      BOOL v6 = __OFSUB__(v11, v10.u32[0]);
      uint64_t v12 = v11 - v10.u32[0];
      if (v6)
      {
LABEL_12:
        __break(1u);
        return;
      }
      *(void *)(v1 + 16) = v12;
    }
  }
}

Swift::Int __swiftcall _UnsafeBitset.Word.remove(bitsBelow:)(Swift::Int bitsBelow)
{
  uint64_t v2 = -1 << bitsBelow;
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)(*v1 & ~(-1 << bitsBelow)));
  v3.i16[0] = vaddlv_u8(v3);
  Swift::Int result = v3.u32[0];
  *v1 &= v2;
  return result;
}

uint64_t _UnsafeBitset.underestimatedCount.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t *_UnsafeBitset.makeIterator()@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  if (a2 < 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = (uint64_t *)*result;
  }
  *a4 = result;
  a4[1] = (uint64_t *)a2;
  a4[2] = a3;
  a4[3] = 0;
  a4[4] = v4;
  return result;
}

uint64_t *_UnsafeBitset.Iterator.init(_:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  if (a2 < 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = (uint64_t *)*result;
  }
  *a4 = result;
  a4[1] = (uint64_t *)a2;
  a4[2] = a3;
  a4[3] = 0;
  a4[4] = v4;
  return result;
}

uint64_t _UnsafeBitset.Iterator.bitset.getter()
{
  return *(void *)v0;
}

uint64_t _UnsafeBitset.Iterator.index.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t _UnsafeBitset.Iterator.index.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*_UnsafeBitset.Iterator.index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _UnsafeBitset.Iterator.word.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t _UnsafeBitset.Iterator.word.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*_UnsafeBitset.Iterator.word.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Iterator.next()()
{
  unint64_t v1 = v0[4];
  if (v1)
  {
    Swift::Bool v2 = 0;
    v0[4] = (v1 - 1) & v1;
    Swift::Int v3 = __clz(__rbit64(v1)) | (v0[3] << 6);
    goto LABEL_14;
  }
  uint64_t v4 = v0[3];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = v0[1];
  if (v6 >= v7)
  {
LABEL_11:
    Swift::Int v3 = 0;
    Swift::Bool v2 = 1;
    goto LABEL_14;
  }
  v0[3] = v6;
  uint64_t v8 = *v0;
  unint64_t v9 = *(void *)(*v0 + 8 * v6);
  v0[4] = v9;
  if (!v9)
  {
    while (1)
    {
      uint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if (v10 >= v7) {
        goto LABEL_11;
      }
      v0[3] = v10;
      unint64_t v9 = *(void *)(v8 + 8 * v10);
      v0[4] = v9;
      ++v6;
      if (v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = v6;
LABEL_7:
  Swift::Bool v2 = 0;
  v0[4] = (v9 - 1) & v9;
  Swift::Int v3 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_14:
  result.value = v3;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Word.next()()
{
  unint64_t v1 = *v0;
  if (*v0)
  {
    Swift::Int v2 = __clz(__rbit64(v1));
    unint64_t *v0 = (v1 - 1) & v1;
  }
  else
  {
    Swift::Int v2 = 0;
  }
  Swift::Bool v3 = v1 == 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Iterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = _UnsafeBitset.Iterator.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void protocol witness for Sequence.makeIterator() in conformance _UnsafeBitset(uint64_t a1@<X8>)
{
  Swift::Int v2 = *(uint64_t **)v1;
  long long v3 = *(_OWORD *)(v1 + 8);
  if (*(uint64_t *)(v1 + 8) < 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v2;
  }
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v4;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UnsafeBitset()
{
  return *(void *)(v0 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
}

unint64_t **protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset(unint64_t **a1, unint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *(unint64_t **)v3, *(void *)(v3 + 8), *(unint64_t **)(v3 + 16));
}

uint64_t _UnsafeBitset.Word.value.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*_UnsafeBitset.Word.value.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

BOOL _UnsafeBitset.Word.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t _UnsafeBitset.Word.underestimatedCount.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UnsafeBitset.Word()
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset.Word()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*v0);
}

unint64_t *protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset.Word(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

void protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Word(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    unint64_t v3 = __clz(__rbit64(v2));
    unint64_t *v1 = (v2 - 1) & v2;
  }
  else
  {
    unint64_t v3 = 0;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v2 == 0;
}

uint64_t specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(uint64_t a1, uint64_t (*a2)(void **))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v3 = (unint64_t)(a1 + 63) >> 6;
  if ((unint64_t)(a1 + 63) <= 0xBF)
  {
    v6[0] = 0;
    v6[1] = 0;
    uint64_t v7 = v6;
    unint64_t v8 = (unint64_t)(a1 + 63) >> 6;
    uint64_t v9 = 0;
    return a2(&v7);
  }
  else
  {
    uint64_t v4 = (void *)swift_slowAlloc();
    bzero(v4, 8 * v3);
    uint64_t v7 = v4;
    unint64_t v8 = v3;
    uint64_t v9 = 0;
    a2(&v7);
    return MEMORY[0x261185880](v4, -1, -1);
  }
}

unint64_t lazy protocol witness table accessor for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator;
  if (!lazy protocol witness table cache variable for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word()
{
  unint64_t result = lazy protocol witness table cache variable for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word;
  if (!lazy protocol witness table cache variable for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnsafeBitset(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _UnsafeBitset(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitset()
{
  return &type metadata for _UnsafeBitset;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnsafeBitset.Iterator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _UnsafeBitset.Iterator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitset.Iterator()
{
  return &type metadata for _UnsafeBitset.Iterator;
}

ValueMetadata *type metadata accessor for _UnsafeBitset.Word()
{
  return &type metadata for _UnsafeBitset.Word;
}

void *_s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(uint64_t a1, unsigned char *a2, void *(*a3)(char *__return_ptr, void **))
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v6 = (unint64_t)(a1 + 63) >> 6;
  if ((unint64_t)(a1 + 63) < 0xC0)
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v11 = v10;
    unint64_t v12 = (unint64_t)(a1 + 63) >> 6;
    uint64_t v13 = 0;
    __n128 result = a3(&v9, &v11);
    if (!v3) {
      *a2 = v9;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, 8 * v6);
    uint64_t v11 = v7;
    unint64_t v12 = v6;
    uint64_t v13 = 0;
    a3((char *)v10, &v11);
    if (!v3) {
      *a2 = v10[0];
    }
    return (void *)MEMORY[0x261185880](v7, -1, -1);
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v4 = 0;
  BOOL v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    swift_bridgeObjectRelease();
    swift_release();
    if (v12)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v8 = v5[2];
      unint64_t v7 = v5[3];
      if (v8 >= v7 >> 1) {
        BOOL v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
      }
      v5[2] = v8 + 1;
      unint64_t v6 = &v5[4 * v8];
      *((_OWORD *)v6 + 2) = v10;
      *((unsigned char *)v6 + 48) = v11 & 1;
      v6[7] = v12;
    }
    ++v4;
  }
  while (v3 != v4);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSs5NeverOTg504_s11d51Graph15TopologicalSortV4PathV11debugStringSSvgSSAA6F53Ccfu_32f1d66dc559a448f4641180596f452bc7AHSSTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v16;
    unint64_t v15 = v1 & 0xC000000000000001;
    unint64_t v6 = v1;
    while (v2 != v5)
    {
      if (v15) {
        id v7 = (id)MEMORY[0x2611848A0](v5, v1);
      }
      else {
        id v7 = *(id *)(v1 + 8 * v5 + 32);
      }
      unint64_t v8 = v7;
      uint64_t v9 = SGEdge.debugDescription.getter();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      ++v5;
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      unint64_t v1 = v6;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v13 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  for (v5 &= v5 - 1; ; uint64_t v5 = (v9 - 1) & v9)
  {
    outlined copy of TextureSource();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized closure #5 in inferTextureAssignments(from:)(v11);
    outlined consume of TextureSource();
    if (v1)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v7 >= v13) {
      return swift_release();
    }
    uint64_t v9 = *(void *)(v2 + 8 * v7);
    if (!v9)
    {
      int64_t v10 = v7 + 1;
      if (v7 + 1 >= v13) {
        return swift_release();
      }
      uint64_t v9 = *(void *)(v2 + 8 * v10);
      if (v9) {
        goto LABEL_14;
      }
      int64_t v10 = v7 + 2;
      if (v7 + 2 >= v13) {
        return swift_release();
      }
      uint64_t v9 = *(void *)(v2 + 8 * v10);
      if (v9) {
        goto LABEL_14;
      }
      int64_t v10 = v7 + 3;
      if (v7 + 3 >= v13) {
        return swift_release();
      }
      uint64_t v9 = *(void *)(v2 + 8 * v10);
      if (v9)
      {
LABEL_14:
        int64_t v7 = v10;
        continue;
      }
      int64_t v12 = v7 + 4;
      if (v7 + 4 >= v13) {
        return swift_release();
      }
      uint64_t v9 = *(void *)(v2 + 8 * v12);
      v7 += 4;
      if (!v9) {
        break;
      }
    }
LABEL_15:
    ;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v13) {
      return swift_release();
    }
    uint64_t v9 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v9) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t SGNode.BOOLValue.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___SGNode_data);
  if ((*(unsigned char *)(v0 + OBJC_IVAR___SGNode_data + 80) & 0xC0) == 0x80
    && ((*(unsigned char *)(v0 + OBJC_IVAR___SGNode_data + 80) & 0x3F) == 0 ? (BOOL v2 = *v1 == 1) : (BOOL v2 = 0), v2))
  {
    return v1[2] & 1;
  }
  else
  {
    return 2;
  }
}

void *SGNode.constantStringValue.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___SGNode_data;
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR___SGNode_data + 80);
  if ((v2 & 0xC0) != 0x80) {
    return 0;
  }
  if ((v2 & 0x3F) != 6 || *(void *)v1 != 11) {
    return 0;
  }
  uint64_t v4 = *(void **)(v1 + 16);
  outlined copy of SGDataTypeStorage(v4, *(id *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), 6);
  return v4;
}

void *SGNode.constantAssetValue.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___SGNode_data;
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR___SGNode_data + 80);
  if ((v2 & 0xC0) != 0x80) {
    return 0;
  }
  if ((v2 & 0x3F) != 6 || *(void *)v1 != 13) {
    return 0;
  }
  uint64_t v4 = *(void **)(v1 + 16);
  outlined copy of SGDataTypeStorage(v4, *(id *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), 6);
  return v4;
}

uint64_t TopologicalSort.Path.initialNode.getter()
{
  return MEMORY[0x270F9A8A0]();
}

uint64_t TopologicalSort.Path.isMaterialUniform.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized TopologicalSort.Path.isMaterialUniform.getter(a1, a3);
}

uint64_t TopologicalSort.Path.sourceNode.getter(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (char *)MEMORY[0x2611848A0](0, a1);
    goto LABEL_6;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v4 = (char *)*(id *)(a1 + 32);
LABEL_6:
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    unint64_t v6 = (char *)*(id *)&v5[OBJC_IVAR___SGEdge_from];

    int64_t v7 = &v6[OBJC_IVAR___SGOutput_node];
    swift_beginAccess();
    uint64_t v8 = MEMORY[0x261185960](v7);

    return v8;
  }
  __break(1u);
  return result;
}

uint64_t TopologicalSort.Path.hasValue.getter(unint64_t a1, uint64_t a2, void *a3)
{
  return specialized TopologicalSort.Path.hasValue.getter(a1, a3);
}

uint64_t TopologicalSort.Path.debugString.getter()
{
  return TopologicalSort.Path.debugString.getter();
}

{
  unint64_t v0;
  uint64_t v1;

  uint64_t v0 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSs5NeverOTg504_s11d51Graph15TopologicalSortV4PathV11debugStringSSvgSSAA6F53Ccfu_32f1d66dc559a448f4641180596f452bc7AHSSTf3nnnpk_nTf1cn_nTm(v0);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t TopologicalSort.path(to:on:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, unint64_t a6, uint64_t a7, void *a8)
{
  return specialized TopologicalSort.path(to:on:)(a1, a2, a3, a4, a5, a6, a8);
}

void closure #2 in TopologicalSort.path(to:on:)(unint64_t *a1, char **a2)
{
  uint64_t v6 = v2;
  uint64_t v7 = (uint64_t)a1;
  uint64_t v8 = *a2;
  unint64_t v9 = (unint64_t)a2[2];
  unint64_t v10 = *a1;
  if (!(*a1 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11) {
    goto LABEL_69;
  }
LABEL_3:
  unint64_t v12 = v11 - 1;
  if (__OFSUB__(v11, 1)) {
    goto LABEL_73;
  }
  if ((v10 & 0xC000000000000001) == 0)
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      int64_t v13 = (char *)*(id *)(v10 + 8 * v12 + 32);
      goto LABEL_8;
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_bridgeObjectRetain_n();
    uint64_t v51 = v3;
    uint64_t v20 = v68;
    outlined copy of NodeData((id)v9, (int)v4, v70, v68, v64, v65, v66, v67, (uint64_t)v5, v6, v63);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    LODWORD(v4) = v69;
    uint64_t v21 = v70;
    if (v18)
    {
LABEL_15:
      unint64_t v9 = v10 & 0xC000000000000001;
      uint64_t v7 = 4;
      while (1)
      {
        uint64_t v8 = (char *)(v7 - 4);
        unint64_t v12 = v9 ? MEMORY[0x2611848A0](v7 - 4, v10) : (unint64_t)*(id *)(v10 + 8 * v7);
        uint64_t v5 = (char *)v12;
        uint64_t v22 = v7 - 3;
        if (__OFADD__(v8, 1)) {
          goto LABEL_72;
        }
        uint64_t v23 = (uint64_t *)(v12 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        uint64_t v24 = *v23;
        uint64_t v6 = *(void *)&v71[v73];
        uint64_t v25 = (void *)(v6 + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        if (v24 == *v25)
        {
          BOOL v26 = *(void *)&v5[OBJC_IVAR___SGInput_name] == *(void *)(v6 + OBJC_IVAR___SGOutput_name)
             && *(void *)&v5[OBJC_IVAR___SGInput_name + 8] == *(void *)(v6 + OBJC_IVAR___SGOutput_name + 8);
          if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {

            swift_bridgeObjectRelease_n();
            unint64_t v27 = &v5[OBJC_IVAR___SGInput_edge];
            swift_beginAccess();
            uint64_t v28 = (void *)MEMORY[0x261185960](v27);
            if (!v28)
            {
              outlined consume of NodeData(v59, v69, v70, v68, v64, v65, v66, v67, v58, v57, v63);

              goto LABEL_80;
            }
            id v29 = v28;
            MEMORY[0x261184120]();
            if (*(void *)((*v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            outlined consume of NodeData(v59, v69, v70, v68, v64, v65, v66, v67, v58, v57, v63);
            return;
          }
        }

        ++v7;
        BOOL v26 = v22 == v18;
        uint64_t v20 = v68;
        LODWORD(v4) = v69;
        uint64_t v21 = v70;
        if (v26) {
          goto LABEL_79;
        }
      }
    }
    goto LABEL_79;
  }
LABEL_74:
  int64_t v13 = (char *)MEMORY[0x2611848A0](v12, v10);
LABEL_8:
  uint64_t v3 = v13;
  swift_bridgeObjectRelease();
  uint64_t v73 = OBJC_IVAR___SGEdge_from;
  uint64_t v14 = *(void *)&v3[OBJC_IVAR___SGEdge_from] + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x261185960](v14);
  if (!v15)
  {

    return;
  }
  uint64_t v16 = (void *)v15;
  if ((char *)v15 != v8)
  {

    return;
  }
  uint64_t v17 = (unint64_t *)&v8[OBJC_IVAR___SGNode_data];
  if ((v8[OBJC_IVAR___SGNode_data + 80] & 0xC0) != 0x40)
  {
    uint64_t v30 = &v8[OBJC_IVAR___SGNode_graph];
    swift_beginAccess();
    uint64_t v31 = MEMORY[0x261185960](v30);
    if (v31)
    {
      uint64_t v32 = (void *)v31;
      id v33 = *(id *)(v31 + OBJC_IVAR___SGGraph_argumentsNode);

      type metadata accessor for SGNode();
      uint64_t v5 = v8;
      LOBYTE(v32) = static NSObject.== infix(_:_:)();

      if (v32)
      {
        if (!v9)
        {

          return;
        }
        unint64_t v10 = *(void *)(v9 + OBJC_IVAR___SGNode_inputs);
        uint64_t v70 = v5;
        uint64_t v71 = v3;
        uint64_t v60 = (void *)v7;
        if (v10 >> 62)
        {
          swift_bridgeObjectRetain_n();
          char v56 = v3;
          unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
          if (v9)
          {
LABEL_36:
            uint64_t v35 = 4;
            do
            {
              uint64_t v5 = (char *)(v35 - 4);
              unint64_t v36 = (v10 & 0xC000000000000001) != 0
                  ? (char *)MEMORY[0x2611848A0](v35 - 4, v10)
                  : (char *)*(id *)(v10 + 8 * v35);
              uint64_t v4 = v36;
              uint64_t v3 = (char *)(v35 - 3);
              if (__OFADD__(v5, 1)) {
                goto LABEL_77;
              }
              unint64_t v37 = &v36[OBJC_IVAR___SGInput_type];
              swift_beginAccess();
              uint64_t v38 = *(void *)v37;
              uint64_t v6 = *(void *)&v71[v73];
              uint64_t v39 = (void *)(v6 + OBJC_IVAR___SGOutput_type);
              swift_beginAccess();
              if (v38 == *v39)
              {
                BOOL v40 = *(void *)&v4[OBJC_IVAR___SGInput_name] == *(void *)(v6 + OBJC_IVAR___SGOutput_name)
                   && *(void *)&v4[OBJC_IVAR___SGInput_name + 8] == *(void *)(v6 + OBJC_IVAR___SGOutput_name + 8);
                if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {

                  swift_bridgeObjectRelease_n();
                  unint64_t v41 = &v4[OBJC_IVAR___SGInput_edge];
                  swift_beginAccess();
                  uint64_t v42 = (void *)MEMORY[0x261185960](v41);
                  if (!v42)
                  {

                    uint64_t v50 = v70;
                    goto LABEL_81;
                  }
                  id v43 = v42;
                  MEMORY[0x261184120]();
                  if (*(void *)((*v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v60 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();

                  return;
                }
              }

              ++v35;
            }
            while (v3 != (char *)v9);
          }
        }
        else
        {
          unint64_t v9 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          unint64_t v34 = v3;
          if (v9) {
            goto LABEL_36;
          }
        }

        swift_bridgeObjectRelease_n();
        return;
      }
    }
    unint64_t v44 = *(void *)&v8[OBJC_IVAR___SGNode_inputs];
    uint64_t v72 = MEMORY[0x263F8EE78];
    if (v44 >> 62)
    {
      uint64_t v52 = v3;
      swift_bridgeObjectRetain();
      unint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v10 = v12;
      if (v12) {
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t v10 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
      char v45 = v3;
      unint64_t v12 = swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_54:
        uint64_t v61 = v7;
        uint64_t v62 = v8;
        uint64_t v8 = v3;
        unint64_t v9 = 0;
        while (1)
        {
          if ((v44 & 0xC000000000000001) != 0)
          {
            unint64_t v12 = MEMORY[0x2611848A0](v9, v44);
          }
          else
          {
            if (v9 >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            unint64_t v12 = (unint64_t)*(id *)(v44 + 8 * v9 + 32);
          }
          uint64_t v5 = (char *)v12;
          uint64_t v6 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_71;
          }
          uint64_t v7 = v10;
          unint64_t v46 = (uint64_t *)(v12 + OBJC_IVAR___SGInput_type);
          swift_beginAccess();
          uint64_t v47 = *v46;
          uint64_t v48 = (void *)(*(void *)&v3[v73] + OBJC_IVAR___SGOutput_type);
          swift_beginAccess();
          if (v47 == *v48)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            unint64_t v12 = specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
          unint64_t v10 = v7;
          ++v9;
          if (v6 == v7)
          {
            uint64_t v49 = v72;
            uint64_t v7 = v61;
            uint64_t v8 = v62;
            goto LABEL_84;
          }
        }
      }
    }
    uint64_t v49 = MEMORY[0x263F8EE78];
LABEL_84:
    swift_bridgeObjectRelease();

    if (v49 < 0 || (v49 & 0x4000000000000000) != 0)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_87:
        if ((v49 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = v8;
          uint64_t v53 = (char *)MEMORY[0x2611848A0](0, v49);
        }
        else
        {
          if (!*(void *)(v49 + 16))
          {
            __break(1u);
            goto LABEL_98;
          }
          uint64_t v5 = v8;
          uint64_t v53 = (char *)*(id *)(v49 + 32);
        }
        uint64_t v8 = v53;
        swift_release();
        uint64_t v54 = &v8[OBJC_IVAR___SGInput_edge];
        swift_beginAccess();
        unint64_t v55 = (void *)MEMORY[0x261185960](v54);
        if (!v55)
        {

          return;
        }
        unint64_t v44 = v55;
        MEMORY[0x261184120]();
        if (*(void *)((*(void *)v7 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v7 & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
        {
LABEL_92:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          return;
        }
LABEL_98:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_92;
      }
    }
    else if (*(void *)(v49 + 16))
    {
      goto LABEL_87;
    }

    swift_release();
    return;
  }
  unsigned __int8 v63 = v8[OBJC_IVAR___SGNode_data + 80];
  unint64_t v9 = *v17;
  uint64_t v4 = (char *)v17[1];
  uint64_t v70 = (char *)v17[2];
  id v68 = (id)v17[3];
  uint64_t v64 = v17[4];
  uint64_t v65 = v17[5];
  uint64_t v5 = (char *)v17[8];
  unint64_t v66 = v17[6];
  unint64_t v67 = v17[7];
  uint64_t v6 = v17[9];
  unint64_t v10 = *(void *)(*(void *)(*v17 + OBJC_IVAR___SGGraph_resultsNode) + OBJC_IVAR___SGNode_inputs);
  int v69 = (int)v4;
  uint64_t v71 = v3;
  uint64_t v60 = (void *)v7;
  uint64_t v62 = v8;
  uint64_t v58 = (uint64_t)v5;
  uint64_t v59 = (void *)*v17;
  uint64_t v57 = v6;
  if (v10 >> 62) {
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  uint64_t v19 = v3;
  uint64_t v20 = v68;
  outlined copy of NodeData((id)v9, (int)v4, v70, v68, v64, v65, v66, v67, (uint64_t)v5, v6, v63);
  uint64_t v21 = v70;
  if (v18) {
    goto LABEL_15;
  }
LABEL_79:

  swift_bridgeObjectRelease_n();
  outlined consume of NodeData(v59, (int)v4, v21, v20, v64, v65, v66, v67, v58, v57, v63);

LABEL_80:
  uint64_t v50 = v62;
LABEL_81:
}

uint64_t inferLightingModel(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  return specialized inferLightingModel(from:in:)(a1, a2, a3, a4, a6);
}

uint64_t inferBlendMode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  return specialized inferBlendMode(from:in:)(a1, a2, a3, a4, a6);
}

uint64_t inferHasPremultipliedAlpha(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  return specialized inferHasPremultipliedAlpha(from:in:)(a1, a2, a3, a4, a6) & 1;
}

uint64_t inferApplyPostProcessToneMap(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  return specialized inferApplyPostProcessToneMap(from:in:)(a1, a2, a3, a4, a6) & 1;
}

void conditionallyInsertDiscardNode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
}

uint64_t inferHasConnectedLightSpillNodes(in:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (void *)(a1 + 32);
    while (1)
    {
      uint64_t v3 = *v2 + OBJC_IVAR___SGNode_data;
      if (*(unsigned __int8 *)(v3 + 80) <= 0x3Fu)
      {
        uint64_t v4 = *(void *)v3;
        uint64_t v5 = *(void **)(v3 + 8);
        BOOL v6 = qword_270997F00 == *(void *)v3 && v5 == off_270997F08;
        if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        BOOL v7 = qword_270997F10 == v4 && v5 == off_270997F18;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      v2 += 3;
      if (!--v1) {
        goto LABEL_16;
      }
    }
    uint64_t v8 = 1;
  }
  else
  {
LABEL_16:
    uint64_t v8 = 0;
  }
  swift_arrayDestroy();
  return v8;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  unint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t inferShaderHasCustomUniform(from:shaderType:)(char *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)&a1[OBJC_IVAR___SGGraph_resultsNode] + OBJC_IVAR___SGNode_inputs);
  uint64_t v42 = MEMORY[0x263F8EE78];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result)
    {
LABEL_3:
      if (v4 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0) {
          BOOL v7 = (char *)MEMORY[0x2611848A0](i, v3);
        }
        else {
          BOOL v7 = (char *)*(id *)(v3 + 8 * i + 32);
        }
        uint64_t v8 = v7;
        unint64_t v9 = &v7[OBJC_IVAR___SGInput_type];
        swift_beginAccess();
        if (*(void *)v9 == a2)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v42;
      uint64_t v11 = v39;
      if (v42 < 0) {
        goto LABEL_46;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t v11 = v39;
  if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
    goto LABEL_46;
  }
LABEL_16:
  if ((v10 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    int64_t v13 = a1;
    swift_retain();
    if (!v12)
    {
LABEL_47:

      swift_release_n();
      char v36 = 0;
      return v36 & 1;
    }
    goto LABEL_18;
  }
LABEL_46:
  unint64_t v37 = a1;
  swift_retain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  if (!v12) {
    goto LABEL_47;
  }
LABEL_18:
  uint64_t v14 = 0;
  uint64_t v40 = OBJC_IVAR___SGGraph_argumentsNode;
  uint64_t v38 = v12;
  while (1)
  {
    if ((v10 & 0xC000000000000001) != 0) {
      uint64_t v15 = (char *)MEMORY[0x2611848A0](v14, v10);
    }
    else {
      uint64_t v15 = (char *)*(id *)(v10 + 32 + 8 * v14);
    }
    uint64_t v16 = v15;
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v18 = &v15[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    uint64_t v19 = MEMORY[0x261185960](v18);
    if (v19) {
      break;
    }

LABEL_20:
    if (v14 == v12) {
      goto LABEL_47;
    }
  }
  uint64_t v20 = (void *)v19;
  uint64_t v21 = *(char **)(v19 + OBJC_IVAR___SGEdge_from);
  uint64_t v22 = (uint64_t *)&v21[OBJC_IVAR___SGOutput_attachment];
  swift_beginAccess();
  uint64_t v23 = (void *)v22[1];
  if (!v23)
  {

    goto LABEL_20;
  }
  uint64_t v24 = *v22;
  uint64_t v25 = v21;
  swift_bridgeObjectRetain();
  BOOL v26 = (void *)SGGraph.node(named:)(v24, v23);

  uint64_t v27 = swift_bridgeObjectRelease();
  if (!v26)
  {

    goto LABEL_42;
  }
  MEMORY[0x270FA5388](v27);
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v26, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:));
  if (v11)
  {

    swift_release_n();
    return v36 & 1;
  }
  specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(v26);
  uint64_t v29 = v28;
  swift_release();
  swift_release();
  uint64_t v30 = *(void *)(v29 + 16);
  if (!v30)
  {
LABEL_40:

    swift_release();
    swift_release();
    uint64_t v11 = 0;
LABEL_42:
    uint64_t v12 = v38;
    goto LABEL_20;
  }
  uint64_t v31 = 0;
  while (1)
  {
    uint64_t v32 = (void *)(*(void *)(*(void *)(v29 + 8 * v31 + 32) + OBJC_IVAR___SGEdge_from)
                   + OBJC_IVAR___SGOutput_attachment);
    swift_beginAccess();
    uint64_t v33 = v32[1];
    if (v33)
    {
      unint64_t v34 = (void *)(*(void *)&a1[v40] + OBJC_IVAR___SGNode_name);
      BOOL v35 = *v34 == *v32 && v33 == v34[1];
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
    }
    if (v30 == ++v31) {
      goto LABEL_40;
    }
  }

  swift_release();
  swift_release();

  swift_release_n();
  char v36 = 1;
  return v36 & 1;
}

uint64_t inferTextureAssignments(from:)()
{
  uint64_t result = (uint64_t)SGGraph.topologicalSort()();
  if (!v0)
  {
    BOOL v5 = v4;
    long long v118 = v3;
    long long v119 = v2;
    unint64_t v6 = MEMORY[0x263F8EE78];
    *(void *)&long long v135 = MEMORY[0x263F8EE78];
    uint64_t v7 = *(void *)(result + 16);
    unint64_t v125 = result;
    if (v7)
    {
      uint64_t v8 = result + 32;
      swift_bridgeObjectRetain_n();
      id v124 = v119;
      id v123 = v118;
      id v127 = v5;
      uint64_t v9 = 0;
      uint64_t v120 = v8;
      uint64_t v121 = v7;
      while (1)
      {
        uint64_t v11 = (char **)(v8 + 24 * v9);
        uint64_t v12 = *v11;
        if ((*v11)[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu) {
          break;
        }
        uint64_t v10 = v6;
LABEL_5:
        ++v9;
        specialized Array.append<A>(contentsOf:)(v10);
        if (v9 == v7)
        {

          swift_bridgeObjectRelease_n();
          uint64_t v32 = v135;
          id v33 = v127;
          goto LABEL_24;
        }
      }
      uint64_t v14 = v11[1];
      int64_t v13 = v11[2];
      unint64_t v15 = *(void *)&v12[OBJC_IVAR___SGNode_inputs];
      v138[0] = v6;
      if (v15 >> 62)
      {
        uint64_t v24 = v13;
        uint64_t v25 = v12;
        BOOL v26 = v14;
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        if (v16) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v17 = v13;
        uint64_t v18 = v12;
        uint64_t v19 = v14;
        swift_bridgeObjectRetain();
        if (v16)
        {
LABEL_9:
          if (v16 < 1) {
            goto LABEL_91;
          }
          uint64_t v129 = v13;
          for (uint64_t i = 0; i != v16; ++i)
          {
            if ((v15 & 0xC000000000000001) != 0) {
              uint64_t v21 = (char *)MEMORY[0x2611848A0](i, v15);
            }
            else {
              uint64_t v21 = (char *)*(id *)(v15 + 8 * i + 32);
            }
            uint64_t v22 = v21;
            uint64_t v23 = &v21[OBJC_IVAR___SGInput_type];
            swift_beginAccess();
            if (*(void *)v23 == 13)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v6 = v138[0];
          int64_t v13 = v129;
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRelease();
LABEL_21:
      uint64_t v27 = v13;
      uint64_t v28 = v12;
      uint64_t v29 = v14;
      swift_bridgeObjectRetain();
      id v130 = v124;
      id v30 = v123;
      id v31 = v127;
      uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AF15TopologicalSortV4PathVs5NeverOTg504_s11d73Graph23inferTextureAssignments4fromSayAA05TypedD0VGAA7SGGraphC_tKFSayAA15gh2V4i5VGAJ7b10VXEfU_AlA7F7CXEfU0_A2kCVTf1cn_nTf4ngXg_n(v6, v125, v30, v28, v29, v13);
      swift_release();

      swift_bridgeObjectRelease();
      unint64_t v6 = MEMORY[0x263F8EE78];
      uint64_t v8 = v120;
      uint64_t v7 = v121;
      goto LABEL_5;
    }
    id v33 = v4;
    swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x263F8EE78];
LABEL_24:
    swift_bridgeObjectRelease();

    uint64_t v34 = *(void *)(v32 + 16);
    id v128 = v33;
    if (v34)
    {
      swift_bridgeObjectRetain();
      BOOL v35 = (void **)(v32 + 48);
      char v36 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        unint64_t v37 = *v35;
        unint64_t v38 = (unint64_t)*(v35 - 2);
        long long v131 = *((_OWORD *)v35 - 1);
        uint64_t v39 = *(v35 - 1);
        if (v38 >> 62)
        {
          swift_bridgeObjectRetain_n();
          id v46 = v39;
          id v47 = v37;
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v48 > 0)
          {
LABEL_30:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
            }
            unint64_t v44 = v36[2];
            unint64_t v43 = v36[3];
            if (v44 >= v43 >> 1) {
              char v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v36);
            }
            v36[2] = v44 + 1;
            char v45 = &v36[3 * v44];
            *((_OWORD *)v45 + 2) = v131;
            v45[6] = v37;
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v40 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          id v41 = v39;
          id v42 = v37;
          if (v40 > 0) {
            goto LABEL_30;
          }
        }

        swift_bridgeObjectRelease();
LABEL_27:
        v35 += 3;
        if (!--v34)
        {
          swift_bridgeObjectRelease();
          id v33 = v128;
          goto LABEL_39;
        }
      }
    }
    char v36 = (void *)MEMORY[0x263F8EE78];
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v49 = v36[2];
    if (v49)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = (void **)(v36 + 6);
      uint64_t v51 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v52 = (void *)v51;
        uint64_t v53 = *(v50 - 1);
        uint64_t v54 = *v50;
        v138[0] = (unint64_t)*(v50 - 2);
        v138[1] = (unint64_t)v53;
        v138[2] = (unint64_t)v54;
        swift_bridgeObjectRetain();
        id v55 = v53;
        id v56 = v54;
        closure #3 in inferTextureAssignments(from:)(v138, &v135);

        swift_bridgeObjectRelease();
        uint64_t v57 = v137;
        if (v137)
        {
          long long v132 = v135;
          char v58 = v136;
          uint64_t v59 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
          }
          unint64_t v61 = v59[2];
          unint64_t v60 = v59[3];
          uint64_t v62 = v59;
          if (v61 >= v60 >> 1) {
            uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v59);
          }
          v62[2] = v61 + 1;
          uint64_t v51 = (uint64_t)v62;
          unsigned __int8 v63 = &v62[4 * v61];
          *((_OWORD *)v63 + 2) = v132;
          *((unsigned char *)v63 + 48) = v58 & 1;
          v63[7] = v57;
        }
        else
        {
          uint64_t v51 = (uint64_t)v52;
        }
        v50 += 3;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v51 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v64 = (void *)MEMORY[0x263F8EE80];
    *(void *)&long long v135 = MEMORY[0x263F8EE80];
    uint64_t v65 = *(void *)(v51 + 16);
    if (v65)
    {
      swift_bridgeObjectRetain();
      uint64_t v122 = v51;
      unint64_t v66 = (void *)(v51 + 56);
      while (1)
      {
        uint64_t v69 = *(v66 - 3);
        uint64_t v68 = *(v66 - 2);
        char v70 = *((unsigned char *)v66 - 8);
        uint64_t v71 = *v66;
        outlined copy of TextureSource();
        outlined copy of TextureSource();
        swift_retain();
        unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v68, v70);
        uint64_t v74 = v64[2];
        BOOL v75 = (v72 & 1) == 0;
        uint64_t v76 = v74 + v75;
        if (__OFADD__(v74, v75)) {
          break;
        }
        char v77 = v72;
        if (v64[3] < v76)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, 1);
          uint64_t v64 = (void *)v135;
          unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v68, v70);
          if ((v77 & 1) != (v79 & 1)) {
            goto LABEL_92;
          }
          unint64_t v73 = v78;
        }
        if (v77)
        {
          uint64_t v126 = v71;
          uint64_t v133 = v65;
          outlined consume of TextureSource();
          uint64_t v80 = v64[7];
          long long v81 = *(void **)(v80 + 8 * v73);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v80 + 8 * v73) = v81;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            long long v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81[2] + 1, 1, v81);
            *(void *)(v80 + 8 * v73) = v81;
          }
          unint64_t v84 = v81[2];
          unint64_t v83 = v81[3];
          unint64_t v85 = v84 + 1;
          if (v84 >= v83 >> 1)
          {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v83 > 1), v84 + 1, 1, v81);
            unint64_t v85 = v84 + 1;
            long long v81 = v86;
            *(void *)(v80 + 8 * v73) = v86;
          }
          v81[2] = v85;
          unint64_t v67 = &v81[4 * v84];
          v67[4] = v69;
          v67[5] = v68;
          *((unsigned char *)v67 + 48) = v70;
          v67[7] = v126;
          uint64_t v65 = v133;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedTexture>);
          uint64_t v87 = swift_allocObject();
          *(_OWORD *)(v87 + 16) = xmmword_25C418EE0;
          *(void *)(v87 + 32) = v69;
          *(void *)(v87 + 40) = v68;
          *(unsigned char *)(v87 + 48) = v70;
          *(void *)(v87 + 56) = v71;
          v64[(v73 >> 6) + 8] |= 1 << v73;
          uint64_t v88 = v64[6] + 24 * v73;
          *(void *)uint64_t v88 = v69;
          *(void *)(v88 + 8) = v68;
          *(unsigned char *)(v88 + 16) = v70;
          *(void *)(v64[7] + 8 * v73) = v87;
          uint64_t v89 = v64[2];
          BOOL v90 = __OFADD__(v89, 1);
          uint64_t v91 = v89 + 1;
          if (v90) {
            goto LABEL_90;
          }
          v64[2] = v91;
        }
        v66 += 4;
        if (!--v65)
        {
          uint64_t v51 = v122;
          swift_bridgeObjectRelease();
          id v33 = v128;
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
LABEL_67:
      specialized Sequence.forEach(_:)((uint64_t)v64);
      swift_release();
      uint64_t v92 = specialized OrderedDictionary.init<A>(_grouping:by:)(v51);
      uint64_t v94 = v93;
      uint64_t v96 = v95;
      swift_bridgeObjectRelease();
      uint64_t v97 = specialized Sequence.compactMap<A>(_:)(v92, v94, v96);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v98 = v97[2];
      if (v98)
      {
        swift_bridgeObjectRetain();
        char v134 = v97;
        unint64_t v99 = v97 + 7;
        uint64_t v100 = MEMORY[0x263F8EE78];
        uint64_t v101 = v98;
        do
        {
          if ((*(unsigned char *)(v99 - 1) & 1) == 0)
          {
            uint64_t v105 = *(v99 - 3);
            uint64_t v106 = *(v99 - 2);
            uint64_t v107 = *v99;
            swift_retain();
            outlined copy of TextureSource();
            char v108 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v135 = v100;
            if ((v108 & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v100 + 16) + 1, 1);
              uint64_t v100 = v135;
            }
            unint64_t v103 = *(void *)(v100 + 16);
            unint64_t v102 = *(void *)(v100 + 24);
            if (v103 >= v102 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
              uint64_t v100 = v135;
            }
            *(void *)(v100 + 16) = v103 + 1;
            uint64_t v104 = v100 + 32 * v103;
            *(void *)(v104 + 32) = v105;
            *(void *)(v104 + 40) = v106;
            *(unsigned char *)(v104 + 48) = 0;
            *(void *)(v104 + 56) = v107;
          }
          v99 += 4;
          --v101;
        }
        while (v101);
        swift_bridgeObjectRelease();
        uint64_t v109 = v134 + 7;
        uint64_t v110 = MEMORY[0x263F8EE78];
        id v33 = v128;
        do
        {
          if (*((unsigned char *)v109 - 8) == 1)
          {
            uint64_t v114 = *(v109 - 3);
            uint64_t v115 = *(v109 - 2);
            uint64_t v116 = *v109;
            swift_retain();
            outlined copy of TextureSource();
            char v117 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v135 = v110;
            if ((v117 & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v110 + 16) + 1, 1);
              uint64_t v110 = v135;
            }
            unint64_t v112 = *(void *)(v110 + 16);
            unint64_t v111 = *(void *)(v110 + 24);
            if (v112 >= v111 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
              uint64_t v110 = v135;
            }
            *(void *)(v110 + 16) = v112 + 1;
            uint64_t v113 = v110 + 32 * v112;
            *(void *)(v113 + 32) = v114;
            *(void *)(v113 + 40) = v115;
            *(unsigned char *)(v113 + 48) = 1;
            *(void *)(v113 + 56) = v116;
            id v33 = v128;
          }
          v109 += 4;
          --v98;
        }
        while (v98);
      }
      else
      {
        uint64_t v100 = MEMORY[0x263F8EE78];
        uint64_t v110 = MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v135 = v100;
      specialized Array.append<A>(contentsOf:)(v110);

      swift_bridgeObjectRelease();
      return v135;
    }
  }
  return result;
}

void closure #3 in inferTextureAssignments(from:)(unint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (_OWORD *)a1[2];
  if (!(*a1 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v27 = 0xD000000000000023;
    *(void *)(v27 + 8) = 0x800000025C4226D0;
    *(unsigned char *)(v27 + 16) = 20;
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_28;
  }
LABEL_3:
  uint64_t v9 = (void *)(v6 & 0xC000000000000001);
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = (char *)MEMORY[0x2611848A0](0, v6);
  }
  else
  {
    if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v10 = (char *)*(id *)(v6 + 32);
  }
  unint64_t v3 = v10;
  swift_bridgeObjectRelease();
  uint64_t v2 = OBJC_IVAR___SGEdge_from;
  uint64_t v4 = (char *)(*(void *)&v3[OBJC_IVAR___SGEdge_from] + OBJC_IVAR___SGOutput_node);
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x261185960](v4);
  if (!v11)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v14 = 0xD000000000000023;
    *(void *)(v14 + 8) = 0x800000025C422640;
    *(unsigned char *)(v14 + 16) = 20;
    swift_willThrow();

    return;
  }
  unint64_t v12 = v8 - 1;
  if (!__OFSUB__(v8, 1))
  {
    uint64_t v4 = (char *)v11;
    uint64_t v28 = (uint64_t)v7;
    if (v9)
    {
      uint64_t v7 = a2;
      swift_bridgeObjectRetain();
      int64_t v13 = (char *)MEMORY[0x2611848A0](v8 - 1, v6);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v7 = a2;
      int64_t v13 = (char *)*(id *)(v6 + 8 * v12 + 32);
LABEL_14:
      unint64_t v15 = (char *)*(id *)&v13[OBJC_IVAR___SGEdge_to];

      uint64_t v16 = &v15[OBJC_IVAR___SGInput_node];
      swift_beginAccess();
      uint64_t v9 = (void *)MEMORY[0x261185960](v16);

      if (!v9)
      {
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(void *)uint64_t v23 = 0xD000000000000028;
        *(void *)(v23 + 8) = 0x800000025C422670;
        *(unsigned char *)(v23 + 16) = 20;
        swift_willThrow();

        return;
      }
      if (one-time initialization token for shared == -1) {
        goto LABEL_16;
      }
      goto LABEL_32;
    }
    __break(1u);
    return;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  swift_once();
LABEL_16:
  uint64_t v17 = specialized SGNode.textureType(nodeDefStore:)(static NodeDefStore.shared);
  if (!v17)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v24 = 0xD000000000000026;
    *(void *)(v24 + 8) = 0x800000025C4226A0;
    *(unsigned char *)(v24 + 16) = 20;
    swift_willThrow();

    return;
  }
  uint64_t v18 = v17;
  uint64_t v19 = v7;
  char v20 = specialized TopologicalSort.Path.isMaterialUniform.getter(v6, v28);

  if (v20)
  {

    uint64_t v4 = (char *)*(id *)&v3[v2];
    uint64_t v21 = *(void **)&v4[OBJC_IVAR___SGOutput_name];
    uint64_t v22 = *(void **)&v4[OBJC_IVAR___SGOutput_name + 8];
    swift_bridgeObjectRetain();
LABEL_25:

    *uint64_t v19 = v21;
    v19[1] = v22;
    v19[2] = v20 & 1;
    v19[3] = v18;
    return;
  }

  uint64_t v25 = &v4[OBJC_IVAR___SGNode_data];
  char v26 = v4[OBJC_IVAR___SGNode_data + 80];
  if ((v26 & 0xC0) == 0x80 && *(void *)v25 == 13 && (v26 & 0x3F) == 6)
  {
    uint64_t v21 = (void *)*((void *)v25 + 2);
    uint64_t v22 = (void *)*((void *)v25 + 3);
    outlined copy of NodeData((id)0xD, *((void *)v25 + 1), v21, v22, *((void *)v25 + 4), *((void *)v25 + 5), *((void *)v25 + 6), *((void *)v25 + 7), *((void *)v25 + 8), *((void *)v25 + 9), v4[OBJC_IVAR___SGNode_data + 80]);
    goto LABEL_25;
  }
  swift_release();

  *uint64_t v7 = 0u;
  v7[1] = 0u;
}

uint64_t key path getter for Collection.first : [TypedTexture]@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  if (*(void *)(*(void *)result + 16))
  {
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(unsigned __int8 *)(v3 + 48);
    uint64_t v7 = *(void *)(v3 + 56);
    outlined copy of TextureSource();
    uint64_t result = swift_retain();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t inferHasBackgroundBlur(from:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v25 = v2;
  do
  {
    uint64_t v5 = v3 + 24 * v4;
    uint64_t v6 = *(void *)v5 + OBJC_IVAR___SGNode_data;
    if (*(unsigned __int8 *)(v6 + 80) <= 0x3Fu)
    {
      uint64_t v7 = *(void **)(v5 + 8);
      uint64_t v8 = *(void *)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v10 = *(void **)(v3 + 24 * v4 + 16);
      uint64_t v11 = one-time initialization token for realityKitBackgroundBlurNodes;
      id v27 = *(id *)v5;
      id v26 = v7;
      id v28 = v10;
      if (v11 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v12 = static ShaderGraphNode.realityKitBackgroundBlurNodes;
      if (*(void *)(static ShaderGraphNode.realityKitBackgroundBlurNodes + 16))
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v13 = Hasher._finalize()();
        uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
        unint64_t v15 = v13 & ~v14;
        uint64_t v16 = v12 + 56;
        if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
        {
          uint64_t v17 = *(void *)(v12 + 48);
          uint64_t v18 = (void *)(v17 + 16 * v15);
          BOOL v19 = *v18 == v8 && v9 == v18[1];
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return 1;
          }
          uint64_t v20 = ~v14;
          unint64_t v21 = (v15 + 1) & v20;
          if ((*(void *)(v16 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
          {
            while (1)
            {
              uint64_t v22 = (void *)(v17 + 16 * v21);
              BOOL v23 = *v22 == v8 && v9 == v22[1];
              if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                break;
              }
              unint64_t v21 = (v21 + 1) & v20;
              if (((*(void *)(v16 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v2 = v25;
                goto LABEL_5;
              }
            }
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 1;
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v25;
      }
      else
      {
      }
    }
LABEL_5:
    ++v4;
  }
  while (v4 != v2);
  swift_bridgeObjectRelease();
  return 0;
}

void checkConstantInputs(in:)(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v7 = a1 + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v23 = v7;
    do
    {
      --v5;
      uint64_t v8 = (char **)(v7 + 24 * v5);
      uint64_t v9 = *v8;
      uint64_t v10 = (uint64_t)&(*v8)[OBJC_IVAR___SGNode_data];
      if (*(unsigned __int8 *)(v10 + 80) <= 0x3Fu)
      {
        uint64_t v12 = v8[1];
        uint64_t v11 = v8[2];
        uint64_t v13 = *(void *)(v10 + 16);
        unint64_t v14 = *(void *)&v9[OBJC_IVAR___SGNode_inputs];
        uint64_t v24 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v15 = v9;
        uint64_t v16 = v12;
        uint64_t v17 = specialized Sequence.filter(_:)(v13, v14);
        if (v4)
        {

          swift_bridgeObjectRelease_n();
          return;
        }
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)(v17 + 16);
        if (v19)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = v18 + 40;
          do
          {
            unint64_t v21 = *(void **)(v20 + 24);
            swift_bridgeObjectRetain();
            id v22 = v21;
            specialized closure #2 in closure #1 in checkConstantInputs(in:)((uint64_t)v22, a1, a3, v15, v16, v11);

            swift_bridgeObjectRelease();
            v20 += 40;
            --v19;
          }
          while (v19);

          swift_bridgeObjectRelease();
        }
        else
        {
        }
        swift_bridgeObjectRelease();
        unint64_t v7 = v23;
      }
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v38 = a2 & 0xC000000000000001;
    unint64_t v36 = a2 + 32;
    uint64_t v6 = result + 56;
    uint64_t v31 = v3 - 1;
    uint64_t v7 = MEMORY[0x263F8EE78];
    unint64_t v39 = a2 >> 62;
    uint64_t v37 = result;
    uint64_t v35 = *(void *)(result + 16);
    uint64_t v32 = result + 56;
    do
    {
      uint64_t v34 = v7;
      uint64_t v8 = (unsigned char *)(v6 + 32 * v4);
      unint64_t v9 = v4;
      while (1)
      {
        if (v9 >= *(void *)(v2 + 16))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        uint64_t v11 = *((void *)v8 - 3);
        uint64_t v10 = *((void *)v8 - 2);
        uint64_t v12 = *((void *)v8 - 1);
        char v13 = *v8;
        if (v39)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = swift_bridgeObjectRelease();
          if (v9 == v19)
          {
LABEL_30:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v34;
          }
        }
        else
        {
          uint64_t v14 = *(void *)(v5 + 16);
          uint64_t result = swift_bridgeObjectRetain();
          if (v9 == v14) {
            goto LABEL_30;
          }
        }
        if (v38)
        {
          unint64_t v15 = (char *)MEMORY[0x2611848A0](v9, a2);
        }
        else
        {
          if (v9 >= *(void *)(v5 + 16)) {
            goto LABEL_35;
          }
          unint64_t v15 = (char *)*(id *)(v36 + 8 * v9);
        }
        uint64_t v16 = v15;
        BOOL v17 = v11 == *(void *)&v15[OBJC_IVAR___SGInput_name] && v10 == *(void *)&v15[OBJC_IVAR___SGInput_name + 8];
        if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (uint64_t v18 = &v16[OBJC_IVAR___SGInput_type], swift_beginAccess(), v12 != *(void *)v18))
        {
          _StringGuts.grow(_:)(23);
          v23._char object = (void *)0x800000025C4225D0;
          v23._uint64_t countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v23);
          _print_unlocked<A, B>(_:_:)();
          v24._uint64_t countAndFlagsBits = 32;
          v24._char object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          id v25 = objc_msgSend(v16, sel_description);
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v28 = v27;

          v29._uint64_t countAndFlagsBits = v26;
          v29._char object = v28;
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type APIError and conformance APIError();
          swift_allocError();
          *(void *)uint64_t v30 = 0;
          *(void *)(v30 + 8) = 0xE000000000000000;
          *(unsigned char *)(v30 + 16) = 7;
          swift_willThrow();
          uint64_t v7 = v34;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_32;
        }
        if (v13) {
          break;
        }
        ++v9;

        uint64_t result = swift_bridgeObjectRelease();
        v8 += 32;
        uint64_t v2 = v37;
        if (v35 == v9)
        {
          uint64_t v7 = v34;
          goto LABEL_31;
        }
      }
      uint64_t v7 = v34;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
        uint64_t v7 = v34;
      }
      unint64_t v21 = *(void *)(v7 + 16);
      unint64_t v20 = *(void *)(v7 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v7 = v34;
      }
      unint64_t v4 = v9 + 1;
      *(void *)(v7 + 16) = v21 + 1;
      uint64_t v22 = v7 + 40 * v21;
      *(void *)(v22 + 32) = v11;
      *(void *)(v22 + 40) = v10;
      *(void *)(v22 + 48) = v12;
      *(unsigned char *)(v22 + 56) = 1;
      *(void *)(v22 + 64) = v16;
      uint64_t v6 = v32;
      uint64_t v2 = v37;
    }
    while (v31 != v9);
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
LABEL_31:
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  return v7;
}

void closure #1 in closure #2 in closure #1 in checkConstantInputs(in:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x261185960](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    uint64_t v6 = (uint64_t *)(v4 + OBJC_IVAR___SGNode_data);
    if (!(*(unsigned __int8 *)(v4 + OBJC_IVAR___SGNode_data + 80) >> 6))
    {
      uint64_t v16 = *v6;
      uint64_t v15 = v6[1];
      uint64_t v18 = v6[4];
      uint64_t v17 = v6[5];
      BOOL v19 = *v6 == 0x656D756772615F5FLL && v15 == 0xEB0000000073746ELL;
      if (v19
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v16 == 0x746C757365725F5FLL ? (BOOL v20 = v15 == 0xE900000000000073) : (BOOL v20 = 0), v20))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of MaterialXAvailability(v18, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v18, v17);
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of MaterialXAvailability(v18, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v18, v17);
        if ((v21 & 1) == 0)
        {
          _StringGuts.grow(_:)(33);
          uint64_t v23 = *(void *)(a2 + OBJC_IVAR___SGInput_name);
          uint64_t v22 = *(void *)(a2 + OBJC_IVAR___SGInput_name + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v40 = v23;
          uint64_t v42 = v22;
          v24._uint64_t countAndFlagsBits = 544108320;
          v24._char object = (void *)0xE400000000000000;
          String.append(_:)(v24);
          uint64_t v25 = a2 + OBJC_IVAR___SGInput_node;
          swift_beginAccess();
          uint64_t v26 = MEMORY[0x261185960](v25);
          if (v26)
          {
            id v27 = (void *)v26;
            uint64_t v28 = *(void *)(v26 + OBJC_IVAR___SGNode_name);
            Swift::String v29 = *(void **)(v26 + OBJC_IVAR___SGNode_name + 8);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v28 = 0x2064656D616E6E55;
            Swift::String v29 = (void *)0xEC00000065646F6ELL;
          }
          v33._uint64_t countAndFlagsBits = v28;
          v33._char object = v29;
          String.append(_:)(v33);
          swift_bridgeObjectRelease();
          v34._uint64_t countAndFlagsBits = 0xD000000000000016;
          v34._char object = (void *)0x800000025C4225B0;
          String.append(_:)(v34);
          uint64_t v35 = *(void *)&v5[OBJC_IVAR___SGNode_name];
          unint64_t v36 = *(void **)&v5[OBJC_IVAR___SGNode_name + 8];
          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = v35;
          v37._char object = v36;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._uint64_t countAndFlagsBits = 46;
          v38._char object = (void *)0xE100000000000000;
          String.append(_:)(v38);
          lazy protocol witness table accessor for type APIError and conformance APIError();
          swift_allocError();
          *(void *)uint64_t v39 = v40;
          *(void *)(v39 + 8) = v42;
          *(unsigned char *)(v39 + 16) = 19;
          swift_willThrow();
        }
      }
    }
  }
  else
  {
    _StringGuts.grow(_:)(27);
    uint64_t v8 = *(void *)(a2 + OBJC_IVAR___SGInput_name);
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___SGInput_name + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v41 = v7;
    v9._uint64_t countAndFlagsBits = 544108320;
    v9._char object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    uint64_t v10 = a2 + OBJC_IVAR___SGInput_node;
    swift_beginAccess();
    uint64_t v11 = MEMORY[0x261185960](v10);
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      uint64_t v13 = *(void *)(v11 + OBJC_IVAR___SGNode_name);
      uint64_t v14 = *(void **)(v11 + OBJC_IVAR___SGNode_name + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = 0x2064656D616E6E55;
      uint64_t v14 = (void *)0xEC00000065646F6ELL;
    }
    v30._uint64_t countAndFlagsBits = v13;
    v30._char object = v14;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._char object = (void *)0x800000025C422590;
    v31._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v31);
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v32 = v8;
    *(void *)(v32 + 8) = v41;
    *(unsigned char *)(v32 + 16) = 19;
    swift_willThrow();
  }
}

uint64_t TopologicalSort.Path.debugDescription.getter()
{
  return TopologicalSort.Path.debugString.getter();
}

BOOL specialized Array._hoistableIsNativeTypeChecked()(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType?>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::String v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  long long *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;
  long long v31[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, MetalFunctionNode>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    Swift::String v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        unint64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        unint64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          uint64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          unint64_t v17 = v30[v8];
          if (!v17)
          {
            uint64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                unint64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v18;
          }
        }
LABEL_21:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      unint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      unint64_t v20 = (long long *)(*(void *)(v5 + 56) + 40 * v15);
      if (a2) {
        outlined init with take of MetalFunctionNode(v20, (uint64_t)v31);
      }
      else {
        outlined init with copy of MetalFunctionNode((uint64_t)v20, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      uint64_t result = Hasher._finalize()();
      int64_t v21 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        int64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v19;
      uint64_t result = outlined init with take of MetalFunctionNode(v31, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, FunctionNodeID>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDef.Implementation]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  char v45 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v43 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v41 = v3;
  uint64_t v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  unint64_t v44 = v5;
  while (1)
  {
    if (v10)
    {
      id v46 = (v10 - 1) & v10;
      id v47 = v13;
      unint64_t v20 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42) {
      break;
    }
    uint64_t v22 = v43;
    unint64_t v23 = v43[v21];
    int64_t v24 = v13 + 1;
    if (!v23)
    {
      int64_t v24 = v13 + 2;
      if (v13 + 2 >= v42) {
        goto LABEL_33;
      }
      unint64_t v23 = v43[v24];
      if (!v23)
      {
        char v25 = v13 + 3;
        if (v13 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            int64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v24 >= v42) {
              goto LABEL_33;
            }
            unint64_t v23 = v43[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v24 = v13 + 3;
      }
    }
LABEL_30:
    id v46 = (v23 - 1) & v23;
    id v47 = v24;
    unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(v5 + 56);
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    int64_t v34 = (uint64_t *)(v30 + (v20 << 6));
    uint64_t v35 = v34[1];
    uint64_t v48 = *v34;
    Swift::String v37 = v34[2];
    char v36 = v34[3];
    Swift::String v38 = v34[4];
    uint64_t v39 = *((unsigned char *)v34 + 40);
    uint64_t v51 = *((unsigned char *)v34 + 41);
    uint64_t v50 = v34[6];
    uint64_t v49 = *((unsigned char *)v34 + 56);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of GeomPropDef.GeomProp(v36, v38, v39);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        Swift::String v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v33;
    unint64_t v19 = *(void *)(v7 + 56) + (v17 << 6);
    int64_t v13 = v47;
    *(void *)unint64_t v19 = v48;
    *(void *)(v19 + 8) = v35;
    *(void *)(v19 + 16) = v37;
    *(void *)(v19 + 24) = v36;
    *(void *)(v19 + 32) = v38;
    *(unsigned char *)(v19 + 40) = v39;
    *(unsigned char *)(v19 + 41) = v51;
    *(void *)(v19 + 48) = v50;
    *(unsigned char *)(v19 + 56) = v49;
    ++*(void *)(v7 + 16);
    uint64_t v5 = v44;
    unint64_t v10 = v46;
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v22 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  long long *v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  void *v48;
  uint64_t i;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  uint64_t v50 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v48 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v46 = v2;
  id v47 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v18 = v17 | (v13 << 6);
      if (v50) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
    unint64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v47) {
      break;
    }
    BOOL v27 = v48;
    uint64_t v28 = v48[v26];
    ++v13;
    if (!v28)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v47) {
        goto LABEL_33;
      }
      uint64_t v28 = v48[v13];
      if (!v28)
      {
        Swift::String v29 = v26 + 2;
        if (v29 >= v47)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v46;
          if ((v50 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v28 = v48[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v13 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v47) {
              goto LABEL_33;
            }
            uint64_t v28 = v48[v13];
            ++v29;
            if (v28) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v29;
      }
    }
LABEL_22:
    unint64_t v10 = (v28 - 1) & v28;
    uint64_t v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if (v50)
    {
LABEL_10:
      unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      unint64_t v20 = *v19;
      int64_t v21 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 144 * v18;
      int64_t v24 = *(void *)v22;
      unint64_t v23 = *(void *)(v22 + 8);
      char v25 = *(void *)(v22 + 24);
      uint64_t v51 = *(void *)(v22 + 40);
      uint64_t v52 = *(void *)(v22 + 16);
      uint64_t v53 = *(void *)(v22 + 56);
      uint64_t v54 = *(void *)(v22 + 32);
      id v55 = *(void *)(v22 + 72);
      id v56 = *(void *)(v22 + 48);
      uint64_t v57 = *(unsigned char *)(v22 + 80);
      unint64_t v60 = *(void *)(v22 + 88);
      unint64_t v61 = *(void *)(v22 + 96);
      char v58 = *(void *)(v22 + 64);
      uint64_t v59 = *(void *)(v22 + 104);
      uint64_t v62 = *(void *)(v22 + 120);
      unsigned __int8 v63 = *(void *)(v22 + 112);
      uint64_t v64 = *(_OWORD *)(v22 + 128);
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    unint64_t v20 = *v30;
    int64_t v21 = v30[1];
    uint64_t v31 = (long long *)(*(void *)(v5 + 56) + 144 * v18);
    uint64_t v65 = *v31;
    uint64_t v32 = v31[4];
    int64_t v34 = v31[1];
    uint64_t v33 = v31[2];
    uint64_t v68 = v31[3];
    uint64_t v69 = v32;
    unint64_t v66 = v34;
    unint64_t v67 = v33;
    uint64_t v35 = v31[8];
    Swift::String v37 = v31[5];
    char v36 = v31[6];
    char v72 = v31[7];
    unint64_t v73 = v35;
    char v70 = v37;
    uint64_t v71 = v36;
    uint64_t v64 = v35;
    uint64_t v62 = *((void *)&v72 + 1);
    unsigned __int8 v63 = v72;
    uint64_t v59 = *((void *)&v36 + 1);
    unint64_t v61 = v36;
    unint64_t v60 = *((void *)&v37 + 1);
    uint64_t v57 = v37;
    id v55 = *((void *)&v69 + 1);
    char v58 = v69;
    id v56 = v68;
    char v25 = *((void *)&v66 + 1);
    uint64_t v53 = *((void *)&v68 + 1);
    uint64_t v54 = v67;
    unint64_t v23 = *((void *)&v65 + 1);
    uint64_t v51 = *((void *)&v67 + 1);
    uint64_t v52 = v66;
    int64_t v24 = v65;
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)&v65);
LABEL_24:
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    Swift::String v38 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v39 = result & ~v38;
    uint64_t v40 = v39 >> 6;
    if (((-1 << v39) & ~*(void *)(v11 + 8 * (v39 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v39) & ~*(void *)(v11 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v43 = v40 == v42;
        if (v40 == v42) {
          uint64_t v40 = 0;
        }
        v41 |= v43;
        unint64_t v44 = *(void *)(v11 + 8 * v40);
      }
      while (v44 == -1);
      uint64_t v14 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v20;
    v15[1] = v21;
    unint64_t v16 = *(void *)(v7 + 56) + 144 * v14;
    *(void *)unint64_t v16 = v24;
    *(void *)(v16 + 8) = v23;
    *(void *)(v16 + 16) = v52;
    *(void *)(v16 + 24) = v25;
    *(void *)(v16 + 32) = v54;
    *(void *)(v16 + 40) = v51;
    *(void *)(v16 + 48) = v56;
    *(void *)(v16 + 56) = v53;
    *(void *)(v16 + 64) = v58;
    *(void *)(v16 + 72) = v55;
    *(unsigned char *)(v16 + 80) = v57;
    *(void *)(v16 + 88) = v60;
    *(void *)(v16 + 96) = v61;
    *(void *)(v16 + 104) = v59;
    *(void *)(v16 + 112) = v63;
    *(void *)(v16 + 120) = v62;
    *(_OWORD *)(v16 + 128) = v64;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v46;
  BOOL v27 = v48;
  if ((v50 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v45 = 1 << *(unsigned char *)(v5 + 32);
  if (v45 >= 64) {
    bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v27 = -1 << v45;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, (uniformPropertyName: String, type: MetalDataType)>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TextureSource, [TypedTexture]>);
  Swift::String v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  Swift::String v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  char v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::String v29 = *(void *)(v5 + 48) + 24 * v20;
    uint64_t v31 = *(void *)v29;
    uint64_t v30 = *(void *)(v29 + 8);
    uint64_t v32 = *(unsigned __int8 *)(v29 + 16);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      outlined copy of TextureSource();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v32);
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
    *(void *)uint64_t v18 = v31;
    *(void *)(v18 + 8) = v30;
    *(unsigned char *)(v18 + 16) = v32;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    char v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      char v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            char v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    int64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    char v36 = *v35;
    Swift::String v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        Swift::String v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  Swift::String v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v35 = a2;
    int64_t v34 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        unint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          uint64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v21;
          }
        }
LABEL_21:
        uint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      unint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      int64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        Swift::String v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ShaderGraphNode.ID>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v35 = a2;
    int64_t v34 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        unint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          uint64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v21;
          }
        }
LABEL_21:
        uint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      unint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      int64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        Swift::String v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, InputSpec>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ShaderGraphNode.ID>);
  Swift::String v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::String v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, ShaderGraphNode.ID>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Key, String>);
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  void (*v13)(char *);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  long long v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62[72];
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, ShaderGraphNode>);
  uint64_t v50 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v48 = (void *)(v4 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v4 + 64);
    id v47 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v10 = v5 + 64;
    uint64_t result = swift_retain();
    uint64_t v12 = 0;
    uint64_t v49 = v4;
    while (1)
    {
      if (v9)
      {
        uint64_t v51 = (v9 - 1) & v9;
        uint64_t v52 = v12;
        unint64_t v20 = __clz(__rbit64(v9)) | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v47) {
          goto LABEL_33;
        }
        uint64_t v22 = v48[v21];
        unint64_t v23 = v12 + 1;
        if (!v22)
        {
          unint64_t v23 = v12 + 2;
          if (v12 + 2 >= v47) {
            goto LABEL_33;
          }
          uint64_t v22 = v48[v23];
          if (!v22)
          {
            int64_t v24 = v12 + 3;
            if (v12 + 3 >= v47)
            {
LABEL_33:
              swift_release();
              unint64_t v44 = v46;
              if (v50)
              {
                char v45 = 1 << *(unsigned char *)(v4 + 32);
                if (v45 >= 64) {
                  bzero(v48, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v48 = -1 << v45;
                }
                *(void *)(v4 + 16) = 0;
              }
              uint64_t result = swift_release();
              goto LABEL_40;
            }
            uint64_t v22 = v48[v24];
            if (!v22)
            {
              while (1)
              {
                unint64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v47) {
                  goto LABEL_33;
                }
                uint64_t v22 = v48[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            unint64_t v23 = v12 + 3;
          }
        }
LABEL_30:
        uint64_t v51 = (v22 - 1) & v22;
        uint64_t v52 = v23;
        unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      Swift::String v29 = *(void *)(v4 + 48) + 80 * v20;
      uint64_t v30 = *(void **)v29;
      uint64_t v31 = *(void **)(v29 + 8);
      uint64_t v33 = *(void *)(v29 + 16);
      uint64_t v32 = *(void *)(v29 + 24);
      int64_t v34 = *(void *)(v29 + 32);
      uint64_t v35 = *(void *)(v29 + 40);
      char v36 = *(void *)(v29 + 48);
      Swift::String v37 = *(void *)(v29 + 56);
      Swift::String v38 = *(unsigned char *)(v29 + 64);
      uint64_t v39 = *(void *)(v29 + 72);
      uint64_t v40 = *(void *)(v4 + 56) + 48 * v20;
      uint64_t v42 = *(void *)v40;
      uint64_t v41 = *(void *)(v40 + 8);
      unint64_t v43 = *(void *)(v40 + 16);
      uint64_t v54 = *(_OWORD *)(v40 + 24);
      id v55 = *(unsigned char *)(v40 + 40);
      unint64_t v61 = v38;
      uint64_t v59 = v36;
      unint64_t v60 = v37;
      uint64_t v57 = v34;
      char v58 = v35;
      id v56 = v32;
      if ((v50 & 1) == 0)
      {
        outlined copy of SGDataTypeStorage(v30, v31, v33, v32, v34, v35, v36, v37, v38);
        swift_retain();
        outlined copy of NodePersonality(v42);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v32 = v56;
        int64_t v34 = v57;
        uint64_t v35 = v58;
        char v36 = v59;
        Swift::String v37 = v60;
        Swift::String v38 = v61;
      }
      uint64_t v53 = v42;
      unsigned __int8 v63 = v30;
      uint64_t v64 = v31;
      uint64_t v65 = v33;
      unint64_t v66 = v32;
      unint64_t v67 = v34;
      uint64_t v68 = v35;
      uint64_t v69 = v36;
      char v70 = v37;
      uint64_t v71 = v38;
      Hasher.init(_seed:)();
      SGDataTypeStorage.hash(into:)();
      int64_t v13 = *(void (**)(char *))(*(void *)v39 + 120);
      swift_retain();
      v13(v62);
      swift_release();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v10 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v10 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v10 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v10 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v6 + 48) + 80 * v17;
      *(void *)uint64_t v18 = v30;
      *(void *)(v18 + 8) = v31;
      *(void *)(v18 + 16) = v33;
      *(void *)(v18 + 24) = v56;
      *(void *)(v18 + 32) = v57;
      *(void *)(v18 + 40) = v58;
      *(void *)(v18 + 48) = v59;
      *(void *)(v18 + 56) = v60;
      *(unsigned char *)(v18 + 64) = v61;
      *(void *)(v18 + 72) = v39;
      unint64_t v19 = *(void *)(v6 + 56) + 48 * v17;
      uint64_t v12 = v52;
      *(void *)unint64_t v19 = v53;
      *(void *)(v19 + 8) = v41;
      *(void *)(v19 + 16) = v43;
      *(_OWORD *)(v19 + 24) = v54;
      *(unsigned char *)(v19 + 40) = v55;
      ++*(void *)(v6 + 16);
      uint64_t v4 = v49;
      uint64_t v9 = v51;
    }
  }
  uint64_t result = swift_release();
  unint64_t v44 = v46;
LABEL_40:
  *unint64_t v44 = v6;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, SGOutput>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, SGInput>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, String>);
  int64_t v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        int64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          int64_t v21 = v33[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                _OWORD *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                int64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      Swift::String v29 = *v28;
      uint64_t v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        int64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDefinitionStore.Node]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  long long v50;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.GeomProp>);
  char v45 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v43 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v41 = v3;
  uint64_t v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  unint64_t v44 = v5;
  while (1)
  {
    if (v10)
    {
      id v46 = (v10 - 1) & v10;
      id v47 = v13;
      unint64_t v20 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42) {
      break;
    }
    uint64_t v22 = v43;
    unint64_t v23 = v43[v21];
    int64_t v24 = v13 + 1;
    if (!v23)
    {
      int64_t v24 = v13 + 2;
      if (v13 + 2 >= v42) {
        goto LABEL_33;
      }
      unint64_t v23 = v43[v24];
      if (!v23)
      {
        char v25 = v13 + 3;
        if (v13 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            int64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v24 >= v42) {
              goto LABEL_33;
            }
            unint64_t v23 = v43[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v24 = v13 + 3;
      }
    }
LABEL_30:
    id v46 = (v23 - 1) & v23;
    id v47 = v24;
    unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(v5 + 56);
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    int64_t v34 = (uint64_t *)(v30 + (v20 << 6));
    uint64_t v35 = v34[1];
    uint64_t v48 = *v34;
    uint64_t v50 = *((_OWORD *)v34 + 1);
    Swift::String v37 = v34[4];
    char v36 = v34[5];
    Swift::String v38 = v34[6];
    uint64_t v39 = *((unsigned char *)v34 + 56);
    uint64_t v49 = *((unsigned char *)v34 + 57);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of GeomPropDef.GeomProp(v36, v38, v39);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        Swift::String v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v33;
    unint64_t v19 = *(void *)(v7 + 56) + (v17 << 6);
    int64_t v13 = v47;
    *(void *)unint64_t v19 = v48;
    *(void *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v50;
    *(void *)(v19 + 32) = v37;
    *(void *)(v19 + 40) = v36;
    *(void *)(v19 + 48) = v38;
    *(unsigned char *)(v19 + 56) = v39;
    *(unsigned char *)(v19 + 57) = v49;
    ++*(void *)(v7 + 16);
    uint64_t v5 = v44;
    unint64_t v10 = v46;
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v22 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  _OWORD *v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  void *v49;
  uint64_t i;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[2];
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.Node>);
  uint64_t v51 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v49 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v47 = v2;
  uint64_t v48 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v18 = v17 | (v13 << 6);
      if (v51) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
    unint64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v48) {
      break;
    }
    BOOL v27 = v49;
    uint64_t v28 = v49[v26];
    ++v13;
    if (!v28)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v48) {
        goto LABEL_33;
      }
      uint64_t v28 = v49[v13];
      if (!v28)
      {
        Swift::String v29 = v26 + 2;
        if (v29 >= v48)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v47;
          if ((v51 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v28 = v49[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v13 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v48) {
              goto LABEL_33;
            }
            uint64_t v28 = v49[v13];
            ++v29;
            if (v28) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v29;
      }
    }
LABEL_22:
    unint64_t v10 = (v28 - 1) & v28;
    uint64_t v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if (v51)
    {
LABEL_10:
      unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      unint64_t v20 = *v19;
      int64_t v21 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 160 * v18;
      int64_t v24 = *(void *)v22;
      unint64_t v23 = *(void *)(v22 + 8);
      char v25 = *(void *)(v22 + 24);
      uint64_t v52 = *(void *)(v22 + 40);
      uint64_t v53 = *(void *)(v22 + 16);
      uint64_t v54 = *(void *)(v22 + 56);
      id v55 = *(void *)(v22 + 32);
      id v56 = *(void *)(v22 + 72);
      uint64_t v57 = *(void *)(v22 + 48);
      char v58 = *(unsigned char *)(v22 + 80);
      unint64_t v61 = *(void *)(v22 + 88);
      uint64_t v62 = *(void *)(v22 + 96);
      uint64_t v59 = *(void *)(v22 + 64);
      unint64_t v60 = *(void *)(v22 + 104);
      unsigned __int8 v63 = *(_OWORD *)(v22 + 112);
      unint64_t v66 = *(void *)(v22 + 128);
      unint64_t v67 = *(void *)(v22 + 144);
      uint64_t v64 = *(void *)(v22 + 136);
      uint64_t v65 = *(void *)(v22 + 152);
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    unint64_t v20 = *v30;
    int64_t v21 = v30[1];
    uint64_t v31 = (_OWORD *)(*(void *)(v5 + 56) + 160 * v18);
    uint64_t v32 = v31[1];
    v68[0] = *v31;
    v68[1] = v32;
    uint64_t v33 = v31[5];
    uint64_t v35 = v31[2];
    int64_t v34 = v31[3];
    uint64_t v71 = v31[4];
    char v72 = v33;
    uint64_t v69 = v35;
    char v70 = v34;
    char v36 = v31[9];
    Swift::String v38 = v31[6];
    Swift::String v37 = v31[7];
    BOOL v75 = v31[8];
    uint64_t v76 = v36;
    unint64_t v73 = v38;
    uint64_t v74 = v37;
    unint64_t v66 = v75;
    unint64_t v67 = v36;
    uint64_t v64 = *((void *)&v75 + 1);
    uint64_t v65 = *((void *)&v36 + 1);
    unsigned __int8 v63 = v37;
    unint64_t v60 = *((void *)&v38 + 1);
    uint64_t v62 = v38;
    unint64_t v61 = *((void *)&v72 + 1);
    char v58 = v72;
    id v56 = *((void *)&v71 + 1);
    uint64_t v59 = v71;
    uint64_t v57 = v70;
    char v25 = *((void *)&v32 + 1);
    uint64_t v54 = *((void *)&v70 + 1);
    id v55 = v69;
    unint64_t v23 = *((void *)&v68[0] + 1);
    uint64_t v52 = *((void *)&v69 + 1);
    uint64_t v53 = v32;
    int64_t v24 = *(void *)&v68[0];
    swift_bridgeObjectRetain();
    outlined retain of NodeDefinitionStore.Node((uint64_t)v68);
LABEL_24:
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v39 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v40 = result & ~v39;
    uint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v44 = v41 == v43;
        if (v41 == v43) {
          uint64_t v41 = 0;
        }
        v42 |= v44;
        char v45 = *(void *)(v11 + 8 * v41);
      }
      while (v45 == -1);
      uint64_t v14 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v20;
    v15[1] = v21;
    unint64_t v16 = *(void *)(v7 + 56) + 160 * v14;
    *(void *)unint64_t v16 = v24;
    *(void *)(v16 + 8) = v23;
    *(void *)(v16 + 16) = v53;
    *(void *)(v16 + 24) = v25;
    *(void *)(v16 + 32) = v55;
    *(void *)(v16 + 40) = v52;
    *(void *)(v16 + 48) = v57;
    *(void *)(v16 + 56) = v54;
    *(void *)(v16 + 64) = v59;
    *(void *)(v16 + 72) = v56;
    *(unsigned char *)(v16 + 80) = v58;
    *(void *)(v16 + 88) = v61;
    *(void *)(v16 + 96) = v62;
    *(void *)(v16 + 104) = v60;
    *(_OWORD *)(v16 + 112) = v63;
    *(void *)(v16 + 128) = v66;
    *(void *)(v16 + 136) = v64;
    *(void *)(v16 + 144) = v67;
    *(void *)(v16 + 152) = v65;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v47;
  BOOL v27 = v49;
  if ((v51 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v46 = 1 << *(unsigned char *)(v5 + 32);
  if (v46 >= 64) {
    bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v27 = -1 << v46;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, MTLFunctionStitchingInputNode>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), String>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Swift::String v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Input, FunctionNodeID>);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v32 = a2;
  uint64_t v33 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v6 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v31 = (void *)(v6 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v6 + 64);
    Swift::String v29 = v3;
    int64_t v30 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    for (int64_t i = 0; ; int64_t i = v34)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v34 = i;
        unint64_t v12 = v11 | (i << 6);
      }
      else
      {
        int64_t v13 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v30) {
          goto LABEL_22;
        }
        unint64_t v14 = v31[v13];
        int64_t v15 = i + 1;
        if (!v14)
        {
          int64_t v15 = i + 2;
          if (i + 2 >= v30) {
            goto LABEL_22;
          }
          unint64_t v14 = v31[v15];
          if (!v14)
          {
            uint64_t v16 = i + 3;
            if (i + 3 >= v30)
            {
LABEL_22:
              swift_release();
              uint64_t v4 = v29;
              if (v32)
              {
                uint64_t v28 = 1 << *(unsigned char *)(v6 + 32);
                if (v28 > 63) {
                  bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v31 = -1 << v28;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v14 = v31[v16];
            if (!v14)
            {
              while (1)
              {
                int64_t v15 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_29;
                }
                if (v15 >= v30) {
                  goto LABEL_22;
                }
                unint64_t v14 = v31[v15];
                ++v16;
                if (v14) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v15 = i + 3;
          }
        }
LABEL_19:
        unint64_t v9 = (v14 - 1) & v14;
        int64_t v34 = v15;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      uint64_t v17 = *(void *)(v6 + 56);
      uint64_t v18 = v6;
      uint64_t v19 = *(void *)(v6 + 48) + 56 * v12;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      uint64_t v23 = *(void *)(v19 + 16);
      uint64_t v22 = *(void *)(v19 + 24);
      uint64_t v24 = *(void *)(v19 + 32);
      char v25 = *(unsigned char *)(v19 + 40);
      uint64_t v26 = *(void *)(v19 + 48);
      uint64_t v27 = *(void *)(v17 + 8 * v12);
      if ((v32 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      v35[0] = v20;
      v35[1] = v21;
      _OWORD v35[2] = v23;
      v35[3] = v22;
      v35[4] = v24;
      char v36 = v25;
      uint64_t v37 = v26;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v35, v27, v33);
      uint64_t v6 = v18;
    }
  }
  swift_release();
  *uint64_t v4 = v33;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v37 = v3;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v38) {
      break;
    }
    uint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v38) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void *)(v6 + 56) + 24 * v22;
    uint64_t v35 = *(void *)v34;
    long long v41 = *(_OWORD *)(v34 + 8);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v33;
    v19[1] = v32;
    uint64_t v20 = *(void *)(v8 + 56) + 24 * v18;
    *(void *)uint64_t v20 = v35;
    *(_OWORD *)(v20 + 8) = v41;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v33 = a2;
    uint64_t v9 = 0;
    uint64_t v34 = (void *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    int64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }
      else
      {
        uint64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v34[v19];
        ++v9;
        if (!v20)
        {
          uint64_t v9 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v34[v9];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v4 = v3;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v6 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              uint64_t v4 = v3;
              *(void *)(v6 + 16) = 0;
              break;
            }
            uint64_t v20 = v34[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v9 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v34[v9];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v9 = v21;
          }
        }
LABEL_21:
        uint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      unint64_t v22 = 8 * v18;
      int64_t v23 = *(void *)(*(void *)(v6 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v6 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
      int64_t v26 = result & ~v25;
      char v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            char v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v8 + 48) + v16) = v23;
      *(void *)(*(void *)(v8 + 56) + v16) = v24;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    uint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  int64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  void (*v16)(char *);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[72];
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v51 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v49 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 64);
    id v47 = v4;
    uint64_t v48 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v50 = v6;
    while (1)
    {
      if (v11)
      {
        uint64_t v52 = (v11 - 1) & v11;
        uint64_t v53 = v14;
        int64_t v23 = __clz(__rbit64(v11)) | (v14 << 6);
      }
      else
      {
        uint64_t v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v48) {
          goto LABEL_33;
        }
        unint64_t v25 = v49[v24];
        int64_t v26 = v14 + 1;
        if (!v25)
        {
          int64_t v26 = v14 + 2;
          if (v14 + 2 >= v48) {
            goto LABEL_33;
          }
          unint64_t v25 = v49[v26];
          if (!v25)
          {
            char v27 = v14 + 3;
            if (v14 + 3 >= v48)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v47;
              if (v51)
              {
                id v46 = 1 << *(unsigned char *)(v6 + 32);
                if (v46 >= 64) {
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  long long *v49 = -1 << v46;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v49[v27];
            if (!v25)
            {
              while (1)
              {
                int64_t v26 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_40;
                }
                if (v26 >= v48) {
                  goto LABEL_33;
                }
                unint64_t v25 = v49[v26];
                ++v27;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v26 = v14 + 3;
          }
        }
LABEL_30:
        uint64_t v52 = (v25 - 1) & v25;
        uint64_t v53 = v26;
        int64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
      }
      uint64_t v32 = *(void *)(v6 + 56);
      uint64_t v33 = *(void *)(v6 + 48) + 80 * v23;
      uint64_t v35 = *(void **)v33;
      uint64_t v34 = *(void **)(v33 + 8);
      uint64_t v36 = *(void *)(v33 + 16);
      uint64_t v37 = *(void *)(v33 + 24);
      int64_t v38 = *(void *)(v33 + 32);
      uint64_t v39 = *(void *)(v33 + 40);
      long long v41 = *(void *)(v33 + 48);
      char v40 = *(void *)(v33 + 56);
      uint64_t v42 = *(unsigned char *)(v33 + 64);
      unint64_t v43 = *(void *)(v33 + 72);
      unint64_t v44 = (uint64_t *)(v32 + 16 * v23);
      char v45 = v44[1];
      id v55 = *v44;
      id v56 = v34;
      char v58 = v37;
      uint64_t v59 = v38;
      uint64_t v57 = v36;
      if ((v51 & 1) == 0)
      {
        outlined copy of SGDataTypeStorage(v35, v34, v36, v37, v38, v39, v41, v40, v42);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v34 = v56;
        uint64_t v36 = v57;
        uint64_t v37 = v58;
        int64_t v38 = v59;
      }
      unint64_t v61 = v35;
      uint64_t v62 = v34;
      unsigned __int8 v63 = v36;
      uint64_t v64 = v37;
      uint64_t v65 = v38;
      unint64_t v66 = v39;
      uint64_t v54 = v39;
      uint64_t v15 = v41;
      unint64_t v67 = v41;
      uint64_t v68 = v40;
      uint64_t v69 = v42;
      Hasher.init(_seed:)();
      SGDataTypeStorage.hash(into:)();
      unint64_t v16 = *(void (**)(char *))(*(void *)v43 + 120);
      swift_retain();
      v16(v60);
      swift_release();
      uint64_t result = Hasher._finalize()();
      unint64_t v17 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v18 = result & ~v17;
      uint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
      {
        uint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v19 == v29;
          if (v19 == v29) {
            uint64_t v19 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v19);
        }
        while (v31 == -1);
        uint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
      }
      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      unint64_t v21 = *(void *)(v8 + 48) + 80 * v20;
      *(void *)unint64_t v21 = v35;
      *(void *)(v21 + 8) = v56;
      *(void *)(v21 + 16) = v57;
      *(void *)(v21 + 24) = v58;
      *(void *)(v21 + 32) = v59;
      *(void *)(v21 + 40) = v54;
      *(void *)(v21 + 48) = v15;
      *(void *)(v21 + 56) = v40;
      *(unsigned char *)(v21 + 64) = v42;
      *(void *)(v21 + 72) = v43;
      unint64_t v22 = (void *)(*(void *)(v8 + 56) + 16 * v20);
      *unint64_t v22 = v55;
      v22[1] = v45;
      ++*(void *)(v8 + 16);
      uint64_t v6 = v50;
      unint64_t v11 = v52;
      int64_t v14 = v53;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)a1);
  uint64_t v6 = *(void (**)(unsigned char *))(**(void **)(a1 + 8) + 120);
  swift_retain();
  v6(v12);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v7 = *(void *)(a1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
  Hasher._combine(_:)(*(void *)(a1 + 48));
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = a3[6] + 56 * v8;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v10;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v9 + 32) = result;
  *(void *)(v9 + 48) = *(void *)(a1 + 48);
  *(void *)(a3[7] + 8 * v8) = a2;
  ++a3[2];
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      unint64_t v8 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x2611848A0](v7 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      BOOL v11 = *(void *)&v8[OBJC_IVAR___SGInput_name] == a2 && *(void *)&v8[OBJC_IVAR___SGInput_name + 8] == a3;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized TopologicalSort.path(to:on:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, unint64_t a6, void *a7)
{
  uint64_t v7 = a7;
  uint64_t v9 = *(void *)(a6 + 16);
  if (!v9)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    goto LABEL_27;
  }
  unint64_t v10 = a6;
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  int64_t v14 = (void **)(v10 + 48);
  while (1)
  {
    if (*(v14 - 2) == a3 && *(v14 - 1) == a4)
    {
      unint64_t v16 = *v14;
      if (!*v14)
      {
        if (!a5) {
          break;
        }
        goto LABEL_4;
      }
      if (a5)
      {
        type metadata accessor for SGNode();
        id v46 = a3;
        id v17 = a4;
        id v18 = v16;
        id v19 = a5;
        uint64_t v20 = a5;
        unint64_t v21 = a3;
        id v22 = v19;
        unint64_t v10 = static NSObject.== infix(_:_:)();

        a3 = v21;
        a5 = v20;
        if (v10) {
          break;
        }
      }
    }
LABEL_4:
    ++v13;
    v14 += 3;
    if (v9 == v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  int64_t v23 = (void *)MEMORY[0x261183E60](a1, a2);
  uint64_t v24 = (char *)objc_msgSend(a3, sel_inputNamed_, v23);

  if (v24)
  {
    unint64_t v25 = &v24[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    uint64_t v26 = MEMORY[0x261185960](v25);
    if (v26)
    {
      uint64_t v27 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
      }
      else if ((v27 & 0x8000000000000000) == 0)
      {
        if (v9 >= v27)
        {
          a5 = (void *)v26;
          id v46 = a3;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_25C4195A0;
          *(void *)(v28 + 32) = a5;
          v47[0] = (char *)v28;
          specialized Array._endMutation()();
          unint64_t v10 = (unint64_t)v47[0];
          uint64_t v48 = v47[0];
          if (v13 != -1)
          {
            uint64_t v29 = ~v13;
            swift_bridgeObjectRetain_n();
            id v30 = a5;
            do
            {
              uint64_t v32 = (char *)*(v14 - 1);
              uint64_t v33 = (char *)*v14;
              v47[0] = (char *)*(v14 - 2);
              uint64_t v31 = v47[0];
              v47[1] = v32;
              v47[2] = v33;
              uint64_t v34 = v33;
              uint64_t v35 = v31;
              uint64_t v36 = v32;
              closure #2 in TopologicalSort.path(to:on:)((unint64_t *)&v48, v47);
              v14 -= 3;
            }
            while (!__CFADD__(v29++, 1));
            swift_bridgeObjectRelease_n();
            unint64_t v10 = (unint64_t)v48;
            goto LABEL_23;
          }
LABEL_32:
          id v42 = a5;
LABEL_23:
          uint64_t v38 = specialized Sequence.reversed()(v10);

          uint64_t v7 = a7;
          a3 = v46;
          goto LABEL_27;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      __break(1u);
      goto LABEL_31;
    }
  }
LABEL_25:
  uint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v7 = a7;
LABEL_27:
  id v39 = a3;
  id v40 = v7;
  return v38;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AF15TopologicalSortV4PathVs5NeverOTg504_s11d73Graph23inferTextureAssignments4fromSayAA05TypedD0VGAA7SGGraphC_tKFSayAA15gh2V4i5VGAJ7b10VXEfU_AlA7F7CXEfU0_A2kCVTf1cn_nTf4ngXg_n(unint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    if (!v7) {
      return v8;
    }
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v28;
    unint64_t v22 = v6 & 0xC000000000000001;
    unint64_t v11 = v6;
    while (v7 != v10)
    {
      if (v22) {
        uint64_t v12 = (char *)MEMORY[0x2611848A0](v10, v6);
      }
      else {
        uint64_t v12 = (char *)*(id *)(v6 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      uint64_t v14 = specialized TopologicalSort.path(to:on:)(*(void *)&v12[OBJC_IVAR___SGInput_name], *(void *)&v12[OBJC_IVAR___SGInput_name + 8], a4, a5, a6, a2, a3);
      uint64_t v16 = v15;
      uint64_t v18 = v17;

      unint64_t v20 = *(void *)(v28 + 16);
      unint64_t v19 = *(void *)(v28 + 24);
      if (v20 >= v19 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      }
      ++v10;
      *(void *)(v28 + 16) = v20 + 1;
      unint64_t v21 = (void *)(v28 + 24 * v20);
      v21[4] = v14;
      v21[5] = v16;
      v21[6] = v18;
      unint64_t v6 = v11;
      if (v7 == v10) {
        return v8;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #5 in inferTextureAssignments(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = swift_bridgeObjectRetain() + 56;
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      swift_retain();
      outlined copy of TextureSource();
      Swift::String_optional v4 = MetalDataType.textureBaseTypeName()();
      outlined consume of TextureSource();
      swift_release();
      if (v4.value._object)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v6 = v3[2];
        unint64_t v5 = v3[3];
        if (v6 >= v5 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
        }
        v3[2] = v6 + 1;
        *(Swift::String_optional *)&v3[2 * v6 + 4] = v4;
      }
      v2 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  unint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9 <= 1) {
    return swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(66);
  v10._char object = (void *)0x800000025C4225F0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000040;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = MEMORY[0x261184160](v3, MEMORY[0x263F8D310]);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0xE000000000000000;
  *(unsigned char *)(v12 + 16) = 20;
  return swift_willThrow();
}

void specialized closure #2 in closure #1 in checkConstantInputs(in:)(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR___SGInput_name);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR___SGInput_name + 8);
  unint64_t v10 = specialized TopologicalSort.path(to:on:)(v9, v8, a4, a5, a6, a2, a3);
  unint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  if (!(v10 >> 62))
  {
    uint64_t v16 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_3;
    }
LABEL_25:

LABEL_26:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v33 = v9;
  uint64_t v34 = v15;
  id v37 = v13;
  uint64_t v15 = (void *)(v11 & 0xC000000000000001);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = 4;
  do
  {
    if (v15) {
      id v17 = (id)MEMORY[0x2611848A0](v9 - 4, v11);
    }
    else {
      id v17 = *(id *)(v11 + 8 * v9);
    }
    uint64_t v18 = v17;
    uint64_t v13 = (void *)(v9 - 3);
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    v36[0] = v17;
    closure #1 in closure #2 in closure #1 in checkConstantInputs(in:)(v36, a1);
    if (v6)
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease();
      return;
    }

    ++v9;
  }
  while (v13 != (void *)v16);
  swift_bridgeObjectRelease_n();
  if (v15)
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = (char *)MEMORY[0x2611848A0](0, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    unint64_t v19 = (char *)*(id *)(v11 + 32);
  }
  unint64_t v20 = (char *)*(id *)&v19[OBJC_IVAR___SGEdge_from];

  unint64_t v21 = &v20[OBJC_IVAR___SGOutput_node];
  swift_beginAccess();
  unint64_t v22 = (unsigned char *)MEMORY[0x261185960](v21);

  if (!v22)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v30 = 0xD000000000000023;
    *(void *)(v30 + 8) = 0x800000025C422560;
    *(unsigned char *)(v30 + 16) = 7;
    swift_willThrow();

    goto LABEL_26;
  }
  id v23 = v37;
  if ((v22[OBJC_IVAR___SGNode_data + 80] & 0xC0) != 0x80)
  {
    uint64_t v35 = v8;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = 544108320;
    v24._char object = (void *)0xE400000000000000;
    String.append(_:)(v24);
    uint64_t v25 = a1 + OBJC_IVAR___SGInput_node;
    swift_beginAccess();
    uint64_t v26 = MEMORY[0x261185960](v25);
    if (v26)
    {
      uint64_t v27 = (void *)v26;
      uint64_t v29 = *(void *)(v26 + OBJC_IVAR___SGNode_name);
      uint64_t v28 = *(void **)(v26 + OBJC_IVAR___SGNode_name + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v28 = (void *)0xEC00000065646F6ELL;
      uint64_t v29 = 0x2064656D616E6E55;
    }
    v31._uint64_t countAndFlagsBits = v29;
    v31._char object = v28;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v32 = v33;
    *(void *)(v32 + 8) = v35;
    *(unsigned char *)(v32 + 16) = 19;
    swift_willThrow();
  }

  swift_bridgeObjectRelease();
}

uint64_t specialized TopologicalSort.Path.isMaterialUniform.getter(unint64_t a1, uint64_t a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = (char *)MEMORY[0x2611848A0](0, a1);
LABEL_6:
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = (char *)*(id *)&v7[OBJC_IVAR___SGEdge_from];

    uint64_t v9 = &v8[OBJC_IVAR___SGOutput_node];
    swift_beginAccess();
    unint64_t v10 = (void *)MEMORY[0x261185960](v9);

    if (v10)
    {
      unint64_t v11 = *(void **)(a2 + OBJC_IVAR___SGGraph_argumentsNode);
      type metadata accessor for SGNode();
      id v12 = v11;
      id v13 = v10;
      char v14 = static NSObject.== infix(_:_:)();

      return v14 & 1;
    }
LABEL_10:
    char v14 = 0;
    return v14 & 1;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = (char *)*(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized TopologicalSort.Path.constantBoolValue.getter(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 2;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (char *)MEMORY[0x2611848A0](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = (char *)*(id *)(a1 + 32);
  }
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = (char *)*(id *)&v5[OBJC_IVAR___SGEdge_from];

  uint64_t v7 = &v6[OBJC_IVAR___SGOutput_node];
  swift_beginAccess();
  uint64_t v8 = (unsigned char *)MEMORY[0x261185960](v7);

  if (v8)
  {
    uint64_t v9 = &v8[OBJC_IVAR___SGNode_data];
    char v10 = v8[OBJC_IVAR___SGNode_data + 80];
    if ((v10 & 0xC0) == 0x80 && *v9 == 1)
    {
      uint64_t v11 = v9[2];
      int v12 = v10 & 0x3F;

      if (!v12) {
        return v11 & 1;
      }
    }
    else
    {
    }
  }
  return 2;
}

uint64_t specialized TopologicalSort.Path.hasValue.getter(unint64_t a1, void *a2)
{
  swift_getObjectType();
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_27;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = (char *)MEMORY[0x2611848A0](0, a1);
LABEL_6:
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = (char *)*(id *)&v7[OBJC_IVAR___SGEdge_from];

    uint64_t v9 = &v8[OBJC_IVAR___SGOutput_node];
    swift_beginAccess();
    char v10 = (char *)MEMORY[0x261185960](v9);

    if (v10)
    {
      uint64_t v11 = &v10[OBJC_IVAR___SGNode_graph];
      swift_beginAccess();
      uint64_t v12 = MEMORY[0x261185960](v11);
      if (v12)
      {
        id v13 = (void *)v12;
        id v14 = a2;
        id v15 = v13;
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_11;
        }
      }
      id v17 = &v10[OBJC_IVAR___SGNode_data];
      int v18 = v10[OBJC_IVAR___SGNode_data + 80] >> 6;
      if (v18)
      {
        if (v18 != 1)
        {
LABEL_11:

          char v19 = 1;
          return v19 & 1;
        }
      }
      else
      {
        uint64_t v21 = *(void *)v17;
        uint64_t v20 = *((void *)v17 + 1);
        uint64_t v22 = *((void *)v17 + 4);
        uint64_t v23 = *((void *)v17 + 5);
        BOOL v24 = *(void *)v17 == 0x656D756772615F5FLL && v20 == 0xEB0000000073746ELL;
        if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v21 == 0x746C757365725F5FLL && v20 == 0xE900000000000073) {
            char v19 = 0;
          }
          else {
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of MaterialXAvailability(v22, v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of MaterialXAvailability(v22, v23);

          return v19 & 1;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of MaterialXAvailability(v22, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v22, v23);
      }
    }
LABEL_28:
    char v19 = 0;
    return v19 & 1;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = (char *)*(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized inferLightingModel(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu)
  {
LABEL_6:
    uint64_t v21 = &a1[OBJC_IVAR___SGNode_name];
    uint64_t v23 = *(void *)&a1[OBJC_IVAR___SGNode_name];
    uint64_t v22 = *((void *)v21 + 1);
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8) = v22;
    *(unsigned char *)(v24 + 16) = 10;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    uint64_t v12 = *v6;
    uint64_t v11 = v6[1];
    swift_bridgeObjectRetain();
    char v13 = specialized Surface.init(nodeDefID:)(v12, v11);
    uint64_t result = 2;
    switch(v13)
    {
      case 1:
        return result;
      case 3:
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)logger);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v28 = 0;
          _os_log_impl(&dword_25C27E000, v26, v27, "inferLightingModel called on geometry modifier node", v28, 2u);
          MEMORY[0x261185880](v28, -1, -1);
        }

        uint64_t result = 1;
        break;
      case 4:
        goto LABEL_6;
      default:
        unint64_t v15 = specialized TopologicalSort.path(to:on:)(0x616F637261656C63, 0xE900000000000074, a1, a2, a3, a4, a5);
        id v17 = v16;
        char v19 = v18;
        char v20 = specialized TopologicalSort.Path.hasValue.getter(v15, v18);

        swift_bridgeObjectRelease();
        if (v20) {
          uint64_t result = 3;
        }
        else {
          uint64_t result = 1;
        }
        break;
    }
  }
  return result;
}

uint64_t specialized inferBlendMode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu
    || (uint64_t v12 = *v6,
        uint64_t v11 = v6[1],
        swift_bridgeObjectRetain(),
        int v13 = specialized Surface.init(nodeDefID:)(v12, v11),
        v13 == 4)
    || v13 == 3)
  {
    uint64_t v15 = *(void *)&a1[OBJC_IVAR___SGNode_name];
    uint64_t v14 = *(void *)&a1[OBJC_IVAR___SGNode_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v16 = v15;
    *(void *)(v16 + 8) = v14;
    *(unsigned char *)(v16 + 16) = 10;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    unint64_t v18 = specialized TopologicalSort.path(to:on:)(0x7974696361706FLL, 0xE700000000000000, a1, a2, a3, a4, a5);
    uint64_t v32 = v19;
    uint64_t v21 = v20;
    unsigned int v34 = specialized TopologicalSort.Path.hasValue.getter(v18, v20);
    unint64_t v22 = specialized TopologicalSort.path(to:on:)(0xD000000000000010, 0x800000025C422700, a1, a2, a3, a4, a5);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    char v33 = specialized TopologicalSort.Path.hasValue.getter(v22, v25);
    uint64_t v27 = *(void *)(a4 + 16);
    if (v27)
    {
      uint64_t v28 = (void *)(a4 + 32);
      do
      {
        uint64_t v29 = *v28 + OBJC_IVAR___SGNode_data;
        if (*(unsigned __int8 *)(v29 + 80) <= 0x3Fu)
        {
          BOOL v30 = *(void *)v29 == static MaterialXNodeTokens.discardNodeID
             && *(void *)(v29 + 8) == (void)off_26A59B5F8;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            int v31 = 0;
            goto LABEL_17;
          }
        }
        v28 += 3;
        --v27;
      }
      while (v27);
      int v31 = 1;
    }
    else
    {
      int v31 = 1;
    }
LABEL_17:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33) {
      return 0;
    }
    else {
      return v31 & v34;
    }
  }
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = a1;
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    char v26 = 0;
    return v26 & 1;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_33;
  }
LABEL_3:
  BOOL v30 = v3;
  uint64_t v7 = 0;
  unint64_t v32 = v5 & 0xC000000000000001;
  uint64_t v33 = OBJC_IVAR___SGGraph_argumentsNode;
  unint64_t v28 = v5 + 32;
  uint64_t v29 = v6;
  unint64_t v31 = v5;
  while (1)
  {
    while (1)
    {
      if (v32) {
        uint64_t v8 = (char *)MEMORY[0x2611848A0](v7, v5);
      }
      else {
        uint64_t v8 = (char *)*(id *)(v28 + 8 * v7);
      }
      uint64_t v9 = v8;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      uint64_t v3 = &v8[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      uint64_t v11 = MEMORY[0x261185960](v3);
      if (v11) {
        break;
      }

      if (v7 == v6) {
        goto LABEL_33;
      }
    }
    uint64_t v12 = (void *)v11;
    int v13 = *(char **)(v11 + OBJC_IVAR___SGEdge_from);
    uint64_t v14 = &v13[OBJC_IVAR___SGOutput_attachment];
    swift_beginAccess();
    uint64_t v15 = (void *)*((void *)v14 + 1);
    if (v15) {
      break;
    }

LABEL_27:
    uint64_t v6 = v29;
    if (v7 == v29) {
      goto LABEL_33;
    }
  }
  uint64_t v3 = *(char **)v14;
  uint64_t v16 = v13;
  swift_bridgeObjectRetain();
  id v17 = (void *)SGGraph.node(named:)((uint64_t)v3, v15);

  uint64_t v18 = swift_bridgeObjectRelease();
  if (!v17)
  {

    goto LABEL_26;
  }
  MEMORY[0x270FA5388](v18);
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v17, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:));
  if (v30)
  {
    swift_bridgeObjectRelease();

    return v26 & 1;
  }
  uint64_t v3 = (char *)specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(v17);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21)
  {
LABEL_24:

    swift_release();
    swift_release();
LABEL_26:
    unint64_t v5 = v31;
    goto LABEL_27;
  }
  uint64_t v22 = 0;
  while (1)
  {
    uint64_t v3 = (char *)(*(void *)(*(void *)(v20 + 8 * v22 + 32) + OBJC_IVAR___SGEdge_from)
                + OBJC_IVAR___SGOutput_attachment);
    swift_beginAccess();
    uint64_t v23 = *((void *)v3 + 1);
    if (v23)
    {
      uint64_t v24 = (void *)(*(void *)(a2 + v33) + OBJC_IVAR___SGNode_name);
      BOOL v25 = *v24 == *(void *)v3 && v23 == v24[1];
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
    }
    if (v21 == ++v22) {
      goto LABEL_24;
    }
  }

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  char v26 = 1;
  return v26 & 1;
}

uint64_t specialized inferHasPremultipliedAlpha(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu)
  {
LABEL_4:
    uint64_t v21 = &a1[OBJC_IVAR___SGNode_name];
    uint64_t v23 = *(void *)&a1[OBJC_IVAR___SGNode_name];
    uint64_t v22 = *((void *)v21 + 1);
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8) = v22;
    *(unsigned char *)(v24 + 16) = 10;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else
  {
    uint64_t v12 = *v6;
    uint64_t v11 = v6[1];
    swift_bridgeObjectRetain();
    char v13 = specialized Surface.init(nodeDefID:)(v12, v11);
    char v14 = 0;
    switch(v13)
    {
      case 2:
        return v14 & 1;
      case 3:
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        __swift_project_value_buffer(v26, (uint64_t)logger);
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v29 = 0;
          _os_log_impl(&dword_25C27E000, v27, v28, "inferHasPremultipliedAlpha called on geometry modifier node", v29, 2u);
          MEMORY[0x261185880](v29, -1, -1);
        }

        char v14 = 0;
        break;
      case 4:
        goto LABEL_4;
      default:
        unint64_t v15 = specialized TopologicalSort.path(to:on:)(0xD000000000000015, 0x800000025C422760, a1, a2, a3, a4, a5);
        id v17 = v16;
        uint64_t v19 = v18;
        char v20 = specialized TopologicalSort.Path.constantBoolValue.getter(v15);

        swift_bridgeObjectRelease();
        char v14 = v20 & 1;
        break;
    }
  }
  return v14 & 1;
}

uint64_t specialized inferApplyPostProcessToneMap(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu
    || (uint64_t v12 = *v6,
        uint64_t v11 = v6[1],
        swift_bridgeObjectRetain(),
        int v13 = specialized Surface.init(nodeDefID:)(v12, v11),
        v13 == 4))
  {
    uint64_t v21 = &a1[OBJC_IVAR___SGNode_name];
    uint64_t v23 = *(void *)&a1[OBJC_IVAR___SGNode_name];
    uint64_t v22 = *((void *)v21 + 1);
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8) = v22;
    *(unsigned char *)(v24 + 16) = 10;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else if (v13 == 1)
  {
    unint64_t v14 = specialized TopologicalSort.path(to:on:)(0xD000000000000017, 0x800000025C422740, a1, a2, a3, a4, a5);
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    char v19 = specialized TopologicalSort.Path.constantBoolValue.getter(v14);

    swift_bridgeObjectRelease();
    char v20 = (v19 == 2) | v19;
  }
  else
  {
    char v20 = 1;
  }
  return v20 & 1;
}

void specialized conditionallyInsertDiscardNode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu
    || (uint64_t v8 = v5,
        uint64_t v14 = *v7,
        uint64_t v13 = v7[1],
        swift_bridgeObjectRetain(),
        specialized Surface.init(nodeDefID:)(v14, v13) >= 3u))
  {
    uint64_t v36 = *(void *)&a1[OBJC_IVAR___SGNode_name];
    uint64_t v35 = *(void *)&a1[OBJC_IVAR___SGNode_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v37 = v36;
    *(void *)(v37 + 8) = v35;
    *(unsigned char *)(v37 + 16) = 10;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return;
  }
  unint64_t v15 = specialized TopologicalSort.path(to:on:)(0xD000000000000010, 0x800000025C422700, a1, a2, a3, a4, a5);
  id v17 = v16;
  char v19 = v18;
  char v20 = specialized TopologicalSort.Path.hasValue.getter(v15, v18);

  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0) {
    return;
  }
  id v21 = a2;
  unint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = (char *)specialized Sequence.first(where:)(v22, 0x7974696361706FLL, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (!v23
    || (uint64_t v24 = &v23[OBJC_IVAR___SGInput_edge],
        swift_beginAccess(),
        BOOL v25 = (char *)MEMORY[0x261185960](v24),
        v23,
        !v25))
  {
LABEL_14:

    return;
  }
  unint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = (char *)specialized Sequence.first(where:)(v26, 0xD000000000000010, 0x800000025C422700);
  swift_bridgeObjectRelease();
  if (!v27
    || (os_log_type_t v28 = &v27[OBJC_IVAR___SGInput_edge],
        swift_beginAccess(),
        uint64_t v29 = (char *)MEMORY[0x261185960](v28),
        v27,
        !v29))
  {

    goto LABEL_14;
  }
  unint64_t v30 = swift_bridgeObjectRetain();
  unint64_t v31 = (char *)specialized Sequence.first(where:)(v30, 0x7974696361706FLL, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v38 = xmmword_25C4195B0;
    *(unsigned char *)(v38 + 16) = 21;
    swift_willThrow();

    return;
  }
  uint64_t v33 = static MaterialXNodeTokens.discardNodeID;
  unint64_t v32 = off_26A59B5F8;
  swift_bridgeObjectRetain();
  unsigned int v34 = specialized static SGNode.create(nodeDefName:name:)(v33, v32, 0xD000000000000019, (void *)0x800000025C422720);
  if (v8)
  {

    swift_bridgeObjectRelease();
    return;
  }
  id v39 = v34;
  swift_bridgeObjectRelease();
  SGGraph.remove(edge:)((uint64_t)v25);
  SGGraph.remove(edge:)((uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C4195A0;
  *(void *)(inited + 32) = v39;
  id v56 = (uint64_t *)inited;
  specialized Array._endMutation()();
  long long v41 = v56;
  id v42 = v39;
  v57.value._rawValue = v56;
  unint64_t v43 = (char *)v21;
  SGGraph.insert(_:)(v57);
  if (v44)
  {
    swift_bridgeObjectRelease();

    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)&v42[OBJC_IVAR___SGNode_outputs];
  if ((v45 & 0xC000000000000001) != 0)
  {
    id v46 = (char *)MEMORY[0x2611848A0](0);
  }
  else
  {
    if (!*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_30;
    }
    id v46 = (char *)*(id *)(v45 + 32);
  }
  id v47 = v46;
  uint64_t v48 = v31;
  SGGraph.connect(_:to:)(v47, v31);

  id v55 = v48;
  long long v41 = &OBJC_IVAR___SGEdge_from;
  unint64_t v43 = *(char **)&v25[OBJC_IVAR___SGEdge_from];
  unint64_t v31 = (char *)OBJC_IVAR___SGNode_inputs;
  uint64_t v49 = *(void *)&v42[OBJC_IVAR___SGNode_inputs];
  if ((v49 & 0xC000000000000001) != 0)
  {
LABEL_30:
    uint64_t v50 = (char *)MEMORY[0x2611848A0](0);
    goto LABEL_24;
  }
  if (!*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v50 = (char *)*(id *)(v49 + 32);
LABEL_24:
  uint64_t v51 = v50;
  SGGraph.connect(_:to:)(v43, v50);

  unint64_t v43 = *(char **)&v29[*v41];
  uint64_t v52 = *(void *)&v31[(void)v42];
  if ((v52 & 0xC000000000000001) != 0)
  {
LABEL_32:
    uint64_t v53 = (char *)MEMORY[0x2611848A0](1);
    goto LABEL_27;
  }
  if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v53 = (char *)*(id *)(v52 + 40);
LABEL_27:
    uint64_t v54 = v53;
    SGGraph.connect(_:to:)(v43, v53);

    return;
  }
  __break(1u);
}

uint64_t partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:)(a1);
}

ValueMetadata *type metadata accessor for MaterialXNodeTokens()
{
  return &type metadata for MaterialXNodeTokens;
}

void destroy for TopologicalSort.Path(uint64_t a1)
{
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for TopologicalSort.Path(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for TopologicalSort.Path(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  uint64_t v7 = (void *)a2[2];
  uint64_t v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for TopologicalSort.Path(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for TopologicalSort.Path(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TopologicalSort.Path(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TopologicalSort.Path()
{
  return &type metadata for TopologicalSort.Path;
}

uint64_t outlined retain of NodeDefinitionStore.Node(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type APIError and conformance APIError()
{
  unint64_t result = lazy protocol witness table cache variable for type APIError and conformance APIError;
  if (!lazy protocol witness table cache variable for type APIError and conformance APIError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type APIError and conformance APIError);
  }
  return result;
}

uint64_t sub_25C2B8C78()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [TypedTexture] and conformance [A], &demangling cache variable for type metadata for [TypedTexture]);
}

id outlined copy of NodeData(id result, int a2, void *a3, id a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  int v13 = a11 >> 6;
  switch(v13)
  {
    case 2:
      return outlined copy of SGDataTypeStorage(a3, a4, a5, a6, a7, a8, a9, a10, a11 & 0x3F);
    case 1:
      return result;
    case 0:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return (id)outlined copy of MaterialXAvailability(a5, a6);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:)(uint64_t result)
{
  char v2 = *(unsigned char *)(result + OBJC_IVAR___SGNode_data + 80);
  if ((v2 & 0xC0) == 0x80 && (v2 & 0x3F) == 6 && *(void *)(result + OBJC_IVAR___SGNode_data) == 13) {
    **(unsigned char **)(v1 + 16) = 1;
  }
  return result;
}

void outlined consume of NodeData(void *a1, int a2, void *a3, id a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  int v13 = a11 >> 6;
  switch(v13)
  {
    case 2:
      outlined consume of SGDataTypeStorage(a3, a4, a5, a6, a7, a8, a9, a10, a11 & 0x3F);
      break;
    case 1:

      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(a5, a6);
      break;
  }
}

void *MaterialCodingContainer.version.unsafeMutableAddressor()
{
  return &static MaterialCodingContainer.version;
}

uint64_t static MaterialCodingContainer.version.getter()
{
  return 1;
}

uint64_t MaterialCodingContainer.graph.getter()
{
  return MEMORY[0x270F9A8A0]();
}

uint64_t MaterialCodingContainer.init(graph:materialConfiguration:)()
{
  return 1;
}

void MaterialCodingContainer.init(from:)(void *a1)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MaterialCodingContainer.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialCodingContainer.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MaterialCodingContainer.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialCodingContainer.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialCodingContainer.CodingKeys()
{
  unint64_t v1 = 0x6870617267;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000015;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialCodingContainer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized MaterialCodingContainer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MaterialCodingContainer.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance MaterialCodingContainer.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialCodingContainer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialCodingContainer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MaterialCodingContainer.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialCodingContainer.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v14 = v12;
    char v13 = 1;
    type metadata accessor for SGGraph();
    lazy protocol witness table accessor for type SGGraph and conformance SGGraph(&lazy protocol witness table cache variable for type SGGraph and conformance SGGraph, (void (*)(uint64_t))type metadata accessor for SGGraph);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = a4;
    char v13 = 2;
    type metadata accessor for SGMaterialConfiguration();
    lazy protocol witness table accessor for type SGGraph and conformance SGGraph(&lazy protocol witness table cache variable for type SGMaterialConfiguration and conformance SGMaterialConfiguration, (void (*)(uint64_t))type metadata accessor for SGMaterialConfiguration);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void protocol witness for Decodable.init(from:) in conformance MaterialCodingContainer(void *a1@<X0>, void *a2@<X8>)
{
  specialized MaterialCodingContainer.init(from:)(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MaterialCodingContainer(void *a1)
{
  return MaterialCodingContainer.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void specialized MaterialCodingContainer.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialCodingContainer.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    LOBYTE(v13) = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    if (v7 == 1)
    {
      type metadata accessor for SGGraph();
      HIBYTE(v12) = 1;
      lazy protocol witness table accessor for type SGGraph and conformance SGGraph(&lazy protocol witness table cache variable for type SGGraph and conformance SGGraph, (void (*)(uint64_t))type metadata accessor for SGGraph);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      id v8 = v13;
      type metadata accessor for SGMaterialConfiguration();
      HIBYTE(v12) = 2;
      lazy protocol witness table accessor for type SGGraph and conformance SGGraph(&lazy protocol witness table cache variable for type SGMaterialConfiguration and conformance SGMaterialConfiguration, (void (*)(uint64_t))type metadata accessor for SGMaterialConfiguration);
      id v9 = v8;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      id v11 = v13;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);

      return;
    }
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v10 = v7;
    *(void *)(v10 + 8) = 1;
    *(unsigned char *)(v10 + 16) = 12;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MaterialCodingContainer(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for MaterialCodingContainer(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

void *assignWithCopy for MaterialCodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  uint64_t v7 = (void *)a2[2];
  id v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for MaterialCodingContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialCodingContainer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialCodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialCodingContainer()
{
  return &type metadata for MaterialCodingContainer;
}

uint64_t getEnumTagSinglePayload for MaterialCodingContainer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MaterialCodingContainer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2B99F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for MaterialCodingContainer.CodingKeys()
{
  return &unk_27099AB70;
}

uint64_t specialized MaterialCodingContainer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6870617267 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000025C422780)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t lazy protocol witness table accessor for type SGGraph and conformance SGGraph(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall OrderedSet.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = v3;
    uint64_t v7 = *(void *)(v2 + 16);
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    MutableCollection.swapAt(_:_:)();
    if (*v3)
    {
      OrderedSet._ensureUnique()();
      uint64_t v8 = *v3;
      if (*v4)
      {
        swift_retain();
        closure #1 in OrderedSet.swapAt(_:_:)((uint64_t *)(v8 + 16), v8 + 32, (uint64_t)v4, a1, a2, v7);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t closure #1 in OrderedSet.swapAt(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a2;
  uint64_t v9 = *(void *)(a6 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v24 = v15;
  ContiguousArray.subscript.getter();
  uint64_t v23 = a5;
  ContiguousArray.subscript.getter();
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t result = *a1;
  uint64_t v18 = 1 << *a1;
  uint64_t v19 = v18 - 1;
  if (__OFSUB__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v20 = 1 << *a1;
    if (!__OFSUB__(v20, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v19 & v16, v23, (v20 - 1) & result, v24, a1, v25);
      id v21 = *(void (**)(char *, uint64_t))(v9 + 8);
      v21(v12, a6);
      return ((uint64_t (*)(char *, uint64_t))v21)(v14, a6);
    }
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues<A>(for:withCurrentValue:and:withCurrentValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t result = *a5;
  uint64_t v12 = 1 << *a5;
  uint64_t v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = 1 << *a5;
  if (__OFSUB__(v14, 1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  return _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v13 & v10, a2, (v14 - 1) & result, a4, a5, a6);
}

void OrderedSet.partition(by:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
}

void OrderedSet._partition(by:callback:)(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  if (*v5)
  {
    OrderedSet._ensureUnique()();
    uint64_t v11 = *v5;
    if (*v5)
    {
      uint64_t v12 = *(void *)(a5 + 24);
      swift_retain();
      closure #1 in OrderedSet._partition(by:callback:)((uint64_t *)(v11 + 16), v11 + 32, a1, a2, a3, a4, &v13, v12);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    swift_getWitnessTable();
    MutableCollection<>.partition(by:)();
  }
}

uint64_t closure #1 in OrderedSet._partition(by:callback:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X4>, void (*a5)(void, void)@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v14 = type metadata accessor for ContiguousArray();
  uint64_t result = ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)();
  if (!v8)
  {
    if (v19 == 1)
    {
      swift_getWitnessTable();
      uint64_t WitnessTable = swift_getWitnessTable();
      return MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v14, (uint64_t)a7, WitnessTable, a8);
    }
    else
    {
      *a7 = v18;
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in OrderedSet._partition(by:callback:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X4>, void (*a5)(void, void)@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v13 = type metadata accessor for UnsafeMutableBufferPointer();
  swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v13, (uint64_t)&v19, WitnessTable, a8);
  if (!v18) {
    *a7 = v19;
  }
  return result;
}

uint64_t MutableCollection<>._partition(with:by:callback:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(void, void)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v114 = a6;
  uint64_t v113 = a5;
  id v142 = a3;
  uint64_t v143 = a4;
  uint64_t v112 = a2;
  char v117 = a1;
  uint64_t v123 = a8;
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v116 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  id v128 = (char *)&v107 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v141 = (char *)&v107 - v17;
  uint64_t v118 = v18;
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v144 = *(void (***)(void, void, void))(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v115 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  long long v119 = (char *)&v107 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  id v127 = (char *)&v107 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v121 = (char *)&v107 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v120 = (char *)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v133 = (char *)&v107 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v107 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)&v107 - v36;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v147 = v10;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v146 = v19;
  uint64_t v148 = a7;
  uint64_t v38 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  os_log_type_t v145 = v37;
  unint64_t v149 = v35;
  uint64_t v125 = v27;
  uint64_t v139 = v38;
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v122 = v28;
  if (v39)
  {
    id v40 = v145;
LABEL_3:
    uint64_t v41 = v122;
    uint64_t v42 = v125;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v149, v125);
    uint64_t v43 = v123;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v43, v40, v42);
  }
  else
  {
    uint64_t v44 = (void (**)(void))(v144 + 2);
    uint64_t v138 = (void (**)(char *, uint64_t))(v144 + 1);
    long long v144 = (void (**)(void, void, void))(v12 + 16);
    id v124 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v131 = a9;
    long long v132 = (void (**)(void, void, void))(v28 + 16);
    long long v140 = (uint64_t (**)(char *, uint64_t))(v28 + 8);
    uint64_t v45 = AssociatedTypeWitness;
    id v40 = v145;
    id v46 = v121;
    uint64_t v126 = v44;
    uint64_t v110 = a10;
    while (1)
    {
      id v47 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v137 = *v44;
      v137(v46);
      v47(v150, 0);
      uint64_t v48 = v151;
      char v49 = v142(v46);
      uint64_t v151 = v48;
      if (v48)
      {
        (*v138)(v46, v45);
        uint64_t v105 = *v140;
        uint64_t v106 = v125;
        (*v140)(v149, v125);
        return v105(v40, v106);
      }
      char v50 = v49;
      uint64_t v51 = v45;
      long long v135 = *v138;
      v135(v46, v45);
      uint64_t v52 = *v144;
      if (v50) {
        break;
      }
      uint64_t v100 = v141;
      uint64_t v101 = v148;
      v52(v141, v147, v148);
      dispatch thunk of Collection.formIndex(after:)();
      (*v124)(v100, v101);
      uint64_t v45 = v51;
LABEL_15:
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        goto LABEL_3;
      }
    }
    uint64_t v53 = v124;
    uint64_t v42 = v125;
    uint64_t v129 = *v144;
    do
    {
      uint64_t v54 = v141;
      uint64_t v55 = v147;
      uint64_t v56 = v148;
      v52(v141, v147, v148);
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      Swift::OpaquePointer_optional v57 = *v53;
      (*v53)(v54, v56);
      char v58 = v133;
      id v130 = *v132;
      v130(v133, v145, v42);
      LOBYTE(v54) = dispatch thunk of static Equatable.== infix(_:_:)();
      char v134 = *v140;
      v134(v58, v42);
      if (v54)
      {
        v134(v149, v42);
        uint64_t v43 = v123;
        uint64_t v41 = v122;
        id v40 = v145;
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v43, v40, v42);
      }
      uint64_t v59 = v128;
      uint64_t v60 = v148;
      v52(v128, v55, v148);
      unint64_t v61 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v62 = v127;
      uint64_t v63 = AssociatedTypeWitness;
      v137(v127);
      v61(v150, 0);
      v57(v59, v60);
      uint64_t v64 = v151;
      char v65 = v142(v62);
      uint64_t v151 = v64;
      if (v64)
      {
        v135(v62, v63);
        uint64_t v102 = v42;
        uint64_t v103 = v42;
        uint64_t v104 = v134;
        v134(v149, v103);
        return v104(v145, v102);
      }
      char v66 = v65;
      v135(v62, v63);
      uint64_t v52 = v129;
    }
    while ((v66 & 1) != 0);
    unint64_t v111 = v57;
    unint64_t v67 = v133;
    uint64_t v68 = v130;
    v130(v133, v145, v42);
    uint64_t v69 = v120;
    v68(v120, v149, v42);
    uint64_t v71 = v147;
    uint64_t v70 = v148;
    dispatch thunk of MutableCollection.swapAt(_:_:)();
    char v72 = v69;
    unint64_t v73 = v134;
    v134(v72, v42);
    v73(v67, v42);
    uint64_t v74 = v141;
    v52(v141, v71, v70);
    v68(v67, v145, v42);
    BOOL v75 = v120;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v109 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v73(v75, v42);
    v73(v67, v42);
    uint64_t v76 = v111;
    v111(v74, v70);
    v129(v74, v147, v70);
    v130(v67, v149, v42);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v108 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    char v77 = v75;
    unint64_t v78 = v134;
    v134(v77, v42);
    v78(v67, v42);
    v76(v74, v70);
    char v79 = v129;
    v129(v74, v147, v70);
    v130(v67, v145, v42);
    uint64_t v80 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
    uint64_t v81 = AssociatedTypeWitness;
    uint64_t v44 = v126;
    v137(v119);
    v80(v150, 0);
    uint64_t v82 = v81;
    unint64_t v83 = v115;
    v134(v67, v42);
    v111(v74, v70);
    unint64_t v84 = v116;
    v79(v116, v147, v70);
    unint64_t v85 = v120;
    v130(v120, v149, v42);
    uint64_t v86 = v83;
    uint64_t v87 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
    v137(v83);
    v87(v150, 0);
    v134(v85, v42);
    v111(v84, v70);
    uint64_t v88 = v117;
    uint64_t v89 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t result = *v88;
    uint64_t v91 = 1 << *v88;
    uint64_t v92 = v91 - 1;
    if (__OFSUB__(v91, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v93 = 1 << *v88;
      if (!__OFSUB__(v93, 1))
      {
        uint64_t v94 = v88;
        uint64_t v95 = v108;
        uint64_t v96 = v109;
        _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v92 & v89, v108, (v93 - 1) & result, v109, v94, v112);
        uint64_t v97 = v135;
        v135(v86, v82);
        v97(v119, v82);
        v113(v96, v95);
        uint64_t v98 = v141;
        uint64_t v99 = v148;
        v129(v141, v147, v148);
        id v40 = v145;
        dispatch thunk of Collection.formIndex(after:)();
        v111(v98, v99);
        id v46 = v121;
        uint64_t v45 = v82;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a5, a6);
  for (i = v11; i; uint64_t v11 = i)
  {
    uint64_t v12 = -1 << *a5;
    unint64_t v13 = (v12 ^ ~v11) + ((uint64_t)a5[1] >> 6);
    if (v13 >= ~v12) {
      uint64_t v14 = ~v12;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13 - v14 == a2) {
      break;
    }
    _HashTable.BucketIterator.advance()();
  }
  _HashTable.BucketIterator.currentValue.setter(a4, 0);
  uint64_t v15 = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, a5, a6);
  for (j = v15; j; uint64_t v15 = j)
  {
    uint64_t v16 = -1 << *a5;
    unint64_t v17 = (v16 ^ ~v15) + ((uint64_t)a5[1] >> 6);
    if (v17 >= ~v16) {
      uint64_t v18 = ~v16;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17 - v18 == a4) {
      break;
    }
    _HashTable.BucketIterator.advance()();
  }
  return _HashTable.BucketIterator.currentValue.setter(a2, 0);
}

void OrderedSet.sort(by:)()
{
}

void OrderedSet<>.sort()()
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  MutableCollection<>.sort()();
  type metadata accessor for OrderedSet();
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.shuffle()()
{
}

void OrderedSet.shuffle<A>(using:)()
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  MutableCollection<>.shuffle<A>(using:)();
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.reverse()()
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  MutableCollection<>.reverse()();
  OrderedSet._regenerateHashTable()();
}

uint64_t OrderedSet._halfStablePartition<A>(values:by:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = v6 + 1;
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t result = ContiguousArray.count.getter();
  if (result == a2)
  {
    uint64_t v34 = v6;
    uint64_t v41 = 0;
    type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v16 = *v13;
    uint64_t v17 = *(void *)(*v13 + 16);
    unint64_t v18 = (*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
    uint64_t v19 = a5;
    uint64_t v20 = a6;
    uint64_t v21 = a3;
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    uint64_t v24 = a4;
    uint64_t v25 = v16 + v18;
    unint64_t v39 = v16 + v18;
    uint64_t v40 = v17;
    uint64_t v26 = v14;
    uint64_t v27 = *(void *)(v19 + 24);
    uint64_t v35 = v17;
    uint64_t v36 = v26;
    closure #1 in OrderedSet._halfStablePartition<A>(values:by:)((uint64_t)&v39, &v41, v21, v24, v22, v23, v26, v20);
    if (v37)
    {
      $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v39, v25, v35);
    }
    else
    {
      unint64_t v33 = v18;
      $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v39, v25, v35);
      uint64_t v28 = v41;
      if (v28 >= ContiguousArray.count.getter())
      {
        return ContiguousArray.count.getter();
      }
      else
      {
        OrderedSet._ensureUnique()();
        uint64_t v29 = *v34;
        *uint64_t v34 = 0;
        ContiguousArray._makeMutableAndUnique()();
        uint64_t v30 = v34[1];
        uint64_t v31 = *(void *)(v30 + 16);
        uint64_t v32 = v30 + v33;
        unint64_t v39 = v30 + v33;
        uint64_t v40 = v31;
        closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(&v39, &v41, v21, v22, v23, v29, v36, &v38, v20, v27);
        $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v39, v32, v31);
        uint64_t v25 = v38;
        swift_retain();
        swift_release();
        *uint64_t v34 = v29;
        swift_release();
      }
    }
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *closure #1 in OrderedSet._halfStablePartition<A>(values:by:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a3;
  uint64_t v38 = a5;
  uint64_t v40 = a8;
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v36 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v11;
  uint64_t result = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v35 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v16;
  if (*v16 < result[1])
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v18 = v14 + 16;
    uint64_t v32 = *(void *)(v18 + 56);
    unint64_t v33 = v19;
    uint64_t v34 = v13;
    uint64_t v30 = v13 + 8;
    uint64_t v31 = v13 + 16;
    uint64_t v28 = result;
    uint64_t v29 = (uint64_t (**)(char *, uint64_t))(v18 - 8);
    uint64_t v27 = v18;
    uint64_t v20 = v35;
    uint64_t v21 = v36;
    uint64_t v23 = v39;
    uint64_t v22 = v40;
    uint64_t v24 = v13;
    do
    {
      v33(v20, *result + v32 * v17, v23);
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v21, v38 + *(void *)(v24 + 72) * v17, v22);
      uint64_t v25 = v41;
      char v26 = v37(v20, v21);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v22);
      uint64_t result = (void *)(*v29)(v20, v23);
      uint64_t v41 = v25;
      if (v25 || (v26 & 1) != 0) {
        break;
      }
      uint64_t v17 = *a2 + 1;
      if (__OFADD__(*a2, 1))
      {
        __break(1u);
        return result;
      }
      *a2 = v17;
      uint64_t result = v28;
    }
    while (v17 < v28[1]);
  }
  return result;
}

void closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(void *a1@<X0>, Swift::Int *a2@<X1>, uint64_t (*a3)(char *, char *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, Swift::Int *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  char v49 = a3;
  uint64_t v12 = a1;
  uint64_t v34 = a8;
  uint64_t v51 = *(void *)(a9 - 8);
  uint64_t v52 = a4;
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v48 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v13);
  id v47 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v18 = *v17;
  Swift::Int v19 = *v17 + 1;
  if (__OFADD__(*v17, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  Swift::Int v20 = v12[1];
  if (v20 < v19)
  {
LABEL_20:
    __break(1u);
    return;
  }
  if (v19 != v20)
  {
    uint64_t v46 = v50 + 16;
    uint64_t v45 = v51 + 16;
    uint64_t v44 = v51 + 8;
    uint64_t v42 = a2;
    uint64_t v43 = v50 + 8;
    uint64_t v36 = (uint64_t *)(v39 + 16);
    uint64_t v37 = a10;
    uint64_t v35 = v39 + 32;
    Swift::Int v40 = v20;
    uint64_t v41 = v12;
    uint64_t v21 = v48;
    while (v19 < v20)
    {
      uint64_t v23 = v50;
      Swift::Int v24 = *v12 + *(void *)(v50 + 72) * v19;
      uint64_t v25 = v47;
      (*(void (**)(char *, Swift::Int, uint64_t))(v50 + 16))(v47, v24, a7);
      uint64_t v26 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v21, v52 + *(void *)(v51 + 72) * v19, a9);
      uint64_t v27 = v53;
      uint64_t v28 = a7;
      char v29 = v49(v25, v21);
      (*(void (**)(char *))(v26 + 8))(v21);
      uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
      uint64_t v31 = v28;
      v30(v25, v28);
      uint64_t v53 = v27;
      if (v27) {
        return;
      }
      if (v29)
      {
        a7 = v28;
        uint64_t v12 = v41;
        uint64_t v22 = v42;
        Swift::Int v20 = v40;
      }
      else
      {
        uint64_t v12 = v41;
        uint64_t v22 = v42;
        a7 = v31;
        UnsafeMutableBufferPointer.swapAt(_:_:)(*v42, v19);
        UnsafeMutableBufferPointer.swapAt(_:_:)(*v22, v19);
        if (v39)
        {
          uint64_t v32 = v53;
          closure #1 in closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(v36, v35, (uint64_t)v12, (uint64_t)v22, v19, v31, a9, v37);
          uint64_t v53 = v32;
        }
        Swift::Int v20 = v40;
        if (__OFADD__(*v22, 1)) {
          goto LABEL_18;
        }
        ++*v22;
      }
      if (v20 == ++v19)
      {
        Swift::Int v18 = *v22;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_15:
  *uint64_t v34 = v18;
}

uint64_t closure #1 in closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a2;
  uint64_t v35 = a8;
  uint64_t v34 = a1;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v17 = *v16;
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v31 = *v20;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21((char *)&v30 - v14, v17 + v19 * v31, v22);
  uint64_t v32 = a5;
  v21(v13, v17 + v19 * a5, a6);
  uint64_t v23 = v34;
  uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t result = *v23;
  uint64_t v26 = 1 << *v23;
  uint64_t v27 = v26 - 1;
  if (__OFSUB__(v26, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = 1 << *v23;
    if (!__OFSUB__(v28, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v27 & v24, v32, (v28 - 1) & result, v31, v23, v33);
      char v29 = *(void (**)(char *, uint64_t))(v10 + 8);
      v29(v13, a6);
      return ((uint64_t (*)(char *, uint64_t))v29)(v15, a6);
    }
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet._partition<A>(values:by:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  OrderedSet._ensureUnique()();
  uint64_t v9 = *v6;
  *char v6 = 0;
  uint64_t v10 = (uint64_t)(v6 + 1);
  uint64_t v11 = *(void *)(a5 + 16);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v12 = v6[1];
  uint64_t v13 = *(void *)(v12 + 16);
  v20[0] = v12
         + ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80));
  uint64_t v14 = v20[0];
  v20[1] = v13;
  closure #1 in OrderedSet._partition<A>(values:by:)(v20, a1, a2, a3, v9, v11, a6, &v21, *(void *)(a5 + 24));
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v20, v14, v13);
  if (!v19) {
    uint64_t v10 = v21;
  }
  swift_retain();
  swift_release();
  *char v6 = v9;
  swift_release();
  return v10;
}

void closure #1 in OrderedSet._partition<A>(values:by:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9)
{
  uint64_t v9 = a7;
  char v79 = a4;
  uint64_t v58 = a3;
  uint64_t v63 = a2;
  uint64_t v12 = a1;
  uint64_t v60 = a8;
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  unint64_t v67 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v62 = (char *)&v54 - v17;
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  char v66 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t *)MEMORY[0x270FA5388](v20);
  unint64_t v61 = (char *)&v54 - v23;
  uint64_t v24 = *v22;
  uint64_t v25 = v12[1];
  Swift::Int v83 = 0;
  uint64_t v27 = MEMORY[0x2611845F0](v24, v25, v26);
  if (v27)
  {
    Swift::Int v28 = 0;
    uint64_t v56 = a9;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v30 = v19 + 16;
    char v29 = v31;
    uint64_t v32 = *(void *)(v30 + 56);
    uint64_t v55 = (uint64_t *)(a5 + 16);
    uint64_t v57 = a5;
    uint64_t v54 = a5 + 32;
    char v77 = (void (**)(char *, uint64_t))(v30 - 8);
    uint64_t v78 = v13 + 8;
    uint64_t v71 = v12;
    uint64_t v72 = v9;
    uint64_t v59 = v13;
    uint64_t v73 = v30;
    uint64_t v74 = v32;
    uint64_t v65 = a6;
    BOOL v75 = v31;
    uint64_t v76 = v13 + 16;
    while (1)
    {
      uint64_t v64 = v27;
      uint64_t v33 = v61;
      v29(v61, *v12 + v32 * v28, a6);
      uint64_t v34 = *(void *)(v13 + 72);
      uint64_t v35 = v62;
      Swift::Int v80 = v28;
      uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v70(v62, v63 + v34 * v28, v9);
      uint64_t v36 = v81;
      char v37 = v79(v33, v35);
      uint64_t v38 = v13;
      char v39 = v37;
      uint64_t v69 = *(void (**)(char *, uint64_t))(v38 + 8);
      v69(v35, v9);
      uint64_t v68 = *v77;
      v68(v33, a6);
      uint64_t v81 = v36;
      if (v36) {
        break;
      }
      if (v39)
      {
        Swift::Int v40 = v64 - 1;
        Swift::Int v41 = v80;
        uint64_t v42 = v75;
        if (__OFSUB__(v64, 1))
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        if (v80 == v40)
        {
LABEL_21:
          uint64_t v27 = v41;
          goto LABEL_22;
        }
        Swift::Int v43 = v74 * v40;
        uint64_t v64 = -v34;
        Swift::Int v44 = v63 + v34 * v40;
        while (1)
        {
          uint64_t v45 = v66;
          v42(v66, *v71 + v43, a6);
          uint64_t v46 = v67;
          uint64_t v47 = v72;
          v70(v67, v44, v72);
          uint64_t v48 = v81;
          char v49 = v79(v45, v46);
          uint64_t v50 = v47;
          a6 = v65;
          v69(v46, v50);
          v68(v45, a6);
          uint64_t v81 = v48;
          if (v48) {
            return;
          }
          if ((v49 & 1) == 0)
          {
            v82[0] = v40;
            uint64_t v12 = v71;
            Swift::Int v52 = v80;
            UnsafeMutableBufferPointer.swapAt(_:_:)(v80, v40);
            uint64_t v9 = v72;
            UnsafeMutableBufferPointer.swapAt(_:_:)(v52, v40);
            if (v57)
            {
              uint64_t v53 = v81;
              closure #1 in closure #1 in OrderedSet._partition<A>(values:by:)(v55, v54, (uint64_t)v12, (uint64_t)&v83, (uint64_t)v82, a6, v9, v56);
              uint64_t v81 = v53;
            }
            uint64_t v13 = v59;
            uint64_t v32 = v74;
            BOOL v51 = __OFADD__(v52, 1);
            Swift::Int v28 = v52 + 1;
            char v29 = v75;
            if (!v51)
            {
              uint64_t v27 = v82[0];
              goto LABEL_19;
            }
            goto LABEL_27;
          }
          BOOL v51 = __OFSUB__(v40--, 1);
          Swift::Int v41 = v80;
          if (v51)
          {
            __break(1u);
            goto LABEL_25;
          }
          v43 -= v74;
          v44 += v64;
          uint64_t v42 = v75;
          if (v80 == v40) {
            goto LABEL_21;
          }
        }
      }
      Swift::Int v28 = v80 + 1;
      uint64_t v32 = v74;
      char v29 = v75;
      uint64_t v27 = v64;
      if (__OFADD__(v80, 1)) {
        goto LABEL_26;
      }
      uint64_t v12 = v71;
      uint64_t v9 = v72;
      uint64_t v13 = v59;
LABEL_19:
      Swift::Int v83 = v28;
      if (v28 == v27) {
        goto LABEL_22;
      }
    }
  }
  else
  {
LABEL_22:
    *uint64_t v60 = v27;
  }
}

uint64_t closure #1 in closure #1 in OrderedSet._partition<A>(values:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v30 = a2;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v17 = *v16;
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v29 = *v20;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21((char *)&v29 - v14, v17 + v19 * v29, v22);
  uint64_t v31 = *(void *)v31;
  v21(v13, v17 + v31 * v19, a6);
  uint64_t v23 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t result = *a1;
  uint64_t v25 = 1 << *a1;
  uint64_t v26 = v25 - 1;
  if (__OFSUB__(v25, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = 1 << *a1;
    if (!__OFSUB__(v27, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v26 & v23, v31, (v27 - 1) & result, v29, a1, v30);
      Swift::Int v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v13, a6);
      return ((uint64_t (*)(char *, uint64_t))v28)(v15, a6);
    }
  }
  __break(1u);
  return result;
}

void *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        uint64_t v3 = type metadata accessor for ContiguousArray();
        return (void *)destructiveProjectEnumData for NodePersonality.ShaderType(v3);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in OrderedSet._partition(by:callback:)@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in OrderedSet._partition(by:callback:)(*(uint64_t **)(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(void))(v1 + 48), *(void *)(v1 + 56), *(void (**)(void, void))(v1 + 64), *(void *)(v1 + 72), a1, *(void *)(v1 + 24));
}

uint64_t SGEdge.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0x676E697373694DLL;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___SGEdge_from);
  uint64_t v4 = v3 + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x261185960](v4);
  if (v5)
  {
    char v6 = (void *)v5;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR___SGNode_name);
    uint64_t v7 = *(void **)(v5 + OBJC_IVAR___SGNode_name + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = (void *)0xE700000000000000;
    uint64_t v8 = 0x676E697373694DLL;
  }
  v9._uint64_t countAndFlagsBits = v8;
  v9._char object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 58;
  v10._char object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR___SGOutput_name);
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR___SGOutput_name + 8);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._char object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x209286E220;
  v14._char object = (void *)0xA500000000000000;
  String.append(_:)(v14);
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR___SGEdge_to);
  uint64_t v16 = v15 + OBJC_IVAR___SGInput_node;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x261185960](v16);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    uint64_t v2 = *(void *)(v17 + OBJC_IVAR___SGNode_name);
    uint64_t v19 = *(void **)(v17 + OBJC_IVAR___SGNode_name + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = (void *)0xE700000000000000;
  }
  v20._uint64_t countAndFlagsBits = v2;
  v20._char object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 58;
  v21._char object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  uint64_t v22 = *(void *)(v15 + OBJC_IVAR___SGInput_name);
  uint64_t v23 = *(void **)(v15 + OBJC_IVAR___SGInput_name + 8);
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._char object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  return 0;
}

id SGEdge.from.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGEdge_from);
}

id SGEdge.to.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGEdge_to);
}

id SGEdge.__allocating_init(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[OBJC_IVAR___SGEdge_from] = a1;
  *(void *)&v5[OBJC_IVAR___SGEdge_to] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SGEdge.init(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___SGEdge_from] = a1;
  *(void *)&v2[OBJC_IVAR___SGEdge_to] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

ShaderGraph::SGEdge::CodingKeys_optional __swiftcall SGEdge.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  char object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._char object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = ShaderGraph_SGEdge_CodingKeys_to;
  }
  else {
    v4.value = ShaderGraph_SGEdge_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

ShaderGraph::SGEdge::CodingKeys_optional __swiftcall SGEdge.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._char object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = ShaderGraph_SGEdge_CodingKeys_to;
  }
  else {
    v4.value = ShaderGraph_SGEdge_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

ShaderGraph::SGEdge::CodingKeys_optional __swiftcall SGEdge.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGEdge::CodingKeys_optional)2;
}

uint64_t SGEdge.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGEdge.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 28532;
  }
  else {
    return 1836020326;
  }
}

uint64_t SGEdge.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 28532;
  }
  else {
    return 1836020326;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGEdge.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 28532;
  }
  else {
    uint64_t v3 = 1836020326;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE200000000000000;
  }
  if (*a2) {
    uint64_t v5 = 28532;
  }
  else {
    uint64_t v5 = 1836020326;
  }
  if (*a2) {
    unint64_t v6 = 0xE200000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGEdge.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGEdge.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGEdge.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGEdge.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGEdge.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1836020326;
  if (*v1) {
    uint64_t v2 = 28532;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGEdge.CodingKeys()
{
  if (*v0) {
    return 28532;
  }
  else {
    return 1836020326;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGEdge.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  char object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._char object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SGEdge.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGEdge.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGEdge.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id SGEdge.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGEdge.init(from:)(a1);
}

id SGEdge.init(from:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGEdge.CodingKeys>);
  uint64_t v4 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  char v7 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    id v14 = 0;
    type metadata accessor for SGError();
    id v11 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v8 = v4;
    type metadata accessor for SGOutput();
    char v19 = 0;
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, v9, (void (*)(uint64_t))type metadata accessor for SGOutput);
    uint64_t v10 = v16;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v7[OBJC_IVAR___SGEdge_from] = v20;
    type metadata accessor for SGInput();
    char v19 = 1;
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, v13, (void (*)(uint64_t))type metadata accessor for SGInput);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v10);
    *(void *)&v7[OBJC_IVAR___SGEdge_to] = v20;

    v18.receiver = v7;
    v18.super_class = ObjectType;
    id v14 = objc_msgSendSuper2(&v18, sel_init);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v14;
}

unint64_t lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for SGOutput()
{
  return self;
}

uint64_t type metadata accessor for SGInput()
{
  return self;
}

void SGEdge.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGEdge.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR___SGEdge_from);
  HIBYTE(v12) = 0;
  type metadata accessor for SGOutput();
  lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, v9, (void (*)(uint64_t))type metadata accessor for SGOutput);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    id v11 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();
  }
  else
  {
    uint64_t v13 = *(void *)(v3 + OBJC_IVAR___SGEdge_to);
    HIBYTE(v12) = 1;
    type metadata accessor for SGInput();
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, v10, (void (*)(uint64_t))type metadata accessor for SGInput);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id SGEdge.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SGEdge.init()()
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGEdge@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance SGEdge(a1, (uint64_t (*)(uint64_t))SGEdge.init(from:), a2);
}

void protocol witness for Encodable.encode(to:) in conformance SGEdge(void *a1)
{
}

uint64_t static IOAttachment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IOAttachment(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t IOAttachment.description.getter(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0x6863617474616E75;
  }
  String.append(_:)(*(Swift::String *)&a1);
  v2._uint64_t countAndFlagsBits = 41;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x6465686361747461;
}

uint64_t SGInput.type.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___SGInput_type;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t SGInput.type.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___SGInput_type);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SGInput.type.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGInput.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGInput_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGInput.attachment.getter()
{
  return SGInput.attachment.getter(&OBJC_IVAR___SGInput_attachment);
}

uint64_t SGInput.attachment.setter(uint64_t a1, uint64_t a2)
{
  return SGInput.attachment.setter(a1, a2, &OBJC_IVAR___SGInput_attachment);
}

uint64_t (*SGInput.attachment.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t SGInput.edge.getter()
{
  return SGInput.edge.getter(&OBJC_IVAR___SGInput_edge);
}

void SGInput.edge.setter(void *a1)
{
}

{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
}

uint64_t (*SGInput.edge.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___SGInput_edge;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x261185960](v5);
  return SGInput.edge.modify;
}

uint64_t SGInput.node.getter()
{
  return SGInput.edge.getter(&OBJC_IVAR___SGInput_node);
}

void SGInput.node.setter(void *a1)
{
}

uint64_t (*SGInput.node.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___SGInput_node;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x261185960](v5);
  return SGInput.edge.modify;
}

uint64_t SGInput.description.getter()
{
  _StringGuts.grow(_:)(25);
  v1._uint64_t countAndFlagsBits = 0x287475706E494753;
  v1._char object = (void *)0xE900000000000022;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___SGInput_name);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___SGInput_name + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._char object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2108450;
  v5._char object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  swift_beginAccess();
  v6._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8236;
  v7._char object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 8236;
  v8._char object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = v0 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  uint64_t v10 = (void *)MEMORY[0x261185960](v9);

  if (v10) {
    uint64_t v11 = 0x6567646520736168;
  }
  else {
    uint64_t v11 = 0x65676465206F6ELL;
  }
  if (v10) {
    unint64_t v12 = 0xE800000000000000;
  }
  else {
    unint64_t v12 = 0xE700000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41;
  v14._char object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0;
}

id SGInput.__allocating_init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (char *)objc_allocWithZone(v5);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  unint64_t v12 = &v11[OBJC_IVAR___SGInput_name];
  *(void *)unint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  *(void *)&v11[OBJC_IVAR___SGInput_type] = a3;
  unint64_t v13 = &v11[OBJC_IVAR___SGInput_attachment];
  *(void *)unint64_t v13 = a4;
  *((void *)v13 + 1) = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, sel_init);
}

id SGInput.init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  unint64_t v12 = &v5[OBJC_IVAR___SGInput_name];
  *(void *)unint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  *(void *)&v5[OBJC_IVAR___SGInput_type] = a3;
  unint64_t v13 = &v5[OBJC_IVAR___SGInput_attachment];
  *(void *)unint64_t v13 = a4;
  *((void *)v13 + 1) = a5;
  v15.receiver = v5;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, sel_init);
}

ShaderGraph::SGInput::CodingKeys_optional __swiftcall SGInput.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGInput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(rawValue, v1);
}

ShaderGraph::SGInput::CodingKeys_optional __swiftcall SGInput.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  v1._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGInput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(stringValue, v1);
}

ShaderGraph::SGInput::CodingKeys_optional __swiftcall SGInput.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGInput::CodingKeys_optional)3;
}

uint64_t SGInput.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGInput.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return 1701869940;
  }
  if (a1 == 1) {
    return 1701667182;
  }
  return 0x656D686361747461;
}

uint64_t SGInput.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1701869940;
  }
  if (a1 == 1) {
    return 1701667182;
  }
  return 0x656D686361747461;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGInput.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  unint64_t result = SGInput.CodingKeys.init(stringValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGInput.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1701667182;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656D686361747461;
    unint64_t v4 = 0xEA0000000000746ELL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701869940;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGInput.CodingKeys()
{
  uint64_t v1 = 1701667182;
  if (*v0 != 1) {
    uint64_t v1 = 0x656D686361747461;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGInput.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  unint64_t result = SGInput.CodingKeys.init(stringValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGInput.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGInput.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SGInput.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGInput.init(from:)(a1);
}

uint64_t SGInput.init(from:)(void *a1)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGInput.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = &v1[OBJC_IVAR___SGInput_edge];
  swift_unknownObjectWeakInit();
  v28[0] = &v1[OBJC_IVAR___SGInput_node];
  swift_unknownObjectWeakInit();
  uint64_t v9 = a1[3];
  uint64_t v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  uint64_t v31 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v10 = 0;
    uint64_t v17 = v31;
  }
  else
  {
    LOBYTE(v34) = 1;
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v16 = v15;
    uint64_t v17 = v31;
    objc_super v18 = (uint64_t *)&v31[OBJC_IVAR___SGInput_name];
    *objc_super v18 = v14;
    v18[1] = (uint64_t)v15;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v14;
    v19._char object = v16;
    v20._uint64_t countAndFlagsBits = 1701667182;
    v20._char object = (void *)0xE400000000000000;
    validate(_:named:)(v19, v20);
    id v3 = v21;
    if (!v21)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SGDataType(0);
      char v33 = 0;
      lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, type metadata accessor for SGDataType);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(void *)&v17[OBJC_IVAR___SGInput_type] = v34;
      LOBYTE(v34) = 2;
      uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v25 = (uint64_t *)&v17[OBJC_IVAR___SGInput_attachment];
      uint64_t v26 = (uint64_t)v29;
      if (v24)
      {
        *uint64_t v25 = v22;
        v25[1] = v24;
      }
      else
      {
        *uint64_t v25 = 0;
        v25[1] = 0;
      }
      uint64_t v27 = (objc_class *)ObjectType;

      v32.receiver = v17;
      v32.super_class = v27;
      uint64_t v10 = (uint64_t)objc_msgSendSuper2(&v32, sel_init);
      __swift_destroy_boxed_opaque_existential_1Tm(v26);
      return v10;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = 1;
  }
  uint64_t v11 = (uint64_t)v29;
  type metadata accessor for SGError();
  id v12 = v3;
  SGError.__allocating_init(_:)(v3);
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  if (v10) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  swift_deallocPartialClassInstance();
  return v10;
}

void SGInput.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGInput.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    id v10 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();
  }
  else
  {
    uint64_t v9 = (void *)(v3 + OBJC_IVAR___SGInput_type);
    swift_beginAccess();
    v12[1] = *v9;
    char v13 = 0;
    type metadata accessor for SGDataType(0);
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, type metadata accessor for SGDataType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3 + OBJC_IVAR___SGInput_attachment;
    swift_beginAccess();
    if (*(void *)(v11 + 8))
    {
      char v13 = 2;
      swift_bridgeObjectRetain();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

uint64_t SGInput.isEqual(_:)(uint64_t a1)
{
  return SGInput.isEqual(_:)(a1, &OBJC_IVAR___SGInput_name, &OBJC_IVAR___SGInput_type, &OBJC_IVAR___SGInput_attachment);
}

void SGInput.init()()
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGInput@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance SGEdge(a1, (uint64_t (*)(uint64_t))SGInput.init(from:), a2);
}

void protocol witness for Encodable.encode(to:) in conformance SGInput(void *a1)
{
}

uint64_t key path getter for WeakBox.value : <A>WeakBox<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeakBox();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v6 = MEMORY[0x261185960](v8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v6;
  return result;
}

void WeakBox.value.getter()
{
}

uint64_t WeakBox.value.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*WeakBox.value.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = MEMORY[0x261185960](v1);
  return WeakBox.value.modify;
}

uint64_t WeakBox.value.modify()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t WeakBox.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

BOOL static WeakBox<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x261185960]();
  uint64_t v4 = MEMORY[0x261185960](a2);
  if (!v3)
  {
    if (!v4) {
      return 1;
    }
    goto LABEL_7;
  }
  if (!v4)
  {
LABEL_7:
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (v5 & 1) != 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> WeakBox<A>(uint64_t a1, uint64_t a2)
{
  return static WeakBox<>.== infix(_:_:)(a1, a2);
}

uint64_t WeakBox<>.hash(into:)()
{
  MEMORY[0x261185960](v0);
  type metadata accessor for Optional();
  Optional<A>.hash(into:)();
  return swift_unknownObjectRelease();
}

Swift::Int WeakBox<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> WeakBox<A>()
{
  return WeakBox<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> WeakBox<A>()
{
  return WeakBox<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> WeakBox<A>()
{
  return Hasher._finalize()();
}

uint64_t SGOutput.type.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___SGOutput_type;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t SGOutput.type.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___SGOutput_type);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SGOutput.type.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

id @objc SGInput.name.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)MEMORY[0x261183E60](v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t SGOutput.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGOutput_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGOutput.attachment.getter()
{
  return SGInput.attachment.getter(&OBJC_IVAR___SGOutput_attachment);
}

uint64_t SGInput.attachment.getter(void *a1)
{
  unint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SGOutput.attachment.setter(uint64_t a1, uint64_t a2)
{
  return SGInput.attachment.setter(a1, a2, &OBJC_IVAR___SGOutput_attachment);
}

uint64_t SGInput.attachment.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGOutput.attachment.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGOutput.edges.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___SGOutput_edges);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  swift_retain();
  return v2;
}

uint64_t SGOutput.edges.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___SGOutput_edges);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_release();
  return swift_release();
}

uint64_t (*SGOutput.edges.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t key path getter for SGOutput.node : SGOutput@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  uint64_t result = MEMORY[0x261185960](v3);
  *a2 = result;
  return result;
}

uint64_t SGOutput.node.getter()
{
  return SGInput.edge.getter(&OBJC_IVAR___SGOutput_node);
}

uint64_t SGInput.edge.getter(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x261185960](v2);
}

void SGOutput.node.setter(void *a1)
{
}

uint64_t (*SGOutput.node.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___SGOutput_node;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x261185960](v5);
  return SGInput.edge.modify;
}

void SGInput.edge.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

id @objc static SGInput.create(name:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  id v10 = (void *)a5(v7, v9, a4);
  swift_bridgeObjectRelease();
  return v10;
}

id @objc SGEdge.debugDescription.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  uint64_t v8 = (void *)MEMORY[0x261183E60](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t SGOutput.description.getter()
{
  _StringGuts.grow(_:)(26);
  v1._uint64_t countAndFlagsBits = 0x74757074754F4753;
  v1._char object = (void *)0xEA00000000002228;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___SGOutput_name);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___SGOutput_name + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._char object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2108450;
  v5._char object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  swift_beginAccess();
  v6._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8236;
  v7._char object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 8236;
  v8._char object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = v0 + OBJC_IVAR___SGOutput_edges;
  swift_beginAccess();
  if (*(void *)(*(void *)(v9 + 8) + 16)) {
    uint64_t v10 = 0x6567646520736168;
  }
  else {
    uint64_t v10 = 0x7365676465206F6ELL;
  }
  if (*(void *)(*(void *)(v9 + 8) + 16)) {
    unint64_t v11 = 0xE900000000000073;
  }
  else {
    unint64_t v11 = 0xE800000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._char object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

id SGOutput.__allocating_init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v11 = (char *)objc_allocWithZone(v5);
  unint64_t v12 = &v11[OBJC_IVAR___SGOutput_attachment];
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
  char v14 = &v11[OBJC_IVAR___SGOutput_edges];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = v13;
  swift_unknownObjectWeakInit();
  objc_super v15 = &v11[OBJC_IVAR___SGOutput_name];
  *(void *)objc_super v15 = a1;
  *((void *)v15 + 1) = a2;
  *(void *)&v11[OBJC_IVAR___SGOutput_type] = a3;
  swift_beginAccess();
  *(void *)unint64_t v12 = a4;
  *((void *)v12 + 1) = a5;
  swift_bridgeObjectRelease();
  v17.receiver = v11;
  v17.super_class = v5;
  return objc_msgSendSuper2(&v17, sel_init);
}

id SGOutput.init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v12 = &v5[OBJC_IVAR___SGOutput_attachment];
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
  char v14 = &v5[OBJC_IVAR___SGOutput_edges];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = v13;
  swift_unknownObjectWeakInit();
  objc_super v15 = &v5[OBJC_IVAR___SGOutput_name];
  *(void *)objc_super v15 = a1;
  *((void *)v15 + 1) = a2;
  *(void *)&v5[OBJC_IVAR___SGOutput_type] = a3;
  swift_beginAccess();
  *(void *)unint64_t v12 = a4;
  *((void *)v12 + 1) = a5;
  swift_bridgeObjectRelease();
  v17.receiver = v5;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, sel_init);
}

ShaderGraph::SGOutput::CodingKeys_optional __swiftcall SGOutput.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGOutput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(rawValue, v1);
}

ShaderGraph::SGOutput::CodingKeys_optional __swiftcall SGOutput.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  v1._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGOutput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(stringValue, v1);
}

unint64_t SGInput.CodingKeys.init(stringValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  char object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._char object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

ShaderGraph::SGOutput::CodingKeys_optional __swiftcall SGOutput.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGOutput::CodingKeys_optional)3;
}

uint64_t SGOutput.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGInput.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1701667182;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656D686361747461;
    unint64_t v4 = 0xEA0000000000746ELL;
  }
  if (*a1) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 1701869940;
  }
  if (v2) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = 0xE400000000000000;
  }
  uint64_t v8 = 1701667182;
  if (*a2 != 1)
  {
    uint64_t v8 = 0x656D686361747461;
    unint64_t v3 = 0xEA0000000000746ELL;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 1701869940;
  }
  if (*a2) {
    unint64_t v10 = v3;
  }
  else {
    unint64_t v10 = 0xE400000000000000;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGInput.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGInput.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGInput.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGOutput.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  unint64_t result = SGInput.CodingKeys.init(stringValue:)(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGOutput.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  unint64_t result = SGInput.CodingKeys.init(stringValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGOutput.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGOutput.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id SGOutput.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGOutput.init(from:)(a1);
}

id SGOutput.init(from:)(void *a1)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGOutput.CodingKeys>);
  uint64_t v35 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &v1[OBJC_IVAR___SGOutput_attachment];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v38 = (uint64_t *)v8;
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  unint64_t v10 = (id *)&v1[OBJC_IVAR___SGOutput_edges];
  *unint64_t v10 = 0;
  v10[1] = v9;
  char v37 = v10;
  uint64_t v36 = &v1[OBJC_IVAR___SGOutput_node];
  swift_unknownObjectWeakInit();
  uint64_t v11 = a1[3];
  char v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  unint64_t v12 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    int v15 = 0;
    uint64_t v23 = v12;
  }
  else
  {
    uint64_t v13 = v35;
    LOBYTE(v42) = 1;
    uint64_t v14 = v5;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v22 = v21;
    uint64_t v23 = v12;
    uint64_t v24 = (uint64_t *)&v12[OBJC_IVAR___SGOutput_name];
    *uint64_t v24 = v20;
    v24[1] = (uint64_t)v21;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = v20;
    v25._char object = v22;
    v26._uint64_t countAndFlagsBits = 1701667182;
    v26._char object = (void *)0xE400000000000000;
    validate(_:named:)(v25, v26);
    id v3 = v27;
    if (!v27)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SGDataType(0);
      char v43 = 0;
      lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, type metadata accessor for SGDataType);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(void *)&v12[OBJC_IVAR___SGOutput_type] = v42;
      LOBYTE(v42) = 2;
      uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v14);
      uint64_t v31 = (uint64_t)v39;
      objc_super v32 = v38;
      swift_beginAccess();
      if (v30)
      {
        *objc_super v32 = v28;
        v32[1] = v30;
      }
      else
      {
        *objc_super v32 = 0;
        v32[1] = 0;
      }
      char v33 = (objc_class *)ObjectType;

      swift_bridgeObjectRelease();
      v41.receiver = v23;
      v41.super_class = v33;
      id v18 = objc_msgSendSuper2(&v41, sel_init);
      __swift_destroy_boxed_opaque_existential_1Tm(v31);
      return v18;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v5);
    int v15 = 1;
  }
  uint64_t v16 = (uint64_t)v39;
  type metadata accessor for SGError();
  id v17 = v3;
  SGError.__allocating_init(_:)(v3);
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1Tm(v16);
  if (v15) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v18 = *v37;
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();

  swift_deallocPartialClassInstance();
  return v18;
}

void SGOutput.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGOutput.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    id v10 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();
  }
  else
  {
    uint64_t v9 = (void *)(v3 + OBJC_IVAR___SGOutput_type);
    swift_beginAccess();
    v12[1] = *v9;
    char v13 = 0;
    type metadata accessor for SGDataType(0);
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, type metadata accessor for SGDataType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3 + OBJC_IVAR___SGOutput_attachment;
    swift_beginAccess();
    if (*(void *)(v11 + 8))
    {
      char v13 = 2;
      swift_bridgeObjectRetain();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

uint64_t SGOutput.isEqual(_:)(uint64_t a1)
{
  return SGInput.isEqual(_:)(a1, &OBJC_IVAR___SGOutput_name, &OBJC_IVAR___SGOutput_type, &OBJC_IVAR___SGOutput_attachment);
}

uint64_t SGInput.isEqual(_:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v23);
  if (!v24)
  {
    outlined destroy of Any?((uint64_t)v23);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    char v20 = 0;
    return v20 & 1;
  }
  if (v22 == v4)
  {

    char v20 = 1;
    return v20 & 1;
  }
  uint64_t v9 = &v4[*a2];
  id v10 = &v22[*a2];
  BOOL v11 = *(void *)v9 == *(void *)v10 && *((void *)v9 + 1) == *((void *)v10 + 1);
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t v12 = &v4[*a3];
  swift_beginAccess();
  uint64_t v13 = *(void *)v12;
  char v14 = &v22[*a3];
  swift_beginAccess();
  if (v13 != *(void *)v14) {
    goto LABEL_16;
  }
  int v15 = &v4[*a4];
  swift_beginAccess();
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *((void *)v15 + 1);
  id v18 = &v22[*a4];
  swift_beginAccess();
  uint64_t v19 = *((void *)v18 + 1);
  if (!v17)
  {
    char v20 = v19 == 0;

    return v20 & 1;
  }
  if (!v19)
  {
LABEL_16:

    goto LABEL_17;
  }
  if (v16 == *(void *)v18 && v17 == v19)
  {

    char v20 = 1;
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v20 & 1;
}

uint64_t @objc SGInput.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

void SGOutput.init()()
{
}

id SGEdge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGOutput@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance SGEdge(a1, (uint64_t (*)(uint64_t))SGOutput.init(from:), a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGEdge@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  id v8 = objc_allocWithZone(v3);
  uint64_t result = a2(a1);
  if (!v4) {
    *a3 = result;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGOutput(void *a1)
{
}

id specialized static SGInput.create(name:type:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = a1;
    v6._char object = a2;
    v7._uint64_t countAndFlagsBits = 1701667182;
    v7._char object = (void *)0xE400000000000000;
    validate(_:named:)(v6, v7);
    if (!v8)
    {
      uint64_t v23 = (objc_class *)type metadata accessor for SGInput();
      uint64_t v24 = (char *)objc_allocWithZone(v23);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      Swift::String v25 = (uint64_t *)&v24[OBJC_IVAR___SGInput_name];
      *Swift::String v25 = a1;
      v25[1] = (uint64_t)a2;
      *(void *)&v24[OBJC_IVAR___SGInput_type] = a3;
      Swift::String v26 = &v24[OBJC_IVAR___SGInput_attachment];
      *(void *)Swift::String v26 = 0;
      *((void *)v26 + 1) = 0;
      v27.receiver = v24;
      v27.super_class = v23;
      return objc_msgSendSuper2(&v27, sel_init);
    }
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v9 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_25C4197E0;
    *(unsigned char *)(v10 + 16) = 1;
    swift_willThrow();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  id v13 = v9;
  id v14 = v9;
  int v15 = Logger.logObject.getter();
  os_log_type_t v16 = v12;
  if (os_log_type_enabled(v15, v12))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v29 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    id v19 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25C27E000, v15, v16, "%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v18, -1, -1);
    MEMORY[0x261185880](v17, -1, -1);
  }
  else
  {
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SGOutput and conformance SGOutput(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id specialized static SGOutput.create(name:type:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = a1;
    v6._char object = a2;
    v7._uint64_t countAndFlagsBits = 1701667182;
    v7._char object = (void *)0xE400000000000000;
    validate(_:named:)(v6, v7);
    if (!v8)
    {
      uint64_t v23 = (objc_class *)type metadata accessor for SGOutput();
      uint64_t v24 = (char *)objc_allocWithZone(v23);
      Swift::String v25 = &v24[OBJC_IVAR___SGOutput_attachment];
      *(void *)Swift::String v25 = 0;
      *((void *)v25 + 1) = 0;
      uint64_t v26 = MEMORY[0x263F8EE78];
      objc_super v27 = &v24[OBJC_IVAR___SGOutput_edges];
      *(void *)objc_super v27 = 0;
      *((void *)v27 + 1) = v26;
      swift_unknownObjectWeakInit();
      uint64_t v28 = (uint64_t *)&v24[OBJC_IVAR___SGOutput_name];
      *uint64_t v28 = a1;
      v28[1] = (uint64_t)a2;
      *(void *)&v24[OBJC_IVAR___SGOutput_type] = a3;
      swift_beginAccess();
      *(void *)Swift::String v25 = 0;
      *((void *)v25 + 1) = 0;
      swift_bridgeObjectRelease();
      v29.receiver = v24;
      v29.super_class = v23;
      return objc_msgSendSuper2(&v29, sel_init);
    }
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v9 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_25C4197E0;
    *(unsigned char *)(v10 + 16) = 1;
    swift_willThrow();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  id v13 = v9;
  id v14 = v9;
  int v15 = Logger.logObject.getter();
  os_log_type_t v16 = v12;
  if (os_log_type_enabled(v15, v12))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v30[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v31 = (uint64_t)v9;
    id v19 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25C27E000, v15, v16, "%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v18, -1, -1);
    MEMORY[0x261185880](v17, -1, -1);
  }
  else
  {
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in <> WeakBox<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_25C2C15BC()
{
  return keypath_setTm();
}

uint64_t sub_25C2C15C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_3Tm(a1, &OBJC_IVAR___SGInput_node, a2);
}

uint64_t sub_25C2C15D4()
{
  return keypath_setTm();
}

uint64_t sub_25C2C15E4()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_25C2C15F4()
{
  return 8;
}

void *sub_25C2C1600(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25C2C160C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_3Tm(a1, &OBJC_IVAR___SGOutput_node, a2);
}

uint64_t keypath_get_3Tm@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1 + *a2;
  swift_beginAccess();
  uint64_t result = MEMORY[0x261185960](v4);
  *a3 = result;
  return result;
}

uint64_t sub_25C2C166C()
{
  return keypath_setTm();
}

uint64_t keypath_setTm()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SGEdge()
{
  return self;
}

uint64_t method lookup function for SGEdge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGEdge);
}

uint64_t dispatch thunk of SGEdge.__allocating_init(from:to:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SGEdge.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for SGEdge.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2C1810);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SGEdge.CodingKeys()
{
  return &type metadata for SGEdge.CodingKeys;
}

void *initializeBufferWithCopyOfBuffer for IOAttachment(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for IOAttachment()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for IOAttachment(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for IOAttachment(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IOAttachment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IOAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for IOAttachment(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for IOAttachment(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for IOAttachment()
{
  return &type metadata for IOAttachment;
}

uint64_t method lookup function for SGInput(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGInput);
}

uint64_t dispatch thunk of SGInput.__allocating_init(name:type:attachment:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SGInput.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for SGInput.CodingKeys()
{
  return &type metadata for SGInput.CodingKeys;
}

uint64_t type metadata instantiation function for WeakBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t initializeWithCopy for WeakBox()
{
  return MEMORY[0x270FA05E0]();
}

uint64_t assignWithCopy for WeakBox()
{
  return MEMORY[0x270FA05D8]();
}

uint64_t initializeWithTake for WeakBox()
{
  return MEMORY[0x270FA0608]();
}

uint64_t assignWithTake for WeakBox()
{
  return MEMORY[0x270FA0600]();
}

uint64_t getEnumTagSinglePayload for WeakBox(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WeakBox(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for WeakBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for SGOutput(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGOutput);
}

uint64_t dispatch thunk of SGOutput.__allocating_init(name:type:attachment:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SGOutput.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

unsigned char *storeEnumTagSinglePayload for SGInput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2C1BF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SGOutput.CodingKeys()
{
  return &type metadata for SGOutput.CodingKeys;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t OrderedDictionary.Values._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Values._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *int v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Values._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Values.elements.getter()
{
  return Array.init<A>(_:)();
}

uint64_t OrderedDictionary.Values.withUnsafeBufferPointer<A>(_:)()
{
  return ContiguousArray.withUnsafeBufferPointer<A>(_:)();
}

void *OrderedDictionary.Values.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a4;
  uint64_t v6 = *(void *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  v11[0] = v7
         + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
  uint64_t v9 = v11[0];
  v11[1] = v8;
  a1(v11);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v11, v9, v8);
}

__n128 protocol witness for Sequence.makeIterator() in conformance OrderedDictionary<A, B>.Values@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedDictionary<A, B>.Values(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>.Values()
{
  swift_getWitnessTable();
  uint64_t v0 = specialized Collection._copyToContiguousArray()();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
  return result;
}

uint64_t OrderedDictionary.Values.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t result = ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
  return result;
}

uint64_t OrderedDictionary.Values.startIndex.getter()
{
  return 0;
}

uint64_t OrderedDictionary.Values.endIndex.getter()
{
  return ContiguousArray.count.getter();
}

Swift::Int __swiftcall OrderedDictionary.Values.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Values.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Values.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance OrderedDictionary<A, B>.Values@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance OrderedDictionary<A, B>.Values(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance OrderedDictionary<A, B>.Values(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContiguousArray.count.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 24);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  ContiguousArray.subscript.getter();
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

void protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values(void *a1)
{
  BOOL v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MutableCollection<>.subscript.getter(a1, a2, WitnessTable, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance OrderedDictionary<A, B>.Values()
{
  swift_getWitnessTable();
  return RandomAccessCollection<>.indices.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance OrderedDictionary<A, B>.Values(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance OrderedDictionary<A, B>.Values@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized ContiguousArray.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *protocol witness for Collection.index(after:) in conformance OrderedDictionary<A, B>.Values@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance OrderedDictionary<A, B>.Values(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t OrderedDictionary.Values.subscript.getter()
{
  return ContiguousArray.subscript.getter();
}

uint64_t key path setter for OrderedDictionary.Values.subscript(_:) : <A, B>OrderedDictionary<A, B>.ValuesAB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  type metadata accessor for ContiguousArray();
  char v6 = (uint64_t (*)(uint64_t *, void))ContiguousArray.subscript.modify();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(v7, a1, v5);
  return v6(&v9, 0);
}

uint64_t (*OrderedDictionary.Values.subscript.modify(void *a1))()
{
  BOOL v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ContiguousArray();
  v2[4] = ContiguousArray.subscript.modify();
  return OrderedDictionary.Values.subscript.modify;
}

void OrderedDictionary.Values.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  if (*(void *)(v7 + 16) <= a2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v7+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * a2, a1, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v8(a1, v6);
}

Swift::Void __swiftcall OrderedDictionary.Values.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

uint64_t OrderedDictionary.Values.partition(by:)()
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t result = MutableCollection<>.partition(by:)();
  if (!v0) {
    return v2;
  }
  return result;
}

void *OrderedDictionary.Values.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v8 = *(void *)(a2 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v9 + 16);
  v14[0] = v9
         + ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80));
  uint64_t v11 = v14[0];
  v14[1] = v10;
  a1(v14);
  if (v5) {
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v11, v10);
  }
  uint64_t v13 = v15;
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v11, v10);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 0, 1, v13);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance OrderedDictionary<A, B>.Values(uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  Swift::Int v5 = *a2;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v8 = *(void *)(v3 + 16);
  ContiguousArray._checkSubscript_mutating(_:)(v5);
  uint64_t v11 = *(void *)(v6 - 8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(v8+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v5, a1, v6);
  destructiveProjectEnumData for NodePersonality.ShaderType(v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  return v9(a1, v6);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance OrderedDictionary<A, B>.Values(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ContiguousArray();
  v2[4] = ContiguousArray.subscript.modify();
  return OrderedDictionary.Values.subscript.modify;
}

void OrderedDictionary.Values.subscript.modify(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance OrderedDictionary<A, B>.Values()
{
  return swift_release();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance OrderedDictionary<A, B>.Values(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

void (*MutableCollection<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Slice();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  Swift::Int v5 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);
  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance OrderedDictionary<A, B>.Values@<X0>(void *a1@<X8>)
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t result = MutableCollection<>.partition(by:)();
  if (!v1) {
    *a1 = v4;
  }
  return result;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance OrderedDictionary<A, B>.Values()
{
  return MutableCollection.swapAt(_:_:)();
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance OrderedDictionary<A, B>.Values()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

void *protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance OrderedDictionary<A, B>.Values@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v8 = *(void *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v9 + 16);
  v14[0] = v9
         + ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80));
  uint64_t v11 = v14[0];
  v14[1] = v10;
  a1(v14);
  if (v5) {
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v11, v10);
  }
  uint64_t v13 = v15;
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v11, v10);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 0, 1, v13);
}

uint64_t static OrderedDictionary.Values<>.== infix(_:_:)()
{
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> OrderedDictionary<A, B>.Values()
{
  return static OrderedDictionary.Values<>.== infix(_:_:)() & 1;
}

uint64_t OrderedDictionary.Values<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = v11;
  v19[2] = v12;
  v19[3] = v13;
  type metadata accessor for OrderedDictionary.Values();
  swift_getWitnessTable();
  Swift::UInt v14 = Collection.count.getter();
  Hasher._combine(_:)(v14);
  v19[0] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  if (ContiguousArray.count.getter())
  {
    uint64_t v15 = 0;
    uint64_t v16 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      uint64_t result = ContiguousArray.subscript.getter();
      uint64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      dispatch thunk of Hashable.hash(into:)();
      (*v16)(v10, a6);
      ++v15;
      if (v18 == ContiguousArray.count.getter()) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Int OrderedDictionary.Values<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Hasher.init(_seed:)();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> OrderedDictionary<A, B>.Values(uint64_t a1)
{
  return OrderedDictionary.Values<>.hashValue.getter(*v1, v1[1], v1[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2)
{
  return OrderedDictionary.Values<>.hash(into:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
  return Hasher._finalize()();
}

Swift::Void __swiftcall ContiguousArray._checkSubscript_mutating(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(v1 + 16) <= (unint64_t)a1) {
LABEL_5:
  }
    __break(1u);
}

uint64_t specialized ContiguousArray.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 > 0)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v3 <= 0 && v3 > a2) {
    return 0;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Values()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values()
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values();
}

{
  lazy protocol witness table accessor for type Int and conformance Int();
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in OrderedDictionary<A, B>.Values()
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in OrderedDictionary<A, B>.Values()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in OrderedDictionary<A, B>.Values()
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in <> OrderedDictionary<A, B>.Values()
{
  return swift_getWitnessTable();
}

uint64_t sub_25C2C3980()
{
  return ContiguousArray.subscript.getter();
}

uint64_t sub_25C2C399C()
{
  return 24;
}

__n128 sub_25C2C39A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata instantiation function for OrderedDictionary.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t destroy for OrderedDictionary.Values()
{
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for OrderedDictionary.Values(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OrderedDictionary.Values(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OrderedDictionary.Values(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  type metadata accessor for Slice();
  swift_getWitnessTable();
  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_SSs5NeverOTg504_s11d138Graph0aB7ServiceC13createLibrary4from6device7optionsSo10MTLLibrary_pAA12SGREMaterialCSg_So9MTLDevice_pSgAA0J18CompilationOptionsCtKFZSSAA8F54Ccfu1_32fd0161a276cdf0c4c1049efc18373d1cAQSSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v14;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v6 = (char *)MEMORY[0x2611848A0](v5, a1);
      }
      else {
        uint64_t v6 = (char *)*(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      uint64_t v8 = &v6[OBJC_IVAR___SGOutput_name];
      swift_beginAccess();
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *((void *)v8 + 1);
      swift_bridgeObjectRetain();

      unint64_t v12 = *(void *)(v14 + 16);
      unint64_t v11 = *(void *)(v14 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      ++v5;
      *(void *)(v14 + 16) = v12 + 1;
      uint64_t v13 = v14 + 16 * v12;
      *(void *)(v13 + 32) = v9;
      *(void *)(v13 + 40) = v10;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SS_SSts5NeverOTg5142_s11ShaderGraph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSS_SStSS3key_SS5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v32 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v32;
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v25 = v3 + 80;
  int64_t v26 = v1;
  int v27 = v5;
  uint64_t v28 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v29 = v7;
    unint64_t v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v13 = v12[1];
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v6);
    uint64_t v15 = v14[1];
    uint64_t v30 = *v14;
    uint64_t v31 = *v12;
    uint64_t v16 = v3;
    unint64_t v18 = *(void *)(v32 + 16);
    unint64_t v17 = *(void *)(v32 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 >= v17 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    }
    *(void *)(v32 + 16) = v18 + 1;
    id v19 = (void *)(v32 + 32 * v18);
    void v19[4] = v30;
    v19[5] = v15;
    v19[6] = v31;
    v19[7] = v13;
    int64_t v9 = 1 << *(unsigned char *)(v16 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v28;
    uint64_t v20 = *(void *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v16;
    int v5 = v27;
    if (*(_DWORD *)(v16 + 36) != v27) {
      goto LABEL_27;
    }
    unint64_t v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      int64_t v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v26;
    }
    else
    {
      unint64_t v22 = v11 + 1;
      unint64_t v23 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v26;
      if (v11 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            unint64_t v24 = *(void *)(v25 + 8 * v11++);
            if (v24)
            {
              unint64_t v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v29 + 1;
    uint64_t v6 = v9;
    if (v29 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SSs5NeverOTg5122_s11ShaderGraph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcS2S3key_SS5valuet_tXEfU4_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v27 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v27;
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v21 = v3 + 80;
  int64_t v22 = v1;
  int v23 = v5;
  uint64_t v24 = v3 + 64;
  uint64_t v25 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v26 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = 9;
    v12._char object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: String));
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v14 = *(void *)(v27 + 16);
    unint64_t v13 = *(void *)(v27 + 24);
    if (v14 >= v13 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v27 + 16) = v14 + 1;
    uint64_t v15 = v27 + 16 * v14;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0xE000000000000000;
    uint64_t v3 = v25;
    int64_t v9 = 1 << *(unsigned char *)(v25 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v24;
    uint64_t v16 = *(void *)(v24 + 8 * v11);
    if ((v16 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v23;
    if (*(_DWORD *)(v25 + 36) != v23) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      int64_t v9 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v22;
    }
    else
    {
      unint64_t v18 = v11 + 1;
      unint64_t v19 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v22;
      if (v11 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v24 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v11)
          {
            unint64_t v20 = *(void *)(v21 + 8 * v11++);
            if (v20)
            {
              unint64_t v18 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v26 + 1;
    uint64_t v6 = v9;
    if (v26 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_SSs5NeverOTg504_s11d7Graph16fgh3Vs6i19VSSIggyo_AC_AEtSSs5J141OIegnrzr_TR04_s11a93Graph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcSSAA16cde4V_s6F8VtXEfU5_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v16;
    uint64_t v4 = a1 + 40;
    do
    {
      uint64_t v5 = *(void *)(v4 - 8);
      uint64_t v6 = *(void **)v4;
      uint64_t v7 = *(void *)(v4 + 8);
      char v8 = *(unsigned char *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized closure #7 in SGREMaterial.init(graph:configuration:)(v5, v6, v7, v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      v4 += 56;
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t BuiltInDefinition.isArgumentsDefinition.getter()
{
  if (*v0 == 0x656D756772615F5FLL && v0[1] == 0xEB0000000073746ELL) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t BuiltInDefinition.isResultDefinition.getter()
{
  if (*v0 == 0x746C757365725F5FLL && v0[1] == 0xE900000000000073) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t requireArgument<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v17 - v12, a3, v10);
  uint64_t v14 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v13, a4);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(void *)uint64_t v15 = a1;
  *(void *)(v15 + 8) = a2;
  *(unsigned char *)(v15 + 16) = 1;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> validate(_:named:)(Swift::String _, Swift::String named)
{
  char object = named._object;
  uint64_t countAndFlagsBits = named._countAndFlagsBits;
  uint64_t v4 = HIBYTE(_._object) & 0xF;
  if (((uint64_t)_._object & 0x2000000000000000) == 0) {
    uint64_t v4 = _._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    if (String.count.getter() <= 1023) {
      return;
    }
    char v5 = 17;
  }
  else
  {
    char v5 = 16;
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(void *)uint64_t v6 = countAndFlagsBits;
  *(void *)(v6 + 8) = object;
  *(unsigned char *)(v6 + 16) = v5;
  swift_bridgeObjectRetain();
  swift_willThrow();
}

uint64_t BuiltInDefinition.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltInDefinition.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltInDefinition.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltInDefinition.availability.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of MaterialXAvailability(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t BuiltInDefinition.InputSpec.name.getter(uint64_t a1)
{
  return a1;
}

uint64_t BuiltInDefinition.InputSpec.type.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t BuiltInDefinition.InputSpec.isConstant.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t static BuiltInDefinition.InputSpec.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a1 == a5 && a2 == a6)
  {
    if (a3 != a7)
    {
      char v12 = 0;
      return v12 & 1;
    }
LABEL_7:
    char v12 = a4 ^ a8 ^ 1;
    return v12 & 1;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v12 = 0;
  if ((v13 & 1) != 0 && a3 == a7) {
    goto LABEL_7;
  }
  return v12 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 != v4) {
      return 0;
    }
    return v3 ^ v5 ^ 1u;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v7 & 1) != 0 && v2 == v4) {
    return v3 ^ v5 ^ 1u;
  }
  return result;
}

uint64_t BuiltInDefinition.OutputSpec.name.getter(uint64_t a1)
{
  return a1;
}

uint64_t BuiltInDefinition.OutputSpec.type.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

BOOL static BuiltInDefinition.OutputSpec.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a4 && a2 == a5) {
    return a3 == a6;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v8) {
    return a3 == a6;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition.OutputSpec(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

ShaderGraph::BuiltInDefinition::ReservedNames_optional __swiftcall BuiltInDefinition.ReservedNames.init(rawValue:)(Swift::String rawValue)
{
  char object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._char object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BuiltInDefinition.ReservedNames.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = ShaderGraph_BuiltInDefinition_ReservedNames___results;
  }
  else {
    v4.value = ShaderGraph_BuiltInDefinition_ReservedNames_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

void *static BuiltInDefinition.ReservedNames.allCases.getter()
{
  return &outlined read-only object #0 of static BuiltInDefinition.ReservedNames.allCases.getter;
}

uint64_t BuiltInDefinition.ReservedNames.rawValue.getter(char a1)
{
  if (a1) {
    return 0x746C757365725F5FLL;
  }
  else {
    return 0x656D756772615F5FLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition.ReservedNames(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x746C757365725F5FLL;
  }
  else {
    uint64_t v3 = 0x656D756772615F5FLL;
  }
  if (v2) {
    unint64_t v4 = 0xEB0000000073746ELL;
  }
  else {
    unint64_t v4 = 0xE900000000000073;
  }
  if (*a2) {
    uint64_t v5 = 0x746C757365725F5FLL;
  }
  else {
    uint64_t v5 = 0x656D756772615F5FLL;
  }
  if (*a2) {
    unint64_t v6 = 0xE900000000000073;
  }
  else {
    unint64_t v6 = 0xEB0000000073746ELL;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BuiltInDefinition.ReservedNames()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BuiltInDefinition.ReservedNames()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BuiltInDefinition.ReservedNames()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance BuiltInDefinition.ReservedNames@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BuiltInDefinition.ReservedNames.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BuiltInDefinition.ReservedNames(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656D756772615F5FLL;
  if (*v1) {
    uint64_t v2 = 0x746C757365725F5FLL;
  }
  unint64_t v3 = 0xEB0000000073746ELL;
  if (*v1) {
    unint64_t v3 = 0xE900000000000073;
  }
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance BuiltInDefinition.ReservedNames(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance BuiltInDefinition.ReservedNames;
}

double BuiltInDefinition.init(name:inputs:outputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  double result = 0.0;
  *(_OWORD *)(a5 + 32) = xmmword_25C41A100;
  return result;
}

double BuiltInDefinition.init(nodeDef:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized BuiltInDefinition.init(nodeDef:)(a1, v6);
  outlined release of NodeDef((uint64_t)a1);
  long long v4 = v6[1];
  *a2 = v6[0];
  a2[1] = v4;
  double result = *(double *)&v7;
  a2[2] = v7;
  return result;
}

BOOL BuiltInDefinition.isDotNode.getter()
{
  v0._uint64_t countAndFlagsBits = 0x5F746F645F444ELL;
  v0._char object = (void *)0xE700000000000000;
  return String.hasPrefix(_:)(v0);
}

BOOL BuiltInDefinition.isMatXConstantNode.getter()
{
  v0._uint64_t countAndFlagsBits = 0x74736E6F635F444ELL;
  v0._char object = (void *)0xEC0000005F746E61;
  return String.hasPrefix(_:)(v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static BuiltInDefinition.== infix(_:_:)((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t SGWarning.message.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGWarning_message);
  swift_bridgeObjectRetain();
  return v1;
}

id SGWarning.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  long long v5 = (char *)objc_allocWithZone(v2);
  unint64_t v6 = &v5[OBJC_IVAR___SGWarning_message];
  *(void *)unint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SGWarning.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v6 = &v2[OBJC_IVAR___SGWarning_message];
  *(void *)unint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

void SGWarning.init()()
{
}

uint64_t SGREMaterial.name.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + OBJC_IVAR___SGREMaterial_graph) + OBJC_IVAR___SGGraph_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGREMaterial.surfaceShaderFunctionName.getter()
{
  return SGREMaterial.surfaceShaderFunctionName.getter(&OBJC_IVAR___SGREMaterial_surfaceShaderFunctionName);
}

id @objc SGREMaterial.surfaceShaderFunctionName.getter(uint64_t a1, uint64_t a2, void *a3)
{
  long long v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    swift_bridgeObjectRetain();
    unint64_t v6 = (void *)MEMORY[0x261183E60](v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = 0;
  }
  return v6;
}

uint64_t SGREMaterial.geometryModifierFunctionName.getter()
{
  return SGREMaterial.surfaceShaderFunctionName.getter(&OBJC_IVAR___SGREMaterial_geometryModifierFunctionName);
}

uint64_t SGREMaterial.surfaceShaderFunctionName.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SGREMaterial.uniforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGREMaterial.textures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGREMaterial.textures.setter(uint64_t a1)
{
  long long v3 = (void *)(v1 + OBJC_IVAR___SGREMaterial_textures);
  swift_beginAccess();
  *long long v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGREMaterial.textures.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t SGREMaterial.lightingModel.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SGREMaterial_lightingModel);
}

uint64_t SGREMaterial.blending.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SGREMaterial_blending);
}

uint64_t SGREMaterial.hasPremultipliedAlpha.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasPremultipliedAlpha);
}

uint64_t SGREMaterial.matchUnlitColor.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_matchUnlitColor);
}

Class @objc SGREMaterial.uniforms.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  a5(a4);
  swift_bridgeObjectRetain();
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v5.super.isa;
}

uint64_t SGREMaterial.warnings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGREMaterial.hasSurfaceShaderUniforms.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms);
}

uint64_t SGREMaterial.hasGeometryModifierUniforms.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms);
}

uint64_t SGREMaterial.hasConnectedLightSpillNodes.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasConnectedLightSpillNodes);
}

uint64_t SGREMaterial.hasBackgroundBlur.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasBackgroundBlur);
}

uint64_t SGREMaterial.hasGeometryModifierOffset.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasGeometryModifierOffset);
}

id SGREMaterial.customUniformsTypeDescription.getter()
{
  return objc_retain(*(id *)(*(void *)(v0 + OBJC_IVAR___SGREMaterial_customUniformsType)
                           + OBJC_IVAR___SGPropertyDescription_type));
}

id SGREMaterial.graph.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGREMaterial_graph);
}

id SGREMaterial.config.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGREMaterial_config);
}

uint64_t SGREMaterial.textureAssignments.getter()
{
  return swift_bridgeObjectRetain();
}

id SGREMaterial.customUniformsType.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGREMaterial_customUniformsType);
}

uint64_t SGREMaterial.edgeDigest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___SGREMaterial_edgeDigest;
  uint64_t v4 = type metadata accessor for SHA512Digest();
  NSArray v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t SGREMaterial.operationalHash.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SGREMaterial_operationalHash);
}

uint64_t SGREMaterial.__allocating_init(graph:configuration:)(char *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return SGREMaterial.init(graph:configuration:)(a1, a2);
}

uint64_t SGREMaterial.init(graph:configuration:)(char *a1, uint64_t a2)
{
  uint64_t v783 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v737 = type metadata accessor for Logger();
  uint64_t v736 = *(void *)(v737 - 8);
  MEMORY[0x270FA5388](v737);
  v735 = (char *)v644 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v773 = type metadata accessor for SHA512Digest();
  uint64_t v772 = *(void *)(v773 - 8);
  MEMORY[0x270FA5388](v773);
  uint64_t v743 = (uint64_t)v644 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v770 = type metadata accessor for OSSignpostError();
  uint64_t v771 = *(void *)(v770 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v770);
  v739 = (char *)v644 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v747 = (char *)v644 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v752 = (char *)v644 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v756 = (char *)v644 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v759 = (char *)v644 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v753 = (char *)v644 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v761 = (char *)v644 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v764 = (char *)v644 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v766 = (char *)v644 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v768 = (uint64_t)v644 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v738 = (char *)v644 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  v744 = (char *)v644 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  v742 = (char *)v644 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  v748 = (char *)v644 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  v750 = (char *)v644 - v35;
  MEMORY[0x270FA5388](v34);
  unint64_t v762 = (unint64_t)v644 - v36;
  v785 = (char *)type metadata accessor for OSSignpostID();
  v787 = (id *)*((void *)v785 - 1);
  uint64_t v37 = MEMORY[0x270FA5388](v785);
  v741 = (char *)v644 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  v749 = (char *)v644 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  v755 = (char *)v644 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v757 = (char *)v644 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  v760 = (char *)v644 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  v758 = (char *)v644 - v48;
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  v767 = (char *)v644 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  v769 = (char *)v644 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  v740 = (char *)v644 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  v746 = (char *)v644 - v56;
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  v745 = (char *)v644 - v58;
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  v751 = (char *)v644 - v60;
  uint64_t v61 = MEMORY[0x270FA5388](v59);
  v754 = (char *)v644 - v62;
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  v763 = (char *)v644 - v64;
  uint64_t v65 = MEMORY[0x270FA5388](v63);
  v765 = (char *)v644 - v66;
  uint64_t v67 = MEMORY[0x270FA5388](v65);
  v774 = (char *)v644 - v68;
  uint64_t v69 = MEMORY[0x270FA5388](v67);
  v780 = (char *)v644 - v70;
  MEMORY[0x270FA5388](v69);
  uint64_t v72 = (char *)v644 - v71;
  uint64_t v775 = type metadata accessor for OSSignposter();
  uint64_t v776 = *(void *)(v775 - 8);
  MEMORY[0x270FA5388](v775);
  v786 = (char *)v644 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = one-time initialization token for debugMode;
  v784 = v2;
  if (v74 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v75 = static DebugConfig.debugMode;
  uint64_t v76 = *(void *)(static DebugConfig.debugMode + 16);
  v781 = a1;
  v782 = v72;
  if (v76)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v77 = Hasher._finalize()();
    uint64_t v78 = -1 << *(unsigned char *)(v75 + 32);
    unint64_t v79 = v77 & ~v78;
    if ((*(void *)(v75 + 56 + ((v79 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v79))
    {
      uint64_t v80 = ~v78;
      while (2)
      {
        switch(*(unsigned char *)(*(void *)(v75 + 48) + v79))
        {
          case 3:
LABEL_20:
            swift_bridgeObjectRelease();
            goto LABEL_21;
          default:
            char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v81) {
              goto LABEL_21;
            }
            unint64_t v79 = (v79 + 1) & v80;
            if (((*(void *)(v75 + 56 + ((v79 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v79) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v72 = v782;
  }
  uint64_t v82 = static DebugConfig.debugMode;
  if (!*(void *)(static DebugConfig.debugMode + 16)) {
    goto LABEL_24;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v83 = Hasher._finalize()();
  uint64_t v84 = -1 << *(unsigned char *)(v82 + 32);
  unint64_t v85 = v83 & ~v84;
  if (((*(void *)(v82 + 56 + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v85) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v72 = v782;
    goto LABEL_24;
  }
  uint64_t v86 = ~v84;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(v82 + 48) + v85))
    {
      case 6:
        a1 = v781;
        goto LABEL_20;
      default:
        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v87 & 1) == 0)
        {
          unint64_t v85 = (v85 + 1) & v86;
          if (((*(void *)(v82 + 56 + ((v85 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v85) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            a1 = v781;
            uint64_t v72 = v782;
            goto LABEL_24;
          }
          continue;
        }
        a1 = v781;
LABEL_21:
        uint64_t v72 = v782;
        swift_bridgeObjectRelease();
        uint64_t v88 = v788;
        createDotText(representing:)(a1);
        v788 = v88;
        if (v88)
        {
          LODWORD(v787) = 0;
          uint64_t v91 = 0;
          int v92 = 0;
          int v93 = 0;
          int v94 = 0;
          int v95 = 0;
          goto LABEL_53;
        }
        uint64_t v96 = v89;
        uint64_t v97 = v90;
        uint64_t v98 = *(void *)&a1[OBJC_IVAR___SGGraph_name + 8];
        *(void *)&long long v801 = *(void *)&a1[OBJC_IVAR___SGGraph_name];
        *((void *)&v801 + 1) = v98;
        swift_bridgeObjectRetain();
        v99._char object = (void *)0xE900000000000068;
        v99._uint64_t countAndFlagsBits = 0x706172476970615FLL;
        String.append(_:)(v99);
        specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v96, v97, v801, *((void **)&v801 + 1), 7630692, 0xE300000000000000);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_24:
        OSSignposter.init(subsystem:category:)();
        OSSignposter.logHandle.getter();
        OSSignpostID.init(log:)();
        uint64_t v100 = a1;
        uint64_t v101 = OSSignposter.logHandle.getter();
        int v102 = static os_signpost_type_t.begin.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          LODWORD(v734) = v102;
          v778 = (void (*)(char *, char *, char *))v787[2];
          unint64_t v777 = (unint64_t)(v787 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          uint64_t v103 = v780;
          v778(v780, v72, v785);
          uint64_t v104 = swift_slowAlloc();
          uint64_t v105 = swift_slowAlloc();
          *(void *)&long long v801 = v105;
          *(_DWORD *)uint64_t v104 = 141558275;
          uint64_t v800 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v104 + 12) = 2081;
          uint64_t v106 = *(void *)&v100[OBJC_IVAR___SGGraph_name];
          unint64_t v107 = *(void *)&v100[OBJC_IVAR___SGGraph_name + 8];
          swift_bridgeObjectRetain();
          uint64_t v800 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, (uint64_t *)&v801);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v72 = v782;
          swift_bridgeObjectRelease();
          os_signpost_id_t v108 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_25C27E000, v101, (os_signpost_type_t)v734, v108, "transform", "%{private,mask.hash}s", (uint8_t *)v104, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261185880](v105, -1, -1);
          MEMORY[0x261185880](v104, -1, -1);

          uint64_t v109 = v785;
          uint64_t v110 = v787;
          ((void (*)(char *, char *))v787[1])(v103, v785);
          unint64_t v111 = v777;
          uint64_t v112 = v778;
        }
        else
        {

          uint64_t v110 = v787;
          uint64_t v112 = (void (*)(char *, char *, char *))v787[2];
          unint64_t v111 = (unint64_t)(v787 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          uint64_t v109 = v785;
          uint64_t v103 = v780;
        }
        v778 = v112;
        unint64_t v777 = v111;
        v112(v103, v72, v109);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        uint64_t v113 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v114 = (char *)v110[1];
        v787 = v110 + 1;
        v782 = v114;
        ((void (*)(char *, char *))v114)(v72, v109);
        uint64_t v115 = v784;
        *(void *)&v784[OBJC_IVAR___SGREMaterial_graph] = v100;
        id v116 = (id)v783;
        *(void *)&v115[OBJC_IVAR___SGREMaterial_config] = v783;
        Swift::Int v117 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static SGDataType.invalidMaterialInputTypes.getter);
        uint64_t v118 = &v100[OBJC_IVAR___SGGraph_inputs];
        swift_beginAccess();
        long long v119 = v100;
        uint64_t v120 = (char *)v116;
        unint64_t v121 = swift_bridgeObjectRetain();
        uint64_t v122 = v788;
        specialized Sequence.forEach(_:)(v121, v117, (uint64_t)v119);
        if (v122)
        {
          v788 = v122;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v123 = OSSignposter.logHandle.getter();
          id v124 = v774;
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v125 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            uint64_t v126 = v768;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            uint64_t v127 = v771;
            uint64_t v128 = v770;
            int v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v771 + 88))(v126, v770);
            int v130 = *MEMORY[0x263F90238];
            uint64_t v734 = v113;
            if (v129 == v130)
            {
              uint64_t v131 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v128);
              uint64_t v131 = "";
            }
            uint64_t v146 = v780;
            uint64_t v147 = v774;
            uint64_t v148 = v785;
            v778(v780, v774, v785);
            unint64_t v149 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v149 = 0;
            os_signpost_id_t v150 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_25C27E000, v123, v125, v150, "transform", v131, v149, 2u);
            MEMORY[0x261185880](v149, -1, -1);

            uint64_t v151 = v147;
            Swift::String v152 = (void (*)(char *, char *))v782;
            ((void (*)(char *, char *))v782)(v151, v148);
            uint64_t v144 = v775;
            uint64_t v145 = v776;
            v152(v146, v148);
          }
          else
          {

            uint64_t v143 = v124;
            uint64_t v144 = v775;
            uint64_t v145 = v776;
            ((void (*)(char *, char *))v782)(v143, v785);
          }
          swift_release();
          (*(void (**)(char *, uint64_t))(v145 + 8))(v786, v144);
          LODWORD(v787) = 0;
          uint64_t v91 = 0;
          int v93 = 0;
          int v94 = 0;
          int v95 = 0;
          goto LABEL_52;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        *(void *)&v115[OBJC_IVAR___SGREMaterial_uniforms] = *(void *)v118;
        swift_bridgeObjectRetain();
        SGGraph.collapseConstantAndPassthroughNodes()();
        if (v132)
        {
          uint64_t v133 = OSSignposter.logHandle.getter();
          char v134 = v769;
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v135 = static os_signpost_type_t.end.getter();
          char v136 = OS_os_log.signpostsEnabled.getter();
          v788 = v132;
          if (v136)
          {
            swift_retain();
            uint64_t v137 = v766;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            uint64_t v138 = v771;
            uint64_t v139 = v770;
            int v140 = (*(uint64_t (**)(char *, uint64_t))(v771 + 88))(v137, v770);
            int v141 = *MEMORY[0x263F90238];
            uint64_t v734 = v113;
            if (v140 == v141)
            {
              id v142 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
              id v142 = "";
            }
            long long v160 = v778;
            unint64_t v161 = v780;
            long long v162 = v780;
            long long v163 = v769;
            goto LABEL_49;
          }
LABEL_46:

          uint64_t v167 = v775;
          ((void (*)(char *, char *))v782)(v134, v785);
          goto LABEL_50;
        }
        SGGraph.removeUnconnectedNodesAndEdges()();
        if (v153)
        {
          uint64_t v133 = OSSignposter.logHandle.getter();
          char v134 = v767;
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v135 = static os_signpost_type_t.end.getter();
          char v154 = OS_os_log.signpostsEnabled.getter();
          v788 = v153;
          if ((v154 & 1) == 0) {
            goto LABEL_46;
          }
          swift_retain();
          int v155 = v764;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v156 = v771;
          uint64_t v157 = v770;
          int v158 = (*(uint64_t (**)(char *, uint64_t))(v771 + 88))(v155, v770);
          int v159 = *MEMORY[0x263F90238];
          uint64_t v734 = v113;
          if (v158 == v159)
          {
            id v142 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v156 + 8))(v155, v157);
            id v142 = "";
          }
          long long v160 = v778;
          unint64_t v161 = v780;
          long long v162 = v780;
          long long v163 = v767;
LABEL_49:
          uint64_t v168 = v785;
          v160(v162, v163, v785);
          uint64_t v169 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v169 = 0;
          os_signpost_id_t v170 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_25C27E000, v133, v135, v170, "transform", v142, v169, 2u);
          MEMORY[0x261185880](v169, -1, -1);

          uint64_t v171 = v163;
          unint64_t v172 = (void (*)(char *, char *))v782;
          ((void (*)(char *, char *))v782)(v171, v168);
          uint64_t v167 = v775;
          v172(v161, v168);
LABEL_50:
          swift_release();
          (*(void (**)(char *, uint64_t))(v776 + 8))(v786, v167);
LABEL_51:
          LODWORD(v787) = 0;
          int v93 = 0;
          int v94 = 0;
          int v95 = 0;
          uint64_t v91 = 1;
LABEL_52:
          int v92 = 1;
          goto LABEL_53;
        }
        uint64_t v164 = OBJC_IVAR___SGGraph_resultsNode;
        id v165 = *(id *)&v119[OBJC_IVAR___SGGraph_resultsNode];
        specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v165, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))closure #2 in SGREMaterial.init(graph:configuration:));

        unint64_t v166 = specialized SGGraph.deprecationMap()();
        v769 = v120;
        uint64_t v177 = SGGraph.topologicalSort()();
        uint64_t v179 = v178;
        uint64_t v181 = v180;
        uint64_t v768 = v164;
        v774 = v119;

        long long v183 = v177;
        uint64_t v184 = *((void *)v177 + 2);
        uint64_t v734 = v113;
        if (v184)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          long long v185 = (void **)(v183 + 3);
          do
          {
            uint64_t v187 = *(v185 - 1);
            uint64_t v188 = *v185;
            *(void *)&long long v801 = *(v185 - 2);
            uint64_t v186 = (void *)v801;
            *((void *)&v801 + 1) = v187;
            *(void *)&long long v802 = v188;
            id v189 = v188;
            id v190 = v186;
            id v191 = v187;
            closure #1 in SGGraph.replaceDeprecatedAndRedundantNodes()((uint64_t)&v801, v166);
            v185 += 3;

            --v184;
          }
          while (v184);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v192 = static DebugConfig.debugMode;
        if (*(void *)(static DebugConfig.debugMode + 16))
        {
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v193 = Hasher._finalize()();
          uint64_t v194 = -1 << *(unsigned char *)(v192 + 32);
          unint64_t v195 = v193 & ~v194;
          if (((*(void *)(v192 + 56 + ((v195 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v195) & 1) == 0)
          {
LABEL_80:
            swift_bridgeObjectRelease();
            goto LABEL_81;
          }
          uint64_t v196 = ~v194;
          while (1)
          {
            switch(*(unsigned char *)(*(void *)(v192 + 48) + v195))
            {
              case 3:
                swift_bridgeObjectRelease();
                goto LABEL_87;
              default:
                char v197 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v197)
                {
LABEL_87:
                  swift_bridgeObjectRelease();
                  uint64_t v218 = v774;
                  createDotText(representing:)(v774);
                  uint64_t v220 = v219;
                  uint64_t v222 = v221;
                  uint64_t v223 = *(void *)&v218[OBJC_IVAR___SGGraph_name + 8];
                  *(void *)&long long v801 = *(void *)&v218[OBJC_IVAR___SGGraph_name];
                  *((void *)&v801 + 1) = v223;
                  swift_bridgeObjectRetain();
                  v224._char object = (void *)0xE900000000000065;
                  v224._uint64_t countAndFlagsBits = 0x7370616C6C6F635FLL;
                  String.append(_:)(v224);
                  specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v220, v222, v801, *((void **)&v801 + 1), 7630692, 0xE300000000000000);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_81;
                }
                unint64_t v195 = (v195 + 1) & v196;
                if (((*(void *)(v192 + 56 + ((v195 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v195) & 1) == 0) {
                  goto LABEL_80;
                }
                break;
            }
          }
        }
LABEL_81:
        long long v198 = SGGraph.topologicalSort()();
        uint64_t v200 = v199;
        int v202 = v201;
        uint64_t v204 = v203;
        Swift::Int v205 = SGGraph.surfaceNodeElement(ofType:)(0);
        v788 = 0;
        uint64_t v206 = v205;
        v766 = v207;
        v767 = v208;
        if (!v205)
        {
          lazy protocol witness table accessor for type APIError and conformance APIError();
          uint64_t v212 = (id *)swift_allocError();
          *(_OWORD *)uint64_t v213 = xmmword_25C41A120;
          *(unsigned char *)(v213 + 16) = 21;
          v788 = v212;
          swift_willThrow();

          swift_bridgeObjectRelease();
          long long v214 = OSSignposter.logHandle.getter();
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v215 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            long long v216 = v750;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v771 + 88))(v216, v770) == *MEMORY[0x263F90238])
            {
              uint64_t v217 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v771 + 8))(v750, v770);
              uint64_t v217 = "";
            }
            unint64_t v234 = v780;
            uint64_t v235 = v754;
            os_signpost_id_t v236 = v785;
            v778(v780, v754, v785);
            uint64_t v237 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v237 = 0;
            os_signpost_id_t v238 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_25C27E000, v214, v215, v238, "transform", v217, v237, 2u);
            MEMORY[0x261185880](v237, -1, -1);

            ((void (*)(char *, char *))v782)(v235, v236);
          }
          else
          {

            unint64_t v234 = v754;
          }
          ((void (*)(char *, char *))v782)(v234, v785);
          goto LABEL_118;
        }
        char v209 = v788;
        v765 = SGGraph.surfaceNodeElement(ofType:)(1);
        v763 = v210;
        v764 = v211;
        v788 = v209;
        v758 = v206;
        v759 = v204;
        swift_bridgeObjectRetain();
        v760 = v200;
        uint64_t v225 = v202;
        unint64_t v762 = (unint64_t)v198;
        v761 = v225;
        int v226 = v788;
        specialized Sequence.forEach(_:)((uint64_t)v198, (unint64_t)v198, v225);
        v788 = v226;
        if (v226)
        {
          swift_bridgeObjectRelease();
          id v227 = v759;

          uint64_t v228 = v761;
          id v229 = v760;

          outlined consume of TopologicalSort.Element?(v765, v763, v764);
          swift_bridgeObjectRelease();

          uint64_t v230 = OSSignposter.logHandle.getter();
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v231 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            unint64_t v232 = v748;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v771 + 88))(v232, v770) == *MEMORY[0x263F90238])
            {
              Swift::String v233 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v771 + 8))(v748, v770);
              Swift::String v233 = "";
            }
            char v242 = v780;
            uint64_t v243 = v751;
            goto LABEL_116;
          }

          v780 = v751;
LABEL_117:
          ((void (*)(char *, char *))v782)(v780, v785);
LABEL_118:
          swift_release();
          (*(void (**)(char *, uint64_t))(v776 + 8))(v786, v775);
          goto LABEL_51;
        }
        swift_bridgeObjectRelease();

        uint64_t v239 = v788;
        uint64_t v240 = inferTextureAssignments(from:)();
        v788 = v239;
        if (v239)
        {
          outlined consume of TopologicalSort.Element?(v765, v763, v764);

          swift_bridgeObjectRelease();
          uint64_t v230 = OSSignposter.logHandle.getter();
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v231 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            os_signpost_type_t v241 = v747;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v771 + 88))(v241, v770) == *MEMORY[0x263F90238])
            {
              Swift::String v233 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v771 + 8))(v747, v770);
              Swift::String v233 = "";
            }
            char v242 = v780;
            uint64_t v243 = v749;
LABEL_116:
            uint64_t v258 = v785;
            v778(v242, v243, v785);
            unint64_t v259 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v259 = 0;
            os_signpost_id_t v260 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_25C27E000, v230, v231, v260, "transform", v233, v259, 2u);
            MEMORY[0x261185880](v259, -1, -1);

            ((void (*)(char *, char *))v782)(v243, v258);
          }
          else
          {

            v780 = v749;
          }
          goto LABEL_117;
        }
        uint64_t v244 = v240;
        uint64_t v245 = swift_allocObject();
        *(void *)(v245 + 16) = 0;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Int>>);
        uint64_t v246 = swift_allocObject();
        *(void *)(v246 + 16) = partial apply for closure #1 in mapUniforms(_:);
        *(void *)(v246 + 24) = v245;
        swift_retain();
        swift_retain();
        unint64_t v247 = v788;
        uint64_t v248 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph12TypedTextureVG_AF0G10AssignmentVs5NeverOTg504_s11d26Graph11mapUniformsySayAA17gh9VGSayAA05F14E0VGFAdGXEfU0_s11AnyIteratorVySiGTf1cn_nTf4ng_n(v244);
        v756 = (char *)v247;
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
        v757 = (char *)v248;
        uint64_t v249 = *(void *)(v248 + 16);
        if (v249)
        {
          uint64_t v250 = (unsigned char *)(swift_bridgeObjectRetain() + 72);
          uint64_t v251 = (void *)MEMORY[0x263F8EE78];
          do
          {
            if ((*v250 & 1) == 0)
            {
              uint64_t v253 = *((void *)v250 - 4);
              v788 = (id *)*((void *)v250 - 5);
              uint64_t v255 = *((void *)v250 - 2);
              uint64_t v254 = *((void *)v250 - 1);
              swift_bridgeObjectRetain();
              outlined copy of TextureSource();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v251 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v251[2] + 1, 1, v251);
              }
              unint64_t v257 = v251[2];
              unint64_t v256 = v251[3];
              if (v257 >= v256 >> 1) {
                uint64_t v251 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v256 > 1), v257 + 1, 1, v251);
              }
              v251[2] = v257 + 1;
              uint64_t v252 = &v251[4 * v257];
              v252[4] = v788;
              v252[5] = v253;
              v252[6] = v255;
              v252[7] = v254;
            }
            v250 += 48;
            --v249;
          }
          while (v249);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v251 = (void *)MEMORY[0x263F8EE78];
        }
        if (v251[2])
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
          uint64_t v261 = static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          uint64_t v261 = MEMORY[0x263F8EE80];
        }
        *(void *)&long long v801 = v261;
        uint64_t v262 = v756;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)v251, 1, &v801);
        if (v262)
        {
LABEL_279:
          swift_bridgeObjectRelease();
          swift_release();
          __break(1u);
          JUMPOUT(0x25C2CC2B4);
        }
        swift_bridgeObjectRelease();
        unint64_t v263 = v784;
        char v264 = (uint64_t *)&v784[OBJC_IVAR___SGREMaterial_textures];
        *(void *)&v784[OBJC_IVAR___SGREMaterial_textures] = v801;
        uint64_t v265 = (uint64_t)v757;
        *(void *)&v263[OBJC_IVAR___SGREMaterial_textureAssignments] = v757;
        swift_bridgeObjectRetain();
        uint64_t v266 = SGGraph.createCustomUniformsType(named:textureAssignments:)(0x736D726F66696E55, 0xE800000000000000, v265);
        v788 = 0;
        uint64_t v267 = v266;
        uint64_t v268 = (objc_class *)type metadata accessor for SGPropertyDescription();
        uint64_t v269 = objc_allocWithZone(v268);
        long long v270 = &v269[OBJC_IVAR___SGPropertyDescription_name];
        *long long v270 = 0x736D726F66696E55;
        v270[1] = 0xE800000000000000;
        *(void *)&v269[OBJC_IVAR___SGPropertyDescription_type] = v267;
        v269[OBJC_IVAR___SGPropertyDescription_visible] = 1;
        v799.receiver = v269;
        v799.super_class = v268;
        id v271 = objc_msgSendSuper2(&v799, sel_init);
        swift_bridgeObjectRelease();
        *(void *)&v784[OBJC_IVAR___SGREMaterial_customUniformsType] = v271;
        swift_beginAccess();
        uint64_t v272 = *v264;
        swift_bridgeObjectRetain();
        long long v273 = v788;
        uint64_t v274 = specialized SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(v762, v272);
        v788 = v273;
        if (v273)
        {
          swift_bridgeObjectRelease();
          outlined consume of TopologicalSort.Element?(v765, v763, v764);

          swift_bridgeObjectRelease();
          long long v275 = OSSignposter.logHandle.getter();
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v276 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            os_signpost_type_t v277 = v742;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v771 + 88))(v277, v770) == *MEMORY[0x263F90238])
            {
              long long v278 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v771 + 8))(v742, v770);
              long long v278 = "";
            }
            long long v282 = v780;
            uint64_t v283 = v745;
            goto LABEL_142;
          }

          v780 = v745;
LABEL_143:
          ((void (*)(char *, char *))v782)(v780, v785);
          swift_release();
          (*(void (**)(char *, uint64_t))(v776 + 8))(v786, v775);
          LODWORD(v787) = 0;
          int v95 = 0;
          uint64_t v91 = 1;
          int v92 = 1;
          int v93 = 1;
          int v94 = 1;
          goto LABEL_53;
        }
        uint64_t v279 = v274;
        swift_bridgeObjectRelease();
        uint64_t v280 = v788;
        edgeListDigest(_:)(v279, v743);
        v788 = v280;
        if (v280)
        {

          swift_bridgeObjectRelease();
          outlined consume of TopologicalSort.Element?(v765, v763, v764);
          swift_bridgeObjectRelease();

          long long v275 = OSSignposter.logHandle.getter();
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v276 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            uint64_t v281 = v739;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v771 + 88))(v281, v770) == *MEMORY[0x263F90238])
            {
              long long v278 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v771 + 8))(v739, v770);
              long long v278 = "";
            }
            long long v282 = v780;
            uint64_t v283 = v741;
LABEL_142:
            unint64_t v291 = v785;
            v778(v282, v283, v785);
            uint64_t v292 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v292 = 0;
            os_signpost_id_t v293 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_25C27E000, v275, v276, v293, "transform", v278, v292, 2u);
            MEMORY[0x261185880](v292, -1, -1);

            ((void (*)(char *, char *))v782)(v283, v291);
          }
          else
          {

            v780 = v741;
          }
          goto LABEL_143;
        }
        uint64_t v284 = *(void (**)(void))(v772 + 32);
        v757 = &v784[OBJC_IVAR___SGREMaterial_edgeDigest];
        v284();
        unint64_t v285 = v788;
        uint64_t v286 = specialized inferLightingModel(from:in:)(v758, v766, v767, v762, v761);
        v788 = v285;
        if (v285)
        {
          swift_bridgeObjectRelease();
          outlined consume of TopologicalSort.Element?(v765, v763, v764);

          swift_bridgeObjectRelease();
          os_signpost_id_t v287 = OSSignposter.logHandle.getter();
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v288 = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            swift_retain();
            Swift::Int v289 = v738;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v771 + 88))(v289, v770) == *MEMORY[0x263F90238])
            {
              uint64_t v290 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v771 + 8))(v738, v770);
              uint64_t v290 = "";
            }
            long long v302 = v740;
            uint64_t v303 = v785;
            v778(v780, v740, v785);
            uint64_t v304 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v304 = 0;
            os_signpost_id_t v305 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_25C27E000, v287, v288, v305, "transform", v290, v304, 2u);
            MEMORY[0x261185880](v304, -1, -1);

            ((void (*)(char *, char *))v782)(v302, v303);
          }
          else
          {

            v780 = v740;
          }
          ((void (*)(char *, char *))v782)(v780, v785);
          swift_release();
          (*(void (**)(char *, uint64_t))(v776 + 8))(v786, v775);
          goto LABEL_153;
        }
        *(void *)&v784[OBJC_IVAR___SGREMaterial_lightingModel] = v286;
        uint64_t v294 = v788;
        uint64_t v295 = specialized inferBlendMode(from:in:)(v758, v766, v767, v762, v761);
        v788 = v294;
        if (v294) {
          goto LABEL_148;
        }
        *(void *)&v784[OBJC_IVAR___SGREMaterial_blending] = v295;
        unint64_t v296 = v788;
        char v297 = specialized inferHasPremultipliedAlpha(from:in:)(v758, v766, v767, v762, v761);
        v788 = v296;
        if (v296) {
          goto LABEL_148;
        }
        v784[OBJC_IVAR___SGREMaterial_hasPremultipliedAlpha] = v297 & 1;
        char v298 = v788;
        char v299 = specialized inferApplyPostProcessToneMap(from:in:)(v758, v766, v767, v762, v761);
        v788 = v298;
        if (v298
          || (v784[OBJC_IVAR___SGREMaterial_matchUnlitColor] = (v299 & 1) == 0,
              uint64_t v300 = v788,
              specialized conditionallyInsertDiscardNode(from:in:)(v758, v766, v767, v762, v761),
              (v788 = v300) != 0))
        {
LABEL_148:
          swift_bridgeObjectRelease();
          outlined consume of TopologicalSort.Element?(v765, v763, v764);

          swift_bridgeObjectRelease();
          uint64_t v301 = v786;
          $defer #1 () in SGREMaterial.init(graph:configuration:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v776 + 8))(v301, v775);
LABEL_153:
          LODWORD(v787) = 0;
          goto LABEL_154;
        }
        uint64_t v306 = v784;
        long long v307 = &v784[OBJC_IVAR___SGREMaterial_surfaceShaderFunctionName];
        *long long v307 = 0xD000000000000018;
        v307[1] = 0x800000025C421740;
        unint64_t v308 = 0xD00000000000001BLL;
        if (!v765) {
          unint64_t v308 = 0;
        }
        unint64_t v309 = 0x800000025C4216C0;
        if (!v765) {
          unint64_t v309 = 0;
        }
        long long v310 = (unint64_t *)&v306[OBJC_IVAR___SGREMaterial_geometryModifierFunctionName];
        *long long v310 = v308;
        v310[1] = v309;
        uint64_t v311 = static DebugConfig.debugMode;
        swift_bridgeObjectRetain();
        uint64_t v91 = specialized Set.contains(_:)(3u, v311);
        swift_bridgeObjectRelease();
        if (v91)
        {
          unint64_t v312 = v788;
          createDotText(representing:)(v774);
          v788 = v312;
          if (v312)
          {
            swift_bridgeObjectRelease();
            outlined consume of TopologicalSort.Element?(v765, v763, v764);

            goto LABEL_204;
          }
          uint64_t v315 = v313;
          uint64_t v91 = v314;
          *(void *)&long long v801 = 0;
          *((void *)&v801 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          uint64_t v317 = *(void *)&v774[OBJC_IVAR___SGGraph_name];
          uint64_t v316 = *(void *)&v774[OBJC_IVAR___SGGraph_name + 8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&long long v801 = v317;
          *((void *)&v801 + 1) = v316;
          v318._uint64_t countAndFlagsBits = 0x706172476970615FLL;
          v318._char object = (void *)0xEF6C616E69665F68;
          String.append(_:)(v318);
          specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v315, v91, v801, *((void **)&v801 + 1), 7630692, 0xE300000000000000);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v319 = specialized Array._getCount()(v762);
        if (!v319)
        {
          char v328 = 0;
          goto LABEL_175;
        }
        uint64_t v320 = v319;
        uint64_t v321 = 0;
        uint64_t v91 = swift_bridgeObjectRetain() + 48;
        while (2)
        {
          uint64_t v322 = v321 + 1;
          if (__OFADD__(v321, 1))
          {
            __break(1u);
LABEL_274:
            __break(1u);
            goto LABEL_275;
          }
          long long v323 = *(char **)(v91 - 16);
          long long v324 = &v323[OBJC_IVAR___SGNode_data];
          if (v323[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
          {
            uint64_t v325 = *(void **)(v91 - 8);
            v780 = *(char **)v91;
            uint64_t v326 = *((void *)v324 + 1);
            v785 = *(char **)v324;
            v778 = (void (*)(char *, char *, char *))one-time initialization token for realityKitBackgroundBlurNodes;
            v787 = v323;
            v782 = v325;
            v780 = v780;
            if (v778 != (void (*)(char *, char *, char *))-1) {
              swift_once();
            }
            swift_beginAccess();
            uint64_t v327 = static ShaderGraphNode.realityKitBackgroundBlurNodes;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            LODWORD(v785) = specialized Set.contains(_:)((uint64_t)v785, v326, v327);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v785)
            {
              char v328 = 1;
              goto LABEL_174;
            }
          }
          v91 += 24;
          ++v321;
          if (v322 != v320) {
            continue;
          }
          break;
        }
        char v328 = 0;
LABEL_174:
        swift_bridgeObjectRelease();
LABEL_175:
        v784[OBJC_IVAR___SGREMaterial_hasBackgroundBlur] = v328;
        char v329 = (char)v765;
        if (!v765) {
          goto LABEL_189;
        }
        long long v330 = &v765[OBJC_IVAR___SGNode_data];
        unsigned int v331 = v765[OBJC_IVAR___SGNode_data + 80];
        if (v331 >= 0x40)
        {
          unint64_t v337 = v764;
          BOOL v338 = v765;
          long long v339 = v763;
          swift_bridgeObjectRelease();
LABEL_180:
          lazy protocol witness table accessor for type APIError and conformance APIError();
          uint64_t v340 = (id *)swift_allocError();
          *(_OWORD *)uint64_t v341 = xmmword_25C41A110;
          *(unsigned char *)(v341 + 16) = 21;
          v788 = v340;
          swift_willThrow();

          swift_bridgeObjectRelease();
          uint64_t v342 = v765;
          long long v343 = v763;
          outlined consume of TopologicalSort.Element?(v765, v763, v764);

          goto LABEL_205;
        }
        v782 = (char *)*((void *)v330 + 9);
        v780 = (char *)*((void *)v330 + 8);
        v787 = (id *)*((void *)v330 + 7);
        uint64_t v332 = *((void *)v330 + 5);
        v785 = (char *)*((void *)v330 + 6);
        unint64_t v333 = (void *)*((void *)v330 + 3);
        uint64_t v334 = *((void *)v330 + 4);
        uint64_t v335 = *((void *)v330 + 1);
        v778 = (void (*)(char *, char *, char *))*((void *)v330 + 2);
        uint64_t v336 = *(void **)v330;
        outlined copy of TopologicalSort.Element?(v765, v763, v764);
        outlined copy of NodeData(v336, v335, v778, v333, v334, v332, (int)v785, (int)v787, (uint64_t)v780, (uint64_t)v782, v331);
        LODWORD(v335) = specialized Surface.init(nodeDefID:)((uint64_t)v336, v335);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v334, v332);
        if (v335 == 4)
        {
          swift_bridgeObjectRelease();
          unint64_t v337 = v764;
          goto LABEL_180;
        }
        uint64_t v91 = v765;
        long long v344 = (void *)MEMORY[0x261183E60](0xD000000000000013, 0x800000025C4228D0);
        unint64_t v345 = (char *)objc_msgSend((id)v91, sel_inputNamed_, v344);

        if (v345)
        {
          uint64_t v346 = &v345[OBJC_IVAR___SGInput_edge];
          swift_beginAccess();
          uint64_t v347 = (void *)MEMORY[0x261185960](v346);

          char v329 = v347 != 0;
        }
        else
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          __swift_project_value_buffer(v737, (uint64_t)logger);
          uint64_t v348 = Logger.logObject.getter();
          os_log_type_t v349 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v348, v349))
          {
            unint64_t v350 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v350 = 0;
            _os_log_impl(&dword_25C27E000, v348, v349, "GeometryModifier is missing an expected input.", v350, 2u);
            MEMORY[0x261185880](v350, -1, -1);
          }
          else
          {
          }
          char v329 = 1;
        }
LABEL_189:
        v784[OBJC_IVAR___SGREMaterial_hasGeometryModifierOffset] = v329;
        uint64_t v351 = *(void *)(*(void *)&v774[v768] + OBJC_IVAR___SGNode_inputs);
        unint64_t v352 = specialized ContiguousArray.init()();
        *(void *)&long long v801 = v352;
        uint64_t v353 = swift_bridgeObjectRetain();
        uint64_t v354 = specialized Array.count.getter(v353);
        if (!v354)
        {
          swift_bridgeObjectRelease();
          goto LABEL_201;
        }
        uint64_t v355 = v354;
        if (v354 < 1) {
          goto LABEL_274;
        }
        LODWORD(v787) = specialized Array._hoistableIsNativeTypeChecked()(v351);
        for (uint64_t i = 0; i != v355; ++i)
        {
          if (v787) {
            uint64_t v357 = (char *)*(id *)(v351 + 8 * i + 32);
          }
          else {
            uint64_t v357 = (char *)MEMORY[0x2611848A0](i, v351);
          }
          unint64_t v358 = v357;
          char v359 = &v357[OBJC_IVAR___SGInput_type];
          swift_beginAccess();
          if (*(void *)v359 == 53)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v352 = v801;
LABEL_201:
        v785 = v774;
        long long v360 = v788;
        uint64_t v361 = specialized Sequence.contains(where:)(v352, (uint64_t)v785);
        v788 = v360;
        if (v360)
        {

          swift_bridgeObjectRelease();
          swift_release();

          goto LABEL_203;
        }
        uint64_t v91 = v361;
        swift_release();

        v784[OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms] = v91 & 1;
        if (!v765)
        {
          v784[OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms] = 0;
          goto LABEL_223;
        }
        uint64_t v363 = *(void *)(*(void *)&v774[v768] + OBJC_IVAR___SGNode_inputs);
        unint64_t v364 = specialized ContiguousArray.init()();
        *(void *)&long long v801 = v364;
        uint64_t v365 = swift_bridgeObjectRetain();
        uint64_t v366 = specialized Array.count.getter(v365);
        if (!v366)
        {
          swift_bridgeObjectRelease();
          goto LABEL_220;
        }
        uint64_t v367 = v366;
        if (v366 < 1)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }
        LODWORD(v787) = specialized Array._hoistableIsNativeTypeChecked()(v363);
        for (uint64_t j = 0; j != v367; ++j)
        {
          if (v787) {
            uint64_t v369 = (char *)*(id *)(v363 + 8 * j + 32);
          }
          else {
            uint64_t v369 = (char *)MEMORY[0x2611848A0](j, v363);
          }
          unint64_t v370 = v369;
          unint64_t v371 = &v369[OBJC_IVAR___SGInput_type];
          swift_beginAccess();
          if (*(void *)v371 == 54)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v364 = v801;
LABEL_220:
        unint64_t v372 = v785;
        uint64_t v373 = v788;
        char v374 = specialized Sequence.contains(where:)(v364, (uint64_t)v372);
        v788 = v373;
        if (!v373)
        {
          char v375 = v374;
          swift_release();

          v784[OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms] = v375 & 1;
LABEL_223:
          uint64_t v376 = specialized static Array._allocateUninitialized(_:)(0);
          unint64_t v377 = v784;
          *(void *)&v784[OBJC_IVAR___SGREMaterial_warnings] = v376;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v378 = swift_allocObject();
          uint64_t v379 = specialized static Array._adoptStorage(_:count:)(v378, 2);
          *uint64_t v380 = 0xD000000000000021;
          v380[1] = 0x800000025C421430;
          uint64_t v783 = 0xD000000000000012;
          v380[2] = 0xD000000000000022;
          v380[3] = 0x800000025C4213D0;
          unint64_t v381 = (void *)destructiveProjectEnumData for NodePersonality.ShaderType(v379);
          Swift::String v382 = v788;
          char v383 = specialized Sequence.contains(where:)(v762, v381);
          v787 = v382;
          swift_bridgeObjectRelease();
          v377[OBJC_IVAR___SGREMaterial_hasConnectedLightSpillNodes] = v383 & 1;
          Hasher.init()();
          SHA512Digest.hash(into:)();
          long long v808 = v803;
          long long v809 = v804;
          uint64_t v810 = v805;
          long long v806 = v801;
          long long v807 = v802;
          *(void *)&v377[OBJC_IVAR___SGREMaterial_operationalHash] = Hasher.finalize()();

          v798.receiver = v377;
          v798.super_class = ObjectType;
          id v384 = objc_msgSendSuper2(&v798, (SEL)0x2654B1618);
          uint64_t v385 = static DebugConfig.debugMode;
          uint64_t v91 = (uint64_t)v384;
          swift_bridgeObjectRetain();
          LOBYTE(v377) = specialized Set.contains(_:)(1u, v385);
          swift_bridgeObjectRelease();
          if ((v377 & 1) == 0)
          {

            swift_bridgeObjectRelease();
            outlined consume of TopologicalSort.Element?(v765, v763, v764);
            swift_bridgeObjectRelease();

LABEL_272:
            v643 = v786;
            $defer #1 () in SGREMaterial.init(graph:configuration:)();

            swift_release();
            (*(void (**)(char *, uint64_t))(v776 + 8))(v643, v775);

            return v91;
          }
          uint64_t v796 = v279;
          long long v386 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
          uint64_t v387 = (char *)lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
          v781 = v386;
          v780 = v387;
          uint64_t v388 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v390 = v389;
          swift_bridgeObjectRelease();
          uint64_t v391 = OBJC_IVAR___SGREMaterial_graph;
          uint64_t v392 = (uint64_t *)(*(void *)(v91 + OBJC_IVAR___SGREMaterial_graph) + OBJC_IVAR___SGGraph_name);
          unint64_t v393 = (void *)v392[1];
          uint64_t v796 = *v392;
          v797 = v393;
          swift_bridgeObjectRetain();
          unint64_t v703 = 0xE900000000000074;
          v394._uint64_t countAndFlagsBits = 0x73694C656764655FLL;
          v394._char object = (void *)0xE900000000000074;
          String.append(_:)(v394);
          specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v388, v390, v796, v797, 7633012, 0xE300000000000000);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v650 = ObjectIdentifier.debugDescription.getter();
          v782 = v395;
          uint64_t v396 = (uint64_t *)(*(void *)(v91 + v391) + OBJC_IVAR___SGGraph_name);
          unint64_t v397 = (unsigned char *)v396[1];
          uint64_t v652 = *v396;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v398 = swift_allocObject();
          uint64_t v399 = specialized static Array._adoptStorage(_:count:)(v398, 1);
          uint64_t v400 = *(void *)(v91 + OBJC_IVAR___SGREMaterial_operationalHash);
          uint64_t v401 = MEMORY[0x263F8D750];
          v402[3] = MEMORY[0x263F8D6C8];
          v402[4] = v401;
          *uint64_t v402 = v400;
          destructiveProjectEnumData for NodePersonality.ShaderType(v399);
          v784 = v397;
          swift_bridgeObjectRetain();
          uint64_t v651 = String.init(format:_:)();
          unint64_t v701 = v403;
          uint64_t v404 = *(void *)(v91 + OBJC_IVAR___SGREMaterial_lightingModel);
          switch(v404)
          {
            case 3:
              uint64_t v783 = 0x616F637261656C63;
              break;
            case 2:
              unint64_t v703 = 0xE500000000000000;
              uint64_t v783 = 0x74696C6E75;
              break;
            case 1:
              unint64_t v703 = 0xE300000000000000;
              uint64_t v783 = 7496304;
              break;
            default:
              unint64_t v703 = 0x800000025C4228B0;
              break;
          }
          uint64_t v405 = *(void *)(v91 + OBJC_IVAR___SGREMaterial_blending);
          if (v405)
          {
            if (v405 == 1)
            {
              unint64_t v700 = 0xEB00000000746E65;
              uint64_t v406 = 0x726170736E617274;
            }
            else
            {
              unint64_t v700 = 0xEF3E65756C617620;
              uint64_t v406 = 0x64696C61766E693CLL;
            }
          }
          else
          {
            unint64_t v700 = 0xE600000000000000;
            uint64_t v406 = 0x65757161706FLL;
          }
          uint64_t v653 = v406;
          uint64_t v702 = 0x2D656E6F6E2D09;
          int v407 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_hasPremultipliedAlpha);
          int v654 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_matchUnlitColor);
          int v655 = v407;
          int v408 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms);
          int v658 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms);
          int v659 = v408;
          int v409 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_hasBackgroundBlur);
          int v656 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_hasConnectedLightSpillNodes);
          int v657 = v409;
          int v660 = *(unsigned __int8 *)(v91 + OBJC_IVAR___SGREMaterial_hasGeometryModifierOffset);
          uint64_t v410 = OBJC_IVAR___SGREMaterial_uniforms;
          uint64_t v411 = swift_bridgeObjectRetain();
          uint64_t v412 = specialized Array.count.getter(v411);
          swift_bridgeObjectRelease();
          if (v412)
          {
            uint64_t v413 = *(void *)(v91 + v410);
            uint64_t v414 = swift_bridgeObjectRetain();
            uint64_t v415 = specialized Array.count.getter(v414);
            if (v415)
            {
              uint64_t v416 = v415;
              uint64_t v792 = specialized ContiguousArray.init()();
              specialized ContiguousArray.reserveCapacity(_:)(v416);
              if (v416 < 0)
              {
                __break(1u);
LABEL_278:
                __break(1u);
                goto LABEL_279;
              }
              char IsNativeType = specialized Array._hoistableIsNativeTypeChecked()(v413);
              uint64_t v418 = 0;
              do
              {
                if (IsNativeType) {
                  unint64_t v419 = (char *)*(id *)(v413 + 8 * v418 + 32);
                }
                else {
                  unint64_t v419 = (char *)MEMORY[0x2611848A0](v418, v413);
                }
                uint64_t v420 = v419;
                ++v418;
                uint64_t v794 = 9;
                unint64_t v795 = 0xE100000000000000;
                uint64_t v421 = *(void *)&v419[OBJC_IVAR___SGInput_name];
                uint64_t v422 = *(void **)&v419[OBJC_IVAR___SGInput_name + 8];
                swift_bridgeObjectRetain();
                v423._uint64_t countAndFlagsBits = v421;
                v423._char object = v422;
                String.append(_:)(v423);
                swift_bridgeObjectRelease();
                v424._uint64_t countAndFlagsBits = 8250;
                v424._char object = (void *)0xE200000000000000;
                String.append(_:)(v424);
                swift_beginAccess();
                v425._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
                String.append(_:)(v425);

                swift_bridgeObjectRelease();
                v788 = (id *)v794;
                uint64_t v426 = v795;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v427 = *(void *)(v792 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v427);
                uint64_t v428 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v427, (uint64_t)v788, v426);
                destructiveProjectEnumData for NodePersonality.ShaderType(v428);
              }
              while (v416 != v418);
              swift_bridgeObjectRelease();
              uint64_t v429 = v792;
            }
            else
            {
              uint64_t v429 = specialized static Array._allocateUninitialized(_:)(0);
              swift_bridgeObjectRelease();
            }
            uint64_t v794 = v429;
            uint64_t v649 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v699 = v430;
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v699 = 0xE700000000000000;
            uint64_t v649 = 0x2D656E6F6E2D09;
          }
          uint64_t v431 = v91 + OBJC_IVAR___SGREMaterial_textures;
          swift_beginAccess();
          if (*(void *)(*(void *)v431 + 16))
          {
            uint64_t v432 = swift_bridgeObjectRetain();
            uint64_t v433 = v787;
            uint64_t v434 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SSs5NeverOTg5122_s11ShaderGraph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcS2S3key_SS5valuet_tXEfU4_Tf1cn_n(v432);
            v787 = v433;
            swift_bridgeObjectRelease();
            uint64_t v792 = v434;
            uint64_t v648 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v698 = v435;
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v698 = 0xE700000000000000;
            uint64_t v648 = 0x2D656E6F6E2D09;
          }
          uint64_t v436 = OBJC_IVAR___SGREMaterial_customUniformsType;
          if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(v91 + OBJC_IVAR___SGREMaterial_customUniformsType)
                                                 + OBJC_IVAR___SGPropertyDescription_type)
                                     + OBJC_IVAR___SGTypeDescription_type)
                         + 56))
          {
            uint64_t v792 = 0;
            unint64_t v793 = 0xE000000000000000;
            _StringGuts.grow(_:)(31);
            swift_bridgeObjectRelease();
            uint64_t v792 = 0x203A657A69732820;
            unint64_t v793 = 0xE800000000000000;
            LODWORD(v789) = *(_DWORD *)(*(void *)(*(void *)(*(void *)(v91 + v436)
                                                              + OBJC_IVAR___SGPropertyDescription_type)
                                                  + OBJC_IVAR___SGTypeDescription_type)
                                      + 56);
            v437._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v437);
            swift_bridgeObjectRelease();
            v438._uint64_t countAndFlagsBits = 0x6D6E67696C61202CLL;
            v438._char object = (void *)0xED0000203A746E65;
            String.append(_:)(v438);
            LODWORD(v789) = *(_DWORD *)(*(void *)(*(void *)(*(void *)(v91 + v436)
                                                              + OBJC_IVAR___SGPropertyDescription_type)
                                                  + OBJC_IVAR___SGTypeDescription_type)
                                      + 60);
            v439._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v439);
            swift_bridgeObjectRelease();
            v440._uint64_t countAndFlagsBits = 2601;
            v440._char object = (void *)0xE200000000000000;
            String.append(_:)(v440);
            unint64_t v441 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(*(void *)(v91 + v436)
                                                                               + OBJC_IVAR___SGPropertyDescription_type)
                                                                   + OBJC_IVAR___SGTypeDescription_type)
                                                     + 232);
            uint64_t v442 = swift_retain();
            uint64_t v443 = v441(v442);
            swift_release();
            uint64_t v444 = v787;
            uint64_t v445 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_SSs5NeverOTg504_s11d7Graph16fgh3Vs6i19VSSIggyo_AC_AEtSSs5J141OIegnrzr_TR04_s11a93Graph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcSSAA16cde4V_s6F8VtXEfU5_Tf3nnnpf_nTf1cn_n(v443);
            v787 = v444;
            swift_bridgeObjectRelease();
            uint64_t v789 = v445;
            uint64_t v446 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v448 = v447;
            swift_bridgeObjectRelease();
            v449._uint64_t countAndFlagsBits = v446;
            v449._char object = v448;
            String.append(_:)(v449);
            swift_bridgeObjectRelease();
            v450._uint64_t countAndFlagsBits = 10506;
            v450._char object = (void *)0xE200000000000000;
            String.append(_:)(v450);
            uint64_t v647 = v792;
            unint64_t v697 = v793;
          }
          else
          {
            unint64_t v697 = 0xE700000000000000;
            uint64_t v647 = 0x2D656E6F6E2D09;
          }
          uint64_t v451 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v769) + 0x58);
          uint64_t v452 = v451();
          uint64_t v453 = specialized Array.count.getter(v452);
          uint64_t v454 = swift_bridgeObjectRelease();
          if (!v453)
          {
            unint64_t v473 = 0xE700000000000000;
            goto LABEL_267;
          }
          uint64_t v792 = 0;
          unint64_t v793 = 0xE000000000000000;
          v788 = (id *)((uint64_t (*)(uint64_t))v451)(v454);
          uint64_t v455 = specialized Array.count.getter(v788);
          if (!v455)
          {
            uint64_t v472 = specialized static Array._allocateUninitialized(_:)(0);
            swift_bridgeObjectRelease();
LABEL_266:
            uint64_t v789 = v472;
            uint64_t v474 = BidirectionalCollection<>.joined(separator:)();
            char v476 = v475;
            swift_bridgeObjectRelease();
            v477._uint64_t countAndFlagsBits = v474;
            v477._char object = v476;
            String.append(_:)(v477);
            swift_bridgeObjectRelease();
            uint64_t v702 = v792;
            unint64_t v473 = v793;
LABEL_267:
            unint64_t v661 = v473;
            if (one-time initialization token for logger == -1)
            {
LABEL_268:
              uint64_t v478 = v737;
              uint64_t v479 = __swift_project_value_buffer(v737, (uint64_t)logger);
              (*(void (**)(char *, uint64_t, uint64_t))(v736 + 16))(v735, v479, v478);
              uint64_t v480 = swift_allocObject();
              uint64_t v770 = v480;
              id v481 = v782;
              *(void *)(v480 + 16) = v650;
              *(void *)(v480 + 24) = v481;
              uint64_t v482 = swift_allocObject();
              uint64_t v771 = v482;
              long long v483 = v784;
              *(void *)(v482 + 16) = v652;
              *(void *)(v482 + 24) = v483;
              uint64_t v484 = swift_allocObject();
              uint64_t v773 = v484;
              unint64_t v485 = v701;
              *(void *)(v484 + 16) = v651;
              *(void *)(v484 + 24) = v485;
              uint64_t v486 = swift_allocObject();
              v774 = (char *)v486;
              unint64_t v487 = v703;
              *(void *)(v486 + 16) = v783;
              *(void *)(v486 + 24) = v487;
              uint64_t v488 = swift_allocObject();
              unint64_t v777 = v488;
              unint64_t v489 = v700;
              *(void *)(v488 + 16) = v653;
              *(void *)(v488 + 24) = v489;
              v753 = (char *)swift_allocObject();
              char v490 = v654;
              v753[16] = v654;
              v754 = (char *)swift_allocObject();
              v754[16] = v490;
              v755 = (char *)swift_allocObject();
              v755[16] = v655;
              v756 = (char *)swift_allocObject();
              v756[16] = v656;
              v757 = (char *)swift_allocObject();
              v757[16] = v657;
              uint64_t v768 = swift_allocObject();
              *(unsigned char *)(v768 + 16) = v658;
              uint64_t v772 = swift_allocObject();
              *(unsigned char *)(v772 + 16) = v659;
              v778 = (void (*)(char *, char *, char *))swift_allocObject();
              *((unsigned char *)v778 + 16) = v660;
              uint64_t v491 = swift_allocObject();
              uint64_t ObjectType = (objc_class *)v491;
              unint64_t v492 = v699;
              *(void *)(v491 + 16) = v649;
              *(void *)(v491 + 24) = v492;
              unint64_t v493 = (char *)swift_allocObject();
              v780 = v493;
              unint64_t v494 = v698;
              *((void *)v493 + 2) = v648;
              *((void *)v493 + 3) = v494;
              uint64_t v495 = (char *)swift_allocObject();
              v781 = v495;
              unint64_t v496 = v697;
              *((void *)v495 + 2) = v647;
              *((void *)v495 + 3) = v496;
              uint64_t v497 = (id *)swift_allocObject();
              v788 = v497;
              uint64_t v498 = (void *)v661;
              v497[2] = (id)v702;
              v497[3] = v498;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v695 = Logger.logObject.getter();
              int v646 = static os_log_type_t.debug.getter();
              v751 = (char *)swift_allocObject();
              v751[16] = 32;
              uint64_t v696 = swift_allocObject();
              *(unsigned char *)(v696 + 16) = 8;
              uint64_t v499 = swift_allocObject();
              uint64_t v500 = v770;
              *(void *)(v499 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v499 + 24) = v500;
              uint64_t v501 = v499;
              uint64_t v694 = v499;
              uint64_t v502 = swift_allocObject();
              v752 = (char *)v502;
              *(void *)(v502 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
              *(void *)(v502 + 24) = v501;
              v750 = (char *)swift_allocObject();
              v750[16] = 32;
              v748 = (char *)swift_allocObject();
              v748[16] = 8;
              uint64_t v503 = swift_allocObject();
              uint64_t v504 = v771;
              *(void *)(v503 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v503 + 24) = v504;
              uint64_t v505 = v503;
              uint64_t v693 = v503;
              uint64_t v506 = swift_allocObject();
              v749 = (char *)v506;
              *(void *)(v506 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v506 + 24) = v505;
              uint64_t v721 = swift_allocObject();
              *(unsigned char *)(v721 + 16) = 32;
              uint64_t v718 = swift_allocObject();
              *(unsigned char *)(v718 + 16) = 8;
              uint64_t v507 = swift_allocObject();
              uint64_t v508 = v773;
              *(void *)(v507 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v507 + 24) = v508;
              uint64_t v509 = v507;
              uint64_t v692 = v507;
              uint64_t v510 = swift_allocObject();
              v747 = (char *)v510;
              *(void *)(v510 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v510 + 24) = v509;
              v746 = (char *)swift_allocObject();
              v746[16] = 32;
              v744 = (char *)swift_allocObject();
              v744[16] = 8;
              uint64_t v511 = swift_allocObject();
              v512 = v774;
              *(void *)(v511 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v511 + 24) = v512;
              uint64_t v513 = v511;
              uint64_t v691 = v511;
              uint64_t v514 = swift_allocObject();
              v745 = (char *)v514;
              *(void *)(v514 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v514 + 24) = v513;
              uint64_t v743 = swift_allocObject();
              *(unsigned char *)(v743 + 16) = 32;
              v741 = (char *)swift_allocObject();
              v741[16] = 8;
              uint64_t v515 = swift_allocObject();
              unint64_t v516 = v777;
              *(void *)(v515 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v515 + 24) = v516;
              uint64_t v517 = v515;
              uint64_t v690 = v515;
              uint64_t v518 = swift_allocObject();
              v742 = (char *)v518;
              *(void *)(v518 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v518 + 24) = v517;
              v739 = (char *)swift_allocObject();
              v739[16] = 0;
              v740 = (char *)swift_allocObject();
              v740[16] = 4;
              uint64_t v519 = swift_allocObject();
              long long v520 = v753;
              *(void *)(v519 + 16) = partial apply for implicit closure #8 in SGREMaterial.init(graph:configuration:);
              *(void *)(v519 + 24) = v520;
              uint64_t v521 = v519;
              uint64_t v688 = v519;
              uint64_t v522 = swift_allocObject();
              *(void *)(v522 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
              *(void *)(v522 + 24) = v521;
              uint64_t v523 = v522;
              uint64_t v687 = v522;
              uint64_t v524 = swift_allocObject();
              *(void *)(v524 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
              *(void *)(v524 + 24) = v523;
              uint64_t v525 = v524;
              uint64_t v684 = v524;
              uint64_t v526 = swift_allocObject();
              v738 = (char *)v526;
              *(void *)(v526 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
              *(void *)(v526 + 24) = v525;
              uint64_t v732 = swift_allocObject();
              *(unsigned char *)(v732 + 16) = 0;
              uint64_t v733 = swift_allocObject();
              *(unsigned char *)(v733 + 16) = 4;
              uint64_t v527 = swift_allocObject();
              char v528 = v754;
              *(void *)(v527 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
              *(void *)(v527 + 24) = v528;
              uint64_t v529 = v527;
              uint64_t v686 = v527;
              uint64_t v530 = swift_allocObject();
              *(void *)(v530 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v530 + 24) = v529;
              uint64_t v531 = v530;
              uint64_t v685 = v530;
              uint64_t v532 = swift_allocObject();
              *(void *)(v532 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v532 + 24) = v531;
              uint64_t v533 = v532;
              uint64_t v679 = v532;
              uint64_t v534 = swift_allocObject();
              uint64_t v731 = v534;
              *(void *)(v534 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v534 + 24) = v533;
              uint64_t v729 = swift_allocObject();
              *(unsigned char *)(v729 + 16) = 0;
              uint64_t v730 = swift_allocObject();
              *(unsigned char *)(v730 + 16) = 4;
              uint64_t v535 = swift_allocObject();
              v536 = v755;
              *(void *)(v535 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
              *(void *)(v535 + 24) = v536;
              uint64_t v537 = v535;
              uint64_t v683 = v535;
              uint64_t v538 = swift_allocObject();
              *(void *)(v538 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v538 + 24) = v537;
              uint64_t v539 = v538;
              uint64_t v682 = v538;
              uint64_t v540 = swift_allocObject();
              *(void *)(v540 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v540 + 24) = v539;
              uint64_t v541 = v540;
              uint64_t v675 = v540;
              uint64_t v542 = swift_allocObject();
              uint64_t v728 = v542;
              *(void *)(v542 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v542 + 24) = v541;
              uint64_t v726 = swift_allocObject();
              *(unsigned char *)(v726 + 16) = 0;
              uint64_t v727 = swift_allocObject();
              *(unsigned char *)(v727 + 16) = 4;
              uint64_t v543 = swift_allocObject();
              uint64_t v544 = v756;
              *(void *)(v543 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
              *(void *)(v543 + 24) = v544;
              uint64_t v545 = v543;
              uint64_t v680 = v543;
              uint64_t v546 = swift_allocObject();
              *(void *)(v546 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v546 + 24) = v545;
              uint64_t v547 = v546;
              uint64_t v678 = v546;
              uint64_t v548 = swift_allocObject();
              *(void *)(v548 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v548 + 24) = v547;
              uint64_t v549 = v548;
              uint64_t v670 = v548;
              uint64_t v550 = swift_allocObject();
              uint64_t v725 = v550;
              *(void *)(v550 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v550 + 24) = v549;
              uint64_t v723 = swift_allocObject();
              *(unsigned char *)(v723 + 16) = 0;
              uint64_t v724 = swift_allocObject();
              *(unsigned char *)(v724 + 16) = 4;
              uint64_t v551 = swift_allocObject();
              char v552 = v757;
              *(void *)(v551 + 16) = partial apply for implicit closure #12 in SGREMaterial.init(graph:configuration:);
              *(void *)(v551 + 24) = v552;
              uint64_t v553 = v551;
              uint64_t v677 = v551;
              uint64_t v554 = swift_allocObject();
              *(void *)(v554 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v554 + 24) = v553;
              uint64_t v555 = v554;
              uint64_t v676 = v554;
              uint64_t v556 = swift_allocObject();
              *(void *)(v556 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v556 + 24) = v555;
              uint64_t v557 = v556;
              uint64_t v665 = v556;
              uint64_t v558 = swift_allocObject();
              uint64_t v722 = v558;
              *(void *)(v558 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v558 + 24) = v557;
              uint64_t v719 = swift_allocObject();
              *(unsigned char *)(v719 + 16) = 0;
              uint64_t v720 = swift_allocObject();
              *(unsigned char *)(v720 + 16) = 4;
              uint64_t v559 = swift_allocObject();
              uint64_t v560 = v768;
              *(void *)(v559 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
              *(void *)(v559 + 24) = v560;
              uint64_t v561 = v559;
              uint64_t v673 = v559;
              uint64_t v562 = swift_allocObject();
              *(void *)(v562 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v562 + 24) = v561;
              uint64_t v563 = v562;
              uint64_t v672 = v562;
              uint64_t v564 = swift_allocObject();
              *(void *)(v564 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v564 + 24) = v563;
              uint64_t v565 = v564;
              uint64_t v664 = v564;
              uint64_t v566 = swift_allocObject();
              uint64_t v689 = v566;
              *(void *)(v566 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v566 + 24) = v565;
              uint64_t v709 = swift_allocObject();
              *(unsigned char *)(v709 + 16) = 0;
              uint64_t v717 = swift_allocObject();
              *(unsigned char *)(v717 + 16) = 4;
              uint64_t v567 = swift_allocObject();
              uint64_t v568 = v772;
              *(void *)(v567 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
              *(void *)(v567 + 24) = v568;
              uint64_t v569 = v567;
              uint64_t v669 = v567;
              uint64_t v570 = swift_allocObject();
              *(void *)(v570 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v570 + 24) = v569;
              uint64_t v571 = v570;
              uint64_t v668 = v570;
              uint64_t v572 = swift_allocObject();
              *(void *)(v572 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v572 + 24) = v571;
              uint64_t v573 = v572;
              uint64_t v663 = v572;
              uint64_t v574 = swift_allocObject();
              uint64_t v716 = v574;
              *(void *)(v574 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v574 + 24) = v573;
              uint64_t v714 = swift_allocObject();
              *(unsigned char *)(v714 + 16) = 0;
              uint64_t v715 = swift_allocObject();
              *(unsigned char *)(v715 + 16) = 4;
              uint64_t v575 = swift_allocObject();
              v576 = v778;
              *(void *)(v575 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
              *(void *)(v575 + 24) = v576;
              uint64_t v577 = v575;
              uint64_t v667 = v575;
              uint64_t v578 = swift_allocObject();
              *(void *)(v578 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v578 + 24) = v577;
              uint64_t v579 = v578;
              uint64_t v666 = v578;
              uint64_t v580 = swift_allocObject();
              *(void *)(v580 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
              *(void *)(v580 + 24) = v579;
              uint64_t v581 = v580;
              uint64_t v662 = v580;
              uint64_t v582 = swift_allocObject();
              uint64_t v713 = v582;
              *(void *)(v582 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
              *(void *)(v582 + 24) = v581;
              uint64_t v712 = swift_allocObject();
              *(unsigned char *)(v712 + 16) = 32;
              uint64_t v710 = swift_allocObject();
              *(unsigned char *)(v710 + 16) = 8;
              uint64_t v583 = swift_allocObject();
              v584 = ObjectType;
              *(void *)(v583 + 16) = partial apply for implicit closure #16 in SGREMaterial.init(graph:configuration:);
              *(void *)(v583 + 24) = v584;
              uint64_t v585 = v583;
              uint64_t v681 = v583;
              uint64_t v586 = swift_allocObject();
              uint64_t v711 = v586;
              *(void *)(v586 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v586 + 24) = v585;
              uint64_t v707 = swift_allocObject();
              *(unsigned char *)(v707 + 16) = 32;
              uint64_t v704 = swift_allocObject();
              *(unsigned char *)(v704 + 16) = 8;
              uint64_t v587 = swift_allocObject();
              v588 = v780;
              *(void *)(v587 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v587 + 24) = v588;
              uint64_t v589 = swift_allocObject();
              uint64_t v708 = v589;
              *(void *)(v589 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v589 + 24) = v587;
              uint64_t v706 = swift_allocObject();
              *(unsigned char *)(v706 + 16) = 32;
              uint64_t v705 = swift_allocObject();
              *(unsigned char *)(v705 + 16) = 8;
              uint64_t v590 = swift_allocObject();
              v591 = v781;
              *(void *)(v590 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v590 + 24) = v591;
              uint64_t v592 = swift_allocObject();
              *(void *)(v592 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v592 + 24) = v590;
              uint64_t v674 = v592;
              uint64_t v671 = swift_allocObject();
              *(unsigned char *)(v671 + 16) = 32;
              uint64_t v593 = swift_allocObject();
              *(unsigned char *)(v593 + 16) = 8;
              uint64_t v594 = swift_allocObject();
              v595 = v788;
              *(void *)(v594 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
              *(void *)(v594 + 24) = v595;
              uint64_t v596 = swift_allocObject();
              *(void *)(v596 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v596 + 24) = v594;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
              uint64_t v597 = swift_allocObject();
              uint64_t v645 = specialized static Array._adoptStorage(_:count:)(v597, 51);
              v598 = v751;
              void *v599 = partial apply for closure #1 in OSLogArguments.append(_:);
              v599[1] = v598;
              uint64_t v600 = v696;
              v599[2] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[3] = v600;
              v601 = v752;
              v599[4] = partial apply for closure #1 in OSLogArguments.append(_:);
              v599[5] = v601;
              v602 = v750;
              v599[6] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[7] = v602;
              v603 = v748;
              v599[8] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[9] = v603;
              v604 = v749;
              v599[10] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[11] = v604;
              uint64_t v605 = v721;
              v599[12] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[13] = v605;
              uint64_t v606 = v718;
              v599[14] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[15] = v606;
              v607 = v747;
              v599[16] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[17] = v607;
              v608 = v746;
              v599[18] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[19] = v608;
              v609 = v744;
              v599[20] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[21] = v609;
              v610 = v745;
              v599[22] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[23] = v610;
              uint64_t v611 = v743;
              v599[24] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[25] = v611;
              v612 = v741;
              v599[26] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[27] = v612;
              v613 = v742;
              v599[28] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[29] = v613;
              v614 = v739;
              v599[30] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[31] = v614;
              v615 = v740;
              v599[32] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[33] = v615;
              v616 = v738;
              v599[34] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[35] = v616;
              uint64_t v617 = v732;
              v599[36] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[37] = v617;
              uint64_t v618 = v733;
              v599[38] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[39] = v618;
              uint64_t v619 = v731;
              v599[40] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[41] = v619;
              uint64_t v620 = v729;
              v599[42] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[43] = v620;
              uint64_t v621 = v730;
              v599[44] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[45] = v621;
              uint64_t v622 = v728;
              v599[46] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[47] = v622;
              uint64_t v623 = v726;
              v599[48] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[49] = v623;
              uint64_t v624 = v727;
              v599[50] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[51] = v624;
              uint64_t v625 = v725;
              v599[52] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[53] = v625;
              uint64_t v626 = v723;
              v599[54] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[55] = v626;
              uint64_t v627 = v724;
              v599[56] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[57] = v627;
              uint64_t v628 = v722;
              v599[58] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[59] = v628;
              uint64_t v629 = v719;
              v599[60] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[61] = v629;
              uint64_t v630 = v720;
              v599[62] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[63] = v630;
              v599[64] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[65] = v689;
              v599[66] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[67] = v709;
              v599[68] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[69] = v717;
              v599[70] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[71] = v716;
              v599[72] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[73] = v714;
              v599[74] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[75] = v715;
              v599[76] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              v599[77] = v713;
              v599[78] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[79] = v712;
              v599[80] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[81] = v710;
              v599[82] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[83] = v711;
              v599[84] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[85] = v707;
              v599[86] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[87] = v704;
              v599[88] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[89] = v708;
              v599[90] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[91] = v706;
              v599[92] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[93] = v705;
              v599[94] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[95] = v592;
              v599[96] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[97] = v671;
              v599[98] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[99] = v593;
              v599[100] = closure #1 in OSLogArguments.append(_:)partial apply;
              v599[101] = v596;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v644[5] = v587;
              swift_retain();
              swift_retain();
              v644[4] = v590;
              swift_retain();
              swift_retain();
              v644[3] = v594;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v644[1] = v593;
              swift_retain();
              v644[2] = v596;
              swift_retain();
              swift_bridgeObjectRelease();
              int v646 = v646;
              if (os_log_type_enabled(v695, (os_log_type_t)v646))
              {
                v631 = (uint8_t *)swift_slowAlloc();
                uint64_t v645 = swift_slowAlloc();
                uint64_t v792 = v645;
                *(_WORD *)v631 = 4354;
                v631[2] = 32;
                swift_release();
                v631[3] = 8;
                swift_release();
                unint64_t v632 = (unint64_t)v782;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v650, v632, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[12] = 32;
                swift_release();
                v631[13] = 8;
                swift_release();
                unint64_t v633 = (unint64_t)v784;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v652, v633, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[22] = 32;
                swift_release();
                v631[23] = 8;
                swift_release();
                unint64_t v634 = v701;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v651, v634, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[32] = 32;
                swift_release();
                v631[33] = 8;
                swift_release();
                unint64_t v635 = v703;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v783, v635, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[42] = 32;
                swift_release();
                v631[43] = 8;
                swift_release();
                unint64_t v636 = v700;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v653, v636, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[52] = 0;
                swift_release();
                v631[53] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v636) = v654;
                LODWORD(v789) = v654 ^ 1;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[58] = 0;
                swift_release();
                v631[59] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v636;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[64] = 0;
                swift_release();
                v631[65] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v655;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[70] = 0;
                swift_release();
                v631[71] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v656;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[76] = 0;
                swift_release();
                v631[77] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v657;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[82] = 0;
                swift_release();
                v631[83] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v658;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[88] = 0;
                swift_release();
                v631[89] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v659;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[94] = 0;
                swift_release();
                v631[95] = 4;
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v789) = v660;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v631[100] = 32;
                swift_release();
                v631[101] = 8;
                swift_release();
                unint64_t v637 = v699;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v649, v637, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[110] = 32;
                swift_release();
                v631[111] = 8;
                swift_release();
                unint64_t v638 = v698;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v648, v638, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[120] = 32;
                swift_release();
                v631[121] = 8;
                swift_release();
                unint64_t v639 = v697;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v647, v639, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v631[130] = 32;
                swift_release();
                v631[131] = 8;
                swift_release();
                unint64_t v640 = v661;
                swift_bridgeObjectRetain();
                uint64_t v789 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v702, v640, &v792);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease_n();
                v641 = v695;
                _os_log_impl(&dword_25C27E000, v695, (os_log_type_t)v646, "SGREMaterial summary: %s\nname: %s\noperationalHash: %s\nlightingModel: %s\nblending: %s\napplyPostProcessTonemap: %{BOOL}d\nmatchUnlitColor: %{BOOL}d\nhasPremultipliedAlpha: %{BOOL}d\nhasLightSpill: %{BOOL}d\nhasBackgroundBlur: %{BOOL}d\nhasSurfaceShaderUniforms: %{BOOL}d\nhasGeometryModifierUniforms: %{BOOL}d\nhasGeometryModifierOffsetInput: %{BOOL}d\nuniforms:\n%s\ntextureMapping:\n"
                  "%s\n"
                  "custom uniform struct:\n"
                  "%s\n"
                  "geomProp mapping:\n"
                  "%s\n"
                  "--",
                  v631,
                  0x8Cu);
                uint64_t v642 = v645;
                swift_arrayDestroy();
                MEMORY[0x261185880](v642, -1, -1);
                MEMORY[0x261185880](v631, -1, -1);

                swift_bridgeObjectRelease();
                outlined consume of TopologicalSort.Element?(v765, v763, v764);
              }
              else
              {

                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined consume of TopologicalSort.Element?(v765, v763, v764);

                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
              }
              (*(void (**)(char *, uint64_t))(v736 + 8))(v735, v737);
              goto LABEL_272;
            }
LABEL_276:
            swift_once();
            goto LABEL_268;
          }
          uint64_t v456 = v455;
          uint64_t v791 = specialized ContiguousArray.init()();
          specialized ContiguousArray.reserveCapacity(_:)(v456);
          if ((v456 & 0x8000000000000000) == 0)
          {
            char v457 = specialized Array._hoistableIsNativeTypeChecked()(v788);
            uint64_t v458 = 0;
            do
            {
              if (v457) {
                unint64_t v459 = (char *)v788[v458 + 4];
              }
              else {
                unint64_t v459 = (char *)MEMORY[0x2611848A0](v458, v788);
              }
              uint64_t v460 = v459;
              ++v458;
              uint64_t v789 = 9;
              unint64_t v790 = 0xE100000000000000;
              uint64_t v461 = *(void *)&v459[OBJC_IVAR___SGGeometryPropertyDefinition_name];
              uint64_t v462 = *(void **)&v459[OBJC_IVAR___SGGeometryPropertyDefinition_name + 8];
              swift_bridgeObjectRetain();
              v463._uint64_t countAndFlagsBits = v461;
              v463._char object = v462;
              String.append(_:)(v463);
              swift_bridgeObjectRelease();
              v464._uint64_t countAndFlagsBits = 540945696;
              v464._char object = (void *)0xE400000000000000;
              String.append(_:)(v464);
              uint64_t v465 = *(void *)&v460[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
              uint64_t v466 = *(void **)&v460[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8];
              swift_bridgeObjectRetain();
              v467._uint64_t countAndFlagsBits = v465;
              v467._char object = v466;
              String.append(_:)(v467);

              swift_bridgeObjectRelease();
              uint64_t v468 = v789;
              uint64_t v469 = v790;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              uint64_t v470 = *(void *)(v791 + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v470);
              uint64_t v471 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v470, v468, v469);
              destructiveProjectEnumData for NodePersonality.ShaderType(v471);
            }
            while (v456 != v458);
            swift_bridgeObjectRelease();
            uint64_t v472 = v791;
            goto LABEL_266;
          }
          goto LABEL_278;
        }

        swift_bridgeObjectRelease();
        swift_release();

LABEL_203:
        outlined consume of TopologicalSort.Element?(v765, v763, v764);
LABEL_204:
        swift_bridgeObjectRelease();
LABEL_205:

        uint64_t v362 = v786;
        $defer #1 () in SGREMaterial.init(graph:configuration:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v776 + 8))(v362, v775);
        LODWORD(v787) = 1;
LABEL_154:
        uint64_t v91 = 1;
        int v92 = 1;
        int v93 = 1;
        int v94 = 1;
        int v95 = 1;
LABEL_53:
        type metadata accessor for SGError();
        long long v173 = v788;
        os_signpost_id_t v174 = v788;
        SGError.__allocating_init(_:)(v173);
        swift_willThrow();

        long long v175 = v784;
        if (v787)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v91) {
            goto LABEL_55;
          }
LABEL_64:
          swift_bridgeObjectRelease();
          if (!v93) {
            goto LABEL_65;
          }
LABEL_56:
          swift_bridgeObjectRelease();
          if (!v92) {
            goto LABEL_57;
          }
LABEL_66:

          if (!v93) {
            goto LABEL_67;
          }
LABEL_58:
          swift_bridgeObjectRelease();
          if (!v94) {
            goto LABEL_59;
          }
LABEL_68:

          if (!v95) {
            goto LABEL_61;
          }
LABEL_60:
          (*(void (**)(char *, uint64_t))(v772 + 8))(&v175[OBJC_IVAR___SGREMaterial_edgeDigest], v773);
          goto LABEL_61;
        }
        if (v91) {
          goto LABEL_64;
        }
LABEL_55:
        if (v93) {
          goto LABEL_56;
        }
LABEL_65:
        if (v92) {
          goto LABEL_66;
        }
LABEL_57:
        if (v93) {
          goto LABEL_58;
        }
LABEL_67:
        if (v94) {
          goto LABEL_68;
        }
LABEL_59:
        if (v95) {
          goto LABEL_60;
        }
LABEL_61:

        swift_deallocPartialClassInstance();
        return v91;
    }
  }
}

uint64_t $defer #1 () in SGREMaterial.init(graph:configuration:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v19 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v11 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v12 = v19;
    if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v2, v0) == *MEMORY[0x263F90238])
    {
      uint64_t v13 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v2, v0);
      uint64_t v13 = "";
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v10, v11, v16, "transform", v13, v15, 2u);
    MEMORY[0x261185880](v15, -1, -1);

    uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v9, v3);
    return ((uint64_t (*)(char *, uint64_t))v17)(v7, v3);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

void closure #1 in SGREMaterial.init(graph:configuration:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (Swift::UInt *)(*a1 + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  if (specialized Set.contains(_:)(*v6, a2))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xD00000000000001CLL;
    unint64_t v26 = 0x800000025C422F70;
    v7._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    swift_bridgeObjectRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v24 = a3;
      os_signpost_type_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v25 = v12;
      *(_DWORD *)os_signpost_type_t v11 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000025C422F70, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v9, v10, "%s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v12, -1, -1);
      uint64_t v13 = v11;
      a3 = v24;
      MEMORY[0x261185880](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v14 = *(void **)(a3 + OBJC_IVAR___SGGraph_argumentsNode);
    uint64_t v15 = (void *)MEMORY[0x261183E60](*(void *)(v5 + OBJC_IVAR___SGInput_name), *(void *)(v5 + OBJC_IVAR___SGInput_name + 8));
    id v16 = objc_msgSend(v14, sel_outputNamed_, v15);

    if (v16)
    {
      unint64_t v17 = specialized SGGraph.edges(from:)((uint64_t)v16);
      if (v17 >> 62) {
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v18)
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0xE000000000000000;
        _StringGuts.grow(_:)(50);
        swift_bridgeObjectRelease();
        uint64_t v25 = 0xD00000000000001CLL;
        unint64_t v26 = 0x800000025C422F70;
        v19._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._uint64_t countAndFlagsBits = 0xD000000000000014;
        v20._char object = (void *)0x800000025C422F90;
        String.append(_:)(v20);
        uint64_t v21 = v25;
        unint64_t v22 = v26;
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(void *)uint64_t v23 = v21;
        *(void *)(v23 + 8) = v22;
        *(unsigned char *)(v23 + 16) = 7;
        swift_willThrow();
      }
    }
  }
}

uint64_t closure #2 in SGREMaterial.init(graph:configuration:)(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + OBJC_IVAR___SGNode_data);
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR___SGNode_data + 80) <= 0x3Fu && v1[5] == 2)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v4 = v2;
    *(void *)(v4 + 8) = v3;
    *(unsigned char *)(v4 + 16) = 0;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + OBJC_IVAR___SGNode_inputs);
    unint64_t v38 = MEMORY[0x263F8EE78];
    if (v6 >> 62) {
      goto LABEL_18;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v8 = 4;
      while (1)
      {
        uint64_t v9 = (v6 & 0xC000000000000001) != 0
           ? (char *)MEMORY[0x2611848A0](v8 - 4, v6)
           : (char *)*(id *)(v6 + 8 * v8);
        os_log_type_t v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        uint64_t v12 = &v9[OBJC_IVAR___SGInput_edge];
        swift_beginAccess();
        uint64_t v13 = MEMORY[0x261185960](v12);

        if (v13)
        {
          MEMORY[0x261184120]();
          if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v8;
        if (v11 == v7)
        {
          swift_bridgeObjectRelease();
          unint64_t v14 = v38;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain_n();
    }
    swift_bridgeObjectRelease();
    unint64_t v14 = MEMORY[0x263F8EE78];
LABEL_20:
    swift_bridgeObjectRelease();
    if (v14 >> 62) {
      goto LABEL_38;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v39 = v14 & 0xC000000000000001;
      uint64_t v16 = 4;
      unint64_t v37 = v14;
      while (1)
      {
        unint64_t v17 = v39 ? (char *)MEMORY[0x2611848A0](v16 - 4, v14) : (char *)*(id *)(v14 + 8 * v16);
        uint64_t v18 = v17;
        uint64_t v19 = v16 - 3;
        if (__OFADD__(v16 - 4, 1)) {
          break;
        }
        Swift::String v20 = (uint64_t *)(*(void *)&v17[OBJC_IVAR___SGEdge_from] + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        uint64_t v21 = *v20;
        unint64_t v22 = *v20 - 32;
        if (v22 <= 0x18 && ((0x1F680DBu >> v22) & 1) != 0) {
          uint64_t v21 = qword_25C41A468[v22];
        }
        uint64_t v23 = (uint64_t *)(*(void *)&v18[OBJC_IVAR___SGEdge_to] + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        uint64_t v24 = *v23;
        unint64_t v25 = *v23 - 32;
        if (v25 <= 0x18 && ((0x1F680DBu >> v25) & 1) != 0) {
          uint64_t v24 = qword_25C41A468[v25];
        }
        specialized SGDataType.materialXDataType.getter(v21);
        swift_retain();
        specialized SGDataType.materialXDataType.getter(v24);
        if ((MaterialXDataType.isEqual(to:)() & 1) == 0)
        {
          swift_retain();
          _StringGuts.grow(_:)(18);
          unint64_t v26 = SGDataType.stringValue.getter();
          uint64_t v28 = v27;
          swift_bridgeObjectRelease();
          v29._uint64_t countAndFlagsBits = 10272;
          v29._char object = (void *)0xE200000000000000;
          String.append(_:)(v29);
          v30._uint64_t countAndFlagsBits = MaterialXDataType.description.getter();
          String.append(_:)(v30);
          swift_bridgeObjectRelease();
          v31._uint64_t countAndFlagsBits = 0x203D212029;
          v31._char object = (void *)0xE500000000000000;
          String.append(_:)(v31);
          v32._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          v33._uint64_t countAndFlagsBits = 10272;
          v33._char object = (void *)0xE200000000000000;
          String.append(_:)(v33);
          v34._uint64_t countAndFlagsBits = MaterialXDataType.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          v35._uint64_t countAndFlagsBits = 41;
          v35._char object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          lazy protocol witness table accessor for type APIError and conformance APIError();
          swift_allocError();
          *(void *)uint64_t v36 = v26;
          *(void *)(v36 + 8) = v28;
          *(unsigned char *)(v36 + 16) = 5;
          swift_willThrow();
          swift_bridgeObjectRelease_n();

          swift_release();
          return swift_release();
        }

        swift_release();
        ++v16;
        unint64_t v14 = v37;
        if (v19 == v15) {
          return swift_bridgeObjectRelease_n();
        }
      }
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRelease_n();
  }
}

uint64_t SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(a1, a5);
}

uint64_t edgeListDigest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  v18[5] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for SHA512();
  v18[0] = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  BidirectionalCollection<>.joined(separator:)();
  static String.Encoding.utf8.getter();
  uint64_t v10 = String.data(using:allowLossyConversion:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v13 = xmmword_25C41A130;
    *(unsigned char *)(v13 + 16) = 21;
    return swift_willThrow();
  }
  else
  {
    lazy protocol witness table accessor for type SHA512 and conformance SHA512();
    dispatch thunk of HashFunction.init()();
    switch(v12 >> 62)
    {
      case 1uLL:
        if (v10 >> 32 < (int)v10) {
          __break(1u);
        }
        outlined copy of Data._Representation(v10, v12);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v10, v10 >> 32);
        goto LABEL_11;
      case 2uLL:
        uint64_t v15 = *(void *)(v10 + 16);
        uint64_t v16 = *(void *)(v10 + 24);
        outlined copy of Data?(v10, v12);
        swift_retain();
        swift_retain();
        uint64_t v17 = v18[2];
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v15, v16);
        if (v17)
        {
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x25C2CD2B4);
        }
        swift_release();
        swift_release();
LABEL_11:
        outlined consume of Data?(v10, v12);
        goto LABEL_12;
      case 3uLL:
        memset(&v18[3], 0, 14);
        goto LABEL_8;
      default:
        v18[3] = v10;
        LOWORD(v18[4]) = v12;
        BYTE2(v18[4]) = BYTE2(v12);
        BYTE3(v18[4]) = BYTE3(v12);
        BYTE4(v18[4]) = BYTE4(v12);
        BYTE5(v18[4]) = BYTE5(v12);
LABEL_8:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        outlined consume of Data?(v10, v12);
LABEL_12:
        dispatch thunk of HashFunction.finalize()();
        (*(void (**)(char *, uint64_t))(v18[0] + 8))(v5, v3);
        uint64_t result = outlined consume of Data?(v10, v12);
        break;
    }
  }
  return result;
}

id SGREMaterial.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SGREMaterial.init()()
{
}

uint64_t closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + OBJC_IVAR___SGNode_inputs);
  unint64_t v11 = MEMORY[0x263F8EE78];
  if (v1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      uint64_t v4 = (v1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x2611848A0](v3 - 4, v1)
         : (char *)*(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v7 = &v4[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      uint64_t v8 = MEMORY[0x261185960](v7);

      if (v8)
      {
        MEMORY[0x261184120]();
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v3;
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        unint64_t v9 = v11;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain_n();
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = MEMORY[0x263F8EE78];
LABEL_17:
  swift_bridgeObjectRelease();
  return specialized Array.append<A>(contentsOf:)(v9);
}

void closure #5 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, Swift::OpaquePointer a3@<X2>, uint64_t *a4@<X3>, Swift::String *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = OBJC_IVAR___SGEdge_from;
  uint64_t v11 = *(void *)(*a1 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x261185960](v11);
  if (!v12) {
    goto LABEL_9;
  }
  uint64_t v13 = (void *)v12;
  uint64_t v49 = OBJC_IVAR___SGEdge_to;
  uint64_t v14 = *(void *)(v9 + OBJC_IVAR___SGEdge_to) + OBJC_IVAR___SGInput_node;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x261185960](v14);
  if (!v15)
  {

LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_25C418EE0;
    *(void *)(v40 + 32) = SGEdge.debugDescription.getter();
    *(void *)(v40 + 40) = v41;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v38 = swift_allocError();
    *(void *)uint64_t v42 = v40;
    *(void *)(v42 + 8) = 0;
    *(unsigned char *)(v42 + 16) = 8;
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v16 = (void *)v15;
  if (*(void *)(*(void *)a2 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if (v17)
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
      if (v18)
      {
        outlined init with take of NodeData((uint64_t)v13 + OBJC_IVAR___SGNode_data, (uint64_t)v48);
        outlined retain of NodeData((uint64_t)v48, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of NodeData);
        Swift::String v19 = NodeData.operationalDescription(replacements:)(a3);
        outlined retain of NodeData((uint64_t)v48, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of NodeData);
        Swift::String v20 = (uint64_t *)(*(void *)(v9 + v10) + OBJC_IVAR___SGOutput_name);
        uint64_t v44 = *v20;
        uint64_t v43 = (void *)v20[1];
        outlined init with take of NodeData((uint64_t)v16 + OBJC_IVAR___SGNode_data, (uint64_t)v47);
        swift_bridgeObjectRetain();
        outlined retain of NodeData((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of NodeData);
        Swift::String v21 = NodeData.operationalDescription(replacements:)(a3);
        outlined retain of NodeData((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of NodeData);
        unint64_t v22 = (uint64_t *)(*(void *)(v9 + v49) + OBJC_IVAR___SGInput_name);
        uint64_t v45 = (void *)v22[1];
        uint64_t v46 = *v22;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 58;
        v23._char object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = 58;
        v25._char object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        swift_beginAccess();
        v26._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 58;
        v27._char object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        v28._uint64_t countAndFlagsBits = v44;
        v28._char object = v43;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 124;
        v29._char object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 58;
        v30._char object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 58;
        v32._char object = (void *)0xE100000000000000;
        String.append(_:)(v32);
        swift_beginAccess();
        v33._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 58;
        v34._char object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        v35._uint64_t countAndFlagsBits = v46;
        v35._char object = v45;
        String.append(_:)(v35);

        swift_bridgeObjectRelease();
        *a5 = v19;
        return;
      }
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_25C418EE0;
  *(void *)(v36 + 32) = SGEdge.debugDescription.getter();
  *(void *)(v36 + 40) = v37;
  lazy protocol witness table accessor for type APIError and conformance APIError();
  uint64_t v38 = swift_allocError();
  *(void *)uint64_t v39 = v36;
  *(void *)(v39 + 8) = 0;
  *(unsigned char *)(v39 + 16) = 8;
  swift_willThrow();

LABEL_10:
  *a4 = v38;
}

uint64_t SGREMaterial.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(a1, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  if (!v10)
  {
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v6 = 0;
    return v6 & 1;
  }
  if (v8 == v1)
  {

    char v6 = 1;
    return v6 & 1;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v3 = *(id *)&v8[OBJC_IVAR___SGREMaterial_graph];
  char v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0)
  {

    goto LABEL_9;
  }
  id v5 = *(id *)&v8[OBJC_IVAR___SGREMaterial_config];
  char v6 = static NSObject.== infix(_:_:)();

  return v6 & 1;
}

void *SGREMaterialCompilationOptions.workingColorSpace.getter()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace);
  id v2 = v1;
  return v1;
}

uint64_t SGREMaterialCompilationOptions.enableFailedCompileMaterial.getter()
{
  unint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial);
  swift_beginAccess();
  return *v1;
}

uint64_t SGREMaterialCompilationOptions.enableFailedCompileMaterial.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*SGREMaterialCompilationOptions.enableFailedCompileMaterial.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGREMaterialCompilationOptions.useTier1Fallback(with:)(void *a1)
{
  if (!objc_msgSend(a1, sel_argumentBuffersSupport)
    || (*(unsigned char *)(v1 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) & 1) != 0)
  {
    return 1;
  }
  if (one-time initialization token for tier1SupportOverrideEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static DebugConfig.tier1SupportOverrideEnabled;
}

id SGREMaterialCompilationOptions.__allocating_init(workingColorSpace:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial] = 1;
  v3[OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport] = 0;
  *(void *)&v3[OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id SGREMaterialCompilationOptions.init(workingColorSpace:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial] = 1;
  v1[OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport] = 0;
  *(void *)&v1[OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Void __swiftcall SGREMaterialCompilationOptions.forceTier1Fallback_ONLYFORTESTS()()
{
  *(unsigned char *)(v0 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) = 1;
}

void SGREMaterialCompilationOptions.init()()
{
}

void *static ShaderGraphService.builtInGeometryPropertyNames.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint8_t *static ShaderGraphService.createMaterial(from:config:)(uint8_t *a1, void *a2)
{
  return specialized static ShaderGraphService.createMaterial(from:config:)(a1, a2);
}

uint64_t static ShaderGraphService.archiveMaterial(_:)(void *a1)
{
  return specialized static ShaderGraphService.archiveMaterial(_:)(a1);
}

uint8_t *static ShaderGraphService.createMaterial(from:)(uint8_t *a1)
{
  return specialized static ShaderGraphService.createMaterial(from:)(a1);
}

char *static ShaderGraphService.createMaterialFromArchive(data:)(uint64_t a1, unint64_t a2)
{
  return specialized static ShaderGraphService.createMaterialFromArchive(data:)(a1, a2);
}

NSObject *static ShaderGraphService.createLibrary(from:device:options:)(unsigned __int8 *a1, char *a2, uint64_t a3)
{
  return specialized static ShaderGraphService.createLibrary(from:device:options:)(a1, a2, a3);
}

id buildFailureMaterial(usesSurfaceUniforms:usesGeometryUniforms:device:)(char a1, char a2, void *a3)
{
  v69[1] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for SGGraph();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v7 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v69[0] = 0;
  id v8 = objc_msgSend(a3, sel_newDefaultLibraryWithBundle_error_, v7, v69);
  id v9 = v69[0];
  if (!v8)
  {
    id v16 = v69[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_17:

    return v7;
  }
  uint64_t v10 = v8;
  char v67 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  if (a1)
  {
    *(_OWORD *)(v11 + 16) = xmmword_25C41A140;
    id v12 = objc_allocWithZone(MEMORY[0x263F128E0]);
    id v13 = v9;
    *(void *)(v11 + 32) = objc_msgSend(v12, sel_initWithArgumentIndex_, 0);
    *(void *)(v11 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128E0]), sel_initWithArgumentIndex_, 1);
    v69[0] = (id)v11;
    specialized Array._endMutation()();
    unint64_t v14 = 0xD000000000000029;
    uint64_t v15 = "SGFailedMaterialSurfaceShaderCustomParams";
  }
  else
  {
    *(_OWORD *)(v11 + 16) = xmmword_25C4195A0;
    id v17 = objc_allocWithZone(MEMORY[0x263F128E0]);
    id v18 = v9;
    *(void *)(v11 + 32) = objc_msgSend(v17, sel_initWithArgumentIndex_, 0);
    v69[0] = (id)v11;
    specialized Array._endMutation()();
    unint64_t v14 = 0xD00000000000001DLL;
    uint64_t v15 = "SGFailedMaterialSurfaceShader";
  }
  unint64_t v19 = (unint64_t)(v15 - 32) | 0x8000000000000000;
  Swift::String v20 = (void *)MEMORY[0x261183E60](v14, v19);
  Swift::String v21 = v10;
  id v22 = objc_msgSend(v10, sel_newFunctionWithName_, v20);

  if (!v22)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v36 = xmmword_25C41A130;
    *(unsigned char *)(v36 + 16) = 21;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  uint64_t v66 = v7;
  id v63 = a3;
  id v23 = objc_allocWithZone(MEMORY[0x263F128D0]);
  Swift::String v24 = (void *)MEMORY[0x261183E60](v14, v19);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLFunctionStitchingNode);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for MTLFunctionStitchingFunctionNode);
  Class v26 = Array._bridgeToObjectiveC()().super.isa;
  id v27 = objc_msgSend(v23, sel_initWithName_arguments_controlDependencies_, v24, isa, v26);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_25C4195A0;
  *(void *)(v28 + 32) = v27;
  v69[0] = (id)v28;
  specialized Array._endMutation()();
  id v29 = objc_allocWithZone(MEMORY[0x263F128D8]);
  id v65 = v27;
  Swift::String v30 = (void *)MEMORY[0x261183E60](0xD000000000000018, 0x800000025C421740);
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MTLFunctionStitchingAttribute);
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  id v64 = objc_msgSend(v29, sel_initWithFunctionName_nodes_outputNode_attributes_, v30, v31, 0, v32);

  uint64_t v33 = swift_allocObject();
  if (v67)
  {
    *(_OWORD *)(v33 + 16) = xmmword_25C41A140;
    *(void *)(v33 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128E0]), sel_initWithArgumentIndex_, 0);
    *(void *)(v33 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128E0]), sel_initWithArgumentIndex_, 1);
    v69[0] = (id)v33;
    specialized Array._endMutation()();
    unint64_t v34 = 0xD00000000000002CLL;
    Swift::String v35 = "SGFailedMaterialGeometryModifierCustomParams";
  }
  else
  {
    *(_OWORD *)(v33 + 16) = xmmword_25C4195A0;
    *(void *)(v33 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128E0]), sel_initWithArgumentIndex_, 0);
    v69[0] = (id)v33;
    specialized Array._endMutation()();
    unint64_t v34 = 0xD000000000000020;
    Swift::String v35 = "SGFailedMaterialGeometryModifier";
  }
  unint64_t v37 = (unint64_t)(v35 - 32) | 0x8000000000000000;
  uint64_t v38 = (void *)MEMORY[0x261183E60](v34, v37);
  id v39 = objc_msgSend(v21, sel_newFunctionWithName_, v38);

  if (!v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v60 = xmmword_25C41A130;
    *(unsigned char *)(v60 + 16) = 21;
    swift_willThrow();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
LABEL_16:
    id v7 = v65;
    goto LABEL_17;
  }
  id v40 = objc_allocWithZone(MEMORY[0x263F128D0]);
  uint64_t v41 = (void *)MEMORY[0x261183E60](v34, v37);
  swift_bridgeObjectRelease();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  id v44 = objc_msgSend(v40, sel_initWithName_arguments_controlDependencies_, v41, v42, v43);

  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_25C4195A0;
  *(void *)(v45 + 32) = v44;
  v69[0] = (id)v45;
  specialized Array._endMutation()();
  id v46 = objc_allocWithZone(MEMORY[0x263F128D8]);
  id v68 = v44;
  uint64_t v47 = (void *)MEMORY[0x261183E60](0xD00000000000001BLL, 0x800000025C4216C0);
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v49 = Array._bridgeToObjectiveC()().super.isa;
  id v50 = objc_msgSend(v46, sel_initWithFunctionName_nodes_outputNode_attributes_, v47, v48, 0, v49);

  id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A30]), sel_init);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_25C41A140;
  *(void *)(v52 + 32) = v22;
  *(void *)(v52 + 40) = v39;
  v69[0] = (id)v52;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MTLFunction);
  Class v53 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_setFunctions_, v53);

  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_25C41A140;
  *(void *)(v54 + 32) = v64;
  *(void *)(v54 + 40) = v50;
  v69[0] = (id)v54;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for MTLFunctionStitchingGraph);
  id v55 = v64;
  id v56 = v50;
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_setFunctionGraphs_, v57);

  v69[0] = 0;
  id v58 = objc_msgSend(v63, sel_newLibraryWithStitchedDescriptor_error_, v51, v69);
  if (!v58)
  {
    id v61 = v69[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    goto LABEL_16;
  }
  id v7 = v58;
  id v59 = v69[0];
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v7;
}

NSObject *static ShaderGraphService.createLibrary(from:device:)(unsigned __int8 *a1, char *a2)
{
  char v4 = (objc_class *)type metadata accessor for SGREMaterialCompilationOptions();
  objc_super v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial] = 1;
  v5[OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport] = 0;
  *(void *)&v5[OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace] = 0;
  v9.receiver = v5;
  v9.super_class = v4;
  id v6 = objc_msgSendSuper2(&v9, sel_init);
  id v7 = specialized static ShaderGraphService.createLibrary(from:device:options:)(a1, a2, (uint64_t)v6);

  return v7;
}

void *NSObject.inputNamed(_:)(uint64_t a1, unint64_t a2)
{
  v5._uint64_t countAndFlagsBits = 1701667182;
  v5._char object = (void *)0xE400000000000000;
  validate(_:named:)(*(Swift::String *)&a1, v5);
  if (v6)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    id v9 = v6;
    id v10 = v6;
    uint64_t v11 = Logger.logObject.getter();
    if (os_log_type_enabled(v11, v8))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v36[0] = v13;
      *(_DWORD *)id v12 = 136315138;
      id v14 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25C27E000, v11, v8, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v13, -1, -1);
      MEMORY[0x261185880](v12, -1, -1);

      return 0;
    }

LABEL_10:
    return 0;
  }
  uint64_t v17 = swift_dynamicCastObjCProtocolConditional();
  if (!v17)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v25))
    {
      Class v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v26 = 0;
      _os_log_impl(&dword_25C27E000, v11, v25, "inputNamed called on an object that isn't ObjCHasIO", v26, 2u);
      MEMORY[0x261185880](v26, -1, -1);
    }
    goto LABEL_10;
  }
  id v18 = (void *)v17;
  id v19 = v2;
  id v20 = objc_msgSend(v18, sel_inputs);
  type metadata accessor for SGInput();
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  id v22 = specialized Sequence.first(where:)(v21, a1, a2, &OBJC_IVAR___SGInput_name);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v22)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)logger);
    id v28 = v19;
    swift_bridgeObjectRetain_n();
    id v29 = v28;
    Swift::String v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      unint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v36[0] = v35;
      *(_DWORD *)uint64_t v32 = 138412546;
      id v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v34 = v29;

      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v30, v31, "WARNING: %@ has no input named %s", (uint8_t *)v32, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261185880](v35, -1, -1);
      MEMORY[0x261185880](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }

  return v22;
}

id @objc NSObject.inputNamed(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc NSObject.inputNamed(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))NSObject.inputNamed(_:));
}

void *NSObject.outputNamed(_:)(uint64_t a1, unint64_t a2)
{
  v5._uint64_t countAndFlagsBits = 1701667182;
  v5._char object = (void *)0xE400000000000000;
  validate(_:named:)(*(Swift::String *)&a1, v5);
  if (v6)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    id v9 = v6;
    id v10 = v6;
    uint64_t v11 = Logger.logObject.getter();
    if (os_log_type_enabled(v11, v8))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v36[0] = v13;
      *(_DWORD *)id v12 = 136315138;
      id v14 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25C27E000, v11, v8, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v13, -1, -1);
      MEMORY[0x261185880](v12, -1, -1);

      return 0;
    }

LABEL_10:
    return 0;
  }
  uint64_t v17 = swift_dynamicCastObjCProtocolConditional();
  if (!v17)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v25))
    {
      Class v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v26 = 0;
      _os_log_impl(&dword_25C27E000, v11, v25, "outputNamed called on an object that isn't ObjCHasIO", v26, 2u);
      MEMORY[0x261185880](v26, -1, -1);
    }
    goto LABEL_10;
  }
  id v18 = (void *)v17;
  id v19 = v2;
  id v20 = objc_msgSend(v18, sel_outputs);
  type metadata accessor for SGOutput();
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  id v22 = specialized Sequence.first(where:)(v21, a1, a2, &OBJC_IVAR___SGOutput_name);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v22)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)logger);
    id v28 = v19;
    swift_bridgeObjectRetain_n();
    id v29 = v28;
    Swift::String v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      unint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v36[0] = v35;
      *(_DWORD *)uint64_t v32 = 138412546;
      id v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v34 = v29;

      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v30, v31, "WARNING: %@ has no output named %s", (uint8_t *)v32, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261185880](v35, -1, -1);
      MEMORY[0x261185880](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }

  return v22;
}

id @objc NSObject.outputNamed(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc NSObject.inputNamed(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))NSObject.outputNamed(_:));
}

id @objc NSObject.inputNamed(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  id v10 = (void *)a4(v6, v8);

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t default argument 1 of OSSignpostIntervalState.init(id:isOpen:)()
{
  return 1;
}

void closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_25C27E000, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  uint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      id v9 = (char *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        id v12 = v9 + 32;
        os_signpost_id_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>);
      id v9 = (char *)swift_allocObject();
      id v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for SGEdge);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for SGNode);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6) {
      return MEMORY[0x263F8EE78];
    }
    if (v6 <= 0)
    {
      id v9 = (void *)MEMORY[0x263F8EE78];
      if (v5 != a3)
      {
LABEL_5:
        if (v6 < 0) {
          goto LABEL_17;
        }
        unint64_t v11 = a2 + 56 * a3;
        if (v11 < (unint64_t)&v9[7 * v6 + 4] && (unint64_t)(v9 + 4) < v11 + 56 * v6) {
          goto LABEL_17;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      id v9 = (void *)swift_allocObject();
      size_t v10 = _swift_stdlib_malloc_size(v9);
      v9[2] = v6;
      v9[3] = 2 * ((uint64_t)(v10 - 32) / 56);
      if (v5 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void))
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v10 = v6;
    if (v6 <= 0)
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0) {
          goto LABEL_19;
        }
        unint64_t v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8) {
          goto LABEL_19;
        }
        a5(0);
        swift_arrayInitWithCopy();
        return (uint64_t)v11;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  id v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : InputSpec].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  id v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : InputSpec].Iterator._Variant();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  id v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : InputSpec].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 - 25;
  }
  v7[2] = v3;
  _OWORD v7[3] = (2 * (v9 >> 3)) | 1;
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v12, v7 + 4, v3, a1, a2, a3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  if (v10 != (void *)v3)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v7;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v5;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA512();
      lazy protocol witness table accessor for type SHA512 and conformance SHA512();
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static BuiltInDefinition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 24), *(void **)(a2 + 24)) & 1) == 0)
    {
      return 0;
    }
    outlined init with take of MaterialXAvailability(a1 + 32, (uint64_t)v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    outlined init with take of MaterialXAvailability((uint64_t)v9, (uint64_t)&v10);
    if (v11 == 2)
    {
      if (v7 != 2) {
        return 0;
      }
    }
    else
    {
      if (v11 == 1) {
        return v7 == 1;
      }
      if ((unint64_t)(v7 - 1) < 2) {
        return 0;
      }
      if (v11) {
        return v7 && (v10 == v8 && v11 == v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      if (v7)
      {
        outlined release of MaterialXAvailability(v9);
        return 0;
      }
    }
    return 1;
  }
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v9 = 4;
    while (1)
    {
      uint64_t v10 = (a1 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x2611848A0](v9 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      uint64_t v13 = &v10[*a4];
      BOOL v14 = *(void *)v13 == a2 && *((void *)v13 + 1) == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v11;
      }

      ++v9;
      if (v12 == v8) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v26 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_33;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = v3;
    unint64_t v5 = 0;
    uint64_t v22 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v23 = v3 & 0xC000000000000001;
    unint64_t v21 = (void *)(v3 + 32);
    uint64_t v24 = a2 + 56;
    while (1)
    {
      if (v23)
      {
        int64_t v6 = (char *)MEMORY[0x2611848A0](v5, v20);
        goto LABEL_9;
      }
      if (v5 >= *(void *)(v22 + 16)) {
        break;
      }
      int64_t v6 = (char *)(id)v21[v5];
LABEL_9:
      uint64_t v7 = v6;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_32;
      }
      if (!*(void *)(a2 + 16)) {
        goto LABEL_4;
      }
      uint64_t v10 = *(void *)&v6[OBJC_IVAR___SGInput_name];
      uint64_t v9 = *(void *)&v6[OBJC_IVAR___SGInput_name + 8];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      unint64_t v3 = (unint64_t)&v25;
      Swift::Int v11 = Hasher._finalize()();
      uint64_t v12 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v13 = v11 & ~v12;
      if (((*(void *)(v24 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_28;
      }
      unint64_t v3 = *(void *)(a2 + 48);
      BOOL v14 = (void *)(v3 + 16 * v13);
      BOOL v15 = *v14 == v10 && v14[1] == v9;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v16 = ~v12;
        while (1)
        {
          unint64_t v13 = (v13 + 1) & v16;
          if (((*(void *)(v24 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            break;
          }
          uint64_t v17 = (void *)(v3 + 16 * v13);
          BOOL v18 = *v17 == v10 && v17[1] == v9;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_17;
          }
        }
LABEL_28:

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      unint64_t v3 = (unint64_t)&v7[OBJC_IVAR___SGInput_type];
      swift_beginAccess();
      if (*(void *)v3 == 41 || *(void *)v3 == 44)
      {
        unint64_t v3 = (unint64_t)&v26;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
LABEL_4:
      }
LABEL_5:
      if (v5 == i) {
        return v26;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    ;
  }
  return MEMORY[0x263F8EE78];
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  void *v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  void *v23;
  BOOL v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  unint64_t v3 = a1;
  uint64_t v32 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_32;
  }
  BOOL v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      uint64_t v26 = v3;
      unint64_t v5 = 0;
      int64_t v6 = v3 & 0xC000000000000001;
      uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8;
      uint64_t v8 = (void *)(v3 + 32);
      Swift::String v30 = v4;
      os_log_type_t v31 = a2 + 56;
      id v28 = v3 & 0xFFFFFFFFFFFFFF8;
      id v29 = v3 & 0xC000000000000001;
      uint64_t v27 = (void *)(v3 + 32);
      while (v6)
      {
        uint64_t v9 = (char *)MEMORY[0x2611848A0](v5, v26);
LABEL_10:
        uint64_t v10 = v9;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_31;
        }
        uint64_t v12 = &v9[OBJC_IVAR___SGNode_data];
        if (v9[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu && *(void *)(a2 + 16))
        {
          BOOL v14 = *(void *)v12;
          unint64_t v13 = *((void *)v12 + 1);
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          BOOL v15 = Hasher._finalize()();
          uint64_t v16 = -1 << *(unsigned char *)(a2 + 32);
          uint64_t v17 = v15 & ~v16;
          if ((*(void *)(v31 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
          {
            unint64_t v3 = *(void *)(a2 + 48);
            BOOL v18 = (void *)(v3 + 16 * v17);
            id v19 = *v18 == v14 && v13 == v18[1];
            if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_19:

              swift_bridgeObjectRelease();
              int64_t v6 = v29;
              BOOL v4 = v30;
              uint64_t v8 = v27;
              uint64_t v7 = v28;
              goto LABEL_6;
            }
            unint64_t v20 = ~v16;
            for (uint64_t i = v17 + 1; ; uint64_t i = v22 + 1)
            {
              uint64_t v22 = i & v20;
              if (((*(void *)(v31 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
                break;
              }
              unint64_t v23 = (void *)(v3 + 16 * v22);
              uint64_t v24 = *v23 == v14 && v13 == v23[1];
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_19;
              }
            }
          }
          swift_bridgeObjectRelease();
          int64_t v6 = v29;
          BOOL v4 = v30;
          uint64_t v8 = v27;
          uint64_t v7 = v28;
        }
        unint64_t v3 = (unint64_t)&v32;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v5 == v4) {
          return v32;
        }
      }
      if (v5 < *(void *)(v7 + 16)) {
        break;
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      BOOL v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return MEMORY[0x263F8EE78];
      }
    }
    uint64_t v9 = (char *)(id)v8[v5];
    goto LABEL_10;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized BuiltInDefinition.init(nodeDef:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v2 = a1;
  uint64_t v28 = a1[1];
  uint64_t v29 = *a1;
  uint64_t v3 = a1[16];
  uint64_t v34 = v3;
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    outlined retain of [Input]((uint64_t)&v34);
    uint64_t v33 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v6 = v5;
    uint64_t v7 = v3 + 48;
    do
    {
      uint64_t v8 = *(void *)(v7 - 16);
      uint64_t v9 = *(void *)(v7 - 8);
      char v10 = *(unsigned char *)(v7 + 40);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v11 = specialized SGDataType.init(_:)();
      uint64_t v33 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v33;
      }
      v7 += 64;
      *(void *)(v6 + 16) = v13 + 1;
      uint64_t v14 = v6 + 32 * v13;
      *(void *)(v14 + 32) = v8;
      *(void *)(v14 + 40) = v9;
      *(void *)(v14 + 48) = v11;
      *(unsigned char *)(v14 + 56) = v10;
      --v4;
    }
    while (v4);
    outlined release of [Input]((uint64_t)&v34);
    id v2 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v2[17];
  uint64_t v33 = v15;
  int64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (v16)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = v32;
    uint64_t v18 = v15 + 48;
    do
    {
      uint64_t v19 = *(void *)(v18 - 16);
      uint64_t v20 = *(void *)(v18 - 8);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v21 = specialized SGDataType.init(_:)();
      unint64_t v23 = *(void *)(v32 + 16);
      unint64_t v22 = *(void *)(v32 + 24);
      if (v23 >= v22 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      }
      v18 += 64;
      *(void *)(v32 + 16) = v23 + 1;
      uint64_t v24 = (void *)(v32 + 24 * v23);
      v24[4] = v19;
      v24[5] = v20;
      v24[6] = v21;
      --v16;
    }
    while (v16);
    outlined release of [Input]((uint64_t)&v33);
    id v2 = a1;
  }
  uint64_t v25 = v2[14];
  uint64_t v26 = v2[15];
  uint64_t result = outlined copy of MaterialXAvailability(v25, v26);
  *a2 = v29;
  a2[1] = v28;
  a2[2] = v6;
  a2[3] = v17;
  a2[4] = v25;
  a2[5] = v26;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph12TypedTextureVG_AF0G10AssignmentVs5NeverOTg504_s11d26Graph11mapUniformsySayAA17gh9VGSayAA05F14E0VGFAdGXEfU0_s11AnyIteratorVySiGTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v17;
  for (uint64_t i = (void *)(a1 + 56); ; i += 4)
  {
    uint64_t v5 = *(i - 3);
    unint64_t v6 = *(i - 2);
    char v15 = *((unsigned char *)i - 8);
    uint64_t v14 = *i;
    if ((v15 & 1) == 0) {
      break;
    }
    outlined copy of TextureSource();
    swift_retain();
    outlined copy of TextureSource();
    uint64_t v7 = v5;
    unint64_t v8 = v6;
LABEL_7:
    unint64_t v12 = *(void *)(v17 + 16);
    unint64_t v11 = *(void *)(v17 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v17 + 16) = v12 + 1;
    uint64_t v13 = v17 + 48 * v12;
    *(void *)(v13 + 32) = v7;
    *(void *)(v13 + 40) = v8;
    *(void *)(v13 + 48) = v14;
    *(void *)(v13 + 56) = v5;
    *(void *)(v13 + 64) = v6;
    *(unsigned char *)(v13 + 72) = v15;
    if (!--v1) {
      return v2;
    }
  }
  swift_retain();
  outlined copy of TextureSource();
  uint64_t result = dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v16 & 1) == 0)
  {
    char v16 = 0;
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x65727574786574;
    unint64_t v8 = 0xE700000000000000;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSsAE_pTg504_s11d108Graph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSSAA6F8CKXEfU3_SDySOSiGSDyS2SGTf1cn_nTf4nng_n(unint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  uint64_t v4 = v3;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (!v6) {
      return v7;
    }
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v7 = v22;
    while (v6 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x2611848A0](v9, a1);
      }
      else {
        id v10 = *(id *)(a1 + 8 * v9 + 32);
      }
      unint64_t v11 = v10;
      id v20 = v10;
      closure #5 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)((uint64_t *)&v20, a2, a3, &v19, &v21);
      if (v4)
      {
        swift_release();

        return v7;
      }
      uint64_t v4 = 0;

      uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      char object = v21._object;
      uint64_t v22 = v7;
      unint64_t v15 = *(void *)(v7 + 16);
      unint64_t v14 = *(void *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v22;
      }
      ++v9;
      *(void *)(v7 + 16) = v15 + 1;
      uint64_t v16 = v7 + 16 * v15;
      *(void *)(v16 + 32) = countAndFlagsBits;
      *(void *)(v16 + 40) = object;
      if (v6 == v9) {
        return v7;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #7 in SGREMaterial.init(graph:configuration:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(_DWORD *)&v26[8] = 0;
  _StringGuts.grow(_:)(58);
  v8._uint64_t countAndFlagsBits = 9;
  v8._char object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a1;
  v9._char object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 8250;
  v10._char object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  uint64_t v11 = *(void *)(a3 + 24);
  unint64_t v12 = *(void **)(a3 + 32);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._char object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x74657366666F2820;
  v14._char object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x203A657A6973202CLL;
  v16._char object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x6D6E67696C61202CLL;
  v18._char object = (void *)0xED0000203A746E65;
  String.append(_:)(v18);
  *(void *)uint64_t v26 = *(unsigned int *)(a3 + 60);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x6C6269736976202CLL;
  v20._char object = (void *)0xEB00000000203A65;
  String.append(_:)(v20);
  if (a4) {
    uint64_t v21 = 1702195828;
  }
  else {
    uint64_t v21 = 0x65736C6166;
  }
  if (a4) {
    unint64_t v22 = 0xE400000000000000;
  }
  else {
    unint64_t v22 = 0xE500000000000000;
  }
  unint64_t v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 41;
  v24._char object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return *(void *)&v26[4];
}

void specialized Sequence.forEach(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2611848A0](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      Swift::String v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      id v12 = v9;
      closure #1 in SGREMaterial.init(graph:configuration:)((uint64_t *)&v12, a2, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

void specialized Sequence.forEach(_:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v23 = v7;
    do
    {
      --v5;
      uint64_t v8 = (char **)(v7 + 24 * v5);
      id v9 = *v8;
      uint64_t v10 = (uint64_t)&(*v8)[OBJC_IVAR___SGNode_data];
      if (*(unsigned __int8 *)(v10 + 80) <= 0x3Fu)
      {
        uint64_t v24 = v5;
        uint64_t v11 = v8[1];
        id v12 = v8[2];
        uint64_t v13 = *(void *)(v10 + 16);
        unint64_t v14 = *(void *)&v9[OBJC_IVAR___SGNode_inputs];
        uint64_t v25 = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Swift::String v15 = v9;
        Swift::String v16 = v11;
        uint64_t v17 = specialized Sequence.filter(_:)(v13, v14);
        if (v4)
        {

          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)(v17 + 16);
        if (v19)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = v18 + 40;
          do
          {
            uint64_t v21 = *(void **)(v20 + 24);
            swift_bridgeObjectRetain();
            id v22 = v21;
            specialized closure #2 in closure #1 in checkConstantInputs(in:)((uint64_t)v22, a2, a3, v15, v16, v12);

            swift_bridgeObjectRelease();
            v20 += 40;
            --v19;
          }
          while (v19);

          swift_bridgeObjectRelease();
        }
        else
        {
        }
        swift_bridgeObjectRelease();
        uint64_t v5 = v24;
        uint64_t v7 = v23;
      }
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v16 = a1 + 32;
  Swift::String v15 = a2 + 7;
  while (1)
  {
    uint64_t v5 = *(void *)(v16 + 24 * v4) + OBJC_IVAR___SGNode_data;
    if (*(unsigned __int8 *)(v5 + 80) <= 0x3Fu)
    {
      uint64_t v6 = a2[2];
      if (v6)
      {
        uint64_t v7 = *(void *)v5;
        uint64_t v8 = *(void *)(v5 + 8);
        if (a2[4] == *(void *)v5 && v8 == a2[5]) {
          return 1;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          return 1;
        }
        if (v6 != 1) {
          break;
        }
      }
    }
LABEL_3:
    if (++v4 == v2) {
      return 0;
    }
  }
  uint64_t v11 = v15;
  uint64_t v12 = 1;
  while (1)
  {
    uint64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (*(v11 - 1) == v7 && v8 == *v11) {
      return 1;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      return 1;
    }
    v11 += 2;
    ++v12;
    if (v13 == v6) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

void outlined consume of TopologicalSort.Element?(void *a1, void *a2, void *a3)
{
  if (a1)
  {
  }
}

uint64_t sub_25C2D1A48()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in mapUniforms(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in mapUniforms(_:)(v1, a1);
}

uint64_t specialized SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SS_SSts5NeverOTg5142_s11ShaderGraph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSS_SStSS3key_SS5valuet_tXEfU_Tf1cn_n(a2);
  if (*(void *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE80];
  }
  uint64_t v38 = (void *)v6;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, 1, &v38);
  if (v3) {
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v38;
  uint64_t v38 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = (void *)MEMORY[0x270FA5388](*(void *)(v2 + OBJC_IVAR___SGGraph_resultsNode));
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v8, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  Swift::Int v9 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [ObjectIdentifier : Int]);
  Dictionary.reserveCapacity(_:)(v9);
  Swift::Int v36 = v9;
  if (!v9)
  {
LABEL_21:
    swift_retain();
    unint64_t v31 = swift_bridgeObjectRetain();
    v32._rawValue = v7;
    uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSsAE_pTg504_s11d108Graph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSSAA6F8CKXEfU3_SDySOSiGSDyS2SGTf1cn_nTf4nng_n(v31, (uint64_t)&v37, v32);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v33;
  }
  uint64_t v35 = v7;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  uint64_t v11 = (void *)v37;
  uint64_t v12 = (id *)(a1 + 48);
  while (1)
  {
    uint64_t v13 = *(v12 - 2);
    unint64_t v14 = *(v12 - 1);
    id v15 = *v12;
    id v16 = v13;
    id v17 = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    uint64_t v21 = v11[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    char v24 = v19;
    if (v11[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v19) {
          goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v24) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_24;
      }
      unint64_t v20 = v25;
      if (v24)
      {
LABEL_7:
        *(void *)(v11[7] + 8 * v20) = v10;
        goto LABEL_8;
      }
    }
    v11[(v20 >> 6) + 8] |= 1 << v20;
    uint64_t v27 = 8 * v20;
    *(void *)(v11[6] + v27) = v16;
    *(void *)(v11[7] + v27) = v10;
    uint64_t v28 = v11[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_23;
    }
    v11[2] = v30;
LABEL_8:
    v12 += 3;

    swift_bridgeObjectRelease();
    if (v36 == ++v10)
    {
      unint64_t v37 = (unint64_t)v11;
      swift_bridgeObjectRelease();
      uint64_t v7 = v35;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_25C2D20E8()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25C2D2120()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

BOOL partial apply for implicit closure #8 in SGREMaterial.init(graph:configuration:)()
{
  return (*(unsigned char *)(v0 + 16) & 1) == 0;
}

uint64_t sub_25C2D2140()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2150()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2160()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2170()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for implicit closure #12 in SGREMaterial.init(graph:configuration:)()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_25C2D2188()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2198()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D21A8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for implicit closure #16 in SGREMaterial.init(graph:configuration:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25C2D21E8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_25C2D2200()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_25C2D2220()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2230()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2240()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2250()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2260()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2270()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2280()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25C2D22B8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D22C8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D22D8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D22E8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_25C2D2380()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2390()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D23A0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D23B0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D23C0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D23D0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D23E0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D23F0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2400()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2410()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2420()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2430()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2440()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2450()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  uint64_t v3 = *a1 + 4;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v3;
  return result;
}

uint64_t sub_25C2D24C0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D24D0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D24E0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D24F0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2500()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2510()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2520()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C2D2530()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

id outlined copy of TopologicalSort.Element?(id result, void *a2, void *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = a3;
    id v5 = v3;
    return a2;
  }
  return result;
}

uint64_t specialized static ShaderGraphService.archiveMaterial(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v98 = *(const char **)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v97 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v105 = (char *)&v84 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v84 - v11;
  uint64_t v13 = type metadata accessor for OSSignposter();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSSignposter.init(subsystem:category:)();
  if (a1)
  {
    uint64_t v94 = v2;
    uint64_t v99 = v14;
    id v17 = a1;
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    uint64_t v18 = (char *)v17;
    char v19 = OSSignposter.logHandle.getter();
    LODWORD(v102) = static os_signpost_type_t.begin.getter();
    char v20 = OS_os_log.signpostsEnabled.getter();
    uint64_t v100 = v13;
    uint64_t v101 = v16;
    int v95 = v8;
    if (v20)
    {
      uint64_t v21 = v105;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v105, v12, v4);
      uint64_t v22 = swift_slowAlloc();
      uint64_t v96 = v4;
      uint64_t v23 = v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v103 = v5;
      uint64_t v25 = v24;
      v106[0] = v24;
      *(_DWORD *)uint64_t v23 = 141558531;
      uint64_t v107 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      char v26 = (uint64_t *)(*(void *)&v18[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
      uint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      swift_bridgeObjectRetain();
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_25C418EE0;
      uint64_t v30 = *(void *)&v18[OBJC_IVAR___SGREMaterial_operationalHash];
      uint64_t v31 = MEMORY[0x263F8D750];
      *(void *)(v29 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v29 + 64) = v31;
      *(void *)(v29 + 32) = v30;
      uint64_t v32 = String.init(format:_:)();
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_signpost_id_t v34 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_25C27E000, v19, (os_signpost_type_t)v102, v34, "archiveInit", "%{private,mask.hash}s %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      uint64_t v35 = v25;
      uint64_t v5 = v103;
      MEMORY[0x261185880](v35, -1, -1);
      uint64_t v36 = v23;
      uint64_t v4 = v96;
      MEMORY[0x261185880](v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v4);
    }
    else
    {

      uint64_t v21 = v105;
    }
    id v39 = v12;
    uint64_t v40 = v5 + 16;
    int v93 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v93(v21, v39, v4);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v41 = OSSignpostIntervalState.init(id:isOpen:)();
    Class v42 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v102 = v41;
    uint64_t v103 = v5 + 8;
    v42(v39, v4);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v43 = PropertyListEncoder.init()();
    uint64_t v5 = *(void *)&v18[OBJC_IVAR___SGREMaterial_graph];
    uint64_t v44 = v4;
    uint64_t v45 = *(void **)&v18[OBJC_IVAR___SGREMaterial_config];
    v106[0] = 1;
    v106[1] = v5;
    v106[2] = (uint64_t)v45;
    lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer();
    id v46 = (char *)(id)v5;
    id v47 = v45;
    Class v48 = v104;
    uint64_t v49 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (!v48)
    {
      uint64_t v5 = v49;
      uint64_t v87 = v40;
      id v89 = v47;
      uint64_t v90 = 0;
      uint64_t v91 = v50;
      uint64_t v92 = v43;
      uint64_t v104 = v42;
      uint64_t v96 = v44;
      uint64_t v60 = v18;
      id v61 = v101;
      uint64_t v62 = OSSignposter.logHandle.getter();
      id v63 = v95;
      OSSignpostIntervalState.signpostID.getter();
      int v88 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        os_log_t v85 = v62;
        uint64_t v86 = v5;
        swift_retain();
        id v64 = v97;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        id v65 = v98;
        uint64_t v66 = v94;
        if ((*((unsigned int (**)(char *, uint64_t))v98 + 11))(v64, v94) == *MEMORY[0x263F90238])
        {
          char v67 = 0;
          uint64_t v98 = "[Error] Interval already ended";
        }
        else
        {
          (*((void (**)(char *, uint64_t))v65 + 1))(v64, v66);
          uint64_t v98 = "%{private,mask.hash}s %s";
          char v67 = 3;
        }
        id v68 = v105;
        uint64_t v69 = v96;
        v93(v105, v63, v96);
        uint64_t v70 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        v106[0] = v71;
        *(unsigned char *)uint64_t v70 = v67;
        *(unsigned char *)(v70 + 1) = v67;
        *(_WORD *)(v70 + 2) = 2160;
        uint64_t v107 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v70 + 12) = 2081;
        uint64_t v72 = v68;
        uint64_t v73 = *(void *)&v46[OBJC_IVAR___SGGraph_name];
        unint64_t v74 = *(void *)&v46[OBJC_IVAR___SGGraph_name + 8];
        swift_bridgeObjectRetain();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 22) = 2080;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = xmmword_25C418EE0;
        uint64_t v76 = *(void *)&v60[OBJC_IVAR___SGREMaterial_operationalHash];
        uint64_t v77 = MEMORY[0x263F8D750];
        *(void *)(v75 + 56) = MEMORY[0x263F8D6C8];
        *(void *)(v75 + 64) = v77;
        *(void *)(v75 + 32) = v76;
        uint64_t v78 = String.init(format:_:)();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_signpost_id_t v80 = OSSignpostID.rawValue.getter();
        os_log_t v81 = v85;
        _os_signpost_emit_with_name_impl(&dword_25C27E000, v85, (os_signpost_type_t)v88, v80, "archiveInit", v98, (uint8_t *)v70, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x261185880](v71, -1, -1);
        MEMORY[0x261185880](v70, -1, -1);

        swift_release();
        uint64_t v82 = v104;
        v104(v95, v69);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v100);
        swift_release();
        v82(v72, v69);
        return v86;
      }
      else
      {

        swift_release();
        v104(v63, v96);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v61, v100);
        swift_release();
      }
      return v5;
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v100);

    swift_release();
    swift_release();
    unint64_t v37 = v48;
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v37 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v38 = xmmword_25C41A150;
    *(unsigned char *)(v38 + 16) = 1;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  __swift_project_value_buffer(v51, (uint64_t)logger);
  id v52 = v37;
  id v53 = v37;
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    id v56 = (uint8_t *)swift_slowAlloc();
    Class v57 = (void *)swift_slowAlloc();
    *(_DWORD *)id v56 = 138412290;
    id v58 = v37;
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v106[0] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *Class v57 = v5;

    _os_log_impl(&dword_25C27E000, v54, v55, "%@", v56, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261185880](v57, -1, -1);
    MEMORY[0x261185880](v56, -1, -1);
  }
  else
  {
  }
  type metadata accessor for SGError();
  id v59 = v37;
  SGError.__allocating_init(_:)(v37);
  swift_willThrow();

  return v5;
}

uint8_t *specialized static ShaderGraphService.createMaterial(from:config:)(uint8_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v64 - v9;
  uint64_t v11 = type metadata accessor for OSSignposter();
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    char v26 = (void *)swift_allocError();
    long long v27 = xmmword_25C41A170;
LABEL_7:
    *(_OWORD *)uint64_t v25 = v27;
    *(unsigned char *)(v25 + 16) = 1;
    swift_willThrow();
LABEL_16:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)logger);
    id v42 = v26;
    id v43 = v26;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      a1 = (uint8_t *)swift_slowAlloc();
      id v46 = (void *)swift_slowAlloc();
      *(_DWORD *)a1 = 138412290;
      id v47 = v26;
      uint64_t v48 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v72 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v46 = v48;

      _os_log_impl(&dword_25C27E000, v44, v45, "%@", a1, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v46, -1, -1);
      MEMORY[0x261185880](a1, -1, -1);
    }
    else
    {
    }
    type metadata accessor for SGError();
    id v49 = v26;
    SGError.__allocating_init(_:)(v26);
    swift_willThrow();

    return a1;
  }
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    char v26 = (void *)swift_allocError();
    long long v27 = xmmword_25C41A160;
    goto LABEL_7;
  }
  uint64_t v70 = v12;
  uint64_t v15 = a1;
  id v71 = a2;
  OSSignposter.init(subsystem:category:)();
  a1 = v15;
  static OSSignpostID.exclusive.getter();
  id v16 = OSSignposter.logHandle.getter();
  int v68 = static os_signpost_type_t.event.getter();
  uint64_t v69 = v16;
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v67 = v5;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    uint64_t v17 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t v72 = v65;
    *(_DWORD *)uint64_t v17 = 141558275;
    uint64_t v74 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2081;
    uint64_t v64 = v17 + 14;
    uint64_t v66 = v11;
    uint64_t v18 = a1;
    uint64_t v19 = *(void *)&a1[OBJC_IVAR___SGGraph_name];
    unint64_t v20 = *(void *)&a1[OBJC_IVAR___SGGraph_name + 8];
    swift_bridgeObjectRetain();
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a1 = v18;
    swift_bridgeObjectRelease();
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    uint64_t v22 = v69;
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v69, (os_signpost_type_t)v68, v21, "materialInit", "%{private,mask.hash}s", (uint8_t *)v17, 0x16u);
    uint64_t v23 = v65;
    swift_arrayDestroy();
    MEMORY[0x261185880](v23, -1, -1);
    MEMORY[0x261185880](v17, -1, -1);

    uint64_t v24 = *(void (**)(char *, uint64_t))(v67 + 8);
    v24(v10, v4);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v14, v66);
    v24(v8, v4);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v14, v11);
  }
  id v28 = objc_allocWithZone((Class)type metadata accessor for SGREMaterial());
  uint64_t v29 = a1;
  id v30 = v71;
  uint64_t v31 = v77;
  uint64_t v32 = SGREMaterial.init(graph:configuration:)(v29, (uint64_t)v30);
  char v26 = v31;
  if (v31)
  {

    goto LABEL_16;
  }
  a1 = (uint8_t *)v32;
  id v33 = *(id *)(v32 + OBJC_IVAR___SGREMaterial_graph);
  SGGraph.legacyGraph()(v75);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  v34._rawValue = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)&a1[OBJC_IVAR___SGREMaterial_config])
                                               + 0x58))();
  ShaderGraph::NodeDefStore v78 = NodeDefStore.including(_:)(v34);
  char v26 = v35;
  if (v35)
  {
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)v75);

    goto LABEL_16;
  }
  rawValue = v78.geomPropDefs._rawValue;
  unint64_t v37 = v78.implementations._rawValue;
  uint64_t v77 = v78.nodeDefs._rawValue;
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)&a1[OBJC_IVAR___SGREMaterial_textureAssignments];
  id v39 = *(void **)&a1[OBJC_IVAR___SGREMaterial_customUniformsType];
  swift_bridgeObjectRetain();
  id v40 = v39;
  id v71 = (id)specialized static MetalDataType.create(_:)((uint64_t)v40);

  uint64_t v51 = (uint64_t)v71;
  outlined retain of Graph((uint64_t)v75);
  swift_retain();
  uint64_t v52 = specialized Dictionary<>.init(_:)(v38);
  specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)((uint64_t)v75, v51, v52, v77, (uint64_t)rawValue, v37, v76);
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v53 = static DebugConfig.debugMode;
  if (*(void *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v54 = Hasher._finalize()();
    uint64_t v55 = -1 << *(unsigned char *)(v53 + 32);
    unint64_t v56 = v54 & ~v55;
    uint64_t v77 = (v53 + 56);
    if ((*(void *)(v53 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56))
    {
      uint64_t v70 = ~v55;
      while (1)
      {
        switch(*(unsigned char *)(*(void *)(v53 + 48) + v56))
        {
          case 2:
            swift_bridgeObjectRelease();
            goto LABEL_35;
          default:
            char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v57)
            {
LABEL_35:
              swift_bridgeObjectRelease();
              id v58 = a1;
              uint64_t v59 = specialized static ShaderGraphService.archiveMaterial(_:)(a1);
              unint64_t v61 = v60;

              uint64_t v62 = *(void **)&v29[OBJC_IVAR___SGGraph_name + 8];
              uint64_t v72 = *(void *)&v29[OBJC_IVAR___SGGraph_name];
              uint64_t v73 = v62;
              swift_bridgeObjectRetain();
              v63._uint64_t countAndFlagsBits = 0x657669686372615FLL;
              v63._char object = (void *)0xE800000000000000;
              String.append(_:)(v63);
              specialized static FileLogger.saveDebugFile(_:name:extension:)(v59, v61, v72, v73, 0x7473696C70, 0xE500000000000000);

              outlined release of Graph((uint64_t)v75);
              swift_release();
              outlined release of RESurfaceShaderMaterial(v76);
              swift_bridgeObjectRelease();

              outlined consume of Data._Representation(v59, v61);
              return a1;
            }
            unint64_t v56 = (v56 + 1) & v70;
            if (((*(unint64_t *)((char *)&v77->isa + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0) {
              goto LABEL_31;
            }
            break;
        }
      }
    }
LABEL_31:

    swift_bridgeObjectRelease();
  }
  else
  {
  }
  outlined release of Graph((uint64_t)v75);
  swift_release();
  outlined release of RESurfaceShaderMaterial(v76);

  return a1;
}

uint8_t *specialized static ShaderGraphService.createMaterial(from:)(uint8_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = one-time initialization token for default;
    uint64_t v4 = a1;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = specialized static ShaderGraphService.createMaterial(from:config:)(v2, (void *)static SGMaterialConfiguration.default);
    if (!v1)
    {
      uint64_t v2 = v5;

      return v2;
    }

    uint64_t v6 = v1;
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v6 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_25C41A170;
    *(unsigned char *)(v7 + 16) = 1;
    swift_willThrow();
  }
  type metadata accessor for SGError();
  id v8 = v6;
  SGError.__allocating_init(_:)(v6);
  swift_willThrow();

  return v2;
}

char *specialized static ShaderGraphService.createMaterialFromArchive(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v98 = a1;
  unint64_t v106 = a2;
  uint64_t v2 = (const char *)type metadata accessor for OSSignpostError();
  uint64_t v3 = *((void *)v2 - 1);
  MEMORY[0x270FA5388](v2);
  uint64_t v91 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v96 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v85 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v85 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v99 = v14;
  uint64_t v100 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v101 = v17;
  uint64_t v18 = OSSignposter.logHandle.getter();
  int v19 = static os_signpost_type_t.begin.getter();
  char v20 = OS_os_log.signpostsEnabled.getter();
  int v93 = v2;
  uint64_t v92 = v3;
  if (v20)
  {
    os_signpost_id_t v21 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    LODWORD(v95) = v19;
    v21(v11, v13, v5);
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v18, (os_signpost_type_t)v95, v23, "archiveDecode", "decode", v22, 2u);
    MEMORY[0x261185880](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {

    os_signpost_id_t v21 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  }
  v21(v11, v13, v5);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v95 = v6 + 8;
  v25(v13, v5);
  unint64_t v26 = v106;
  if (v106 >> 60 == 15)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    long long v27 = (char *)swift_allocError();
    *(_OWORD *)uint64_t v28 = xmmword_25C41A180;
    *(unsigned char *)(v28 + 16) = 1;
    swift_willThrow();
    swift_release();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
LABEL_9:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)logger);
    id v40 = v27;
    uint64_t v41 = v27;
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v45 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 138412290;
      id v46 = v27;
      uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v102 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v45 = v47;

      _os_log_impl(&dword_25C27E000, v42, v43, "%@", v44, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v45, -1, -1);
      MEMORY[0x261185880](v44, -1, -1);
    }
    else
    {
    }
    type metadata accessor for SGError();
    uint64_t v48 = v27;
    SGError.__allocating_init(_:)(v27);
    swift_willThrow();

    return v27;
  }
  uint64_t v29 = v11;
  uint64_t v90 = v21;
  uint64_t v94 = v24;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v30 = v98;
  outlined copy of Data._Representation(v98, v26);
  uint64_t v31 = PropertyListDecoder.init()();
  lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer();
  uint64_t v32 = (char *)v97;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  long long v27 = v32;
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
    swift_release();
    outlined consume of Data?(v30, v26);
    swift_release();
    goto LABEL_9;
  }
  id v89 = v25;
  uint64_t v97 = v31;
  id v33 = v103;
  Swift::OpaquePointer v34 = v104;
  id v35 = objc_allocWithZone((Class)type metadata accessor for SGREMaterial());
  uint64_t v36 = v33;
  id v37 = v34;
  uint64_t v38 = (void *)SGREMaterial.init(graph:configuration:)(v36, (uint64_t)v37);
  id v88 = v37;
  uint64_t v87 = v36;
  long long v27 = v38;
  uint64_t v50 = OSSignposter.logHandle.getter();
  uint64_t v51 = v96;
  OSSignpostIntervalState.signpostID.getter();
  int v86 = static os_signpost_type_t.end.getter();
  char v52 = OS_os_log.signpostsEnabled.getter();
  uint64_t v53 = v98;
  if (v52)
  {
    os_log_t v85 = v50;
    swift_retain();
    Swift::Int v54 = v91;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v55 = v92;
    unint64_t v56 = v93;
    if ((*(unsigned int (**)(char *, const char *))(v92 + 88))(v54, v93) == *MEMORY[0x263F90238])
    {
      char v57 = 0;
      int v93 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, const char *))(v55 + 8))(v54, v56);
      int v93 = "decode %{private,mask.hash}s %s";
      char v57 = 3;
    }
    v90(v29, v51, v5);
    uint64_t v58 = swift_slowAlloc();
    uint64_t v92 = swift_slowAlloc();
    uint64_t v102 = v92;
    *(unsigned char *)uint64_t v58 = v57;
    *(unsigned char *)(v58 + 1) = v57;
    *(_WORD *)(v58 + 2) = 2160;
    uint64_t v105 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v58 + 12) = 2081;
    uint64_t v59 = (uint64_t *)(*(void *)&v27[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
    unint64_t v60 = v27;
    uint64_t v61 = *v59;
    unint64_t v62 = v59[1];
    swift_bridgeObjectRetain();
    uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 22) = 2080;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_25C418EE0;
    uint64_t v64 = *(void *)&v60[OBJC_IVAR___SGREMaterial_operationalHash];
    uint64_t v65 = MEMORY[0x263F8D750];
    *(void *)(v63 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v63 + 64) = v65;
    *(void *)(v63 + 32) = v64;
    uint64_t v66 = String.init(format:_:)();
    uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    long long v27 = v60;
    swift_bridgeObjectRelease();
    os_signpost_id_t v68 = OSSignpostID.rawValue.getter();
    os_log_t v69 = v85;
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v85, (os_signpost_type_t)v86, v68, "archiveDecode", v93, (uint8_t *)v58, 0x20u);
    uint64_t v70 = v92;
    swift_arrayDestroy();
    MEMORY[0x261185880](v70, -1, -1);
    MEMORY[0x261185880](v58, -1, -1);

    id v71 = v89;
    v89(v51, v5);
    uint64_t v53 = v98;
    v71(v29, v5);
  }
  else
  {

    v89(v51, v5);
  }
  id v72 = v88;
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v73 = static DebugConfig.debugMode;
  uint64_t v74 = v87;
  if (*(void *)(static DebugConfig.debugMode + 16))
  {
    uint64_t v96 = v27;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v75 = Hasher._finalize()();
    uint64_t v76 = -1 << *(unsigned char *)(v73 + 32);
    unint64_t v77 = v75 & ~v76;
    if ((*(void *)(v73 + 56 + ((v77 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v77))
    {
      uint64_t v78 = ~v76;
      while (1)
      {
        switch(*(unsigned char *)(*(void *)(v73 + 48) + v77))
        {
          case 2:
            swift_bridgeObjectRelease();
            goto LABEL_33;
          default:
            char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v79)
            {
LABEL_33:
              swift_bridgeObjectRelease();
              long long v27 = v96;
              os_signpost_id_t v80 = (uint64_t *)(*(void *)&v96[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
              os_log_t v81 = (void *)v80[1];
              uint64_t v102 = *v80;
              uint64_t v103 = v81;
              swift_bridgeObjectRetain();
              v82._uint64_t countAndFlagsBits = 0x686372615F45525FLL;
              v82._char object = (void *)0xEB00000000657669;
              String.append(_:)(v82);
              uint64_t v83 = v98;
              unint64_t v84 = v106;
              specialized static FileLogger.saveDebugFile(_:name:extension:)(v98, v106, v102, v103, 0x7473696C70, 0xE500000000000000);
              swift_release();
              swift_bridgeObjectRelease();
              outlined consume of Data?(v83, v84);

              swift_release();
              (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
              return v27;
            }
            unint64_t v77 = (v77 + 1) & v78;
            if (((*(void *)(v73 + 56 + ((v77 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v77) & 1) == 0) {
              goto LABEL_30;
            }
            break;
        }
      }
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v53 = v98;
    id v72 = v88;
    long long v27 = v96;
  }
  (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
  swift_release();
  outlined consume of Data?(v53, v106);

  swift_release();
  return v27;
}

NSObject *specialized static ShaderGraphService.createLibrary(from:device:options:)(unsigned __int8 *a1, char *a2, uint64_t a3)
{
  uint64_t v220 = a3;
  uint64_t v221 = a2;
  uint64_t v257 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v204 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v205 = (uint64_t)&v195 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostError();
  uint64_t v207 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v206 = (char *)&v195 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = type metadata accessor for OSSignpostID();
  uint64_t v222 = *(void *)(v219 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v219);
  uint64_t v208 = (char *)&v195 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v217 = (char *)&v195 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v195 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v195 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSSignposter.init(subsystem:category:)();
  long long v216 = a1;
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v44 = (void *)swift_allocError();
    *(void *)uint64_t v45 = 0xD000000000000010;
    *(void *)(v45 + 8) = 0x800000025C422E10;
    int v214 = 1;
    *(unsigned char *)(v45 + 16) = 1;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v225 = 0;
    int v213 = 1;
    goto LABEL_74;
  }
  uint64_t v201 = v6;
  uint64_t v215 = v14;
  uint64_t v212 = v15;
  int v213 = a1[OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms];
  int v18 = a1[OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms];
  int v19 = a1;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  char v20 = v19;
  uint64_t v211 = v17;
  os_signpost_id_t v21 = OSSignposter.logHandle.getter();
  int v22 = static os_signpost_type_t.begin.getter();
  char v23 = OS_os_log.signpostsEnabled.getter();
  uint64_t v24 = v13;
  int v214 = v18;
  uint64_t v198 = v4;
  if (v23)
  {
    uint64_t v25 = v222;
    unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v222 + 16);
    LODWORD(v224) = v22;
    long long v27 = v217;
    v26(v217, v13, v219);
    uint64_t v28 = swift_slowAlloc();
    uint64_t v225 = v13;
    uint64_t v29 = v28;
    uint64_t v223 = swift_slowAlloc();
    *(void *)&long long v239 = v223;
    *(_DWORD *)uint64_t v29 = 141558531;
    *(void *)&long long v228 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2081;
    uint64_t v30 = (uint64_t *)(*(void *)&v20[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    swift_bridgeObjectRetain();
    *(void *)&long long v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)&v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_25C418EE0;
    uint64_t v34 = *(void *)&v20[OBJC_IVAR___SGREMaterial_operationalHash];
    uint64_t v35 = MEMORY[0x263F8D750];
    *(void *)(v33 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v33 + 64) = v35;
    *(void *)(v33 + 32) = v34;
    uint64_t v36 = String.init(format:_:)();
    *(void *)&long long v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v38 = v20;
    swift_bridgeObjectRelease();
    os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v21, (os_signpost_type_t)v224, v39, "libraryFromMaterial", "%{private,mask.hash}s %s", (uint8_t *)v29, 0x20u);
    uint64_t v40 = v223;
    swift_arrayDestroy();
    uint64_t v41 = v221;
    MEMORY[0x261185880](v40, -1, -1);
    uint64_t v42 = v29;
    uint64_t v24 = v225;
    MEMORY[0x261185880](v42, -1, -1);

    uint64_t v43 = v219;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v219);
  }
  else
  {

    uint64_t v38 = v20;
    uint64_t v43 = v219;
    uint64_t v41 = v221;
    uint64_t v25 = v222;
    long long v27 = v217;
  }
  uint64_t v199 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  uint64_t v200 = v25 + 16;
  v199(v27, v24, v43);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v46 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v222 = v25 + 8;
  v47(v24, v43);
  uint64_t v48 = v215;
  if (!v41)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v44 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v53 = xmmword_25C41A190;
    *(unsigned char *)(v53 + 16) = 1;
    swift_willThrow();

    swift_release();
    (*(void (**)(char *, uint64_t))(v212 + 8))(v211, v48);
LABEL_11:
    uint64_t v225 = 0;
    goto LABEL_74;
  }
  unint64_t v49 = (unint64_t)v47;
  uint64_t v202 = v46;
  uint64_t v50 = *(void **)&v38[OBJC_IVAR___SGREMaterial_graph];
  swift_unknownObjectRetain();
  uint64_t v51 = v50;
  id v52 = v226;
  SGGraph.legacyGraph()(v249);
  id v203 = v52;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v212 + 8))(v211, v48);

    swift_release();
    swift_unknownObjectRelease();
LABEL_9:
    uint64_t v225 = 0;
    uint64_t v44 = v203;
    goto LABEL_74;
  }
  uint64_t v196 = v38;
  char v197 = v51;
  long long v246 = v249[7];
  long long v247 = v249[8];
  v248[0] = v250[0];
  *(_OWORD *)((char *)v248 + 9) = *(_OWORD *)((char *)v250 + 9);
  long long v243 = v249[4];
  long long v244 = v249[5];
  long long v245 = v249[6];
  long long v239 = v249[0];
  long long v240 = v249[1];
  long long v241 = v249[2];
  long long v242 = v249[3];
  if (one-time initialization token for debugMode != -1) {
    goto LABEL_54;
  }
LABEL_13:
  swift_beginAccess();
  uint64_t v54 = static DebugConfig.debugMode;
  if (*(void *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v55 = Hasher._finalize()();
    uint64_t v56 = -1 << *(unsigned char *)(v54 + 32);
    unint64_t v57 = v55 & ~v56;
    if (((*(void *)(v54 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    uint64_t v58 = (void (*)(void, void))v49;
    uint64_t v59 = v41;
    uint64_t v60 = ~v56;
    while (1)
    {
      switch(*(unsigned char *)(*(void *)(v54 + 48) + v57))
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_22;
        default:
          char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v61)
          {
LABEL_22:
            uint64_t v62 = v212;
            swift_bridgeObjectRelease();
            outlined retain of Graph((uint64_t)v249);
            id v63 = v203;
            createDotText(representing:)((uint64_t)v249);
            id v203 = v63;
            uint64_t v41 = v59;
            if (v63)
            {
              outlined release of Graph((uint64_t)v249);

              swift_release();
              swift_unknownObjectRelease();
              outlined release of Graph((uint64_t)v249);
              (*(void (**)(char *, uint64_t))(v62 + 8))(v211, v215);
              goto LABEL_9;
            }
            uint64_t v66 = v64;
            uint64_t v67 = v65;
            outlined release of Graph((uint64_t)v249);
            uint64_t v68 = *(void *)&v197[OBJC_IVAR___SGGraph_name + 8];
            *(void *)&long long v228 = *(void *)&v197[OBJC_IVAR___SGGraph_name];
            *((void *)&v228 + 1) = v68;
            swift_bridgeObjectRetain();
            v69._char object = (void *)0xEA00000000006870;
            v69._uint64_t countAndFlagsBits = 0x617247726573755FLL;
            String.append(_:)(v69);
            specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v66, v67, v228, *((void **)&v228 + 1), 7630692, 0xE300000000000000);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_25:
            unint64_t v49 = (unint64_t)v58;
            goto LABEL_26;
          }
          unint64_t v57 = (v57 + 1) & v60;
          if (((*(void *)(v54 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v41 = v59;
            goto LABEL_25;
          }
          break;
      }
    }
  }
LABEL_26:
  unint64_t v70 = *(void *)(*(void *)&v197[OBJC_IVAR___SGGraph_argumentsNode] + OBJC_IVAR___SGNode_outputs);
  unint64_t v71 = MEMORY[0x263F8EE78];
  *(void *)&long long v228 = MEMORY[0x263F8EE78];
  if (v70 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v195 = (void (*)(char *, uint64_t))v49;
    if (v72)
    {
LABEL_28:
      unint64_t v49 = 0;
      uint64_t v223 = v72;
      Swift::String v224 = (const char *)(v70 & 0xC000000000000001);
      unint64_t v209 = v70 + 32;
      uint64_t v210 = v70 & 0xFFFFFFFFFFFFFF8;
      unint64_t v218 = v70;
      do
      {
        if (v224)
        {
          uint64_t v73 = (char *)MEMORY[0x2611848A0](v49, v70);
          BOOL v74 = __OFADD__(v49++, 1);
          if (v74) {
            goto LABEL_52;
          }
        }
        else
        {
          if (v49 >= *(void *)(v210 + 16)) {
            goto LABEL_53;
          }
          uint64_t v73 = (char *)*(id *)(v209 + 8 * v49);
          BOOL v74 = __OFADD__(v49++, 1);
          if (v74)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            swift_once();
            goto LABEL_13;
          }
        }
        id v226 = v73;
        Swift::Int v75 = &v73[OBJC_IVAR___SGOutput_edges];
        swift_beginAccess();
        uint64_t v76 = *(char **)v75;
        uint64_t v77 = *((void *)v75 + 1);
        unint64_t v238 = v71;
        uint64_t v41 = *(char **)(v77 + 16);
        if (v41)
        {
          uint64_t v78 = v77 + 32;
          uint64_t v225 = v76;
          swift_retain();
          swift_retain();
          do
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v78, (uint64_t)v227, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
            uint64_t v79 = MEMORY[0x261185960](v227);
            uint64_t v80 = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v227, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
            if (v79)
            {
              MEMORY[0x261184120](v80);
              if (*(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            v78 += 8;
            --v41;
          }
          while (v41);
          unint64_t v81 = v238;
          unint64_t v70 = v218;
        }
        else
        {
          swift_retain();
          swift_retain();
          unint64_t v81 = v71;
        }
        swift_release();
        swift_release();
        if (v81 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v82 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v83 = v223;
        swift_bridgeObjectRelease();
        if (v82)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        unint64_t v71 = MEMORY[0x263F8EE78];
      }
      while (v49 != v83);
      swift_bridgeObjectRelease();
      unint64_t v84 = v228;
      uint64_t v41 = v221;
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v195 = (void (*)(char *, uint64_t))v49;
    if (v72) {
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v84 = MEMORY[0x263F8EE78];
LABEL_57:
  uint64_t v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_SSs5NeverOTg504_s11d138Graph0aB7ServiceC13createLibrary4from6device7optionsSo10MTLLibrary_pAA12SGREMaterialCSg_So9MTLDevice_pSgAA0J18CompilationOptionsCtKFZSSAA8F54Ccfu1_32fd0161a276cdf0c4c1049efc18373d1cAQSSTf3nnnpk_nTf1cn_n(v84);
  swift_release();
  uint64_t v86 = specialized Set.init<A>(_:)(v85);
  swift_bridgeObjectRelease();
  id v87 = v197;
  swift_beginAccess();
  unint64_t v88 = swift_bridgeObjectRetain();
  uint64_t v89 = specialized _ArrayProtocol.filter(_:)(v88, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Graph.insertConversionFromFloatColorToHalfColor(for:)((Swift::OpaquePointer)v89);
  uint64_t v91 = v90;
  if (v90)
  {

    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_73;
  }
  swift_bridgeObjectRelease();
  uint64_t v92 = static DebugConfig.debugMode;
  if (!*(void *)(static DebugConfig.debugMode + 16)) {
    goto LABEL_69;
  }
  int v93 = v41;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v94 = Hasher._finalize()();
  uint64_t v95 = -1 << *(unsigned char *)(v92 + 32);
  unint64_t v96 = v94 & ~v95;
  if (((*(void *)(v92 + 56 + ((v96 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = v93;
    goto LABEL_69;
  }
  uint64_t v97 = ~v95;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(v92 + 48) + v96))
    {
      case 3:
        swift_bridgeObjectRelease();
        goto LABEL_68;
      default:
        char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v98 & 1) == 0)
        {
          unint64_t v96 = (v96 + 1) & v97;
          if (((*(void *)(v92 + 56 + ((v96 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v41 = v221;
            goto LABEL_69;
          }
          continue;
        }
LABEL_68:
        swift_bridgeObjectRelease();
        v255[7] = v246;
        v255[8] = v247;
        v256[0] = v248[0];
        *(_OWORD *)((char *)v256 + 9) = *(_OWORD *)((char *)v248 + 9);
        v255[4] = v243;
        v255[5] = v244;
        v255[6] = v245;
        v255[0] = v239;
        v255[1] = v240;
        v255[2] = v241;
        v255[3] = v242;
        outlined retain of Graph((uint64_t)v255);
        createDotText(representing:)((uint64_t)v255);
        uint64_t v41 = v221;
        uint64_t v100 = v99;
        uint64_t v102 = v101;
        outlined release of Graph((uint64_t)v255);
        *(void *)&long long v228 = 0;
        *((void *)&v228 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        uint64_t v104 = *(void *)&v197[OBJC_IVAR___SGGraph_name];
        uint64_t v103 = *(void *)&v197[OBJC_IVAR___SGGraph_name + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)&long long v228 = v104;
        *((void *)&v228 + 1) = v103;
        v105._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
        v105._char object = (void *)0x800000025C422E70;
        String.append(_:)(v105);
        specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v100, v102, v228, *((void **)&v228 + 1), 7630692, 0xE300000000000000);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_69:
        unint64_t v106 = v41;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        uint64_t v107 = v196;
        v108._rawValue = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)&v196[OBJC_IVAR___SGREMaterial_config])
                                                      + 0x58))();
        ShaderGraph::NodeDefStore v258 = NodeDefStore.including(_:)(v108);
        uint64_t v91 = v109;
        if (v109)
        {

          swift_release();
          swift_unknownObjectRelease();
LABEL_73:
          swift_bridgeObjectRelease();
          long long v235 = v246;
          long long v236 = v247;
          v237[0] = v248[0];
          *(_OWORD *)((char *)v237 + 9) = *(_OWORD *)((char *)v248 + 9);
          long long v232 = v243;
          long long v233 = v244;
          long long v234 = v245;
          long long v228 = v239;
          long long v229 = v240;
          long long v230 = v241;
          long long v231 = v242;
          outlined release of Graph((uint64_t)&v228);
          (*(void (**)(char *, uint64_t))(v212 + 8))(v211, v215);
          uint64_t v225 = 0;
          uint64_t v44 = v91;
LABEL_74:
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v110 = type metadata accessor for Logger();
          unint64_t v111 = (void *)__swift_project_value_buffer(v110, (uint64_t)logger);
          id v112 = v44;
          id v113 = v44;
          id v226 = v111;
          uint64_t v114 = Logger.logObject.getter();
          os_log_type_t v115 = static os_log_type_t.error.getter();
          id v116 = v115;
          if (os_log_type_enabled(v114, v115))
          {
            Swift::Int v117 = (uint8_t *)swift_slowAlloc();
            uint64_t v118 = (void *)swift_slowAlloc();
            *(_DWORD *)Swift::Int v117 = 138412290;
            id v119 = v44;
            uint64_t v120 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)&long long v239 = v120;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v118 = v120;

            _os_log_impl(&dword_25C27E000, v114, (os_log_type_t)v116, "%@", v117, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x261185880](v118, -1, -1);
            MEMORY[0x261185880](v117, -1, -1);
          }
          else
          {
          }
          unint64_t v121 = (unsigned char *)(v220 + OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial);
          swift_beginAccess();
          if (*v121 == 1)
          {
            if (v216)
            {
              uint64_t v122 = (uint64_t *)(*(void *)&v216[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
              uint64_t v123 = *v122;
              unint64_t v124 = v122[1];
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v123 = 0xD000000000000014;
              unint64_t v124 = 0x800000025C422E30;
            }
            swift_bridgeObjectRetain();
            int v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v129, v130))
            {
              uint64_t v131 = (uint8_t *)swift_slowAlloc();
              long long v132 = v44;
              uint64_t v133 = swift_slowAlloc();
              *(void *)&long long v228 = v133;
              *(_DWORD *)uint64_t v131 = 136315138;
              swift_bridgeObjectRetain();
              v227[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, (uint64_t *)&v228);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_25C27E000, v129, v130, "Material library construction failed for: %s", v131, 0xCu);
              swift_arrayDestroy();
              uint64_t v134 = v133;
              uint64_t v44 = v132;
              MEMORY[0x261185880](v134, -1, -1);
              MEMORY[0x261185880](v131, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            id v135 = v44;
            id v136 = v44;
            uint64_t v137 = Logger.logObject.getter();
            os_log_type_t v138 = static os_log_type_t.error.getter();
            id v116 = v138;
            if (os_log_type_enabled(v137, v138))
            {
              uint64_t v139 = (uint8_t *)swift_slowAlloc();
              int v140 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v139 = 138412290;
              id v141 = v44;
              id v142 = v44;
              uint64_t v143 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)&long long v228 = v143;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *int v140 = v143;
              uint64_t v44 = v142;

              _os_log_impl(&dword_25C27E000, v137, (os_log_type_t)v116, "%@", v139, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              MEMORY[0x261185880](v140, -1, -1);
              MEMORY[0x261185880](v139, -1, -1);
            }
            else
            {
            }
            uint64_t v144 = v221;

            if (v144)
            {
              swift_unknownObjectRetain();
              uint64_t v145 = v225;
              uint64_t v146 = buildFailureMaterial(usesSurfaceUniforms:usesGeometryUniforms:device:)(v213, v214, v144);
              if (!v145)
              {
                id v116 = v146;
                swift_unknownObjectRelease();

                return v116;
              }
              swift_unknownObjectRelease();
              goto LABEL_99;
            }
            uint64_t v147 = Logger.logObject.getter();
            os_log_type_t v148 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v147, v148))
            {
              unint64_t v149 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v149 = 0;
              _os_log_impl(&dword_25C27E000, v147, v148, "Failed to unwrap MTLDevice", v149, 2u);
              MEMORY[0x261185880](v149, -1, -1);
            }

            type metadata accessor for SGError();
            SGError.__allocating_init(_:)((void *)0x63697665444C544DLL, (void *)0xE900000000000065, 1);
          }
          else
          {
            os_signpost_type_t v125 = Logger.logObject.getter();
            os_log_type_t v126 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v125, v126))
            {
              uint64_t v127 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v127 = 0;
              _os_log_impl(&dword_25C27E000, v125, v126, "Failed material compile fallback disabled.", v127, 2u);
              MEMORY[0x261185880](v127, -1, -1);
            }

            type metadata accessor for SGError();
            id v128 = v44;
            SGError.__allocating_init(_:)(v44);
          }
          swift_willThrow();
LABEL_99:

          return v116;
        }
        rawValue = v258.nodeDefs._rawValue;
        Swift::String v152 = v258.geomPropDefs._rawValue;
        long long v153 = v258.implementations._rawValue;
        swift_bridgeObjectRelease();
        uint64_t v154 = *(void *)&v107[OBJC_IVAR___SGREMaterial_textureAssignments];
        int v155 = *(void **)&v107[OBJC_IVAR___SGREMaterial_customUniformsType];
        swift_bridgeObjectRetain();
        id v156 = v155;
        uint64_t v157 = (void *)specialized static MetalDataType.create(_:)((uint64_t)v156);

        v253[7] = v246;
        v253[8] = v247;
        v254[0] = v248[0];
        *(_OWORD *)((char *)v254 + 9) = *(_OWORD *)((char *)v248 + 9);
        v253[4] = v243;
        v253[5] = v244;
        v253[6] = v245;
        v253[0] = v239;
        v253[1] = v240;
        v253[2] = v241;
        v253[3] = v242;
        outlined retain of Graph((uint64_t)v253);
        swift_retain();
        uint64_t v158 = specialized Dictionary<>.init(_:)(v154);
        specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)((uint64_t)v253, (uint64_t)v157, v158, rawValue, (uint64_t)v152, v153, v251);
        id v226 = v157;
        memcpy(v252, v251, sizeof(v252));
        outlined retain of RESurfaceShaderMaterial(v251);
        id v116 = GraphCompiler.compile(for:options:)(v106, v220);
        int v159 = OSSignposter.logHandle.getter();
        long long v160 = v208;
        OSSignpostIntervalState.signpostID.getter();
        LODWORD(v225) = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          unint64_t v161 = v206;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v162 = v207;
          uint64_t v163 = v201;
          if ((*(unsigned int (**)(char *, uint64_t))(v207 + 88))(v161, v201) == *MEMORY[0x263F90238])
          {
            uint64_t v164 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v163);
            uint64_t v164 = "";
          }
          Swift::String v224 = v164;
          id v165 = v217;
          unint64_t v166 = v160;
          uint64_t v167 = v219;
          v199(v217, v166, v219);
          uint64_t v168 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v168 = 0;
          os_signpost_id_t v169 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_25C27E000, v159, (os_signpost_type_t)v225, v169, "libraryFromMaterial", v224, v168, 2u);
          MEMORY[0x261185880](v168, -1, -1);

          uint64_t v170 = v167;
          uint64_t v171 = v165;
          unint64_t v172 = v195;
          v195(v208, v170);
          v172(v171, v170);
        }
        else
        {

          v195(v160, v219);
        }
        uint64_t v173 = static DebugConfig.debugMode;
        if (!*(void *)(static DebugConfig.debugMode + 16)) {
          goto LABEL_115;
        }
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v174 = Hasher._finalize()();
        uint64_t v175 = -1 << *(unsigned char *)(v173 + 32);
        unint64_t v176 = v174 & ~v175;
        if (((*(void *)(v173 + 56 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v176) & 1) == 0)
        {
LABEL_114:
          swift_bridgeObjectRelease();
LABEL_115:
          outlined release of RESurfaceShaderMaterial(v251);
          swift_unknownObjectRelease();

          swift_release();
          outlined release of RESurfaceShaderMaterial(v251);
LABEL_116:

          swift_release();
          goto LABEL_117;
        }
        uint64_t v177 = ~v175;
        while (2)
        {
          switch(*(unsigned char *)(*(void *)(v173 + 48) + v176))
          {
            case 4:
              swift_bridgeObjectRelease();
              goto LABEL_119;
            default:
              char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v178 & 1) == 0)
              {
                unint64_t v176 = (v176 + 1) & v177;
                if (((*(void *)(v173 + 56 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v176) & 1) == 0) {
                  goto LABEL_114;
                }
                continue;
              }
LABEL_119:
              swift_bridgeObjectRelease();
              v227[1] = &unk_2709AAAE8;
              uint64_t v179 = swift_dynamicCastObjCProtocolConditional();
              unint64_t v180 = v197;
              if (!v179)
              {
                swift_unknownObjectRetain();
                outlined release of RESurfaceShaderMaterial(v251);

                swift_release();
                swift_unknownObjectRelease();
                outlined release of RESurfaceShaderMaterial(v251);
                swift_unknownObjectRelease();
                goto LABEL_116;
              }
              uint64_t v181 = (void *)v179;
              type metadata accessor for FileLogger();
              uint64_t v182 = *(void *)&v180[OBJC_IVAR___SGGraph_name + 8];
              *(void *)&long long v228 = *(void *)&v180[OBJC_IVAR___SGGraph_name];
              *((void *)&v228 + 1) = v182;
              swift_unknownObjectRetain();
              swift_bridgeObjectRetain();
              v183._uint64_t countAndFlagsBits = 95;
              v183._char object = (void *)0xE100000000000000;
              String.append(_:)(v183);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
              uint64_t v184 = swift_allocObject();
              *(_OWORD *)(v184 + 16) = xmmword_25C418EE0;
              uint64_t v185 = *(void *)&v196[OBJC_IVAR___SGREMaterial_operationalHash];
              uint64_t v186 = MEMORY[0x263F8D750];
              *(void *)(v184 + 56) = MEMORY[0x263F8D6C8];
              *(void *)(v184 + 64) = v186;
              *(void *)(v184 + 32) = v185;
              v187._uint64_t countAndFlagsBits = String.init(format:_:)();
              String.append(_:)(v187);
              swift_bridgeObjectRelease();
              v188._uint64_t countAndFlagsBits = 0x656C69706D6F635FLL;
              v188._char object = (void *)0xE900000000000064;
              String.append(_:)(v188);
              static FileLogger.url(for:extension:)(v228, *((void **)&v228 + 1), 0x62696C6C746DLL, 0xE600000000000000, v205);
              swift_bridgeObjectRelease();
              URL._bridgeToObjectiveC()(v189);
              id v191 = v190;
              *(void *)&long long v228 = 0;
              unsigned int v192 = objc_msgSend(v181, sel_serializeToURL_error_, v190, &v228);

              if (!v192)
              {
                id v194 = (id)v228;
                uint64_t v44 = (void *)_convertNSErrorToError(_:)();

                swift_willThrow();
                outlined release of RESurfaceShaderMaterial(v251);

                swift_release();
                swift_unknownObjectRelease_n();
                swift_unknownObjectRelease();
                outlined release of RESurfaceShaderMaterial(v251);

                swift_release();
                (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v205, v198);
                long long v235 = v246;
                long long v236 = v247;
                v237[0] = v248[0];
                *(_OWORD *)((char *)v237 + 9) = *(_OWORD *)((char *)v248 + 9);
                long long v232 = v243;
                long long v233 = v244;
                long long v234 = v245;
                long long v228 = v239;
                long long v229 = v240;
                long long v230 = v241;
                long long v231 = v242;
                outlined release of Graph((uint64_t)&v228);
                (*(void (**)(char *, uint64_t))(v212 + 8))(v211, v215);
                goto LABEL_11;
              }
              id v193 = (id)v228;
              outlined release of RESurfaceShaderMaterial(v251);

              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              outlined release of RESurfaceShaderMaterial(v251);

              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v205, v198);
LABEL_117:
              long long v235 = v246;
              long long v236 = v247;
              v237[0] = v248[0];
              *(_OWORD *)((char *)v237 + 9) = *(_OWORD *)((char *)v248 + 9);
              long long v232 = v243;
              long long v233 = v244;
              long long v234 = v245;
              long long v228 = v239;
              long long v229 = v240;
              long long v230 = v241;
              long long v231 = v242;
              outlined release of Graph((uint64_t)&v228);
              (*(void (**)(char *, uint64_t))(v212 + 8))(v211, v215);
              return v116;
          }
        }
    }
  }
}

uint64_t type metadata accessor for SGREMaterialCompilationOptions()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames()
{
  unint64_t result = lazy protocol witness table cache variable for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames;
  if (!lazy protocol witness table cache variable for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in BuiltInDefinition.ReservedNames()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [BuiltInDefinition.ReservedNames] and conformance [A], &demangling cache variable for type metadata for [BuiltInDefinition.ReservedNames]);
}

uint64_t destroy for BuiltInDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 40);
  if ((unint64_t)(result - 1) >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for BuiltInDefinition(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2 + 4;
  uint64_t v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((unint64_t)(v6 - 1) >= 2)
  {
    a1[4] = *v5;
    a1[5] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)v5;
  }
  return a1;
}

void *assignWithCopy for BuiltInDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[5] - 1;
  if ((unint64_t)(a1[5] - 1) >= 2)
  {
    if (v4 >= 2)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)(a1 + 4), &demangling cache variable for type metadata for String?);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    return a1;
  }
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for BuiltInDefinition(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v5 = a2 + 4;
  if ((unint64_t)(a1[5] - 1) >= 2)
  {
    uint64_t v6 = a2[5];
    if ((unint64_t)(v6 - 1) >= 2)
    {
      a1[4] = *v5;
      a1[5] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)(a1 + 4), &demangling cache variable for type metadata for String?);
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInDefinition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInDefinition()
{
  return &type metadata for BuiltInDefinition;
}

uint64_t initializeWithCopy for BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInDefinition.InputSpec(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInDefinition.InputSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInDefinition.InputSpec()
{
  return &type metadata for BuiltInDefinition.InputSpec;
}

void *initializeBufferWithCopyOfBuffer for BuiltInDefinition.OutputSpec(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BuiltInDefinition.OutputSpec(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for BuiltInDefinition.OutputSpec(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for BuiltInDefinition.OutputSpec()
{
  return &type metadata for BuiltInDefinition.OutputSpec;
}

unsigned char *storeEnumTagSinglePayload for BuiltInDefinition.ReservedNames(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2D745CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInDefinition.ReservedNames()
{
  return &type metadata for BuiltInDefinition.ReservedNames;
}

uint64_t type metadata accessor for SGWarning()
{
  return self;
}

uint64_t method lookup function for SGWarning(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGWarning);
}

uint64_t dispatch thunk of SGWarning.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ObjC metadata update function for SGREMaterial()
{
  return type metadata accessor for SGREMaterial();
}

uint64_t type metadata accessor for SGREMaterial()
{
  uint64_t result = type metadata singleton initialization cache for SGREMaterial;
  if (!type metadata singleton initialization cache for SGREMaterial) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SGREMaterial()
{
  uint64_t result = type metadata accessor for SHA512Digest();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for SGREMaterial(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGREMaterial);
}

uint64_t dispatch thunk of SGREMaterial.__allocating_init(graph:configuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t method lookup function for SGREMaterialCompilationOptions(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGREMaterialCompilationOptions);
}

uint64_t dispatch thunk of SGREMaterialCompilationOptions.__allocating_init(workingColorSpace:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for ShaderGraphService()
{
  return self;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SHA512 and conformance SHA512()
{
  unint64_t result = lazy protocol witness table cache variable for type SHA512 and conformance SHA512;
  if (!lazy protocol witness table cache variable for type SHA512 and conformance SHA512)
  {
    type metadata accessor for SHA512();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SHA512 and conformance SHA512);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1)
{
  return closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(a1);
}

uint64_t outlined init with take of NodeData(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of NodeData(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 80);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v4);
  return a1;
}

uint64_t outlined init with take of MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *outlined release of MaterialXAvailability(uint64_t *a1)
{
  return a1;
}

void closure #1 in osSignpost(_:log:name:id:type:state:formatStringTransform:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
}

uint64_t DynamicArrayLookupByString.path.getter()
{
  return swift_retain();
}

uint64_t DynamicArrayLookupByString.subscript.getter(uint64_t a1, void *a2)
{
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _ArrayProtocol.filter(_:)();
  uint64_t v4 = MEMORY[0x261184200]();
  if (v4 == 1)
  {
    Array.subscript.getter();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_getMetatypeMetadata();
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v18 = v12;
      v13._uint64_t countAndFlagsBits = 32;
      v13._char object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._uint64_t countAndFlagsBits = a1;
      v14._char object = a2;
      String.append(_:)(v14);
      uint64_t v8 = v18;
      type metadata accessor for DynamicArrayLookupByString.MemberLookupError();
      swift_getWitnessTable();
      swift_allocError();
      char v10 = 0;
      *(void *)uint64_t v9 = v16;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_getMetatypeMetadata();
      uint64_t v15 = String.init<A>(reflecting:)();
      uint64_t v17 = v5;
      v6._uint64_t countAndFlagsBits = 32;
      v6._char object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = a1;
      v7._char object = a2;
      String.append(_:)(v7);
      uint64_t v8 = v17;
      type metadata accessor for DynamicArrayLookupByString.MemberLookupError();
      swift_getWitnessTable();
      swift_allocError();
      *(void *)uint64_t v9 = v15;
      char v10 = 1;
    }
    *(void *)(v9 + 8) = v8;
    *(unsigned char *)(v9 + 16) = v10;
    return swift_willThrow();
  }
}

uint64_t closure #1 in DynamicArrayLookupByString.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAtKeyPath();
  if (v10 == a4 && v11 == a5) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t partial apply for closure #1 in DynamicArrayLookupByString.subscript.getter(uint64_t a1)
{
  return closure #1 in DynamicArrayLookupByString.subscript.getter(a1, v1[3], v1[4], v1[5], v1[6]) & 1;
}

uint64_t type metadata accessor for DynamicArrayLookupByString.MemberLookupError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for DynamicArrayLookupByString()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for DynamicArrayLookupByString(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DynamicArrayLookupByString(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for DynamicArrayLookupByString(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicArrayLookupByString(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicArrayLookupByString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for DynamicArrayLookupByString()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for DynamicArrayLookupByString.MemberLookupError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy11ShaderGraph11DebugConfigO5GroupOG_SSs5NeverOTg504_s11d7Graph11fg17O9debugModeShyAC5H72OGvpZfiAGyXEfU_SSAFcfu1_32fca4dd16cfbb9a2e4a4875ed65f685b6AFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v3 = a1;
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v21;
    int64_t v4 = specialized Set.startIndex.getter(v3);
    int v6 = v5;
    char v8 = v7 & 1;
    uint64_t v19 = v3;
    uint64_t v20 = v3 + 56;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v3 + 32))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x25C2D81ACLL);
      }
      if (((*(void *)(v20 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v3 + 36) != v6) {
        goto LABEL_21;
      }
      uint64_t v9 = *(void *)(v3 + 48);
      unint64_t v10 = 0xE400000000000000;
      uint64_t v11 = 1701736302;
      switch(*(unsigned char *)(v9 + v4))
      {
        case 1:
          unint64_t v10 = 0xE700000000000000;
          uint64_t v11 = 0x7972616D6D7573;
          break;
        case 2:
          unint64_t v10 = 0xE700000000000000;
          uint64_t v11 = 0x65766968637261;
          break;
        case 3:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 7630692;
          break;
        case 4:
          unint64_t v10 = 0xEC00000079726172;
          uint64_t v11 = 0x62694C6C6174656DLL;
          break;
        case 5:
          unint64_t v10 = 0xEE00687061724767;
          uint64_t v11 = 0x6E69686374697473;
          break;
        case 6:
          unint64_t v10 = 0xEA0000000000746FLL;
          uint64_t v11 = 0x446C616D696E696DLL;
          break;
        default:
          break;
      }
      unint64_t v13 = *(void *)(v21 + 16);
      unint64_t v12 = *(void *)(v21 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v21 + 16) = v13 + 1;
      uint64_t v14 = v21 + 16 * v13;
      *(void *)(v14 + 32) = v11;
      *(void *)(v14 + 40) = v10;
      uint64_t v3 = v19;
      int64_t v15 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v19);
      int64_t v4 = v15;
      int v6 = v16;
      char v8 = v17 & 1;
      --v1;
    }
    while (v1);
    outlined consume of Set<DebugConfig.Group>.Index._Variant(v15, v16, v17 & 1);
  }
  return v2;
}

uint64_t *DebugConfig.debugMode.unsafeMutableAddressor()
{
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  return &static DebugConfig.debugMode;
}

char *DebugConfig.tier1SupportOverrideEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1) {
    swift_once();
  }
  return &static DebugConfig.tier1SupportOverrideEnabled;
}

uint64_t DebugConfig.Group.rawValue.getter(char a1)
{
  uint64_t result = 1701736302;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7972616D6D7573;
      break;
    case 2:
      uint64_t result = 0x65766968637261;
      break;
    case 3:
      uint64_t result = 7630692;
      break;
    case 4:
      uint64_t result = 0x62694C6C6174656DLL;
      break;
    case 5:
      uint64_t result = 0x6E69686374697473;
      break;
    case 6:
      uint64_t result = 0x446C616D696E696DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DebugConfig.Group(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 1701736302;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1701736302;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x7972616D6D7573;
      break;
    case 2:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x65766968637261;
      break;
    case 3:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 7630692;
      break;
    case 4:
      uint64_t v5 = 0x62694C6C6174656DLL;
      unint64_t v4 = 0xEC00000079726172;
      break;
    case 5:
      uint64_t v5 = 0x6E69686374697473;
      unint64_t v4 = 0xEE00687061724767;
      break;
    case 6:
      uint64_t v5 = 0x446C616D696E696DLL;
      unint64_t v4 = 0xEA0000000000746FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x7972616D6D7573) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x65766968637261) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 7630692) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xEC00000079726172;
      if (v5 != 0x62694C6C6174656DLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v2 = 0x6E69686374697473;
      unint64_t v6 = 0xEE00687061724767;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xEA0000000000746FLL;
      if (v5 != 0x446C616D696E696DLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DebugConfig.Group()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DebugConfig.Group()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DebugConfig.Group()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DebugConfig.Group@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized DebugConfig.Group.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DebugConfig.Group(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701736302;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x7972616D6D7573;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x65766968637261;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 3:
      *(void *)a1 = 7630692;
      *(void *)(a1 + 8) = 0xE300000000000000;
      break;
    case 4:
      strcpy((char *)a1, "metalLibrary");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      strcpy((char *)a1, "stitchingGraph");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 6:
      *(void *)a1 = 0x446C616D696E696DLL;
      *(void *)(a1 + 8) = 0xEA0000000000746FLL;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void *DebugConfig.verbosityLevelDefaultsKey.unsafeMutableAddressor()
{
  return &static DebugConfig.verbosityLevelDefaultsKey;
}

unint64_t static DebugConfig.verbosityLevelDefaultsKey.getter()
{
  return 0xD000000000000024;
}

void *DebugConfig.debugModeKey.unsafeMutableAddressor()
{
  return &static DebugConfig.debugModeKey;
}

unint64_t static DebugConfig.debugModeKey.getter()
{
  return 0xD00000000000001FLL;
}

void *DebugConfig.tier1RESupportEnabledKey.unsafeMutableAddressor()
{
  return &static DebugConfig.tier1RESupportEnabledKey;
}

unint64_t static DebugConfig.tier1RESupportEnabledKey.getter()
{
  return 0xD000000000000030;
}

uint64_t one-time initialization function for debugMode()
{
  uint64_t result = closure #1 in variable initialization expression of static DebugConfig.debugMode();
  static DebugConfig.debugMode = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static DebugConfig.debugMode()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFFA40]), sel_initWithSuiteName_, 0);
  if (v0)
  {
    int64_t v1 = v0;
    type metadata accessor for SGGraph();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v3 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v4 = objc_msgSend(v3, sel_infoDictionary);
    uint64_t v53 = v3;
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v6 + 16)
        && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C646E75424643, 0xEF6E6F6973726556),
            (v8 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v55);
        swift_bridgeObjectRelease();
        if (*((void *)&v56 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v9 = v54[0];
            unint64_t v10 = v54[1];
LABEL_17:
            uint64_t v52 = v9;
            int64_t v15 = (void *)MEMORY[0x261183E60](0xD00000000000001FLL, 0x800000025C4230C0);
            id v16 = objc_msgSend(v1, sel_stringArrayForKey_, v15);

            if (v16)
            {
              uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v18 = *(void *)(v17 + 16);
              if (v18)
              {
                swift_bridgeObjectRetain();
                uint64_t v19 = (void **)(v17 + 40);
                uint64_t v20 = (char *)MEMORY[0x263F8EE78];
                do
                {
                  uint64_t v21 = (uint64_t)*(v19 - 1);
                  int v22 = *v19;
                  swift_bridgeObjectRetain();
                  v23._uint64_t countAndFlagsBits = v21;
                  v23._char object = v22;
                  unint64_t v24 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of closure #1 in variable initialization expression of static DebugConfig.debugMode, v23);
                  swift_bridgeObjectRelease();
                  if (v24 <= 6)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
                    }
                    unint64_t v26 = *((void *)v20 + 2);
                    unint64_t v25 = *((void *)v20 + 3);
                    if (v26 >= v25 >> 1) {
                      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v20);
                    }
                    *((void *)v20 + 2) = v26 + 1;
                    v20[v26 + 32] = v24;
                  }
                  v19 += 2;
                  --v18;
                }
                while (v18);
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v20 = (char *)MEMORY[0x263F8EE78];
              }
              uint64_t v27 = specialized Set.init<A>(_:)((uint64_t)v20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v27 = MEMORY[0x263F8EE88];
            }
            *(void *)&long long v55 = 91;
            *((void *)&v55 + 1) = 0xE100000000000000;
            v54[0] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy11ShaderGraph11DebugConfigO5GroupOG_SSs5NeverOTg504_s11d7Graph11fg17O9debugModeShyAC5H72OGvpZfiAGyXEfU_SSAFcfu1_32fca4dd16cfbb9a2e4a4875ed65f685b6AFSSTf3nnnpk_nTf1cn_n(v27);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v30 = v29;
            swift_bridgeObjectRelease();
            v31._uint64_t countAndFlagsBits = v28;
            v31._char object = v30;
            String.append(_:)(v31);
            swift_bridgeObjectRelease();
            v32._uint64_t countAndFlagsBits = 93;
            v32._char object = (void *)0xE100000000000000;
            String.append(_:)(v32);
            Swift::String v33 = (Swift::String)v55;
            if (*(void *)(v27 + 16))
            {
              Hasher.init(_seed:)();
              String.hash(into:)();
              Swift::Int v34 = Hasher._finalize()();
              uint64_t v35 = -1 << *(unsigned char *)(v27 + 32);
              unint64_t v36 = v34 & ~v35;
              if ((*(void *)(v27 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36))
              {
                uint64_t v37 = ~v35;
                while (2)
                {
                  switch(*(unsigned char *)(*(void *)(v27 + 48) + v36))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if (v38) {
                        goto LABEL_44;
                      }
                      unint64_t v36 = (v36 + 1) & v37;
                      if (((*(void *)(v27 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
                        break;
                      }
                      continue;
                    default:
                      swift_bridgeObjectRelease();
LABEL_44:
                      if (one-time initialization token for logger != -1) {
                        swift_once();
                      }
                      uint64_t v44 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v44, (uint64_t)logger);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      uint64_t v45 = Logger.logObject.getter();
                      os_log_type_t v46 = static os_log_type_t.info.getter();
                      if (os_log_type_enabled(v45, v46))
                      {
                        uint64_t v47 = swift_slowAlloc();
                        uint64_t v51 = swift_slowAlloc();
                        v54[0] = v51;
                        *(_DWORD *)uint64_t v47 = 136315394;
                        swift_bridgeObjectRetain();
                        *(void *)&long long v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v10, v54);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        *(_WORD *)(v47 + 12) = 2080;
                        if (*(void *)(v27 + 16) < 2uLL)
                        {
                          uint64_t v48 = 0;
                          unint64_t v49 = 0xE000000000000000;
                        }
                        else
                        {
                          *(void *)&long long v55 = 8316;
                          *((void *)&v55 + 1) = 0xE200000000000000;
                          String.append(_:)(v33);
                          unint64_t v49 = *((void *)&v55 + 1);
                          uint64_t v48 = v55;
                        }
                        *(void *)&long long v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v54);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease();
                        _os_log_impl(&dword_25C27E000, v45, v46, "DebugMode (%s): none %s", (uint8_t *)v47, 0x16u);
                        swift_arrayDestroy();
                        MEMORY[0x261185880](v51, -1, -1);
                        MEMORY[0x261185880](v47, -1, -1);
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease_n();
                      }

                      return MEMORY[0x263F8EE88];
                  }
                  break;
                }
              }
            }
            if (one-time initialization token for logger != -1) {
              swift_once();
            }
            uint64_t v39 = type metadata accessor for Logger();
            __swift_project_value_buffer(v39, (uint64_t)logger);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v40 = Logger.logObject.getter();
            os_log_type_t v41 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v40, v41))
            {
              uint64_t v42 = swift_slowAlloc();
              uint64_t v43 = swift_slowAlloc();
              *(void *)&long long v55 = v43;
              *(_DWORD *)uint64_t v42 = 136315394;
              swift_bridgeObjectRetain();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v10, (uint64_t *)&v55);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v42 + 12) = 2080;
              swift_bridgeObjectRetain();
              v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33._countAndFlagsBits, (unint64_t)v33._object, (uint64_t *)&v55);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_25C27E000, v40, v41, "DebugMode (%s): %s", (uint8_t *)v42, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x261185880](v43, -1, -1);
              MEMORY[0x261185880](v42, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }

            return v27;
          }
LABEL_16:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v9 = 0x7265566F4ELL;
          goto LABEL_17;
        }
      }
      else
      {
        long long v55 = 0u;
        long long v56 = 0u;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
    }
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_16;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_25C27E000, v12, v13, "Failed to construct UserDefaults(suiteName: nil)", v14, 2u);
    MEMORY[0x261185880](v14, -1, -1);
  }

  return MEMORY[0x263F8EE88];
}

uint64_t static DebugConfig.debugMode.getter()
{
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static DebugConfig.debugMode.setter(uint64_t a1)
{
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  static DebugConfig.debugMode = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static DebugConfig.debugMode.modify())()
{
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

id one-time initialization function for tier1SupportOverrideEnabled()
{
  id result = closure #1 in variable initialization expression of static DebugConfig.tier1SupportOverrideEnabled();
  static DebugConfig.tier1SupportOverrideEnabled = result & 1;
  return result;
}

id closure #1 in variable initialization expression of static DebugConfig.tier1SupportOverrideEnabled()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFFA40]), sel_initWithSuiteName_, 0);
  if (v0)
  {
    int64_t v1 = v0;
    unint64_t v2 = MEMORY[0x261183E60](0xD000000000000030, 0x800000025C4230E0);
    id v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_25C27E000, v2, v5, "Failed to construct UserDefaults(suiteName: nil)", v6, 2u);
      MEMORY[0x261185880](v6, -1, -1);
    }
    id v3 = 0;
  }

  return v3;
}

uint64_t static DebugConfig.tier1SupportOverrideEnabled.getter()
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static DebugConfig.tier1SupportOverrideEnabled;
}

uint64_t static DebugConfig.tier1SupportOverrideEnabled.setter(char a1)
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static DebugConfig.tier1SupportOverrideEnabled = a1 & 1;
  return result;
}

uint64_t (*static DebugConfig.tier1SupportOverrideEnabled.modify())()
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

id static DebugConfig.verbosityLevel.getter()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  int64_t v1 = (void *)MEMORY[0x261183E60](0xD000000000000024, 0x800000025C423090);
  id v2 = objc_msgSend(v0, sel_integerForKey_, v1);

  return v2;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t specialized DebugConfig.Group.init(rawValue:)(Swift::String string)
{
  char object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._char object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DebugConfig.Group.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type DebugConfig.Group and conformance DebugConfig.Group()
{
  unint64_t result = lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group;
  if (!lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group;
  if (!lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugConfig()
{
  return &type metadata for DebugConfig;
}

uint64_t getEnumTagSinglePayload for DebugConfig.Group(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DebugConfig.Group(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2D9D50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugConfig.Group()
{
  return &type metadata for DebugConfig.Group;
}

uint64_t outlined consume of Set<DebugConfig.Group>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v52 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)&v44 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  id v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v44 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  os_log_type_t v46 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  Swift::String v23 = (char *)&v44 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = v4;
  uint64_t v50 = v6;
  uint64_t v51 = a2;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v25 = v13;
    unint64_t v26 = v16;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = v47;
    uint64_t v29 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v45 = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v30(v47, v18, AssociatedTypeWitness);
    Swift::String v31 = v29;
    v30(v29, v26, AssociatedTypeWitness);
    Swift::String v32 = &v10[*(int *)(v27 + 48)];
    Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v33(v10, v28, AssociatedTypeWitness);
    v33(v32, v31, AssociatedTypeWitness);
    Swift::Int v34 = v46;
    v30(v46, v10, AssociatedTypeWitness);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v32, AssociatedTypeWitness);
    uint64_t v35 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v30(v10, v28, AssociatedTypeWitness);
    v30(v35, v31, AssociatedTypeWitness);
    unint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v30;
    uint64_t v37 = v49;
    v30(&v34[*(int *)(v49 + 36)], v35, AssociatedTypeWitness);
    v44(v10, AssociatedTypeWitness);
    uint64_t v38 = v48;
    uint64_t v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v34, v37);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v42 = type metadata accessor for Slice();
    uint64_t v43 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v52 + *(int *)(v42 + 40), v40, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v55, v37);
    v36(v43, v39, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v43 + *(int *)(v42 + 36), &v39[*(int *)(v37 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 24) = result;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._bounds.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence.init(_base:bounds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.keys.getter()
{
  return OrderedSet.subscript.getter(v0[3], v0[4], *v0);
}

__n128 OrderedDictionary.Elements.SubSequence.values.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  long long v8 = *(_OWORD *)(v1 + 3);
  uint64_t v9 = v3;
  long long v10 = *(_OWORD *)(v1 + 1);
  uint64_t v4 = type metadata accessor for OrderedDictionary.Values();
  uint64_t WitnessTable = swift_getWitnessTable();
  MutableCollection<>.subscript.getter((uint64_t)&v8, v4, WitnessTable, (uint64_t)&v11);
  uint64_t v6 = v12;
  __n128 result = v13;
  *(_OWORD *)a1 = v11;
  *(void *)(a1 + 16) = v6;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.index(forKey:)()
{
  uint64_t result = OrderedSet._find(_:)();
  if ((v2 & 1) == 0 && (result < *(void *)(v0 + 24) || result >= *(void *)(v0 + 32))) {
    return 0;
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence._base.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t OrderedDictionary.Elements.SubSequence._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._end.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

int8x16_t OrderedDictionary.Elements.SubSequence.Iterator.init(_base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(int8x16_t *)(a2 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = TupleTypeMetadata2;
  if (v3 >= v4)
  {
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
    return v11(a1, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    ContiguousArray.subscript.getter();
    ContiguousArray.subscript.getter();
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
    uint64_t v8 = *(void *)(v1 + 32);
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      __break(1u);
    }
    else {
      *(void *)(v1 + 32) = v10;
    }
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  swift_retain();
  swift_retain();
  return swift_retain();
}

int8x16_t protocol witness for Sequence.makeIterator() in conformance OrderedDictionary<A, B>.Elements.SubSequence@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  int8x16_t result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>.Elements.SubSequence()
{
  swift_getWitnessTable();
  uint64_t v0 = specialized Collection._copyToContiguousArray()();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedDictionary.Elements.SubSequence.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.indices.getter()
{
  return *(void *)(v0 + 24);
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(v3 + 24) > a3 || *(void *)(v3 + 32) <= a3)
  {
    __break(1u);
  }
  else
  {
    ContiguousArray.subscript.getter();
    return ContiguousArray.subscript.getter();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (v3[3] > result || v3[4] < a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    uint64_t v7 = v3[2];
    *a3 = v5;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = result;
    a3[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

BOOL OrderedDictionary.Elements.SubSequence.isEmpty.getter()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.count.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

void protocol witness for Collection.endIndex.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements.SubSequence(void *a1, uint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = malloc(0x68uLL);
  *a1 = v7;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[9] = TupleTypeMetadata2;
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  v7[10] = v11;
  uint64_t v12 = (char *)malloc(*(void *)(v11 + 64));
  v7[11] = v12;
  uint64_t v13 = *a2;
  long long v14 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v14;
  v7[4] = *(void *)(v3 + 32);
  uint64_t v15 = OrderedDictionary.Elements.SubSequence.subscript.read(v7 + 5, v13);
  uint64_t v17 = v16;
  v7[12] = v15;
  (*(void (**)(char *))(*(void *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v17, v8);
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements.SubSequence;
}

void protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements.SubSequence(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  (*(void (**)(void, void))(*(void *)(*a1 + 80) + 8))(*(void *)(*a1 + 88), *(void *)(*a1 + 72));
  uint64_t v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*OrderedDictionary.Elements.SubSequence.subscript.read(uint64_t *a1, uint64_t a2))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  OrderedDictionary.Elements.SubSequence.subscript.getter((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

double protocol witness for Collection.subscript.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  OrderedDictionary.Elements.SubSequence.subscript.getter(*a1, a1[1], v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

__n128 protocol witness for Collection.indices.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v16 - v11;
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v14 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

{
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  void v17[2];

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  char v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for ClosedRange();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v16 - v11;
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v14 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>.Elements.SubSequence()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in OrderedDictionary<A, B>.Elements.SubSequence()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedDictionary<A, B>.Elements.SubSequence()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in OrderedDictionary<A, B>.Elements.SubSequence()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in OrderedDictionary<A, B>.Elements.SubSequence()
{
  return swift_getWitnessTable();
}

uint64_t initializeWithCopy for OrderedDictionary.Elements.SubSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for OrderedDictionary.Elements.SubSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

void *assignWithCopy for OrderedDictionary.Elements.SubSequence(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for OrderedDictionary.Elements.SubSequence(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrderedDictionary.Elements.SubSequence(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrderedDictionary.Elements.SubSequence(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OrderedSet.init<A>(uncheckedUniqueElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v9 = Array.init<A>(_:)();
  uint64_t v19 = v9;
  uint64_t v10 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v11 = type metadata accessor for ContiguousArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v19, 0, 1, v10, v11, WitnessTable, a4);
  uint64_t v14 = ContiguousArray.count.getter();
  uint64_t v15 = 0;
  if (v14 >= 16)
  {
    swift_retain();
    uint64_t v15 = v13;
  }
  uint64_t v16 = OrderedSet.init(_uniqueElements:_:)(v9, v15);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v16;
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v13 = type metadata accessor for OrderedSet();
  if (v13 == a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v12, a1, a3);
    swift_dynamicCast();
    return v27[0];
  }
  uint64_t v14 = v13;
  if (type metadata accessor for Set() != a3 && type metadata accessor for OrderedSet.SubSequence() != a3)
  {
    v27[0] = OrderedSet.init()();
    v27[1] = v15;
    OrderedSet.append<A>(contentsOf:)(a1, v14, a3);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
    return v27[0];
  }
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17(v10, a1, a3);
  v17(v12, (uint64_t)v10, a3);
  uint64_t v18 = Array.init<A>(_:)();
  v27[0] = v18;
  uint64_t v19 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v20 = type metadata accessor for ContiguousArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v27, 0, 1, v19, v20, WitnessTable, a4);
  uint64_t v23 = ContiguousArray.count.getter();
  uint64_t v24 = 0;
  if (v23 >= 16)
  {
    swift_retain();
    uint64_t v24 = v22;
  }
  uint64_t v16 = OrderedSet.init(_uniqueElements:_:)(v18, v24);
  swift_release();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v10, a3);
  v25((char *)a1, a3);
  return v16;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OrderedSet.SubSequence._slice.getter();
  v19[1] = v7;
  v19[2] = v8;
  v19[3] = v9;
  type metadata accessor for ArraySlice();
  swift_unknownObjectRetain();
  swift_getWitnessTable();
  uint64_t v10 = Array.init<A>(_:)();
  v19[0] = v10;
  uint64_t v11 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v12 = type metadata accessor for ContiguousArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v19, 0, 1, v11, v12, WitnessTable, a6);
  uint64_t v15 = ContiguousArray.count.getter();
  uint64_t v16 = 0;
  if (v15 >= 16)
  {
    swift_retain();
    uint64_t v16 = v14;
  }
  uint64_t v17 = OrderedSet.init(_uniqueElements:_:)(v10, v16);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v17;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized OrderedSet.init(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.init<A>(_:)()
{
  uint64_t v0 = specialized OrderedSet.init<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v67 = a5;
  uint64_t v64 = a2;
  uint64_t v8 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for PartialRangeFrom();
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v49 - v11;
  uint64_t v62 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  char v61 = (char *)&v49 - v12;
  uint64_t v13 = type metadata accessor for PartialRangeUpTo();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v58 = (char *)&v49 - v15;
  uint64_t v63 = *(void *)(a3 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v49 - v23;
  uint64_t v25 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v26 = v67;
  uint64_t v67 = a4;
  uint64_t v66 = static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(v24, a1, 0, 1, v25, a3, v26, a4);
  uint64_t v27 = a1;
  uint64_t v28 = v8;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t AssociatedConformanceWitness = *(void *)(AssociatedConformanceWitness + 8);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = v19;
  uint64_t v30 = v19 + 8;
  Swift::String v31 = *(void (**)(char *, uint64_t))(v19 + 8);
  Swift::String v32 = v22;
  uint64_t v33 = v30;
  v31(v32, AssociatedTypeWitness);
  if (a1)
  {
    uint64_t v34 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v18, v27, a3);
    uint64_t v35 = Array.init<A>(_:)();
    uint64_t v36 = OrderedSet.init(_uniqueElements:_:)(v35, v66);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v27, a3);
    v31(v24, AssociatedTypeWitness);
    return v36;
  }
  uint64_t v52 = v31;
  uint64_t v53 = v28;
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v51 = v33;
    uint64_t v38 = v58;
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v49(v58, v24, AssociatedTypeWitness);
    uint64_t v39 = v60;
    swift_getWitnessTable();
    uint64_t v40 = (uint64_t)v61;
    uint64_t v50 = v27;
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v39);
    uint64_t v41 = v62;
    uint64_t v42 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
    uint64_t v43 = Array.init<A>(_:)();
    uint64_t v68 = OrderedSet.init(_uniqueElements:_:)(v43, v66);
    uint64_t v69 = v44;
    swift_retain();
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if (result)
    {
      uint64_t v45 = v54;
      v49(v54, v24, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = v42;
      uint64_t v46 = v56;
      swift_getWitnessTable();
      uint64_t v47 = v50;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v46);
      uint64_t v48 = type metadata accessor for OrderedSet();
      OrderedSet.append<A>(contentsOf:)(v40, v48, v41);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v47, a3);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v40, v41);
      v52(v24, AssociatedTypeWitness);
      return v68;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Set();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v4 = Array.init<A>(_:)();
  uint64_t v13 = v4;
  uint64_t v5 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v6 = type metadata accessor for ContiguousArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v13, 0, 1, v5, v6, WitnessTable, a3);
  uint64_t v9 = ContiguousArray.count.getter();
  uint64_t v10 = 0;
  if (v9 >= 16)
  {
    swift_retain();
    uint64_t v10 = v8;
  }
  uint64_t v11 = OrderedSet.init(_uniqueElements:_:)(v4, v10);
  swift_release();
  return v11;
}

uint64_t specialized OrderedSet.init<A>(_:)()
{
  return 0;
}

uint64_t MetalDataType.referenceTo(withAddressSpace:)(char a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*v1 + 200);
  uint64_t v5 = swift_retain();
  char v6 = v4(v5);
  type metadata accessor for MetalDataType.Reference();
  swift_allocObject();
  uint64_t v7 = specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(v2, v6 & 1, a1);
  swift_release();
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  char v9 = *(unsigned char *)(v3 + 32);
  uint64_t v22 = v3 + 80;
  int v23 = v5;
  uint64_t v24 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    unint64_t v12 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_29;
    }
    uint64_t v13 = v3;
    outlined init with copy of (MetalDataType, Any?)?(*(void *)(v3 + 56) + 40 * v6, (uint64_t)v28);
    outlined init with take of (MetalDataType, Any?)?((uint64_t)v28, (uint64_t)v27);
    outlined init with copy of (MetalDataType, Any?)?((uint64_t)v27, (uint64_t)&v25);
    if (v25)
    {
      int v14 = *(_DWORD *)(v25 + 56);
      swift_release();
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    }
    else
    {
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v25, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
      int v14 = 0;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v27, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
    uint64_t v2 = v29;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
      uint64_t v2 = v29;
    }
    unint64_t v16 = *(void *)(v2 + 16);
    unint64_t v15 = *(void *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      uint64_t v2 = v29;
    }
    *(void *)(v2 + 16) = v16 + 1;
    *(_DWORD *)(v2 + 4 * v16 + 32) = v14;
    char v9 = *(unsigned char *)(v13 + 32);
    unint64_t v10 = 1 << v9;
    if (v6 >= 1 << v9) {
      goto LABEL_30;
    }
    uint64_t v8 = v24;
    uint64_t v17 = *(void *)(v24 + 8 * v12);
    if ((v17 & (1 << v6)) == 0) {
      goto LABEL_31;
    }
    uint64_t v3 = v13;
    int v5 = v23;
    if (*(_DWORD *)(v13 + 36) != v23) {
      goto LABEL_32;
    }
    unint64_t v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      unint64_t v10 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v11 = v1;
    }
    else
    {
      unint64_t v19 = v12 + 1;
      unint64_t v20 = (v10 + 63) >> 6;
      int64_t v11 = v1;
      if (v12 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_25:
          unint64_t v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v12)
          {
            unint64_t v21 = *(void *)(v22 + 8 * v12++);
            if (v21)
            {
              unint64_t v19 = v12 + 1;
              goto LABEL_25;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v10;
    if (v7 == v11) {
      return v2;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  char v9 = *(unsigned char *)(v3 + 32);
  uint64_t v22 = v3 + 80;
  int v23 = v5;
  uint64_t v24 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    unint64_t v12 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_29;
    }
    uint64_t v13 = v3;
    outlined init with copy of (MetalDataType, Any?)?(*(void *)(v3 + 56) + 40 * v6, (uint64_t)v28);
    outlined init with take of (MetalDataType, Any?)?((uint64_t)v28, (uint64_t)v27);
    outlined init with copy of (MetalDataType, Any?)?((uint64_t)v27, (uint64_t)&v25);
    if (v25)
    {
      int v14 = *(_DWORD *)(v25 + 60);
      swift_release();
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    }
    else
    {
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v25, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
      int v14 = 0;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v27, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
    uint64_t v2 = v29;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
      uint64_t v2 = v29;
    }
    unint64_t v16 = *(void *)(v2 + 16);
    unint64_t v15 = *(void *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      uint64_t v2 = v29;
    }
    *(void *)(v2 + 16) = v16 + 1;
    *(_DWORD *)(v2 + 4 * v16 + 32) = v14;
    char v9 = *(unsigned char *)(v13 + 32);
    unint64_t v10 = 1 << v9;
    if (v6 >= 1 << v9) {
      goto LABEL_30;
    }
    uint64_t v8 = v24;
    uint64_t v17 = *(void *)(v24 + 8 * v12);
    if ((v17 & (1 << v6)) == 0) {
      goto LABEL_31;
    }
    uint64_t v3 = v13;
    int v5 = v23;
    if (*(_DWORD *)(v13 + 36) != v23) {
      goto LABEL_32;
    }
    unint64_t v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      unint64_t v10 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v11 = v1;
    }
    else
    {
      unint64_t v19 = v12 + 1;
      unint64_t v20 = (v10 + 63) >> 6;
      int64_t v11 = v1;
      if (v12 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_25:
          unint64_t v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v12)
          {
            unint64_t v21 = *(void *)(v22 + 8 * v12++);
            if (v21)
            {
              unint64_t v19 = v12 + 1;
              goto LABEL_25;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v10;
    if (v7 == v11) {
      return v2;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t *MetalDataType.sampler.unsafeMutableAddressor()
{
  if (one-time initialization token for sampler != -1) {
    swift_once();
  }
  return &static MetalDataType.sampler;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (_OWORD *)(a1 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      long long v10 = *v4;
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v6 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v11 + 16) = v7 + 1;
      uint64_t v8 = v11 + 48 * v7;
      *(void *)(v8 + 72) = v3;
      uint64_t v4 = (_OWORD *)((char *)v4 + 24);
      *(void *)(v8 + 32) = v5;
      *(_OWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 56) = MEMORY[0x263F8EE78];
      *(unsigned char *)(v8 + 64) = 1;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t *MetalDataType.void.unsafeMutableAddressor()
{
  if (one-time initialization token for void != -1) {
    swift_once();
  }
  return &static MetalDataType.void;
}

uint64_t *MetalDataType.texture2d_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_float != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2d_float;
}

uint64_t *MetalDataType.texture2d_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_half != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2d_half;
}

uint64_t *MetalDataType.texture2d_int.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_int != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2d_int;
}

uint64_t *MetalDataType.texture2darray_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_float != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2darray_float;
}

uint64_t *MetalDataType.texture2darray_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_half != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2darray_half;
}

uint64_t *MetalDataType.texture2darray_int.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_int != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2darray_int;
}

uint64_t *MetalDataType.texturecube_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecube_float != -1) {
    swift_once();
  }
  return &static MetalDataType.texturecube_float;
}

uint64_t *MetalDataType.texturecube_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecube_half != -1) {
    swift_once();
  }
  return &static MetalDataType.texturecube_half;
}

uint64_t *MetalDataType.texture3d_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_float != -1) {
    swift_once();
  }
  return &static MetalDataType.texture3d_float;
}

uint64_t *MetalDataType.texture3d_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_half != -1) {
    swift_once();
  }
  return &static MetalDataType.texture3d_half;
}

uint64_t *MetalDataType.texture3d_int.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_int != -1) {
    swift_once();
  }
  return &static MetalDataType.texture3d_int;
}

Swift::String_optional __swiftcall MetalDataType.textureBaseTypeName()()
{
  if (one-time initialization token for texture2d_int != -1) {
    swift_once();
  }
  unint64_t v0 = 0xE900000000000064;
  uint64_t v1 = 0x3265727574786574;
  uint64_t v2 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2d_int + 128);
  swift_retain();
  LOBYTE(v2) = v2();
  swift_release();
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for texture2d_half != -1) {
      swift_once();
    }
    uint64_t v3 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2d_half + 128);
    swift_retain();
    LOBYTE(v3) = v3();
    swift_release();
    if ((v3 & 1) == 0)
    {
      if (one-time initialization token for texture2d_uint != -1) {
        swift_once();
      }
      uint64_t v4 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2d_uint + 128);
      swift_retain();
      LOBYTE(v4) = v4();
      swift_release();
      if ((v4 & 1) == 0)
      {
        if (one-time initialization token for texture2d_float != -1) {
          swift_once();
        }
        uint64_t v5 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2d_float + 128);
        swift_retain();
        LOBYTE(v5) = v5();
        swift_release();
        if ((v5 & 1) == 0)
        {
          if (one-time initialization token for texture2d_short != -1) {
            swift_once();
          }
          unint64_t v6 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2d_short + 128);
          swift_retain();
          LOBYTE(v6) = v6();
          swift_release();
          if ((v6 & 1) == 0)
          {
            if (one-time initialization token for texture2d_ushort != -1) {
              swift_once();
            }
            unint64_t v7 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2d_ushort + 128);
            swift_retain();
            LOBYTE(v7) = v7();
            swift_release();
            if ((v7 & 1) == 0)
            {
              if (one-time initialization token for texture3d_int != -1) {
                swift_once();
              }
              uint64_t v1 = 0x3365727574786574;
              uint64_t v8 = *(uint64_t (**)())(*(void *)static MetalDataType.texture3d_int + 128);
              swift_retain();
              LOBYTE(v8) = v8();
              swift_release();
              if ((v8 & 1) == 0)
              {
                if (one-time initialization token for texture3d_half != -1) {
                  swift_once();
                }
                char v9 = *(uint64_t (**)())(*(void *)static MetalDataType.texture3d_half + 128);
                swift_retain();
                LOBYTE(v9) = v9();
                swift_release();
                if ((v9 & 1) == 0)
                {
                  if (one-time initialization token for texture3d_uint != -1) {
                    swift_once();
                  }
                  long long v10 = *(uint64_t (**)())(*(void *)static MetalDataType.texture3d_uint + 128);
                  swift_retain();
                  LOBYTE(v10) = v10();
                  swift_release();
                  if ((v10 & 1) == 0)
                  {
                    if (one-time initialization token for texture3d_float != -1) {
                      swift_once();
                    }
                    uint64_t v11 = *(uint64_t (**)())(*(void *)static MetalDataType.texture3d_float + 128);
                    swift_retain();
                    LOBYTE(v11) = v11();
                    swift_release();
                    if ((v11 & 1) == 0)
                    {
                      if (one-time initialization token for texture3d_short != -1) {
                        swift_once();
                      }
                      unint64_t v12 = *(uint64_t (**)())(*(void *)static MetalDataType.texture3d_short + 128);
                      swift_retain();
                      LOBYTE(v12) = v12();
                      swift_release();
                      if ((v12 & 1) == 0)
                      {
                        if (one-time initialization token for texture3d_ushort != -1) {
                          swift_once();
                        }
                        uint64_t v13 = *(uint64_t (**)())(*(void *)static MetalDataType.texture3d_ushort + 128);
                        swift_retain();
                        LOBYTE(v13) = v13();
                        swift_release();
                        if ((v13 & 1) == 0)
                        {
                          if (one-time initialization token for texturecube_half != -1) {
                            swift_once();
                          }
                          unint64_t v0 = 0xEB00000000656275;
                          uint64_t v1 = 0x6365727574786574;
                          int v14 = *(uint64_t (**)())(*(void *)static MetalDataType.texturecube_half + 128);
                          swift_retain();
                          LOBYTE(v14) = v14();
                          swift_release();
                          if ((v14 & 1) == 0)
                          {
                            if (one-time initialization token for texturecube_float != -1) {
                              swift_once();
                            }
                            unint64_t v15 = *(uint64_t (**)())(*(void *)static MetalDataType.texturecube_float + 128);
                            swift_retain();
                            LOBYTE(v15) = v15();
                            swift_release();
                            if ((v15 & 1) == 0)
                            {
                              if (one-time initialization token for depth2d_half != -1) {
                                swift_once();
                              }
                              uint64_t v1 = 0x64326874706564;
                              unint64_t v16 = *(uint64_t (**)())(*(void *)static MetalDataType.depth2d_half + 128);
                              swift_retain();
                              LOBYTE(v16) = v16();
                              swift_release();
                              if (v16) {
                                goto LABEL_49;
                              }
                              if (one-time initialization token for depth2d_float != -1) {
                                swift_once();
                              }
                              uint64_t v17 = *(uint64_t (**)())(*(void *)static MetalDataType.depth2d_float + 128);
                              swift_retain();
                              LOBYTE(v17) = v17();
                              swift_release();
                              if (v17)
                              {
LABEL_49:
                                unint64_t v0 = 0xE700000000000000;
                              }
                              else
                              {
                                if (one-time initialization token for texture2darray_half != -1) {
                                  swift_once();
                                }
                                unint64_t v18 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2darray_half
                                                                 + 128);
                                swift_retain();
                                LOBYTE(v18) = v18();
                                swift_release();
                                if (v18) {
                                  goto LABEL_56;
                                }
                                if (one-time initialization token for texture2darray_float != -1) {
                                  swift_once();
                                }
                                unint64_t v19 = *(uint64_t (**)())(*(void *)static MetalDataType.texture2darray_float
                                                                 + 128);
                                swift_retain();
                                char v20 = v19();
                                swift_release();
                                if (v20)
                                {
LABEL_56:
                                  unint64_t v0 = 0xEE00796172726164;
                                  uint64_t v1 = 0x3265727574786574;
                                }
                                else
                                {
                                  uint64_t v1 = 0;
                                  unint64_t v0 = 0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v21 = v1;
  uint64_t v22 = (void *)v0;
  result.value._char object = v22;
  result.value._uint64_t countAndFlagsBits = v21;
  return result;
}

uint64_t MetalDataType.metalTypeName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalDataType.note.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalDataType.size.getter()
{
  return *(unsigned int *)(v0 + 56);
}

uint64_t MetalDataType.alignment.getter()
{
  return *(unsigned int *)(v0 + 60);
}

uint64_t MetalDataType.isConst.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t MetalDataType.isConst.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 64) = a1;
  return result;
}

uint64_t (*MetalDataType.isConst.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

unint64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    unsigned int v2 = 0;
    return v2 | ((unint64_t)(v1 == 0) << 32);
  }
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 9)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
      uint32x4_t v5 = (uint32x4_t)vdupq_n_s32(v2);
      unint64_t v6 = (uint32x4_t *)(a1 + 52);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFF8;
      uint32x4_t v8 = v5;
      do
      {
        uint32x4_t v5 = vmaxq_u32(v5, v6[-1]);
        uint32x4_t v8 = vmaxq_u32(v8, *v6);
        v6 += 2;
        v7 -= 8;
      }
      while (v7);
      unsigned int v2 = vmaxvq_u32(vmaxq_u32(v5, v8));
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFF8)) {
        return v2 | ((unint64_t)(v1 == 0) << 32);
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v9 = v1 - v4;
    long long v10 = (unsigned int *)(a1 + 4 * v4 + 32);
    do
    {
      unsigned int v12 = *v10++;
      unsigned int v11 = v12;
      if (v2 <= v12) {
        unsigned int v2 = v11;
      }
      --v9;
    }
    while (v9);
  }
  return v2 | ((unint64_t)(v1 == 0) << 32);
}

void *MetalDataType.offsetList.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  unsigned int v12 = (void *)MEMORY[0x263F8EE78];
  int v11 = 0;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = (void *)(v1 + 72);
    do
    {
      uint64_t v4 = *(v3 - 5);
      uint64_t v5 = *(v3 - 4);
      uint64_t v6 = *(v3 - 3);
      uint64_t v7 = *(v3 - 2);
      char v8 = *((unsigned char *)v3 - 8);
      uint64_t v9 = *v3;
      v3 += 6;
      v13[0] = v4;
      v13[1] = v5;
      v13[2] = v6;
      void v13[3] = v7;
      char v14 = v8;
      uint64_t v15 = v9;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      specialized closure #1 in calculateOffsets(for:)((uint64_t)v13, &v11, &v12);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
}

uint64_t MetalDataType.dereferenced.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.qualifiedName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalDataType.isEqual(to:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    if (v1 == *(void *)(result + 24) && v2 == *(void *)(result + 32))
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t MetalDataType.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._char object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._char object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x283A6C6174656DLL;
}

uint64_t MetalDataType.asMetalDataType.getter()
{
  return swift_retain();
}

void MetalDataType.__allocating_init(properties:)()
{
}

void MetalDataType.init(properties:)()
{
}

uint64_t MetalDataType.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalDataType.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MetalDataType()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t MetalDataType.MTLTextureType.getter()
{
  if (one-time initialization token for texture2d_int != -1) {
    swift_once();
  }
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_int + 128);
  swift_retain();
  LOBYTE(v1) = v1(v0);
  swift_release();
  if (v1) {
    return 2;
  }
  if (one-time initialization token for texture2d_half != -1) {
    swift_once();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_half + 128);
  swift_retain();
  LOBYTE(v2) = v2(v0);
  swift_release();
  if (v2) {
    return 2;
  }
  if (one-time initialization token for texture2d_uint != -1) {
    swift_once();
  }
  Swift::String v3 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_uint + 128);
  swift_retain();
  LOBYTE(v3) = v3(v0);
  swift_release();
  if (v3) {
    return 2;
  }
  if (one-time initialization token for texture2d_float != -1) {
    swift_once();
  }
  Swift::String v4 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_float + 128);
  swift_retain();
  LOBYTE(v4) = v4(v0);
  swift_release();
  if (v4) {
    return 2;
  }
  if (one-time initialization token for texture2d_short != -1) {
    swift_once();
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_short + 128);
  swift_retain();
  LOBYTE(v5) = v5(v0);
  swift_release();
  if (v5) {
    return 2;
  }
  if (one-time initialization token for texture2d_ushort != -1) {
    swift_once();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_ushort + 128);
  swift_retain();
  LOBYTE(v6) = v6(v0);
  swift_release();
  if (v6) {
    return 2;
  }
  if (one-time initialization token for texture3d_int != -1) {
    swift_once();
  }
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_int + 128);
  swift_retain();
  LOBYTE(v8) = v8(v0);
  swift_release();
  if (v8) {
    return 7;
  }
  if (one-time initialization token for texture3d_half != -1) {
    swift_once();
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_half + 128);
  swift_retain();
  LOBYTE(v9) = v9(v0);
  swift_release();
  if (v9) {
    return 7;
  }
  if (one-time initialization token for texture3d_uint != -1) {
    swift_once();
  }
  long long v10 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_uint + 128);
  swift_retain();
  LOBYTE(v10) = v10(v0);
  swift_release();
  if (v10) {
    return 7;
  }
  if (one-time initialization token for texture3d_float != -1) {
    swift_once();
  }
  int v11 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_float + 128);
  swift_retain();
  LOBYTE(v11) = v11(v0);
  swift_release();
  if (v11) {
    return 7;
  }
  if (one-time initialization token for texture3d_short != -1) {
    swift_once();
  }
  unsigned int v12 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_short + 128);
  swift_retain();
  LOBYTE(v12) = v12(v0);
  swift_release();
  if (v12) {
    return 7;
  }
  if (one-time initialization token for texture3d_ushort != -1) {
    swift_once();
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_ushort + 128);
  swift_retain();
  LOBYTE(v13) = v13(v0);
  swift_release();
  if (v13) {
    return 7;
  }
  if (one-time initialization token for texture2darray_int != -1) {
    swift_once();
  }
  char v14 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_int + 128);
  swift_retain();
  LOBYTE(v14) = v14(v0);
  swift_release();
  if (v14) {
    return 3;
  }
  if (one-time initialization token for texture2darray_half != -1) {
    swift_once();
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_half + 128);
  swift_retain();
  LOBYTE(v15) = v15(v0);
  swift_release();
  if (v15) {
    return 3;
  }
  if (one-time initialization token for texture2darray_uint != -1) {
    swift_once();
  }
  unint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_uint + 128);
  swift_retain();
  LOBYTE(v16) = v16(v0);
  swift_release();
  if (v16) {
    return 3;
  }
  if (one-time initialization token for texture2darray_float != -1) {
    swift_once();
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_float + 128);
  swift_retain();
  LOBYTE(v17) = v17(v0);
  swift_release();
  if (v17) {
    return 3;
  }
  if (one-time initialization token for texture2darray_short != -1) {
    swift_once();
  }
  unint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_short + 128);
  swift_retain();
  LOBYTE(v18) = v18(v0);
  swift_release();
  if (v18) {
    return 3;
  }
  if (one-time initialization token for texture2darray_ushort != -1) {
    swift_once();
  }
  unint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_ushort + 128);
  swift_retain();
  LOBYTE(v19) = v19(v0);
  swift_release();
  if (v19) {
    return 3;
  }
  if (one-time initialization token for texturecube_half != -1) {
    swift_once();
  }
  char v20 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texturecube_half + 128);
  swift_retain();
  LOBYTE(v20) = v20(v0);
  swift_release();
  if (v20) {
    return 5;
  }
  if (one-time initialization token for texturecube_float != -1) {
    swift_once();
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texturecube_float + 128);
  swift_retain();
  char v22 = v21(v0);
  swift_release();
  if (v22) {
    return 5;
  }
  else {
    return 0;
  }
}

uint64_t *MetalDataType.texture2d_uint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_uint != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2d_uint;
}

uint64_t *MetalDataType.texture2d_short.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_short != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2d_short;
}

uint64_t *MetalDataType.texture2d_ushort.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_ushort != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2d_ushort;
}

uint64_t *MetalDataType.texture3d_uint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_uint != -1) {
    swift_once();
  }
  return &static MetalDataType.texture3d_uint;
}

uint64_t *MetalDataType.texture3d_short.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_short != -1) {
    swift_once();
  }
  return &static MetalDataType.texture3d_short;
}

uint64_t *MetalDataType.texture3d_ushort.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_ushort != -1) {
    swift_once();
  }
  return &static MetalDataType.texture3d_ushort;
}

uint64_t *MetalDataType.texture2darray_uint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_uint != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2darray_uint;
}

uint64_t *MetalDataType.texture2darray_short.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_short != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2darray_short;
}

uint64_t *MetalDataType.texture2darray_ushort.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_ushort != -1) {
    swift_once();
  }
  return &static MetalDataType.texture2darray_ushort;
}

uint64_t MetalDataType.textureElementType.getter()
{
  if (one-time initialization token for texture2d_half != -1) {
    swift_once();
  }
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_half + 128);
  swift_retain();
  LOBYTE(v1) = v1(v0);
  swift_release();
  if (v1) {
    goto LABEL_13;
  }
  if (one-time initialization token for texture3d_half != -1) {
    swift_once();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_half + 128);
  swift_retain();
  LOBYTE(v2) = v2(v0);
  swift_release();
  if (v2) {
    goto LABEL_13;
  }
  if (one-time initialization token for texture2darray_half != -1) {
    swift_once();
  }
  Swift::String v3 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_half + 128);
  swift_retain();
  LOBYTE(v3) = v3(v0);
  swift_release();
  if (v3) {
    goto LABEL_13;
  }
  if (one-time initialization token for texturecube_half != -1) {
    swift_once();
  }
  Swift::String v4 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texturecube_half + 128);
  swift_retain();
  LOBYTE(v4) = v4(v0);
  swift_release();
  if (v4)
  {
LABEL_13:
    if (one-time initialization token for half == -1) {
      return swift_retain();
    }
LABEL_30:
    swift_once();
    return swift_retain();
  }
  if (one-time initialization token for texture2d_float != -1) {
    swift_once();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_float + 128);
  swift_retain();
  LOBYTE(v6) = v6(v0);
  swift_release();
  if (v6) {
    goto LABEL_27;
  }
  if (one-time initialization token for texture3d_float != -1) {
    swift_once();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_float + 128);
  swift_retain();
  LOBYTE(v7) = v7(v0);
  swift_release();
  if (v7) {
    goto LABEL_27;
  }
  if (one-time initialization token for texture2darray_float != -1) {
    swift_once();
  }
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_float + 128);
  swift_retain();
  LOBYTE(v8) = v8(v0);
  swift_release();
  if (v8) {
    goto LABEL_27;
  }
  if (one-time initialization token for texturecube_float != -1) {
    swift_once();
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texturecube_float + 128);
  swift_retain();
  char v10 = v9(v0);
  swift_release();
  if (v10)
  {
LABEL_27:
    if (one-time initialization token for float == -1) {
      return swift_retain();
    }
    goto LABEL_30;
  }
  return 0;
}

uint64_t *MetalDataType.half.unsafeMutableAddressor()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  return &static MetalDataType.half;
}

uint64_t *MetalDataType.float.unsafeMutableAddressor()
{
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  return &static MetalDataType.float;
}

uint64_t MetalDataType.MTLDataType.getter()
{
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 3;
  }
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 4;
  }
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 5;
  }
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 6;
  }
  if (one-time initialization token for float2x2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 7;
  }
  if (one-time initialization token for float2x3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 8;
  }
  if (one-time initialization token for float2x4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 9;
  }
  if (one-time initialization token for float3x2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 10;
  }
  if (one-time initialization token for float3x3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 11;
  }
  if (one-time initialization token for float3x4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 12;
  }
  if (one-time initialization token for float4x2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 13;
  }
  if (one-time initialization token for float4x3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 14;
  }
  if (one-time initialization token for float4x4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 15;
  }
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 16;
  }
  if (one-time initialization token for half2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 17;
  }
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 18;
  }
  if (one-time initialization token for half4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 19;
  }
  if (one-time initialization token for color3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 5;
  }
  if (one-time initialization token for color4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 6;
  }
  if (one-time initialization token for int32 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 29;
  }
  if (one-time initialization token for int2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 30;
  }
  if (one-time initialization token for int3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 31;
  }
  if (one-time initialization token for int4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 32;
  }
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 33;
  }
  if (one-time initialization token for uint2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 34;
  }
  if (one-time initialization token for uint3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 35;
  }
  if (one-time initialization token for uint4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 36;
  }
  if (one-time initialization token for int16 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 37;
  }
  if (one-time initialization token for uint16 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 41;
  }
  if (one-time initialization token for int8 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 45;
  }
  if (one-time initialization token for uint8 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 49;
  }
  if (one-time initialization token for BOOL != -1) {
    swift_once();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.BOOL + 128);
  swift_retain();
  LOBYTE(v2) = v2(v0);
  swift_release();
  if (v2) {
    return 53;
  }
  if (one-time initialization token for texture2d_int != -1) {
    swift_once();
  }
  Swift::String v3 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_int + 128);
  swift_retain();
  LOBYTE(v3) = v3(v0);
  swift_release();
  if (v3) {
    return 58;
  }
  if (one-time initialization token for texture2d_uint != -1) {
    swift_once();
  }
  Swift::String v4 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_uint + 128);
  swift_retain();
  LOBYTE(v4) = v4(v0);
  swift_release();
  if (v4) {
    return 58;
  }
  if (one-time initialization token for texture2d_short != -1) {
    swift_once();
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_short + 128);
  swift_retain();
  LOBYTE(v5) = v5(v0);
  swift_release();
  if (v5) {
    return 58;
  }
  if (one-time initialization token for texture2d_ushort != -1) {
    swift_once();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_ushort + 128);
  swift_retain();
  LOBYTE(v6) = v6(v0);
  swift_release();
  if (v6) {
    return 58;
  }
  if (one-time initialization token for texture2d_half != -1) {
    swift_once();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_half + 128);
  swift_retain();
  LOBYTE(v7) = v7(v0);
  swift_release();
  if (v7) {
    return 58;
  }
  if (one-time initialization token for texture2d_float != -1) {
    swift_once();
  }
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2d_float + 128);
  swift_retain();
  LOBYTE(v8) = v8(v0);
  swift_release();
  if (v8) {
    return 58;
  }
  if (one-time initialization token for texture2darray_int != -1) {
    swift_once();
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_int + 128);
  swift_retain();
  LOBYTE(v9) = v9(v0);
  swift_release();
  if (v9) {
    return 58;
  }
  if (one-time initialization token for texture2darray_uint != -1) {
    swift_once();
  }
  char v10 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_uint + 128);
  swift_retain();
  LOBYTE(v10) = v10(v0);
  swift_release();
  if (v10) {
    return 58;
  }
  if (one-time initialization token for texture2darray_short != -1) {
    swift_once();
  }
  int v11 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_short + 128);
  swift_retain();
  LOBYTE(v11) = v11(v0);
  swift_release();
  if (v11) {
    return 58;
  }
  if (one-time initialization token for texture2darray_ushort != -1) {
    swift_once();
  }
  unsigned int v12 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_ushort + 128);
  swift_retain();
  LOBYTE(v12) = v12(v0);
  swift_release();
  if (v12) {
    return 58;
  }
  if (one-time initialization token for texture2darray_half != -1) {
    swift_once();
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_half + 128);
  swift_retain();
  LOBYTE(v13) = v13(v0);
  swift_release();
  if (v13) {
    return 58;
  }
  if (one-time initialization token for texture2darray_float != -1) {
    swift_once();
  }
  char v14 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture2darray_float + 128);
  swift_retain();
  LOBYTE(v14) = v14(v0);
  swift_release();
  if (v14) {
    return 58;
  }
  if (one-time initialization token for texture3d_int != -1) {
    swift_once();
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_int + 128);
  swift_retain();
  LOBYTE(v15) = v15(v0);
  swift_release();
  if (v15) {
    return 58;
  }
  if (one-time initialization token for texture3d_uint != -1) {
    swift_once();
  }
  unint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_uint + 128);
  swift_retain();
  LOBYTE(v16) = v16(v0);
  swift_release();
  if (v16) {
    return 58;
  }
  if (one-time initialization token for texture3d_short != -1) {
    swift_once();
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_short + 128);
  swift_retain();
  LOBYTE(v17) = v17(v0);
  swift_release();
  if (v17) {
    return 58;
  }
  if (one-time initialization token for texture3d_ushort != -1) {
    swift_once();
  }
  unint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_ushort + 128);
  swift_retain();
  LOBYTE(v18) = v18(v0);
  swift_release();
  if (v18) {
    return 58;
  }
  if (one-time initialization token for texture3d_half != -1) {
    swift_once();
  }
  unint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_half + 128);
  swift_retain();
  LOBYTE(v19) = v19(v0);
  swift_release();
  if (v19) {
    return 58;
  }
  if (one-time initialization token for texture3d_float != -1) {
    swift_once();
  }
  char v20 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texture3d_float + 128);
  swift_retain();
  LOBYTE(v20) = v20(v0);
  swift_release();
  if (v20) {
    return 58;
  }
  if (one-time initialization token for texturecube_half != -1) {
    swift_once();
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texturecube_half + 128);
  swift_retain();
  LOBYTE(v21) = v21(v0);
  swift_release();
  if (v21) {
    return 58;
  }
  if (one-time initialization token for texturecube_float != -1) {
    swift_once();
  }
  char v22 = *(uint64_t (**)(uint64_t))(*(void *)static MetalDataType.texturecube_float + 128);
  swift_retain();
  LOBYTE(v22) = v22(v0);
  swift_release();
  if (v22) {
    return 58;
  }
  if (one-time initialization token for int64 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 81;
  }
  else {
    return 0;
  }
}

uint64_t *MetalDataType.float2.unsafeMutableAddressor()
{
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  return &static MetalDataType.float2;
}

uint64_t *MetalDataType.float3.unsafeMutableAddressor()
{
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  return &static MetalDataType.float3;
}

uint64_t *MetalDataType.float4.unsafeMutableAddressor()
{
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  return &static MetalDataType.float4;
}

uint64_t *MetalDataType.float2x2.unsafeMutableAddressor()
{
  if (one-time initialization token for float2x2 != -1) {
    swift_once();
  }
  return &static MetalDataType.float2x2;
}

uint64_t *MetalDataType.float2x3.unsafeMutableAddressor()
{
  if (one-time initialization token for float2x3 != -1) {
    swift_once();
  }
  return &static MetalDataType.float2x3;
}

uint64_t *MetalDataType.float2x4.unsafeMutableAddressor()
{
  if (one-time initialization token for float2x4 != -1) {
    swift_once();
  }
  return &static MetalDataType.float2x4;
}

uint64_t *MetalDataType.float3x2.unsafeMutableAddressor()
{
  if (one-time initialization token for float3x2 != -1) {
    swift_once();
  }
  return &static MetalDataType.float3x2;
}

uint64_t *MetalDataType.float3x3.unsafeMutableAddressor()
{
  if (one-time initialization token for float3x3 != -1) {
    swift_once();
  }
  return &static MetalDataType.float3x3;
}

uint64_t *MetalDataType.float3x4.unsafeMutableAddressor()
{
  if (one-time initialization token for float3x4 != -1) {
    swift_once();
  }
  return &static MetalDataType.float3x4;
}

uint64_t *MetalDataType.float4x2.unsafeMutableAddressor()
{
  if (one-time initialization token for float4x2 != -1) {
    swift_once();
  }
  return &static MetalDataType.float4x2;
}

uint64_t *MetalDataType.float4x3.unsafeMutableAddressor()
{
  if (one-time initialization token for float4x3 != -1) {
    swift_once();
  }
  return &static MetalDataType.float4x3;
}

uint64_t *MetalDataType.float4x4.unsafeMutableAddressor()
{
  if (one-time initialization token for float4x4 != -1) {
    swift_once();
  }
  return &static MetalDataType.float4x4;
}

uint64_t *MetalDataType.half2.unsafeMutableAddressor()
{
  if (one-time initialization token for half2 != -1) {
    swift_once();
  }
  return &static MetalDataType.half2;
}

uint64_t *MetalDataType.half3.unsafeMutableAddressor()
{
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  return &static MetalDataType.half3;
}

uint64_t *MetalDataType.half4.unsafeMutableAddressor()
{
  if (one-time initialization token for half4 != -1) {
    swift_once();
  }
  return &static MetalDataType.half4;
}

uint64_t *MetalDataType.color3.unsafeMutableAddressor()
{
  if (one-time initialization token for color3 != -1) {
    swift_once();
  }
  return &static MetalDataType.color3;
}

uint64_t *MetalDataType.color4.unsafeMutableAddressor()
{
  if (one-time initialization token for color4 != -1) {
    swift_once();
  }
  return &static MetalDataType.color4;
}

uint64_t static MetalDataType.int.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int32);
}

uint64_t *MetalDataType.int2.unsafeMutableAddressor()
{
  if (one-time initialization token for int2 != -1) {
    swift_once();
  }
  return &static MetalDataType.int2;
}

uint64_t *MetalDataType.int3.unsafeMutableAddressor()
{
  if (one-time initialization token for int3 != -1) {
    swift_once();
  }
  return &static MetalDataType.int3;
}

uint64_t *MetalDataType.int4.unsafeMutableAddressor()
{
  if (one-time initialization token for int4 != -1) {
    swift_once();
  }
  return &static MetalDataType.int4;
}

uint64_t static MetalDataType.uint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint32);
}

uint64_t *MetalDataType.uint2.unsafeMutableAddressor()
{
  if (one-time initialization token for uint2 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint2;
}

uint64_t *MetalDataType.uint3.unsafeMutableAddressor()
{
  if (one-time initialization token for uint3 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint3;
}

uint64_t *MetalDataType.uint4.unsafeMutableAddressor()
{
  if (one-time initialization token for uint4 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint4;
}

uint64_t static MetalDataType.short.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int16);
}

uint64_t static MetalDataType.ushort.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint16);
}

uint64_t static MetalDataType.char.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int8);
}

uint64_t static MetalDataType.uchar.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint8);
}

uint64_t *MetalDataType.BOOL.unsafeMutableAddressor()
{
  if (one-time initialization token for BOOL != -1) {
    swift_once();
  }
  return &static MetalDataType.BOOL;
}

uint64_t static MetalDataType.long.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int64);
}

uint64_t MetalDataType.Struct.__allocating_init(note:typeName:fieldSpecs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(a5);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, 0x100000000, 0x100000000, 0, v9, v10);
  swift_release();
  return v11;
}

uint64_t MetalDataType.Struct.__allocating_init(note:typeName:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, 0x100000000, 0x100000000, 0, a5, v10);
  swift_release();
  return v11;
}

uint64_t MetalDataType.Struct.init(note:typeName:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, 0x100000000, 0x100000000, 0, a5, v7);
  swift_release();
  return v5;
}

uint64_t MetalDataType.Struct.getElementFunctionName(for:)()
{
  return specialized MetalDataType.Struct.getElementFunctionName(for:)();
}

uint64_t MetalDataType.Vector.componentType.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.Vector.componentCount.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t MetalDataType.Vector.__allocating_init(typeName:componentType:componentCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  swift_allocObject();
  uint64_t v12 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

uint64_t MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t MetalDataType.Vector.__ivar_destroyer()
{
  return swift_release();
}

uint64_t MetalDataType.Vector.deinit()
{
  return MetalDataType.Vector.deinit(MEMORY[0x263F8EED8]);
}

uint64_t MetalDataType.Vector.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit(MEMORY[0x263F8EED8]);
}

uint64_t MetalDataType.Number.__allocating_init(note:typeName:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = a2;
  *(unsigned char *)(result + 64) = 0;
  *(_DWORD *)(result + 56) = a5;
  *(_DWORD *)(result + 60) = a6;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = a3;
  return result;
}

uint64_t MetalDataType.Number.init(note:typeName:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(unsigned char *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 56) = a5;
  *(_DWORD *)(v6 + 60) = a6;
  *(void *)(v6 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a3;
  return v6;
}

uint64_t MetalDataType.Struct.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalDataType.Struct.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.Enum.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalDataType.Enum.__allocating_init(note:typeName:types:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 72) = a5;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v11);
  unint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    unsigned int v14 = 0;
    goto LABEL_13;
  }
  unsigned int v14 = *(_DWORD *)(v12 + 32);
  unint64_t v15 = v13 - 1;
  if (v13 == 1) {
    goto LABEL_13;
  }
  if (v13 >= 9)
  {
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint32x4_t v17 = (uint32x4_t)vdupq_n_s32(v14);
    unint64_t v18 = (uint32x4_t *)(v12 + 52);
    unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFF8;
    uint32x4_t v20 = v17;
    do
    {
      uint32x4_t v17 = vmaxq_u32(v17, v18[-1]);
      uint32x4_t v20 = vmaxq_u32(v20, *v18);
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    unsigned int v14 = vmaxvq_u32(vmaxq_u32(v17, v20));
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v16 = 1;
  }
  unint64_t v21 = v13 - v16;
  char v22 = (unsigned int *)(v12 + 4 * v16 + 32);
  do
  {
    unsigned int v24 = *v22++;
    unsigned int v23 = v24;
    if (v14 <= v24) {
      unsigned int v14 = v23;
    }
    --v21;
  }
  while (v21);
LABEL_13:
  BOOL v25 = v13 == 0;
  swift_bridgeObjectRelease();
  uint64_t v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(a5);
  swift_bridgeObjectRelease();
  unint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    unsigned int v28 = 0;
    goto LABEL_25;
  }
  unsigned int v28 = *(_DWORD *)(v26 + 32);
  unint64_t v29 = v27 - 1;
  if (v27 != 1)
  {
    if (v27 >= 9)
    {
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8 | 1;
      uint32x4_t v31 = (uint32x4_t)vdupq_n_s32(v28);
      Swift::String v32 = (uint32x4_t *)(v26 + 52);
      unint64_t v33 = v29 & 0xFFFFFFFFFFFFFFF8;
      uint32x4_t v34 = v31;
      do
      {
        uint32x4_t v31 = vmaxq_u32(v31, v32[-1]);
        uint32x4_t v34 = vmaxq_u32(v34, *v32);
        v32 += 2;
        v33 -= 8;
      }
      while (v33);
      unsigned int v28 = vmaxvq_u32(vmaxq_u32(v31, v34));
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v30 = 1;
    }
    unint64_t v35 = v27 - v30;
    uint64_t v36 = (unsigned int *)(v26 + 4 * v30 + 32);
    do
    {
      unsigned int v38 = *v36++;
      unsigned int v37 = v38;
      if (v28 <= v38) {
        unsigned int v28 = v37;
      }
      --v35;
    }
    while (v35);
  }
LABEL_25:
  BOOL v39 = v27 == 0;
  uint64_t v40 = v28;
  swift_bridgeObjectRelease();
  uint64_t v41 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, v14 | ((unint64_t)v25 << 32), v40 | ((unint64_t)v39 << 32), 0, MEMORY[0x263F8EE78], v10);
  swift_release();
  return v41;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint32x4_t v17;
  uint32x4_t *v18;
  unint64_t v19;
  uint32x4_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint32x4_t v31;
  uint32x4_t *v32;
  unint64_t v33;
  uint32x4_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v9 = specialized _NativeDictionary.mapValues<A>(_:)(a5);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 72) = v9;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v11);
  unint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    unsigned int v14 = 0;
    goto LABEL_13;
  }
  unsigned int v14 = *(_DWORD *)(v12 + 32);
  unint64_t v15 = v13 - 1;
  if (v13 == 1) {
    goto LABEL_13;
  }
  if (v13 >= 9)
  {
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint32x4_t v17 = (uint32x4_t)vdupq_n_s32(v14);
    unint64_t v18 = (uint32x4_t *)(v12 + 52);
    unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFF8;
    uint32x4_t v20 = v17;
    do
    {
      uint32x4_t v17 = vmaxq_u32(v17, v18[-1]);
      uint32x4_t v20 = vmaxq_u32(v20, *v18);
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    unsigned int v14 = vmaxvq_u32(vmaxq_u32(v17, v20));
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v16 = 1;
  }
  unint64_t v21 = v13 - v16;
  char v22 = (unsigned int *)(v12 + 4 * v16 + 32);
  do
  {
    unsigned int v24 = *v22++;
    unsigned int v23 = v24;
    if (v14 <= v24) {
      unsigned int v14 = v23;
    }
    --v21;
  }
  while (v21);
LABEL_13:
  BOOL v25 = v13 == 0;
  swift_bridgeObjectRelease();
  uint64_t v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(v9);
  swift_release();
  unint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    unsigned int v28 = 0;
    goto LABEL_25;
  }
  unsigned int v28 = *(_DWORD *)(v26 + 32);
  unint64_t v29 = v27 - 1;
  if (v27 != 1)
  {
    if (v27 >= 9)
    {
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8 | 1;
      uint32x4_t v31 = (uint32x4_t)vdupq_n_s32(v28);
      Swift::String v32 = (uint32x4_t *)(v26 + 52);
      unint64_t v33 = v29 & 0xFFFFFFFFFFFFFFF8;
      uint32x4_t v34 = v31;
      do
      {
        uint32x4_t v31 = vmaxq_u32(v31, v32[-1]);
        uint32x4_t v34 = vmaxq_u32(v34, *v32);
        v32 += 2;
        v33 -= 8;
      }
      while (v33);
      unsigned int v28 = vmaxvq_u32(vmaxq_u32(v31, v34));
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v30 = 1;
    }
    unint64_t v35 = v27 - v30;
    uint64_t v36 = (unsigned int *)(v26 + 4 * v30 + 32);
    do
    {
      unsigned int v38 = *v36++;
      unsigned int v37 = v38;
      if (v28 <= v38) {
        unsigned int v28 = v37;
      }
      --v35;
    }
    while (v35);
  }
LABEL_25:
  BOOL v39 = v27 == 0;
  uint64_t v40 = v28;
  swift_bridgeObjectRelease();
  uint64_t v41 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, v14 | ((unint64_t)v25 << 32), v40 | ((unint64_t)v39 << 32), 0, MEMORY[0x263F8EE78], v10);
  swift_release();
  return v41;
}

uint64_t MetalDataType.Enum.init(note:typeName:types:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 72) = a5;
  swift_bridgeObjectRetain();
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(a5);
  unint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    unsigned int v13 = 0;
    goto LABEL_13;
  }
  unsigned int v13 = *(_DWORD *)(v11 + 32);
  unint64_t v14 = v12 - 1;
  if (v12 == 1) {
    goto LABEL_13;
  }
  if (v12 >= 9)
  {
    unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(v13);
    uint32x4_t v17 = (uint32x4_t *)(v11 + 52);
    unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFF8;
    uint32x4_t v19 = v16;
    do
    {
      uint32x4_t v16 = vmaxq_u32(v16, v17[-1]);
      uint32x4_t v19 = vmaxq_u32(v19, *v17);
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    unsigned int v13 = vmaxvq_u32(vmaxq_u32(v16, v19));
    if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v15 = 1;
  }
  unint64_t v20 = v12 - v15;
  unint64_t v21 = (unsigned int *)(v11 + 4 * v15 + 32);
  do
  {
    unsigned int v23 = *v21++;
    unsigned int v22 = v23;
    if (v13 <= v23) {
      unsigned int v13 = v22;
    }
    --v20;
  }
  while (v20);
LABEL_13:
  BOOL v24 = v12 == 0;
  swift_bridgeObjectRelease();
  uint64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(a5);
  swift_bridgeObjectRelease();
  unint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    unsigned int v27 = 0;
    goto LABEL_25;
  }
  unsigned int v27 = *(_DWORD *)(v25 + 32);
  unint64_t v28 = v26 - 1;
  if (v26 != 1)
  {
    if (v26 >= 9)
    {
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8 | 1;
      uint32x4_t v30 = (uint32x4_t)vdupq_n_s32(v27);
      uint32x4_t v31 = (uint32x4_t *)(v25 + 52);
      unint64_t v32 = v28 & 0xFFFFFFFFFFFFFFF8;
      uint32x4_t v33 = v30;
      do
      {
        uint32x4_t v30 = vmaxq_u32(v30, v31[-1]);
        uint32x4_t v33 = vmaxq_u32(v33, *v31);
        v31 += 2;
        v32 -= 8;
      }
      while (v32);
      unsigned int v27 = vmaxvq_u32(vmaxq_u32(v30, v33));
      if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v29 = 1;
    }
    unint64_t v34 = v26 - v29;
    unint64_t v35 = (unsigned int *)(v25 + 4 * v29 + 32);
    do
    {
      unsigned int v37 = *v35++;
      unsigned int v36 = v37;
      if (v27 <= v37) {
        unsigned int v27 = v36;
      }
      --v34;
    }
    while (v34);
  }
LABEL_25:
  BOOL v38 = v26 == 0;
  uint64_t v39 = v27;
  swift_bridgeObjectRelease();
  uint64_t v40 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, v13 | ((unint64_t)v24 << 32), v39 | ((unint64_t)v38 << 32), 0, MEMORY[0x263F8EE78], v5);
  swift_release();
  return v40;
}

uint64_t MetalDataType.Enum.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.Enum.deinit()
{
  return MetalDataType.Vector.deinit(MEMORY[0x263F8EEA0]);
}

uint64_t MetalDataType.Enum.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit(MEMORY[0x263F8EEA0]);
}

uint64_t MetalDataType.Pointer.addressSpace.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t MetalDataType.Pointer.dereferenced.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized MetalDataType.Pointer.init(to:isConst:addressSpace:));
}

uint64_t MetalDataType.Pointer.init(to:isConst:addressSpace:)(void *a1, char a2, char a3)
{
  uint64_t v3 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t MetalDataType.Pointer.deinit()
{
  return MetalDataType.Vector.deinit(MEMORY[0x263F8EED8]);
}

uint64_t MetalDataType.Pointer.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit(MEMORY[0x263F8EED8]);
}

uint64_t MetalDataType.Matrix.rowCount.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t MetalDataType.Matrix.rowType.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.Matrix.__allocating_init(typeName:vectorType:columnCount:rowCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  swift_allocObject();
  uint64_t v14 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v14;
}

uint64_t MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

uint64_t MetalDataType.Matrix.__ivar_destroyer()
{
  return swift_release();
}

uint64_t MetalDataType.Matrix.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t MetalDataType.Matrix.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.Function.argumentTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalDataType.Function.__allocating_init(resultType:argumentTypes:)(uint64_t a1, unint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t MetalDataType.Function.init(resultType:argumentTypes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t MetalDataType.Function.__ivar_destroyer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.Function.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalDataType.Function.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.AddressSpace.rawValue.getter(char a1)
{
  uint64_t result = 0x746E6174736E6F63;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656369766564;
      break;
    case 2:
      uint64_t result = 0x646165726874;
      break;
    case 3:
      uint64_t result = 0x7267646165726874;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MetalDataType.AddressSpace(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x746E6174736E6F63;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x746E6174736E6F63;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x656369766564;
      break;
    case 2:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x646165726874;
      break;
    case 3:
      uint64_t v5 = 0x7267646165726874;
      unint64_t v4 = 0xEB0000000070756FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x656369766564) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x646165726874;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEB0000000070756FLL;
      if (v5 == 0x7267646165726874) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MetalDataType.AddressSpace()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MetalDataType.AddressSpace()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MetalDataType.AddressSpace()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MetalDataType.AddressSpace@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MetalDataType.AddressSpace.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MetalDataType.AddressSpace(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x746E6174736E6F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x656369766564;
      goto LABEL_3;
    case 2:
      *a1 = 0x646165726874;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x7267646165726874;
      a1[1] = 0xEB0000000070756FLL;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t MetalDataType.Reference.__allocating_init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized MetalDataType.Reference.init(to:isConst:addressSpace:));
}

uint64_t MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_allocObject();
  uint64_t v8 = a4(a1, a2, a3);
  swift_release();
  return v8;
}

uint64_t type metadata accessor for MetalDataType.Reference()
{
  return self;
}

uint64_t MetalDataType.Reference.init(to:isConst:addressSpace:)(void *a1, char a2, char a3)
{
  uint64_t v3 = specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t MetalDataType.Reference.deinit()
{
  return MetalDataType.Vector.deinit(MEMORY[0x263F8EED8]);
}

uint64_t MetalDataType.Vector.deinit(void (*a1)(void))
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1(*(void *)(v1 + 72));
  return v1;
}

uint64_t MetalDataType.Reference.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit(MEMORY[0x263F8EED8]);
}

uint64_t MetalDataType.Vector.__deallocating_deinit(void (*a1)(void))
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1(*(void *)(v1 + 72));
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.const()()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*v0 + 88);
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = v0[7];
  uint64_t v8 = v5(v6);
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = v3;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = v1;
  *(unsigned char *)(result + 64) = 1;
  *(void *)(result + 56) = v7;
  *(void *)(result + 16) = v8;
  *(void *)(result + 24) = v4;
  return result;
}

uint64_t MetalDataType.pointerTo(withAddressSpace:)(char a1)
{
  type metadata accessor for MetalDataType.Pointer();
  swift_allocObject();
  uint64_t v2 = (void *)swift_retain();
  uint64_t v3 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v2, 0, a1);
  swift_release();
  return v3;
}

uint64_t one-time initialization function for void()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0xE400000000000000;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = 1684631414;
  static MetalDataType.void = result;
  return result;
}

uint64_t static MetalDataType.void.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for void);
}

double one-time initialization function for BOOL()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE400000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A980;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 1819242338;
  static MetalDataType.BOOL = v0;
  return result;
}

uint64_t static MetalDataType.BOOL.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for BOOL);
}

double one-time initialization function for uint8()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A990;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F38746E6975;
  static MetalDataType.uint8 = v0;
  return result;
}

uint64_t *MetalDataType.uint8.unsafeMutableAddressor()
{
  if (one-time initialization token for uint8 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint8;
}

uint64_t static MetalDataType.uint8.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint8);
}

double one-time initialization function for uint16()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE800000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A9A0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x200000002;
  *(void *)(v0 + 56) = 0x200000002;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F3631746E6975;
  static MetalDataType.uint16 = v0;
  return result;
}

uint64_t *MetalDataType.uint16.unsafeMutableAddressor()
{
  if (one-time initialization token for uint16 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint16;
}

uint64_t static MetalDataType.uint16.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint16);
}

double one-time initialization function for uint32()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE800000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A9B0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x400000004;
  *(void *)(v0 + 56) = 0x400000004;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F3233746E6975;
  static MetalDataType.uint32 = v0;
  return result;
}

uint64_t *MetalDataType.uint32.unsafeMutableAddressor()
{
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint32;
}

uint64_t static MetalDataType.uint32.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint32);
}

double one-time initialization function for uint64()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE800000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A9C0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F3436746E6975;
  static MetalDataType.uint64 = v0;
  return result;
}

uint64_t *MetalDataType.uint64.unsafeMutableAddressor()
{
  if (one-time initialization token for uint64 != -1) {
    swift_once();
  }
  return &static MetalDataType.uint64;
}

uint64_t static MetalDataType.uint64.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint64);
}

double one-time initialization function for int8()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE600000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A9D0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F38746E69;
  static MetalDataType.int8 = v0;
  return result;
}

uint64_t *MetalDataType.int8.unsafeMutableAddressor()
{
  if (one-time initialization token for int8 != -1) {
    swift_once();
  }
  return &static MetalDataType.int8;
}

uint64_t static MetalDataType.int8.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int8);
}

double one-time initialization function for int16()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A9E0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x200000002;
  *(void *)(v0 + 56) = 0x200000002;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F3631746E69;
  static MetalDataType.int16 = v0;
  return result;
}

uint64_t *MetalDataType.int16.unsafeMutableAddressor()
{
  if (one-time initialization token for int16 != -1) {
    swift_once();
  }
  return &static MetalDataType.int16;
}

uint64_t static MetalDataType.int16.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int16);
}

double one-time initialization function for int32()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41A9F0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x400000004;
  *(void *)(v0 + 56) = 0x400000004;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F3233746E69;
  static MetalDataType.int32 = v0;
  return result;
}

uint64_t *MetalDataType.int32.unsafeMutableAddressor()
{
  if (one-time initialization token for int32 != -1) {
    swift_once();
  }
  return &static MetalDataType.int32;
}

uint64_t static MetalDataType.int32.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int32);
}

double one-time initialization function for int64()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41AA00;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F3436746E69;
  static MetalDataType.int64 = v0;
  return result;
}

uint64_t *MetalDataType.int64.unsafeMutableAddressor()
{
  if (one-time initialization token for int64 != -1) {
    swift_once();
  }
  return &static MetalDataType.int64;
}

uint64_t static MetalDataType.int64.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int64);
}

double one-time initialization function for half()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE400000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41AA10;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x200000002;
  *(void *)(v0 + 56) = 0x200000002;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 1718378856;
  static MetalDataType.half = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B670;
  *(void *)(v0 + 40) = 0xE400000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.half = v0;
  return result;
}

uint64_t static MetalDataType.half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half);
}

double one-time initialization function for float()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE500000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41AA20;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x400000004;
  *(void *)(v0 + 56) = 0x400000004;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x74616F6C66;
  static MetalDataType.float = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B5E0;
  *(void *)(v0 + 40) = 0xE500000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.float = v0;
  return result;
}

uint64_t static MetalDataType.float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float);
}

uint64_t static MetalDataType.unsignedChar.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint8);
}

uint64_t static MetalDataType.unsignedShort.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint16);
}

uint64_t static MetalDataType.unsignedLong.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint64);
}

uint64_t static MetalDataType.int.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

double one-time initialization function for size_t()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE600000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_25C41AA30;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x745F657A6973;
  static MetalDataType.size_t = v0;
  return result;
}

uint64_t *MetalDataType.size_t.unsafeMutableAddressor()
{
  if (one-time initialization token for size_t != -1) {
    swift_once();
  }
  return &static MetalDataType.size_t;
}

uint64_t static MetalDataType.size_t.getter()
{
  return static MetalDataType.size_t.getter(&one-time initialization token for size_t);
}

uint64_t static MetalDataType.size_t.setter(uint64_t a1)
{
  return static MetalDataType.size_t.setter(a1, &one-time initialization token for size_t, &static MetalDataType.size_t);
}

uint64_t (*static MetalDataType.size_t.modify())()
{
  if (one-time initialization token for size_t != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

double one-time initialization function for ptrdiff()
{
  type metadata accessor for MetalDataType.Number();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xE900000000000074;
  *(void *)(v0 + 40) = 0xD000000000000012;
  *(void *)(v0 + 48) = 0x800000025C4233A0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x5F66666964727470;
  static MetalDataType.ptrdiff = v0;
  return result;
}

uint64_t *MetalDataType.ptrdiff.unsafeMutableAddressor()
{
  if (one-time initialization token for ptrdiff != -1) {
    swift_once();
  }
  return &static MetalDataType.ptrdiff;
}

uint64_t static MetalDataType.ptrdiff.getter()
{
  return static MetalDataType.size_t.getter(&one-time initialization token for ptrdiff);
}

uint64_t static MetalDataType.size_t.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static MetalDataType.ptrdiff.setter(uint64_t a1)
{
  return static MetalDataType.size_t.setter(a1, &one-time initialization token for ptrdiff, &static MetalDataType.ptrdiff);
}

uint64_t static MetalDataType.size_t.setter(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_release();
}

uint64_t (*static MetalDataType.ptrdiff.modify())()
{
  if (one-time initialization token for ptrdiff != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for uint2()
{
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.uint32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x32746E6975, 0xE500000000000000, v0, 2, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.uint2 = v1;
  return result;
}

uint64_t static MetalDataType.uint2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint2);
}

uint64_t one-time initialization function for uint3()
{
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.uint32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x33746E6975, 0xE500000000000000, v0, 3, 16, 16);
  uint64_t result = swift_release();
  static MetalDataType.uint3 = v1;
  return result;
}

uint64_t static MetalDataType.uint3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint3);
}

uint64_t one-time initialization function for uint4()
{
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.uint32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x34746E6975, 0xE500000000000000, v0, 4, 16, 16);
  uint64_t result = swift_release();
  static MetalDataType.uint4 = v1;
  return result;
}

uint64_t static MetalDataType.uint4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uint4);
}

uint64_t one-time initialization function for int2()
{
  if (one-time initialization token for int32 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.int32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(846491241, 0xE400000000000000, v0, 2, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.int2 = v1;
  return result;
}

uint64_t static MetalDataType.int2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int2);
}

uint64_t one-time initialization function for int3()
{
  if (one-time initialization token for int32 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.int32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(863268457, 0xE400000000000000, v0, 3, 16, 16);
  uint64_t result = swift_release();
  static MetalDataType.int3 = v1;
  return result;
}

uint64_t static MetalDataType.int3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int3);
}

uint64_t one-time initialization function for int4()
{
  if (one-time initialization token for int32 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.int32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(880045673, 0xE400000000000000, v0, 4, 16, 16);
  uint64_t result = swift_release();
  static MetalDataType.int4 = v1;
  return result;
}

uint64_t static MetalDataType.int4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for int4);
}

uint64_t one-time initialization function for float2()
{
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x3274616F6C66, 0xE600000000000000, v0, 2, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.float2 = v1;
  return result;
}

uint64_t static MetalDataType.float2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float2);
}

uint64_t one-time initialization function for float3()
{
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x3374616F6C66, 0xE600000000000000, v0, 3, 16, 16);
  uint64_t result = swift_release();
  static MetalDataType.float3 = v1;
  return result;
}

uint64_t static MetalDataType.float3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float3);
}

uint64_t one-time initialization function for float4()
{
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x3474616F6C66, 0xE600000000000000, v0, 4, 16, 16);
  uint64_t result = swift_release();
  static MetalDataType.float4 = v1;
  return result;
}

uint64_t static MetalDataType.float4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float4);
}

uint64_t one-time initialization function for half2()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x32666C6168, 0xE500000000000000, v0, 2, 4, 4);
  uint64_t result = swift_release();
  static MetalDataType.half2 = v1;
  return result;
}

uint64_t static MetalDataType.half2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half2);
}

uint64_t one-time initialization function for half3()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x33666C6168, 0xE500000000000000, v0, 3, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.half3 = v1;
  return result;
}

uint64_t static MetalDataType.half3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half3);
}

uint64_t one-time initialization function for half4()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x34666C6168, 0xE500000000000000, v0, 4, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.half4 = v1;
  return result;
}

uint64_t static MetalDataType.half4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half4);
}

uint64_t one-time initialization function for color3()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x33726F6C6F63, 0xE600000000000000, v0, 3, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.color3 = v1;
  return result;
}

uint64_t static MetalDataType.color3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for color3);
}

uint64_t one-time initialization function for color4()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x34726F6C6F63, 0xE600000000000000, v0, 4, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.color4 = v1;
  return result;
}

uint64_t static MetalDataType.color4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for color4);
}

uint64_t one-time initialization function for float2x2()
{
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x32783274616F6C66, 0xE800000000000000, v0, 2, 2, 16, 8);
  uint64_t result = swift_release();
  static MetalDataType.float2x2 = v1;
  return result;
}

uint64_t static MetalDataType.float2x2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float2x2);
}

uint64_t one-time initialization function for float2x3()
{
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x33783274616F6C66, 0xE800000000000000, v0, 2, 3, 32, 16);
  uint64_t result = swift_release();
  static MetalDataType.float2x3 = v1;
  return result;
}

uint64_t static MetalDataType.float2x3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float2x3);
}

uint64_t one-time initialization function for float2x4()
{
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x34783274616F6C66, 0xE800000000000000, v0, 2, 4, 32, 16);
  uint64_t result = swift_release();
  static MetalDataType.float2x4 = v1;
  return result;
}

uint64_t static MetalDataType.float2x4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float2x4);
}

uint64_t one-time initialization function for float3x2()
{
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x32783374616F6C66, 0xE800000000000000, v0, 3, 2, 24, 8);
  uint64_t result = swift_release();
  static MetalDataType.float3x2 = v1;
  return result;
}

uint64_t static MetalDataType.float3x2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float3x2);
}

uint64_t one-time initialization function for float3x3()
{
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x33783374616F6C66, 0xE800000000000000, v0, 3, 3, 48, 16);
  uint64_t result = swift_release();
  static MetalDataType.float3x3 = v1;
  return result;
}

uint64_t static MetalDataType.float3x3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float3x3);
}

uint64_t one-time initialization function for float3x4()
{
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x34783374616F6C66, 0xE800000000000000, v0, 3, 4, 48, 16);
  uint64_t result = swift_release();
  static MetalDataType.float3x4 = v1;
  return result;
}

uint64_t static MetalDataType.float3x4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float3x4);
}

uint64_t one-time initialization function for float4x2()
{
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x32783474616F6C66, 0xE800000000000000, v0, 4, 2, 32, 8);
  uint64_t result = swift_release();
  static MetalDataType.float4x2 = v1;
  return result;
}

uint64_t static MetalDataType.float4x2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float4x2);
}

uint64_t one-time initialization function for float4x3()
{
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x33783474616F6C66, 0xE800000000000000, v0, 4, 3, 64, 16);
  uint64_t result = swift_release();
  static MetalDataType.float4x3 = v1;
  return result;
}

uint64_t static MetalDataType.float4x3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float4x3);
}

uint64_t one-time initialization function for float4x4()
{
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.float4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x34783474616F6C66, 0xE800000000000000, v0, 4, 4, 64, 16);
  uint64_t result = swift_release();
  static MetalDataType.float4x4 = v1;
  return result;
}

uint64_t static MetalDataType.float4x4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float4x4);
}

uint64_t one-time initialization function for half2x2()
{
  if (one-time initialization token for half2 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x327832666C6168, 0xE700000000000000, v0, 2, 2, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.half2x2 = v1;
  return result;
}

uint64_t *MetalDataType.half2x2.unsafeMutableAddressor()
{
  if (one-time initialization token for half2x2 != -1) {
    swift_once();
  }
  return &static MetalDataType.half2x2;
}

uint64_t static MetalDataType.half2x2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half2x2);
}

uint64_t one-time initialization function for half3x3()
{
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x337833666C6168, 0xE700000000000000, v0, 2, 2, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.half3x3 = v1;
  return result;
}

uint64_t *MetalDataType.half3x3.unsafeMutableAddressor()
{
  if (one-time initialization token for half3x3 != -1) {
    swift_once();
  }
  return &static MetalDataType.half3x3;
}

uint64_t static MetalDataType.half3x3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half3x3);
}

uint64_t one-time initialization function for half4x4()
{
  if (one-time initialization token for half4 != -1) {
    swift_once();
  }
  uint64_t v0 = static MetalDataType.half4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x347834666C6168, 0xE700000000000000, v0, 2, 2, 8, 8);
  uint64_t result = swift_release();
  static MetalDataType.half4x4 = v1;
  return result;
}

uint64_t *MetalDataType.half4x4.unsafeMutableAddressor()
{
  if (one-time initialization token for half4x4 != -1) {
    swift_once();
  }
  return &static MetalDataType.half4x4;
}

uint64_t static MetalDataType.half4x4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half4x4);
}

double one-time initialization function for texture2d_half()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xEF3E666C61683C64;
  *(void *)(v0 + 40) = 0xD000000000000015;
  *(void *)(v0 + 48) = 0x800000025C4236A0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x3265727574786574;
  static MetalDataType.texture2d_half = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2d_half);
}

double one-time initialization function for texture2d_float()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423680;
  *(void *)(v0 + 40) = 0xD000000000000015;
  *(void *)(v0 + 48) = 0x800000025C423660;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture2d_float = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2d_float);
}

double one-time initialization function for texture2d_short()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423620;
  *(void *)(v0 + 40) = 0xD000000000000013;
  *(void *)(v0 + 48) = 0x800000025C423600;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture2d_short = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_short.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2d_short);
}

double one-time initialization function for texture2d_ushort()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C4235E0;
  *(void *)(v0 + 40) = 0xD000000000000014;
  *(void *)(v0 + 48) = 0x800000025C4235C0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000011;
  static MetalDataType.texture2d_ushort = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_ushort.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2d_ushort);
}

uint64_t one-time initialization function for texture2d_int()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 39) = -18;
  *(void *)(result + 40) = 0xD000000000000010;
  *(void *)(result + 48) = 0x800000025C4236C0;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 56) = 0x800000008;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "texture2d<int>");
  static MetalDataType.texture2d_int = result;
  return result;
}

uint64_t static MetalDataType.texture2d_int.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2d_int);
}

double one-time initialization function for texture2d_uint()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xEF3E746E69753C64;
  *(void *)(v0 + 40) = 0xD000000000000011;
  *(void *)(v0 + 48) = 0x800000025C423640;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x3265727574786574;
  static MetalDataType.texture2d_uint = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_uint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2d_uint);
}

double one-time initialization function for texture3d_half()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xEF3E666C61683C64;
  *(void *)(v0 + 40) = 0xD000000000000015;
  *(void *)(v0 + 48) = 0x800000025C423860;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x3365727574786574;
  static MetalDataType.texture3d_half = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3d_half);
}

double one-time initialization function for texture3d_float()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423840;
  *(void *)(v0 + 40) = 0xD000000000000015;
  *(void *)(v0 + 48) = 0x800000025C423820;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture3d_float = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3d_float);
}

double one-time initialization function for texture3d_short()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423580;
  *(void *)(v0 + 40) = 0xD000000000000013;
  *(void *)(v0 + 48) = 0x800000025C423560;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture3d_short = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_short.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3d_short);
}

double one-time initialization function for texture3d_ushort()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423540;
  *(void *)(v0 + 40) = 0xD000000000000014;
  *(void *)(v0 + 48) = 0x800000025C423520;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000011;
  static MetalDataType.texture3d_ushort = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_ushort.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3d_ushort);
}

uint64_t one-time initialization function for texture3d_int()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 39) = -18;
  *(void *)(result + 40) = 0xD000000000000010;
  *(void *)(result + 48) = 0x800000025C423880;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 56) = 0x800000008;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "texture3d<int>");
  static MetalDataType.texture3d_int = result;
  return result;
}

uint64_t static MetalDataType.texture3d_int.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3d_int);
}

double one-time initialization function for texture3d_uint()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0xEF3E746E69753C64;
  *(void *)(v0 + 40) = 0xD000000000000011;
  *(void *)(v0 + 48) = 0x800000025C4235A0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x3365727574786574;
  static MetalDataType.texture3d_uint = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_uint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3d_uint);
}

uint64_t one-time initialization function for depth2d_half()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 38) = -4864;
  *(void *)(result + 40) = 0xD000000000000018;
  *(void *)(result + 48) = 0x800000025C423500;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 56) = 0x800000008;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "depth2d<half>");
  static MetalDataType.depth2d_half = result;
  return result;
}

uint64_t *MetalDataType.depth2d_half.unsafeMutableAddressor()
{
  if (one-time initialization token for depth2d_half != -1) {
    swift_once();
  }
  return &static MetalDataType.depth2d_half;
}

uint64_t static MetalDataType.depth2d_half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for depth2d_half);
}

uint64_t one-time initialization function for depth2d_float()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 39) = -18;
  *(void *)(result + 40) = 0xD000000000000018;
  *(void *)(result + 48) = 0x800000025C4234E0;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 56) = 0x800000008;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "depth2d<float>");
  static MetalDataType.depth2d_float = result;
  return result;
}

uint64_t *MetalDataType.depth2d_float.unsafeMutableAddressor()
{
  if (one-time initialization token for depth2d_float != -1) {
    swift_once();
  }
  return &static MetalDataType.depth2d_float;
}

uint64_t static MetalDataType.depth2d_float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for depth2d_float);
}

double one-time initialization function for texturecube_half()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423800;
  *(void *)(v0 + 40) = 0xD000000000000013;
  *(void *)(v0 + 48) = 0x800000025C4237E0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000011;
  static MetalDataType.texturecube_half = v0;
  return result;
}

uint64_t static MetalDataType.texturecube_half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texturecube_half);
}

double one-time initialization function for texturecube_float()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C4237C0;
  *(void *)(v0 + 40) = 0xD000000000000013;
  *(void *)(v0 + 48) = 0x800000025C4237A0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000012;
  static MetalDataType.texturecube_float = v0;
  return result;
}

uint64_t static MetalDataType.texturecube_float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texturecube_float);
}

double one-time initialization function for texture2darray_half()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423740;
  *(void *)(v0 + 40) = 0xD00000000000001BLL;
  *(void *)(v0 + 48) = 0x800000025C423720;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000015;
  static MetalDataType.texture2darray_half = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darray_half);
}

double one-time initialization function for texture2darray_float()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423700;
  *(void *)(v0 + 40) = 0xD00000000000001BLL;
  *(void *)(v0 + 48) = 0x800000025C4236E0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000016;
  static MetalDataType.texture2darray_float = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darray_float);
}

double one-time initialization function for texture2darray_short()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423480;
  *(void *)(v0 + 40) = 0xD000000000000019;
  *(void *)(v0 + 48) = 0x800000025C423460;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000016;
  static MetalDataType.texture2darray_short = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_short.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darray_short);
}

double one-time initialization function for texture2darray_ushort()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423440;
  *(void *)(v0 + 40) = 0xD00000000000001ALL;
  *(void *)(v0 + 48) = 0x800000025C423420;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000017;
  static MetalDataType.texture2darray_ushort = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_ushort.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darray_ushort);
}

double one-time initialization function for texture2darray_int()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C423780;
  *(void *)(v0 + 40) = 0xD000000000000016;
  *(void *)(v0 + 48) = 0x800000025C423760;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000014;
  static MetalDataType.texture2darray_int = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_int.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darray_int);
}

double one-time initialization function for texture2darray_uint()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 32) = 0x800000025C4234C0;
  *(void *)(v0 + 40) = 0xD000000000000017;
  *(void *)(v0 + 48) = 0x800000025C4234A0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0xD000000000000015;
  static MetalDataType.texture2darray_uint = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_uint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darray_uint);
}

double one-time initialization function for sampler()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xE700000000000000;
  *(void *)&double result = 0x800000008;
  *(void *)(v0 + 56) = 0x800000008;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x72656C706D6173;
  static MetalDataType.sampler = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B800;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.sampler = v0;
  return result;
}

uint64_t static MetalDataType.sampler.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for sampler);
}

uint64_t one-time initialization function for coord()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x64726F6F63, 0xE500000000000000, (uint64_t)&outlined read-only object #0 of one-time initialization function for coord);
  static MetalDataType.coord = result;
  return result;
}

uint64_t *MetalDataType.coord.unsafeMutableAddressor()
{
  if (one-time initialization token for coord != -1) {
    swift_once();
  }
  return &static MetalDataType.coord;
}

uint64_t static MetalDataType.coord.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for coord);
}

uint64_t one-time initialization function for address()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x2073736572646441, 0xEC00000065646F4DLL, 0x73736572646461, 0xE700000000000000, (uint64_t)&outlined read-only object #0 of one-time initialization function for address);
  static MetalDataType.address = result;
  return result;
}

uint64_t *MetalDataType.address.unsafeMutableAddressor()
{
  if (one-time initialization token for address != -1) {
    swift_once();
  }
  return &static MetalDataType.address;
}

uint64_t static MetalDataType.address.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for address);
}

uint64_t one-time initialization function for s_address()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x7365726464412053, 0xEE0065646F4D2073, 0x7365726464615F73, 0xE900000000000073, (uint64_t)&outlined read-only object #0 of one-time initialization function for s_address);
  static MetalDataType.s_address = result;
  return result;
}

uint64_t *MetalDataType.s_address.unsafeMutableAddressor()
{
  if (one-time initialization token for s_address != -1) {
    swift_once();
  }
  return &static MetalDataType.s_address;
}

uint64_t static MetalDataType.s_address.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for s_address);
}

uint64_t one-time initialization function for t_address()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x7365726464412054, 0xEE0065646F4D2073, 0x7365726464615F74, 0xE900000000000073, (uint64_t)&outlined read-only object #0 of one-time initialization function for t_address);
  static MetalDataType.t_address = result;
  return result;
}

uint64_t *MetalDataType.t_address.unsafeMutableAddressor()
{
  if (one-time initialization token for t_address != -1) {
    swift_once();
  }
  return &static MetalDataType.t_address;
}

uint64_t static MetalDataType.t_address.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for t_address);
}

uint64_t one-time initialization function for r_address()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x7365726464412052, 0xEE0065646F4D2073, 0x7365726464615F72, 0xE900000000000073, (uint64_t)&outlined read-only object #0 of one-time initialization function for r_address);
  static MetalDataType.r_address = result;
  return result;
}

uint64_t *MetalDataType.r_address.unsafeMutableAddressor()
{
  if (one-time initialization token for r_address != -1) {
    swift_once();
  }
  return &static MetalDataType.r_address;
}

uint64_t static MetalDataType.r_address.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for r_address);
}

uint64_t one-time initialization function for border_color()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x635F726564726F62, 0xEC000000726F6C6FLL, (uint64_t)&outlined read-only object #0 of one-time initialization function for border_color);
  static MetalDataType.border_color = result;
  return result;
}

uint64_t *MetalDataType.border_color.unsafeMutableAddressor()
{
  if (one-time initialization token for border_color != -1) {
    swift_once();
  }
  return &static MetalDataType.border_color;
}

uint64_t static MetalDataType.border_color.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for border_color);
}

uint64_t one-time initialization function for filter()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x7265746C6966, 0xE600000000000000, (uint64_t)&outlined read-only object #0 of one-time initialization function for filter);
  static MetalDataType.filter = result;
  return result;
}

uint64_t *MetalDataType.filter.unsafeMutableAddressor()
{
  if (one-time initialization token for filter != -1) {
    swift_once();
  }
  return &static MetalDataType.filter;
}

uint64_t static MetalDataType.filter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for filter);
}

uint64_t one-time initialization function for mag_filter()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x746C69665F67616DLL, 0xEA00000000007265, (uint64_t)&outlined read-only object #0 of one-time initialization function for mag_filter);
  static MetalDataType.mag_filter = result;
  return result;
}

uint64_t *MetalDataType.mag_filter.unsafeMutableAddressor()
{
  if (one-time initialization token for mag_filter != -1) {
    swift_once();
  }
  return &static MetalDataType.mag_filter;
}

uint64_t static MetalDataType.mag_filter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for mag_filter);
}

uint64_t one-time initialization function for min_filter()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x746C69665F6E696DLL, 0xEA00000000007265, (uint64_t)&outlined read-only object #0 of one-time initialization function for min_filter);
  static MetalDataType.min_filter = result;
  return result;
}

uint64_t *MetalDataType.min_filter.unsafeMutableAddressor()
{
  if (one-time initialization token for min_filter != -1) {
    swift_once();
  }
  return &static MetalDataType.min_filter;
}

uint64_t static MetalDataType.min_filter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for min_filter);
}

uint64_t one-time initialization function for mip_filter()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x746C69665F70696DLL, 0xEA00000000007265, (uint64_t)&outlined read-only object #0 of one-time initialization function for mip_filter);
  static MetalDataType.mip_filter = result;
  return result;
}

uint64_t *MetalDataType.mip_filter.unsafeMutableAddressor()
{
  if (one-time initialization token for mip_filter != -1) {
    swift_once();
  }
  return &static MetalDataType.mip_filter;
}

uint64_t static MetalDataType.mip_filter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for mip_filter);
}

uint64_t one-time initialization function for compare_func()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x5F657261706D6F63, 0xEC000000636E7566, (uint64_t)&outlined read-only object #0 of one-time initialization function for compare_func);
  static MetalDataType.compare_func = result;
  return result;
}

uint64_t *MetalDataType.compare_func.unsafeMutableAddressor()
{
  if (one-time initialization token for compare_func != -1) {
    swift_once();
  }
  return &static MetalDataType.compare_func;
}

uint64_t static MetalDataType.compare_func.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for compare_func);
}

uint64_t one-time initialization function for max_anisotropy()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 39) = -18;
  *(void *)(result + 56) = 0x100000001;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "max_anisotropy");
  static MetalDataType.max_anisotropy = result;
  return result;
}

uint64_t *MetalDataType.max_anisotropy.unsafeMutableAddressor()
{
  if (one-time initialization token for max_anisotropy != -1) {
    swift_once();
  }
  return &static MetalDataType.max_anisotropy;
}

uint64_t static MetalDataType.max_anisotropy.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for max_anisotropy);
}

double one-time initialization function for lod_clamp()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xE900000000000070;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x6D616C635F646F6CLL;
  static MetalDataType.lod_clamp = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B820;
  *(void *)(v0 + 40) = 0xE900000000000070;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.lod_clamp = v0;
  return result;
}

uint64_t *MetalDataType.lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for lod_clamp != -1) {
    swift_once();
  }
  return &static MetalDataType.lod_clamp;
}

uint64_t static MetalDataType.lod_clamp.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for lod_clamp);
}

double one-time initialization function for bias()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xE400000000000000;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 1935763810;
  static MetalDataType.bias = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B830;
  *(void *)(v0 + 40) = 0xE400000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.bias = v0;
  return result;
}

uint64_t *MetalDataType.bias.unsafeMutableAddressor()
{
  if (one-time initialization token for bias != -1) {
    swift_once();
  }
  return &static MetalDataType.bias;
}

uint64_t static MetalDataType.bias.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for bias);
}

double one-time initialization function for level()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xE500000000000000;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x6C6576656CLL;
  static MetalDataType.level = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B840;
  *(void *)(v0 + 40) = 0xE500000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.level = v0;
  return result;
}

uint64_t *MetalDataType.level.unsafeMutableAddressor()
{
  if (one-time initialization token for level != -1) {
    swift_once();
  }
  return &static MetalDataType.level;
}

uint64_t static MetalDataType.level.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for level);
}

uint64_t one-time initialization function for min_lod_clamp()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_WORD *)(result + 38) = -4864;
  *(void *)(result + 56) = 0x100000001;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "min_lod_clamp");
  static MetalDataType.min_lod_clamp = result;
  return result;
}

uint64_t *MetalDataType.min_lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for min_lod_clamp != -1) {
    swift_once();
  }
  return &static MetalDataType.min_lod_clamp;
}

uint64_t static MetalDataType.min_lod_clamp.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for min_lod_clamp);
}

double one-time initialization function for offset()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xE600000000000000;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x74657366666FLL;
  static MetalDataType.offset = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B860;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.offset = v0;
  return result;
}

uint64_t *MetalDataType.offset.unsafeMutableAddressor()
{
  if (one-time initialization token for offset != -1) {
    swift_once();
  }
  return &static MetalDataType.offset;
}

uint64_t static MetalDataType.offset.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for offset);
}

double one-time initialization function for gradient2d()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xEA00000000006432;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x746E656964617267;
  static MetalDataType.gradient2d = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B850;
  *(void *)(v0 + 40) = 0xEA00000000006432;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.gradient2d = v0;
  return result;
}

uint64_t *MetalDataType.gradient2d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient2d != -1) {
    swift_once();
  }
  return &static MetalDataType.gradient2d;
}

uint64_t static MetalDataType.gradient2d.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for gradient2d);
}

double one-time initialization function for gradient3d()
{
  type metadata accessor for MetalDataType();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = 0xEA00000000006433;
  *(void *)&double result = 0x100000001;
  *(void *)(v0 + 56) = 0x100000001;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0x746E656964617267;
  static MetalDataType.gradient3d = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B850;
  *(void *)(v0 + 40) = 0xEA00000000006433;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.gradient3d = v0;
  return result;
}

uint64_t *MetalDataType.gradient3d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient3d != -1) {
    swift_once();
  }
  return &static MetalDataType.gradient3d;
}

uint64_t static MetalDataType.gradient3d.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for gradient3d);
}

uint64_t one-time initialization function for gradientcube()
{
  type metadata accessor for MetalDataType();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 37) = 0;
  *(_WORD *)(result + 38) = -5120;
  *(void *)(result + 56) = 0x100000001;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  strcpy((char *)(result + 24), "gradientcube");
  static MetalDataType.gradientcube = result;
  return result;
}

uint64_t *MetalDataType.gradientcube.unsafeMutableAddressor()
{
  if (one-time initialization token for gradientcube != -1) {
    swift_once();
  }
  return &static MetalDataType.gradientcube;
}

uint64_t static MetalDataType.gradientcube.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for gradientcube);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v44 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    unint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *unint64_t v21 = v7;
    v21[1] = v6;
    *(void *)(v20[7] + 8 * v11) = v8;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v20[2] = v24;
    uint64_t v25 = v44 - 1;
    if (v44 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    unint64_t v26 = a1 + 9;
    while (1)
    {
      uint64_t v28 = *(v26 - 2);
      uint64_t v27 = *(v26 - 1);
      uint64_t v29 = *v26;
      uint32x4_t v30 = (void *)*a3;
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      BOOL v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
      uint64_t *v39 = v28;
      v39[1] = v27;
      *(void *)(v38[7] + 8 * v31) = v29;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v26 += 3;
      v38[2] = v41;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._char object = (void *)0x800000025C423400;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._uint64_t countAndFlagsBits = 39;
  v43._char object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  char v39;
  void *v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;

  uint64_t v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[7];
  uint64_t v47 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    unint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *unint64_t v21 = v7;
    v21[1] = v6;
    uint64_t v22 = (void *)(v20[7] + 16 * v11);
    *uint64_t v22 = v47;
    v22[1] = v8;
    BOOL v23 = v20[2];
    uint64_t v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v20[2] = v25;
    unint64_t v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v27 = a1 + 11;
    while (1)
    {
      uint64_t v29 = *(v27 - 3);
      uint64_t v28 = *(v27 - 2);
      uint32x4_t v30 = *(v27 - 1);
      unint64_t v31 = *v27;
      char v32 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      uint64_t v35 = v32[2];
      char v36 = (v34 & 1) == 0;
      uint64_t v24 = __OFADD__(v35, v36);
      char v37 = v35 + v36;
      if (v24) {
        break;
      }
      BOOL v38 = v34;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v38 & 1) != (v39 & 1)) {
          goto LABEL_25;
        }
      }
      if (v38) {
        goto LABEL_10;
      }
      uint64_t v40 = (void *)*a3;
      *(void *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      uint64_t v41 = (uint64_t *)(v40[6] + 16 * v33);
      *uint64_t v41 = v29;
      v41[1] = v28;
      Swift::String v42 = (void *)(v40[7] + 16 * v33);
      NSObject *v42 = v30;
      v42[1] = v31;
      Swift::String v43 = v40[2];
      uint64_t v24 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v27 += 4;
      v40[2] = v44;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v45._char object = (void *)0x800000025C423400;
  v45._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)();
  v46._uint64_t countAndFlagsBits = 39;
  v46._char object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (MetalDataType, Any?)?>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v26 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    unint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    long long v24 = 0u;
    long long v25 = 0u;
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    id v19 = (void *)(v3[6] + 16 * i);
    *id v19 = v17;
    v19[1] = v18;
    uint64_t result = outlined init with take of (MetalDataType, Any?)?((uint64_t)&v23, v3[7] + 40 * i);
    uint64_t v20 = v3[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v22;
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  void *v32;
  _OWORD *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  long long v42[9];
  long long v43[9];
  _OWORD v44[10];
  uint64_t v45;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = (void *)result;
  uint64_t v5 = 0;
  uint64_t v45 = a1;
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  int64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  int64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v45 + 48) + 16 * i);
    uint64_t v20 = *v18;
    id v19 = v18[1];
    BOOL v21 = (_OWORD *)(*(void *)(v45 + 56) + 144 * i);
    v44[0] = *v21;
    uint64_t v22 = v21[4];
    long long v24 = v21[1];
    uint64_t v23 = v21[2];
    v44[3] = v21[3];
    v44[4] = v22;
    v44[1] = v24;
    v44[2] = v23;
    long long v25 = v21[8];
    uint64_t v27 = v21[5];
    uint64_t v26 = v21[6];
    v44[7] = v21[7];
    v44[8] = v25;
    v44[5] = v27;
    v44[6] = v26;
    uint64_t v28 = v21[7];
    v43[6] = v21[6];
    v43[7] = v28;
    v43[8] = v21[8];
    uint64_t v29 = v21[3];
    v43[2] = v21[2];
    v43[3] = v29;
    uint32x4_t v30 = v21[5];
    v43[4] = v21[4];
    v43[5] = v30;
    unint64_t v31 = v21[1];
    v43[0] = *v21;
    v43[1] = v31;
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)v44);
    closure #3 in NodeDefStore.applyStandardLibraryFixes()(v43, v42);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of NodeDef((uint64_t)v44);
      return (uint64_t)v4;
    }
    uint64_t result = outlined release of NodeDef((uint64_t)v44);
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    char v32 = (void *)(v4[6] + 16 * i);
    *char v32 = v20;
    v32[1] = v19;
    uint64_t v33 = (_OWORD *)(v4[7] + 144 * i);
    BOOL v34 = v42[3];
    _OWORD v33[2] = v42[2];
    v33[3] = v34;
    uint64_t v35 = v42[1];
    void *v33 = v42[0];
    v33[1] = v35;
    char v36 = v42[8];
    char v37 = v42[6];
    v33[7] = v42[7];
    v33[8] = v36;
    BOOL v38 = v42[5];
    v33[4] = v42[4];
    v33[5] = v38;
    v33[6] = v37;
    uint64_t v39 = v4[2];
    int64_t v15 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v40;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_27;
    }
    if (v5 >= v41) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v5);
    if (!v16) {
      break;
    }
LABEL_15:
    unint64_t v11 = (v16 - 1) & v16;
  }
  uint64_t v17 = v5 + 1;
  if (v5 + 1 >= v41) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  uint64_t v17 = v5 + 2;
  if (v5 + 2 >= v41) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  uint64_t v17 = v5 + 3;
  if (v5 + 3 >= v41) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_14:
    uint64_t v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v41) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  *(void *)(v6 + 72) = a3;
  *(void *)(v6 + 80) = a4;
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = result;
    swift_retain();
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_11ShaderGraph16DataTypePropertyVs5NeverOTg504_s11d12Graph13Metalfg84C6VectorC8typeName09componentE00I5Count4size9alignmentAESS_ACSis6UInt32VALtcfcAA0dE8H8VSiXEfU_AG0lfG0CTf1cn_nTf4ng_nTm(0, a4, a3);
    *(unsigned char *)(v6 + 64) = 0;
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 48) = 0;
    *(void *)(v6 + 24) = v12;
    *(void *)(v6 + 32) = a2;
    *(_DWORD *)(v6 + 56) = a5;
    *(_DWORD *)(v6 + 60) = a6;
    *(void *)(v6 + 16) = v13;
    return v6;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_11ShaderGraph16DataTypePropertyVs5NeverOTg504_s11d12Graph13Metalfg84C6VectorC8typeName09componentE00I5Count4size9alignmentAESS_ACSis6UInt32VALtcfcAA0dE8H8VSiXEfU_AG0lfG0CTf1cn_nTf4ng_nTm(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_14;
  }
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v7 = result;
    uint64_t v12 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    if (a2 < v7 || v3 < 0) {
      goto LABEL_15;
    }
    uint64_t v8 = v12;
    while (a2 != v7)
    {
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      uint64_t result = swift_retain();
      if (v10 >= v9 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      uint64_t v11 = v12 + 48 * v10;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0xE000000000000000;
      *(void *)(v11 + 48) = a3;
      *(void *)(v11 + 56) = v4;
      *(unsigned char *)(v11 + 64) = 1;
      *(void *)(v11 + 72) = v7++;
      if (a2 == v7) {
        return v8;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v8 = v7;
  *(void *)(v7 + 72) = a5;
  *(void *)(v7 + 80) = a3;
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = result;
    swift_retain();
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_11ShaderGraph16DataTypePropertyVs5NeverOTg504_s11d12Graph13Metalfg84C6VectorC8typeName09componentE00I5Count4size9alignmentAESS_ACSis6UInt32VALtcfcAA0dE8H8VSiXEfU_AG0lfG0CTf1cn_nTf4ng_nTm(0, a4, a3);
    uint64_t v18 = *(void *)(a3 + 24);
    uint64_t v19 = *(void *)(a3 + 32);
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = 120;
    v16._char object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    *(void *)(v8 + 32) = a2;
    *(void *)(v8 + 40) = v18;
    *(void *)(v8 + 48) = v19;
    *(unsigned char *)(v8 + 64) = 0;
    *(_DWORD *)(v8 + 56) = a6;
    *(_DWORD *)(v8 + 60) = a7;
    *(void *)(v8 + 16) = v15;
    *(void *)(v8 + 24) = v14;
    return v8;
  }
  return result;
}

uint64_t specialized closure #1 in calculateOffsets(for:)(uint64_t result, int *a2, void **a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  unint64_t v5 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = *(void *)(result + 24);
  unint64_t v9 = *(void *)(result + 40);
  LOBYTE(v10) = *(unsigned char *)(result + 32) & 1;
  unsigned int v11 = *a2;
  unsigned int v12 = *(_DWORD *)(v7 + 60);
  if (!v12)
  {
    if (v11)
    {
      __break(1u);
      return result;
    }
    goto LABEL_11;
  }
  unsigned int v13 = v11 % v12;
  if (!(v11 % v12))
  {
LABEL_11:
    unint64_t v25 = *(void *)result;
    int v26 = *(unsigned char *)(result + 32) & 1;
    long long v28 = *(_OWORD *)result;
    uint64_t v27 = v8;
    BOOL v21 = *a3;
    swift_retain_n();
    outlined retain of String((uint64_t)&v28);
    outlined retain of [Input]((uint64_t)&v27);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v3 = v21;
    unint64_t v10 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      *uint64_t v3 = v21;
    }
    unint64_t v9 = v21[2];
    unint64_t v23 = v21[3];
    unint64_t v5 = v9 + 1;
    if (v9 >= v23 >> 1)
    {
      BOOL v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v9 + 1, 1, v21);
      *uint64_t v3 = v21;
    }
    v21[2] = v5;
    long long v24 = &v21[7 * v9];
    v24[4] = v25;
    v24[5] = v6;
    v24[6] = v7;
    v24[7] = v8;
    *((unsigned char *)v24 + 64) = v26;
    v24[9] = v10;
    *((_DWORD *)v24 + 20) = v11;
    uint64_t v3 = (void *)*(unsigned int *)(v7 + 56);
    uint64_t result = swift_release();
    if (!__CFADD__(*(_DWORD *)v4, v3))
    {
      *(_DWORD *)v4 += v3;
      return result;
    }
    __break(1u);
    goto LABEL_18;
  }
  BOOL v14 = v12 >= v13;
  unsigned int v15 = v12 - v13;
  if (!v14)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  BOOL v14 = __CFADD__(v11, v15);
  int v16 = v11 + v15;
  if (v14)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  int v26 = v16;
  *a2 = v16;
  long long v28 = *(_OWORD *)result;
  uint64_t v27 = v8;
  uint64_t v4 = *a3;
  swift_retain_n();
  outlined retain of String((uint64_t)&v28);
  outlined retain of [Input]((uint64_t)&v27);
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v4;
  if ((v17 & 1) == 0)
  {
LABEL_20:
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    *uint64_t v3 = v4;
  }
  unint64_t v19 = v4[2];
  unint64_t v18 = v4[3];
  if (v19 >= v18 >> 1)
  {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v4);
    *uint64_t v3 = v4;
  }
  v4[2] = v19 + 1;
  uint64_t v20 = &v4[7 * v19];
  v20[4] = v5;
  v20[5] = v6;
  v20[6] = v7;
  v20[7] = v8;
  *((unsigned char *)v20 + 64) = v10;
  v20[9] = v9;
  *((_DWORD *)v20 + 20) = v26;
  return swift_release();
}

uint64_t specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = a1;
  *(void *)(a9 + 48) = a2;
  *(unsigned char *)(a9 + 64) = a7;
  if ((a5 & 0x100000000) == 0)
  {
    *(_DWORD *)(a9 + 56) = a5;
    swift_retain();
    if ((a6 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_13;
  }
  uint64_t v41 = (void *)MEMORY[0x263F8EE78];
  int v40 = 0;
  uint64_t v11 = *(void *)(a8 + 16);
  if (!v11)
  {
    swift_retain();
    unint64_t v19 = (void *)MEMORY[0x263F8EE78];
    uint64_t v20 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v20) {
      goto LABEL_8;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    *(_DWORD *)(a9 + 56) = 0;
    if ((a6 & 0x100000000) == 0)
    {
LABEL_32:
      *(_DWORD *)(a9 + 60) = a6;
      *(void *)(a9 + 16) = a8;
      return a9;
    }
LABEL_13:
    int64_t v26 = *(void *)(a8 + 16);
    if (v26)
    {
      uint64_t v41 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
      uint64_t v27 = v41;
      unint64_t v28 = v41[2];
      uint64_t v29 = a8 + 48;
      do
      {
        int v30 = *(_DWORD *)(*(void *)v29 + 60);
        uint64_t v41 = v27;
        unint64_t v31 = v27[3];
        unint64_t v32 = v28 + 1;
        if (v28 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v28 + 1, 1);
          uint64_t v27 = v41;
        }
        void v27[2] = v32;
        *((_DWORD *)v27 + v28 + 8) = v30;
        v29 += 48;
        ++v28;
        --v26;
      }
      while (v26);
    }
    else
    {
      uint64_t v27 = (void *)MEMORY[0x263F8EE78];
      unint64_t v32 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (!v32)
      {
        LODWORD(a6) = 0;
        char v39 = 1;
LABEL_30:
        swift_bridgeObjectRelease();
        if (v39) {
          LODWORD(a6) = 0;
        }
        goto LABEL_32;
      }
    }
    LODWORD(a6) = *((_DWORD *)v27 + 8);
    unint64_t v33 = v32 - 1;
    if (v32 != 1)
    {
      if (v33 < 8)
      {
        unint64_t v34 = 1;
        goto LABEL_26;
      }
      unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8 | 1;
      uint32x4_t v35 = (uint32x4_t)vdupq_n_s32(a6);
      char v36 = (uint32x4_t *)((char *)v27 + 52);
      unint64_t v37 = v33 & 0xFFFFFFFFFFFFFFF8;
      uint32x4_t v38 = v35;
      do
      {
        uint32x4_t v35 = vmaxq_u32(v35, v36[-1]);
        uint32x4_t v38 = vmaxq_u32(v38, *v36);
        v36 += 2;
        v37 -= 8;
      }
      while (v37);
      LODWORD(a6) = vmaxvq_u32(vmaxq_u32(v35, v38));
      if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
      {
        do
        {
LABEL_26:
          if (a6 <= *((_DWORD *)v27 + v34 + 8)) {
            LODWORD(a6) = *((_DWORD *)v27 + v34 + 8);
          }
          ++v34;
        }
        while (v32 != v34);
      }
    }
    char v39 = 0;
    goto LABEL_30;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v12 = (void *)(a8 + 72);
  do
  {
    uint64_t v13 = *(v12 - 5);
    uint64_t v14 = *(v12 - 4);
    uint64_t v15 = *(v12 - 3);
    uint64_t v16 = *(v12 - 2);
    char v17 = *((unsigned char *)v12 - 8);
    uint64_t v18 = *v12;
    v12 += 6;
    v42[0] = v13;
    v42[1] = v14;
    v42[2] = v15;
    _OWORD v42[3] = v16;
    char v43 = v17;
    uint64_t v44 = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in calculateOffsets(for:)((uint64_t)v42, &v40, &v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  unint64_t v19 = v41;
  uint64_t v20 = v41[2];
  if (!v20) {
    goto LABEL_12;
  }
LABEL_8:
  BOOL v21 = &v19[7 * v20];
  uint64_t v22 = *(v21 - 1);
  int v23 = *((_DWORD *)v21 + 6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v24 = *(_DWORD *)(v22 + 56);
  uint64_t result = swift_release();
  if (!__CFADD__(v23, v24))
  {
    *(_DWORD *)(a9 + 56) = v23 + v24;
    if ((a6 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  int64_t v8 = *(void *)(a5 + 16);
  if (v8)
  {
    uint64_t v56 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v56;
    unint64_t v10 = (uint64_t *)(a5 + 40);
    do
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      uint64_t v56 = v9;
      unint64_t v14 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v9 = v56;
      }
      v10 += 2;
      *(void *)(v9 + 16) = v14 + 1;
      uint64_t v15 = (void *)(v9 + 24 * v14);
      v15[4] = v11;
      v15[5] = v12;
      void v15[6] = 0;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v7 = a3;
    uint64_t v6 = a4;
    if (*(void *)(v9 + 16)) {
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(void *)(MEMORY[0x263F8EE78] + 16))
    {
LABEL_7:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType?>);
      uint64_t v16 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_10;
    }
  }
  uint64_t v16 = MEMORY[0x263F8EE80];
LABEL_10:
  uint64_t v56 = v16;
  char v17 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v17, 1, &v56);
  swift_bridgeObjectRelease();
  uint64_t v18 = specialized _NativeDictionary.mapValues<A>(_:)(v56);
  swift_release();
  type metadata accessor for MetalDataType.Enum();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 72) = v18;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v20);
  unint64_t v22 = *(void *)(v21 + 16);
  if (!v22)
  {
    unsigned int v23 = 0;
    goto LABEL_22;
  }
  unsigned int v23 = *(_DWORD *)(v21 + 32);
  unint64_t v24 = v22 - 1;
  if (v22 == 1) {
    goto LABEL_22;
  }
  if (v22 >= 9)
  {
    unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(v23);
    uint64_t v27 = (uint32x4_t *)(v21 + 52);
    unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFF8;
    uint32x4_t v29 = v26;
    do
    {
      uint32x4_t v26 = vmaxq_u32(v26, v27[-1]);
      uint32x4_t v29 = vmaxq_u32(v29, *v27);
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    unsigned int v23 = vmaxvq_u32(vmaxq_u32(v26, v29));
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v25 = 1;
  }
  unint64_t v30 = v22 - v25;
  unint64_t v31 = (unsigned int *)(v21 + 4 * v25 + 32);
  do
  {
    unsigned int v33 = *v31++;
    unsigned int v32 = v33;
    if (v23 <= v33) {
      unsigned int v23 = v32;
    }
    --v30;
  }
  while (v30);
LABEL_22:
  BOOL v34 = v22 == 0;
  swift_bridgeObjectRelease();
  uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(v18);
  swift_release();
  unint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
    unsigned int v37 = 0;
    goto LABEL_34;
  }
  unsigned int v37 = *(_DWORD *)(v35 + 32);
  unint64_t v38 = v36 - 1;
  if (v36 != 1)
  {
    if (v36 >= 9)
    {
      unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8 | 1;
      uint32x4_t v40 = (uint32x4_t)vdupq_n_s32(v37);
      uint64_t v41 = (uint32x4_t *)(v35 + 52);
      unint64_t v42 = v38 & 0xFFFFFFFFFFFFFFF8;
      uint32x4_t v43 = v40;
      do
      {
        uint32x4_t v40 = vmaxq_u32(v40, v41[-1]);
        uint32x4_t v43 = vmaxq_u32(v43, *v41);
        v41 += 2;
        v42 -= 8;
      }
      while (v42);
      unsigned int v37 = vmaxvq_u32(vmaxq_u32(v40, v43));
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v39 = 1;
    }
    unint64_t v44 = v36 - v39;
    uint64_t v45 = (unsigned int *)(v35 + 4 * v39 + 32);
    do
    {
      unsigned int v47 = *v45++;
      unsigned int v46 = v47;
      if (v37 <= v47) {
        unsigned int v37 = v46;
      }
      --v44;
    }
    while (v44);
  }
LABEL_34:
  BOOL v48 = v36 == 0;
  uint64_t v49 = v37;
  swift_bridgeObjectRelease();
  LOBYTE(v56) = v48;
  uint64_t v50 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, v7, v6, v23 | ((unint64_t)v34 << 32), v49 | ((unint64_t)v48 << 32), 0, MEMORY[0x263F8EE78], v19);
  swift_release();
  return v50;
}

uint64_t specialized MetalDataType.Function.init(resultType:argumentTypes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 2632224;
  v5._char object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v6)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = v23;
    v26._char object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 41;
    v27._char object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(void *)(v3 + 32) = v30;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    *(unsigned char *)(v3 + 64) = 0;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v29;
    return v3;
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = MEMORY[0x2611848A0](v9, a2);
        uint64_t v12 = *(void *)(v10 + 24);
        uint64_t v11 = *(void *)(v10 + 32);
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        unint64_t v14 = *(void *)(v28 + 16);
        unint64_t v13 = *(void *)(v28 + 24);
        if (v14 >= v13 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        }
        ++v9;
        *(void *)(v28 + 16) = v14 + 1;
        uint64_t v15 = v28 + 16 * v14;
        *(void *)(v15 + 32) = v12;
        *(void *)(v15 + 40) = v11;
      }
      while (v6 != v9);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a2 + 8 * v16 + 32);
        uint64_t v19 = *(void *)(v17 + 24);
        uint64_t v18 = *(void *)(v17 + 32);
        unint64_t v21 = *(void *)(v28 + 16);
        unint64_t v20 = *(void *)(v28 + 24);
        swift_bridgeObjectRetain();
        if (v21 >= v20 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        }
        ++v16;
        *(void *)(v28 + 16) = v21 + 1;
        uint64_t v22 = v28 + 16 * v21;
        *(void *)(v22 + 32) = v19;
        *(void *)(v22 + 40) = v18;
      }
      while (v6 != v16);
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(void *a1, char a2, char a3)
{
  *(void *)(v3 + 72) = a1;
  *(unsigned char *)(v3 + 80) = a3;
  uint64_t v6 = *(uint64_t (**)(void))(*a1 + 136);
  swift_retain();
  v7._uint64_t countAndFlagsBits = v6();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 32;
  v8._char object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  uint64_t v10 = a1[3];
  uint64_t v9 = (void *)a1[4];
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v10;
  v11._char object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 10784;
  v12._char object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  if (a2) {
    uint64_t v13 = 0x74736E6F6320;
  }
  else {
    uint64_t v13 = 0;
  }
  if (a2) {
    unint64_t v14 = 0xE600000000000000;
  }
  else {
    unint64_t v14 = 0xE000000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  *(void *)(v3 + 32) = 0xE000000000000000;
  *(void *)(v3 + 40) = 0x207265746E696F50;
  *(void *)(v3 + 48) = 0xEB00000000206F74;
  *(unsigned char *)(v3 + 64) = a2;
  *(void *)(v3 + 56) = 0x800000008;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v3 + 24) = 0;
  return v3;
}

uint64_t specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(void *a1, char a2, char a3)
{
  *(void *)(v3 + 72) = a1;
  *(unsigned char *)(v3 + 80) = a3;
  v28[0] = 0;
  v28[1] = 0xE000000000000000;
  uint64_t v4 = (void *)0xE800000000000000;
  uint64_t v5 = 0x746E6174736E6F63;
  uint64_t v6 = v3;
  switch(a3)
  {
    case 1:
      uint64_t v4 = (void *)0xE600000000000000;
      uint64_t v5 = 0x656369766564;
      break;
    case 2:
      uint64_t v4 = (void *)0xE600000000000000;
      uint64_t v5 = 0x646165726874;
      break;
    case 3:
      uint64_t v4 = (void *)0xEB0000000070756FLL;
      uint64_t v5 = 0x7267646165726874;
      break;
    default:
      break;
  }
  swift_retain();
  v9._uint64_t countAndFlagsBits = v5;
  v9._char object = v4;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32;
  v10._char object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  uint64_t v12 = a1[3];
  Swift::String v11 = (void *)a1[4];
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v12;
  v13._char object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  char v14 = a2 & 1;
  if (a2) {
    uint64_t v15 = 0x74736E6F6320;
  }
  else {
    uint64_t v15 = 0;
  }
  if (a2) {
    unint64_t v16 = 0xE600000000000000;
  }
  else {
    unint64_t v16 = 0xE000000000000000;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 9760;
  v18._char object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v28[0];
  uint64_t v20 = v28[1];
  strcpy((char *)v28, "Reference to ");
  HIWORD(v28[1]) = -4864;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v12;
  v21._char object = v11;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = v28[0];
  uint64_t v23 = v28[1];
  unint64_t v24 = *(uint64_t (**)(uint64_t))(*a1 + 88);
  uint64_t v25 = swift_retain();
  uint64_t v26 = v24(v25);
  swift_release();
  *(void *)(v6 + 32) = v20;
  *(void *)(v6 + 40) = v22;
  *(void *)(v6 + 48) = v23;
  *(unsigned char *)(v6 + 64) = v14;
  *(void *)(v6 + 56) = 0x800000008;
  *(void *)(v6 + 16) = v26;
  *(void *)(v6 + 24) = v19;
  return v6;
}

uint64_t specialized MetalDataType.Struct.getElementFunctionName(for:)()
{
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 95;
  v4._char object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 95;
  v6._char object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = v1;
  v7._char object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t specialized MetalDataType.AddressSpace.init(rawValue:)(Swift::String string)
{
  char object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._char object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MetalDataType.AddressSpace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for MetalDataType()
{
  return self;
}

uint64_t type metadata accessor for MetalDataType.Pointer()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace;
  if (!lazy protocol witness table cache variable for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace);
  }
  return result;
}

uint64_t sub_25C2E7C5C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25C2E7CAC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208))(*a1);
}

uint64_t method lookup function for MetalDataType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType);
}

uint64_t dispatch thunk of MetalDataType.isConst.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalDataType.isConst.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalDataType.isConst.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalDataType.offsetList.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetalDataType.metalParameterDeclaration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalDataType.dereferenced.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MetalDataType.qualifiedName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetalDataType.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t type metadata accessor for MetalDataType.Struct()
{
  return self;
}

uint64_t method lookup function for MetalDataType.Struct(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Struct);
}

uint64_t dispatch thunk of MetalDataType.Struct.__allocating_init(note:typeName:fields:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t type metadata accessor for MetalDataType.Vector()
{
  return self;
}

uint64_t method lookup function for MetalDataType.Vector(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Vector);
}

uint64_t dispatch thunk of MetalDataType.Vector.__allocating_init(typeName:componentType:componentCount:size:alignment:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t type metadata accessor for MetalDataType.Number()
{
  return self;
}

uint64_t method lookup function for MetalDataType.Number(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Number);
}

uint64_t dispatch thunk of MetalDataType.Number.__allocating_init(note:typeName:size:alignment:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t type metadata accessor for MetalDataType.Enum()
{
  return self;
}

uint64_t method lookup function for MetalDataType.Enum(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Enum);
}

uint64_t dispatch thunk of MetalDataType.Enum.__allocating_init(note:typeName:types:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t method lookup function for MetalDataType.Pointer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Pointer);
}

uint64_t dispatch thunk of MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t type metadata accessor for MetalDataType.Matrix()
{
  return self;
}

uint64_t method lookup function for MetalDataType.Matrix(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Matrix);
}

uint64_t dispatch thunk of MetalDataType.Matrix.__allocating_init(typeName:vectorType:columnCount:rowCount:size:alignment:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t type metadata accessor for MetalDataType.Function()
{
  return self;
}

uint64_t method lookup function for MetalDataType.Function(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Function);
}

uint64_t dispatch thunk of MetalDataType.Function.__allocating_init(resultType:argumentTypes:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t getEnumTagSinglePayload for MetalDataType.AddressSpace(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MetalDataType.AddressSpace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2E81A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetalDataType.AddressSpace()
{
  return &type metadata for MetalDataType.AddressSpace;
}

uint64_t method lookup function for MetalDataType.Reference(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalDataType.Reference);
}

uint64_t dispatch thunk of MetalDataType.Reference.__allocating_init(to:isConst:addressSpace:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t outlined init with take of (MetalDataType, Any?)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetalDataType, Any?)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of (MetalDataType, Any?)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetalDataType, Any?)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t OrderedSet.difference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = a7;
  uint64_t v54 = type metadata accessor for CollectionDifference();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v53 = (char *)&v49 - v15;
  uint64_t v58 = *(uint64_t (***)(char *, uint64_t))(a5 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  uint64_t v62 = v17;
  *(void *)(v17 + 16) = 0;
  Swift::String v18 = (uint64_t *)(v17 + 16);
  uint64_t v19 = swift_allocObject();
  uint64_t v61 = v19;
  *(void *)(v19 + 16) = 0;
  uint64_t v20 = (uint64_t *)(v19 + 16);
  uint64_t v21 = swift_allocObject();
  uint64_t v52 = type metadata accessor for CollectionDifference.Change();
  *(void *)(v21 + 16) = Array.init()();
  uint64_t v51 = (uint64_t *)(v21 + 16);
  uint64_t v63 = v18;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v57 = v21;
  ++v58;
  uint64_t v56 = a6;
  uint64_t v60 = a1;
  while (1)
  {
    uint64_t v29 = *v63;
    if (v29 >= ContiguousArray.count.getter())
    {
      uint64_t v30 = *v20;
      if (v30 >= ContiguousArray.count.getter()) {
        break;
      }
    }
    uint64_t v31 = *v20;
    if (v31 == ContiguousArray.count.getter()) {
      goto LABEL_2;
    }
    if (v29 == ContiguousArray.count.getter()) {
      goto LABEL_10;
    }
    unsigned int v32 = v59;
    ContiguousArray.subscript.getter();
    uint64_t v33 = OrderedSet._find(_:)();
    char v35 = v34;
    unint64_t v36 = *v58;
    (*v58)(v32, a5);
    if (v35)
    {
      int v48 = 1;
      a1 = v60;
      uint64_t v22 = v60;
      uint64_t v23 = a2;
      uint64_t v24 = v62;
      uint64_t v21 = v57;
LABEL_3:
      uint64_t v25 = v21;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
LABEL_4:
      uint64_t v28 = a5;
      goto LABEL_5;
    }
    if (v33 >= *v20)
    {
      unsigned int v37 = v59;
      ContiguousArray.subscript.getter();
      a6 = v56;
      uint64_t v55 = OrderedSet._find(_:)();
      char v39 = v38;
      uint64_t result = v36(v37, a5);
      if (v39)
      {
        int v48 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        a1 = v60;
        uint64_t v24 = v61;
        uint64_t v21 = v57;
LABEL_11:
        uint64_t v25 = v21;
        uint64_t v26 = a1;
        uint64_t v27 = a2;
        goto LABEL_4;
      }
      uint64_t v41 = *v63;
      if (v55 < *v63)
      {
        int v48 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        a1 = v60;
        uint64_t v24 = v61;
        uint64_t v21 = v57;
        uint64_t v25 = v57;
        uint64_t v26 = v60;
        uint64_t v27 = a2;
        goto LABEL_15;
      }
      a6 = v56;
      a1 = v60;
      if (v41 != v55)
      {
        BOOL v42 = __OFSUB__(v55, v41);
        uint64_t v43 = v55 - v41;
        uint64_t v21 = v57;
        if (v42) {
          goto LABEL_32;
        }
        if (__OFSUB__(v33, *v20)) {
          goto LABEL_34;
        }
        if (v43 >= v33 - *v20)
        {
LABEL_2:
          int v48 = 1;
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          uint64_t v24 = v62;
          goto LABEL_3;
        }
LABEL_10:
        int v48 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        uint64_t v24 = v61;
        goto LABEL_11;
      }
      uint64_t v21 = v57;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *uint64_t v63 = v55 + 1;
      if (__OFADD__(*v20, 1)) {
        goto LABEL_33;
      }
      ++*v20;
    }
    else
    {
      int v48 = 1;
      a1 = v60;
      uint64_t v22 = v60;
      uint64_t v23 = a2;
      uint64_t v24 = v62;
      uint64_t v21 = v57;
      uint64_t v25 = v57;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
LABEL_15:
      uint64_t v28 = a5;
      a6 = v56;
LABEL_5:
      remove #1 <A>() in OrderedSet.difference(from:)(v22, v23, v24, v25, v26, v27, v28, a6, v48);
    }
  }
  unint64_t v44 = v51;
  swift_beginAccess();
  uint64_t v64 = *v44;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v45 = v53;
  CollectionDifference.init<A>(_:)();
  uint64_t v46 = v54;
  uint64_t v47 = *(void *)(v54 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v54);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v50, v45, v46);
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_25C2E88C4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25C2E88D4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t remove #1 <A>() in OrderedSet.difference(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  v26[2] = a6;
  v26[3] = a8;
  v26[1] = a5;
  int v27 = a9;
  uint64_t v11 = type metadata accessor for CollectionDifference.Change();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (void *)((char *)v26 - v13);
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  ContiguousArray.subscript.getter();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v19 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v20 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 64);
  swift_beginAccess();
  *uint64_t v14 = *(void *)(a3 + 16);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v17, a7);
  *(void *)uint64_t v20 = OrderedSet._find(_:)();
  v20[8] = v21 & 1;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  type metadata accessor for Array();
  Array.append(_:)();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a7);
  uint64_t result = swift_beginAccess();
  uint64_t v23 = *(void *)(a3 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(a3 + 16) = v25;
  }
  return result;
}

uint64_t OrderedSet.applying(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OrderedSet.elements.getter();
  uint64_t v7 = type metadata accessor for Array();
  swift_getWitnessTable();
  RangeReplaceableCollection.applying(_:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = v14;
  if (!v14) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = OrderedSet.init<A>(_:)((uint64_t)&v14, a4, v7, a5, WitnessTable);
  uint64_t v11 = ContiguousArray.count.getter();
  uint64_t v12 = MEMORY[0x261184200](v8, a4);
  swift_bridgeObjectRelease();
  if (v11 != v12)
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v10;
}

void *one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C41ACE0;
  *(void *)(inited + 32) = 0xD00000000000003BLL;
  *(void *)(inited + 40) = 0x800000025C4238C0;
  *(void *)(inited + 48) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 56) = 0xD00000000000003ALL;
  *(void *)(inited + 64) = 0x800000025C423900;
  *(void *)(inited + 72) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #1 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 80) = 0xD00000000000003BLL;
  *(void *)(inited + 88) = 0x800000025C423940;
  *(void *)(inited + 96) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #2 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 104) = 0xD00000000000003ALL;
  *(void *)(inited + 112) = 0x800000025C423980;
  *(void *)(inited + 120) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #3 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 128) = 0xD000000000000034;
  *(void *)(inited + 136) = 0x800000025C4239C0;
  *(void *)(inited + 144) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #4 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 152) = 0xD000000000000033;
  *(void *)(inited + 160) = 0x800000025C423A00;
  *(void *)(inited + 168) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #5 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 176) = 0xD00000000000003DLL;
  *(void *)(inited + 184) = 0x800000025C423A40;
  *(void *)(inited + 192) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #6 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 200) = 0xD00000000000003CLL;
  *(void *)(inited + 208) = 0x800000025C423A80;
  *(void *)(inited + 216) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #7 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 224) = 0xD00000000000003BLL;
  *(void *)(inited + 232) = 0x800000025C423AC0;
  *(void *)(inited + 240) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #8 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 248) = 0xD00000000000003ALL;
  *(void *)(inited + 256) = 0x800000025C423B00;
  *(void *)(inited + 264) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #9 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 272) = 0xD00000000000003BLL;
  *(void *)(inited + 280) = 0x800000025C423B40;
  *(void *)(inited + 288) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #10 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 296) = 0xD00000000000003ALL;
  *(void *)(inited + 304) = 0x800000025C423B80;
  *(void *)(inited + 312) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #11 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 320) = 0xD000000000000034;
  *(void *)(inited + 328) = 0x800000025C423BC0;
  *(void *)(inited + 336) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #12 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 344) = 0xD000000000000033;
  *(void *)(inited + 352) = 0x800000025C423C00;
  *(void *)(inited + 360) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #13 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 368) = 0xD00000000000003DLL;
  *(void *)(inited + 376) = 0x800000025C423C40;
  *(void *)(inited + 384) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #14 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 392) = 0xD00000000000003CLL;
  *(void *)(inited + 400) = 0x800000025C423C80;
  *(void *)(inited + 408) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #15 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 416) = 0xD000000000000034;
  *(void *)(inited + 424) = 0x800000025C423CC0;
  *(void *)(inited + 432) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #16 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 440) = 0xD000000000000033;
  *(void *)(inited + 448) = 0x800000025C423D00;
  *(void *)(inited + 456) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #17 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 464) = 0xD000000000000034;
  *(void *)(inited + 472) = 0x800000025C423D40;
  *(void *)(inited + 480) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #18 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 488) = 0xD000000000000033;
  *(void *)(inited + 496) = 0x800000025C423D80;
  *(void *)(inited + 504) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #19 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 512) = 0xD00000000000002DLL;
  *(void *)(inited + 520) = 0x800000025C423DC0;
  *(void *)(inited + 528) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #20 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 536) = 0xD00000000000002CLL;
  *(void *)(inited + 544) = 0x800000025C423DF0;
  *(void *)(inited + 552) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #21 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 560) = 0xD000000000000036;
  *(void *)(inited + 568) = 0x800000025C423E20;
  *(void *)(inited + 576) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #22 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 584) = 0xD000000000000035;
  *(void *)(inited + 592) = 0x800000025C423E60;
  *(void *)(inited + 600) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #23 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 608) = 0xD00000000000003DLL;
  *(void *)(inited + 616) = 0x800000025C423EA0;
  *(void *)(inited + 624) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #24 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 632) = 0xD00000000000003CLL;
  *(void *)(inited + 640) = 0x800000025C423EE0;
  *(void *)(inited + 648) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #25 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 656) = 0xD00000000000003DLL;
  *(void *)(inited + 664) = 0x800000025C423F20;
  *(void *)(inited + 672) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #26 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 680) = 0xD00000000000003CLL;
  *(void *)(inited + 688) = 0x800000025C423F60;
  *(void *)(inited + 696) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #27 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 704) = 0xD000000000000036;
  *(void *)(inited + 712) = 0x800000025C423FA0;
  *(void *)(inited + 720) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #28 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 728) = 0xD000000000000035;
  *(void *)(inited + 736) = 0x800000025C423FE0;
  *(void *)(inited + 744) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #29 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 752) = 0xD00000000000003FLL;
  *(void *)(inited + 760) = 0x800000025C424020;
  *(void *)(inited + 768) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #30 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(void *)(inited + 776) = 0xD00000000000003ELL;
  *(void *)(inited + 784) = 0x800000025C424060;
  *(void *)(inited + 792) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #31 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  constantCreateSamplerFunctionNameToMatchingArguments._rawValue = result;
  return result;
}

Swift::OpaquePointer *constantCreateSamplerFunctionNameToMatchingArguments.unsafeMutableAddressor()
{
  if (one-time initialization token for constantCreateSamplerFunctionNameToMatchingArguments != -1) {
    swift_once();
  }
  return &constantCreateSamplerFunctionNameToMatchingArguments;
}

uint64_t OrderedDictionary.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[5] = a1;
  void v18[6] = a2;
  v18[7] = a3;
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  uint64_t v14 = *MEMORY[0x263F8E7F0];
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for OrderedDictionary();
  type metadata accessor for OrderedDictionary.Elements();
  swift_getWitnessTable();
  default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)v10);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedDictionary<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedDictionary.customMirror.getter(*v2, v2[1], v2[2], *(void *)(a1 + 32), a2);
}

uint64_t OrderedDictionary.Elements._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Elements._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *int v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t (*OrderedDictionary.elements.modify(void *a1, void *a2))()
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = a2[4];
  uint64_t v7 = OrderedSet.init()();
  uint64_t v9 = v8;
  *((void *)v5 + 6) = a2[3];
  static Array._allocateUninitialized(_:)();
  uint64_t v10 = ContiguousArray.init(arrayLiteral:)();
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v9;
  *(void *)(v2 + 16) = v10;
  return OrderedDictionary.elements.modify;
}

uint64_t OrderedDictionary.Elements.keys.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.elements.getter(uint64_t a1)
{
  return a1;
}

uint64_t key path getter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v6 = OrderedSet.init()();
  uint64_t v8 = v7;
  static Array._allocateUninitialized(_:)();
  uint64_t v9 = ContiguousArray.init(arrayLiteral:)();
  swift_release();
  swift_release();
  swift_release();
  *a2 = v6;
  a2[1] = v8;
  a2[2] = v9;
  v11[0] = v3;
  v11[1] = v4;
  v11[2] = v5;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(a2, v11);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t (*OrderedDictionary.Elements.values.modify(void *a1, void *a2))()
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = a2[4];
  uint64_t v7 = OrderedSet.init()();
  uint64_t v9 = v8;
  *((void *)v5 + 6) = a2[3];
  static Array._allocateUninitialized(_:)();
  uint64_t v10 = ContiguousArray.init(arrayLiteral:)();
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v9;
  *(void *)(v2 + 16) = v10;
  return OrderedDictionary.elements.modify;
}

void OrderedDictionary.elements.modify(void **a1)
{
  uint64_t v1 = *a1;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify((void *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t $defer #1 <A, B>() in OrderedDictionary.elements.modify(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = a2[2];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t OrderedDictionary.elements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = OrderedSet.init()();
  uint64_t v10 = v9;
  static Array._allocateUninitialized(_:)();
  uint64_t v11 = ContiguousArray.init(arrayLiteral:)();
  swift_release();
  swift_release();
  swift_release();
  *uint64_t v4 = v8;
  v4[1] = v10;
  v4[2] = v11;
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(v4, v13);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t OrderedDictionary.Elements.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.Elements.underestimatedCount.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t OrderedDictionary.Elements.makeIterator()(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance OrderedDictionary<A, B>.Elements@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = OrderedDictionary.Elements.makeIterator()(*v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedDictionary<A, B>.Elements()
{
  return OrderedDictionary.Elements.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>.Elements()
{
  swift_getWitnessTable();
  uint64_t v0 = specialized Collection._copyToContiguousArray()();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedDictionary.Elements.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.Elements.subscript.getter()
{
  ContiguousArray.subscript.getter();
  return ContiguousArray.subscript.getter();
}

uint64_t OrderedDictionary.Elements.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t result = ContiguousArray.count.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a6 = a3;
    a6[1] = a4;
    a6[2] = a5;
    a6[3] = a1;
    a6[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.isEmpty.getter()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t OrderedDictionary.Elements._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = a3;
  uint64_t v5 = a1;
  v4[0] = a2;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v5, (uint64_t)v4);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  size_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = (char *)malloc(v8);
  a1[2] = (uint64_t)v9;
  uint64_t v10 = (char *)malloc(v8);
  a1[3] = (uint64_t)v10;
  uint64_t v11 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  ContiguousArray.subscript.getter();
  ContiguousArray.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(v9, v10, v4);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v11, v5);
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements;
}

void protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements(uint64_t *a1)
{
  BOOL v2 = (void *)a1[2];
  BOOL v1 = (void *)a1[3];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(void *, uint64_t))(a1[1] + 8);
  v4(v2, *a1);
  v4(v1, v3);
  free(v1);
  free(v2);
}

double protocol witness for Collection.subscript.getter in conformance OrderedDictionary<A, B>.Elements@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  OrderedDictionary.Elements.subscript.getter(*a1, a1[1], *v2, v2[1], v2[2], v6);
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance OrderedDictionary<A, B>.Elements()
{
  swift_getWitnessTable();
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance OrderedDictionary<A, B>.Elements()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedDictionary<A, B>.Elements()
{
  return ContiguousArray.count.getter();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance OrderedDictionary<A, B>.Elements(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v3 = *a2;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v4, (uint64_t)&v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(void *a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Elements.description.getter);
}

uint64_t OrderedDictionary.Elements.debugDescription.getter()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 8236;
  v1._char object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x6E656D656C452E3ELL;
  v3._char object = (void *)0xEA00000000007374;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  v4._char object = (void *)0x800000025C4240A0;
  uint64_t countAndFlagsBits = OrderedDictionary._debugDescription(typeName:)(v4)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedDictionary<A, B>.Elements(void *a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Elements.debugDescription.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.Elements.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[5] = a1;
  void v18[6] = a2;
  v18[7] = a3;
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  uint64_t v14 = *MEMORY[0x263F8E7E8];
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for OrderedDictionary.Elements();
  swift_getWitnessTable();
  default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)v10);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedDictionary<A, B>.Elements@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedDictionary.Elements.customMirror.getter(*v2, v2[1], v2[2], *(void *)(a1 + 32), a2);
}

uint64_t static OrderedDictionary.Elements<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return static OrderedDictionary<>.== infix(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> OrderedDictionary<A, B>.Elements(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return static OrderedDictionary.Elements<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4], *(void *)(a4 - 8)) & 1;
}

Swift::Int OrderedDictionary.Elements<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Hasher.init(_seed:)();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> OrderedDictionary<A, B>.Elements(uint64_t *a1, uint64_t a2)
{
  return OrderedDictionary.Elements<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(void *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> OrderedDictionary<A, B>.Elements(uint64_t a1, void *a2, uint64_t a3)
{
  return OrderedDictionary.Elements<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> OrderedDictionary<A, B>.Elements(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  Hasher.init(_seed:)();
  OrderedDictionary.Elements<>.hash(into:)(v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return Hasher._finalize()();
}

Swift::Void __swiftcall OrderedDictionary.Elements.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  OrderedDictionary.Elements.swapAt(_:_:)(a1, a2, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.swapAt(_:_:));
}

void *OrderedDictionary.Elements.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.partition(by:)(a1, a2, v4);
}

uint64_t OrderedDictionary.Elements.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedDictionary.Elements.sort(by:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.sort(by:));
}

uint64_t OrderedDictionary.Elements<>.sort()()
{
  type metadata accessor for OrderedDictionary();
  return OrderedDictionary<>.sort()();
}

Swift::Void __swiftcall OrderedDictionary.Elements.shuffle()()
{
  OrderedDictionary.Elements.shuffle()(v0, (uint64_t (*)(uint64_t))OrderedDictionary.shuffle());
}

uint64_t OrderedDictionary.Elements.shuffle<A>(using:)(uint64_t a1)
{
  uint64_t v2 = (void *)type metadata accessor for OrderedDictionary();
  return OrderedDictionary.shuffle<A>(using:)(a1, v2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.reverse()()
{
  OrderedDictionary.Elements.shuffle()(v0, (uint64_t (*)(uint64_t))OrderedDictionary.reverse());
}

uint64_t OrderedDictionary.Elements.shuffle()(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for OrderedDictionary();
  return a2(v2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.removeAll(keepingCapacity:)(keepingCapacity);
}

uint64_t OrderedDictionary.Elements.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for OrderedDictionary();
  return OrderedDictionary.remove(at:)(a1, a2, a3);
}

uint64_t OrderedDictionary.Elements.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedDictionary.Elements.swapAt(_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeSubrange(_:));
}

uint64_t OrderedDictionary.Elements.swapAt(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for OrderedDictionary();
  return a4(a1, a2, v6);
}

uint64_t OrderedDictionary.Elements.removeSubrange<A>(_:)()
{
  type metadata accessor for OrderedDictionary();
  return OrderedDictionary.removeSubrange<A>(_:)();
}

uint64_t OrderedDictionary.Elements.removeLast()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedDictionary.Elements.removeLast()(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeLast());
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeLast(_:)(Swift::Int a1)
{
  OrderedDictionary.Elements.removeLast(_:)(a1, v1, (uint64_t (*)(uint64_t, uint64_t))OrderedDictionary.removeLast(_:));
}

uint64_t OrderedDictionary.Elements.removeFirst()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedDictionary.Elements.removeLast()(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeFirst());
}

uint64_t OrderedDictionary.Elements.removeLast()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for OrderedDictionary();
  return a4(a1, a2, v6);
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeFirst(_:)(Swift::Int a1)
{
  OrderedDictionary.Elements.removeLast(_:)(a1, v1, (uint64_t (*)(uint64_t, uint64_t))OrderedDictionary.removeFirst(_:));
}

uint64_t OrderedDictionary.Elements.removeLast(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for OrderedDictionary();
  return a3(a1, v4);
}

uint64_t OrderedDictionary.Elements.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedDictionary.Elements.sort(by:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeAll(where:));
}

uint64_t OrderedDictionary.Elements.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for OrderedDictionary();
  return a4(a1, a2, v7);
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA60]();
}

uint64_t type metadata accessor for OrderedDictionary.Elements()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in <> OrderedDictionary<A, B>.Elements()
{
  return swift_getWitnessTable();
}

uint64_t sub_25C2EB06C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_25C2EB084(uint64_t *a1, uint64_t *a2)
{
  return key path setter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_25C2EB09C()
{
  return 24;
}

__n128 sub_25C2EB0A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_25C2EB0BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return key path getter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_25C2EB0D4(uint64_t *a1, uint64_t *a2)
{
  return key path setter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_25C2EB0EC()
{
  return 24;
}

__n128 sub_25C2EB0F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t GeomPropDef.init(name:type:geomprop:space:index:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = a6 & 1;
  *(unsigned char *)(a9 + 41) = a7;
  *(void *)(a9 + 48) = a8;
  *(unsigned char *)(a9 + 56) = a10 & 1;
  return result;
}

uint64_t GeomPropDef.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeomPropDef.type.getter()
{
  return swift_retain();
}

uint64_t GeomPropDef.geomprop.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of GeomPropDef.GeomProp(v1, *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  return v1;
}

uint64_t GeomPropDef.space.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t GeomPropDef.index.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t GeomPropDef.Space.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C65646F6DLL;
  }
  if (a1 == 1) {
    return 0x7463656A626FLL;
  }
  return 0x646C726F77;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeomPropDef.Space(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = 0x7463656A626FLL;
  if (v2 != 1)
  {
    uint64_t v4 = 0x646C726F77;
    unint64_t v3 = 0xE500000000000000;
  }
  if (*a1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x6C65646F6DLL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = 0xE600000000000000;
  uint64_t v8 = 0x7463656A626FLL;
  if (*a2 != 1)
  {
    uint64_t v8 = 0x646C726F77;
    unint64_t v7 = 0xE500000000000000;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x6C65646F6DLL;
  }
  if (*a2) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  if (v5 == v9 && v6 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeomPropDef.Space()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeomPropDef.Space()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeomPropDef.Space()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeomPropDef.Space@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized GeomPropDef.Space.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GeomPropDef.Space(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x7463656A626FLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x646C726F77;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6C65646F6DLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t GeomPropDef.GeomProp.paramGetterNodeDefName(type:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if ((a4 & 1) == 0) {
    return GeomPropDef.BuiltinGeomProp.paramGetterNodeDefName(type:)(a1, a2);
  }
  v23[0] = a2;
  v23[1] = a3;
  char v24 = 1;
  uint64_t v25 = a1;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi21_((uint64_t)v23);
  *(void *)&v26[0] = 0;
  *((void *)&v26[0] + 1) = 0xE000000000000000;
  outlined copy of GeomPropDef.GeomProp(a2, (uint64_t)a3, 1);
  swift_retain();
  _StringGuts.grow(_:)(65);
  v7._char object = (void *)0x800000025C4240C0;
  v7._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = a2;
  v8._char object = a3;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x7420687469772027;
  v9._char object = (void *)0xED00002720657079;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = MaterialXDataType.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 39;
  v11._char object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  long long v12 = v26[0];
  outlined init with take of UserGraphError.ErrorType((uint64_t)v23, (uint64_t)v26);
  long long v27 = v12;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *uint64_t v13 = v26[0];
  long long v14 = v26[4];
  long long v16 = v26[1];
  long long v15 = v26[2];
  void v13[3] = v26[3];
  void v13[4] = v14;
  v13[1] = v16;
  v13[2] = v15;
  long long v17 = v26[8];
  long long v19 = v26[5];
  long long v18 = v26[6];
  v13[7] = v26[7];
  v13[8] = v17;
  v13[5] = v19;
  v13[6] = v18;
  long long v20 = v27;
  long long v22 = v26[9];
  long long v21 = v26[10];
  v13[11] = v26[11];
  v13[12] = v20;
  _OWORD v13[9] = v22;
  v13[10] = v21;
  return swift_willThrow();
}

unint64_t GeomPropDef.BuiltinGeomProp.paramGetterNodeDefName(type:)(uint64_t a1, char a2)
{
  int v2 = (const char *)0xD000000000000014;
  switch(a2)
  {
    case 1:
      return 0xD000000000000011;
    case 2:
      return 0xD000000000000012;
    case 3:
      return (unint64_t)v2;
    case 4:
      if (one-time initialization token for vector2 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      if (one-time initialization token for float2 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      if (one-time initialization token for vector3 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      if (one-time initialization token for float3 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      if (one-time initialization token for vector4 != -1) {
        swift_once();
      }
      int v2 = "ND_texcoord_vector3";
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      if (one-time initialization token for float4 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      long long v23 = xmmword_25C41A120;
      char v24 = 0;
      uint64_t v25 = a1;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi21_((uint64_t)&v23);
      *(void *)&v26[0] = 0;
      *((void *)&v26[0] + 1) = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(40);
      v20._uint64_t countAndFlagsBits = 0xD000000000000012;
      v20._char object = (void *)0x800000025C4240F0;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = MaterialXDataType.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 0xD000000000000011;
      v22._char object = (void *)0x800000025C424110;
      String.append(_:)(v22);
      goto LABEL_36;
    case 5:
      if (one-time initialization token for float != -1) {
        swift_once();
      }
      int v2 = (const char *)0xD000000000000012;
      if (MaterialXDataType.isEqual(to:)()) {
        return (unint64_t)v2;
      }
      if (one-time initialization token for color3 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      if (one-time initialization token for color4 != -1) {
        swift_once();
      }
      if (MaterialXDataType.isEqual(to:)()) {
        return 0xD000000000000013;
      }
      long long v23 = xmmword_25C4195B0;
      char v24 = 0;
      uint64_t v25 = a1;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi21_((uint64_t)&v23);
      *(void *)&v26[0] = 0;
      *((void *)&v26[0] + 1) = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(40);
      v5._char object = (void *)0x800000025C4240F0;
      v5._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = MaterialXDataType.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 0xD000000000000011;
      v7._char object = (void *)0x800000025C424110;
      String.append(_:)(v7);
LABEL_36:
      _print_unlocked<A, B>(_:_:)();
      v8._uint64_t countAndFlagsBits = 39;
      v8._char object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      long long v9 = v26[0];
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v23, (uint64_t)v26);
      long long v27 = v9;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *Swift::String v10 = v26[0];
      long long v11 = v26[4];
      long long v13 = v26[1];
      long long v12 = v26[2];
      v10[3] = v26[3];
      v10[4] = v11;
      v10[1] = v13;
      _OWORD v10[2] = v12;
      long long v14 = v26[8];
      long long v16 = v26[5];
      long long v15 = v26[6];
      v10[7] = v26[7];
      v10[8] = v14;
      v10[5] = v16;
      v10[6] = v15;
      long long v17 = v27;
      long long v19 = v26[9];
      long long v18 = v26[10];
      v10[11] = v26[11];
      v10[12] = v17;
      v10[9] = v19;
      v10[10] = v18;
      swift_willThrow();
      return (unint64_t)v2;
    default:
      return 0xD000000000000013;
  }
}

void *static GeomPropDef.BuiltinGeomProp.allCases.getter()
{
  return &outlined read-only object #0 of static GeomPropDef.BuiltinGeomProp.allCases.getter;
}

uint64_t GeomPropDef.BuiltinGeomProp.rawValue.getter(char a1)
{
  uint64_t result = 0x6E6F697469736F70;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6C616D726F6ELL;
      break;
    case 2:
      uint64_t result = 0x746E65676E6174;
      break;
    case 3:
      uint64_t result = 0x6E65676E61746962;
      break;
    case 4:
      uint64_t result = 0x64726F6F63786574;
      break;
    case 5:
      uint64_t result = 0x6F6C6F636D6F6567;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeomPropDef.BuiltinGeomProp(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x6E6F697469736F70;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x6E6F697469736F70;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x6C616D726F6ELL;
      break;
    case 2:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x746E65676E6174;
      break;
    case 3:
      uint64_t v5 = 0x6E65676E61746962;
      unint64_t v4 = 0xE900000000000074;
      break;
    case 4:
      uint64_t v5 = 0x64726F6F63786574;
      break;
    case 5:
      uint64_t v5 = 0x6F6C6F636D6F6567;
      unint64_t v4 = 0xE900000000000072;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x6C616D726F6ELL) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x746E65676E6174) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE900000000000074;
      if (v5 != 0x6E65676E61746962) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0x64726F6F63786574;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE900000000000072;
      if (v5 != 0x6F6C6F636D6F6567) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeomPropDef.BuiltinGeomProp@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized GeomPropDef.BuiltinGeomProp.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GeomPropDef.BuiltinGeomProp(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x6E6F697469736F70;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x6C616D726F6ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0x746E65676E6174;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x6E65676E61746962;
      a1[1] = 0xE900000000000074;
      break;
    case 4:
      *a1 = 0x64726F6F63786574;
      a1[1] = 0xE800000000000000;
      break;
    case 5:
      *a1 = 0x6F6C6F636D6F6567;
      a1[1] = 0xE900000000000072;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeomPropDef.BuiltinGeomProp()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeomPropDef.BuiltinGeomProp()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeomPropDef.BuiltinGeomProp()
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance GeomPropDef.BuiltinGeomProp(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static GeomPropDef.BuiltinGeomProp.allCases.getter;
}

unint64_t specialized GeomPropDef.BuiltinGeomProp.init(rawValue:)(Swift::String string)
{
  char object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._char object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeomPropDef.BuiltinGeomProp.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t specialized GeomPropDef.Space.init(rawValue:)(Swift::String string)
{
  char object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._char object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeomPropDef.Space.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi21_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x5800000000000000;
  return result;
}

unint64_t lazy protocol witness table accessor for type GeomPropDef.Space and conformance GeomPropDef.Space()
{
  unint64_t result = lazy protocol witness table cache variable for type GeomPropDef.Space and conformance GeomPropDef.Space;
  if (!lazy protocol witness table cache variable for type GeomPropDef.Space and conformance GeomPropDef.Space)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeomPropDef.Space and conformance GeomPropDef.Space);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp()
{
  unint64_t result = lazy protocol witness table cache variable for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp;
  if (!lazy protocol witness table cache variable for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [GeomPropDef.BuiltinGeomProp] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [GeomPropDef.BuiltinGeomProp] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GeomPropDef.BuiltinGeomProp] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GeomPropDef.BuiltinGeomProp]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [GeomPropDef.BuiltinGeomProp] and conformance [A]);
  }
  return result;
}

uint64_t destroy for GeomPropDef(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  return outlined consume of GeomPropDef.GeomProp(v2, v3, v4);
}

uint64_t initializeWithCopy for GeomPropDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of GeomPropDef.GeomProp(v5, v6, v7);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for GeomPropDef(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  outlined copy of GeomPropDef.GeomProp(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of GeomPropDef.GeomProp(v7, v8, v9);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v10;
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GeomPropDef(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of GeomPropDef.GeomProp(v5, v6, v7);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeomPropDef(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeomPropDef(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeomPropDef()
{
  return &type metadata for GeomPropDef;
}

unsigned char *storeEnumTagSinglePayload for GeomPropDef.Space(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2EC930);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeomPropDef.Space()
{
  return &type metadata for GeomPropDef.Space;
}

uint64_t destroy for GeomPropDef.GeomProp(uint64_t a1)
{
  return outlined consume of GeomPropDef.GeomProp(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GeomPropDef.GeomProp(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GeomPropDef.GeomProp(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of GeomPropDef.GeomProp(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of GeomPropDef.GeomProp(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for GeomPropDef.GeomProp()
{
  return &type metadata for GeomPropDef.GeomProp;
}

uint64_t getEnumTagSinglePayload for GeomPropDef.BuiltinGeomProp(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GeomPropDef.BuiltinGeomProp(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C2ECBD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeomPropDef.BuiltinGeomProp()
{
  return &type metadata for GeomPropDef.BuiltinGeomProp;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_retain();
    swift_retain();
    do
    {
      outlined init with copy of WeakBox<SGEdge>(v4, (uint64_t)&v7);
      uint64_t v5 = MEMORY[0x261185960](&v7);
      uint64_t v6 = outlined destroy of WeakBox<SGEdge>((uint64_t)&v7);
      if (v5)
      {
        MEMORY[0x261184120](v6);
        if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_release();
    swift_release();
    return v8;
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2611848A0](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      SGNode.legacyNode(in:)(a2, (uint64_t)v16);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }
      outlined init with take of NodePersonality(v16, &v19);
      outlined release of NodePersonality(&v19);
      uint64_t v18 = v16[1];
      outlined release of [Input]((uint64_t)&v18);
      uint64_t v17 = v16[2];
      outlined release of [Input]((uint64_t)&v17);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
      }
      uint64_t v12 = v16[3];
      _OWORD v5[2] = v11 + 1;
      long long v13 = &v5[2 * v11];
      void v13[4] = v8;
      v13[5] = v12;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x263F8EE78];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  long long v16;
  void *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  long long v24;
  uint64_t v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    Swift::String v21 = v3 & 0xC000000000000001;
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    uint64_t v6 = 4;
    unint64_t v19 = v4;
    Swift::String v20 = v3;
    while (1)
    {
      uint64_t v8 = v21 ? (id)MEMORY[0x2611848A0](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      uint64_t v9 = v8;
      unint64_t v10 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      uint64_t v30 = v8;
      closure #3 in SGGraph.createCustomUniformsType(named:textureAssignments:)((uint64_t *)&v30, a2, (uint64_t)&v25);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }

      if ((void)v26)
      {
        char v24 = v26;
        unint64_t v11 = v27;
        uint64_t v12 = v28;
        long long v13 = v29;
        long long v23 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        long long v15 = v5[2];
        long long v14 = v5[3];
        long long v16 = v24;
        if (v15 >= v14 >> 1)
        {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v5);
          long long v16 = v24;
          uint64_t v5 = v17;
        }
        _OWORD v5[2] = v15 + 1;
        id v7 = &v5[6 * v15];
        v7[4] = v23;
        *(_OWORD *)(v7 + 5) = v16;
        v7[7] = v11;
        *((unsigned char *)v7 + 64) = v12 & 1;
        v7[9] = v13;
        uint64_t v4 = v19;
        uint64_t v3 = v20;
      }
      ++v6;
      if (v10 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x263F8EE78];
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = v4 & 0xC000000000000001;
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    uint64_t v7 = 4;
    uint64_t v18 = v5;
    unint64_t v19 = v4;
    while (1)
    {
      id v9 = v20 ? (id)MEMORY[0x2611848A0](v7 - 4, v4) : *(id *)(v4 + 8 * v7);
      unint64_t v10 = v9;
      uint64_t v11 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v46 = v9;
      closure #4 in mapGraph(_:into:)((uint64_t *)&v46, a2, a3, (uint64_t)&v33);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v6;
      }

      uint64_t v12 = v34;
      if (v34)
      {
        uint64_t v25 = v36;
        uint64_t v26 = v35;
        uint64_t v23 = v33;
        uint64_t v24 = v37;
        long long v32 = v39;
        uint64_t v29 = v42;
        char v13 = v44;
        char v27 = v38;
        uint64_t v28 = v43;
        uint64_t v14 = v45;
        uint64_t v30 = v41;
        uint64_t v31 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v16 = v6[2];
        unint64_t v15 = v6[3];
        if (v16 >= v15 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v6);
        }
        _OWORD v6[2] = v16 + 1;
        uint64_t v8 = &v6[14 * v16];
        v8[4] = v23;
        void v8[5] = v12;
        v8[6] = v26;
        v8[7] = v25;
        unsigned char v8[8] = v24;
        *((unsigned char *)v8 + 72) = v27 & 1;
        *((_OWORD *)v8 + 5) = v32;
        v8[12] = v31;
        v8[13] = v30;
        v8[14] = v29;
        v8[15] = v28;
        *((unsigned char *)v8 + 128) = v13 & 1;
        v8[17] = v14;
        uint64_t v5 = v18;
        unint64_t v4 = v19;
      }
      ++v7;
      if (v11 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph7NodeDefV_G_SS_AH17BuiltInDefinitionVts5NeverOTg504_s11e7Graph22ijk12StoreC07nodeh12F0AcA04NodehQ30V_tcfcSS_AA0cdE0VtAA0iH0VXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v39 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v39;
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v30 = v3 + 80;
  int64_t v31 = v1;
  int v32 = v5;
  uint64_t v33 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v34 = v7;
    uint64_t v12 = (_OWORD *)(*(void *)(v3 + 56) + 144 * v6);
    v45[0] = *v12;
    long long v13 = v12[4];
    long long v15 = v12[1];
    long long v14 = v12[2];
    uint64_t v45[3] = v12[3];
    v45[4] = v13;
    v45[1] = v15;
    v45[2] = v14;
    long long v16 = v12[8];
    long long v18 = v12[5];
    long long v17 = v12[6];
    v45[7] = v12[7];
    v45[8] = v16;
    v45[5] = v18;
    v45[6] = v17;
    uint64_t v19 = *((void *)&v45[0] + 1);
    uint64_t v46 = *(void *)&v45[0];
    outlined retain of NodeDef((uint64_t)v45);
    swift_bridgeObjectRetain();
    specialized BuiltInDefinition.init(nodeDef:)(v45, &v40);
    long long v38 = v41;
    uint64_t v20 = v42;
    uint64_t v36 = v43;
    uint64_t v37 = v40;
    uint64_t v35 = v44;
    uint64_t result = outlined release of NodeDef((uint64_t)v45);
    uint64_t v21 = v3;
    unint64_t v23 = *(void *)(v39 + 16);
    unint64_t v22 = *(void *)(v39 + 24);
    if (v23 >= v22 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    }
    *(void *)(v39 + 16) = v23 + 1;
    uint64_t v24 = v39 + (v23 << 6);
    *(void *)(v24 + 32) = v46;
    *(void *)(v24 + 40) = v19;
    *(void *)(v24 + 48) = v37;
    *(_OWORD *)(v24 + 56) = v38;
    *(void *)(v24 + 72) = v20;
    *(void *)(v24 + 80) = v36;
    *(void *)(v24 + 88) = v35;
    int64_t v9 = 1 << *(unsigned char *)(v21 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v33;
    uint64_t v25 = *(void *)(v33 + 8 * v11);
    if ((v25 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v21;
    int v5 = v32;
    if (*(_DWORD *)(v21 + 36) != v32) {
      goto LABEL_27;
    }
    unint64_t v26 = v25 & (-2 << (v6 & 0x3F));
    if (v26)
    {
      int64_t v9 = __clz(__rbit64(v26)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v31;
    }
    else
    {
      unint64_t v27 = v11 + 1;
      unint64_t v28 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v31;
      if (v11 + 1 < v28)
      {
        unint64_t v29 = *(void *)(v33 + 8 * v27);
        if (v29)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v11)
          {
            unint64_t v29 = *(void *)(v30 + 8 * v11++);
            if (v29)
            {
              unint64_t v27 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v34 + 1;
    uint64_t v6 = v9;
    if (v34 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV13ReservedNamesOG_SSs5NeverOTg504_s11d84Graph03mapB033_409C205F32E965F544D867255561D769LL_4intoyAA7SGGraphC_AA0B0VztKFSSAA17fgh3V13iJ54Ocfu_33_9a8543e77c82589f922673eb5cf911b0ALSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    unint64_t v4 = (unsigned char *)(a1 + 32);
    uint64_t result = v10;
    do
    {
      if (*v4) {
        uint64_t v5 = 0x746C757365725F5FLL;
      }
      else {
        uint64_t v5 = 0x656D756772615F5FLL;
      }
      if (*v4) {
        unint64_t v6 = 0xE900000000000073;
      }
      else {
        unint64_t v6 = 0xEB0000000073746ELL;
      }
      uint64_t v11 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v11;
      }
      *(void *)(result + 16) = v8 + 1;
      uint64_t v9 = result + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(void *)(v9 + 40) = v6;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s6UInt16Vs5NeverOTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  long long v16 = (void *(*)(uint64_t *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v19;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v15 = v10;
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      long long v17 = v11;
      uint64_t result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      __int16 v12 = v18;
      uint64_t v19 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v19;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(_WORD *)(v7 + 2 * v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v15 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5Int32Vs5NeverOTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  long long v16 = (void *(*)(uint64_t *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v19;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v15 = v10;
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      long long v17 = v11;
      uint64_t result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      int v12 = v18;
      uint64_t v19 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v19;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v15 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v15)(int *__return_ptr, uint64_t *);
  uint64_t v16;
  int v17;
  uint64_t v18;

  uint64_t v15 = (void *(*)(int *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  long long v18 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v18;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      long long v16 = v11;
      uint64_t result = v15(&v17, &v16);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      int v12 = v17;
      long long v18 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v18;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v10 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AF7SGInputCs5NeverOTg504_s11d76Graph7SGGraphC34replaceDeprecatedAndRedundantNodesyyKFyAA15TopologicalSortV7b10VKXEfU_AA7g4CAA6F54Ccfu0_33_8ffafd5b6a296e22d4e39828be60e38bAlJTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v2) {
      break;
    }
    uint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v5 = (char *)MEMORY[0x2611848A0](v4, a1);
      }
      else {
        uint64_t v5 = (char *)*(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      uint64_t v7 = (id *)&v5[OBJC_IVAR___SGEdge_to];
      swift_beginAccess();
      id v8 = *v7;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return v9;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SGDataType.materialXDataType.getter(uint64_t a1)
{
  specialized SGDataType.materialXDataType.getter(a1);
  return swift_retain();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.replaceDeprecatedAndRedundantNodes()()
{
  unint64_t v1 = specialized SGGraph.deprecationMap()();
  if (!v0)
  {
    uint64_t v2 = v1;
    uint64_t v3 = SGGraph.topologicalSort()();
    uint64_t v5 = v4;
    uint64_t v7 = v6;

    uint64_t v9 = *((void *)v3 + 2);
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = (void **)(v3 + 3);
      do
      {
        int v12 = *(v10 - 1);
        unint64_t v13 = *v10;
        v17[0] = *(v10 - 2);
        uint64_t v11 = (void *)v17[0];
        v17[1] = v12;
        void v17[2] = v13;
        id v14 = v13;
        id v15 = v11;
        id v16 = v12;
        closure #1 in SGGraph.replaceDeprecatedAndRedundantNodes()((uint64_t)v17, v2);
        v10 += 3;

        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t *BuiltInDefinitionStore.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static BuiltInDefinitionStore.shared;
}

uint64_t SGGraph.legacyGraph()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = (unint64_t *)(v1 + OBJC_IVAR___SGGraph_inputs);
  swift_beginAccess();
  unint64_t v6 = *v5;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v44 = a1;
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  if (v7)
  {
    *(void *)&long long v51 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v10 = 0;
    unint64_t v11 = v51;
    unint64_t v47 = v6 & 0xC000000000000001;
    unint64_t v61 = v6;
    uint64_t v12 = v7;
    do
    {
      if (v47) {
        unint64_t v13 = (char *)MEMORY[0x2611848A0](v10, v6);
      }
      else {
        unint64_t v13 = (char *)*(id *)(v6 + 8 * v10 + 32);
      }
      id v14 = v13;
      uint64_t v15 = *(void *)&v13[OBJC_IVAR___SGInput_name];
      uint64_t v16 = *(void *)&v13[OBJC_IVAR___SGInput_name + 8];
      long long v17 = (uint64_t *)&v13[OBJC_IVAR___SGInput_type];
      swift_beginAccess();
      uint64_t v18 = *v17;
      swift_bridgeObjectRetain();
      uint64_t v19 = specialized SGDataType.materialXDataType.getter(v18);
      swift_retain();

      *(void *)&long long v51 = v11;
      unint64_t v21 = *(void *)(v11 + 16);
      unint64_t v20 = *(void *)(v11 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        unint64_t v11 = v51;
      }
      ++v10;
      *(void *)(v11 + 16) = v21 + 1;
      unint64_t v22 = (void *)(v11 + 24 * v21);
      v22[4] = v15;
      v22[5] = v16;
      v22[6] = v19;
      unint64_t v6 = v61;
    }
    while (v12 != v10);
    swift_bridgeObjectRelease();
    uint64_t v3 = v46;
    unint64_t v8 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = MEMORY[0x263F8EE78];
  }
  unint64_t v23 = (unint64_t *)(v3 + OBJC_IVAR___SGGraph_outputs);
  swift_beginAccess();
  unint64_t v24 = *v23;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    if (v25)
    {
LABEL_16:
      *(void *)&long long v51 = v8;
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        uint64_t v26 = 0;
        unint64_t v8 = v51;
        unint64_t v48 = v24 & 0xC000000000000001;
        unint64_t v61 = v24;
        do
        {
          if (v48) {
            unint64_t v27 = (char *)MEMORY[0x2611848A0](v26, v24);
          }
          else {
            unint64_t v27 = (char *)*(id *)(v24 + 8 * v26 + 32);
          }
          unint64_t v28 = v27;
          uint64_t v29 = *(void *)&v27[OBJC_IVAR___SGOutput_name];
          uint64_t v30 = *(void *)&v27[OBJC_IVAR___SGOutput_name + 8];
          int64_t v31 = (uint64_t *)&v27[OBJC_IVAR___SGOutput_type];
          swift_beginAccess();
          uint64_t v32 = *v31;
          swift_bridgeObjectRetain();
          uint64_t v33 = specialized SGDataType.materialXDataType.getter(v32);
          swift_retain();

          *(void *)&long long v51 = v8;
          unint64_t v35 = *(void *)(v8 + 16);
          unint64_t v34 = *(void *)(v8 + 24);
          if (v35 >= v34 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
            unint64_t v8 = v51;
          }
          ++v26;
          *(void *)(v8 + 16) = v35 + 1;
          uint64_t v36 = (void *)(v8 + 24 * v35);
          v36[4] = v29;
          v36[5] = v30;
          v36[6] = v33;
          unint64_t v24 = v61;
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        uint64_t v3 = v46;
        goto LABEL_28;
      }
LABEL_32:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v25) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v38 = *(void *)(v3 + OBJC_IVAR___SGGraph_name);
  uint64_t v37 = *(void *)(v3 + OBJC_IVAR___SGGraph_name + 8);
  swift_bridgeObjectRetain();
  specialized Graph.init(id:label:inputs:outputs:)(0, v38, v37, v11, v8, (uint64_t)&v51);
  uint64_t result = mapGraph(_:into:)(v3, &v51);
  if (v45)
  {
    v49[8] = v59;
    v50[0] = v60[0];
    *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)((char *)v60 + 9);
    v49[4] = v55;
    v49[5] = v56;
    v49[6] = v57;
    v49[7] = v58;
    v49[0] = v51;
    v49[1] = v52;
    v49[2] = v53;
    v49[3] = v54;
    return outlined release of Graph((uint64_t)v49);
  }
  else
  {
    long long v39 = v60[0];
    v44[8] = v59;
    v44[9] = v39;
    *(_OWORD *)((char *)v44 + 153) = *(_OWORD *)((char *)v60 + 9);
    long long v40 = v56;
    v44[4] = v55;
    v44[5] = v40;
    long long v41 = v58;
    v44[6] = v57;
    v44[7] = v41;
    long long v42 = v52;
    *uint64_t v44 = v51;
    v44[1] = v42;
    long long v43 = v54;
    v44[2] = v53;
    v44[3] = v43;
  }
  return result;
}

uint64_t one-time initialization function for shared()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = static NodeDefStore.shared;
  uint64_t v1 = qword_26A5A79F8;
  uint64_t v2 = qword_26A5A7A00;
  type metadata accessor for BuiltInDefinitionStore();
  uint64_t v3 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = BuiltInDefinitionStore.init(nodeDefStore:)(v0, v1, v2);
  static BuiltInDefinitionStore.shared = v3;
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  uint64_t result = specialized static NodeDefStore.createDefault()();
  static NodeDefStore.shared = result;
  qword_26A5A79F8 = v1;
  qword_26A5A7A00 = v2;
  return result;
}

uint64_t BuiltInDefinitionStore.__allocating_init(nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  BuiltInDefinitionStore.init(nodeDefStore:)(a1, a2, a3);
  return v6;
}

uint64_t static BuiltInDefinitionStore.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t BuiltInDefinitionStore.nodeDefStore.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltInDefinitionStore.init(nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph7NodeDefV_G_SS_AH17BuiltInDefinitionVts5NeverOTg504_s11e7Graph22ijk12StoreC07nodeh12F0AcA04NodehQ30V_tcfcSS_AA0cdE0VtAA0iH0VXEfU_Tf1cn_n(v4);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0;
  *(void *)&long long v9 = MEMORY[0x263F8EE78];
  *((void *)&v9 + 1) = MEMORY[0x263F8EE78];
  specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(v5, (void (*)(unsigned char *__return_ptr, uint64_t *))specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:), 0, &v8);
  swift_bridgeObjectRelease();
  long long v6 = v9;
  *(void *)(v3 + 40) = v8;
  *(_OWORD *)(v3 + 48) = v6;
  return v3;
}

uint64_t closure #2 in BuiltInDefinitionStore.init(nodeDefStore:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v7, v8);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, type))
  {
    os_log_t log = v10;
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    outlined consume of MaterialXAvailability(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v7, v8);
    _os_log_impl(&dword_25C27E000, log, type, "Duplicate NodeDef: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v13, -1, -1);
    MEMORY[0x261185880](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v7, v8);
  }
  *a2 = v4;
  a2[1] = v3;
  a2[2] = v6;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined copy of MaterialXAvailability(v7, v8);
}

unint64_t BuiltInDefinitionStore.definition(named:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = v3[5];
  uint64_t v8 = (void *)v3[6];
  uint64_t v9 = v3[7];
  swift_bridgeObjectRetain();
  unint64_t result = specialized OrderedSet._find(_:)(a1, a2, v7, v8);
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v9 + 16))
  {
    uint64_t v12 = (void *)(v9 + 48 * result);
    uint64_t v13 = v12[4];
    uint64_t v14 = v12[5];
    uint64_t v15 = v12[6];
    uint64_t v16 = v12[7];
    uint64_t v17 = v12[8];
    uint64_t v18 = v12[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MaterialXAvailability(v17, v18);
LABEL_6:
    unint64_t result = swift_bridgeObjectRelease();
    *a3 = v13;
    a3[1] = v14;
    a3[2] = v15;
    a3[3] = v16;
    a3[4] = v17;
    a3[5] = v18;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t BuiltInDefinitionStore.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t BuiltInDefinitionStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized toString<A>(_:)(double a1)
{
  double v21 = a1;
  void v17[2] = &v21;
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in toString<A>(_:), (uint64_t)v17, 0, 2);
  int64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = 0;
    uint64_t v4 = v18;
    do
    {
      int v20 = *((_DWORD *)v1 + v3 + 8);
      uint64_t v5 = String.init<A>(describing:)();
      uint64_t v7 = v6;
      uint64_t v18 = v4;
      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v18;
      }
      ++v3;
      *(void *)(v4 + 16) = v9 + 1;
      unint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  uint64_t v18 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v18 = 123;
  unint64_t v19 = 0xE100000000000000;
  v14._uint64_t countAndFlagsBits = v11;
  v14._char object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 125;
  v15._char object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v18;
}

{
  void *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void v17[4];
  uint64_t v18;
  unint64_t v19;
  int v20;
  double v21;

  double v21 = a1;
  void v17[2] = &v21;
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5Int32Vs5NeverOTg5(partial apply for specialized closure #1 in toString<A>(_:), (uint64_t)v17, 0, 2);
  int64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = 0;
    uint64_t v4 = v18;
    do
    {
      int v20 = *((_DWORD *)v1 + v3 + 8);
      uint64_t v5 = String.init<A>(describing:)();
      uint64_t v7 = v6;
      uint64_t v18 = v4;
      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v18;
      }
      ++v3;
      *(void *)(v4 + 16) = v9 + 1;
      unint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  uint64_t v18 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v18 = 123;
  unint64_t v19 = 0xE100000000000000;
  v14._uint64_t countAndFlagsBits = v11;
  v14._char object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 125;
  v15._char object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t specialized toString<A>(_:)(void *a1, uint64_t a2, __n128 a3)
{
  __n128 v23 = a3;
  v19[2] = &v23;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(a1, (uint64_t)v19, 0, a2);
  int64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = 0;
    uint64_t v6 = v20;
    do
    {
      int v22 = *((_DWORD *)v3 + v5 + 8);
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v9 = v8;
      uint64_t v20 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v20;
      }
      ++v5;
      *(void *)(v6 + 16) = v11 + 1;
      unint64_t v12 = v6 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v20 = 123;
  unint64_t v21 = 0xE100000000000000;
  v16._uint64_t countAndFlagsBits = v13;
  v16._char object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 125;
  v17._char object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v20;
}

{
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  void v19[3];
  uint64_t v20;
  unint64_t v21;
  int v22;
  __n128 v23;

  __n128 v23 = a3;
  v19[2] = &v23;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5Int32Vs5NeverOTg5(a1, (uint64_t)v19, 0, a2);
  int64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = 0;
    uint64_t v6 = v20;
    do
    {
      int v22 = *((_DWORD *)v3 + v5 + 8);
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v9 = v8;
      uint64_t v20 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v20;
      }
      ++v5;
      *(void *)(v6 + 16) = v11 + 1;
      unint64_t v12 = v6 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v20 = 123;
  unint64_t v21 = 0xE100000000000000;
  v16._uint64_t countAndFlagsBits = v13;
  v16._char object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 125;
  v17._char object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t specialized toString<A>(_:)(int a1)
{
  int v21 = a1;
  void v17[2] = &v21;
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s6UInt16Vs5NeverOTg5(partial apply for specialized closure #1 in toString<A>(_:), (uint64_t)v17, 0, 2);
  int64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = 0;
    uint64_t v4 = v18;
    do
    {
      __int16 v20 = *((_WORD *)v1 + v3 + 16);
      uint64_t v5 = String.init<A>(describing:)();
      uint64_t v7 = v6;
      uint64_t v18 = v4;
      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v18;
      }
      ++v3;
      *(void *)(v4 + 16) = v9 + 1;
      unint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  uint64_t v18 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v18 = 123;
  unint64_t v19 = 0xE100000000000000;
  v14._uint64_t countAndFlagsBits = v11;
  v14._char object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 125;
  v15._char object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t specialized toString<A>(_:)(void *a1, uint64_t a2, double a3)
{
  double v23 = a3;
  v19[2] = &v23;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s6UInt16Vs5NeverOTg5(a1, (uint64_t)v19, 0, a2);
  int64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = 0;
    uint64_t v6 = v20;
    do
    {
      __int16 v22 = *((_WORD *)v3 + v5 + 16);
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v9 = v8;
      uint64_t v20 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v20;
      }
      ++v5;
      *(void *)(v6 + 16) = v11 + 1;
      unint64_t v12 = v6 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v20 = 123;
  unint64_t v21 = 0xE100000000000000;
  v16._uint64_t countAndFlagsBits = v13;
  v16._char object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 125;
  v17._char object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t SGDataTypeStorage.metalLiteralValue(type:)(uint64_t a1)
{
  uint64_t v3 = v1;
  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v229);
  uint64_t v5 = v229;
  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v230);
  switch(v234)
  {
    case 1:
      LOBYTE(v216.value._countAndFlagsBits) = v230.n128_u8[0];
      return dispatch thunk of CustomStringConvertible.description.getter();
    case 2:
      LODWORD(v216.value._countAndFlagsBits) = v230.n128_u32[0];
      return dispatch thunk of CustomStringConvertible.description.getter();
    case 3:
      LODWORD(v216.value._countAndFlagsBits) = v230.n128_u32[0];
      return dispatch thunk of CustomStringConvertible.description.getter();
    case 4:
      return Float16.description.getter();
    case 5:
      return Float.description.getter();
    case 6:
      uint64_t v8 = (void *)v230.n128_u64[1];
      unint64_t v2 = v230.n128_u64[0];
      type metadata accessor for MetalDataType.Enum();
      uint64_t v9 = swift_dynamicCastClass();
      if (v9)
      {
        uint64_t v10 = v9;
        outlined release of SGDataTypeStorage(v1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
        swift_retain();
        v11._uint64_t countAndFlagsBits = v2;
        v11._char object = v8;
        Swift::String_optional v12 = MetalDataType.convertEnumConstant(_:)(v11);
        if (v12.value._object)
        {
          outlined release of SGDataTypeStorage(v1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
          Swift::String_optional v216 = v12;
          *(void *)&v213[0] = 14906;
          *((void *)&v213[0] + 1) = 0xE200000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          if (StringProtocol.contains<A>(_:)())
          {
            swift_release();
            return v12.value._countAndFlagsBits;
          }
          else
          {
            uint64_t v202 = *(void **)(v10 + 32);
            v216.value._uint64_t countAndFlagsBits = *(void *)(v10 + 24);
            v216.value._char object = v202;
            swift_bridgeObjectRetain();
            v203._uint64_t countAndFlagsBits = 14906;
            v203._char object = (void *)0xE200000000000000;
            String.append(_:)(v203);
            swift_bridgeObjectRetain();
            String.append(_:)(v12.value);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return v216.value._countAndFlagsBits;
          }
        }
        else
        {
          memset(v213, 0, 41);
          unint64_t v214 = v2;
          uint64_t v215 = v8;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)v213);
          v216.value._uint64_t countAndFlagsBits = 0;
          v216.value._char object = (void *)0xE000000000000000;
          outlined release of SGDataTypeStorage(v1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
          _StringGuts.grow(_:)(59);
          v178._uint64_t countAndFlagsBits = 0xD000000000000018;
          v178._char object = (void *)0x800000025C424170;
          String.append(_:)(v178);
          v179._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v179._char object = (void *)0x800000025C424190;
          String.append(_:)(v179);
          v180._uint64_t countAndFlagsBits = v2;
          v180._char object = v8;
          String.append(_:)(v180);
          outlined release of SGDataTypeStorage(v1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
          v181._uint64_t countAndFlagsBits = 0x797420726F662027;
          v181._char object = (void *)0xEC00000027206570;
          String.append(_:)(v181);
          v182._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)a1 + 136))();
          String.append(_:)(v182);
          swift_bridgeObjectRelease();
          v183._uint64_t countAndFlagsBits = 0x707974206F742027;
          v183._char object = (void *)0xEB00000000272065;
          String.append(_:)(v183);
          uint64_t v185 = *(void *)(v10 + 24);
          uint64_t v184 = *(void **)(v10 + 32);
          swift_bridgeObjectRetain();
          v186._uint64_t countAndFlagsBits = v185;
          v186._char object = v184;
          String.append(_:)(v186);
          swift_bridgeObjectRelease();
          v187._uint64_t countAndFlagsBits = 41;
          v187._char object = (void *)0xE100000000000000;
          String.append(_:)(v187);
          v188._uint64_t countAndFlagsBits = 0x283A6C6174656DLL;
          v188._char object = (void *)0xE700000000000000;
          String.append(_:)(v188);
          swift_bridgeObjectRelease();
          v189._uint64_t countAndFlagsBits = 39;
          v189._char object = (void *)0xE100000000000000;
          String.append(_:)(v189);
          Swift::String_optional v190 = v216;
          outlined init with take of UserGraphError.ErrorType((uint64_t)v213, (uint64_t)&v216);
          Swift::String_optional v228 = v190;
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          swift_allocError();
          *id v191 = v216;
          Swift::String_optional v192 = v220;
          Swift::String_optional v194 = v217;
          Swift::String_optional v193 = v218;
          v191[3] = v219;
          v191[4] = v192;
          v191[1] = v194;
          v191[2] = v193;
          Swift::String_optional v195 = v224;
          Swift::String_optional v197 = v221;
          Swift::String_optional v196 = v222;
          v191[7] = v223;
          v191[8] = v195;
          v191[5] = v197;
          v191[6] = v196;
          Swift::String_optional v198 = v228;
          Swift::String_optional v200 = v225;
          Swift::String_optional v199 = v226;
          v191[11] = v227;
          v191[12] = v198;
          v191[9] = v200;
          v191[10] = v199;
          swift_willThrow();
          swift_release();
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      return v2;
    case 7:
      return specialized toString<A>(_:)(v230.n128_f64[0]);
    case 8:
      __n128 v13 = v230;
      Swift::String v14 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v15 = 3;
      return specialized toString<A>(_:)(v14, v15, v13);
    case 9:
      __n128 v13 = v230;
      Swift::String v14 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v15 = 4;
      return specialized toString<A>(_:)(v14, v15, v13);
    case 10:
      WORD2(v6) = v230.n128_u16[1];
      LOWORD(v6) = v230.n128_u16[0];
      uint64_t v205 = v6;
      uint64_t v16 = MEMORY[0x263F8EE78];
      v216.value._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 0);
      uint64_t countAndFlagsBits = v216.value._countAndFlagsBits;
      unint64_t v19 = *(void *)(v216.value._countAndFlagsBits + 16);
      unint64_t v18 = *(void *)(v216.value._countAndFlagsBits + 24);
      int64_t v20 = v18 >> 1;
      unint64_t v21 = v19 + 1;
      if (v18 >> 1 <= v19)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t countAndFlagsBits = v216.value._countAndFlagsBits;
        unint64_t v18 = *(void *)(v216.value._countAndFlagsBits + 24);
        int64_t v20 = v18 >> 1;
      }
      __int16 v22 = WORD2(v205);
      *(void *)(countAndFlagsBits + 16) = v21;
      *(_WORD *)(countAndFlagsBits + 2 * v19 + 32) = v205;
      unint64_t v23 = v19 + 2;
      if (v20 < (uint64_t)(v19 + 2))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 2, 1);
        __int16 v22 = WORD2(v205);
        uint64_t countAndFlagsBits = v216.value._countAndFlagsBits;
      }
      *(void *)(countAndFlagsBits + 16) = v23;
      *(_WORD *)(countAndFlagsBits + 2 * v21 + 32) = v22;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 + 2, 0);
      uint64_t v24 = 0;
      uint64_t v25 = v16;
      do
      {
        uint64_t v26 = Float16.description.getter();
        uint64_t v28 = v27;
        v216.value._uint64_t countAndFlagsBits = v25;
        unint64_t v30 = *(void *)(v25 + 16);
        unint64_t v29 = *(void *)(v25 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          uint64_t v25 = v216.value._countAndFlagsBits;
        }
        ++v24;
        *(void *)(v25 + 16) = v30 + 1;
        unint64_t v31 = v25 + 16 * v30;
        *(void *)(v31 + 32) = v26;
        *(void *)(v31 + 40) = v28;
      }
      while (v23 != v24);
      goto LABEL_81;
    case 11:
      unint64_t v206 = v230.n128_u64[0];
      uint64_t v32 = MEMORY[0x263F8EE78];
      v216.value._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
      uint64_t v33 = v216.value._countAndFlagsBits;
      unint64_t v35 = *(void *)(v216.value._countAndFlagsBits + 16);
      unint64_t v34 = *(void *)(v216.value._countAndFlagsBits + 24);
      int64_t v36 = v34 >> 1;
      unint64_t v37 = v35 + 1;
      if (v34 >> 1 <= v35)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        uint64_t v33 = v216.value._countAndFlagsBits;
        unint64_t v34 = *(void *)(v216.value._countAndFlagsBits + 24);
        int64_t v36 = v34 >> 1;
      }
      *(void *)(v33 + 16) = v37;
      unint64_t v38 = v206;
      *(_WORD *)(v33 + 2 * v35 + 32) = v206;
      if (v36 < (uint64_t)(v35 + 2))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 2, 1);
        unint64_t v38 = v206;
        uint64_t v33 = v216.value._countAndFlagsBits;
      }
      *(void *)(v33 + 16) = v35 + 2;
      *(_WORD *)(v33 + 2 * v37 + 32) = WORD1(v38);
      unint64_t v40 = *(void *)(v33 + 16);
      unint64_t v39 = *(void *)(v33 + 24);
      unint64_t v41 = v40 + 1;
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        WORD2(v38) = WORD2(v206);
      }
      uint64_t v42 = v216.value._countAndFlagsBits;
      *(void *)(v216.value._countAndFlagsBits + 16) = v41;
      *(_WORD *)(v42 + 2 * v40 + 32) = WORD2(v38);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 + 1, 0);
      uint64_t v43 = 0;
      uint64_t v44 = v32;
      do
      {
        uint64_t v45 = Float16.description.getter();
        uint64_t v47 = v46;
        v216.value._uint64_t countAndFlagsBits = v44;
        unint64_t v49 = *(void *)(v44 + 16);
        unint64_t v48 = *(void *)(v44 + 24);
        if (v49 >= v48 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
          uint64_t v44 = v216.value._countAndFlagsBits;
        }
        ++v43;
        *(void *)(v44 + 16) = v49 + 1;
        unint64_t v50 = v44 + 16 * v49;
        *(void *)(v50 + 32) = v45;
        *(void *)(v50 + 40) = v47;
      }
      while (v41 != v43);
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v160 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v162 = v161;
      swift_bridgeObjectRelease();
      v216.value._uint64_t countAndFlagsBits = 123;
      v216.value._char object = (void *)0xE100000000000000;
      v163._uint64_t countAndFlagsBits = v160;
      v163._char object = v162;
      String.append(_:)(v163);
      goto LABEL_66;
    case 12:
      unint64_t v207 = v230.n128_u64[0];
      uint64_t v51 = MEMORY[0x263F8EE78];
      v216.value._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
      uint64_t v52 = v216.value._countAndFlagsBits;
      unint64_t v54 = *(void *)(v216.value._countAndFlagsBits + 16);
      unint64_t v53 = *(void *)(v216.value._countAndFlagsBits + 24);
      int64_t v55 = v53 >> 1;
      unint64_t v56 = v54 + 1;
      if (v53 >> 1 <= v54)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        uint64_t v52 = v216.value._countAndFlagsBits;
        unint64_t v53 = *(void *)(v216.value._countAndFlagsBits + 24);
        int64_t v55 = v53 >> 1;
      }
      *(void *)(v52 + 16) = v56;
      unint64_t v57 = v207;
      *(_WORD *)(v52 + 2 * v54 + 32) = v207;
      if (v55 < (uint64_t)(v54 + 2))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 2, 1);
        unint64_t v57 = v207;
        uint64_t v52 = v216.value._countAndFlagsBits;
      }
      *(void *)(v52 + 16) = v54 + 2;
      *(_WORD *)(v52 + 2 * v56 + 32) = WORD1(v57);
      unint64_t v59 = *(void *)(v52 + 16);
      unint64_t v58 = *(void *)(v52 + 24);
      unint64_t v60 = v59 + 1;
      if (v59 >= v58 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
        HIDWORD(v57) = HIDWORD(v207);
      }
      uint64_t v61 = v216.value._countAndFlagsBits;
      *(void *)(v216.value._countAndFlagsBits + 16) = v60;
      *(_WORD *)(v61 + 2 * v59 + 32) = WORD2(v57);
      unint64_t v62 = *(void *)(v61 + 24);
      unint64_t v63 = v59 + 2;
      if ((uint64_t)(v59 + 2) > (uint64_t)(v62 >> 1))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v59 + 2, 1);
        HIWORD(v57) = HIWORD(v207);
        uint64_t v61 = v216.value._countAndFlagsBits;
      }
      *(void *)(v61 + 16) = v63;
      *(_WORD *)(v61 + 2 * v60 + 32) = HIWORD(v57);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59 + 2, 0);
      uint64_t v64 = 0;
      uint64_t v65 = v51;
      do
      {
        uint64_t v66 = Float16.description.getter();
        uint64_t v68 = v67;
        v216.value._uint64_t countAndFlagsBits = v65;
        unint64_t v70 = *(void *)(v65 + 16);
        unint64_t v69 = *(void *)(v65 + 24);
        if (v70 >= v69 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
          uint64_t v65 = v216.value._countAndFlagsBits;
        }
        ++v64;
        *(void *)(v65 + 16) = v70 + 1;
        unint64_t v71 = v65 + 16 * v70;
        *(void *)(v71 + 32) = v66;
        *(void *)(v71 + 40) = v68;
      }
      while (v63 != v64);
LABEL_81:
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v164 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v166 = v165;
      swift_bridgeObjectRelease();
      v216.value._uint64_t countAndFlagsBits = 123;
      v216.value._char object = (void *)0xE100000000000000;
      v167._uint64_t countAndFlagsBits = v164;
      v167._char object = v166;
      String.append(_:)(v167);
      goto LABEL_66;
    case 13:
      return specialized toString<A>(_:)(v230.n128_f64[0]);
    case 14:
      __n128 v72 = v230;
      uint64_t v73 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v74 = 3;
      return specialized toString<A>(_:)(v73, v74, v72);
    case 15:
      __n128 v72 = v230;
      uint64_t v73 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v74 = 4;
      return specialized toString<A>(_:)(v73, v74, v72);
    case 16:
      double v75 = v230.n128_f64[1];
      v76._uint64_t countAndFlagsBits = specialized toString<A>(_:)(v230.n128_f64[0]);
      v216.value._uint64_t countAndFlagsBits = 123;
      v216.value._char object = (void *)0xE100000000000000;
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v77._uint64_t countAndFlagsBits = 8236;
      v77._char object = (void *)0xE200000000000000;
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      uint64_t v78 = specialized toString<A>(_:)(v75);
      uint64_t v80 = v79;
      swift_bridgeObjectRetain();
      v81._uint64_t countAndFlagsBits = v78;
      v81._char object = v80;
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    case 17:
      __n128 v208 = v231;
      __n128 v211 = v232;
      v82._uint64_t countAndFlagsBits = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 3, v230);
      v216.value._char object = (void *)0xE100000000000000;
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v83._uint64_t countAndFlagsBits = 8236;
      v83._char object = (void *)0xE200000000000000;
      String.append(_:)(v83);
      swift_bridgeObjectRelease();
      uint64_t v84 = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 3, v208);
      uint64_t v86 = v85;
      swift_bridgeObjectRetain();
      v87._uint64_t countAndFlagsBits = v84;
      v87._char object = v86;
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v88._uint64_t countAndFlagsBits = 8236;
      v88._char object = (void *)0xE200000000000000;
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      __n128 v89 = v211;
      uint64_t v90 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v91 = 3;
      goto LABEL_60;
    case 18:
      __n128 v204 = v231;
      __n128 v209 = v232;
      __n128 v212 = v233;
      v92._uint64_t countAndFlagsBits = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 4, v230);
      v216.value._char object = (void *)0xE100000000000000;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v93._uint64_t countAndFlagsBits = 8236;
      v93._char object = (void *)0xE200000000000000;
      String.append(_:)(v93);
      swift_bridgeObjectRelease();
      uint64_t v94 = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 4, v204);
      unint64_t v96 = v95;
      swift_bridgeObjectRetain();
      v97._uint64_t countAndFlagsBits = v94;
      v97._char object = v96;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v98._uint64_t countAndFlagsBits = 8236;
      v98._char object = (void *)0xE200000000000000;
      String.append(_:)(v98);
      swift_bridgeObjectRelease();
      uint64_t v99 = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 4, v209);
      uint64_t v101 = v100;
      swift_bridgeObjectRetain();
      v102._uint64_t countAndFlagsBits = v99;
      v102._char object = v101;
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v103._uint64_t countAndFlagsBits = 8236;
      v103._char object = (void *)0xE200000000000000;
      String.append(_:)(v103);
      swift_bridgeObjectRelease();
      __n128 v89 = v212;
      uint64_t v90 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v91 = 4;
LABEL_60:
      uint64_t v104 = specialized toString<A>(_:)(v90, v91, v89);
      goto LABEL_65;
    case 19:
      int v106 = v230.n128_i32[1];
      v107._uint64_t countAndFlagsBits = specialized toString<A>(_:)(v230.n128_i32[0]);
      v216.value._char object = (void *)0xE100000000000000;
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v108._uint64_t countAndFlagsBits = 8236;
      v108._char object = (void *)0xE200000000000000;
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      uint64_t v104 = specialized toString<A>(_:)(v106);
      goto LABEL_65;
    case 20:
      double v109 = v230.n128_f64[1];
      double v110 = v231.n128_f64[0];
      v111._uint64_t countAndFlagsBits = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 3, v230.n128_f64[0]);
      v216.value._char object = (void *)0xE100000000000000;
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v112._uint64_t countAndFlagsBits = 8236;
      v112._char object = (void *)0xE200000000000000;
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      uint64_t v113 = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 3, v109);
      os_log_type_t v115 = v114;
      swift_bridgeObjectRetain();
      v116._uint64_t countAndFlagsBits = v113;
      v116._char object = v115;
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v117._uint64_t countAndFlagsBits = 8236;
      v117._char object = (void *)0xE200000000000000;
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      double v118 = v110;
      id v119 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v120 = 3;
      goto LABEL_64;
    case 21:
      double v121 = v230.n128_f64[1];
      __n128 v122 = v231;
      v123._uint64_t countAndFlagsBits = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 4, v230.n128_f64[0]);
      v216.value._char object = (void *)0xE100000000000000;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v124._uint64_t countAndFlagsBits = 8236;
      v124._char object = (void *)0xE200000000000000;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      uint64_t v125 = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 4, v121);
      uint64_t v127 = v126;
      swift_bridgeObjectRetain();
      v128._uint64_t countAndFlagsBits = v125;
      v128._char object = v127;
      String.append(_:)(v128);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v129._uint64_t countAndFlagsBits = 8236;
      v129._char object = (void *)0xE200000000000000;
      String.append(_:)(v129);
      swift_bridgeObjectRelease();
      uint64_t v130 = specialized toString<A>(_:)(partial apply for specialized closure #1 in toString<A>(_:), 4, v122.n128_f64[0]);
      long long v132 = v131;
      swift_bridgeObjectRetain();
      v133._uint64_t countAndFlagsBits = v130;
      v133._char object = v132;
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v134._uint64_t countAndFlagsBits = 8236;
      v134._char object = (void *)0xE200000000000000;
      String.append(_:)(v134);
      swift_bridgeObjectRelease();
      double v118 = v122.n128_f64[1];
      id v119 = partial apply for specialized closure #1 in toString<A>(_:);
      uint64_t v120 = 4;
LABEL_64:
      uint64_t v104 = specialized toString<A>(_:)(v119, v120, v118);
LABEL_65:
      uint64_t v135 = v104;
      id v136 = v105;
      v216.value._uint64_t countAndFlagsBits = 123;
      v216.value._char object = (void *)0xE100000000000000;
      swift_bridgeObjectRetain();
      v137._uint64_t countAndFlagsBits = v135;
      v137._char object = v136;
      String.append(_:)(v137);
      swift_bridgeObjectRelease();
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v138._uint64_t countAndFlagsBits = 125;
      v138._char object = (void *)0xE100000000000000;
      String.append(_:)(v138);
      swift_bridgeObjectRelease();
      return v216.value._countAndFlagsBits;
    case 22:
      id v139 = v5;
      uint64_t v140 = CGColorRef.components.getter();
      if (!v140) {
        goto LABEL_83;
      }
      int64_t v141 = *(void *)(v140 + 16);
      if (!v141) {
        goto LABEL_84;
      }
      uint64_t v210 = v1;
      v216.value._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v141, 0);
      uint64_t v142 = 0;
      uint64_t v143 = v216.value._countAndFlagsBits;
      do
      {
        uint64_t v144 = Double.description.getter();
        uint64_t v146 = v145;
        v216.value._uint64_t countAndFlagsBits = v143;
        unint64_t v148 = *(void *)(v143 + 16);
        unint64_t v147 = *(void *)(v143 + 24);
        if (v148 >= v147 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v147 > 1, v148 + 1, 1);
          uint64_t v143 = v216.value._countAndFlagsBits;
        }
        ++v142;
        *(void *)(v143 + 16) = v148 + 1;
        unint64_t v149 = v143 + 16 * v148;
        *(void *)(v149 + 32) = v144;
        *(void *)(v149 + 40) = v146;
      }
      while (v141 != v142);
      goto LABEL_82;
    case 23:
      id v150 = v5;
      uint64_t v151 = CGColorRef.components.getter();
      if (v151)
      {
        int64_t v152 = *(void *)(v151 + 16);
        if (v152)
        {
          uint64_t v210 = v1;
          v216.value._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v152, 0);
          uint64_t v153 = 0;
          uint64_t v143 = v216.value._countAndFlagsBits;
          do
          {
            uint64_t v154 = Double.description.getter();
            uint64_t v156 = v155;
            v216.value._uint64_t countAndFlagsBits = v143;
            unint64_t v158 = *(void *)(v143 + 16);
            unint64_t v157 = *(void *)(v143 + 24);
            if (v158 >= v157 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v158 + 1, 1);
              uint64_t v143 = v216.value._countAndFlagsBits;
            }
            ++v153;
            *(void *)(v143 + 16) = v158 + 1;
            unint64_t v159 = v143 + 16 * v158;
            *(void *)(v159 + 32) = v154;
            *(void *)(v159 + 40) = v156;
          }
          while (v152 != v153);
LABEL_82:
          swift_bridgeObjectRelease();
          uint64_t v3 = v210;
        }
        else
        {
LABEL_84:
          swift_bridgeObjectRelease();
          uint64_t v143 = MEMORY[0x263F8EE78];
        }
        v216.value._uint64_t countAndFlagsBits = v143;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        unint64_t v2 = BidirectionalCollection<>.joined(separator:)();
        outlined release of SGDataTypeStorage(v3, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_83:
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi48_((uint64_t)v213);
        v216.value._uint64_t countAndFlagsBits = 0;
        v216.value._char object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        outlined init with take of UserGraphError.ErrorType((uint64_t)v213, (uint64_t)&v216);
        v228.value._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
        v228.value._char object = (void *)0x800000025C424130;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        *uint64_t v168 = v216;
        Swift::String_optional v169 = v220;
        Swift::String_optional v171 = v217;
        Swift::String_optional v170 = v218;
        v168[3] = v219;
        v168[4] = v169;
        v168[1] = v171;
        v168[2] = v170;
        Swift::String_optional v172 = v224;
        Swift::String_optional v174 = v221;
        Swift::String_optional v173 = v222;
        v168[7] = v223;
        v168[8] = v172;
        v168[5] = v174;
        v168[6] = v173;
        Swift::String_optional v175 = v228;
        Swift::String_optional v177 = v225;
        Swift::String_optional v176 = v226;
        v168[11] = v227;
        v168[12] = v175;
        v168[9] = v177;
        v168[10] = v176;
        swift_willThrow();
        outlined release of SGDataTypeStorage(v1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      }
      return v2;
    default:
      if (v230.n128_u8[0]) {
        return 1702195828;
      }
      else {
        return 0x65736C6166;
      }
  }
}

void SGNode.legacyNode(in:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = v2;
  unint64_t v8 = *(void *)&v2[OBJC_IVAR___SGNode_inputs];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = MEMORY[0x263F8EE78];
  unint64_t v148 = v2;
  if (v9)
  {
    *(void *)&long long v162 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
    {
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v11 = v162;
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v12 = MEMORY[0x2611848A0](v3, v8);
        uint64_t v13 = *(void *)(v12 + OBJC_IVAR___SGInput_name);
        uint64_t v4 = *(void *)(v12 + OBJC_IVAR___SGInput_name + 8);
        uint64_t v14 = v11;
        uint64_t v15 = (uint64_t *)(v12 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        uint64_t v16 = *v15;
        uint64_t v11 = v14;
        swift_bridgeObjectRetain();
        uint64_t v5 = specialized SGDataType.materialXDataType.getter(v16);
        swift_retain();
        swift_unknownObjectRelease();
        *(void *)&long long v162 = v11;
        unint64_t v18 = *(void *)(v11 + 16);
        unint64_t v17 = *(void *)(v11 + 24);
        uint64_t v6 = v18 + 1;
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          uint64_t v11 = v162;
        }
        ++v3;
        *(void *)(v11 + 16) = v6;
        unint64_t v19 = (void *)(v11 + 24 * v18);
        void v19[4] = v13;
        v19[5] = v4;
        v19[6] = v5;
      }
      while (v9 != v3);
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = *(void *)(v8 + 8 * v20 + 32);
        uint64_t v6 = *(void *)(v21 + OBJC_IVAR___SGInput_name);
        uint64_t v3 = *(void *)(v21 + OBJC_IVAR___SGInput_name + 8);
        __int16 v22 = (uint64_t *)(v21 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        uint64_t v23 = *v22;
        swift_bridgeObjectRetain();
        uint64_t v4 = specialized SGDataType.materialXDataType.getter(v23);
        *(void *)&long long v162 = v11;
        unint64_t v24 = *(void *)(v11 + 16);
        unint64_t v25 = *(void *)(v11 + 24);
        uint64_t v5 = v24 + 1;
        swift_retain();
        if (v24 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v24 + 1, 1);
          uint64_t v11 = v162;
        }
        ++v20;
        *(void *)(v11 + 16) = v5;
        uint64_t v26 = (void *)(v11 + 24 * v24);
        void v26[4] = v6;
        v26[5] = v3;
        v26[6] = v4;
      }
      while (v9 != v20);
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v7 = v148;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  unint64_t v8 = *(void *)&v7[OBJC_IVAR___SGNode_outputs];
  uint64_t v144 = v11;
  if (!(v8 >> 62))
  {
    uint64_t v27 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27) {
      goto LABEL_19;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27) {
    goto LABEL_33;
  }
LABEL_19:
  *(void *)&long long v162 = v10;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
  if (v27 < 0)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    outlined copy of NodeData((id)v8, v142, v7, v145, v3, v6, v141, v135, v139, v138, v140);
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v131 = v6;
    if (v59) {
      goto LABEL_38;
    }
LABEL_58:
    swift_bridgeObjectRelease();
    unint64_t v61 = MEMORY[0x263F8EE78];
    goto LABEL_59;
  }
  uint64_t v4 = v162;
  uint64_t v187 = v8;
  if ((v8 & 0xC000000000000001) != 0)
  {
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = MEMORY[0x2611848A0](v28, v8);
      uint64_t v30 = *(void *)(v29 + OBJC_IVAR___SGOutput_name);
      uint64_t v31 = *(void *)(v29 + OBJC_IVAR___SGOutput_name + 8);
      uint64_t v32 = (uint64_t *)(v29 + OBJC_IVAR___SGOutput_type);
      swift_beginAccess();
      uint64_t v33 = *v32;
      swift_bridgeObjectRetain();
      uint64_t v34 = specialized SGDataType.materialXDataType.getter(v33);
      swift_retain();
      swift_unknownObjectRelease();
      *(void *)&long long v162 = v4;
      unint64_t v36 = *(void *)(v4 + 16);
      unint64_t v35 = *(void *)(v4 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v4 = v162;
      }
      ++v28;
      *(void *)(v4 + 16) = v36 + 1;
      unint64_t v37 = (void *)(v4 + 24 * v36);
      v37[4] = v30;
      v37[5] = v31;
      v37[6] = v34;
      unint64_t v8 = v187;
    }
    while (v27 != v28);
  }
  else
  {
    uint64_t v38 = 0;
    do
    {
      uint64_t v39 = *(void *)(v8 + 8 * v38 + 32);
      uint64_t v40 = *(void *)(v39 + OBJC_IVAR___SGOutput_name);
      uint64_t v41 = *(void *)(v39 + OBJC_IVAR___SGOutput_name + 8);
      uint64_t v42 = (uint64_t *)(v39 + OBJC_IVAR___SGOutput_type);
      swift_beginAccess();
      uint64_t v43 = *v42;
      swift_bridgeObjectRetain();
      uint64_t v44 = specialized SGDataType.materialXDataType.getter(v43);
      *(void *)&long long v162 = v4;
      unint64_t v45 = *(void *)(v4 + 16);
      unint64_t v46 = *(void *)(v4 + 24);
      swift_retain();
      if (v45 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v45 + 1, 1);
        uint64_t v4 = v162;
      }
      ++v38;
      *(void *)(v4 + 16) = v45 + 1;
      uint64_t v47 = (void *)(v4 + 24 * v45);
      v47[4] = v40;
      v47[5] = v41;
      v47[6] = v44;
      unint64_t v8 = v187;
    }
    while (v27 != v38);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v148;
LABEL_34:
  unint64_t v48 = &v7[OBJC_IVAR___SGNode_data];
  unint64_t v8 = *(void *)&v7[OBJC_IVAR___SGNode_data];
  uint64_t v49 = *(void *)&v7[OBJC_IVAR___SGNode_data + 8];
  uint64_t v7 = *(char **)&v7[OBJC_IVAR___SGNode_data + 16];
  unint64_t v50 = (void *)*((void *)v48 + 3);
  uint64_t v51 = *((void *)v48 + 4);
  uint64_t v52 = *((void *)v48 + 5);
  unsigned int v53 = v48[80];
  id v145 = v50;
  if (!(v53 >> 6))
  {
    uint64_t v72 = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MaterialXAvailability(v51, v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v73 = static NodeDefStore.shared;
    if (*(void *)(static NodeDefStore.shared + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v72);
      if (v75)
      {
        Swift::String v76 = (_OWORD *)(*(void *)(v73 + 56) + 144 * v74);
        v186[0] = *v76;
        long long v77 = v76[3];
        long long v78 = v76[4];
        long long v79 = v76[2];
        v186[1] = v76[1];
        v186[2] = v79;
        v186[3] = v77;
        v186[4] = v78;
        long long v80 = v76[5];
        long long v81 = v76[6];
        long long v82 = v76[8];
        v186[7] = v76[7];
        v186[8] = v82;
        v186[5] = v80;
        v186[6] = v81;
        outlined retain of NodeDef((uint64_t)v186);
        swift_bridgeObjectRelease();
        specialized NodeDefStore.createNode(in:from:label:)(a1, v186, &v174);
        outlined release of NodeDef((uint64_t)v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v51, v52);
        char v83 = v177;
        long long v84 = v176;
        long long v85 = v175;
        unint64_t v86 = v174;
LABEL_76:
        *(void *)a2 = v86;
        *(_OWORD *)(a2 + 8) = v85;
        *(_OWORD *)(a2 + 24) = v84;
        *(unsigned char *)(a2 + 40) = v83;
        return;
      }
      swift_bridgeObjectRelease();
    }
    *(void *)&long long v152 = v8;
    *((void *)&v152 + 1) = v72;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v152);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v152, (uint64_t)&v162);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v173 = 0uLL;
    swift_allocError();
    *__n128 v89 = v162;
    long long v90 = v166;
    long long v92 = v163;
    long long v91 = v164;
    v89[3] = v165;
    v89[4] = v90;
    v89[1] = v92;
    v89[2] = v91;
    long long v93 = v170;
    long long v95 = v167;
    long long v94 = v168;
    v89[7] = v169;
    v89[8] = v93;
    v89[5] = v95;
    v89[6] = v94;
    long long v96 = v173;
    long long v98 = *(_OWORD *)v171;
    long long v97 = *(_OWORD *)&v171[16];
    v89[11] = v172;
    v89[12] = v96;
    v89[9] = v98;
    v89[10] = v97;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v51, v52);
    return;
  }
  uint64_t v3 = *((void *)v48 + 4);
  uint64_t v6 = *((void *)v48 + 5);
  uint64_t v55 = *((void *)v48 + 6);
  uint64_t v54 = *((void *)v48 + 7);
  uint64_t v57 = *((void *)v48 + 8);
  uint64_t v56 = *((void *)v48 + 9);
  long long v132 = v7;
  uint64_t v133 = v3;
  int v141 = v55;
  int v142 = v49;
  int v135 = v54;
  id v136 = (char *)v8;
  unsigned __int8 v140 = v53;
  uint64_t v138 = v56;
  uint64_t v139 = v57;
  if (v53 >> 6 != 1)
  {
    LOBYTE(v187) = v53 & 0x3F;
    outlined copy of NodeData((id)v8, v49, v7, v50, v3, v6, v55, v54, v57, v56, v53);
    uint64_t v87 = specialized SGDataType.materialXDataType.getter(v8);
    unint64_t v88 = swift_allocObject();
    *(void *)(v88 + 16) = v7;
    *(void *)(v88 + 24) = v50;
    *(void *)(v88 + 32) = v3;
    *(void *)(v88 + 40) = v6;
    *(void *)(v88 + 48) = v55;
    *(void *)(v88 + 56) = v54;
    *(void *)(v88 + 64) = v139;
    *(void *)(v88 + 72) = v138;
    *(unsigned char *)(v88 + 80) = v187;
    *(void *)(v88 + 88) = v87;
    uint64_t v187 = a1 + 64;
    unint64_t v150 = *(void *)(a1 + 40);
    swift_retain();
    outlined copy of NodeData((id)v8, v142, v7, v50, v3, v6, v55, v54, v139, v138, v140);
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v150, v144, v4, v88, a1 + 64, a1, &v182);
    swift_release();
    swift_release();
    outlined consume of NodeData((void *)v8, v142, v7, v50, v3, v6, v55, v54, v139, v138, v140);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v83 = v185;
    long long v84 = v184;
    long long v85 = v183;
    unint64_t v86 = v182;
    goto LABEL_76;
  }
  unint64_t v58 = (uint64_t *)(v8 + OBJC_IVAR___SGGraph_inputs);
  swift_beginAccess();
  uint64_t v5 = *v58;
  if ((unint64_t)*v58 >> 62) {
    goto LABEL_57;
  }
  uint64_t v59 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  outlined copy of NodeData((id)v8, v142, v7, v50, v3, v6, v141, v54, v139, v138, v140);
  swift_bridgeObjectRetain();
  uint64_t v131 = v6;
  if (!v59) {
    goto LABEL_58;
  }
LABEL_38:
  *(void *)&long long v162 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59 & ~(v59 >> 63), 0);
  uint64_t v187 = v59;
  if (v59 < 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v60 = 0;
  unint64_t v61 = v162;
  unint64_t v146 = v5 & 0xC000000000000001;
  uint64_t v149 = v5;
  do
  {
    if (v146) {
      unint64_t v62 = (char *)MEMORY[0x2611848A0](v60, v5);
    }
    else {
      unint64_t v62 = (char *)*(id *)(v5 + 8 * v60 + 32);
    }
    unint64_t v63 = v62;
    uint64_t v65 = *(void *)&v62[OBJC_IVAR___SGInput_name];
    uint64_t v64 = *(void *)&v62[OBJC_IVAR___SGInput_name + 8];
    uint64_t v66 = (uint64_t *)&v62[OBJC_IVAR___SGInput_type];
    swift_beginAccess();
    uint64_t v67 = *v66;
    swift_bridgeObjectRetain();
    uint64_t v68 = specialized SGDataType.materialXDataType.getter(v67);
    swift_retain();

    *(void *)&long long v162 = v61;
    unint64_t v70 = *(void *)(v61 + 16);
    unint64_t v69 = *(void *)(v61 + 24);
    if (v70 >= v69 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
      unint64_t v61 = v162;
    }
    ++v60;
    *(void *)(v61 + 16) = v70 + 1;
    unint64_t v71 = (void *)(v61 + 24 * v70);
    v71[4] = v65;
    v71[5] = v64;
    v71[6] = v68;
    uint64_t v5 = v149;
  }
  while (v187 != v60);
  swift_bridgeObjectRelease();
LABEL_59:
  uint64_t v99 = (uint64_t *)&v136[OBJC_IVAR___SGGraph_outputs];
  swift_beginAccess();
  uint64_t v100 = *v99;
  if (!((unint64_t)*v99 >> 62))
  {
    uint64_t v101 = *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v101) {
      goto LABEL_61;
    }
LABEL_71:
    swift_bridgeObjectRelease();
    unint64_t v103 = MEMORY[0x263F8EE78];
LABEL_72:
    uint64_t v114 = *(void *)(a1 + 72);
    unint64_t v115 = v114 + 1;
    if (!__OFADD__(v114, 1))
    {
      uint64_t v117 = *(void *)&v136[OBJC_IVAR___SGGraph_name];
      uint64_t v116 = *(void *)&v136[OBJC_IVAR___SGGraph_name + 8];
      *(void *)(a1 + 72) = v115;
      swift_bridgeObjectRetain();
      __n128 v118 = specialized Graph.init(id:label:inputs:outputs:)(v115, v117, v116, v61, v103, (uint64_t)&v162);
      mapGraph(_:into:)(v136, &v162, v118);
      if (v143)
      {
        long long v160 = v170;
        v161[0] = *(_OWORD *)v171;
        *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)&v171[9];
        long long v156 = v166;
        long long v157 = v167;
        long long v158 = v168;
        long long v159 = v169;
        long long v152 = v162;
        long long v153 = v163;
        long long v154 = v164;
        long long v155 = v165;
        outlined release of Graph((uint64_t)&v152);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodeData(v136, v142, v132, v145, v133, v131, v141, v135, v139, v138, v140);
        return;
      }
      uint64_t v119 = swift_allocObject();
      long long v120 = *(_OWORD *)v171;
      long long v160 = v170;
      v161[0] = *(_OWORD *)v171;
      *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)&v171[9];
      long long v121 = v166;
      long long v122 = v167;
      long long v156 = v166;
      long long v157 = v167;
      long long v124 = v168;
      long long v123 = v169;
      long long v158 = v168;
      long long v159 = v169;
      long long v125 = v162;
      long long v126 = v163;
      long long v152 = v162;
      long long v153 = v163;
      long long v128 = v164;
      long long v127 = v165;
      long long v154 = v164;
      long long v155 = v165;
      *(_OWORD *)(v119 + 144) = v170;
      *(_OWORD *)(v119 + 160) = v120;
      *(_OWORD *)(v119 + 169) = *(_OWORD *)&v171[9];
      *(_OWORD *)(v119 + 80) = v121;
      *(_OWORD *)(v119 + 96) = v122;
      *(_OWORD *)(v119 + 112) = v124;
      *(_OWORD *)(v119 + 128) = v123;
      *(_OWORD *)(v119 + 16) = v125;
      *(_OWORD *)(v119 + 32) = v126;
      *(_OWORD *)(v119 + 48) = v128;
      *(_OWORD *)(v119 + 64) = v127;
      unint64_t v129 = v119 | 0xC000000000000000;
      unint64_t v130 = *(void *)(a1 + 40);
      outlined retain of Graph((uint64_t)&v152);
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v130, v144, v4, v129, a1 + 64, a1, &v178);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodeData(v136, v142, v132, v145, v133, v131, v141, v135, v139, v138, v140);
      outlined release of Graph((uint64_t)&v152);
      char v83 = v181;
      long long v84 = v180;
      long long v85 = v179;
      unint64_t v86 = v178;
      goto LABEL_76;
    }
    __break(1u);
    goto LABEL_78;
  }
  swift_bridgeObjectRetain();
  uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
  if (!v101) {
    goto LABEL_71;
  }
LABEL_61:
  *(void *)&long long v162 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v101 & ~(v101 >> 63), 0);
  if ((v101 & 0x8000000000000000) == 0)
  {
    uint64_t v102 = 0;
    unint64_t v103 = v162;
    unint64_t v147 = v100 & 0xC000000000000001;
    uint64_t v187 = v100;
    uint64_t v151 = v101;
    do
    {
      if (v147) {
        uint64_t v104 = (char *)MEMORY[0x2611848A0](v102, v100);
      }
      else {
        uint64_t v104 = (char *)*(id *)(v100 + 8 * v102 + 32);
      }
      Swift::String v105 = v104;
      uint64_t v107 = *(void *)&v104[OBJC_IVAR___SGOutput_name];
      uint64_t v106 = *(void *)&v104[OBJC_IVAR___SGOutput_name + 8];
      Swift::String v108 = (uint64_t *)&v104[OBJC_IVAR___SGOutput_type];
      swift_beginAccess();
      uint64_t v109 = *v108;
      swift_bridgeObjectRetain();
      uint64_t v110 = specialized SGDataType.materialXDataType.getter(v109);
      swift_retain();

      *(void *)&long long v162 = v103;
      unint64_t v112 = *(void *)(v103 + 16);
      unint64_t v111 = *(void *)(v103 + 24);
      if (v112 >= v111 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
        unint64_t v103 = v162;
      }
      ++v102;
      *(void *)(v103 + 16) = v112 + 1;
      uint64_t v113 = (void *)(v103 + 24 * v112);
      v113[4] = v107;
      v113[5] = v106;
      v113[6] = v110;
      uint64_t v100 = v187;
    }
    while (v151 != v102);
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
LABEL_79:
  __break(1u);
}

uint64_t mapGraph(_:into:)(uint64_t a1, void *a2)
{
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV13ReservedNamesOG_SSs5NeverOTg504_s11d84Graph03mapB033_409C205F32E965F544D867255561D769LL_4intoyAA7SGGraphC_AA0B0VztKFSSAA17fgh3V13iJ54Ocfu_33_9a8543e77c82589f922673eb5cf911b0ALSSTf3nnnpk_nTf1cn_n((uint64_t)&outlined read-only object #0 of mapGraph(_:into:));
  uint64_t v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = specialized _ArrayProtocol.filter(_:)(v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v2) {
    return result;
  }
  uint64_t v11 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v56 = v11;
  uint64_t v12 = v9[2];
  if (!v12)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v51 = a2[13];
    unint64_t v29 = a2[16];
    uint64_t v55 = a2[19];
    uint64_t v50 = *(void *)(a1 + OBJC_IVAR___SGGraph_argumentsNode);
    unint64_t v53 = a2[10];
    outlined copy of NodePersonality(v53);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v52 = v29;
    outlined copy of NodePersonality(v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v50, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void *)(a1 + OBJC_IVAR___SGGraph_resultsNode);
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, v31, v32);
    uint64_t v56 = v11;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = specialized Sequence.compactMap<A>(_:)(v33, (uint64_t *)&v56, (uint64_t)a2);
    swift_bridgeObjectRelease();
    uint64_t v35 = v34[2];
    if (v35)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = 0;
      do
      {
        uint64_t v37 = v34[v36 + 4];
        uint64_t v38 = v34[v36 + 5];
        uint64_t v39 = v34[v36 + 6];
        uint64_t v40 = v34[v36 + 7];
        uint64_t v41 = v34[v36 + 8];
        char v42 = v34[v36 + 9];
        uint64_t v43 = v34[v36 + 10];
        uint64_t v45 = v34[v36 + 12];
        uint64_t v44 = v34[v36 + 13];
        uint64_t v47 = v34[v36 + 14];
        uint64_t v46 = v34[v36 + 15];
        char v48 = v34[v36 + 16];
        uint64_t v49 = v34[v36 + 17];
        v60[0] = v34[v36 + 11];
        v60[1] = v45;
        _OWORD v60[2] = v44;
        v60[3] = v47;
        v60[4] = v46;
        char v61 = v48;
        uint64_t v62 = v49;
        v57[0] = v37;
        v57[1] = v38;
        v57[2] = v39;
        v57[3] = v40;
        v57[4] = v41;
        char v58 = v42;
        uint64_t v59 = v43;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.connect(_:to:)((uint64_t)v57, (unint64_t)v60);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v36 += 14;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
    }
    outlined consume of NodePersonality(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v54 = a1;
  swift_bridgeObjectRetain();
  uint64_t v13 = v9 + 5;
  while (1)
  {
    uint64_t v15 = *(v13 - 1);
    uint64_t v14 = *v13;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    uint64_t v19 = v11[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (v11[3] >= v21)
    {
      if (v16)
      {
        if (v17) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v22) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_26;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_4:
        *(void *)(v11[7] + 8 * v18) = v14;
        goto LABEL_5;
      }
    }
    v11[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v25 = 8 * v18;
    *(void *)(v11[6] + v25) = v15;
    *(void *)(v11[7] + v25) = v14;
    uint64_t v26 = v11[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_25;
    }
    v11[2] = v28;
LABEL_5:
    v13 += 2;
    swift_bridgeObjectRelease();
    if (!--v12)
    {
      uint64_t v56 = v11;
      swift_bridgeObjectRelease();
      a1 = v54;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void closure #4 in mapGraph(_:into:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + OBJC_IVAR___SGEdge_from);
  uint64_t v9 = v8 + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x261185960](v9);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = (void *)v10;
  uint64_t v12 = OBJC_IVAR___SGEdge_to;
  uint64_t v13 = *(void *)(v7 + OBJC_IVAR___SGEdge_to) + OBJC_IVAR___SGInput_node;
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x261185960](v13);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = (void *)v14;
  uint64_t v16 = *a2;
  if (!*(void *)(v16 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v18 & 1) == 0))
  {

LABEL_12:
    goto LABEL_13;
  }
  uint64_t v19 = *(void *)(v16 + 56);
  unint64_t v20 = *(void *)(v19 + 8 * v17);
  if (v20 == -7)
  {
LABEL_14:

    goto LABEL_13;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v21 = *(void *)(a3 + 64);
  unint64_t v22 = *(void *)(v21 + 16);
  if (v20 >= v22)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  uint64_t v63 = v21 + 32;
  unint64_t v23 = (unint64_t *)(v21 + 32 + 48 * v20);
  unint64_t v55 = v23[2];
  unint64_t v56 = *v23;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
  if ((v25 & 1) == 0) {
    goto LABEL_14;
  }
  unint64_t v26 = *(void *)(v19 + 8 * v24);
  if (v26 == -7)
  {
    outlined copy of NodePersonality(v56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    return;
  }
  if (v26 >= v22) {
    goto LABEL_45;
  }
  BOOL v27 = (unint64_t *)(v63 + 48 * v26);
  unint64_t v49 = v27[1];
  unint64_t v50 = *v27;
  uint64_t v28 = *(void *)(v55 + 16);
  if (!v28)
  {
    outlined copy of NodePersonality(v56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_26:
    outlined copy of NodePersonality(v50);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v48 = v15;
  uint64_t v29 = *(void *)(v8 + OBJC_IVAR___SGOutput_name);
  uint64_t v61 = *(void *)(v8 + OBJC_IVAR___SGOutput_name + 8);
  swift_bridgeObjectRetain();
  uint64_t v30 = (uint64_t *)(v55 + 80);
  while (1)
  {
    uint64_t v59 = *(v30 - 6);
    uint64_t v31 = *(v30 - 4);
    uint64_t v64 = *(v30 - 5);
    uint64_t v32 = *(v30 - 3);
    uint64_t v60 = *((unsigned __int8 *)v30 - 8);
    uint64_t v57 = *v30;
    uint64_t v58 = *(v30 - 2);
    if (v31 == v29 && v32 == v61) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_28;
    }
    v30 += 7;
    if (!--v28)
    {
      outlined copy of NodePersonality(v56);
      swift_bridgeObjectRetain();
      uint64_t v15 = v48;
      goto LABEL_26;
    }
  }
  uint64_t v31 = v29;
  uint64_t v32 = v61;
LABEL_28:
  uint64_t v46 = v31;
  outlined copy of NodePersonality(v56);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v50);
  uint64_t v34 = (uint64_t *)(*(void *)(v7 + v12) + OBJC_IVAR___SGInput_name);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  uint64_t v37 = *(void *)(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v47 = v32;
  swift_bridgeObjectRetain();
  if (v37)
  {
    uint64_t v38 = (uint64_t *)(v49 + 80);
    while (1)
    {
      uint64_t v39 = *(v38 - 4);
      uint64_t v51 = *(v38 - 5);
      uint64_t v52 = *(v38 - 6);
      uint64_t v40 = *(v38 - 3);
      uint64_t v62 = *(v38 - 2);
      uint64_t v54 = *((unsigned __int8 *)v38 - 8);
      uint64_t v53 = *v38;
      if (v39 == v36 && v40 == v35) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_39;
      }
      v38 += 7;
      if (!--v37) {
        goto LABEL_36;
      }
    }
    uint64_t v39 = v36;
    uint64_t v40 = v35;
LABEL_39:
    uint64_t v45 = v39;
    swift_bridgeObjectRetain();
    uint64_t v43 = v51;
    swift_retain();
    uint64_t v44 = v40;
    swift_bridgeObjectRetain();
    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    uint64_t v42 = v52;
  }
  else
  {
LABEL_36:
    swift_bridgeObjectRetain();
    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v45 = 0;
    uint64_t v44 = 0;
    uint64_t v62 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
  }
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v50);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v43)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_13;
  }
  *(void *)a4 = v59;
  *(void *)(a4 + 8) = v64;
  *(void *)(a4 + 16) = v46;
  *(void *)(a4 + 24) = v47;
  *(void *)(a4 + 32) = v58;
  *(void *)(a4 + 40) = v60;
  *(void *)(a4 + 48) = v57;
  *(void *)(a4 + 56) = v42;
  *(void *)(a4 + 64) = v43;
  *(void *)(a4 + 72) = v45;
  *(void *)(a4 + 80) = v44;
  *(void *)(a4 + 88) = v62;
  *(void *)(a4 + 96) = v54;
  *(void *)(a4 + 104) = v53;
}

uint64_t SGDataType.metalDataType.getter(uint64_t a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      if (one-time initialization token for BOOL != -1) {
        goto LABEL_40;
      }
      goto LABEL_39;
    case 2:
      if (one-time initialization token for uint8 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 3:
      if (one-time initialization token for int32 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 6:
      if (one-time initialization token for uint32 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 7:
      if (one-time initialization token for half == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 9:
      if (one-time initialization token for float == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 13:
      if (one-time initialization token for texture2d_half == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 14:
      if (one-time initialization token for float2x2 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 15:
      if (one-time initialization token for float3x3 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 17:
      if (one-time initialization token for float4x4 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 18:
    case 29:
    case 44:
      if (one-time initialization token for float4 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 20:
    case 30:
    case 45:
      if (one-time initialization token for half4 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 21:
    case 49:
      if (one-time initialization token for float2 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 22:
    case 47:
      if (one-time initialization token for half2 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 24:
      if (one-time initialization token for int2 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 25:
    case 32:
    case 35:
    case 38:
    case 41:
    case 52:
      if (one-time initialization token for float3 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 26:
    case 33:
    case 36:
    case 39:
    case 42:
    case 50:
      if (one-time initialization token for half3 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 28:
      if (one-time initialization token for int3 == -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 31:
      if (one-time initialization token for int4 == -1) {
        goto LABEL_39;
      }
LABEL_40:
      swift_once();
LABEL_39:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void closure #1 in SGGraph.replaceDeprecatedAndRedundantNodes()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + OBJC_IVAR___SGNode_data;
  unsigned int v4 = *(unsigned __int8 *)(v3 + 80);
  if (v4 > 0x3F) {
    return;
  }
  uint64_t v113 = *(void **)(a1 + 8);
  uint64_t v115 = v2;
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v107 = *(void *)(v3 + 32);
  *(void *)uint64_t v109 = *(void *)(v3 + 56);
  uint64_t v10 = *(void **)(v3 + 16);
  uint64_t v9 = *(void **)(v3 + 24);
  uint64_t v11 = *(void **)v3;
  uint64_t v12 = *(void *)(v3 + 8);
  *(void *)unint64_t v103 = *(void *)(a2 + 16);
  uint64_t v105 = *(void *)(v3 + 48);
  unint64_t v112 = (char *)*(id *)a1;
  id v114 = v113;
  char v86 = v4;
  uint64_t v13 = v6;
  outlined copy of NodeData(v11, v12, v10, v9, v107, v6, v105, v109[0], v8, v7, v86);
  if (!*(void *)v103)
  {
    uint64_t v35 = v112;
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v107, v13);

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, v12);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = v112;
    goto LABEL_16;
  }
  uint64_t v16 = (uint64_t *)(*(void *)(a2 + 56) + 24 * v14);
  uint64_t v18 = *v16;
  unint64_t v17 = (char *)v16[1];
  uint64_t v19 = v16[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MaterialXAvailability(v107, v6);
  swift_bridgeObjectRelease();
  uint64_t v20 = OBJC_IVAR___SGNode_outputs;
  uint64_t v21 = (uint64_t)v112;
  unint64_t v22 = *(void *)&v112[OBJC_IVAR___SGNode_outputs];
  uint64_t v23 = v2;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v24 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v24 = *(void **)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  char v25 = v114;
  if (v24 != (void *)1) {
    goto LABEL_75;
  }
  unint64_t v26 = *(void *)&v112[v20];
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_9;
    }
    goto LABEL_74;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v27)
  {
LABEL_74:
    swift_bridgeObjectRelease();
LABEL_75:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v84 = 0xD000000000000034;
    *(void *)(v84 + 8) = 0x800000025C424200;
    *(unsigned char *)(v84 + 16) = 5;
    swift_willThrow();

    return;
  }
LABEL_9:
  uint64_t v111 = v19;
  if ((v26 & 0xC000000000000001) != 0)
  {
    uint64_t v28 = (char *)MEMORY[0x2611848A0](0, v26);
  }
  else
  {
    if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    uint64_t v28 = (char *)*(id *)(v26 + 32);
  }
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = (uint64_t *)&v29[OBJC_IVAR___SGOutput_edges];
  swift_beginAccess();
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  swift_retain();
  swift_retain();
  unint64_t v33 = specialized Sequence.compactMap<A>(_:)(v32, v31);
  swift_release();
  swift_release();
  uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AF7SGInputCs5NeverOTg504_s11d76Graph7SGGraphC34replaceDeprecatedAndRedundantNodesyyKFyAA15TopologicalSortV7b10VKXEfU_AA7g4CAA6F54Ccfu0_33_8ffafd5b6a296e22d4e39828be60e38bAlJTf3nnnpk_nTf1cn_n(v33);
  swift_bridgeObjectRelease();
  SGGraph.remove(node:)((uint64_t)v112);
  if (v115)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v99 = v29;
  unint64_t v94 = v34;
  uint64_t v36 = (void **)&v112[OBJC_IVAR___SGNode_name];
  uint64_t v38 = *(void *)&v112[OBJC_IVAR___SGNode_name];
  uint64_t v37 = *(void **)&v112[OBJC_IVAR___SGNode_name + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v39 = specialized static SGNode.create(nodeDefName:name:)(v18, v17, v38, v37);
  __n128 v89 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C4195A0;
  *(void *)(inited + 32) = v39;
  uint64_t v116 = (void *)inited;
  specialized Array._endMutation()();
  unint64_t v17 = v39;
  v122.value._rawValue = v116;
  SGGraph.insert(_:)(v122);
  uint64_t v115 = v41;
  if (v41)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v87 = *(void *)(v111 + 16);
  unint64_t v88 = v17;
  if (v87)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v42 = 0;
    while (1)
    {
      uint64_t v90 = v42;
      uint64_t v43 = v111 + 32 + 112 * v42;
      uint64_t v44 = *(void **)(v43 + 8);
      uint64_t v46 = *(void **)(v43 + 32);
      uint64_t v45 = *(void **)(v43 + 40);
      uint64_t v106 = v46;
      Swift::String v108 = v45;
      uint64_t v48 = *(void *)(v43 + 48);
      uint64_t v47 = *(void *)(v43 + 56);
      uint64_t v100 = v48;
      int v101 = v47;
      unint64_t v49 = *(void **)(v43 + 64);
      int v98 = (int)v49;
      *(void *)uint64_t v110 = *(void *)(v43 + 72);
      uint64_t v51 = *(void *)(v43 + 80);
      uint64_t v50 = *(void *)(v43 + 88);
      int v102 = v50;
      char v52 = *(unsigned char *)(v43 + 96);
      uint64_t v95 = *(void *)v43;
      uint64_t v96 = *(void *)(v43 + 16);
      uint64_t v53 = v89[1];
      __n128 v118 = *v89;
      uint64_t v119 = (uint64_t)v53;
      swift_bridgeObjectRetain();
      char v104 = v52;
      outlined copy of SGDataTypeStorage(v46, v45, v48, v47, (int)v49, v110[0], v51, v50, v52);
      swift_bridgeObjectRetain();
      v54._uint64_t countAndFlagsBits = 95;
      v54._char object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      swift_bridgeObjectRetain();
      v55._uint64_t countAndFlagsBits = v95;
      long long v91 = v44;
      v55._char object = v44;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      uint64_t v57 = v118;
      uint64_t v56 = v119;
      uint64_t v92 = (uint64_t)v118;
      v120[0] = v96;
      v120[1] = 0;
      v120[2] = v46;
      v120[3] = v108;
      v120[4] = v100;
      v120[5] = v47;
      v120[6] = v49;
      v120[7] = *(void *)v110;
      uint64_t v21 = v50;
      v120[8] = v51;
      v120[9] = v50;
      char v121 = v52 | 0x80;
      long long v93 = (objc_class *)type metadata accessor for SGNode();
      uint64_t v58 = (char *)objc_allocWithZone(v93);
      swift_unknownObjectWeakInit();
      uint64_t v59 = &v58[OBJC_IVAR___SGNode_name];
      *(void *)uint64_t v59 = v57;
      *((void *)v59 + 1) = v56;
      *(void *)&v58[OBJC_IVAR___SGNode_inputs] = MEMORY[0x263F8EE78];
      unint64_t v24 = v49;
      outlined copy of SGDataTypeStorage(v106, v108, v100, v47, (int)v49, v110[0], v51, v50, v104);
      uint64_t v60 = v58;
      swift_bridgeObjectRetain();
      uint64_t v23 = recreateOutputs(from:nodeName:)((uint64_t)v120, v92, v56);
      swift_bridgeObjectRelease();
      *(void *)&v60[OBJC_IVAR___SGNode_outputs] = v23;
      outlined init with take of NodeData((uint64_t)v120, (uint64_t)&v60[OBJC_IVAR___SGNode_data]);
      char v25 = v49;
      int v97 = v51;
      outlined copy of SGDataTypeStorage(v106, v108, v100, v47, (int)v49, v110[0], v51, v50, v104);

      v117.receiver = v60;
      v117.super_class = v93;
      unint64_t v17 = (char *)objc_msgSendSuper2(&v117, sel_init);
      unint64_t v26 = *(void *)&v17[OBJC_IVAR___SGNode_inputs];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v67 = v17;
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v61 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        uint64_t v62 = v17;
      }
      if (v61)
      {
        if (v61 < 1) {
          goto LABEL_79;
        }
        uint64_t v21 = 0;
        do
        {
          if ((v26 & 0xC000000000000001) != 0) {
            id v63 = (id)MEMORY[0x2611848A0](v21, v26);
          }
          else {
            id v63 = *(id *)(v26 + 8 * v21 + 32);
          }
          unint64_t v24 = v63;
          ++v21;
          swift_beginAccess();
          swift_unknownObjectWeakAssign();
        }
        while (v61 != v21);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v23 = OBJC_IVAR___SGNode_outputs;
      unint64_t v26 = *(void *)&v17[OBJC_IVAR___SGNode_outputs];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
        if (!v64) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v64 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v64) {
          goto LABEL_41;
        }
      }
      if (v64 < 1) {
        goto LABEL_80;
      }
      uint64_t v21 = 0;
      do
      {
        if ((v26 & 0xC000000000000001) != 0) {
          id v65 = (id)MEMORY[0x2611848A0](v21, v26);
        }
        else {
          id v65 = *(id *)(v26 + 8 * v21 + 32);
        }
        uint64_t v66 = v65;
        ++v21;
        swift_beginAccess();
        swift_unknownObjectWeakAssign();
      }
      while (v64 != v21);
LABEL_41:

      swift_bridgeObjectRelease();
      outlined consume of SGDataTypeStorage(v106, v108, v100, v101, v98, v110[0], v51, v50, v104);
      swift_bridgeObjectRelease();
      uint64_t v68 = swift_initStackObject();
      *(_OWORD *)(v68 + 16) = xmmword_25C4195A0;
      *(void *)(v68 + 32) = v17;
      __n128 v118 = (void *)v68;
      specialized Array._endMutation()();
      unint64_t v69 = v118;
      unint64_t v70 = v17;
      v123.value._rawValue = v69;
      SGGraph.insert(_:)(v123);
      uint64_t v115 = v71;
      if (v71)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of SGDataTypeStorage(v106, v108, v100, v101, v98, v110[0], v97, v102, v104);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      unint64_t v26 = *(void *)&v17[v23];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v24 = v88;
        if (_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_44:
          if ((v26 & 0xC000000000000001) != 0)
          {
            uint64_t v73 = (char *)MEMORY[0x2611848A0](0, v26);
          }
          else
          {
            if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_81;
            }
            uint64_t v73 = (char *)*(id *)(v26 + 32);
          }
          unint64_t v17 = v73;
          unint64_t v74 = v91;
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v72 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        unint64_t v24 = v88;
        if (v72) {
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v17 = 0;
      unint64_t v74 = v91;
LABEL_50:
      char v75 = (void *)MEMORY[0x261183E60](v95, v74);
      uint64_t v23 = (uint64_t)v24;
      Swift::String v76 = (char *)objc_msgSend(v24, sel_inputNamed_, v75);

      SGGraph.connect(_:to:)(v17, v76);
      uint64_t v42 = v90 + 1;
      swift_bridgeObjectRelease();

      outlined consume of SGDataTypeStorage(v106, v108, v100, v101, v98, v110[0], v97, v102, v104);
      char v25 = v114;
      unint64_t v24 = v99;
      if (v90 + 1 == v87)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = (uint64_t)v112;
        goto LABEL_55;
      }
    }
  }
  uint64_t v23 = (uint64_t)v17;
  unint64_t v24 = v29;
LABEL_55:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v26 = *(void *)(v23 + OBJC_IVAR___SGNode_outputs);
  if (v26 >> 62) {
    goto LABEL_83;
  }
  uint64_t v77 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v77)
  {
    do
    {
      if ((v26 & 0xC000000000000001) != 0)
      {
        long long v78 = (char *)MEMORY[0x2611848A0](0, v26);
      }
      else
      {
        if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_87;
        }
        long long v78 = (char *)*(id *)(v26 + 32);
      }
      unint64_t v17 = v78;
      swift_bridgeObjectRelease();
      if (!(v94 >> 62))
      {
        uint64_t v21 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        uint64_t v79 = v115;
        if (!v21) {
          goto LABEL_70;
        }
        goto LABEL_62;
      }
LABEL_87:
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v79 = v115;
      if (!v21)
      {
LABEL_70:

        swift_bridgeObjectRelease_n();
        return;
      }
LABEL_62:
      uint64_t v23 = 4;
      while (1)
      {
        unint64_t v26 = v23 - 4;
        uint64_t v80 = v79;
        long long v81 = (v94 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x2611848A0](v23 - 4, v94)
            : (char *)*(id *)(v94 + 8 * v23);
        long long v82 = v81;
        unint64_t v24 = (void *)(v23 - 3);
        if (__OFADD__(v26, 1)) {
          break;
        }
        SGGraph.connect(_:to:)(v17, v81);
        if (v80)
        {

          swift_bridgeObjectRelease_n();
          return;
        }

        ++v23;
        BOOL v83 = v24 == (void *)v21;
        uint64_t v79 = 0;
        if (v83) {
          goto LABEL_70;
        }
      }
LABEL_82:
      __break(1u);
LABEL_83:
      swift_bridgeObjectRetain();
    }
    while (_CocoaArrayWrapper.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(void *)uint64_t v85 = 0xD000000000000040;
  *(void *)(v85 + 8) = 0x800000025C424240;
  *(unsigned char *)(v85 + 16) = 5;
  swift_willThrow();
}

uint64_t SGGraph.ReplacementNode.name.getter(uint64_t a1)
{
  return a1;
}

uint64_t SGGraph.ReplacementNode.additionalInputValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  a2[6] = v7;
  a2[7] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined copy of MaterialXAvailability(v7, v8);
}

uint64_t specialized SGDataType.materialXDataType.getter(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      if (one-time initialization token for BOOLean != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.BOOLean;
      break;
    case 3:
      if (one-time initialization token for integer != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.integer;
      break;
    case 7:
      if (one-time initialization token for half != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.half;
      break;
    case 9:
      if (one-time initialization token for float != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.float;
      break;
    case 11:
    case 12:
      if (one-time initialization token for string != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.string;
      break;
    case 13:
      if (one-time initialization token for filename != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.filename;
      break;
    case 14:
      if (one-time initialization token for matrix22 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.matrix22;
      break;
    case 15:
      if (one-time initialization token for matrix33 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.matrix33;
      break;
    case 17:
      if (one-time initialization token for matrix44 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.matrix44;
      break;
    case 18:
    case 29:
      if (one-time initialization token for float4 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.float4;
      break;
    case 20:
    case 30:
    case 56:
      if (one-time initialization token for half4 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.half4;
      break;
    case 21:
    case 49:
      if (one-time initialization token for float2 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.float2;
      break;
    case 22:
    case 47:
      if (one-time initialization token for half2 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.half2;
      break;
    case 24:
      if (one-time initialization token for integer2 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.integer2;
      break;
    case 25:
    case 32:
    case 35:
    case 38:
    case 52:
      if (one-time initialization token for float3 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.float3;
      break;
    case 26:
    case 33:
    case 36:
    case 39:
    case 50:
    case 55:
      if (one-time initialization token for half3 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.half3;
      break;
    case 28:
      if (one-time initialization token for integer3 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.integer3;
      break;
    case 31:
      if (one-time initialization token for integer4 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.integer4;
      break;
    case 41:
    case 42:
      if (one-time initialization token for color3 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.color3;
      break;
    case 44:
    case 45:
      if (one-time initialization token for color4 != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.color4;
      break;
    case 53:
      if (one-time initialization token for surfaceshader != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.surfaceshader;
      break;
    case 54:
      if (one-time initialization token for geometrymodifier != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.geometrymodifier;
      break;
    default:
      if (one-time initialization token for unsupported != -1) {
        swift_once();
      }
      uint64_t v1 = &static MaterialXDataType.unsupported;
      break;
  }
  return *v1;
}

uint64_t specialized SGDataType.init(_:)()
{
  if (one-time initialization token for BOOLean != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    swift_release();
    return 1;
  }
  uint64_t v1 = one-time initialization token for integer;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  char v2 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v2)
  {
    swift_release();
    return 3;
  }
  uint64_t v3 = one-time initialization token for integer2;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  char v4 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v4)
  {
    swift_release();
    return 24;
  }
  uint64_t v5 = one-time initialization token for integer3;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  char v6 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v6)
  {
    swift_release();
    return 28;
  }
  uint64_t v7 = one-time initialization token for integer4;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  char v8 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v8)
  {
    swift_release();
    return 31;
  }
  uint64_t v9 = one-time initialization token for float;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  char v10 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v10)
  {
    swift_release();
    return 9;
  }
  uint64_t v11 = one-time initialization token for float2;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  char v12 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v12) {
    goto LABEL_28;
  }
  uint64_t v13 = one-time initialization token for float3;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  char v14 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v14)
  {
LABEL_32:
    swift_release();
    return 25;
  }
  uint64_t v15 = one-time initialization token for float4;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  char v16 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v16) {
    goto LABEL_36;
  }
  uint64_t v17 = one-time initialization token for color3;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  char v18 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v18)
  {
    swift_release();
    return 42;
  }
  uint64_t v19 = one-time initialization token for color4;
  swift_retain();
  if (v19 != -1) {
    swift_once();
  }
  char v20 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v20)
  {
    swift_release();
    return 45;
  }
  uint64_t v21 = one-time initialization token for vector2;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  char v22 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v22)
  {
LABEL_28:
    swift_release();
    return 21;
  }
  uint64_t v23 = one-time initialization token for vector3;
  swift_retain();
  if (v23 != -1) {
    swift_once();
  }
  char v24 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v24) {
    goto LABEL_32;
  }
  uint64_t v25 = one-time initialization token for vector4;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  char v26 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v26)
  {
LABEL_36:
    swift_release();
    return 29;
  }
  uint64_t v27 = one-time initialization token for half;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  char v28 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v28)
  {
    swift_release();
    return 7;
  }
  uint64_t v29 = one-time initialization token for half2;
  swift_retain();
  if (v29 != -1) {
    swift_once();
  }
  char v30 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v30)
  {
    swift_release();
    return 22;
  }
  uint64_t v31 = one-time initialization token for half3;
  swift_retain();
  if (v31 != -1) {
    swift_once();
  }
  char v32 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v32)
  {
    swift_release();
    return 26;
  }
  uint64_t v33 = one-time initialization token for half4;
  swift_retain();
  if (v33 != -1) {
    swift_once();
  }
  char v34 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v34)
  {
    swift_release();
    return 30;
  }
  uint64_t v35 = one-time initialization token for matrix22;
  swift_retain();
  if (v35 != -1) {
    swift_once();
  }
  char v36 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v36)
  {
    swift_release();
    return 14;
  }
  uint64_t v37 = one-time initialization token for matrix33;
  swift_retain();
  if (v37 != -1) {
    swift_once();
  }
  char v38 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v38)
  {
    swift_release();
    return 15;
  }
  uint64_t v39 = one-time initialization token for matrix44;
  swift_retain();
  if (v39 != -1) {
    swift_once();
  }
  char v40 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v40)
  {
    swift_release();
    return 17;
  }
  uint64_t v41 = one-time initialization token for surfaceshader;
  swift_retain();
  if (v41 != -1) {
    swift_once();
  }
  char v42 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v42)
  {
    swift_release();
    return 53;
  }
  uint64_t v43 = one-time initialization token for vertexshader;
  swift_retain();
  if (v43 != -1) {
    swift_once();
  }
  char v44 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v44) {
    goto LABEL_92;
  }
  uint64_t v45 = one-time initialization token for geometrymodifier;
  swift_retain();
  if (v45 != -1) {
    swift_once();
  }
  char v46 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v46)
  {
LABEL_92:
    swift_release();
    return 54;
  }
  uint64_t v47 = one-time initialization token for string;
  swift_retain();
  if (v47 != -1) {
    swift_once();
  }
  char v48 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v48) {
    goto LABEL_96;
  }
  uint64_t v49 = one-time initialization token for filename;
  swift_retain();
  if (v49 != -1) {
    swift_once();
  }
  char v50 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v50)
  {
    swift_release();
    return 13;
  }
  else
  {
    uint64_t v51 = one-time initialization token for space;
    swift_retain();
    if (v51 != -1) {
      swift_once();
    }
    char v52 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v52) {
      goto LABEL_96;
    }
    uint64_t v53 = one-time initialization token for uAddressMode;
    swift_retain();
    if (v53 != -1) {
      swift_once();
    }
    char v54 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v54) {
      goto LABEL_96;
    }
    uint64_t v55 = one-time initialization token for vAddressMode;
    swift_retain();
    if (v55 != -1) {
      swift_once();
    }
    char v56 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v56) {
      goto LABEL_96;
    }
    uint64_t v57 = one-time initialization token for wrapS;
    swift_retain();
    if (v57 != -1) {
      swift_once();
    }
    char v58 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v58) {
      goto LABEL_96;
    }
    uint64_t v59 = one-time initialization token for wrapT;
    swift_retain();
    if (v59 != -1) {
      swift_once();
    }
    char v60 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v60) {
      goto LABEL_96;
    }
    uint64_t v61 = one-time initialization token for filterType;
    swift_retain();
    if (v61 != -1) {
      swift_once();
    }
    char v62 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v62) {
      goto LABEL_96;
    }
    uint64_t v63 = one-time initialization token for blurFilterType;
    swift_retain();
    if (v63 != -1) {
      swift_once();
    }
    char v64 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v64) {
      goto LABEL_96;
    }
    uint64_t v65 = one-time initialization token for normalMapSpace;
    swift_retain();
    if (v65 != -1) {
      swift_once();
    }
    char v66 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v66) {
      goto LABEL_96;
    }
    uint64_t v67 = one-time initialization token for lumacoeffs;
    swift_retain();
    if (v67 != -1) {
      swift_once();
    }
    char v68 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v68) {
      goto LABEL_96;
    }
    uint64_t v69 = one-time initialization token for cubeimageFilterType;
    swift_retain();
    if (v69 != -1) {
      swift_once();
    }
    char v70 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v70) {
      goto LABEL_96;
    }
    uint64_t v71 = one-time initialization token for filter;
    swift_retain();
    if (v71 != -1) {
      swift_once();
    }
    char v72 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v72) {
      goto LABEL_96;
    }
    uint64_t v73 = one-time initialization token for coord;
    swift_retain();
    if (v73 != -1) {
      swift_once();
    }
    char v74 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v74) {
      goto LABEL_96;
    }
    uint64_t v75 = one-time initialization token for addressMode;
    swift_retain();
    if (v75 != -1) {
      swift_once();
    }
    char v76 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v76) {
      goto LABEL_96;
    }
    uint64_t v77 = one-time initialization token for rAddressMode;
    swift_retain();
    if (v77 != -1) {
      swift_once();
    }
    char v78 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v78) {
      goto LABEL_96;
    }
    uint64_t v79 = one-time initialization token for sAddressMode;
    swift_retain();
    if (v79 != -1) {
      swift_once();
    }
    char v80 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v80) {
      goto LABEL_96;
    }
    uint64_t v81 = one-time initialization token for tAddressMode;
    swift_retain();
    if (v81 != -1) {
      swift_once();
    }
    char v82 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v82) {
      goto LABEL_96;
    }
    uint64_t v83 = one-time initialization token for u_wrap_mode;
    swift_retain();
    if (v83 != -1) {
      swift_once();
    }
    char v84 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v84) {
      goto LABEL_96;
    }
    uint64_t v85 = one-time initialization token for v_wrap_mode;
    swift_retain();
    if (v85 != -1) {
      swift_once();
    }
    char v86 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v86) {
      goto LABEL_96;
    }
    uint64_t v87 = one-time initialization token for w_wrap_mode;
    swift_retain();
    if (v87 != -1) {
      swift_once();
    }
    char v88 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v88) {
      goto LABEL_96;
    }
    uint64_t v89 = one-time initialization token for u_pixel_wrap_mode;
    swift_retain();
    if (v89 != -1) {
      swift_once();
    }
    char v90 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v90) {
      goto LABEL_96;
    }
    uint64_t v91 = one-time initialization token for v_pixel_wrap_mode;
    swift_retain();
    if (v91 != -1) {
      swift_once();
    }
    char v92 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v92) {
      goto LABEL_96;
    }
    uint64_t v93 = one-time initialization token for w_pixel_wrap_mode;
    swift_retain();
    if (v93 != -1) {
      swift_once();
    }
    char v94 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v94) {
      goto LABEL_96;
    }
    uint64_t v95 = one-time initialization token for magFilter;
    swift_retain();
    if (v95 != -1) {
      swift_once();
    }
    char v96 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v96) {
      goto LABEL_96;
    }
    uint64_t v97 = one-time initialization token for minFilter;
    swift_retain();
    if (v97 != -1) {
      swift_once();
    }
    char v98 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v98) {
      goto LABEL_96;
    }
    uint64_t v99 = one-time initialization token for mipFilter;
    swift_retain();
    if (v99 != -1) {
      swift_once();
    }
    char v100 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v100) {
      goto LABEL_96;
    }
    uint64_t v101 = one-time initialization token for borderColor;
    swift_retain();
    if (v101 != -1) {
      swift_once();
    }
    char v102 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v102)
    {
LABEL_96:
      swift_release();
      return 11;
    }
    char v103 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v103) {
      return 11;
    }
    else {
      return 0;
    }
  }
}

unint64_t specialized SGGraph.deprecationMap()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGGraph.ReplacementNode)>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_25C41B210;
  *(void *)(v2 + 32) = 0xD000000000000024;
  *(void *)(v2 + 40) = 0x800000025C420490;
  strcpy((char *)(v2 + 48), "ND_time_float");
  *(_WORD *)(v2 + 62) = -4864;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 64) = MEMORY[0x263F8EE78];
  *(void *)(v2 + 72) = 0xD000000000000028;
  *(void *)(v2 + 80) = 0x800000025C420420;
  *(void *)(v2 + 88) = 0xD000000000000013;
  *(void *)(v2 + 96) = 0x800000025C420070;
  *(void *)(v2 + 104) = v3;
  *(void *)(v2 + 112) = 0xD000000000000025;
  *(void *)(v2 + 120) = 0x800000025C4200F0;
  *(void *)(v2 + 128) = 0xD000000000000013;
  *(void *)(v2 + 136) = 0x800000025C41FFF0;
  *(void *)(v2 + 144) = v3;
  *(void *)(v2 + 152) = 0xD000000000000026;
  *(void *)(v2 + 160) = 0x800000025C4203C0;
  *(void *)(v2 + 168) = 0xD000000000000011;
  *(void *)(v2 + 176) = 0x800000025C420030;
  *(void *)(v2 + 184) = v3;
  *(void *)(v2 + 192) = 0xD000000000000029;
  *(void *)(v2 + 200) = 0x800000025C4200C0;
  *(void *)(v2 + 208) = 0xD000000000000014;
  *(void *)(v2 + 216) = 0x800000025C41FFB0;
  *(void *)(v2 + 224) = v3;
  *(void *)(v2 + 232) = 0xD000000000000023;
  *(void *)(v2 + 240) = 0x800000025C4204C0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(BuiltInDefinition.InputSpec, SGDataTypeStorage)>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25C418EE0;
  if (one-time initialization token for string != -1) {
    swift_once();
  }
  uint64_t v5 = static MaterialXDataType.string;
  swift_retain();
  uint64_t v32 = v5;
  specialized SGDataTypeStorage.init(materialXValue:type:)(3167829, 0xE300000000000000, v5, (uint64_t)v23);
  if (v1)
  {
    *(void *)(v4 + 16) = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v2 + 16) = 0;
    return swift_release();
  }
  else
  {
    *(void *)(v4 + 32) = 0x706F72706D6F6567;
    *(void *)(v4 + 40) = 0xE800000000000000;
    *(void *)(v4 + 48) = 11;
    *(unsigned char *)(v4 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v23, v4 + 64);
    *(void *)(v2 + 248) = 0xD000000000000018;
    *(void *)(v2 + 256) = 0x800000025C420CF0;
    *(void *)(v2 + 264) = v4;
    *(void *)(v2 + 272) = 0xD000000000000023;
    *(void *)(v2 + 280) = 0x800000025C420550;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_25C418EE0;
    uint64_t v7 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(3233365, 0xE300000000000000, v7, (uint64_t)v24);
    *(void *)(v6 + 32) = 0x706F72706D6F6567;
    *(void *)(v6 + 40) = 0xE800000000000000;
    *(void *)(v6 + 48) = 11;
    *(unsigned char *)(v6 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v24, v6 + 64);
    *(void *)(v2 + 288) = 0xD000000000000018;
    *(void *)(v2 + 296) = 0x800000025C420CF0;
    *(void *)(v2 + 304) = v6;
    *(void *)(v2 + 312) = 0xD00000000000001ALL;
    *(void *)(v2 + 320) = 0x800000025C421200;
    strcpy((char *)(v2 + 328), "ND_time_float");
    *(_WORD *)(v2 + 342) = -4864;
    *(void *)(v2 + 344) = v3;
    *(void *)(v2 + 352) = 0xD000000000000024;
    *(void *)(v2 + 360) = 0x800000025C421080;
    *(void *)(v2 + 368) = 0xD000000000000013;
    *(void *)(v2 + 376) = 0x800000025C420070;
    *(void *)(v2 + 384) = v3;
    *(void *)(v2 + 392) = 0xD000000000000024;
    *(void *)(v2 + 400) = 0x800000025C4212C0;
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25C418EE0;
    uint64_t v10 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77, 0xE500000000000000, v10, (uint64_t)v25);
    *(void *)(v9 + 32) = 0x6563617073;
    *(void *)(v9 + 40) = 0xE500000000000000;
    *(void *)(v9 + 48) = 11;
    *(unsigned char *)(v9 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v25, v9 + 64);
    *(void *)(v2 + 408) = 0xD000000000000013;
    *(void *)(v2 + 416) = 0x800000025C420070;
    *(void *)(v2 + 424) = v9;
    *(void *)(v2 + 432) = 0xD00000000000001BLL;
    *(void *)(v2 + 440) = 0x800000025C420E00;
    *(void *)(v2 + 448) = 0xD000000000000013;
    *(void *)(v2 + 456) = 0x800000025C41FFF0;
    *(void *)(v2 + 464) = v3;
    *(void *)(v2 + 472) = 0xD000000000000025;
    *(void *)(v2 + 480) = 0x800000025C421000;
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_25C418EE0;
    uint64_t v12 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77, 0xE500000000000000, v12, (uint64_t)v26);
    *(void *)(v11 + 32) = 0x6563617073;
    *(void *)(v11 + 40) = 0xE500000000000000;
    *(void *)(v11 + 48) = 11;
    *(unsigned char *)(v11 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v26, v11 + 64);
    *(void *)(v2 + 488) = 0xD000000000000011;
    *(void *)(v2 + 496) = 0x800000025C420030;
    *(void *)(v2 + 504) = v11;
    *(void *)(v2 + 512) = 0xD000000000000026;
    *(void *)(v2 + 520) = 0x800000025C421030;
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_25C418EE0;
    uint64_t v14 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77, 0xE500000000000000, v14, (uint64_t)v27);
    *(void *)(v13 + 32) = 0x6563617073;
    *(void *)(v13 + 40) = 0xE500000000000000;
    *(void *)(v13 + 48) = 11;
    *(unsigned char *)(v13 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v27, v13 + 64);
    *(void *)(v2 + 528) = 0xD000000000000012;
    *(void *)(v2 + 536) = 0x800000025C421320;
    *(void *)(v2 + 544) = v13;
    *(void *)(v2 + 552) = 0xD000000000000028;
    *(void *)(v2 + 560) = 0x800000025C420FD0;
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_25C418EE0;
    uint64_t v16 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77, 0xE500000000000000, v16, (uint64_t)v28);
    *(void *)(v15 + 32) = 0x6563617073;
    *(void *)(v15 + 40) = 0xE500000000000000;
    *(void *)(v15 + 48) = 11;
    *(unsigned char *)(v15 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v28, v15 + 64);
    *(void *)(v2 + 568) = 0xD000000000000014;
    *(void *)(v2 + 576) = 0x800000025C41FFB0;
    *(void *)(v2 + 584) = v15;
    *(void *)(v2 + 592) = 0xD000000000000019;
    *(void *)(v2 + 600) = 0x800000025C421220;
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_25C418EE0;
    uint64_t v18 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(3167829, 0xE300000000000000, v18, (uint64_t)v29);
    *(void *)(v17 + 32) = 0x706F72706D6F6567;
    *(void *)(v17 + 40) = 0xE800000000000000;
    *(void *)(v17 + 48) = 11;
    *(unsigned char *)(v17 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v29, v17 + 64);
    *(void *)(v2 + 608) = 0xD000000000000018;
    *(void *)(v2 + 616) = 0x800000025C420CF0;
    *(void *)(v2 + 624) = v17;
    *(void *)(v2 + 632) = 0xD000000000000019;
    *(void *)(v2 + 640) = 0x800000025C421240;
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_25C418EE0;
    uint64_t v20 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(3233365, 0xE300000000000000, v20, (uint64_t)v30);
    *(void *)(v19 + 32) = 0x706F72706D6F6567;
    *(void *)(v19 + 40) = 0xE800000000000000;
    *(void *)(v19 + 48) = 11;
    *(unsigned char *)(v19 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v30, v19 + 64);
    *(void *)(v2 + 648) = 0xD000000000000018;
    *(void *)(v2 + 656) = 0x800000025C420CF0;
    *(void *)(v2 + 664) = v19;
    *(void *)(v2 + 672) = 0xD00000000000002ALL;
    *(void *)(v2 + 680) = 0x800000025C4211D0;
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_25C418EE0;
    uint64_t v22 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x746E65676E6174, 0xE700000000000000, v22, (uint64_t)v31);
    *(void *)(v21 + 32) = 0x6563617073;
    *(void *)(v21 + 40) = 0xE500000000000000;
    *(void *)(v21 + 48) = 11;
    *(unsigned char *)(v21 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v31, v21 + 64);
    *(void *)(v2 + 688) = 0xD000000000000011;
    *(void *)(v2 + 696) = 0x800000025C420030;
    *(void *)(v2 + 704) = v21;
    return specialized Dictionary.init(dictionaryLiteral:)(v2);
  }
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi48_(uint64_t a1)
{
  *(void *)a1 = 14;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t outlined release of SGDataTypeStorage(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x4400000000000000;
  return result;
}

uint64_t type metadata accessor for BuiltInDefinitionStore()
{
  return self;
}

uint64_t method lookup function for BuiltInDefinitionStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BuiltInDefinitionStore);
}

uint64_t dispatch thunk of BuiltInDefinitionStore.__allocating_init(nodeDefStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for SGDataTypeStorage.ValueConversionContext()
{
  return &type metadata for SGDataTypeStorage.ValueConversionContext;
}

uint64_t destroy for SGGraph.ReplacementNode()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for SGGraph.ReplacementNode(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SGGraph.ReplacementNode(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SGGraph.ReplacementNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SGGraph.ReplacementNode()
{
  return &type metadata for SGGraph.ReplacementNode;
}

void *partial apply for specialized closure #1 in toString<A>(_:)@<X0>(void *result@<X0>, _DWORD *a2@<X8>)
{
  if (*result >= 2uLL) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * (*result & 1));
  }
  return result;
}

{
  uint64_t v2;

  if (*result >= 3uLL) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * (*result & 3));
  }
  return result;
}

{
  uint64_t v2;

  if (*result >= 4uLL) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * (*result & 3));
  }
  return result;
}

{
  uint64_t v2;

  if (*result >= 2uLL) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * (*result & 1));
  }
  return result;
}

{
  uint64_t v2;

  if (*result >= 3uLL) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * (*result & 3));
  }
  return result;
}

{
  uint64_t v2;

  if (*result >= 4uLL) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * (*result & 3));
  }
  return result;
}

uint64_t *partial apply for specialized closure #1 in toString<A>(_:)@<X0>(uint64_t *result@<X0>, _WORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = *result;
  if ((unint64_t)*result >= 2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(_WORD **)(v3 + 16);
    LOWORD(a3) = *v5;
    WORD2(a3) = v5[1];
    double v6 = a3;
    *a2 = *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  }
  return result;
}

uint64_t *partial apply for specialized closure #1 in toString<A>(_:)@<X0>(uint64_t *result@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3 = *result;
  if ((unint64_t)*result >= 3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = **(void **)(v2 + 16);
    *a2 = *(_WORD *)((unint64_t)&v4 & 0xFFFFFFFFFFFFFFF9 | (2 * (v3 & 3)));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *result;
  if ((unint64_t)*result >= 4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = **(void **)(v2 + 16);
    *a2 = *(_WORD *)((unint64_t)&v4 & 0xFFFFFFFFFFFFFFF9 | (2 * (v3 & 3)));
  }
  return result;
}

uint64_t sub_25C2F623C()
{
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 15);
}

uint64_t sub_25C2F6298()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(v0 + 144));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 185, 7);
}

uint64_t outlined init with copy of WeakBox<SGEdge>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<SGEdge>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _HashTable.UnsafeHandle.idealBucket<A>(for:)(uint64_t a1, void *a2)
{
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v4 = 1 << *a2;
  BOOL v5 = __OFSUB__(v4, 1);
  uint64_t v6 = v4 - 1;
  if (!v5) {
    return v6 & result;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator(startingAt:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = result;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v10;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance(until:)(Swift::Int until)
{
  for (uint64_t i = v1[3]; i; uint64_t i = v1[3])
  {
    uint64_t v4 = -1 << *(void *)*v1;
    unint64_t v5 = (v4 ^ ~i) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v5 >= ~v4) {
      uint64_t v6 = ~v4;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v5 - v6 == until) {
      break;
    }
    _HashTable.BucketIterator.advance()();
  }
}

BOOL _HashTable.BucketIterator.isOccupied.getter()
{
  return *(void *)(v0 + 24) != 0;
}

uint64_t _HashTable.BucketIterator.currentValue.setter(uint64_t result, char a2)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v5 = **(void **)v2 & 0x3FLL;
  if (a2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (-1 << v5) ^ ~((((result - ((uint64_t)v4[1] >> 6)) >> 63) & ~(-1 << v5)) + result - ((uint64_t)v4[1] >> 6));
  }
  unint64_t v7 = *(void *)(v2 + 24) ^ v6;
  uint64_t v8 = v5 * *(void *)(v2 + 16);
  uint64_t v9 = v8 >> 6;
  *(void *)(v3 + 8 * (v8 >> 6)) ^= v7 << v8;
  unint64_t v10 = 64 - (v8 & 0x3F);
  unint64_t v11 = *v4 & 0x3FLL;
  if (v10 >= v11)
  {
LABEL_12:
    *(void *)(v2 + 24) = v6;
    return result;
  }
  unint64_t v12 = v11 << v11;
  BOOL v13 = __OFADD__(v12, 64);
  uint64_t v14 = v12 + 64;
  if (!v13)
  {
    uint64_t v16 = v14 - 1;
    BOOL v15 = v14 < 1;
    uint64_t v17 = v14 + 62;
    if (!v15) {
      uint64_t v17 = v16;
    }
    if (v9 + 1 == v17 >> 6) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v9 + 1;
    }
    *(void *)(v3 + 8 * v18) ^= v7 >> v10;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.BucketIterator._hashTable.getter()
{
  return *(void *)v0;
}

uint64_t _HashTable.BucketIterator._currentBucket.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _HashTable.BucketIterator._currentBucket.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._currentBucket.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._currentRawValue.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t _HashTable.BucketIterator._currentRawValue.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._currentRawValue.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._nextBits.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t _HashTable.BucketIterator._nextBits.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._nextBits.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._remainingBitCount.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t _HashTable.BucketIterator._remainingBitCount.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._remainingBitCount.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._wrappedAround.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t _HashTable.BucketIterator._wrappedAround.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._wrappedAround.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator.init(hashTable:startingAt:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, a1, a2);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = result;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v10;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = *a2 & 0x3FLL;
  uint64_t v4 = (v3 * result) >> 6;
  uint64_t v5 = (v3 * result) & 0x3F;
  if ((unint64_t)(v5 + v3) <= 0x40) {
    return (*(void *)(a3 + 8 * v4) >> v5) & ~(-1 << v3);
  }
  if (__OFADD__(v3 << v3, 64))
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = *(void *)(a3 + 8 * v4);
    uint64_t v7 = (v3 << v3) + 126;
    if ((v3 << v3) + 64 >= 1) {
      uint64_t v7 = (v3 << v3) + 63;
    }
    if (v4 + 1 == v7 >> 6) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    return ((*(void *)(a3 + 8 * v8) << (64 - v5)) | (v6 >> v5)) & ~(-1 << v3);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.idealBucket(forHashValue:)(uint64_t result, void *a2)
{
  uint64_t v2 = 1 << *a2;
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (!v3) {
    return v4 & result;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator<A>(for:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v7 = 1 << *a1;
  BOOL v8 = __OFSUB__(v7, 1);
  uint64_t v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v9 & result;
    uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & result, a1, a2);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = v10;
    *(void *)(a3 + 24) = result;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v12;
    *(unsigned char *)(a3 + 48) = 0;
  }
  return result;
}

unint64_t _HashTable.UnsafeHandle.startFind(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = _HashTable.UnsafeHandle._startIterator(bucket:)(a2, a3, a4);
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = 0;
  if (!v8) {
    return 0;
  }
  uint64_t v11 = -1 << *a3;
  unint64_t v12 = (v11 ^ ~v8) + ((uint64_t)a3[1] >> 6);
  if (v12 >= ~v11) {
    uint64_t v13 = ~v11;
  }
  else {
    uint64_t v13 = 0;
  }
  return v12 - v13;
}

unint64_t _HashTable.BucketIterator.currentValue.getter()
{
  uint64_t v1 = v0[3];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = -1 << *(void *)*v0;
  unint64_t v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
  if (v3 >= ~v2) {
    uint64_t v4 = ~v2;
  }
  else {
    uint64_t v4 = 0;
  }
  return v3 - v4;
}

uint64_t _HashTable.BucketIterator._scale.getter()
{
  return **v0 & 0x3FLL;
}

uint64_t _HashTable.BucketIterator.currentBucket.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t (*_HashTable.BucketIterator.currentValue.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v2 = v1[3];
  if (v2)
  {
    uint64_t v3 = -1 << *(void *)*v1;
    unint64_t v4 = (v3 ^ ~v2) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v4 >= ~v3) {
      uint64_t v5 = ~v3;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = v4 - v5;
  }
  else
  {
    unint64_t v6 = 0;
  }
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v2 == 0;
  return _HashTable.BucketIterator.currentValue.modify;
}

uint64_t _HashTable.BucketIterator.currentValue.modify(uint64_t a1)
{
  return _HashTable.BucketIterator.currentValue.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
  uint64_t v1 = *(void *)(v0 + 16) + 1;
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = **(void **)v0 & 0x3FLL;
  uint64_t v3 = 1 << **(void **)v0;
  if (v1 != v3)
  {
LABEL_4:
    uint64_t v4 = *(void *)(v0 + 40);
    if (v4 >= v2) {
      goto LABEL_21;
    }
    uint64_t v5 = (v1 * v2) >> 6;
    if (v4)
    {
      if (__OFADD__(v2 << v2, 64))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v6 = (v2 << v2) + 126;
      if ((v2 << v2) + 64 >= 1) {
        uint64_t v6 = (v2 << v2) + 63;
      }
      if (v5 + 1 == v6 >> 6) {
        uint64_t v5 = 0;
      }
      else {
        ++v5;
      }
    }
    unint64_t v7 = *(void *)(*(void *)(v0 + 8) + 8 * v5);
    *(void *)(v0 + 24) = (*(void *)(v0 + 32) | (v7 << v4)) & (v3 - 1);
    uint64_t v3 = v2 - v4;
    if (!__OFSUB__(v2, v4))
    {
      BOOL v8 = v5 == 2 && v2 == 5;
      uint64_t v9 = 64;
      if (v8) {
        uint64_t v9 = 32;
      }
      uint64_t v4 = v7 >> v3;
      *(void *)(v0 + 32) = v7 >> v3;
      BOOL v10 = __OFSUB__(v9, v3);
      uint64_t v2 = v9 - v3;
      if (!v10) {
        goto LABEL_22;
      }
      __break(1u);
LABEL_21:
      unint64_t v11 = *(void *)(v0 + 32);
      *(void *)(v0 + 24) = v11 & (v3 - 1);
      *(void *)(v0 + 32) = v11 >> v2;
      uint64_t v2 = v4 - v2;
LABEL_22:
      *(void *)(v0 + 40) = v2;
      return;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    uint64_t v1 = 0;
    *(unsigned char *)(v0 + 48) = 1;
    *(void *)(v0 + 16) = 0;
    goto LABEL_4;
  }
LABEL_25:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int_optional __swiftcall _HashTable.BucketIterator.findNext()()
{
  _HashTable.BucketIterator.advance()();
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = -1 << *(void *)*v0;
    unint64_t v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
    if (v3 >= ~v2) {
      uint64_t v4 = ~v2;
    }
    else {
      uint64_t v4 = 0;
    }
    Swift::Int v5 = v3 - v4;
  }
  else
  {
    Swift::Int v5 = 0;
  }
  Swift::Bool v6 = v1 == 0;
  result.value = v5;
  result.is_nil = v6;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advanceToNextUnoccupiedBucket()()
{
  while (*(void *)(v0 + 24))
    _HashTable.BucketIterator.advance()();
}

void *sub_25C2F6BE4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[3];
  if (v2)
  {
    uint64_t v3 = -1 << *(void *)*result;
    unint64_t v4 = (v3 ^ ~v2) + (*(uint64_t *)(*result + 8) >> 6);
    if (v4 >= ~v3) {
      uint64_t v5 = ~v3;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = v4 - v5;
  }
  else
  {
    unint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v2 == 0;
  return result;
}

uint64_t sub_25C2F6C30(uint64_t a1)
{
  return _HashTable.BucketIterator.currentValue.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _HashTable.BucketIterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTable.BucketIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.BucketIterator()
{
  return &type metadata for _HashTable.BucketIterator;
}

uint64_t _HashTable.UnsafeHandle.scale.getter(void *a1)
{
  return *a1 & 0x3FLL;
}

uint64_t _HashTable.UnsafeHandle.bucketCount.getter(void *a1)
{
  return 1 << *a1;
}

uint64_t _HashTable.UnsafeHandle.seed.getter(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _HashTable.UnsafeHandle.position(of:)(uint64_t a1, void *a2)
{
  return ((*a2 & 0x3FLL) * a1) >> 6;
}

uint64_t _HashTable.UnsafeHandle.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a3 + 8 * a1);
}

uint64_t _HashTable.UnsafeHandle.bucketMask.getter(void *a1)
{
  return ~(-1 << *a1);
}

void *_HashTable.UnsafeHandle.wordCount.getter(void *result)
{
  uint64_t v1 = (*result & 0x3FLL) << *result;
  BOOL v2 = __OFADD__(v1, 64);
  uint64_t v3 = v1 + 64;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v3 - 1;
    BOOL v4 = v3 < 1;
    uint64_t v6 = v3 + 62;
    if (!v4) {
      uint64_t v6 = v5;
    }
    return (void *)(v6 >> 6);
  }
  return result;
}

Swift::Int __swiftcall _HashTable.UnsafeHandle.word(after:)(Swift::Int after)
{
  if (__OFADD__(after, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = (*v1 & 0x3FLL) << *v1;
  BOOL v3 = __OFADD__(v2, 64);
  uint64_t v4 = v2 + 64;
  if (v3)
  {
LABEL_9:
    __break(1u);
    return after;
  }
  uint64_t v6 = v4 - 1;
  BOOL v5 = v4 < 1;
  uint64_t v7 = v4 + 62;
  if (!v5) {
    uint64_t v7 = v6;
  }
  if (after + 1 == v7 >> 6) {
    return 0;
  }
  return ++after;
}

Swift::Int_optional __swiftcall _HashTable.UnsafeHandle._value(forBucketContents:)(Swift::UInt64 forBucketContents)
{
  if (forBucketContents)
  {
    uint64_t v2 = -1 << *v1;
    Swift::UInt64 v3 = (v2 ^ ~forBucketContents) + ((uint64_t)v1[1] >> 6);
    if (v3 >= ~v2) {
      uint64_t v4 = ~v2;
    }
    else {
      uint64_t v4 = 0;
    }
    Swift::Int v5 = v3 - v4;
  }
  else
  {
    Swift::Int v5 = 0;
  }
  Swift::Bool v6 = forBucketContents == 0;
  Swift::Int v7 = v5;
  result.value = v7;
  result.is_nil = v6;
  return result;
}

Swift::UInt64 __swiftcall _HashTable.UnsafeHandle._bucketContents(for:)(Swift::Int_optional a1)
{
  if (a1.is_nil) {
    return 0;
  }
  else {
    return (-1 << *v1) ^ ~((((a1.value - ((uint64_t)v1[1] >> 6)) >> 63) & ~(-1 << *v1))
  }
                           + a1.value
                           - ((uint64_t)v1[1] >> 6));
}

uint64_t _HashTable.UnsafeHandle.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * a2) = result;
  return result;
}

uint64_t _HashTable.UnsafeHandle._header.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*_HashTable.UnsafeHandle._header.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.UnsafeHandle._buckets.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashTable.UnsafeHandle._buckets.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTable.UnsafeHandle._buckets.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.UnsafeHandle.reservedScale.getter(uint64_t a1)
{
  return *(void *)(a1 + 8) & 0x3FLL;
}

uint64_t _HashTable.UnsafeHandle.bias.getter(uint64_t a1)
{
  return *(uint64_t *)(a1 + 8) >> 6;
}

uint64_t _HashTable.UnsafeHandle.bias.setter(uint64_t result, void *a2)
{
  uint64_t v2 = 1 << *a2;
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (v4 & (result >> 63)) + result;
    if (v5 < v4) {
      uint64_t v4 = 0;
    }
    a2[1] = a2[1] & 0x3FLL | ((v5 - v4) << 6);
  }
  return result;
}

uint64_t *(*_HashTable.UnsafeHandle.bias.modify(uint64_t *a1, uint64_t a2))(uint64_t *result, char a2)
{
  *a1 = *(uint64_t *)(a2 + 8) >> 6;
  a1[1] = a2;
  return _HashTable.UnsafeHandle.bias.modify;
}

uint64_t *_HashTable.UnsafeHandle.bias.modify(uint64_t *result, char a2)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v3 = 1 << *v2;
  BOOL v4 = __OFSUB__(v3, 1);
  uint64_t v5 = v3 - 1;
  char v6 = v4;
  if (a2)
  {
    if ((v6 & 1) == 0) {
      goto LABEL_8;
    }
    __break(1u);
  }
  if (v6)
  {
    __break(1u);
    return result;
  }
LABEL_8:
  uint64_t v7 = (v5 & (*result >> 63)) + *result;
  if (v7 < v5) {
    uint64_t v5 = 0;
  }
  v2[1] = v2[1] & 0x3FLL | ((v7 - v5) << 6);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bitCount.getter(void *a1)
{
  return (*a1 & 0x3FLL) << *a1;
}

uint64_t _HashTable.UnsafeHandle.capacity.getter(uint64_t result)
{
  unint64_t v1 = *(void *)result & 0x3FLL;
  if (v1 < 5) {
    return 15;
  }
  double v2 = (double)(1 << v1) * 0.75;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18) {
    return (uint64_t)v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucket(after:)(uint64_t result, void *a2)
{
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else if (result + 1 == 1 << *a2)
  {
    return 0;
  }
  else
  {
    ++result;
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucket(before:)(uint64_t a1, void *a2)
{
  if (!a1) {
    a1 = 1 << *a2;
  }
  BOOL v2 = __OFSUB__(a1, 1);
  uint64_t result = a1 - 1;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall _HashTable.UnsafeHandle.word(before:)(Swift::Int before)
{
  if (before)
  {
    BOOL v2 = __OFSUB__(before--, 1);
    if (!v2) {
      return before;
    }
    __break(1u);
LABEL_9:
    __break(1u);
    return before;
  }
  uint64_t v3 = (*v1 & 0x3FLL) << *v1;
  BOOL v2 = __OFADD__(v3, 64);
  uint64_t v4 = v3 + 64;
  if (v2) {
    goto LABEL_9;
  }
  uint64_t v6 = v4 - 1;
  BOOL v5 = v4 < 1;
  uint64_t v7 = v4 + 62;
  if (!v5) {
    uint64_t v7 = v6;
  }
  return (v7 >> 6) - 1;
}

void *(*_HashTable.UnsafeHandle.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *result)
{
  a1[1] = a2;
  a1[2] = a4;
  *a1 = *(void *)(a4 + 8 * a2);
  return _HashTable.UnsafeHandle.subscript.modify;
}

void *_HashTable.UnsafeHandle.subscript.modify(void *result)
{
  *(void *)(result[2] + 8 * result[1]) = *result;
  return result;
}

uint64_t _HashTable.UnsafeHandle.subscript.getter(uint64_t result, void *a2, uint64_t a3)
{
  unint64_t v3 = *a2 & 0x3FLL;
  uint64_t v4 = (uint64_t)(v3 * result) >> 6;
  uint64_t v5 = *(void *)(a3 + 8 * v4) >> (v3 * result);
  unint64_t v6 = 64 - ((v3 * result) & 0x3F);
  if (v6 >= v3) {
    return v5 & ~(-1 << v3);
  }
  if (!__OFADD__(v3 << v3, 64))
  {
    uint64_t v7 = (v3 << v3) + 126;
    if ((uint64_t)((v3 << v3) + 64) >= 1) {
      uint64_t v7 = (v3 << v3) + 63;
    }
    if (v4 + 1 == v7 >> 6) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    uint64_t v5 = (*(void *)(a3 + 8 * v8) << v6) | v5 & ~(-1 << v6);
    return v5 & ~(-1 << v3);
  }
  __break(1u);
  return result;
}

unint64_t _HashTable.UnsafeHandle.subscript.setter(unint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = (*a3 & 0x3FLL) * a2;
  uint64_t v5 = v4 >> 6;
  *(void *)(a4 + 8 * (v4 >> 6)) = ((((-1 << *a3) + 1) << v4) - 1) & *(void *)(a4 + 8 * (v4 >> 6)) | (result << v4);
  unint64_t v6 = 64 - (v4 & 0x3F);
  unint64_t v7 = *a3 & 0x3FLL;
  if (v6 < v7)
  {
    unint64_t v8 = v7 << v7;
    BOOL v9 = __OFADD__(v8, 64);
    uint64_t v10 = v8 + 64;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = v10 - 1;
      BOOL v11 = v10 < 1;
      uint64_t v13 = v10 + 62;
      if (!v11) {
        uint64_t v13 = v12;
      }
      if (v5 + 1 == v13 >> 6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v5 + 1;
      }
      *(void *)(a4 + 8 * v14) = *(void *)(a4 + 8 * v14) & (-1 << (*a3 - v6)) | (result >> v6);
    }
  }
  return result;
}

unint64_t (*_HashTable.UnsafeHandle.subscript.modify(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4))(uint64_t a1)
{
  a1[2] = (uint64_t)a3;
  a1[3] = a4;
  a1[1] = a2;
  *a1 = _HashTable.UnsafeHandle.subscript.getter(a2, a3, a4);
  return _HashTable.UnsafeHandle.subscript.modify;
}

unint64_t _HashTable.UnsafeHandle.subscript.modify(uint64_t a1)
{
  return _HashTable.UnsafeHandle.subscript.setter(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24));
}

BOOL _HashTable.UnsafeHandle.isOccupied(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  return _HashTable.UnsafeHandle.subscript.getter(a1, a2, a3) != 0;
}

unint64_t _HashTable.UnsafeHandle.subscript.getter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = _HashTable.UnsafeHandle.subscript.getter(a1, a2, a3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = -1 << *a2;
  unint64_t v6 = (v5 ^ ~v4) + ((uint64_t)a2[1] >> 6);
  if (v6 >= ~v5) {
    uint64_t v7 = ~v5;
  }
  else {
    uint64_t v7 = 0;
  }
  return v6 - v7;
}

Swift::Int key path getter for _HashTable.UnsafeHandle.subscript(_:) : _HashTable.UnsafeHandle@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Swift::UInt64 v4 = _HashTable.UnsafeHandle.subscript.getter(*a2, *(void **)a1, *(void *)(a1 + 8));
  Swift::Int_optional v6 = _HashTable.UnsafeHandle._value(forBucketContents:)(v4);
  *(void *)a3 = v6.value;
  *(unsigned char *)(a3 + 8) = v6.is_nil;
  return v6.value;
}

unint64_t key path setter for _HashTable.UnsafeHandle.subscript(_:) : _HashTable.UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  v10.value = *(void *)a1;
  v10.is_nil = v4;
  Swift::UInt64 v7 = _HashTable.UnsafeHandle._bucketContents(for:)(v10);
  return _HashTable.UnsafeHandle.subscript.setter(v7, v3, v5, v6);
}

unint64_t _HashTable.UnsafeHandle.subscript.setter(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a2) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (-1 << *a4) ^ ~((((a1 - ((uint64_t)a4[1] >> 6)) >> 63) & ~(-1 << *a4)) + a1 - ((uint64_t)a4[1] >> 6));
  }
  return _HashTable.UnsafeHandle.subscript.setter(v5, a3, a4, a5);
}

void (*_HashTable.UnsafeHandle.subscript.modify(void *a1, uint64_t a2, void *a3, uint64_t a4))(uint64_t a1)
{
  unint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  _OWORD v8[3] = a3;
  v8[4] = a4;
  v8[2] = a2;
  uint64_t v9 = _HashTable.UnsafeHandle.subscript.getter(a2, a3, a4);
  if (v9)
  {
    uint64_t v10 = -1 << *a3;
    unint64_t v11 = (v10 ^ ~v9) + ((uint64_t)a3[1] >> 6);
    if (v11 >= ~v10) {
      uint64_t v12 = ~v10;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 - v12;
  }
  else
  {
    unint64_t v13 = 0;
  }
  *unint64_t v8 = v13;
  *((unsigned char *)v8 + 8) = v9 == 0;
  return _HashTable.UnsafeHandle.subscript.modify;
}

void _HashTable.UnsafeHandle.subscript.modify(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  BOOL v2 = *(void **)(*(void *)a1 + 24);
  if (*(unsigned char *)(*(void *)a1 + 8))
  {
    unint64_t v3 = 0;
  }
  else
  {
    uint64_t v4 = *v1 - ((uint64_t)v2[1] >> 6);
    unint64_t v3 = (-1 << *v2) ^ ~(((v4 >> 63) & ~(-1 << *v2)) + v4);
  }
  _HashTable.UnsafeHandle.subscript.setter(v3, v1[2], v2, v1[4]);
  free(v1);
}

uint64_t _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v47 = a2;
  uint64_t v49 = a6;
  uint64_t v12 = *(void *)(*(void *)(a6 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v43 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v42 = (char *)&v40 - v16;
  uint64_t v45 = v12;
  uint64_t v48 = a5;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v46 = a1;
  uint64_t v50 = a7;
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v22 = 1 << *a3;
  unint64_t v23 = v22 - 1;
  if (__OFSUB__(v22, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = v23 & result;
    uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(v23 & result, a3, a4);
    char v52 = a3;
    uint64_t v53 = a4;
    uint64_t v54 = v24;
    uint64_t v55 = result;
    uint64_t v56 = v25;
    uint64_t v57 = v26;
    char v58 = 0;
    if (result)
    {
      unint64_t v27 = (result ^ v23) + ((uint64_t)a3[1] >> 6);
      if (v27 >= v23) {
        unint64_t v28 = v23;
      }
      else {
        unint64_t v28 = 0;
      }
      unint64_t v29 = v27 - v28;
      char v30 = (void (**)(char *, uint64_t))(v13 + 8);
      uint64_t v41 = (void (**)(char *))(v18 + 16);
      char v40 = (void (**)(char *, uint64_t))(v18 + 8);
      uint64_t v31 = v42;
      while (1)
      {
        uint64_t v32 = v43;
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        uint64_t v33 = *v30;
        char v34 = v32;
        uint64_t v35 = AssociatedTypeWitness;
        (*v30)(v34, AssociatedTypeWitness);
        uint64_t v36 = dispatch thunk of Collection.subscript.read();
        (*v41)(v20);
        ((void (*)(char *, void))v36)(v51, 0);
        v33(v31, v35);
        LOBYTE(v36) = dispatch thunk of static Equatable.== infix(_:_:)();
        (*v40)(v20, v17);
        if (v36) {
          return v29;
        }
        _HashTable.BucketIterator.advance()();
        if (!v55) {
          break;
        }
        uint64_t v37 = -1 << *v52;
        unint64_t v38 = (v37 ^ ~v55) + ((uint64_t)v52[1] >> 6);
        if (v38 >= ~v37) {
          uint64_t v39 = ~v37;
        }
        else {
          uint64_t v39 = 0;
        }
        unint64_t v29 = v38 - v39;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0x3F;
  uint64_t v5 = 1 << *a2;
  unint64_t v6 = v4 << *a2;
  uint64_t v7 = v6 + 64;
  BOOL v8 = __OFADD__(v6, 64);
  uint64_t v10 = v7 - 1;
  BOOL v9 = v7 < 1;
  uint64_t v11 = v7 + 62;
  if (!v9) {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v11 >> 6;
  uint64_t v13 = *a2;
  while (1)
  {
    if (result) {
      uint64_t v16 = result;
    }
    else {
      uint64_t v16 = v5;
    }
    if (!result) {
      LOBYTE(v13) = v3;
    }
    uint64_t result = v16 - 1;
    if (__OFSUB__(v16, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v17 = (uint64_t)(result * v4) >> 6;
    uint64_t v15 = *(void *)(a3 + 8 * v17) >> (result * v4);
    unint64_t v18 = 64 - ((result * v4) & 0x3F);
    if (v18 < v4) {
      break;
    }
LABEL_11:
    if ((v15 & (v5 - 1)) == 0) {
      goto LABEL_21;
    }
  }
  if (!v8)
  {
    if (v17 + 1 == v12) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v17 + 1;
    }
    uint64_t v15 = (*(void *)(a3 + 8 * v14) << v18) | v15 & ~(-1 << v18);
    goto LABEL_11;
  }
  __break(1u);
LABEL_21:
  if (__OFADD__(result, 1))
  {
LABEL_26:
    __break(1u);
    return result;
  }
  if (result + 1 == 1 << v13) {
    return 0;
  }
  return ++result;
}

void specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v39 = a1;
  uint64_t v40 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  char v43 = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v9 = v40;
  if (!v40)
  {
LABEL_23:
    _HashTable.UnsafeHandle.subscript.setter(0, v6, v5, v4);
    return;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v5;
  uint64_t v31 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v6, v5, v4);
  while (1)
  {
    uint64_t v14 = v37;
    uint64_t v15 = -1 << *v37;
    unint64_t v16 = (v15 ^ ~v9) + ((uint64_t)v37[1] >> 6);
    uint64_t v17 = v16 >= ~v15 ? ~v15 : 0;
    uint64_t v18 = v16 - v17;
    if (v18 < 0) {
      break;
    }
    uint64_t v19 = *(void *)(a4 + 8);
    if ((unint64_t)v18 >= *(void *)(v19 + 16)) {
      goto LABEL_27;
    }
    uint64_t v20 = v19 + 56 * v18;
    Swift::UInt v21 = *(void *)(v20 + 32);
    uint64_t v22 = *(void *)(v20 + 40);
    Swift::UInt v35 = *(void *)(v20 + 64);
    int v23 = *(unsigned __int8 *)(v20 + 72);
    Swift::UInt v24 = *(void *)(v20 + 80);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v21);
    uint64_t v25 = *(void (**)(unsigned char *))(*(void *)v22 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v25(v36);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v23 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v35);
    }
    Hasher._combine(_:)(v24);
    Swift::Int v26 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = v33;
    uint64_t v27 = 1 << *v33;
    BOOL v28 = __OFSUB__(v27, 1);
    uint64_t v29 = v27 - 1;
    if (v28) {
      goto LABEL_28;
    }
    Swift::Int v30 = v29 & v26;
    if (v6 >= v31)
    {
      uint64_t v4 = v32;
      if (v30 < v31) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v4 = v32;
      if (v30 >= v31) {
        goto LABEL_3;
      }
    }
    if (v6 >= v30)
    {
LABEL_3:
      uint64_t v10 = -1 << *v14;
      unint64_t v11 = (v10 ^ ~v9) + ((uint64_t)v14[1] >> 6);
      if (v11 >= ~v10) {
        uint64_t v12 = v10 + 1;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = v11 - ((uint64_t)v33[1] >> 6) + v12;
      _HashTable.UnsafeHandle.subscript.setter(((v29 & (v13 >> 63)) + v13) ^ v29, v6, v33, v4);
      uint64_t v6 = v39;
    }
LABEL_7:
    _HashTable.BucketIterator.advance()();
    uint64_t v9 = v40;
    if (!v40) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::Int v29;
  unsigned char v30[8];
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t vars8;

  uint64_t v7 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  char v34 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  Swift::UInt v35 = v8;
  uint64_t v36 = v9;
  uint64_t v37 = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v10 = v34;
  if (!v34)
  {
    _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
    return;
  }
  unint64_t v11 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  while (1)
  {
    unint64_t v16 = v31;
    uint64_t v17 = -1 << *v31;
    uint64_t v18 = (v17 ^ ~v10) + ((uint64_t)v31[1] >> 6);
    uint64_t v19 = v18 >= ~v17 ? ~v17 : 0;
    uint64_t v20 = v18 - v19;
    if (v20 < 0) {
      break;
    }
    Swift::UInt v21 = *(void *)(a4 + 8);
    if ((unint64_t)v20 >= *(void *)(v21 + 16)) {
      goto LABEL_28;
    }
    outlined init with copy of WeakBox<SGEdge>(v21 + 8 * v20 + 32, (uint64_t)v30);
    Hasher.init(_seed:)();
    uint64_t v22 = MEMORY[0x261185960](v30);
    if (v22)
    {
      int v23 = (void *)v22;
      Hasher._combine(_:)(1u);
      Swift::UInt v24 = v23;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t v25 = Hasher._finalize()();
    outlined destroy of WeakBox<SGEdge>((uint64_t)v30);
    Swift::Int v26 = 1 << *a2;
    uint64_t v27 = __OFSUB__(v26, 1);
    BOOL v28 = v26 - 1;
    if (v27) {
      goto LABEL_29;
    }
    uint64_t v29 = v28 & v25;
    if (v7 >= v11)
    {
      if (v29 < v11) {
        goto LABEL_7;
      }
    }
    else if (v29 >= v11)
    {
      goto LABEL_3;
    }
    if (v7 >= v29)
    {
LABEL_3:
      uint64_t v12 = -1 << *v16;
      uint64_t v13 = (v12 ^ ~v10) + ((uint64_t)v16[1] >> 6);
      if (v13 >= ~v12) {
        uint64_t v14 = v12 + 1;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v13 - ((uint64_t)a2[1] >> 6) + v14;
      _HashTable.UnsafeHandle.subscript.setter(((v28 & (v15 >> 63)) + v15) ^ v28, v7, a2, a3);
      uint64_t v7 = v33;
    }
LABEL_7:
    _HashTable.BucketIterator.advance()();
    uint64_t v10 = v34;
    if (!v34)
    {
      _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

void specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v27 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  _HashTable.BucketIterator.advance()();
  uint64_t v8 = v27;
  if (!v27)
  {
    _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
    return;
  }
  uint64_t v9 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  while (1)
  {
    uint64_t v14 = -1 << *a2;
    unint64_t v15 = (v14 ^ ~v8) + (a2[1] >> 6);
    uint64_t v16 = v15 >= ~v14 ? ~v14 : 0;
    uint64_t v17 = v15 - v16;
    if (v17 < 0) {
      break;
    }
    uint64_t v18 = *(void *)(a4 + 8);
    if ((unint64_t)v17 >= *(void *)(v18 + 16)) {
      goto LABEL_24;
    }
    Swift::UInt v19 = *(void *)(v18 + 8 * v17 + 32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = 1 << *a2;
    BOOL v22 = __OFSUB__(v21, 1);
    uint64_t v23 = v21 - 1;
    if (v22) {
      goto LABEL_25;
    }
    Swift::Int v24 = v23 & v20;
    if (v7 >= v9)
    {
      if (v24 < v9) {
        goto LABEL_7;
      }
LABEL_18:
      if (v7 < v24) {
        goto LABEL_7;
      }
      goto LABEL_3;
    }
    if (v24 < v9) {
      goto LABEL_18;
    }
LABEL_3:
    uint64_t v10 = -1 << *a2;
    unint64_t v11 = (v10 ^ ~v8) + (a2[1] >> 6);
    if (v11 >= ~v10) {
      uint64_t v12 = v10 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v11 - (a2[1] >> 6) + v12;
    _HashTable.UnsafeHandle.subscript.setter(((v23 & (v13 >> 63)) + v13) ^ v23, v7, a2, a3);
    uint64_t v7 = a1;
LABEL_7:
    _HashTable.BucketIterator.advance()();
    uint64_t v8 = v27;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v25;
  uint64_t vars8;

  uint64_t v7 = a1;
  uint64_t v25 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  _HashTable.BucketIterator.advance()();
  uint64_t v8 = v25;
  if (!v25)
  {
    _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
    return;
  }
  uint64_t v9 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  while (1)
  {
    uint64_t v14 = -1 << *a2;
    unint64_t v15 = (v14 ^ ~v8) + (a2[1] >> 6);
    uint64_t v16 = v15 >= ~v14 ? ~v14 : 0;
    uint64_t v17 = v15 - v16;
    if (v17 < 0) {
      break;
    }
    if ((unint64_t)v17 >= *(void *)(*(void *)(a4 + 8) + 16)) {
      goto LABEL_24;
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v18 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    Swift::UInt v19 = 1 << *a2;
    Swift::Int v20 = __OFSUB__(v19, 1);
    uint64_t v21 = v19 - 1;
    if (v20) {
      goto LABEL_25;
    }
    BOOL v22 = v21 & v18;
    if (v7 >= v9)
    {
      if (v22 < v9) {
        goto LABEL_7;
      }
LABEL_18:
      if (v7 < v22) {
        goto LABEL_7;
      }
      goto LABEL_3;
    }
    if (v22 < v9) {
      goto LABEL_18;
    }
LABEL_3:
    uint64_t v10 = -1 << *a2;
    unint64_t v11 = (v10 ^ ~v8) + (a2[1] >> 6);
    if (v11 >= ~v10) {
      uint64_t v12 = v10 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v11 - (a2[1] >> 6) + v12;
    _HashTable.UnsafeHandle.subscript.setter(((v21 & (v13 >> 63)) + v13) ^ v21, v7, a2, a3);
    uint64_t v7 = a1;
LABEL_7:
    _HashTable.BucketIterator.advance()();
    uint64_t v8 = v25;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

unint64_t _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, uint64_t (*a2)(unint64_t, uint64_t), uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = a1;
  uint64_t v27 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a4, a5);
  _HashTable.BucketIterator.advance()();
  uint64_t v9 = v27;
  if (v27)
  {
    uint64_t v10 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v8, a4, a5);
    while (1)
    {
      uint64_t v15 = -1 << *a4;
      unint64_t v16 = (v15 ^ ~v9) + (a4[1] >> 6);
      if (v16 >= ~v15) {
        uint64_t v17 = ~v15;
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t result = a2(v16 - v17, *a4);
      uint64_t v19 = 1 << *a4;
      BOOL v20 = __OFSUB__(v19, 1);
      uint64_t v21 = v19 - 1;
      if (v20)
      {
        __break(1u);
        return result;
      }
      int64_t v22 = v21 & result;
      if (v8 >= v10)
      {
        if (v22 >= v10 && v8 >= v22)
        {
LABEL_3:
          uint64_t v11 = -1 << *a4;
          unint64_t v12 = (v11 ^ ~v9) + (a4[1] >> 6);
          if (v12 >= ~v11) {
            uint64_t v13 = v11 + 1;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = v12 - (a4[1] >> 6) + v13;
          _HashTable.UnsafeHandle.subscript.setter(((v21 & (v14 >> 63)) + v14) ^ v21, v8, a4, a5);
          uint64_t v8 = a1;
        }
      }
      else if (v22 >= v10 || v8 >= v22)
      {
        goto LABEL_3;
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v9 = v27;
    }
  }
  return _HashTable.UnsafeHandle.subscript.setter(0, v8, a4, a5);
}

uint64_t _HashTable.UnsafeHandle.adjustContents<A>(preparingForInsertionOfElementAtOffset:in:)(uint64_t a1, void (**a2)(char *, uint64_t), void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v187 = a7;
  long long v179 = a2;
  uint64_t v180 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v165 = type metadata accessor for PartialRangeFrom();
  uint64_t v164 = *(void *)(v165 - 8);
  MEMORY[0x270FA5388](v165);
  long long v163 = (char *)&v162 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v189 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  char v185 = (char *)&v162 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  Swift::String v186 = (char *)&v162 - v16;
  uint64_t v170 = v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  char v181 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  unint64_t v182 = (char *)&v162 - v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v22);
  long long v172 = (char *)&v162 - v23;
  uint64_t v174 = AssociatedConformanceWitness;
  uint64_t v168 = type metadata accessor for PartialRangeUpTo();
  uint64_t v167 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  long long v166 = (char *)&v162 - v24;
  uint64_t v171 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v173 = v22;
  uint64_t v188 = swift_getAssociatedTypeWitness();
  uint64_t v169 = *(void *)(v188 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v188);
  long long v183 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  long long v184 = (char *)&v162 - v28;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = (char *)&v162 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  char v34 = (char *)&v162 - v33;
  dispatch thunk of Collection.startIndex.getter();
  char v177 = v34;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v180 = v29;
  Swift::UInt v35 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  uint64_t v178 = AssociatedTypeWitness;
  uint64_t v176 = v29 + 8;
  long long v175 = v35;
  v35(v32, AssociatedTypeWitness);
  uint64_t v36 = dispatch thunk of Collection.count.getter();
  if (v36 >= 0) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = v36 + 1;
  }
  if (a1 < v37 >> 1)
  {
    _HashTable.Header.bias.setter(((uint64_t)a3[1] >> 6) + 1);
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a3 & 0x3FLL) / 3 < a1)
    {
      uint64_t v38 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a3, a4);
      uint64_t v39 = 0;
      Swift::String_optional v190 = a3;
      uint64_t v191 = a4;
      uint64_t v192 = 0;
      uint64_t v193 = v38;
      unint64_t v194 = v40;
      uint64_t v195 = v41;
      char v196 = 0;
      while (1)
      {
        if (v193)
        {
          uint64_t v42 = v190;
          unint64_t v43 = ~(-1 << *v190);
          uint64_t v44 = (uint64_t)v190[1] >> 6;
          unint64_t v45 = v44 + (v193 ^ v43);
          uint64_t v46 = v45 >= v43 ? ~(-1 << *v190) : 0;
          uint64_t v47 = v45 - v46;
          if (v47 <= a1)
          {
            BOOL v48 = __OFSUB__(v47, 1);
            uint64_t v49 = v47 - 1;
            if (v48) {
              goto LABEL_150;
            }
            uint64_t v50 = *v190 & 0x3FLL;
            uint64_t v51 = v191;
            uint64_t v52 = ((v43 & ((v49 - v44) >> 63)) + v49 - v44) ^ v43;
            unint64_t v53 = v52 ^ v193;
            char v54 = v50 * v39;
            uint64_t v55 = (v50 * v39) >> 6;
            *(void *)(v191 + 8 * v55) ^= (v52 ^ v193) << v54;
            unint64_t v56 = 64 - (v54 & 0x3F);
            unint64_t v57 = *v42 & 0x3FLL;
            if (v56 < v57)
            {
              unint64_t v58 = v57 << v57;
              BOOL v48 = __OFADD__(v58, 64);
              uint64_t v59 = v58 + 64;
              if (v48) {
                goto LABEL_152;
              }
              uint64_t v61 = v59 - 1;
              BOOL v60 = v59 < 1;
              uint64_t v62 = v59 + 62;
              if (!v60) {
                uint64_t v62 = v61;
              }
              if (v55 + 1 == v62 >> 6) {
                uint64_t v63 = 0;
              }
              else {
                uint64_t v63 = v55 + 1;
              }
              *(void *)(v51 + 8 * v63) ^= v53 >> v56;
            }
            uint64_t v193 = v52;
          }
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v39 = v192;
        if (!v192) {
          return v175(v177, v178);
        }
      }
    }
    char v90 = v177;
    uint64_t v91 = v178;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      char v92 = v166;
      (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v166, v90, v91);
      uint64_t v93 = v168;
      swift_getWitnessTable();
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v92, v93);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v94 = swift_getAssociatedConformanceWitness();
      uint64_t v95 = v182;
      char v185 = (char *)v94;
      dispatch thunk of IteratorProtocol.next()();
      char v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48);
      uint64_t v97 = v170;
      long long v183 = (char *)(v189 + 48);
      char v181 = v96;
      if (v96(v95, 1, v170) != 1)
      {
        uint64_t v98 = *(void *)(v189 + 32);
        v189 += 32;
        long long v179 = (void (**)(char *, uint64_t))(v189 - 24);
        uint64_t v180 = v98;
        uint64_t v99 = 1;
        do
        {
          ((void (*)(char *, char *, uint64_t))v180)(v186, v95, v97);
          uint64_t v100 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v101 = *a3;
          uint64_t v102 = 1 << *a3;
          unint64_t v103 = v102 - 1;
          if (__OFSUB__(v102, 1)) {
            goto LABEL_144;
          }
          uint64_t v104 = v103 & v100;
          uint64_t v105 = _HashTable.UnsafeHandle._startIterator(bucket:)(v103 & v100, a3, a4);
          Swift::String_optional v190 = a3;
          uint64_t v191 = a4;
          if (!v105) {
            goto LABEL_158;
          }
          uint64_t v108 = (uint64_t)a3[1] >> 6;
          unint64_t v109 = v108 + (v105 ^ v103);
          if (v109 >= v103) {
            uint64_t v110 = v102 - 1;
          }
          else {
            uint64_t v110 = 0;
          }
          unint64_t v111 = v109 - v110;
          if (v109 - v110 != v99)
          {
            char v112 = 0;
            uint64_t v113 = v101 & 0x3F;
            BOOL v114 = __OFADD__(v113 << v113, 64);
            uint64_t v115 = (v113 << v113) + 126;
            if ((v113 << v113) + 64 >= 1) {
              uint64_t v115 = (v113 << v113) + 63;
            }
            uint64_t v116 = v115 >> 6;
            while (1)
            {
              if (++v104 == v102)
              {
                if (v112) {
                  goto LABEL_160;
                }
                uint64_t v104 = 0;
                char v112 = 1;
              }
              if (v107 >= v113)
              {
                BOOL v48 = __OFSUB__(v107, v113);
                v107 -= v113;
                if (v48)
                {
                  __break(1u);
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
                  goto LABEL_141;
                }
                unint64_t v123 = v106 >> v113;
              }
              else
              {
                uint64_t v117 = (v104 * v113) >> 6;
                if (v107)
                {
                  if (v114) {
                    goto LABEL_142;
                  }
                  if (v117 + 1 == v116) {
                    uint64_t v117 = 0;
                  }
                  else {
                    ++v117;
                  }
                }
                uint64_t v118 = v113 - v107;
                if (__OFSUB__(v113, v107)) {
                  goto LABEL_137;
                }
                if (v117 == 2 && v113 == 5) {
                  uint64_t v120 = 32;
                }
                else {
                  uint64_t v120 = 64;
                }
                BOOL v48 = __OFSUB__(v120, v118);
                uint64_t v121 = v120 - v118;
                if (v48) {
                  goto LABEL_138;
                }
                unint64_t v122 = *(void *)(a4 + 8 * v117);
                v106 |= v122 << v107;
                unint64_t v123 = v122 >> v118;
                uint64_t v107 = v121;
              }
              uint64_t v105 = v106 & v103;
              if ((v106 & v103) == 0) {
                goto LABEL_158;
              }
              unint64_t v124 = v108 + (v105 ^ v103);
              if (v124 >= v103) {
                uint64_t v125 = v102 - 1;
              }
              else {
                uint64_t v125 = 0;
              }
              unint64_t v111 = v124 - v125;
              unint64_t v106 = v123;
              if (v111 == v99)
              {
                unint64_t v106 = v123;
                goto LABEL_85;
              }
            }
          }
          char v112 = 0;
LABEL_85:
          char v196 = v112;
          uint64_t v192 = v104;
          uint64_t v193 = v105;
          unint64_t v194 = v106;
          uint64_t v195 = v107;
          uint64_t v95 = v182;
          if (__OFSUB__(v111, 1)) {
            goto LABEL_146;
          }
          _HashTable.BucketIterator.currentValue.setter(v111 - 1, 0);
          (*v179)(v186, v97);
          BOOL v48 = __OFADD__(v99++, 1);
          if (v48) {
            goto LABEL_147;
          }
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v181(v95, 1, v97) != 1);
      }
      (*(void (**)(char *, uint64_t))(v169 + 8))(v184, v188);
      return v175(v177, v178);
    }
    goto LABEL_156;
  }
  uint64_t v64 = dispatch thunk of Collection.count.getter();
  uint64_t v65 = v64 - a1;
  if (__OFSUB__(v64, a1)) {
    goto LABEL_154;
  }
  if (__OFSUB__(v65, 1))
  {
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  if (specialized static _HashTable.maximumCapacity(forScale:)(*a3 & 0x3FLL) / 3 < v65 - 1)
  {
    uint64_t v66 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a3, a4);
    uint64_t v67 = 0;
    Swift::String_optional v190 = a3;
    uint64_t v191 = a4;
    uint64_t v192 = 0;
    uint64_t v193 = v66;
    unint64_t v194 = v68;
    uint64_t v195 = v69;
    char v196 = 0;
    while (1)
    {
      if (v193)
      {
        char v70 = v190;
        unint64_t v71 = ~(-1 << *v190);
        uint64_t v72 = (uint64_t)v190[1] >> 6;
        unint64_t v73 = v72 + (v193 ^ v71);
        uint64_t v74 = v73 >= v71 ? ~(-1 << *v190) : 0;
        uint64_t v75 = v73 - v74;
        if (v75 >= a1)
        {
          BOOL v48 = __OFADD__(v75, 1);
          uint64_t v76 = v75 + 1;
          if (v48) {
            goto LABEL_151;
          }
          uint64_t v77 = *v190 & 0x3FLL;
          uint64_t v78 = v191;
          uint64_t v79 = ((v71 & ((v76 - v72) >> 63)) + v76 - v72) ^ v71;
          unint64_t v80 = v79 ^ v193;
          char v81 = v77 * v67;
          uint64_t v82 = (v77 * v67) >> 6;
          *(void *)(v191 + 8 * v82) ^= (v79 ^ v193) << v81;
          unint64_t v83 = 64 - (v81 & 0x3F);
          unint64_t v84 = *v70 & 0x3FLL;
          if (v83 < v84)
          {
            unint64_t v85 = v84 << v84;
            BOOL v48 = __OFADD__(v85, 64);
            uint64_t v86 = v85 + 64;
            if (v48) {
              goto LABEL_153;
            }
            uint64_t v87 = v86 - 1;
            BOOL v60 = v86 < 1;
            uint64_t v88 = v86 + 62;
            if (!v60) {
              uint64_t v88 = v87;
            }
            if (v82 + 1 == v88 >> 6) {
              uint64_t v89 = 0;
            }
            else {
              uint64_t v89 = v82 + 1;
            }
            *(void *)(v78 + 8 * v89) ^= v80 >> v83;
          }
          uint64_t v193 = v79;
        }
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v67 = v192;
      if (!v192) {
        return v175(v177, v178);
      }
    }
  }
  long long v126 = v177;
  uint64_t v127 = v178;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_157;
  }
  long long v128 = v163;
  (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v163, v126, v127);
  uint64_t v129 = v165;
  swift_getWitnessTable();
  Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v164 + 8))(v128, v129);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v130 = swift_getAssociatedConformanceWitness();
  uint64_t v131 = v181;
  Swift::String v186 = (char *)v130;
  dispatch thunk of IteratorProtocol.next()();
  long long v132 = *(char **)(v189 + 48);
  uint64_t v133 = v170;
  long long v184 = (char *)(v189 + 48);
  unint64_t v182 = v132;
  if (((unsigned int (*)(void, uint64_t, uint64_t))v132)(v131, 1, v170) == 1)
  {
LABEL_134:
    (*(void (**)(char *, uint64_t))(v169 + 8))(v183, v188);
    return v175(v177, v178);
  }
  uint64_t v134 = *(void *)(v189 + 32);
  v189 += 32;
  long long v179 = (void (**)(char *, uint64_t))(v189 - 24);
  uint64_t v180 = v134;
  while (1)
  {
    ((void (*)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))v180)(v185, v131, v133);
    uint64_t v135 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v136 = *a3;
    uint64_t v137 = 1 << *a3;
    unint64_t v138 = v137 - 1;
    if (__OFSUB__(v137, 1)) {
      goto LABEL_145;
    }
    uint64_t v139 = v138 & v135;
    uint64_t v140 = _HashTable.UnsafeHandle._startIterator(bucket:)(v138 & v135, a3, a4);
    Swift::String_optional v190 = a3;
    uint64_t v191 = a4;
    if (!v140) {
      break;
    }
    uint64_t v143 = (uint64_t)a3[1] >> 6;
    unint64_t v144 = v143 + (v140 ^ v138);
    if (v144 >= v138) {
      uint64_t v145 = v137 - 1;
    }
    else {
      uint64_t v145 = 0;
    }
    unint64_t v146 = v144 - v145;
    if (v144 - v145 != a1)
    {
      char v147 = 0;
      uint64_t v148 = v136 & 0x3F;
      BOOL v149 = __OFADD__(v148 << v148, 64);
      uint64_t v150 = (v148 << v148) + 126;
      if ((v148 << v148) + 64 >= 1) {
        uint64_t v150 = (v148 << v148) + 63;
      }
      uint64_t v151 = v150 >> 6;
      while (1)
      {
        if (++v139 == v137)
        {
          if (v147) {
            goto LABEL_160;
          }
          uint64_t v139 = 0;
          char v147 = 1;
        }
        if (v142 >= v148)
        {
          BOOL v48 = __OFSUB__(v142, v148);
          v142 -= v148;
          if (v48) {
            goto LABEL_139;
          }
          unint64_t v158 = v141 >> v148;
        }
        else
        {
          uint64_t v152 = (v139 * v148) >> 6;
          if (v142)
          {
            if (v149) {
              goto LABEL_143;
            }
            if (v152 + 1 == v151) {
              uint64_t v152 = 0;
            }
            else {
              ++v152;
            }
          }
          uint64_t v153 = v148 - v142;
          if (__OFSUB__(v148, v142)) {
            goto LABEL_140;
          }
          if (v152 == 2 && v148 == 5) {
            uint64_t v155 = 32;
          }
          else {
            uint64_t v155 = 64;
          }
          BOOL v48 = __OFSUB__(v155, v153);
          uint64_t v156 = v155 - v153;
          if (v48)
          {
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
            goto LABEL_155;
          }
          unint64_t v157 = *(void *)(a4 + 8 * v152);
          v141 |= v157 << v142;
          unint64_t v158 = v157 >> v153;
          uint64_t v142 = v156;
        }
        uint64_t v140 = v141 & v138;
        if ((v141 & v138) == 0) {
          goto LABEL_159;
        }
        unint64_t v159 = v143 + (v140 ^ v138);
        if (v159 >= v138) {
          uint64_t v160 = v137 - 1;
        }
        else {
          uint64_t v160 = 0;
        }
        unint64_t v146 = v159 - v160;
        unint64_t v141 = v158;
        if (v146 == a1)
        {
          unint64_t v141 = v158;
          goto LABEL_131;
        }
      }
    }
    char v147 = 0;
LABEL_131:
    char v196 = v147;
    uint64_t v192 = v139;
    uint64_t v193 = v140;
    unint64_t v194 = v141;
    uint64_t v195 = v142;
    uint64_t v131 = v181;
    if (__OFADD__(v146, 1)) {
      goto LABEL_148;
    }
    _HashTable.BucketIterator.currentValue.setter(v146 + 1, 0);
    (*v179)(v185, v133);
    BOOL v48 = __OFADD__(a1++, 1);
    if (v48) {
      goto LABEL_149;
    }
    dispatch thunk of IteratorProtocol.next()();
    if (((unsigned int (*)(void, uint64_t, uint64_t))v182)(v131, 1, v133) == 1) {
      goto LABEL_134;
    }
  }
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a7;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v44 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v46 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v40 - v13;
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Range();
  uint64_t v49 = *(void *)(v15 - 8);
  uint64_t v50 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  unint64_t v45 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v51 = a2;
  uint64_t v43 = a5;
  uint64_t v24 = a1;
  dispatch thunk of Collection.index(after:)();
  uint64_t v25 = v23;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v41 = v20;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v29 = v21;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    v30(v14, v24, AssociatedTypeWitness);
    unint64_t v40 = v28;
    uint64_t v42 = v25;
    v30(v28, (uint64_t)v25, AssociatedTypeWitness);
    uint64_t v31 = v46;
    uint64_t v32 = &v46[*(int *)(v27 + 48)];
    v30(v46, (uint64_t)v14, AssociatedTypeWitness);
    v30(v32, (uint64_t)v28, AssociatedTypeWitness);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    char v34 = v45;
    v33(v45, v31, AssociatedTypeWitness);
    Swift::UInt v35 = *(void (**)(char *, uint64_t))(v29 + 8);
    v35(v32, AssociatedTypeWitness);
    uint64_t v36 = &v31[*(int *)(v27 + 48)];
    v33(v31, v14, AssociatedTypeWitness);
    v33(v36, v40, AssociatedTypeWitness);
    uint64_t v37 = v50;
    v33(&v34[*(int *)(v50 + 36)], v36, AssociatedTypeWitness);
    v35(v31, AssociatedTypeWitness);
    uint64_t v38 = v49;
    uint64_t v39 = (uint64_t)v41;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v41, v34, v37);
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v39, v51, v52, v53, v43, v44, v48);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
    return ((uint64_t (*)(char *, uint64_t))v35)(v42, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v185 = a7;
  uint64_t v189 = a4;
  uint64_t v176 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = (void (*)(char *, char *, uint64_t))swift_getAssociatedConformanceWitness();
  uint64_t v168 = type metadata accessor for PartialRangeUpTo();
  uint64_t v167 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  uint64_t v169 = (char *)&v162 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v188 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  long long v184 = (char *)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v183 = (char *)&v162 - v14;
  uint64_t v186 = v15;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v180 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v179 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v162 - v19);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v20);
  uint64_t v173 = (char *)&v162 - v21;
  uint64_t v164 = type metadata accessor for PartialRangeFrom();
  uint64_t v163 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  long long v166 = (char *)&v162 - v22;
  uint64_t v172 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v174 = v20;
  uint64_t v187 = swift_getAssociatedTypeWitness();
  uint64_t v171 = *(void *)(v187 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v187);
  unint64_t v182 = (char *)&v162 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  char v181 = (char *)&v162 - v26;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v162 - v28;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v30 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t v175 = v27;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v27 + 8);
  v31(v29, AssociatedTypeWitness);
  uint64_t v32 = *(int *)(type metadata accessor for Range() + 36);
  uint64_t v170 = a1;
  uint64_t v33 = a1 + v32;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v165 = v33;
  uint64_t v177 = a2;
  uint64_t v34 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  v31(v29, AssociatedTypeWitness);
  uint64_t v35 = v34 - v30;
  if (__OFSUB__(v34, v30)) {
    goto LABEL_157;
  }
  if (v35 < 1) {
    return;
  }
  uint64_t v36 = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(v36, v35)) {
    goto LABEL_159;
  }
  if (v30 < (v36 - v35) / 2)
  {
    uint64_t v37 = v176;
    if (v30 >= specialized static _HashTable.maximumCapacity(forScale:)(*v176 & 0x3FLL) / 3)
    {
      uint64_t v111 = v189;
      uint64_t v112 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v37, v189);
      uint64_t v113 = 0;
      Swift::String_optional v190 = v37;
      uint64_t v191 = v111;
      uint64_t v192 = 0;
      uint64_t v193 = v112;
      unint64_t v194 = v114;
      uint64_t v195 = v115;
      uint64_t v76 = -1;
      uint64_t v34 = 64;
      char v196 = 0;
      while (1)
      {
        if (v193)
        {
          uint64_t v120 = v190;
          unint64_t v121 = ~(-1 << *v190);
          uint64_t v122 = (uint64_t)v190[1] >> 6;
          unint64_t v123 = v122 + (v193 ^ v121);
          uint64_t v124 = v123 >= v121 ? ~(-1 << *v190) : 0;
          int64_t v125 = v123 - v124;
          if (v125 < v30)
          {
            BOOL v69 = __OFADD__(v125, v35);
            int64_t v126 = v125 + v35;
            if (v69) {
              goto LABEL_155;
            }
            uint64_t v127 = *v190 & 0x3FLL;
            uint64_t v128 = v191;
            uint64_t v129 = ((v121 & ((v126 - v122) >> 63)) + v126 - v122) ^ v121;
            unint64_t v130 = v129 ^ v193;
            char v131 = v127 * v113;
            uint64_t v132 = (v127 * v113) >> 6;
            *(void *)(v191 + 8 * v132) ^= (v129 ^ v193) << v131;
            unint64_t v133 = 64 - (v131 & 0x3F);
            unint64_t v134 = *v120 & 0x3FLL;
            if (v133 < v134)
            {
              unint64_t v135 = v134 << v134;
              BOOL v69 = __OFADD__(v135, 64);
              uint64_t v136 = v135 + 64;
              if (v69)
              {
                __break(1u);
                goto LABEL_124;
              }
              uint64_t v117 = v136 - 1;
              BOOL v116 = v136 < 1;
              uint64_t v118 = v136 + 62;
              if (!v116) {
                uint64_t v118 = v117;
              }
              if (v132 + 1 == v118 >> 6) {
                uint64_t v119 = 0;
              }
              else {
                uint64_t v119 = v132 + 1;
              }
              *(void *)(v128 + 8 * v119) ^= v130 >> v133;
            }
            uint64_t v193 = v129;
          }
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v113 = v192;
        if (!v192) {
          goto LABEL_53;
        }
      }
    }
    uint64_t v38 = v169;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v169, v170, AssociatedTypeWitness);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
      goto LABEL_162;
    }
    uint64_t v39 = v168;
    swift_getWitnessTable();
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v167 + 8))(v38, v39);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v40 = swift_getAssociatedConformanceWitness();
    uint64_t v41 = v180;
    long long v183 = (char *)v40;
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48);
    uint64_t v43 = v186;
    char v181 = (char *)(v188 + 48);
    long long v179 = v42;
    if (v42(v41, 1, v186) != 1)
    {
      uint64_t v44 = 0;
      uint64_t AssociatedConformanceWitness = *(void (**)(char *, char *, uint64_t))(v188 + 32);
      v188 += 32;
      unint64_t v45 = (void (**)(char *, uint64_t))(v188 - 24);
      do
      {
        AssociatedConformanceWitness(v184, v41, v43);
        uint64_t v46 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v47 = *v37;
        uint64_t v48 = 1 << *v37;
        unint64_t v49 = v48 - 1;
        if (__OFSUB__(v48, 1)) {
          goto LABEL_149;
        }
        uint64_t v50 = v49 & v46;
        uint64_t v51 = v189;
        uint64_t v52 = _HashTable.UnsafeHandle._startIterator(bucket:)(v49 & v46, v37, v189);
        Swift::String_optional v190 = v37;
        uint64_t v191 = v51;
        uint64_t v192 = v50;
        uint64_t v193 = v52;
        unint64_t v194 = v53;
        uint64_t v195 = v54;
        char v196 = 0;
        if (v52)
        {
          uint64_t v55 = (uint64_t)v37[1] >> 6;
          unint64_t v56 = v55 + (v52 ^ v49);
          if (v56 >= v49) {
            uint64_t v57 = v48 - 1;
          }
          else {
            uint64_t v57 = 0;
          }
          if (v56 - v57 != v44)
          {
            char v58 = 0;
            uint64_t v59 = v47 & 0x3F;
            BOOL v60 = __OFADD__(v59 << v59, 64);
            uint64_t v61 = (v59 << v59) + 126;
            if ((v59 << v59) + 64 >= 1) {
              uint64_t v61 = (v59 << v59) + 63;
            }
            uint64_t v62 = v61 >> 6;
            while (1)
            {
              if (++v50 == v48)
              {
                if (v58) {
                  goto LABEL_164;
                }
                uint64_t v50 = 0;
                char v58 = 1;
              }
              if (v54 >= v59)
              {
                BOOL v69 = __OFSUB__(v54, v59);
                v54 -= v59;
                if (v69)
                {
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
                  goto LABEL_146;
                }
                unint64_t v73 = v53 >> v59;
                uint64_t v52 = v53 & v49;
                if ((v53 & v49) == 0) {
                  goto LABEL_47;
                }
              }
              else
              {
                uint64_t v65 = (v50 * v59) >> 6;
                if (v54)
                {
                  if (v60) {
                    goto LABEL_147;
                  }
                  if (v65 + 1 == v62) {
                    uint64_t v65 = 0;
                  }
                  else {
                    ++v65;
                  }
                }
                uint64_t v66 = v59 - v54;
                if (__OFSUB__(v59, v54)) {
                  goto LABEL_142;
                }
                if (v65 == 2 && v59 == 5) {
                  uint64_t v68 = 32;
                }
                else {
                  uint64_t v68 = 64;
                }
                BOOL v69 = __OFSUB__(v68, v66);
                uint64_t v70 = v68 - v66;
                if (v69) {
                  goto LABEL_144;
                }
                unint64_t v71 = *(void *)(v189 + 8 * v65);
                uint64_t v72 = (v71 << v54) | v53;
                unint64_t v73 = v71 >> v66;
                uint64_t v54 = v70;
                uint64_t v52 = v72 & v49;
                if ((v72 & v49) == 0)
                {
LABEL_47:
                  unint64_t v53 = v73;
                  goto LABEL_48;
                }
              }
              unint64_t v63 = v55 + (v52 ^ v49);
              if (v63 >= v49) {
                uint64_t v64 = v48 - 1;
              }
              else {
                uint64_t v64 = 0;
              }
              unint64_t v53 = v73;
              if (v63 - v64 == v44) {
                goto LABEL_47;
              }
            }
          }
          char v58 = 0;
LABEL_48:
          char v196 = v58;
          uint64_t v192 = v50;
          uint64_t v193 = v52;
          unint64_t v194 = v53;
          uint64_t v195 = v54;
        }
        if (__OFADD__(v44, v35)) {
          goto LABEL_151;
        }
        _HashTable.BucketIterator.currentValue.setter(v44 + v35, 0);
        uint64_t v43 = v186;
        (*v45)(v184, v186);
        BOOL v69 = __OFADD__(v44++, 1);
        if (v69) {
          goto LABEL_152;
        }
        uint64_t v41 = v180;
        dispatch thunk of IteratorProtocol.next()();
      }
      while (v179(v41, 1, v43) != 1);
    }
    (*(void (**)(char *, uint64_t))(v171 + 8))(v182, v187);
LABEL_53:
    uint64_t v74 = (uint64_t)v37[1] >> 6;
    if (__OFSUB__(v74, v35)) {
      goto LABEL_161;
    }
    _HashTable.Header.bias.setter(v74 - v35);
    return;
  }
  uint64_t v75 = dispatch thunk of Collection.count.getter();
  uint64_t v76 = (uint64_t)v176;
  if (__OFSUB__(v75, v34)) {
    goto LABEL_160;
  }
  if (v75 - v34 >= specialized static _HashTable.maximumCapacity(forScale:)(*v176 & 0x3FLL) / 3)
  {
LABEL_124:
    uint64_t v137 = v189;
    uint64_t v138 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, (void *)v76, v189);
    uint64_t v139 = 0;
    Swift::String_optional v190 = (void *)v76;
    uint64_t v191 = v137;
    uint64_t v192 = 0;
    uint64_t v193 = v138;
    unint64_t v194 = v140;
    uint64_t v195 = v141;
    char v196 = 0;
    while (1)
    {
      if (v193)
      {
        uint64_t v142 = v190;
        unint64_t v143 = ~(-1 << *v190);
        uint64_t v144 = (uint64_t)v190[1] >> 6;
        unint64_t v145 = v144 + (v193 ^ v143);
        uint64_t v146 = v145 >= v143 ? ~(-1 << *v190) : 0;
        int64_t v147 = v145 - v146;
        if (v147 >= v34)
        {
          BOOL v69 = __OFSUB__(v147, v35);
          int64_t v148 = v147 - v35;
          if (v69) {
            goto LABEL_156;
          }
          uint64_t v149 = *v190 & 0x3FLL;
          uint64_t v150 = v191;
          uint64_t v151 = ((v143 & ((v148 - v144) >> 63)) + v148 - v144) ^ v143;
          unint64_t v152 = v151 ^ v193;
          char v153 = v149 * v139;
          uint64_t v154 = (v149 * v139) >> 6;
          *(void *)(v191 + 8 * v154) ^= (v151 ^ v193) << v153;
          unint64_t v155 = 64 - (v153 & 0x3F);
          unint64_t v156 = *v142 & 0x3FLL;
          if (v155 < v156)
          {
            unint64_t v157 = v156 << v156;
            BOOL v69 = __OFADD__(v157, 64);
            uint64_t v158 = v157 + 64;
            if (v69) {
              goto LABEL_158;
            }
            uint64_t v159 = v158 - 1;
            BOOL v116 = v158 < 1;
            uint64_t v160 = v158 + 62;
            if (!v116) {
              uint64_t v160 = v159;
            }
            if (v154 + 1 == v160 >> 6) {
              uint64_t v161 = 0;
            }
            else {
              uint64_t v161 = v154 + 1;
            }
            *(void *)(v150 + 8 * v161) ^= v152 >> v155;
          }
          uint64_t v193 = v151;
        }
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v139 = v192;
      if (!v192) {
        return;
      }
    }
  }
  uint64_t v77 = v166;
  (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v166, v165, AssociatedTypeWitness);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_163;
  }
  uint64_t v78 = v164;
  swift_getWitnessTable();
  Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v163 + 8))(v77, v78);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v79 = swift_getAssociatedConformanceWitness();
  unint64_t v80 = (char *)v179;
  long long v184 = (char *)v79;
  dispatch thunk of IteratorProtocol.next()();
  char v81 = *(char **)(v188 + 48);
  uint64_t v82 = v186;
  unint64_t v182 = (char *)(v188 + 48);
  uint64_t v180 = v81;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v81)(v80, 1, v186) == 1)
  {
LABEL_103:
    (*(void (**)(char *, uint64_t))(v171 + 8))(v181, v187);
    return;
  }
  uint64_t AssociatedConformanceWitness = *(void (**)(char *, char *, uint64_t))(v188 + 32);
  v188 += 32;
  unint64_t v83 = (void (**)(char *, uint64_t))(v188 - 24);
  while (1)
  {
    AssociatedConformanceWitness(v183, v80, v82);
    uint64_t v84 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v85 = *(void *)v76;
    uint64_t v86 = 1 << *(void *)v76;
    unint64_t v87 = v86 - 1;
    if (__OFSUB__(v86, 1)) {
      goto LABEL_150;
    }
    uint64_t v88 = v87 & v84;
    uint64_t v89 = v189;
    uint64_t v90 = _HashTable.UnsafeHandle._startIterator(bucket:)(v87 & v84, (void *)v76, v189);
    Swift::String_optional v190 = (void *)v76;
    uint64_t v191 = v89;
    uint64_t v192 = v88;
    uint64_t v193 = v90;
    unint64_t v194 = v91;
    uint64_t v195 = v92;
    char v196 = 0;
    if (!v90) {
      goto LABEL_100;
    }
    uint64_t v93 = *(uint64_t *)(v76 + 8) >> 6;
    unint64_t v94 = v93 + (v90 ^ v87);
    uint64_t v95 = v94 >= v87 ? v86 - 1 : 0;
    if (v94 - v95 != v34) {
      break;
    }
    char v96 = 0;
LABEL_99:
    char v196 = v96;
    uint64_t v192 = v88;
    uint64_t v193 = v90;
    unint64_t v194 = v91;
    uint64_t v195 = v92;
LABEL_100:
    if (__OFSUB__(v34, v35)) {
      goto LABEL_153;
    }
    _HashTable.BucketIterator.currentValue.setter(v34 - v35, 0);
    uint64_t v82 = v186;
    (*v83)(v183, v186);
    BOOL v69 = __OFADD__(v34++, 1);
    if (v69) {
      goto LABEL_154;
    }
    unint64_t v80 = (char *)v179;
    dispatch thunk of IteratorProtocol.next()();
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v180)(v80, 1, v82) == 1) {
      goto LABEL_103;
    }
  }
  char v96 = 0;
  uint64_t v97 = v85 & 0x3F;
  BOOL v98 = __OFADD__(v97 << v97, 64);
  uint64_t v99 = (v97 << v97) + 126;
  if ((v97 << v97) + 64 >= 1) {
    uint64_t v99 = (v97 << v97) + 63;
  }
  uint64_t v100 = v99 >> 6;
  while (1)
  {
    if (++v88 == v86)
    {
      if (v96) {
        goto LABEL_164;
      }
      uint64_t v88 = 0;
      char v96 = 1;
    }
    if (v92 < v97) {
      break;
    }
    BOOL v69 = __OFSUB__(v92, v97);
    v92 -= v97;
    if (v69) {
      goto LABEL_143;
    }
    unint64_t v110 = v91 >> v97;
    uint64_t v90 = v91 & v87;
    if ((v91 & v87) == 0)
    {
LABEL_98:
      unint64_t v91 = v110;
      goto LABEL_99;
    }
LABEL_73:
    unint64_t v101 = v93 + (v90 ^ v87);
    if (v101 >= v87) {
      uint64_t v102 = v86 - 1;
    }
    else {
      uint64_t v102 = 0;
    }
    unint64_t v91 = v110;
    if (v101 - v102 == v34) {
      goto LABEL_98;
    }
  }
  uint64_t v103 = (v88 * v97) >> 6;
  if (v92)
  {
    if (v98) {
      goto LABEL_148;
    }
    if (v103 + 1 == v100) {
      uint64_t v103 = 0;
    }
    else {
      ++v103;
    }
  }
  uint64_t v104 = v97 - v92;
  if (__OFSUB__(v97, v92)) {
    goto LABEL_145;
  }
  if (v103 == 2 && v97 == 5) {
    uint64_t v106 = 32;
  }
  else {
    uint64_t v106 = 64;
  }
  BOOL v69 = __OFSUB__(v106, v104);
  uint64_t v107 = v106 - v104;
  if (!v69)
  {
    unint64_t v108 = *(void *)(v189 + 8 * v103);
    uint64_t v109 = (v108 << v92) | v91;
    unint64_t v110 = v108 >> v104;
    uint64_t v92 = v107;
    uint64_t v90 = v109 & v87;
    if ((v109 & v87) == 0) {
      goto LABEL_98;
    }
    goto LABEL_73;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall _HashTable.UnsafeHandle.clear()()
{
  uint64_t v2 = (*v0 & 0x3FLL) << *v0;
  BOOL v3 = __OFADD__(v2, 64);
  uint64_t v4 = v2 + 64;
  if (v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  uint64_t v5 = v4 - 1;
  if (v4 < 1) {
    uint64_t v5 = v4 + 62;
  }
  if (v4 < -62) {
    goto LABEL_8;
  }
  if ((unint64_t)(v4 + 62) >= 0x7F) {
    bzero(v1, 8 * (v5 >> 6));
  }
}

uint64_t _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v75 = a6;
  uint64_t v71 = a3;
  uint64_t v72 = a2;
  uint64_t v78 = a1;
  uint64_t v7 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v61 - v8;
  uint64_t v79 = a4;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v73 = (char *)&v61 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v15);
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v74 = v7;
  uint64_t v19 = AssociatedTypeWitness;
  dispatch thunk of Collection.indices.getter();
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v76 = v18;
  uint64_t v77 = v16;
  uint64_t v70 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v21 = v80;
  uint64_t v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
  uint64_t v69 = v80 + 48;
  if (v68(v14, 1, v10) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v76, v77);
  }
  uint64_t v22 = 0;
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v66 = (void (**)(char *))(v64 + 2);
  uint64_t v80 = v21 + 32;
  uint64_t v65 = (void (**)(char *, uint64_t))(v21 + 8);
  ++v64;
  while (1)
  {
    uint64_t v23 = v73;
    uint64_t v24 = v14;
    v67(v73, v14, v10);
    uint64_t v25 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    (*v66)(v9);
    v25(&v81, 0);
    (*v65)(v23, v10);
    uint64_t v26 = v72;
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = 1 << *v26;
    BOOL v29 = __OFSUB__(v28, 1);
    uint64_t v30 = v28 - 1;
    if (v29) {
      goto LABEL_40;
    }
    uint64_t v31 = v10;
    uint64_t v32 = v30 & v27;
    uint64_t v33 = v26;
    uint64_t v34 = v26;
    uint64_t v35 = v9;
    uint64_t v36 = v19;
    uint64_t v37 = v71;
    uint64_t v38 = _HashTable.UnsafeHandle._startIterator(bucket:)(v30 & v27, v33, v71);
    char v81 = v34;
    uint64_t v82 = v37;
    uint64_t v19 = v36;
    uint64_t v9 = v35;
    uint64_t v83 = v32;
    uint64_t v84 = v38;
    uint64_t v85 = v39;
    uint64_t v86 = v40;
    char v87 = 0;
    (*v64)(v35, v19);
    if (v84) {
      break;
    }
LABEL_33:
    _HashTable.BucketIterator.currentValue.setter(v22, 0);
    BOOL v29 = __OFADD__(v22++, 1);
    if (v29) {
      goto LABEL_41;
    }
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v14 = v24;
    uint64_t v10 = v31;
    if (v68(v24, 1, v31) == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v76, v77);
    }
  }
  uint64_t v41 = *v81 & 0x3FLL;
  unint64_t v42 = v85;
  uint64_t v43 = v86;
  uint64_t v44 = v83;
  uint64_t v45 = 1 << *v81;
  uint64_t v46 = v41 << *v81;
  uint64_t v47 = v46 + 64;
  BOOL v48 = __OFADD__(v46, 64);
  uint64_t v50 = v47 - 1;
  BOOL v49 = v47 < 1;
  uint64_t v51 = v47 + 62;
  if (v49) {
    uint64_t v50 = v51;
  }
  uint64_t v52 = v50 >> 6;
  while (1)
  {
    if (++v44 == v45)
    {
      if (v87) {
        goto LABEL_42;
      }
      uint64_t v44 = 0;
      char v87 = 1;
    }
    if (v43 >= v41) {
      break;
    }
    uint64_t v53 = (v44 * v41) >> 6;
    if (v43)
    {
      if (v48) {
        goto LABEL_39;
      }
      if (v53 + 1 == v52) {
        uint64_t v53 = 0;
      }
      else {
        ++v53;
      }
    }
    uint64_t v54 = v41 - v43;
    if (__OFSUB__(v41, v43)) {
      goto LABEL_37;
    }
    if (v53 == 2 && v41 == 5) {
      uint64_t v56 = 32;
    }
    else {
      uint64_t v56 = 64;
    }
    BOOL v29 = __OFSUB__(v56, v54);
    uint64_t v57 = v56 - v54;
    if (v29) {
      goto LABEL_38;
    }
    unint64_t v58 = *(void *)(v82 + 8 * v53);
    uint64_t v59 = (v58 << v43) | v42;
    unint64_t v42 = v58 >> v54;
    uint64_t v43 = v57;
LABEL_11:
    if ((v59 & (v45 - 1)) == 0)
    {
      uint64_t v85 = v42;
      uint64_t v86 = v43;
      uint64_t v83 = v44;
      uint64_t v84 = 0;
      goto LABEL_33;
    }
  }
  BOOL v29 = __OFSUB__(v43, v41);
  v43 -= v41;
  if (!v29)
  {
    uint64_t v59 = v42;
    v42 >>= v41;
    goto LABEL_11;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v82 = a7;
  uint64_t v66 = a4;
  uint64_t v71 = a3;
  uint64_t v87 = a2;
  uint64_t v61 = a1;
  uint64_t v76 = a6;
  uint64_t v8 = *(void *)(*(void *)(a6 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v75 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v89 = (char *)v59 - v12;
  uint64_t v85 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v85 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v85);
  uint64_t v74 = (char *)v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v73 = (char *)v59 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v86 = (char *)v59 - v18;
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v70 = (char *)v59 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v21);
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v59 - v23;
  uint64_t v83 = a5;
  uint64_t v84 = v8;
  uint64_t v25 = v85;
  uint64_t v26 = v70;
  dispatch thunk of Collection.indices.getter();
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v27 = v71;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v68 = v24;
  uint64_t v69 = v22;
  uint64_t v64 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  BOOL v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v63 = v13 + 48;
  uint64_t v62 = v29;
  if (v29(v26, 1, v25) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v60 + 8))(v68, v69);
    dispatch thunk of Collection.endIndex.getter();
    return 1;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v32 = v13 + 32;
    uint64_t v65 = v33;
    uint64_t v34 = v80++;
    char v81 = (void (**)(char *))(v34 + 2);
    uint64_t v79 = (uint64_t (**)(char *, uint64_t))(v32 - 24);
    uint64_t v72 = (void (**)(char *, char *, uint64_t))(v32 - 16);
    v59[1] = v32;
    uint64_t v88 = AssociatedTypeWitness;
    uint64_t v35 = v73;
    while (1)
    {
      v65(v86, v26, v25);
      uint64_t v36 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v37 = v89;
      uint64_t v78 = *v81;
      v78(v89);
      v36(v90, 0);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v38 = 1 << *v27;
      BOOL v39 = __OFSUB__(v38, 1);
      uint64_t v40 = v38 - 1;
      if (v39)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        return result;
      }
      uint64_t v67 = v31;
      uint64_t v41 = v40 & result;
      unint64_t v42 = v37;
      uint64_t v43 = v66;
      uint64_t v44 = _HashTable.UnsafeHandle._startIterator(bucket:)(v40 & result, v27, v66);
      unint64_t v91 = v27;
      uint64_t v92 = v43;
      uint64_t v93 = v41;
      uint64_t v94 = v44;
      uint64_t v95 = v45;
      uint64_t v96 = v46;
      char v97 = 0;
      uint64_t v77 = *v80;
      v77(v42, AssociatedTypeWitness);
      if (v94) {
        break;
      }
LABEL_8:
      uint64_t v57 = v67;
      _HashTable.BucketIterator.currentValue.setter(v67, 0);
      uint64_t v25 = v85;
      uint64_t result = (*v79)(v86, v85);
      BOOL v39 = __OFADD__(v57, 1);
      uint64_t v31 = v57 + 1;
      if (v39) {
        goto LABEL_13;
      }
      uint64_t v26 = v70;
      dispatch thunk of IteratorProtocol.next()();
      int v58 = v62(v26, 1, v25);
      uint64_t v27 = v71;
      if (v58 == 1) {
        goto LABEL_2;
      }
    }
    while (1)
    {
      uint64_t v47 = v74;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      BOOL v48 = *v79;
      uint64_t v49 = v85;
      (*v79)(v47, v85);
      uint64_t v50 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v51 = v78;
      v78(v89);
      v50(v90, 0);
      v48(v35, v49);
      (*v72)(v35, v86, v49);
      uint64_t AssociatedTypeWitness = v88;
      uint64_t v52 = dispatch thunk of Collection.subscript.read();
      uint64_t v53 = v75;
      v51(v75);
      ((void (*)(char *, void))v52)(v90, 0);
      v48(v35, v49);
      uint64_t v54 = v89;
      LOBYTE(v52) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v55 = v53;
      uint64_t v56 = v77;
      v77(v55, AssociatedTypeWitness);
      v56(v54, AssociatedTypeWitness);
      if (v52) {
        break;
      }
      _HashTable.BucketIterator.advance()();
      if (!v94) {
        goto LABEL_8;
      }
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v68, v69);
    v65(v61, v86, v85);
    return 0;
  }
}

uint64_t sub_25C2FB718@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(uint64_t *)(*(void *)result + 8) >> 6;
  return result;
}

uint64_t sub_25C2FB72C(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t sub_25C2FB754@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = *(void *)(*(void *)(result + 8) + 8 * *a2);
  return result;
}

void *sub_25C2FB768(void *result, uint64_t a2, void *a3)
{
  *(void *)(*(void *)(a2 + 8) + 8 * *a3) = *result;
  return result;
}

uint64_t sub_25C2FB77C()
{
  return 0;
}

uint64_t sub_25C2FB78C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _HashTable.UnsafeHandle.subscript.getter(*a2, *(void **)a1, *(void *)(a1 + 8));
  *a3 = result;
  return result;
}

unint64_t sub_25C2FB7C0(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return _HashTable.UnsafeHandle.subscript.setter(*a1, *a3, *(void **)a2, *(void *)(a2 + 8));
}

uint64_t sub_25C2FB7D4()
{
  return 0;
}

uint64_t sub_25C2FB7EC()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for _HashTable.UnsafeHandle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTable.UnsafeHandle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.UnsafeHandle()
{
  return &type metadata for _HashTable.UnsafeHandle;
}

uint64_t _HashTable.Header._description.getter()
{
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._char object = (void *)0x800000025C424300;
  v1._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x203A73616962202CLL;
  v3._char object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x203A64656573202CLL;
  v5._char object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  lazy protocol witness table accessor for type Int and conformance Int();
  v6._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._char object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A656C61637328;
}

unint64_t _HashTable.Header.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _HashTable.Header._description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

Swift::String __swiftcall _HashTable.UnsafeHandle._description(type:)(Swift::String type)
{
  uint64_t v3 = v2;
  Swift::String v4 = v1;
  char object = type._object;
  uint64_t countAndFlagsBits = type._countAndFlagsBits;
  _StringGuts.grow(_:)(22);
  v7._uint64_t countAndFlagsBits = countAndFlagsBits;
  v7._char object = object;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = _HashTable.Header._description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._char object = (void *)0x800000025C424340;
  v9._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  _HashTable.UnsafeHandle.debugLoadFactor()();
  Double.write<A>(to:)();
  uint64_t v11 = (void *)0xE000000000000000;
  uint64_t v10 = 0;
  if (1 << *v4 <= 127)
  {
    v12._uint64_t countAndFlagsBits = 2105354;
    v12._char object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _HashTable.UnsafeHandle.debugContents()(v4, v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[Int?], String>);
    lazy protocol witness table accessor for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>();
    uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v13;
    v16._char object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)0xE000000000000000;
    uint64_t v10 = 0;
  }
  result._char object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t closure #1 in _HashTable.UnsafeHandle._description(type:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = 0xE100000000000000;
    uint64_t result = 95;
  }
  else
  {
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  }
  *a2 = result;
  a2[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LazyMapSequence<[Int?], String>);
    lazy protocol witness table accessor for type [Int?] and conformance [A]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int?] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Int?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance [A]);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.description.getter()
{
  v0._char object = (void *)0x800000025C424360;
  v0._uint64_t countAndFlagsBits = 0xD000000000000017;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable.UnsafeHandle()
{
  v0._char object = (void *)0x800000025C424360;
  v0._uint64_t countAndFlagsBits = 0xD000000000000017;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t _HashTable.description.getter()
{
  v0._uint64_t countAndFlagsBits = 0x626154687361485FLL;
  v0._char object = (void *)0xEA0000000000656CLL;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable()
{
  v0._uint64_t countAndFlagsBits = 0x626154687361485FLL;
  v0._char object = (void *)0xEA0000000000656CLL;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t _HashTable.Storage.description.getter()
{
  swift_retain();
  v0._char object = (void *)0x800000025C424380;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  uint64_t countAndFlagsBits = _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
  swift_release();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable.Storage()
{
  swift_retain();
  v0._char object = (void *)0x800000025C424380;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  uint64_t countAndFlagsBits = _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
  swift_release();
  return countAndFlagsBits;
}

uint64_t OrderedSet.count.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t OrderedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedSet.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.subscript.getter()
{
  return ContiguousArray.subscript.getter();
}

BOOL OrderedSet._customContainsEquatableElement(_:)()
{
  OrderedSet._find(_:)();
  return (v0 & 1) == 0;
}

uint64_t OrderedSet._copyToContiguousArray()()
{
  specialized OrderedSet._copyToContiguousArray()();
  uint64_t v1 = v0;
  swift_release();
  swift_release();
  return v1;
}

uint64_t OrderedSet._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  uint64_t v4 = Collection.isEmpty.getter();
  if ((v4 & 1) == 0)
  {
    MEMORY[0x270FA5388](v4);
    ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  }
  return a3;
}

uint64_t OrderedSet.isEmpty.getter()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t closure #1 in OrderedSet._copyContents(initializing:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (a2 >= a1) {
    a2 = a1;
  }
  uint64_t result = UnsafeMutablePointer.initialize(from:count:)();
  *a3 = a2;
  return result;
}

uint64_t OrderedSet.withContiguousStorageIfAvailable<A>(_:)()
{
  return ContiguousArray.withContiguousStorageIfAvailable<A>(_:)();
}

void protocol witness for Sequence.makeIterator() in conformance OrderedSet<A>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedSet<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

BOOL protocol witness for Sequence._customContainsEquatableElement(_:) in conformance OrderedSet<A>()
{
  return OrderedSet._customContainsEquatableElement(_:)();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedSet<A>()
{
  specialized OrderedSet._copyToContiguousArray()();
  uint64_t v1 = v0;
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance OrderedSet<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = OrderedSet._copyContents(initializing:)(a2, a3, *v3);
  a1[1] = v5;
  a1[2] = v6;
  return v7;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedSet<A>()
{
  return OrderedSet.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t OrderedSet.indices.getter()
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  return v1;
}

Swift::Int __swiftcall OrderedSet.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedSet.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedSet.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedSet.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedSet.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedSet.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedSet._customIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0;
  }
  Swift::String v8 = (void *)(a2 + 16);
  uint64_t v9 = a2 + 32;
  swift_retain();
  closure #1 in OrderedSet._customIndexOfEquatableElement(_:)(v8, v9, a1, a3, a5, (uint64_t)&v11);
  swift_release();
  return v11;
}

uint64_t closure #1 in OrderedSet._customIndexOfEquatableElement(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v15 = a4;
  uint64_t v11 = type metadata accessor for ContiguousArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = _HashTable.UnsafeHandle._find<A>(_:in:)(a3, (uint64_t)&v15, a1, a2, v11, WitnessTable, a5);
  *(void *)a6 = result;
  *(unsigned char *)(a6 + 8) = v14 & 1;
  *(unsigned char *)(a6 + 9) = 0;
  return result;
}

uint64_t OrderedSet._customLastIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet._customIndexOfEquatableElement(_:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = a3;
  uint64_t v5 = a1;
  v4[0] = a2;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v5, (uint64_t)v4);
}

void protocol witness for Collection.endIndex.getter in conformance OrderedSet<A>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 8) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedSet<A>(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  ContiguousArray.subscript.getter();
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

uint64_t protocol witness for Collection.subscript.getter in conformance OrderedSet<A>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = OrderedSet.subscript.getter(*a1, a1[1], *v2);
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

double protocol witness for Collection.indices.getter in conformance OrderedSet<A>@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance OrderedSet<A>()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedSet<A>()
{
  return ContiguousArray.count.getter();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance OrderedSet<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = OrderedSet._customIndexOfEquatableElement(_:)(a1, *v3, v3[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 9) = v7 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance OrderedSet<A>(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v3 = *a2;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v4, (uint64_t)&v3);
}

void specialized OrderedSet._copyToContiguousArray()()
{
  swift_retain();
  JUMPOUT(0x261184940);
}

uint64_t partial apply for closure #1 in OrderedSet._copyContents(initializing:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return closure #1 in OrderedSet._copyContents(initializing:)(a1, *(void *)(v2 + 40), a2);
}

uint64_t base witness table accessor for BidirectionalCollection in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in OrderedSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = Array.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t *MaterialXDataType.filename.unsafeMutableAddressor()
{
  if (one-time initialization token for filename != -1) {
    swift_once();
  }
  return &static MaterialXDataType.filename;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  int v6 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = *(void *)(a2 + 48);
  int v8 = *(unsigned __int8 *)(a2 + 56);
  BOOL v9 = *(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40);
  if (v9 || (BOOL v10 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v10 = 0;
    if (v5 == v7 && ((v6 ^ v8) & 1) == 0)
    {
      uint64_t v11 = (unsigned __int8 *)(a1 + 88);
      Swift::String v12 = (unsigned __int8 *)(a2 + 88);
      do
      {
        BOOL v10 = --v2 == 0;
        if (!v2) {
          break;
        }
        uint64_t v13 = *((void *)v11 - 1);
        int v14 = *v11;
        uint64_t v15 = *((void *)v12 - 1);
        int v16 = *v12;
        BOOL v17 = *((void *)v11 - 3) == *((void *)v12 - 3) && *((void *)v11 - 2) == *((void *)v12 - 2);
        if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
        if (v13 != v15) {
          break;
        }
        v11 += 32;
        v12 += 32;
      }
      while (((v14 ^ v16) & 1) == 0);
    }
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2)
  {
    long long v3 = a2;
    if (a1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v13 = a1;
      while (1)
      {
        int v6 = *(void *)(a1 + v4 + 56);
        uint64_t v7 = *(void *)(a1 + v4 + 64);
        int v8 = *(void *)(a1 + v4 + 80);
        BOOL v9 = *(void *)(v3 + v4 + 56);
        BOOL v10 = *(void *)(v3 + v4 + 64);
        uint64_t v15 = *(void *)(v3 + v4 + 72);
        int v16 = *(void *)(a1 + v4 + 72);
        uint64_t v11 = *(void *)(v3 + v4 + 80);
        BOOL v17 = *(unsigned __int8 *)(v3 + v4 + 88);
        uint64_t v18 = *(unsigned __int8 *)(a1 + v4 + 88);
        if ((*(void *)(a1 + v4 + 32) != *(void *)(v3 + v4 + 32)
           || *(void *)(a1 + v4 + 40) != *(void *)(v3 + v4 + 40))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (MaterialXDataType.isEqual(to:)() & 1) == 0)
        {
          return 0;
        }
        if (v7)
        {
          if (!v10 || (v6 != v9 || v7 != v10) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
        }
        else if (v10)
        {
          return 0;
        }
        if (!v8) {
          break;
        }
        if (!v11) {
          return 0;
        }
        if (v16 != v15 || v8 != v11)
        {
          Swift::String v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v12 & 1) == 0) {
            return result;
          }
          goto LABEL_6;
        }
        if (v18 != v17) {
          return 0;
        }
LABEL_7:
        v4 += 64;
        --v2;
        a1 = v13;
        long long v3 = a2;
        if (!v2) {
          return 1;
        }
      }
      uint64_t result = 0;
      if (v11) {
        return result;
      }
LABEL_6:
      if ((v18 ^ v17)) {
        return result;
      }
      goto LABEL_7;
    }
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_OWORD *, _OWORD *))specialized static NodeDefinitionStore.Input.== infix(_:_:));
}

{
  uint64_t v2;
  void *v3;
  uint64_t i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    long long v3 = (void *)(a2 + 80);
    for (uint64_t i = a1 + 40; *(void *)(i - 8) == *(v3 - 6); i += 56)
    {
      int v6 = *(void *)(i + 8);
      uint64_t v7 = *(void *)(i + 16);
      uint64_t v15 = *(void *)(i + 24);
      int v16 = v2;
      int v8 = *(v3 - 5);
      BOOL v9 = *(v3 - 4);
      BOOL v10 = *(v3 - 3);
      int v14 = *(v3 - 2);
      uint64_t v19 = *((unsigned char *)v3 - 8);
      uint64_t v20 = *(unsigned char *)(i + 32);
      BOOL v17 = *v3;
      uint64_t v18 = *(void *)(i + 40);
      uint64_t v11 = *(uint64_t (**)(uint64_t))(**(void **)i + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v11(v8) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      if (v6 == v9 && v7 == v10)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release();
      }
      else
      {
        Swift::String v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        if ((v12 & 1) == 0) {
          return 0;
        }
      }
      if (v20)
      {
        uint64_t v5 = v19;
        if (v18 != v17) {
          uint64_t v5 = 0;
        }
        if ((v5 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (v19) {
          return 0;
        }
        uint64_t result = 0;
        if (v15 != v14 || v18 != v17) {
          return result;
        }
      }
      v3 += 7;
      uint64_t v2 = v16 - 1;
      if (v16 == 1) {
        return 1;
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v4 = 0;
    int v14 = a1;
    while (1)
    {
      int v6 = *(void *)(a1 + v4 + 32);
      uint64_t v5 = *(void *)(a1 + v4 + 40);
      uint64_t v7 = *(void *)(a1 + v4 + 48);
      uint64_t v20 = *(void *)(a1 + v4 + 56);
      BOOL v9 = *(void *)(a2 + v4 + 32);
      int v8 = *(void *)(a2 + v4 + 40);
      uint64_t v11 = *(void *)(a2 + v4 + 48);
      BOOL v10 = *(void *)(a2 + v4 + 56);
      uint64_t v15 = *(void *)(a2 + v4 + 64);
      int v16 = *(void *)(a1 + v4 + 64);
      uint64_t v18 = *(unsigned __int8 *)(a2 + v4 + 72);
      uint64_t v19 = *(unsigned char *)(a1 + v4 + 72);
      outlined copy of NodePersonality(v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((static NodePersonality.== infix(_:_:)(v6, v9) & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)(v5, v8) & 1) == 0)
      {
        break;
      }
      BOOL v17 = specialized static Array<A>.== infix(_:_:)(v7, v11);
      outlined consume of NodePersonality(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v17 & 1) == 0 || v20 != v10) {
        return result;
      }
      if (v19)
      {
        a1 = v14;
        if (!v18) {
          return 0;
        }
      }
      else
      {
        uint64_t v13 = v18;
        if (v16 != v15) {
          uint64_t v13 = 1;
        }
        a1 = v14;
        if (v13) {
          return 0;
        }
      }
      v4 += 48;
      if (!--v2) {
        return 1;
      }
    }
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = a1[6];
  uint64_t v6 = a2[6];
  if (a1[4] == a2[4] && a1[5] == a2[5])
  {
    if (v5 == v6) {
      goto LABEL_12;
    }
    return 0;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v8 & 1) != 0 && v5 == v6)
  {
LABEL_12:
    uint64_t v10 = v2 - 1;
    if (v10)
    {
      uint64_t v11 = a2 + 9;
      for (uint64_t i = a1 + 9; ; i += 3)
      {
        uint64_t v13 = *i;
        uint64_t v14 = *v11;
        if (*(i - 2) == *(v11 - 2) && *(i - 1) == *(v11 - 1))
        {
          if (v13 != v14) {
            return 0;
          }
        }
        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v16 & 1) == 0 || v13 != v14) {
            return result;
          }
        }
        v11 += 3;
        uint64_t result = 1;
        if (!--v10) {
          return result;
        }
      }
    }
    return 1;
  }
  return result;
}

{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  void *i;
  BOOL v11;

  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    char v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    BOOL v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      uint64_t v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  char v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = a1[6];
  if (a1[4] != a2[4] || a1[5] != a2[5])
  {
    uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  BOOL v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_retain();
  LOBYTE(v9) = v9(v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v9 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = v2 - 1;
  if (v2 == 1) {
    return 1;
  }
  Swift::String v12 = a2 + 9;
  uint64_t v13 = a1 + 9;
  while (v11)
  {
    uint64_t v14 = *v13;
    uint64_t v15 = *(v13 - 2) == *(v12 - 2) && *(v13 - 1) == *(v12 - 1);
    if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
    char v16 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 128);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    BOOL v17 = swift_retain();
    LOBYTE(v16) = v16(v17);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      return 0;
    }
    v12 += 3;
    v13 += 3;
    uint64_t result = 1;
    if (!--v11) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *, _OWORD *))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16))
  {
    if (!v3 || a1 == a2)
    {
      char v17 = 1;
    }
    else
    {
      uint64_t v5 = (_OWORD *)(a1 + 32);
      uint64_t v6 = (_OWORD *)(a2 + 32);
      uint64_t v7 = v3 - 1;
      do
      {
        uint64_t v8 = v7;
        long long v9 = v5[7];
        v21[6] = v5[6];
        v22[0] = v9;
        *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v5 + 121);
        long long v10 = v5[3];
        v21[2] = v5[2];
        v21[3] = v10;
        long long v11 = v5[5];
        v21[4] = v5[4];
        v21[5] = v11;
        long long v12 = v5[1];
        v21[0] = *v5;
        v21[1] = v12;
        long long v13 = v6[7];
        v19[6] = v6[6];
        v20[0] = v13;
        *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v6 + 121);
        long long v14 = v6[3];
        v19[2] = v6[2];
        void v19[3] = v14;
        long long v15 = v6[5];
        void v19[4] = v6[4];
        v19[5] = v15;
        long long v16 = v6[1];
        v19[0] = *v6;
        v19[1] = v16;
        char v17 = a3(v21, v19);
        if ((v17 & 1) == 0) {
          break;
        }
        uint64_t v7 = v8 - 1;
        v6 += 9;
        v5 += 9;
      }
      while (v8);
    }
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)MEMORY[0x2611848A0](0, v3))
  {
    long long v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)MEMORY[0x2611848A0](0, a2);
LABEL_22:
    long long v13 = v12;
    type metadata accessor for SGGeometryPropertyDefinition();
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)MEMORY[0x2611848A0](v16 + 1, v3);
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        uint64_t v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)MEMORY[0x2611848A0](v16 + 1, a2);
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        Swift::Int v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        uint64_t v27 = *v25++;
        uint64_t v26 = v27;
        uint64_t v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t *MaterialXDataType.vector2.unsafeMutableAddressor()
{
  if (one-time initialization token for vector2 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.vector2;
}

uint64_t *MaterialXDataType.float2.unsafeMutableAddressor()
{
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.float2;
}

uint64_t *MaterialXDataType.vector3.unsafeMutableAddressor()
{
  if (one-time initialization token for vector3 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.vector3;
}

uint64_t *MaterialXDataType.float3.unsafeMutableAddressor()
{
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.float3;
}

uint64_t *MaterialXDataType.vector4.unsafeMutableAddressor()
{
  if (one-time initialization token for vector4 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.vector4;
}

uint64_t *MaterialXDataType.float4.unsafeMutableAddressor()
{
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.float4;
}

uint64_t *MaterialXDataType.float.unsafeMutableAddressor()
{
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  return &static MaterialXDataType.float;
}

uint64_t *MaterialXDataType.color3.unsafeMutableAddressor()
{
  if (one-time initialization token for color3 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.color3;
}

uint64_t *MaterialXDataType.color4.unsafeMutableAddressor()
{
  if (one-time initialization token for color4 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.color4;
}

uint64_t *MaterialXDataType.BOOLean.unsafeMutableAddressor()
{
  if (one-time initialization token for BOOLean != -1) {
    swift_once();
  }
  return &static MaterialXDataType.BOOLean;
}

uint64_t *MaterialXDataType.integer.unsafeMutableAddressor()
{
  if (one-time initialization token for integer != -1) {
    swift_once();
  }
  return &static MaterialXDataType.integer;
}

uint64_t *MaterialXDataType.integer2.unsafeMutableAddressor()
{
  if (one-time initialization token for integer2 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.integer2;
}

uint64_t *MaterialXDataType.integer3.unsafeMutableAddressor()
{
  if (one-time initialization token for integer3 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.integer3;
}

uint64_t *MaterialXDataType.integer4.unsafeMutableAddressor()
{
  if (one-time initialization token for integer4 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.integer4;
}

uint64_t *MaterialXDataType.half.unsafeMutableAddressor()
{
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  return &static MaterialXDataType.half;
}

uint64_t *MaterialXDataType.half2.unsafeMutableAddressor()
{
  if (one-time initialization token for half2 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.half2;
}

uint64_t *MaterialXDataType.half3.unsafeMutableAddressor()
{
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.half3;
}

uint64_t *MaterialXDataType.half4.unsafeMutableAddressor()
{
  if (one-time initialization token for half4 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.half4;
}

uint64_t *MaterialXDataType.matrix22.unsafeMutableAddressor()
{
  if (one-time initialization token for matrix22 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.matrix22;
}

uint64_t *MaterialXDataType.matrix33.unsafeMutableAddressor()
{
  if (one-time initialization token for matrix33 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.matrix33;
}

uint64_t *MaterialXDataType.matrix44.unsafeMutableAddressor()
{
  if (one-time initialization token for matrix44 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.matrix44;
}

uint64_t *MaterialXDataType.surfaceshader.unsafeMutableAddressor()
{
  if (one-time initialization token for surfaceshader != -1) {
    swift_once();
  }
  return &static MaterialXDataType.surfaceshader;
}

uint64_t *MaterialXDataType.vertexshader.unsafeMutableAddressor()
{
  if (one-time initialization token for vertexshader != -1) {
    swift_once();
  }
  return &static MaterialXDataType.vertexshader;
}

uint64_t *MaterialXDataType.geometrymodifier.unsafeMutableAddressor()
{
  if (one-time initialization token for geometrymodifier != -1) {
    swift_once();
  }
  return &static MaterialXDataType.geometrymodifier;
}

uint64_t *MaterialXDataType.string.unsafeMutableAddressor()
{
  if (one-time initialization token for string != -1) {
    swift_once();
  }
  return &static MaterialXDataType.string;
}

uint64_t *MaterialXDataType.space.unsafeMutableAddressor()
{
  if (one-time initialization token for space != -1) {
    swift_once();
  }
  return &static MaterialXDataType.space;
}

uint64_t *MaterialXDataType.uAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for uAddressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.uAddressMode;
}

uint64_t *MaterialXDataType.vAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for vAddressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.vAddressMode;
}

uint64_t *MaterialXDataType.usd.wrapS.unsafeMutableAddressor()
{
  if (one-time initialization token for wrapS != -1) {
    swift_once();
  }
  return &static MaterialXDataType.usd.wrapS;
}

uint64_t *MaterialXDataType.usd.wrapT.unsafeMutableAddressor()
{
  if (one-time initialization token for wrapT != -1) {
    swift_once();
  }
  return &static MaterialXDataType.usd.wrapT;
}

uint64_t *MaterialXDataType.filterType.unsafeMutableAddressor()
{
  if (one-time initialization token for filterType != -1) {
    swift_once();
  }
  return &static MaterialXDataType.filterType;
}

uint64_t *MaterialXDataType.blurFilterType.unsafeMutableAddressor()
{
  if (one-time initialization token for blurFilterType != -1) {
    swift_once();
  }
  return &static MaterialXDataType.blurFilterType;
}

uint64_t *MaterialXDataType.normalMapSpace.unsafeMutableAddressor()
{
  if (one-time initialization token for normalMapSpace != -1) {
    swift_once();
  }
  return &static MaterialXDataType.normalMapSpace;
}

uint64_t *MaterialXDataType.lumacoeffs.unsafeMutableAddressor()
{
  if (one-time initialization token for lumacoeffs != -1) {
    swift_once();
  }
  return &static MaterialXDataType.lumacoeffs;
}

uint64_t *MaterialXDataType.realitykit.cubeimageFilterType.unsafeMutableAddressor()
{
  if (one-time initialization token for cubeimageFilterType != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.cubeimageFilterType;
}

uint64_t *MaterialXDataType.realitykit.filter.unsafeMutableAddressor()
{
  if (one-time initialization token for filter != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.filter;
}

uint64_t *MaterialXDataType.realitykit.coord.unsafeMutableAddressor()
{
  if (one-time initialization token for coord != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.coord;
}

uint64_t *MaterialXDataType.realitykit.addressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for addressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.addressMode;
}

uint64_t *MaterialXDataType.realitykit.rAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for rAddressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.rAddressMode;
}

uint64_t *MaterialXDataType.realitykit.sAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for sAddressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.sAddressMode;
}

uint64_t *MaterialXDataType.realitykit.tAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for tAddressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.tAddressMode;
}

uint64_t *MaterialXDataType.realitykit.u_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for u_wrap_mode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.u_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.v_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for v_wrap_mode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.v_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.w_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for w_wrap_mode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.w_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.u_pixel_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for u_pixel_wrap_mode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.u_pixel_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.v_pixel_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for v_pixel_wrap_mode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.v_pixel_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.w_pixel_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for w_pixel_wrap_mode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.w_pixel_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.magFilter.unsafeMutableAddressor()
{
  if (one-time initialization token for magFilter != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.magFilter;
}

uint64_t *MaterialXDataType.realitykit.minFilter.unsafeMutableAddressor()
{
  if (one-time initialization token for minFilter != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.minFilter;
}

uint64_t *MaterialXDataType.realitykit.mipFilter.unsafeMutableAddressor()
{
  if (one-time initialization token for mipFilter != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.mipFilter;
}

uint64_t *MaterialXDataType.realitykit.borderColor.unsafeMutableAddressor()
{
  if (one-time initialization token for borderColor != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.borderColor;
}

Swift::String_optional __swiftcall MetalDataType.convertEnumConstant(_:)(Swift::String a1)
{
  char object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for coord != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)())
  {
    uint64_t v8 = &outlined read-only object #0 of MetalDataType.convertEnumConstant(_:);
  }
  else
  {
    if (one-time initialization token for address != -1) {
      swift_once();
    }
    if (MetalDataType.isEqual(to:)()) {
      goto LABEL_17;
    }
    if (one-time initialization token for s_address != -1) {
      swift_once();
    }
    if (MetalDataType.isEqual(to:)()) {
      goto LABEL_17;
    }
    if (one-time initialization token for t_address != -1) {
      swift_once();
    }
    if (MetalDataType.isEqual(to:)()) {
      goto LABEL_17;
    }
    if (one-time initialization token for r_address != -1) {
      swift_once();
    }
    if (MetalDataType.isEqual(to:)())
    {
LABEL_17:
      uint64_t v8 = &outlined read-only object #1 of MetalDataType.convertEnumConstant(_:);
    }
    else
    {
      if (one-time initialization token for filter != -1) {
        swift_once();
      }
      if (MetalDataType.isEqual(to:)()) {
        goto LABEL_35;
      }
      if (one-time initialization token for min_filter != -1) {
        swift_once();
      }
      if (MetalDataType.isEqual(to:)()) {
        goto LABEL_35;
      }
      if (one-time initialization token for mag_filter != -1) {
        swift_once();
      }
      if (MetalDataType.isEqual(to:)())
      {
LABEL_35:
        uint64_t v8 = &outlined read-only object #2 of MetalDataType.convertEnumConstant(_:);
      }
      else
      {
        if (one-time initialization token for mip_filter != -1) {
          swift_once();
        }
        if (MetalDataType.isEqual(to:)())
        {
          uint64_t v8 = &outlined read-only object #3 of MetalDataType.convertEnumConstant(_:);
        }
        else
        {
          if (one-time initialization token for space != -1) {
            swift_once();
          }
          if (MetalDataType.isEqual(to:)())
          {
            uint64_t v8 = &outlined read-only object #4 of MetalDataType.convertEnumConstant(_:);
          }
          else
          {
            if (one-time initialization token for border_color != -1) {
              swift_once();
            }
            if (MetalDataType.isEqual(to:)())
            {
              uint64_t v8 = &outlined read-only object #5 of MetalDataType.convertEnumConstant(_:);
            }
            else if (MetalDataType.isEqual(to:)())
            {
              uint64_t v8 = &outlined read-only object #6 of MetalDataType.convertEnumConstant(_:);
            }
            else
            {
              if (one-time initialization token for compare_func != -1) {
                swift_once();
              }
              if ((MetalDataType.isEqual(to:)() & 1) == 0)
              {
                if (one-time initialization token for logger != -1) {
                  swift_once();
                }
                uint64_t v17 = __swift_project_value_buffer(v4, (uint64_t)logger);
                (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17, v4);
                swift_bridgeObjectRetain_n();
                swift_retain_n();
                id v18 = Logger.logObject.getter();
                os_log_type_t v19 = static os_log_type_t.error.getter();
                int v30 = v19;
                if (os_log_type_enabled(v18, v19))
                {
                  uint64_t v20 = swift_slowAlloc();
                  uint64_t v29 = swift_slowAlloc();
                  uint64_t v32 = v29;
                  *(_DWORD *)uint64_t v20 = 136315394;
                  swift_bridgeObjectRetain();
                  uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v32);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v20 + 12) = 2080;
                  v28[1] = v20 + 14;
                  Swift::Int v21 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 136);
                  uint64_t v22 = swift_retain();
                  uint64_t v23 = v21(v22);
                  unint64_t v25 = v24;
                  swift_release();
                  uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v32);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_25C27E000, v18, (os_log_type_t)v30, "Could not convert value '%s' to '%s'", (uint8_t *)v20, 0x16u);
                  uint64_t v26 = v29;
                  swift_arrayDestroy();
                  MEMORY[0x261185880](v26, -1, -1);
                  MEMORY[0x261185880](v20, -1, -1);
                }
                else
                {

                  swift_release_n();
                  swift_bridgeObjectRelease_n();
                }
                (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                goto LABEL_24;
              }
              uint64_t v8 = &outlined read-only object #7 of MetalDataType.convertEnumConstant(_:);
            }
          }
        }
      }
    }
  }
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v8);
  if (!*(void *)(v9 + 16))
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v13 = 0;
    char v14 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  id v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
  uint64_t v13 = *v12;
  char v14 = (void *)v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  result.value._char object = v16;
  result.value._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t *MaterialXDataType.unsupported.unsafeMutableAddressor()
{
  if (one-time initialization token for unsupported != -1) {
    swift_once();
  }
  return &static MaterialXDataType.unsupported;
}

uint64_t SGDataTypeStorage.init(materialXValue:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized SGDataTypeStorage.init(materialXValue:type:)(a1, a2, a3, (uint64_t)v7);
  if (!v4) {
    return outlined init with take of SGDataTypeStorage((uint64_t)v7, a4);
  }
  return result;
}

uint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = (char *)type metadata accessor for CharacterSet();
  uint64_t v4 = *((void *)v64 - 1);
  MEMORY[0x270FA5388](v64);
  uint64_t v6 = (char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v66 = 44;
  unint64_t v67 = 0xE100000000000000;
  v63[1] = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  int64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    uint64_t v66 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    unint64_t v10 = (void (**)(char *, char *))(v4 + 8);
    v63[0] = v7;
    char v11 = (uint64_t *)(v7 + 40);
    do
    {
      uint64_t v12 = *v11;
      uint64_t v68 = *(v11 - 1);
      uint64_t v69 = v12;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v13 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v15 = v14;
      (*v10)(v6, v64);
      swift_bridgeObjectRelease();
      uint64_t v16 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        uint64_t v16 = v66;
      }
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v66;
      }
      v11 += 2;
      *(void *)(v16 + 16) = v18 + 1;
      unint64_t v19 = v16 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    int64_t v20 = *(void *)(v16 + 16);
    if (!v20) {
      goto LABEL_104;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
    int64_t v20 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v20)
    {
LABEL_104:
      swift_bridgeObjectRelease();
      specialized SIMD.init<A>(_:)(v9);
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v66 = v9;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  uint64_t v22 = 0;
  uint64_t v64 = (char *)&v68 + 1;
  while (1)
  {
    uint64_t v23 = (uint64_t *)(v16 + 32 + 16 * v22);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = HIBYTE(v24) & 0xF;
    uint64_t v27 = *v23 & 0xFFFFFFFFFFFFLL;
    if (!((v24 & 0x2000000000000000) != 0 ? HIBYTE(v24) & 0xF : *v23 & 0xFFFFFFFFFFFFLL)) {
      break;
    }
    if ((v24 & 0x1000000000000000) == 0)
    {
      if ((v24 & 0x2000000000000000) != 0)
      {
        uint64_t v68 = v25;
        uint64_t v69 = v24 & 0xFFFFFFFFFFFFFFLL;
        if (v25 == 43)
        {
          if (!v26) {
            goto LABEL_109;
          }
          if (v26 != 1)
          {
            int v33 = (BYTE1(v25) - 48);
            if (v33 <= 9)
            {
              uint64_t v52 = v26 - 2;
              if (!v52) {
                goto LABEL_73;
              }
              uint64_t v53 = (unsigned __int8 *)&v68 + 2;
              while (1)
              {
                unsigned int v54 = *v53 - 48;
                if (v54 > 9) {
                  break;
                }
                uint64_t v55 = 10 * v33;
                if (v55 != (int)v55) {
                  break;
                }
                int v33 = v55 + v54;
                if (__OFADD__(v55, v54)) {
                  break;
                }
                char v32 = 0;
                ++v53;
                if (!--v52) {
                  goto LABEL_87;
                }
              }
            }
          }
        }
        else if (v25 == 45)
        {
          if (!v26) {
            goto LABEL_107;
          }
          if (v26 != 1 && (BYTE1(v25) - 48) <= 9u)
          {
            char v32 = 0;
            int v33 = -(BYTE1(v25) - 48);
            uint64_t v38 = v26 - 2;
            if (!v38) {
              goto LABEL_87;
            }
            uint64_t v39 = (unsigned __int8 *)&v68 + 2;
            while (1)
            {
              unsigned int v40 = *v39 - 48;
              if (v40 > 9) {
                break;
              }
              uint64_t v41 = 10 * v33;
              if (v41 != (int)v41) {
                break;
              }
              int v33 = v41 - v40;
              if (__OFSUB__(v41, v40)) {
                break;
              }
              char v32 = 0;
              ++v39;
              if (!--v38) {
                goto LABEL_87;
              }
            }
          }
        }
        else
        {
          if (!v26) {
            goto LABEL_86;
          }
          int v33 = (v25 - 48);
          if (v33 > 9) {
            goto LABEL_86;
          }
          uint64_t v59 = v26 - 1;
          if (!v59) {
            goto LABEL_73;
          }
          uint64_t v60 = (unsigned __int8 *)v64;
          while (1)
          {
            unsigned int v61 = *v60 - 48;
            if (v61 > 9) {
              break;
            }
            uint64_t v62 = 10 * v33;
            if (v62 != (int)v62) {
              break;
            }
            int v33 = v62 + v61;
            if (__OFADD__(v62, v61)) {
              break;
            }
            char v32 = 0;
            ++v60;
            if (!--v59) {
              goto LABEL_87;
            }
          }
        }
      }
      else
      {
        if ((v25 & 0x1000000000000000) != 0) {
          uint64_t result = (v24 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        int v29 = *(unsigned __int8 *)result;
        if (v29 == 43)
        {
          if (v27 < 1) {
            goto LABEL_108;
          }
          if (v27 != 1)
          {
            if (result) {
              unint64_t v42 = (unsigned char *)(result + 1);
            }
            else {
              unint64_t v42 = 0;
            }
            if (!result) {
              goto LABEL_72;
            }
            if (*v42 - 48 > 9) {
              goto LABEL_86;
            }
            int v33 = (*v42 - 48);
            if (v27 == 2) {
              goto LABEL_73;
            }
            uint64_t v43 = v42 + 1;
            uint64_t v44 = v27 - 2;
            while (1)
            {
              unsigned int v45 = *v43 - 48;
              if (v45 > 9) {
                break;
              }
              uint64_t v46 = 10 * v33;
              if (v46 != (int)v46) {
                break;
              }
              int v33 = v46 + v45;
              if (__OFADD__(v46, v45)) {
                break;
              }
              char v32 = 0;
              ++v43;
              if (!--v44) {
                goto LABEL_87;
              }
            }
          }
        }
        else if (v29 == 45)
        {
          if (v27 < 1) {
            goto LABEL_106;
          }
          if (v27 != 1)
          {
            if (result) {
              int v30 = (unsigned __int8 *)(result + 1);
            }
            else {
              int v30 = 0;
            }
            if (result)
            {
              unsigned int v31 = *v30 - 48;
              if (v31 > 9) {
                goto LABEL_86;
              }
              char v32 = 0;
              int v33 = -v31;
              if (v27 != 2)
              {
                uint64_t v34 = v30 + 1;
                uint64_t v35 = v27 - 2;
                do
                {
                  unsigned int v36 = *v34 - 48;
                  if (v36 > 9) {
                    goto LABEL_86;
                  }
                  uint64_t v37 = 10 * v33;
                  if (v37 != (int)v37) {
                    goto LABEL_86;
                  }
                  int v33 = v37 - v36;
                  if (__OFSUB__(v37, v36)) {
                    goto LABEL_86;
                  }
                  char v32 = 0;
                  ++v34;
                }
                while (--v35);
              }
LABEL_87:
              char v65 = v32;
              char v56 = v32;
              uint64_t result = swift_bridgeObjectRetain();
              if (v56) {
                goto LABEL_110;
              }
              goto LABEL_88;
            }
LABEL_72:
            int v33 = 0;
            goto LABEL_73;
          }
        }
        else
        {
          if (!v27) {
            goto LABEL_86;
          }
          if (!result) {
            goto LABEL_72;
          }
          unsigned int v47 = v29 - 48;
          if (v47 > 9) {
            goto LABEL_86;
          }
          int v33 = v47;
          uint64_t v48 = v27 - 1;
          if (v27 == 1)
          {
LABEL_73:
            char v32 = 0;
            goto LABEL_87;
          }
          uint64_t v49 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v50 = *v49 - 48;
            if (v50 > 9) {
              break;
            }
            uint64_t v51 = 10 * v33;
            if (v51 != (int)v51) {
              break;
            }
            int v33 = v51 + v50;
            if (__OFADD__(v51, v50)) {
              break;
            }
            char v32 = 0;
            ++v49;
            if (!--v48) {
              goto LABEL_87;
            }
          }
        }
      }
LABEL_86:
      int v33 = 0;
      char v32 = 1;
      goto LABEL_87;
    }
    swift_bridgeObjectRetain();
    uint64_t result = specialized _parseInteger<A, B>(ascii:radix:)(v25, v24, 10);
    int v33 = result;
    if ((result & 0x100000000) != 0) {
      goto LABEL_110;
    }
LABEL_88:
    swift_bridgeObjectRelease();
    uint64_t v9 = v66;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
      uint64_t v9 = v66;
    }
    unint64_t v58 = *(void *)(v9 + 16);
    unint64_t v57 = *(void *)(v9 + 24);
    if (v58 >= v57 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
      uint64_t v9 = v66;
    }
    ++v22;
    *(void *)(v9 + 16) = v58 + 1;
    *(_DWORD *)(v9 + 4 * v58 + 32) = v33;
    if (v22 == v20) {
      goto LABEL_104;
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
  return result;
}

uint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2, double (*a3)(uint64_t))
{
  unint64_t v67 = a3;
  *(void *)&long long v69 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v7 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v71 = 44;
  unint64_t v72 = 0xE100000000000000;
  unint64_t v68 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  int64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v71 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    char v11 = (void (**)(char *, void))(v5 + 8);
    v66[1] = v8;
    uint64_t v12 = (uint64_t *)(v8 + 40);
    do
    {
      uint64_t v13 = *v12;
      uint64_t v73 = *(v12 - 1);
      uint64_t v74 = v13;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v14 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v16 = v15;
      (*v11)(v7, v69);
      swift_bridgeObjectRelease();
      uint64_t v17 = v71;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v71;
      }
      unint64_t v19 = *(void *)(v17 + 16);
      unint64_t v18 = *(void *)(v17 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v17 = v71;
      }
      v12 += 2;
      *(void *)(v17 + 16) = v19 + 1;
      unint64_t v20 = v17 + 16 * v19;
      *(void *)(v20 + 32) = v14;
      *(void *)(v20 + 40) = v16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    int64_t v21 = *(void *)(v17 + 16);
    if (v21) {
      goto LABEL_9;
    }
LABEL_103:
    swift_bridgeObjectRelease();
    uint64_t v58 = MEMORY[0x263F8EE78];
LABEL_104:
    *(double *)&long long v65 = v67(v58);
    long long v69 = v65;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = MEMORY[0x263F8EE78];
  int64_t v21 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v21) {
    goto LABEL_103;
  }
LABEL_9:
  uint64_t v71 = v10;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  uint64_t v23 = 0;
  *(void *)&long long v69 = (char *)&v73 + 1;
  while (1)
  {
    unint64_t v24 = (uint64_t *)(v17 + 32 + 16 * v23);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    uint64_t v27 = HIBYTE(v26) & 0xF;
    uint64_t v28 = *v24 & 0xFFFFFFFFFFFFLL;
    if (!((v26 & 0x2000000000000000) != 0 ? HIBYTE(v26) & 0xF : *v24 & 0xFFFFFFFFFFFFLL)) {
      break;
    }
    if ((v26 & 0x1000000000000000) == 0)
    {
      if ((v26 & 0x2000000000000000) != 0)
      {
        uint64_t v73 = v25;
        uint64_t v74 = v26 & 0xFFFFFFFFFFFFFFLL;
        if (v25 == 43)
        {
          if (!v27) {
            goto LABEL_109;
          }
          if (v27 != 1)
          {
            int v34 = (BYTE1(v25) - 48);
            if (v34 <= 9)
            {
              uint64_t v53 = v27 - 2;
              if (!v53) {
                goto LABEL_71;
              }
              unsigned int v54 = (unsigned __int8 *)&v73 + 2;
              while (1)
              {
                unsigned int v55 = *v54 - 48;
                if (v55 > 9) {
                  break;
                }
                uint64_t v56 = 10 * v34;
                if (v56 != (int)v56) {
                  break;
                }
                int v34 = v56 + v55;
                if (__OFADD__(v56, v55)) {
                  break;
                }
                char v33 = 0;
                ++v54;
                if (!--v53) {
                  goto LABEL_85;
                }
              }
            }
          }
        }
        else if (v25 == 45)
        {
          if (!v27) {
            goto LABEL_107;
          }
          if (v27 != 1 && (BYTE1(v25) - 48) <= 9u)
          {
            char v33 = 0;
            int v34 = -(BYTE1(v25) - 48);
            uint64_t v39 = v27 - 2;
            if (!v39) {
              goto LABEL_85;
            }
            unsigned int v40 = (unsigned __int8 *)&v73 + 2;
            while (1)
            {
              unsigned int v41 = *v40 - 48;
              if (v41 > 9) {
                break;
              }
              uint64_t v42 = 10 * v34;
              if (v42 != (int)v42) {
                break;
              }
              int v34 = v42 - v41;
              if (__OFSUB__(v42, v41)) {
                break;
              }
              char v33 = 0;
              ++v40;
              if (!--v39) {
                goto LABEL_85;
              }
            }
          }
        }
        else
        {
          if (!v27) {
            goto LABEL_84;
          }
          int v34 = (v25 - 48);
          if (v34 > 9) {
            goto LABEL_84;
          }
          uint64_t v61 = v27 - 1;
          if (!v61) {
            goto LABEL_71;
          }
          uint64_t v62 = (unsigned __int8 *)v69;
          while (1)
          {
            unsigned int v63 = *v62 - 48;
            if (v63 > 9) {
              break;
            }
            uint64_t v64 = 10 * v34;
            if (v64 != (int)v64) {
              break;
            }
            int v34 = v64 + v63;
            if (__OFADD__(v64, v63)) {
              break;
            }
            char v33 = 0;
            ++v62;
            if (!--v61) {
              goto LABEL_85;
            }
          }
        }
      }
      else
      {
        if ((v25 & 0x1000000000000000) != 0) {
          uint64_t result = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        int v30 = *(unsigned __int8 *)result;
        if (v30 == 43)
        {
          if (v28 < 1) {
            goto LABEL_108;
          }
          if (v28 != 1)
          {
            if (result) {
              uint64_t v43 = (unsigned char *)(result + 1);
            }
            else {
              uint64_t v43 = 0;
            }
            if (!result) {
              goto LABEL_70;
            }
            if (*v43 - 48 > 9) {
              goto LABEL_84;
            }
            int v34 = (*v43 - 48);
            if (v28 == 2) {
              goto LABEL_71;
            }
            uint64_t v44 = v43 + 1;
            uint64_t v45 = v28 - 2;
            while (1)
            {
              unsigned int v46 = *v44 - 48;
              if (v46 > 9) {
                break;
              }
              uint64_t v47 = 10 * v34;
              if (v47 != (int)v47) {
                break;
              }
              int v34 = v47 + v46;
              if (__OFADD__(v47, v46)) {
                break;
              }
              char v33 = 0;
              ++v44;
              if (!--v45) {
                goto LABEL_85;
              }
            }
          }
        }
        else if (v30 == 45)
        {
          if (v28 < 1) {
            goto LABEL_106;
          }
          if (v28 != 1)
          {
            if (result) {
              unsigned int v31 = (unsigned __int8 *)(result + 1);
            }
            else {
              unsigned int v31 = 0;
            }
            if (result)
            {
              unsigned int v32 = *v31 - 48;
              if (v32 > 9) {
                goto LABEL_84;
              }
              char v33 = 0;
              int v34 = -v32;
              if (v28 != 2)
              {
                uint64_t v35 = v31 + 1;
                uint64_t v36 = v28 - 2;
                do
                {
                  unsigned int v37 = *v35 - 48;
                  if (v37 > 9) {
                    goto LABEL_84;
                  }
                  uint64_t v38 = 10 * v34;
                  if (v38 != (int)v38) {
                    goto LABEL_84;
                  }
                  int v34 = v38 - v37;
                  if (__OFSUB__(v38, v37)) {
                    goto LABEL_84;
                  }
                  char v33 = 0;
                  ++v35;
                }
                while (--v36);
              }
LABEL_85:
              char v70 = v33;
              char v57 = v33;
              uint64_t result = swift_bridgeObjectRetain();
              if (v57) {
                goto LABEL_110;
              }
              goto LABEL_86;
            }
LABEL_70:
            int v34 = 0;
            goto LABEL_71;
          }
        }
        else
        {
          if (!v28) {
            goto LABEL_84;
          }
          if (!result) {
            goto LABEL_70;
          }
          unsigned int v48 = v30 - 48;
          if (v48 > 9) {
            goto LABEL_84;
          }
          int v34 = v48;
          uint64_t v49 = v28 - 1;
          if (v28 == 1)
          {
LABEL_71:
            char v33 = 0;
            goto LABEL_85;
          }
          unsigned int v50 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v51 = *v50 - 48;
            if (v51 > 9) {
              break;
            }
            uint64_t v52 = 10 * v34;
            if (v52 != (int)v52) {
              break;
            }
            int v34 = v52 + v51;
            if (__OFADD__(v52, v51)) {
              break;
            }
            char v33 = 0;
            ++v50;
            if (!--v49) {
              goto LABEL_85;
            }
          }
        }
      }
LABEL_84:
      int v34 = 0;
      char v33 = 1;
      goto LABEL_85;
    }
    swift_bridgeObjectRetain();
    uint64_t result = specialized _parseInteger<A, B>(ascii:radix:)(v25, v26, 10);
    int v34 = result;
    if ((result & 0x100000000) != 0) {
      goto LABEL_110;
    }
LABEL_86:
    swift_bridgeObjectRelease();
    uint64_t v58 = v71;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1);
      uint64_t v58 = v71;
    }
    unint64_t v60 = *(void *)(v58 + 16);
    unint64_t v59 = *(void *)(v58 + 24);
    if (v60 >= v59 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
      uint64_t v58 = v71;
    }
    ++v23;
    *(void *)(v58 + 16) = v60 + 1;
    *(_DWORD *)(v58 + 4 * v60 + 32) = v34;
    if (v23 == v21)
    {
      swift_bridgeObjectRelease();
      goto LABEL_104;
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
  return result;
}

unint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2, double (*a3)(void))
{
  *(void *)&long long v34 = type metadata accessor for CharacterSet();
  uint64_t v6 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v35 = 44;
  unint64_t v36 = 0xE100000000000000;
  unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v9 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  int64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    unsigned int v32 = a3;
    uint64_t v35 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v12 = (void (**)(char *, void))(v6 + 8);
    v31[1] = v9;
    uint64_t v13 = (uint64_t *)(v9 + 40);
    do
    {
      uint64_t v14 = *v13;
      uint64_t v37 = *(v13 - 1);
      uint64_t v38 = v14;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v15 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v17 = v16;
      (*v12)(v8, v34);
      swift_bridgeObjectRelease();
      uint64_t v18 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v35;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v35;
      }
      v13 += 2;
      *(void *)(v18 + 16) = v20 + 1;
      unint64_t v21 = v18 + 16 * v20;
      *(void *)(v21 + 32) = v15;
      *(void *)(v21 + 40) = v17;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a3 = v32;
    uint64_t v11 = MEMORY[0x263F8EE78];
    int64_t v22 = *(void *)(v18 + 16);
    if (!v22) {
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
    int64_t v22 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v22)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      *(double *)&long long v30 = a3(v11);
      long long v34 = v30;
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v37 = v11;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  uint64_t v11 = v37;
  uint64_t v23 = (uint64_t *)(v18 + 40);
  while (1)
  {
    uint64_t v24 = *(v23 - 1);
    uint64_t v25 = *v23;
    swift_bridgeObjectRetain();
    unint64_t result = specialized Float.init<A>(_:)(v24, v25);
    if ((result & 0x100000000) != 0) {
      break;
    }
    int v27 = result;
    uint64_t v37 = v11;
    unint64_t v29 = *(void *)(v11 + 16);
    unint64_t v28 = *(void *)(v11 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      uint64_t v11 = v37;
    }
    v23 += 2;
    *(void *)(v11 + 16) = v29 + 1;
    *(_DWORD *)(v11 + 4 * v29 + 32) = v27;
    if (!--v22) {
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}