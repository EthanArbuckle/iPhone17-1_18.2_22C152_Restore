void sub_1AFB55850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t vars8;

  v5 = *(void **)(a1 + 32);
  if (v5) {
    [v5 bindParametersToSqliteWithStatement:a4];
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    objc_msgSend(v6, "__im_nanosecondTimeInterval");
    CSDBSqliteBindInt64();
  }
  CSDBSqliteBindInt64();
  v10 = (id)CSDBRecordStoreProcessStatement();
  v7 = [*(id *)(a1 + 48) _copyChatRecordsFromCoreSDBResults:v10];
  v8 = *(void *)(*(void *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1AFB55970(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      v6 = v4;
    }
    else {
      v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFB55C94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v11;
        _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Exception attempting to generate SQL where clause: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1AFB55C50);
  }
  _Unwind_Resume(a1);
}

void sub_1AFB56030(uint64_t a1)
{
  objc_opt_class();
  v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  BOOL v3 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), "ascending");
  objc_opt_class();
  v4 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  v6 = [*(id *)(a1 + 40) database];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1AFB5FABC;
  v8[3] = &unk_1E5F8FC10;
  id v7 = *(void **)(a1 + 48);
  v8[4] = *(void *)(a1 + 40);
  id v9 = v7;
  id v10 = *(id *)(a1 + 56);
  [v6 fetchChatRecordsFilteredUsingPredicate:v2 sortedUsingLastMessageDateAscending:v3 olderThan:v4 limit:int64 completionHandler:v8];
}

void sub_1AFB56700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB56794(uint64_t a1)
{
  v2 = [*(id *)(a1 + 32) database];
  id v6 = [v2 loadRecoverableMessagesMetadataGroupedByChatGUID];

  BOOL v3 = [*(id *)(a1 + 32) _xpcDictionaryWithCodableObjects:v6];
  if (v3)
  {
    v4 = *(void **)(a1 + 40);
    if (v4) {
      xpc_dictionary_set_value(v4, "recoverableMessagesMetadataDictionary", v3);
    }
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_1AFB56890(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), v2);
    xpc_release(*(xpc_object_t *)(a1 + 32));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 48));
  BOOL v3 = *(void **)(a1 + 56);
}

void sub_1AFB56B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __IMDPersistenceCheckEntitlements(uint64_t a1, uint64_t a2)
{
  if (qword_1EB5ABCA0 != -1) {
    dispatch_once(&qword_1EB5ABCA0, &unk_1F084C000);
  }
  uint64_t v3 = IMDAuditTokenTaskCopyValuesForEntitlements();
  if (!v3) {
    return 0;
  }
  v4 = (void *)v3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (__IMDPersistenceCheckGreaterEntitlements(v4)) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = __IMDPersistenceCheckLesserEntitlements(v4, a2);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  CFRelease(v4);
  return v5;
}

uint64_t __IMDPersistenceCheckGreaterEntitlements(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (qword_1EB5ABCA0 != -1) {
    dispatch_once(&qword_1EB5ABCA0, &unk_1F084C000);
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  v2 = (void *)qword_1EB5ABCB0;
  uint64_t result = [(id)qword_1EB5ABCB0 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        CFBooleanRef v7 = (const __CFBoolean *)[a1 objectForKey:*(void *)(*((void *)&v10 + 1) + 8 * v6)];
        if (v7)
        {
          CFBooleanRef v8 = v7;
          CFTypeID v9 = CFGetTypeID(v7);
          if (v9 == CFBooleanGetTypeID())
          {
            if (CFBooleanGetValue(v8)) {
              return 1;
            }
          }
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t _IMDSMSRecordStoreInitializeSharedThreadedRecordStore()
{
  uint64_t result = IMDIsRunningInDatabaseServerProcess();
  if (result)
  {
    int v1 = IMDSMSRecordStoreUseProtectedDatabase();
    uint64_t v2 = IMDSharedThreadedRecordStore();
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBF67F4;
    v3[3] = &unk_1E5F978D8;
    char v4 = v1;
    return _IMDInitializeMessagesRecordStoreWithVersion(v2, (uint64_t)v3, v1);
  }
  return result;
}

BOOL _IMDInitializeMessagesRecordStoreWithVersion(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  long long v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  _IMDAllowLocalMigration();
  if (a3) {
    int v4 = 0;
  }
  else {
    int v4 = 2;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1AFBF6778;
  v11[3] = &unk_1E5F978B8;
  v11[4] = &v12;
  LODWORD(v9) = v4;
  CSDBThreadedRecordStoreEnsureDatabaseSetupWithProtection();
  if (*((unsigned char *)v13 + 24))
  {
    id v10 = 0;
    IMDCreateTriggers((uint64_t)&v10, 0);
    if (v10)
    {
      uint64_t v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = IMDSharedThreadedRecordStore();
        sub_1AFC6D998(v6, objc_msgSend(v10, "localizedDescription", v9, v11), buf, v5);
      }
    }
    BOOL v7 = *((unsigned char *)v13 + 24) != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1AFB57068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t _IMDAllowLocalMigration()
{
  return byte_1E9AF7640;
}

uint64_t IMDSMSRecordStoreUseProtectedDatabase()
{
  v0 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  uint64_t v1 = [v0 isUnderFirstDataProtectionLock] ^ 1;

  return v1;
}

void __XPCIMDMessageStoreSendXPCMessage(void *a1, void (**a2)(void), int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall")
      && IMIsRunningInUnitTesting())
    {
      v26 = IMLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6EE38(v26, v27, v28);
      }
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:@"IMDPersistenceXPCNotAllowedInTest" reason:@"Called into IMDPersistence XPC layer while in a test" userInfo:0]);
    }
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E778], "sharedFeatureFlags"), "isModernPersistenceXPCEnabled"))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Sending legacy command", (uint8_t *)&buf, 2u);
        }
      }
      uint64_t v6 = +[IMDPersistenceServiceClient sharedClient];
      if (a3) {
        uint64_t v7 = [(IMDPersistenceServiceClient *)v6 remoteProxy];
      }
      else {
        uint64_t v7 = [(IMDPersistenceServiceClient *)v6 synchronousRemoteProxy];
      }
      v24 = (void *)v7;
      v25 = (void *)[objc_alloc(MEMORY[0x1E4F6EAE8]) initWithXPCObject:a1];
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      v35 = sub_1AFC05060;
      v36 = &unk_1E5F995A0;
      v37 = a2;
      [v24 sendLegacyXPCCommandWithObject:v25 reply:&buf];

      return;
    }
    xpc_dictionary_set_int64(a1, "__xpc_wants_reply__", 1);
    unint64_t v11 = 0;
    uint64_t v12 = MEMORY[0x1E4F145A8];
    while (1)
    {
      long long v13 = (_xpc_connection_s *)_IMDPersistenceIPCCopyConnectionWithForceNew(v11 != 0);
      uint64_t v14 = v13;
      if (!v13)
      {
        v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6EEE8(&v32, v33, v18);
        }
        goto LABEL_24;
      }
      if (a3)
      {
        xpc_connection_send_message_with_reply(v13, a1, MEMORY[0x1E4F14428], a2);
        xpc_release(v14);
        return;
      }
      xpc_object_t v15 = xpc_connection_send_message_with_reply_sync(v13, a1);
      v16 = v15;
      if (v15 && MEMORY[0x1B3E8AD60](v15) != v12)
      {
        if (a2) {
          a2[2]();
        }
        xpc_release(v16);
        xpc_release(v14);
        return;
      }
      uint64_t v17 = IMLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v11 + 1;
        _os_log_error_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_ERROR, "__syncXPCIMDMessageStoreSendXPCMessage has failed %lu time(s)!", (uint8_t *)&buf, 0xCu);
        if (!v16)
        {
LABEL_23:
          xpc_release(v14);
          goto LABEL_24;
        }
      }
      else if (!v16)
      {
        goto LABEL_23;
      }
      xpc_release(v16);
      xpc_release(v14);
LABEL_24:
      if (v11 >= 3)
      {
        v19 = IMLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6EEB0(&v30, v31, v19);
        }
        sleep(0xBu);
      }
      sleep(1u);
      if (++v11 == 5)
      {
        v20 = IMLogHandleForCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6EE74(v20, v21, v22);
        }
        if (a2)
        {
          xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
          ((void (*)(void (**)(void), xpc_object_t))a2[2])(a2, v23);
          if (v23) {
            xpc_release(v23);
          }
        }
        return;
      }
    }
  }
  CFBooleanRef v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6EDFC(v8, v9, v10);
  }
}

uint64_t IMDSharedThreadedRecordStore()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!IMDIsRunningInDatabaseServerProcess()) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v5 = 3221225472;
  uint64_t v6 = sub_1AFBF5950;
  uint64_t v7 = &unk_1E5F8EB38;
  CFBooleanRef v8 = &v9;
  if (qword_1EB5ABC90 != -1) {
    dispatch_once(&qword_1EB5ABC90, &block);
  }
  if (!qword_1EB5ABC98)
  {
    v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      if (*((unsigned char *)v10 + 24)) {
        uint64_t v1 = @"YES";
      }
      else {
        uint64_t v1 = @"NO";
      }
      sub_1AFC6D3A4([NSString stringWithFormat:@"CSDBCreateThreadedRecordStore should not be nil. Did attempt to init: %@", v1, block, v5, v6, v7, v8, v9], buf, v0);
    }
  }
  uint64_t v2 = qword_1EB5ABC98;
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_1AFB57680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t IMDIsRunningInDatabaseServerProcess()
{
  return byte_1EB5ABD00;
}

uint64_t _IMDPersistenceIPCCopyConnectionWithForceNew(int a1)
{
  if (qword_1EB5ABF28 != -1)
  {
    dispatch_once(&qword_1EB5ABF28, &unk_1F084CD20);
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (a1) {
LABEL_3:
  }
    sub_1AFB937C0();
LABEL_4:
  pthread_mutex_lock(&stru_1EB5AB978);
  uint64_t v2 = (void *)qword_1EB5ABF18;
  if (qword_1EB5ABF18
    || (qword_1EB5ABF18 = IMXPCCreateConnectionForServiceWithQueue(),
        IMXPCConfigureConnection(),
        (uint64_t v2 = (void *)qword_1EB5ABF18) != 0))
  {
    qword_1EB5ABF30 = (uint64_t)xpc_retain(v2);
  }
  pthread_mutex_unlock(&stru_1EB5AB978);
  return qword_1EB5ABF30;
}

void IMDPersistencePerformBlock(void *a1, int a2)
{
  if (a1)
  {
    if (byte_1EB5ABD00)
    {
      IMDSharedThreadedRecordStore();
      CSDBPerformBlock();
    }
    else
    {
      id v3 = (id)[a1 copy];
      if (qword_1E9AF83D8 != -1)
      {
        id v5 = v3;
        dispatch_once(&qword_1E9AF83D8, &unk_1F084C340);
        id v3 = v5;
      }
      int v4 = qword_1E9AF83D0;
      if (qword_1E9AF83D0)
      {
        if (a2)
        {
          dispatch_sync(v4, v3);
        }
        else
        {
          dispatch_async(v4, v3);
        }
      }
    }
  }
}

BOOL _IMDSqlOperationRunQuery(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4)
{
  if (!a1 && (CFBooleanRef v8 = IMLogHandleForCategory(), os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC64044();
    if (theString) {
      goto LABEL_6;
    }
  }
  else if (theString)
  {
    goto LABEL_6;
  }
  uint64_t v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1AFC63F9C();
  }
LABEL_6:
  if (!a1) {
    return 0;
  }
  _IMDSqlOperationBeginQuery(a1, theString);
  uint64_t v10 = *(void *)(a1 + 168);
  if (a3 && !v10)
  {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
    uint64_t v10 = *(void *)(a1 + 168);
  }
  if (a4 && !v10) {
    (*(void (**)(uint64_t))(a4 + 16))(a4);
  }
  IMDSqlOperationFinishQuery(a1);
  if (*(void *)(a1 + 168))
  {
    uint64_t v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1AFC63F10(a1, v11);
    }
  }
  return *(void *)(a1 + 168) == 0;
}

BOOL _IMDSqlOperationBeginQuery(uint64_t a1, CFStringRef theString)
{
  if (!a1 && (int v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC695A0();
    if (theString) {
      goto LABEL_6;
    }
  }
  else if (theString)
  {
    goto LABEL_6;
  }
  id v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1AFC694F8();
  }
LABEL_6:
  if (!a1) {
    return 0;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC69450();
    }
  }
  if (!*(void *)(a1 + 8))
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC693A8();
    }
    if (!*(void *)(a1 + 8)) {
      return 0;
    }
  }
  if (*(void *)(a1 + 168))
  {
    CFBooleanRef v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6932C(a1);
    }
    uint64_t v9 = *(const void **)(a1 + 168);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 168) = 0;
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 56) = *(void *)(v10 + 8);
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 40) = 100;
  *(_DWORD *)(a1 + 72) = 0;
  if (theString)
  {
    CFStringRef v11 = *(const __CFString **)(a1 + 48);
    if (v11 != theString)
    {
      if (v11)
      {
        char v12 = IMLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          sub_1AFC69284();
        }
        long long v13 = *(const void **)(a1 + 48);
        if (v13)
        {
          CFRelease(v13);
          *(void *)(a1 + 48) = 0;
        }
      }
      CFIndex Length = CFStringGetLength(theString);
      if (CFStringGetCharacterAtIndex(theString, Length - 1) == 59) {
        xpc_object_t v15 = (void *)CFRetain(theString);
      }
      else {
        xpc_object_t v15 = (void *)CFStringCreateWithFormat(0, 0, @"%@;", theString);
      }
      *(void *)(a1 + 48) = v15;
      if (!v15)
      {
        v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_1AFC691DC();
        }
      }
    }
  }
  else
  {
    uint64_t v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1AFC69134();
    }
  }
  v19 = (char *)CSDBCreateUTF8StringFromCFString();
  ppStmt = 0;
  do
    int v20 = sqlite3_prepare_v2(*(sqlite3 **)(v10 + 8), v19, -1, &ppStmt, 0);
  while ((v20 - 5) < 2);
  int v21 = v20;
  if (v19) {
    free(v19);
  }
  BOOL v22 = (v21 - 100) < 2 || v21 == 0;
  if (v22 || (ErrorCode = IMDCreateCFErrorWithQueryErrorCode(v21, *(sqlite3 **)(a1 + 56), *(void *)(a1 + 48))) == 0)
  {
    xpc_object_t v23 = ppStmt;
    *(void *)(a1 + 32) = ppStmt;
    if (!v23)
    {
      v24 = IMLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6908C();
      }
    }
  }
  else
  {
    v26 = ErrorCode;
    IMDSqlOperationSetError(a1, ErrorCode);
    CFRelease(v26);
  }
  return *(void *)(a1 + 168) == 0;
}

BOOL IMDSqlOperationFinishQuery(uint64_t a1)
{
  if (a1)
  {
    if (!*(void *)(a1 + 168) && *(void *)(a1 + 32))
    {
      while (IMDSqlOperationHasRows(a1))
        ;
    }
    sub_1AFB58750(a1);
    return *(void *)(a1 + 168) == 0;
  }
  else
  {
    id v3 = IMLogHandleForCategory();
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1AFC696F0();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationHasRows(uint64_t a1)
{
  if (a1)
  {
    if (!*(void *)(a1 + 48) || !*(void *)(a1 + 32))
    {
      uint64_t v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC69840();
      }
      if (!*(void *)(a1 + 32)) {
        return 0;
      }
    }
    if (!*(_DWORD *)(a1 + 72) || (int v3 = *(_DWORD *)(a1 + 40), v3 == 100))
    {
      int v3 = CSDBSqliteStepWithConnection();
      *(_DWORD *)(a1 + 40) = v3;
      ++*(_DWORD *)(a1 + 72);
      if ((v3 - 100) >= 2 && v3 != 0)
      {
        ErrorCode = IMDCreateCFErrorWithQueryErrorCode(v3, *(sqlite3 **)(a1 + 56), *(void *)(a1 + 48));
        if (ErrorCode)
        {
          CFBooleanRef v8 = ErrorCode;
          IMDSqlOperationSetError(a1, ErrorCode);
          CFRelease(v8);
          return 0;
        }
        int v3 = *(_DWORD *)(a1 + 40);
      }
    }
    return v3 == 100;
  }
  uint64_t v6 = IMLogHandleForCategory();
  BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  sub_1AFC69798();
  return 0;
}

BOOL IMDRunSqlOperation(uint64_t a1)
{
  if (a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v4);
    (*(void (**)(uint64_t, long long *))(a1 + 16))(a1, &v4);
  }
  else
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC640EC();
    }
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v4);
  }
  return IMDSqlOperationRelease((uint64_t)&v4, 0);
}

BOOL IMDSqlOperationRelease(uint64_t a1, void *a2)
{
  if (a1)
  {
    sub_1AFB58750(a1);
    uint64_t v4 = *(void *)(a1 + 168);
    BOOL v5 = v4 == 0;
    if (v4) {
      IMDSqlOperationGetError(a1, a2);
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t v6 = *(void *)(a1 + 168);
      long long v7 = IMLogHandleForCategory();
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8) {
          sub_1AFC6A064(a1);
        }
        IMDSqlOperationRevertTransaction((void *)a1);
      }
      else
      {
        if (v8) {
          sub_1AFC6A020(v7);
        }
        IMDSqlOperationCommitTransaction((void *)a1);
      }
      long long v10 = *(const void **)(a1 + 16);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(a1 + 16) = 0;
      }
    }
    if (*(void *)(a1 + 8))
    {
      CSDBSqliteDatabaseReleaseSqliteConnection();
      *(void *)(a1 + 8) = 0;
    }
    long long v11 = *(const void **)(a1 + 168);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 168) = 0;
    }
    long long v12 = *(void **)(a1 + 24);
    if (v12)
    {
      *(void *)(a1 + 24) = 0;
    }
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    long long v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1AFC69F78();
    }
    return 0;
  }
  return v5;
}

void IMDSqlOperationInitWithSharedCSDBDatabase(uint64_t a1@<X8>)
{
  IMDEnsureSharedRecordStoreInitialized();
  uint64_t v2 = IMDSharedSqliteDatabase();
  if (!v2)
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65B78();
    }
  }
  IMDSqlOperationInitWithCSDBDatabase(v2, a1);
}

void IMDEnsureSharedRecordStoreInitialized()
{
  IMDPersistenceCheckDatabaseThread();
  if (IMDSharedThreadedRecordStore())
  {
    _IMDSMSRecordStoreInitializeSharedThreadedRecordStore();
  }
  else
  {
    v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D61C();
    }
  }
}

BOOL IMDPersistenceCheckDatabaseThread()
{
  if (!byte_1EB5ABD00) {
    return 1;
  }
  IMDSharedThreadedRecordStore();
  if (CSDBThreadedRecordStoreOwnsCurrentThread()) {
    return 1;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "**************************************************************************", buf, 2u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "****** Database access off the database thread, please file a radar ******", v6, 2u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v5 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "**************************************************************************", v5, 2u);
    }
  }
  if (qword_1E9AF83C0 != -1) {
    dispatch_once(&qword_1E9AF83C0, &unk_1F084C7E8);
  }
  uint64_t v4 = qword_1E9AF83C8;
  BOOL result = os_log_type_enabled((os_log_t)qword_1E9AF83C8, OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_1AFC71990(v4);
    return 0;
  }
  return result;
}

void IMDSqlOperationInitWithCSDBDatabase(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"database", "IMDSqlOperation IMDSqlOperationInitWithCSDBDatabase(CSDBSqliteDatabase *)", IMFileLocationTrimFileName(), 89, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    BOOL v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v10 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v7 = CSDBSqliteDatabaseConnectionForWriting();
  if (!v7)
  {
    BOOL v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65ACC();
    }
  }
  IMDSqlOperationInitWithCSDBConnection(v7, a1, a2);
}

void IMDSqlOperationInitWithCSDBConnection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"db", "IMDSqlOperation IMDSqlOperationInitWithCSDBConnection(CSDBSqliteConnection *, CSDBSqliteDatabase *)", IMFileLocationTrimFileName(), 74, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      BOOL v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v13 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a1)
  {
    uint64_t v9 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"connection", "IMDSqlOperation IMDSqlOperationInitWithCSDBConnection(CSDBSqliteConnection *, CSDBSqliteDatabase *)", IMFileLocationTrimFileName(), 75, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v13 = v9;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = a1;
  IMDSqlOperationWasInitialized((void *)a3);
}

void IMDSqlOperationWasInitialized(void *a1)
{
  if (!a1 || !a1[1] || !*a1)
  {
    uint64_t v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64BCC(v1);
    }
  }
}

uint64_t IMDSharedSqliteDatabase()
{
  return sub_1AFB58D60(0);
}

sqlite3_stmt *sub_1AFB58750(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 48) = 0;
    if (!*(void *)(a1 + 168) && !*(_DWORD *)(a1 + 72))
    {
      int v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1AFC698E8();
      }
    }
  }
  BOOL result = *(sqlite3_stmt **)(a1 + 32);
  if (result)
  {
    BOOL result = (sqlite3_stmt *)sqlite3_finalize(result);
    *(void *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

BOOL sub_1AFB587D4(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v19 = *MEMORY[0x1E4F6DF50];
    uint64_t v18 = *MEMORY[0x1E4F6DF58];
    uint64_t v17 = *MEMORY[0x1E4F6DF40];
    uint64_t v16 = *MEMORY[0x1E4F6DF48];
    do
    {
      uint64_t v38 = 0;
      v39 = &v38;
      uint64_t v40 = 0x3032000000;
      v41 = sub_1AFC07868;
      v42 = sub_1AFC07878;
      id v43 = 0;
      uint64_t v34 = 0;
      v35 = &v34;
      uint64_t v36 = 0x2020000000;
      uint64_t v37 = 0;
      uint64_t v30 = 0;
      v31 = &v30;
      uint64_t v32 = 0x2020000000;
      uint64_t v33 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = &v26;
      uint64_t v28 = 0x2020000000;
      uint64_t v29 = 0;
      uint64_t v22 = 0;
      xpc_object_t v23 = &v22;
      uint64_t v24 = 0x2020000000;
      uint64_t v25 = 0;
      uint64_t v3 = *(void *)(a1 + 40);
      v21[0] = v20;
      v21[1] = 3221225472;
      v21[2] = sub_1AFC0BE0C;
      v21[3] = &unk_1E5F90150;
      v21[4] = &v38;
      v21[5] = &v34;
      v21[6] = &v30;
      v21[7] = &v26;
      v21[8] = &v22;
      IMDSqlOperationIterateRow(v3, (uint64_t)v21);
      if ([(id)v39[5] length] && (uint64_t v4 = v35[3]) != 0 && v27[3] && v23[3])
      {
        uint64_t v5 = v31[3];
        v44[0] = v19;
        uint64_t v6 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v4];
        v45[0] = v6;
        v44[1] = v18;
        uint64_t v7 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v4 - v5];
        v45[1] = v7;
        v44[2] = v17;
        BOOL v8 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v27[3]];
        v45[2] = v8;
        v44[3] = v16;
        uint64_t v9 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v23[3]];
        v45[3] = v9;
        uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v45 forKeys:v44 count:4];

        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v10 forKeyedSubscript:v39[5]];
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = v39[5];
          uint64_t v13 = v35[3];
          uint64_t v14 = v27[3];
          uint64_t v15 = v23[3];
          *(_DWORD *)long long buf = 138413058;
          uint64_t v47 = v12;
          __int16 v48 = 2048;
          uint64_t v49 = v13;
          __int16 v50 = 2048;
          uint64_t v51 = v14;
          __int16 v52 = 2048;
          uint64_t v53 = v15;
          _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Error in column values returned: %@|%llu|%llu|%llu", buf, 0x2Au);
        }
      }
      _Block_object_dispose(&v22, 8);
      _Block_object_dispose(&v26, 8);
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v34, 8);
      _Block_object_dispose(&v38, 8);

      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFB58BE8()
{
}

BOOL sub_1AFB58C40(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB587D4;
  v3[3] = &unk_1E5F90178;
  void v3[4] = *(void *)(a1 + 32);
  v3[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"WITH recoverable_tables_union_all (chat_guid, message_id, delete_date) as( SELECT c.guid, crmj.message_id, crmj.delete_date  FROM chat_recoverable_message_join AS crmj  JOIN chat AS c  ON c.ROWID = crmj.chat_id   UNION ALL  SELECT c.guid, rmp.message_id, rmp.delete_date  FROM recoverable_message_part AS rmp  JOIN chat AS c  ON c.ROWID = rmp.chat_id) SELECT chat_guid, COUNT(message_id), SUM(m.is_read), MIN(delete_date), MAX(delete_date)  FROM recoverable_tables_union_all AS rtua  JOIN message as m  ON rtua.message_id = m.ROWID  WHERE m.item_type == 0 AND NOT (m.group_action_type IN (1,3) AND (m.ROWID IN (SELECT message_id FROM message_attachment_join)))  GROUP BY rtua.chat_guid;",
           (uint64_t)&unk_1F084C3C0,
           (uint64_t)v3);
}

void sub_1AFB58CCC(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_value(xdict, "recoverableMessagesMetadataDictionary");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _codableDictionaryCopiedFromXPCDictionary:v6 objectClass:objc_opt_class()];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

uint64_t sub_1AFB58D60(int a1)
{
  if (!IMDSharedThreadedRecordStore())
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D1AC();
    }
  }
  uint64_t v3 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
  if (!v3 && a1)
  {
    CSDBPerformBlock();
    uint64_t v3 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
  }
  if (!v3)
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D104();
    }
  }
  return v3;
}

__CFString *sub_1AFB58E20(__CFString *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v5 = [v3 subpredicates];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = sub_1AFB58FD4(a1, *(void *)(*((void *)&v15 + 1) + 8 * i));
          [v4 addObject:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }

    uint64_t v11 = NSString;
    uint64_t v12 = sub_1AFB593B4(a1, [v3 compoundPredicateType]);
    uint64_t v13 = [v4 componentsJoinedByString:v12];
    a1 = [v11 stringWithFormat:@"( %@)", v13];
  }
  return a1;
}

__CFString *sub_1AFB58FD4(__CFString *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v4 = sub_1AFB590A0(a1, v3);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v6 = [MEMORY[0x1E4F1CA00] exceptionWithName:0, @"Invalid predicate, unsupported predicate type", 0 reason userInfo];
        objc_exception_throw(v6);
      }
      uint64_t v4 = sub_1AFB58E20(a1, v3);
    }
    a1 = (__CFString *)v4;
  }

  return a1;
}

__CFString *sub_1AFB590A0(__CFString *a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = [v3 leftExpression];
    uint64_t v5 = sub_1AFB59198(v2, v4);

    id v6 = [v3 rightExpression];
    uint64_t v7 = sub_1AFB59198(v2, v6);

    uint64_t v8 = [v3 predicateOperatorType];
    uint64_t v9 = sub_1AFB592EC(v2, v8);
    uint64_t v2 = [NSString stringWithFormat:@"( %@ %@ %@)", v5, v9, v7];
  }
  return v2;
}

id sub_1AFB59198(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = [v3 expressionType];
    if (v5)
    {
      if (v5 != 3)
      {
        id v13 = [MEMORY[0x1E4F1CA00] exceptionWithName:0, @"Invalid predicate, contains unsupported expression type", 0 reason userInfo];
        objc_exception_throw(v13);
      }
      id v6 = [a1 keyPathsToColumns];
      uint64_t v7 = [v4 keyPath];
      a1 = [v6 objectForKeyedSubscript:v7];

      if (!a1)
      {
        uint64_t v8 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v9 = [NSString stringWithFormat:@"Invalid predicate, unsupported column %@", 0];
        id v10 = [v8 exceptionWithName:0 reason:v9 userInfo:0];

        objc_exception_throw(v10);
      }
    }
    else
    {
      uint64_t v11 = [v4 constantValue];
      a1 = sub_1AFB59414((id *)a1, v11);
    }
  }

  return a1;
}

__CFString *sub_1AFB592EC(__CFString *result, uint64_t a2)
{
  if (result)
  {
    BOOL result = @"==";
    switch(a2)
    {
      case 0:
        return @"<";
      case 1:
        return @"<=";
      case 2:
        return @">";
      case 3:
        return @">=";
      case 4:
        return result;
      case 5:
        return @"!=";
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_12;
      case 10:
        return @"IN";
      default:
        if (a2 != 100)
        {
LABEL_12:
          id v4 = [MEMORY[0x1E4F1CA00] exceptionWithName:0, @"Invalid predicate, contains unsupported operator", 0, v2, v3 reason userInfo];
          objc_exception_throw(v4);
        }
        BOOL result = @"BETWEEN";
        break;
    }
  }
  return result;
}

__CFString *sub_1AFB593B4(__CFString *result, uint64_t a2)
{
  if (result)
  {
    if (a2 == 1)
    {
      return @" AND ";
    }
    else
    {
      if (a2 != 2)
      {
        id v4 = [MEMORY[0x1E4F1CA00] exceptionWithName:0, @"Invalid predicate, contains unsupported compound predicate type", 0, v2, v3 reason userInfo];
        objc_exception_throw(v4);
      }
      return @" OR ";
    }
  }
  return result;
}

id *sub_1AFB59414(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_1AFC0DE90(a1, v3);
      a1 = (id *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((sub_1AFB5950C((uint64_t)a1, v3) & 1) == 0)
      {
        uint64_t v5 = (void *)MEMORY[0x1E4F1CA00];
        id v6 = [NSString stringWithFormat:@"Invalid predicate, unsupported constant %@", v3];
        id v7 = [v5 exceptionWithName:0 reason:v6 userInfo:0];

        objc_exception_throw(v7);
      }
      [a1[3] addObject:v3];
      a1 = (id *)@"?";
    }
  }

  return a1;
}

uint64_t sub_1AFB5950C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      LOBYTE(a1) = 1;
    }
    else
    {
      objc_opt_class();
      LOBYTE(a1) = objc_opt_isKindOfClass();
    }
  }

  return a1 & 1;
}

uint64_t _IMDPerformLockedStatementBlockWithQuery(uint64_t a1, uint64_t a2)
{
  if (!a2 && (id v3 = IMLogHandleForCategory(), os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC65438();
    if (a1) {
      goto LABEL_6;
    }
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  id v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1AFC65390();
  }
LABEL_6:
  IMDEnsureSharedRecordStoreInitialized();
  IMDSharedThreadedRecordStore();
  return CSDBPerformLockedSectionForQueryForReading();
}

void _IMDChatRecordCopyChatsToXPCArray(const __CFArray *a1, void *a2, char a3, char a4, char a5, int a6)
{
  if (a1)
  {
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        for (CFIndex i = 0; i != v12; ++i)
        {
          uint64_t v14 = (void *)MEMORY[0x1B3E8A120]();
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
          if (v16)
          {
            long long v17 = v16;
            _IMDChatRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v16, a3, a4, a5, a6);
            xpc_array_append_value(a2, v17);
            xpc_release(v17);
          }
        }
      }
    }
  }
}

id _IMDChatRecordCopyChatsFromXPCArray(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:xpc_array_get_count(a1)];
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFBD2210;
    applier[3] = &unk_1E5F93EB8;
    applier[4] = v2;
    xpc_array_apply(a1, applier);
    return (id)v2;
  }
  else
  {
    id v4 = (objc_class *)MEMORY[0x1E4F1C978];
    return objc_alloc_init(v4);
  }
}

id _IMDChatRecordCopyChatsFromRecords(void *a1)
{
  if (a1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a1, "count"));
    if ([a1 count])
    {
      unint64_t v3 = 0;
      uint64_t v4 = *MEMORY[0x1E4F1CF80];
      do
      {
        [a1 objectAtIndex:v3];
        int ID = CSDBRecordGetID();
        id v6 = sub_1AFBCE51C(v4, ID, 0);
        if (v6)
        {
          id v7 = v6;
          [v2 addObject:v6];
          CFRelease(v7);
        }
        ++v3;
      }
      while (v3 < [a1 count]);
    }
    return v2;
  }
  else
  {
    uint64_t v9 = (objc_class *)MEMORY[0x1E4F1C978];
    return objc_alloc_init(v9);
  }
}

uint64_t IMDChatRecordCopyChatsSortedByLastMessageDateAndFilteredUsingPredicateWithLimitQuery(int a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v5 = (__CFString *)[NSString stringWithFormat:@"AND (%@)", a3];
  }
  else {
    uint64_t v5 = &stru_1F084E970;
  }
  if (a1) {
    id v6 = @"ASC";
  }
  else {
    id v6 = @"DESC";
  }
  id v7 = [NSString alloc];
  if (a2) {
    uint64_t v8 = @"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join ON    chat_message_join.chat_id == chat.rowid    AND chat_message_join.message_date = (SELECT MAX(message_date) FROM chat_message_join WHERE chat_message_join.chat_id = chat.rowid) WHERE    chat.is_archived = 0 %@ GROUP BY    chat.rowid HAVING    chat_message_join.message_date < ? ORDER BY    chat_message_join.message_date %@ LIMIT    ?;";
  }
  else {
    uint64_t v8 = @"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join ON    chat_message_join.chat_id == chat.rowid    AND chat_message_join.message_date = (SELECT MAX(message_date) FROM chat_message_join WHERE chat_message_join.chat_id = chat.rowid) WHERE    chat.is_archived = 0 %@ GROUP BY    chat.rowid ORDER BY    chat_message_join.message_date %@ LIMIT    ?;";
  }
  return objc_msgSend(v7, "initWithFormat:", v8, v5, v6);
}

void __IMDPersistenceIPCServer_peer_event_handler(_xpc_connection_s *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1B3E8AD60](a2);
  if (v4 == MEMORY[0x1E4F145A8])
  {
    if (a2 == (void *)MEMORY[0x1E4F14528])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(a1);
          _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "peer(%d) received XPC_ERROR_CONNECTION_INVALID", buf, 8u);
        }
      }
      xpc_connection_cancel(a1);
      goto LABEL_28;
    }
    if (a2 == (void *)MEMORY[0x1E4F14520])
    {
      if (!IMOSLoggingEnabled()) {
        goto LABEL_28;
      }
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_28;
      }
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(a1);
      id v10 = "peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED";
    }
    else
    {
      if (a2 != (void *)MEMORY[0x1E4F14550]) {
        goto LABEL_28;
      }
      if (!IMOSLoggingEnabled()) {
        goto LABEL_28;
      }
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_28;
      }
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(a1);
      id v10 = "peer(%d) received XPC_ERROR_TERMINATION_IMMINENT";
    }
    _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, v10, buf, 8u);
LABEL_28:
    if ((byte_1EB5ABB48 & 1) == 0)
    {
      byte_1EB5ABB48 = 1;
      IMDPersistencePerformBlockAfterDelay(&unk_1F084D758, 3.0);
    }
    return;
  }
  if (v4 != MEMORY[0x1E4F14590]) {
    goto LABEL_28;
  }
  int64_t int64 = xpc_dictionary_get_int64(a2, "__xpc__event_code__");
  *(_OWORD *)long long buf = 0u;
  long long v21 = 0u;
  xpc_connection_get_audit_token();
  memset(v19, 0, sizeof(v19));
  if (__IMDPersistenceCheckEntitlements((uint64_t)v19, int64))
  {
    int64_t v6 = xpc_dictionary_get_int64(a2, "__xpc_wants_reply__");
    xpc_retain(a2);
    xpc_retain(a1);
    uint64_t v7 = os_transaction_create();
    if (v6) {
      xpc_object_t reply = xpc_dictionary_create_reply(a2);
    }
    else {
      xpc_object_t reply = 0;
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1AFB56890;
    v18[3] = &unk_1E5F958C0;
    BOOL v16 = v6 != 0;
    v18[4] = reply;
    v18[5] = a1;
    v18[6] = a2;
    v18[7] = v7;
    long long v17 = (void (**)(void))[v18 copy];
    __IMDPersistenceIPCServer_command_dispatcher(int64, a1, a2, v16, (uint64_t)reply, (uint64_t)v17);
    if (!v16) {
      v17[2](v17);
    }

    goto LABEL_28;
  }
  pid_t pid = xpc_connection_get_pid(a1);
  if (IMOSLoggingEnabled())
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = sub_1AFC56118(int64);
      uint64_t v15 = IMProcessNameForPid();
      *(_DWORD *)uint64_t v19 = 138412802;
      *(void *)&v19[4] = v14;
      *(_WORD *)&v19[12] = 2112;
      *(void *)&v19[14] = v15;
      *(_WORD *)&v19[22] = 1024;
      *(_DWORD *)&v19[24] = pid;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Denying xpc connection, task does not have entitlement for message: %@  (%@:%d)", v19, 0x1Cu);
    }
  }
  xpc_connection_cancel(a1);
}

void sub_1AFB59E70(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB59E14);
  }
  _Unwind_Resume(a1);
}

uint64_t __IMDPersistenceIPCServer_command_dispatcher(unint64_t a1, _xpc_connection_s *a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v1315 = *MEMORY[0x1E4F143B8];
  CFIndex v12 = _os_activity_create(&dword_1AFB53000, "com.apple.messages.IMDPCommandDispatcher", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v12, &state);
  pid_t pid = xpc_connection_get_pid(a2);
  uint64_t v14 = sub_1AFC56118(a1);
  uint64_t v15 = IMOSLoggingEnabled();
  if (v15)
  {
    long long v17 = OSLogHandleForIMFoundationCategory();
    uint64_t v15 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    if (v15)
    {
      uint64_t v18 = IMProcessNameForPid();
      uint64_t v19 = @"NO";
      *(_DWORD *)long long buf = 134219010;
      unint64_t v1306 = a1;
      __int16 v1307 = 2112;
      if (a4) {
        uint64_t v19 = @"YES";
      }
      v1308 = v14;
      __int16 v1309 = 1024;
      pid_t v1310 = pid;
      __int16 v1311 = 2112;
      uint64_t v1312 = v18;
      __int16 v1313 = 2112;
      v1314 = v19;
      _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Handling message %ld/%@ from (%d: %@) wantsReply %@", buf, 0x30u);
    }
  }
  uint64_t v20 = -1;
  switch(a1)
  {
    case 0uLL:
      if (a4) {
        uint64_t v21 = a5;
      }
      else {
        uint64_t v21 = 0;
      }
      if (a4) {
        uint64_t v22 = a6;
      }
      else {
        uint64_t v22 = 0;
      }
      __XPCServerIMDMessageStoreSave_IPCAction(v15, v16, v21, v22);
      uint64_t v20 = 0;
      break;
    case 1uLL:
      if (a4) {
        uint64_t v251 = a5;
      }
      else {
        uint64_t v251 = 0;
      }
      if (a4) {
        uint64_t v252 = a6;
      }
      else {
        uint64_t v252 = 0;
      }
      __XPCServerIMDMessageStoreIsFull_IPCAction(v15, v16, v251, v252);
      uint64_t v20 = 1;
      break;
    case 2uLL:
      if (a4) {
        uint64_t v253 = a5;
      }
      else {
        uint64_t v253 = 0;
      }
      if (a4) {
        uint64_t v254 = a6;
      }
      else {
        uint64_t v254 = 0;
      }
      __XPCServerIMDMessageStoreSchemaVersion_IPCAction(v15, v16, v253, v254);
      uint64_t v20 = 2;
      break;
    case 3uLL:
      if (a4) {
        uint64_t v23 = a5;
      }
      else {
        uint64_t v23 = 0;
      }
      if (a4) {
        uint64_t v24 = a6;
      }
      else {
        uint64_t v24 = 0;
      }
      __XPCServerIMDMessageStoreSchema_IPCAction(v15, v16, v23, v24);
      uint64_t v20 = 3;
      break;
    case 4uLL:
      uint64_t v1293 = IMGetXPCStringFromDictionary();
      int int64 = xpc_dictionary_get_int64(a3, "createdDate");
      int v1266 = xpc_dictionary_get_int64(a3, "startDate");
      uint64_t v1256 = IMGetXPCStringFromDictionary();
      uint64_t v1248 = IMGetXPCStringFromDictionary();
      uint64_t v1242 = IMGetXPCStringFromDictionary();
      uint64_t v1236 = IMGetXPCStringFromDictionary();
      int v1230 = xpc_dictionary_get_int64(a3, "transferState");
      char v1224 = xpc_dictionary_get_BOOL(a3, "isOutgoing");
      uint64_t v1218 = IMGetXPCDictionaryFromDictionary();
      uint64_t v1212 = IMGetXPCIntFromDictionary();
      char v1206 = xpc_dictionary_get_BOOL(a3, "isSticker");
      uint64_t v1200 = IMGetXPCDictionaryFromDictionary();
      uint64_t v1194 = IMGetXPCDictionaryFromDictionary();
      char v1188 = xpc_dictionary_get_BOOL(a3, "hideAttachment");
      int v1182 = xpc_dictionary_get_int64(a3, "cloudKitSyncState");
      uint64_t v1176 = IMGetXPCDataFromDictionary();
      uint64_t v1170 = IMGetXPCStringFromDictionary();
      uint64_t v1164 = IMGetXPCStringFromDictionary();
      int64_t v1158 = xpc_dictionary_get_int64(a3, "isCommSafetySensitive");
      uint64_t v255 = IMGetXPCStringFromDictionary();
      uint64_t v256 = IMGetXPCStringFromDictionary();
      int64_t v257 = xpc_dictionary_get_int64(a3, "previewGenerationState");
      if (a4) {
        uint64_t v259 = a5;
      }
      else {
        uint64_t v259 = 0;
      }
      if (a4) {
        uint64_t v260 = a6;
      }
      else {
        uint64_t v260 = 0;
      }
      *(void *)&long long v1072 = v1176;
      *((void *)&v1072 + 1) = v1170;
      *((void *)&v1053 + 1) = v1242;
      *(void *)&long long v1053 = v1248;
      __XPCServerIMDAttachmentRecordCreate_IPCAction(v257, v258, v259, v260, v1293, int64, v1266, v1256, v1053, v1236, v1230, v1224, v1212, v1218, v1206, v1200, v1194, v1188, v1182,
        v1072,
        v1164,
        v1158,
        v255,
        v256,
        v257);
      uint64_t v20 = 4;
      break;
    case 5uLL:
      uint64_t v25 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v27 = a5;
      }
      else {
        uint64_t v27 = 0;
      }
      if (a4) {
        uint64_t v28 = a6;
      }
      else {
        uint64_t v28 = 0;
      }
      __XPCServerIMDAttachmentRecordRIDForGUID_IPCAction(v25, v26, v27, v28, v25);
      uint64_t v20 = 5;
      break;
    case 6uLL:
      uint64_t v261 = IMGetXPCStringFromDictionary();
      BOOL v262 = xpc_dictionary_get_BOOL(a3, "isLegacyGUID");
      if (a4) {
        uint64_t v264 = a5;
      }
      else {
        uint64_t v264 = 0;
      }
      if (a4) {
        uint64_t v265 = a6;
      }
      else {
        uint64_t v265 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentForGUID_IPCAction(v262, v263, v264, v265, v261, v262);
      uint64_t v20 = 6;
      break;
    case 7uLL:
      uint64_t v29 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v31 = a5;
      }
      else {
        uint64_t v31 = 0;
      }
      if (a4) {
        uint64_t v32 = a6;
      }
      else {
        uint64_t v32 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyStickerAttachmentForStickerCachePath_IPCAction(v29, v30, v31, v32, v29);
      uint64_t v20 = 7;
      break;
    case 8uLL:
      uint64_t v33 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v35 = a5;
      }
      else {
        uint64_t v35 = 0;
      }
      if (a4) {
        uint64_t v36 = a6;
      }
      else {
        uint64_t v36 = 0;
      }
      __XPCServerIMDAttachmentRecordDeleteAttachmentForGUID_IPCAction(v33, v34, v35, v36, v33);
      uint64_t v20 = 8;
      break;
    case 9uLL:
      int64_t v37 = xpc_dictionary_get_int64(a3, "days");
      if (a4) {
        uint64_t v39 = a5;
      }
      else {
        uint64_t v39 = 0;
      }
      if (a4) {
        uint64_t v40 = a6;
      }
      else {
        uint64_t v40 = 0;
      }
      __XPCServerIMDAttachmentRecordDeleteAttachmentsOlderThanDays_IPCAction(v37, v38, v39, v40, v37);
      uint64_t v20 = 9;
      break;
    case 0xAuLL:
      uint64_t v266 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v268 = a5;
      }
      else {
        uint64_t v268 = 0;
      }
      if (a4) {
        uint64_t v269 = a6;
      }
      else {
        uint64_t v269 = 0;
      }
      __XPCServerIMDAttachmentRecordDoesAttachmentWithGUIDExist_IPCAction(v266, v267, v268, v269, v266);
      uint64_t v20 = 10;
      break;
    case 0xBuLL:
      uint64_t v41 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v43 = a5;
      }
      else {
        uint64_t v43 = 0;
      }
      if (a4) {
        uint64_t v44 = a6;
      }
      else {
        uint64_t v44 = 0;
      }
      __XPCServerIMDAttachmentRecordDoesStickerPathHaveAttachments_IPCAction(v41, v42, v43, v44, v41);
      uint64_t v20 = 11;
      break;
    case 0xCuLL:
      int64_t v270 = xpc_dictionary_get_int64(a3, "numRecents");
      if (a4) {
        uint64_t v272 = a5;
      }
      else {
        uint64_t v272 = 0;
      }
      if (a4) {
        uint64_t v273 = a6;
      }
      else {
        uint64_t v273 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyRecentFilenames_IPCAction(v270, v271, v272, v273, v270);
      uint64_t v20 = 12;
      break;
    case 0xDuLL:
      if (IMOSLoggingEnabled())
      {
        v274 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v274, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v274, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction", buf, 2u);
        }
      }
      int64_t v275 = xpc_dictionary_get_int64(a3, "queryType");
      if (xpc_dictionary_get_value(a3, "afterRow")) {
        uint64_t v276 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "afterRow"));
      }
      else {
        uint64_t v276 = 0;
      }
      int64_t v1044 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v1046 = a5;
      }
      else {
        uint64_t v1046 = 0;
      }
      if (a4) {
        uint64_t v1047 = a6;
      }
      else {
        uint64_t v1047 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction(v1044, v1045, v1046, v1047, v275, v276, v1044);
      uint64_t v20 = 13;
      break;
    case 0xEuLL:
      if (IMOSLoggingEnabled())
      {
        v277 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v277, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v277, OS_LOG_TYPE_INFO, "IMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction", buf, 2u);
        }
      }
      int64_t v278 = xpc_dictionary_get_int64(a3, "rowid");
      int64_t v279 = xpc_dictionary_get_int64(a3, "syncState");
      if (a4) {
        uint64_t v281 = a5;
      }
      else {
        uint64_t v281 = 0;
      }
      if (a4) {
        uint64_t v282 = a6;
      }
      else {
        uint64_t v282 = 0;
      }
      __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction(v279, v280, v281, v282, v278, v279);
      uint64_t v20 = 14;
      break;
    case 0xFuLL:
      if (IMOSLoggingEnabled())
      {
        v45 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v45, OS_LOG_TYPE_INFO, "IMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction", buf, 2u);
        }
      }
      int64_t v46 = xpc_dictionary_get_int64(a3, "rowid");
      if (a4) {
        uint64_t v48 = a5;
      }
      else {
        uint64_t v48 = 0;
      }
      if (a4) {
        uint64_t v49 = a6;
      }
      else {
        uint64_t v49 = 0;
      }
      __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction(v46, v47, v48, v49, v46);
      uint64_t v20 = 15;
      break;
    case 0x10uLL:
      uint64_t v50 = IMOSLoggingEnabled();
      if (v50)
      {
        __int16 v52 = OSLogHandleForIMFoundationCategory();
        uint64_t v50 = os_log_type_enabled(v52, OS_LOG_TYPE_INFO);
        if (v50)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v52, OS_LOG_TYPE_INFO, "IMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction", buf, 2u);
        }
      }
      if (a4) {
        uint64_t v53 = a5;
      }
      else {
        uint64_t v53 = 0;
      }
      if (a4) {
        uint64_t v54 = a6;
      }
      else {
        uint64_t v54 = 0;
      }
      __XPCServerIMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction(v50, v51, v53, v54);
      uint64_t v20 = 16;
      break;
    case 0x11uLL:
      uint64_t v283 = IMOSLoggingEnabled();
      if (v283)
      {
        v285 = OSLogHandleForIMFoundationCategory();
        uint64_t v283 = os_log_type_enabled(v285, OS_LOG_TYPE_INFO);
        if (v283)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v285, OS_LOG_TYPE_INFO, "IMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction", buf, 2u);
        }
      }
      if (a4) {
        uint64_t v286 = a5;
      }
      else {
        uint64_t v286 = 0;
      }
      if (a4) {
        uint64_t v287 = a6;
      }
      else {
        uint64_t v287 = 0;
      }
      __XPCServerIMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction(v283, v284, v286, v287);
      uint64_t v20 = 17;
      break;
    case 0x12uLL:
      if (IMOSLoggingEnabled())
      {
        v55 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v55, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction", buf, 2u);
        }
      }
      uint64_t v56 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v58 = a5;
      }
      else {
        uint64_t v58 = 0;
      }
      if (a4) {
        uint64_t v59 = a6;
      }
      else {
        uint64_t v59 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction(v56, v57, v58, v59, v56);
      uint64_t v20 = 18;
      break;
    case 0x13uLL:
      if (IMOSLoggingEnabled())
      {
        v288 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v288, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v288, OS_LOG_TYPE_INFO, "IMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction", buf, 2u);
        }
      }
      uint64_t v289 = IMGetXPCStringFromDictionary();
      uint64_t v290 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v292 = a5;
      }
      else {
        uint64_t v292 = 0;
      }
      if (a4) {
        uint64_t v293 = a6;
      }
      else {
        uint64_t v293 = 0;
      }
      __XPCServerIMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction(v290, v291, v292, v293, v289, v290);
      uint64_t v20 = 19;
      break;
    case 0x14uLL:
      uint64_t v294 = IMOSLoggingEnabled();
      if (v294)
      {
        v296 = OSLogHandleForIMFoundationCategory();
        uint64_t v294 = os_log_type_enabled(v296, OS_LOG_TYPE_INFO);
        if (v294)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v296, OS_LOG_TYPE_INFO, "IMDAttachmentRecordGetPurgeableDiskSpace_IPCAction", buf, 2u);
        }
      }
      if (a4) {
        uint64_t v297 = a5;
      }
      else {
        uint64_t v297 = 0;
      }
      if (a4) {
        uint64_t v298 = a6;
      }
      else {
        uint64_t v298 = 0;
      }
      __XPCServerIMDAttachmentRecordGetPurgeableDiskSpace_IPCAction(v294, v295, v297, v298);
      uint64_t v20 = 20;
      break;
    case 0x15uLL:
      uint64_t v299 = IMOSLoggingEnabled();
      if (v299)
      {
        v301 = OSLogHandleForIMFoundationCategory();
        uint64_t v299 = os_log_type_enabled(v301, OS_LOG_TYPE_INFO);
        if (v299)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v301, OS_LOG_TYPE_INFO, "IMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction", buf, 2u);
        }
      }
      if (a4) {
        uint64_t v302 = a5;
      }
      else {
        uint64_t v302 = 0;
      }
      if (a4) {
        uint64_t v303 = a6;
      }
      else {
        uint64_t v303 = 0;
      }
      __XPCServerIMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction(v299, v300, v302, v303);
      uint64_t v20 = 21;
      break;
    case 0x16uLL:
      if (IMOSLoggingEnabled())
      {
        v304 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v304, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v304, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction", buf, 2u);
        }
      }
      int64_t v305 = xpc_dictionary_get_int64(a3, "bytesToFreeUp");
      if (a4) {
        uint64_t v307 = a5;
      }
      else {
        uint64_t v307 = 0;
      }
      if (a4) {
        uint64_t v308 = a6;
      }
      else {
        uint64_t v308 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction(v305, v306, v307, v308, v305);
      uint64_t v20 = 22;
      break;
    case 0x17uLL:
      if (IMOSLoggingEnabled())
      {
        v60 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v60, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction", buf, 2u);
        }
      }
      int64_t v61 = xpc_dictionary_get_int64(a3, "chatLimit");
      int64_t v62 = xpc_dictionary_get_int64(a3, "attachmentLimit");
      if (a4) {
        uint64_t v64 = a5;
      }
      else {
        uint64_t v64 = 0;
      }
      if (a4) {
        uint64_t v65 = a6;
      }
      else {
        uint64_t v65 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction(v62, v63, v64, v65, v61, v62);
      uint64_t v20 = 23;
      break;
    case 0x18uLL:
      if (IMOSLoggingEnabled())
      {
        v309 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v309, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v309, OS_LOG_TYPE_INFO, "IMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction", buf, 2u);
        }
      }
      int64_t v310 = xpc_dictionary_get_int64(a3, "watermark");
      if (a4) {
        uint64_t v312 = a5;
      }
      else {
        uint64_t v312 = 0;
      }
      if (a4) {
        uint64_t v313 = a6;
      }
      else {
        uint64_t v313 = 0;
      }
      __XPCServerIMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction(v310, v311, v312, v313, v310);
      uint64_t v20 = 24;
      break;
    case 0x19uLL:
      if (IMOSLoggingEnabled())
      {
        v314 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v314, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v314, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction", buf, 2u);
        }
      }
      int64_t v315 = xpc_dictionary_get_int64(a3, "bytesToFreeUp");
      int64_t v316 = xpc_dictionary_get_int64(a3, "startingOffset");
      if (a4) {
        uint64_t v318 = a5;
      }
      else {
        uint64_t v318 = 0;
      }
      if (a4) {
        uint64_t v319 = a6;
      }
      else {
        uint64_t v319 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction(v316, v317, v318, v319, v315, v316);
      uint64_t v20 = 25;
      break;
    case 0x1AuLL:
      int64_t v66 = xpc_dictionary_get_int64(a3, "numRecents");
      if (a4) {
        uint64_t v68 = a5;
      }
      else {
        uint64_t v68 = 0;
      }
      if (a4) {
        uint64_t v69 = a6;
      }
      else {
        uint64_t v69 = 0;
      }
      __XPCServerIMDAttachmentRecordDeleteAttachmentPreviewsOlderThan_IPCAction(v66, v67, v68, v69, v66);
      uint64_t v20 = 26;
      break;
    case 0x1BuLL:
      uint64_t v320 = IMGetXPCArrayFromDictionary();
      uint64_t v321 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v323 = a5;
      }
      else {
        uint64_t v323 = 0;
      }
      if (a4) {
        uint64_t v324 = a6;
      }
      else {
        uint64_t v324 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentGUIDsAndPathsForChatIdentifiersOnServices_IPCAction(v321, v322, v323, v324, v320, v321);
      uint64_t v20 = 27;
      break;
    case 0x1CuLL:
      uint64_t v325 = IMGetXPCArrayFromDictionary();
      uint64_t v326 = IMGetXPCArrayFromDictionary();
      uint64_t v327 = IMGetXPCIntFromDictionary();
      if (a4) {
        uint64_t v329 = a5;
      }
      else {
        uint64_t v329 = 0;
      }
      if (a4) {
        uint64_t v330 = a6;
      }
      else {
        uint64_t v330 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyPurgedAttachmentsForChatIdentifiersOnServices_IPCAction(v327, v328, v329, v330, v325, v326, v327);
      uint64_t v20 = 28;
      break;
    case 0x1DuLL:
      uint64_t v70 = IMGetXPCArrayFromDictionary();
      uint64_t v71 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v73 = a5;
      }
      else {
        uint64_t v73 = 0;
      }
      if (a4) {
        uint64_t v74 = a6;
      }
      else {
        uint64_t v74 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyPurgedAttachmentsCountForChatIdentifiersOnServices_IPCAction(v71, v72, v73, v74, v70, v71);
      uint64_t v20 = 29;
      break;
    case 0x1EuLL:
      int64_t v75 = xpc_dictionary_get_int64(a3, "numRecents");
      if (a4) {
        uint64_t v77 = a5;
      }
      else {
        uint64_t v77 = 0;
      }
      if (a4) {
        uint64_t v78 = a6;
      }
      else {
        uint64_t v78 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyStickers_IPCAction(v75, v76, v77, v78, v75);
      uint64_t v20 = 30;
      break;
    case 0x1FuLL:
      uint64_t v1287 = IMGetXPCStringFromDictionary();
      int v1273 = xpc_dictionary_get_int64(a3, "createdDate");
      int v1261 = xpc_dictionary_get_int64(a3, "startDate");
      uint64_t v1253 = IMGetXPCStringFromDictionary();
      uint64_t v1247 = IMGetXPCStringFromDictionary();
      uint64_t v1241 = IMGetXPCStringFromDictionary();
      uint64_t v1235 = IMGetXPCStringFromDictionary();
      int v1229 = xpc_dictionary_get_int64(a3, "transferState");
      char v1223 = xpc_dictionary_get_BOOL(a3, "isOutgoing");
      uint64_t v1217 = IMGetXPCDictionaryFromDictionary();
      uint64_t v1211 = IMGetXPCIntFromDictionary();
      char v1205 = xpc_dictionary_get_BOOL(a3, "isSticker");
      uint64_t v1199 = IMGetXPCDictionaryFromDictionary();
      uint64_t v1193 = IMGetXPCDictionaryFromDictionary();
      char v1187 = xpc_dictionary_get_BOOL(a3, "hideAttachment");
      int v1181 = xpc_dictionary_get_int64(a3, "cloudKitSyncState");
      uint64_t v1175 = IMGetXPCDataFromDictionary();
      uint64_t v1169 = IMGetXPCStringFromDictionary();
      uint64_t v1163 = IMGetXPCStringFromDictionary();
      int64_t v1157 = xpc_dictionary_get_int64(a3, "isCommSafetySensitive");
      uint64_t v79 = IMGetXPCStringFromDictionary();
      uint64_t v80 = IMGetXPCStringFromDictionary();
      int64_t v81 = xpc_dictionary_get_int64(a3, "previewGenerationState");
      if (a4) {
        uint64_t v83 = a5;
      }
      else {
        uint64_t v83 = 0;
      }
      if (a4) {
        uint64_t v84 = a6;
      }
      else {
        uint64_t v84 = 0;
      }
      *(void *)&long long v1071 = v1175;
      *((void *)&v1071 + 1) = v1169;
      *((void *)&v1052 + 1) = v1241;
      *(void *)&long long v1052 = v1247;
      __XPCServerIMDAttachmentRecordBulkUpdate_IPCAction(v81, v82, v83, v84, v1287, v1273, v1261, v1253, v1052, v1235, v1229, v1223, v1211, v1217, v1205, v1199, v1193, v1187, v1181,
        v1071,
        v1163,
        v1157,
        v79,
        v80,
        v81);
      uint64_t v20 = 31;
      break;
    case 0x20uLL:
      if (IMOSLoggingEnabled())
      {
        v1032 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v1032, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v1032, OS_LOG_TYPE_INFO, "In server for IMDAttachmentRecordDeleteAttachmentsDirectWithPredicate_IPCAction", buf, 2u);
        }
      }
      id v1033 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1034 = a5;
      }
      else {
        uint64_t v1034 = 0;
      }
      if (a4) {
        uint64_t v1035 = a6;
      }
      else {
        uint64_t v1035 = 0;
      }
      objc_msgSend(v1033, "handleDeleteAttachmentsDirectWithPredicate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1034, v1035);
      uint64_t v20 = 32;
      break;
    case 0x21uLL:
      if (IMOSLoggingEnabled())
      {
        v331 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v331, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v331, OS_LOG_TYPE_INFO, "In server for IMDAttachmentRecordCopyAttachmentsDirectWithPredicate_IPCAction", buf, 2u);
        }
      }
      id v332 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v333 = a5;
      }
      else {
        uint64_t v333 = 0;
      }
      if (a4) {
        uint64_t v334 = a6;
      }
      else {
        uint64_t v334 = 0;
      }
      objc_msgSend(v332, "handleIMDAttachmentRecordCopyFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v333, v334);
      uint64_t v20 = 33;
      break;
    case 0x22uLL:
      if (IMOSLoggingEnabled())
      {
        v335 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v335, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v335, OS_LOG_TYPE_INFO, "In server for IMDAttachmentRecordCopySortedAttachmentsFilteredUsingPredicateWithLimit_IPCAction", buf, 2u);
        }
      }
      id v336 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v337 = a5;
      }
      else {
        uint64_t v337 = 0;
      }
      if (a4) {
        uint64_t v338 = a6;
      }
      else {
        uint64_t v338 = 0;
      }
      objc_msgSend(v336, "handleIMDAttachmentRecordCopySortedAttachmentsFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v337, v338);
      uint64_t v20 = 34;
      break;
    case 0x23uLL:
      uint64_t v339 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v341 = a5;
      }
      else {
        uint64_t v341 = 0;
      }
      if (a4) {
        uint64_t v342 = a6;
      }
      else {
        uint64_t v342 = 0;
      }
      __XPCServerIMDCNRecordIDAndHistoryTokenForAliases_IPAction(v339, v340, v341, v342, v339);
      uint64_t v20 = 35;
      break;
    case 0x24uLL:
      uint64_t v85 = IMGetXPCDictionaryFromDictionary();
      uint64_t v86 = IMGetXPCDataFromDictionary();
      if (a4) {
        uint64_t v88 = a5;
      }
      else {
        uint64_t v88 = 0;
      }
      if (a4) {
        uint64_t v89 = a6;
      }
      else {
        uint64_t v89 = 0;
      }
      __XPCServerIMDCNRecordIDAndHistoryTokenForAliases_asyncIPAction(v86, v87, v88, v89, v85, v86);
      uint64_t v20 = 36;
      break;
    case 0x25uLL:
      uint64_t v343 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v345 = a5;
      }
      else {
        uint64_t v345 = 0;
      }
      if (a4) {
        uint64_t v346 = a6;
      }
      else {
        uint64_t v346 = 0;
      }
      __XPCServerIMDCNRecordIDForAliases_IPAction(v343, v344, v345, v346, v343);
      uint64_t v20 = 37;
      break;
    case 0x26uLL:
      uint64_t v347 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v349 = a5;
      }
      else {
        uint64_t v349 = 0;
      }
      if (a4) {
        uint64_t v350 = a6;
      }
      else {
        uint64_t v350 = 0;
      }
      __XPCServerIMDIsFavoritedContact_IPCAction(v347, v348, v349, v350, v347);
      uint64_t v20 = 38;
      break;
    case 0x27uLL:
      uint64_t v1294 = IMGetXPCStringFromDictionary();
      uint64_t v1279 = IMGetXPCStringFromDictionary();
      uint64_t v351 = IMGetXPCStringFromDictionary();
      uint64_t v352 = IMGetXPCStringFromDictionary();
      uint64_t v353 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v355 = a5;
      }
      else {
        uint64_t v355 = 0;
      }
      if (a4) {
        uint64_t v356 = a6;
      }
      else {
        uint64_t v356 = 0;
      }
      __XPCServerIMDHandleRecordCreate_IPCAction(v353, v354, v355, v356, v1294, v1279, v351, v352, v353);
      uint64_t v20 = 39;
      break;
    case 0x28uLL:
      int64_t v1288 = xpc_dictionary_get_int64(a3, "handleID");
      uint64_t v1274 = IMGetXPCStringFromDictionary();
      uint64_t v1262 = IMGetXPCStringFromDictionary();
      uint64_t v90 = IMGetXPCStringFromDictionary();
      uint64_t v91 = IMGetXPCStringFromDictionary();
      uint64_t v92 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v94 = a5;
      }
      else {
        uint64_t v94 = 0;
      }
      if (a4) {
        uint64_t v95 = a6;
      }
      else {
        uint64_t v95 = 0;
      }
      __XPCServerIMDHandleRecordBulkUpdate_IPCAction(v92, v93, v94, v95, v1288, v1274, v1262, v90, v91, v92);
      uint64_t v20 = 40;
      break;
    case 0x29uLL:
      uint64_t v96 = IMGetXPCStringFromDictionary();
      uint64_t v97 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v99 = a5;
      }
      else {
        uint64_t v99 = 0;
      }
      if (a4) {
        uint64_t v100 = a6;
      }
      else {
        uint64_t v100 = 0;
      }
      __XPCServerIMDHandleRecordCopyHandleForIDOnService_IPCAction(v97, v98, v99, v100, v96, v97);
      uint64_t v20 = 41;
      break;
    case 0x2AuLL:
      uint64_t v101 = IMGetXPCStringFromDictionary();
      uint64_t v102 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v104 = a5;
      }
      else {
        uint64_t v104 = 0;
      }
      if (a4) {
        uint64_t v105 = a6;
      }
      else {
        uint64_t v105 = 0;
      }
      __XPCServerIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(v102, v103, v104, v105, v101, v102);
      uint64_t v20 = 42;
      break;
    case 0x2BuLL:
      uint64_t v106 = IMGetXPCStringFromDictionary();
      uint64_t v107 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v109 = a5;
      }
      else {
        uint64_t v109 = 0;
      }
      if (a4) {
        uint64_t v110 = a6;
      }
      else {
        uint64_t v110 = 0;
      }
      __XPCServerIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(v107, v108, v109, v110, v106, v107);
      uint64_t v20 = 43;
      break;
    case 0x2CuLL:
      uint64_t v111 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v113 = a5;
      }
      else {
        uint64_t v113 = 0;
      }
      if (a4) {
        uint64_t v114 = a6;
      }
      else {
        uint64_t v114 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesForGUIDs_IPCAction(v111, v112, v113, v114, v111);
      uint64_t v20 = 44;
      break;
    case 0x2DuLL:
      uint64_t v357 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v359 = a5;
      }
      else {
        uint64_t v359 = 0;
      }
      if (a4) {
        uint64_t v360 = a6;
      }
      else {
        uint64_t v360 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(v357, v358, v359, v360, v357);
      uint64_t v20 = 45;
      break;
    case 0x2EuLL:
      int64_t v115 = xpc_dictionary_get_int64(a3, "lowerRowID");
      int64_t v116 = xpc_dictionary_get_int64(a3, "maxRowID");
      if (a4) {
        uint64_t v118 = a5;
      }
      else {
        uint64_t v118 = 0;
      }
      if (a4) {
        uint64_t v119 = a6;
      }
      else {
        uint64_t v119 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(v116, v117, v118, v119, v115, v116);
      uint64_t v20 = 46;
      break;
    case 0x2FuLL:
      uint64_t v361 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v363 = a5;
      }
      else {
        uint64_t v363 = 0;
      }
      if (a4) {
        uint64_t v364 = a6;
      }
      else {
        uint64_t v364 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageForGUID_IPCAction(v361, v362, v363, v364, v361);
      uint64_t v20 = 47;
      break;
    case 0x30uLL:
      id v120 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v121 = a5;
      }
      else {
        uint64_t v121 = 0;
      }
      if (a4) {
        uint64_t v122 = a6;
      }
      else {
        uint64_t v122 = 0;
      }
      objc_msgSend(v120, "handleIMDMessageRecordCopyLastMessageForChatWithRowID_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v121, v122);
      goto LABEL_768;
    case 0x31uLL:
      if (a4) {
        uint64_t v365 = a5;
      }
      else {
        uint64_t v365 = 0;
      }
      if (a4) {
        uint64_t v366 = a6;
      }
      else {
        uint64_t v366 = 0;
      }
      __XPCServerIMDMessageRecordCopyLastReceivedMessage_IPCAction(v15, v16, v365, v366);
      uint64_t v20 = 49;
      break;
    case 0x32uLL:
      int64_t v123 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v125 = a5;
      }
      else {
        uint64_t v125 = 0;
      }
      if (a4) {
        uint64_t v126 = a6;
      }
      else {
        uint64_t v126 = 0;
      }
      __XPCServerIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(v123, v124, v125, v126, v123);
      uint64_t v20 = 50;
      break;
    case 0x33uLL:
      int64_t v367 = xpc_dictionary_get_int64(a3, "rowID");
      if (a4) {
        uint64_t v369 = a5;
      }
      else {
        uint64_t v369 = 0;
      }
      if (a4) {
        uint64_t v370 = a6;
      }
      else {
        uint64_t v370 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageForRowID_IPCAction(v367, v368, v369, v370, v367);
      uint64_t v20 = 51;
      break;
    case 0x34uLL:
      uint64_t v371 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v373 = a5;
      }
      else {
        uint64_t v373 = 0;
      }
      if (a4) {
        uint64_t v374 = a6;
      }
      else {
        uint64_t v374 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesForRowIDs_IPCAction(v371, v372, v373, v374, v371);
      uint64_t v20 = 52;
      break;
    case 0x35uLL:
      uint64_t v375 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v377 = a5;
      }
      else {
        uint64_t v377 = 0;
      }
      if (a4) {
        uint64_t v378 = a6;
      }
      else {
        uint64_t v378 = 0;
      }
      __XPCServerIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(v375, v376, v377, v378, v375);
      uint64_t v20 = 53;
      break;
    case 0x36uLL:
      uint64_t v379 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v381 = a5;
      }
      else {
        uint64_t v381 = 0;
      }
      if (a4) {
        uint64_t v382 = a6;
      }
      else {
        uint64_t v382 = 0;
      }
      __XPCServerIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(v379, v380, v381, v382, v379);
      uint64_t v20 = 54;
      break;
    case 0x37uLL:
      int64_t v383 = xpc_dictionary_get_int64(a3, "days");
      if (a4) {
        uint64_t v385 = a5;
      }
      else {
        uint64_t v385 = 0;
      }
      if (a4) {
        uint64_t v386 = a6;
      }
      else {
        uint64_t v386 = 0;
      }
      __XPCServerIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(v383, v384, v385, v386, v383);
      uint64_t v20 = 55;
      break;
    case 0x38uLL:
      uint64_t v387 = IMGetXPCStringFromDictionary();
      uint64_t v388 = IMGetXPCStringFromDictionary();
      int64_t v389 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v391 = a5;
      }
      else {
        uint64_t v391 = 0;
      }
      if (a4) {
        uint64_t v392 = a6;
      }
      else {
        uint64_t v392 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(v389, v390, v391, v392, v387, v388, v389);
      uint64_t v20 = 56;
      break;
    case 0x39uLL:
      uint64_t v1289 = IMGetXPCArrayFromDictionary();
      uint64_t v1275 = IMGetXPCArrayFromDictionary();
      int64_t v1263 = xpc_dictionary_get_int64(a3, "limit");
      uint64_t v1254 = IMGetXPCStringFromDictionary();
      uint64_t v127 = IMGetXPCStringFromDictionary();
      char v128 = xpc_dictionary_get_BOOL(a3, "only_messages");
      BOOL v129 = xpc_dictionary_get_BOOL(a3, "only_unread");
      if (a4) {
        uint64_t v131 = a5;
      }
      else {
        uint64_t v131 = 0;
      }
      if (a4) {
        uint64_t v132 = a6;
      }
      else {
        uint64_t v132 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v129, v130, v131, v132, v1289, v1275, v1254, v127, v1263, v128, v129);
      uint64_t v20 = 57;
      break;
    case 0x3AuLL:
      uint64_t v1295 = IMGetXPCArrayFromDictionary();
      uint64_t v1280 = IMGetXPCArrayFromDictionary();
      int64_t v1267 = xpc_dictionary_get_int64(a3, "numberOfMessagesBefore");
      int64_t v393 = xpc_dictionary_get_int64(a3, "numberOfMessagesAfter");
      uint64_t v394 = IMGetXPCStringFromDictionary();
      uint64_t v395 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v397 = a5;
      }
      else {
        uint64_t v397 = 0;
      }
      if (a4) {
        uint64_t v398 = a6;
      }
      else {
        uint64_t v398 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(v395, v396, v397, v398, v1295, v1280, v394, v395, v1267, v393);
      uint64_t v20 = 58;
      break;
    case 0x3BuLL:
      id v133 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v134 = a5;
      }
      else {
        uint64_t v134 = 0;
      }
      if (a4) {
        uint64_t v135 = a6;
      }
      else {
        uint64_t v135 = 0;
      }
      objc_msgSend(v133, "handleIMDMessageRecordCopySortedMessagesForChatGUIDFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v134, v135);
      uint64_t v20 = 59;
      break;
    case 0x3CuLL:
      id v399 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v400 = a5;
      }
      else {
        uint64_t v400 = 0;
      }
      if (a4) {
        uint64_t v401 = a6;
      }
      else {
        uint64_t v401 = 0;
      }
      objc_msgSend(v399, "handleIMDMessageRecordCopyMessageWithGUIDExcludingRecoverableMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v400, v401);
      uint64_t v20 = 60;
      break;
    case 0x3DuLL:
      uint64_t v136 = IMGetXPCArrayFromDictionary();
      uint64_t v137 = IMGetXPCArrayFromDictionary();
      int64_t v138 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v140 = a5;
      }
      else {
        uint64_t v140 = 0;
      }
      if (a4) {
        uint64_t v141 = a6;
      }
      else {
        uint64_t v141 = 0;
      }
      __XPCServerIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(v138, v139, v140, v141, v136, v137, v138);
      uint64_t v20 = 61;
      break;
    case 0x3EuLL:
      uint64_t v402 = IMGetXPCArrayFromDictionary();
      uint64_t v403 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v405 = a5;
      }
      else {
        uint64_t v405 = 0;
      }
      if (a4) {
        uint64_t v406 = a6;
      }
      else {
        uint64_t v406 = 0;
      }
      __XPCServerIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(v403, v404, v405, v406, v402, v403);
      uint64_t v20 = 62;
      break;
    case 0x3FuLL:
      uint64_t v407 = IMGetXPCArrayFromDictionary();
      uint64_t v408 = IMGetXPCArrayFromDictionary();
      uint64_t v409 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v411 = a5;
      }
      else {
        uint64_t v411 = 0;
      }
      if (a4) {
        uint64_t v412 = a6;
      }
      else {
        uint64_t v412 = 0;
      }
      __XPCServerIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(v409, v410, v411, v412, v407, v408, v409);
      uint64_t v20 = 63;
      break;
    case 0x40uLL:
      uint64_t v142 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v144 = a5;
      }
      else {
        uint64_t v144 = 0;
      }
      if (a4) {
        uint64_t v145 = a6;
      }
      else {
        uint64_t v145 = 0;
      }
      __XPCServerIMDChatGetChatsThatContainRecipient_IPCAction(v142, v143, v144, v145, v142);
      uint64_t v20 = 64;
      break;
    case 0x41uLL:
      uint64_t v413 = IMGetXPCStringFromDictionary();
      uint64_t v414 = IMGetXPCStringFromDictionary();
      int64_t v415 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v417 = a5;
      }
      else {
        uint64_t v417 = 0;
      }
      if (a4) {
        uint64_t v418 = a6;
      }
      else {
        uint64_t v418 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(v415, v416, v417, v418, v413, v414, v415);
      uint64_t v20 = 65;
      break;
    case 0x42uLL:
      uint64_t v1290 = IMGetXPCStringFromDictionary();
      uint64_t v1276 = IMGetXPCStringFromDictionary();
      uint64_t v1264 = IMGetXPCArrayFromDictionary();
      uint64_t v1255 = IMGetXPCArrayFromDictionary();
      double v146 = xpc_dictionary_get_double(a3, "searchAfter");
      uint64_t v147 = IMGetXPCArrayFromDictionary();
      uint64_t v148 = IMGetXPCArrayFromDictionary();
      BOOL v149 = xpc_dictionary_get_BOOL(a3, "includeFromMe");
      if (a4) {
        uint64_t v151 = a5;
      }
      else {
        uint64_t v151 = 0;
      }
      if (a4) {
        uint64_t v152 = a6;
      }
      else {
        uint64_t v152 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(v146, v149, v150, v151, v152, v1290, v1276, v1264, v1255, v149, v147, v148);
      uint64_t v20 = 66;
      break;
    case 0x43uLL:
      uint64_t v1296 = IMGetXPCStringFromDictionary();
      uint64_t v1281 = IMGetXPCStringFromDictionary();
      uint64_t v419 = IMGetXPCArrayFromDictionary();
      uint64_t v420 = IMGetXPCArrayFromDictionary();
      double v423 = xpc_dictionary_get_double(a3, "searchAfter");
      if (a4) {
        uint64_t v424 = a5;
      }
      else {
        uint64_t v424 = 0;
      }
      if (a4) {
        uint64_t v425 = a6;
      }
      else {
        uint64_t v425 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(v423, v421, v422, v424, v425, v1296, v1281, v419, v420);
      uint64_t v20 = 67;
      break;
    case 0x44uLL:
      uint64_t v1291 = IMGetXPCStringFromDictionary();
      uint64_t v1277 = IMGetXPCStringFromDictionary();
      uint64_t v1265 = IMGetXPCStringFromDictionary();
      char v153 = xpc_dictionary_get_BOOL(a3, "matchingIsSOS");
      uint64_t v154 = IMGetXPCStringFromDictionary();
      double v157 = xpc_dictionary_get_double(a3, "searchAfter");
      if (a4) {
        uint64_t v158 = a5;
      }
      else {
        uint64_t v158 = 0;
      }
      if (a4) {
        uint64_t v159 = a6;
      }
      else {
        uint64_t v159 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(v157, v155, v156, v158, v159, v1291, v1277, v1265, v153, v154);
      uint64_t v20 = 68;
      break;
    case 0x45uLL:
      uint64_t v426 = IMGetXPCStringFromDictionary();
      uint64_t v427 = IMGetXPCStringFromDictionary();
      int64_t v428 = xpc_dictionary_get_int64(a3, "replaceID");
      if (a4) {
        uint64_t v430 = a5;
      }
      else {
        uint64_t v430 = 0;
      }
      if (a4) {
        uint64_t v431 = a6;
      }
      else {
        uint64_t v431 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(v428, v429, v430, v431, v426, v427, v428);
      uint64_t v20 = 69;
      break;
    case 0x46uLL:
      int64_t v1297 = xpc_dictionary_get_int64(a3, "limit");
      uint64_t v432 = IMGetXPCArrayFromDictionary();
      uint64_t v433 = IMGetXPCArrayFromDictionary();
      uint64_t v434 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v436 = a5;
      }
      else {
        uint64_t v436 = 0;
      }
      if (a4) {
        uint64_t v437 = a6;
      }
      else {
        uint64_t v437 = 0;
      }
      __XPCServerIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(v434, v435, v436, v437, v432, v433, v1297, v434);
      uint64_t v20 = 70;
      break;
    case 0x47uLL:
      id v438 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v439 = a5;
      }
      else {
        uint64_t v439 = 0;
      }
      if (a4) {
        uint64_t v440 = a6;
      }
      else {
        uint64_t v440 = 0;
      }
      objc_msgSend(v438, "handleIMDMessageRecordCopyScheduledMessagesForChatGUIDToLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v439, v440);
      uint64_t v20 = 71;
      break;
    case 0x48uLL:
      id v160 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v161 = a5;
      }
      else {
        uint64_t v161 = 0;
      }
      if (a4) {
        uint64_t v162 = a6;
      }
      else {
        uint64_t v162 = 0;
      }
      objc_msgSend(v160, "handleIMDMessageRecordCopyScheduledMessagesToDeleteFromCloudKitToLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v161, v162);
      uint64_t v20 = 72;
      break;
    case 0x49uLL:
      id v441 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v442 = a5;
      }
      else {
        uint64_t v442 = 0;
      }
      if (a4) {
        uint64_t v443 = a6;
      }
      else {
        uint64_t v443 = 0;
      }
      objc_msgSend(v441, "handleIMDMessageRecordAddScheduledMessageGUIDandCKRecordToDeleteFromCloudKit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v442, v443);
      uint64_t v20 = 73;
      break;
    case 0x4AuLL:
      id v444 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v445 = a5;
      }
      else {
        uint64_t v445 = 0;
      }
      if (a4) {
        uint64_t v446 = a6;
      }
      else {
        uint64_t v446 = 0;
      }
      objc_msgSend(v444, "handleIMDMessageDeleteTombstonedScheduledMessagesWithRecordIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v445, v446);
      uint64_t v20 = 74;
      break;
    case 0x4BuLL:
      int64_t v447 = xpc_dictionary_get_int64(a3, "afterRowID");
      if (a4) {
        uint64_t v449 = a5;
      }
      else {
        uint64_t v449 = 0;
      }
      if (a4) {
        uint64_t v450 = a6;
      }
      else {
        uint64_t v450 = 0;
      }
      __XPCServerIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(v447, v448, v449, v450, v447);
      uint64_t v20 = 75;
      break;
    case 0x4CuLL:
      int64_t v163 = xpc_dictionary_get_int64(a3, "afterRowID");
      if (a4) {
        uint64_t v165 = a5;
      }
      else {
        uint64_t v165 = 0;
      }
      if (a4) {
        uint64_t v166 = a6;
      }
      else {
        uint64_t v166 = 0;
      }
      __XPCServerIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(v163, v164, v165, v166, v163);
      uint64_t v20 = 76;
      break;
    case 0x4DuLL:
      int64_t v451 = xpc_dictionary_get_int64(a3, "afterRowID");
      if (a4) {
        uint64_t v453 = a5;
      }
      else {
        uint64_t v453 = 0;
      }
      if (a4) {
        uint64_t v454 = a6;
      }
      else {
        uint64_t v454 = 0;
      }
      __XPCServerIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(v451, v452, v453, v454, v451);
      uint64_t v20 = 77;
      break;
    case 0x4EuLL:
      uint64_t v167 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v169 = a5;
      }
      else {
        uint64_t v169 = 0;
      }
      if (a4) {
        uint64_t v170 = a6;
      }
      else {
        uint64_t v170 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(v167, v168, v169, v170, v167);
      uint64_t v20 = 78;
      break;
    case 0x4FuLL:
      uint64_t v171 = IMGetXPCArrayFromDictionary();
      uint64_t v172 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v174 = a5;
      }
      else {
        uint64_t v174 = 0;
      }
      if (a4) {
        uint64_t v175 = a6;
      }
      else {
        uint64_t v175 = 0;
      }
      __XPCServerIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(v172, v173, v174, v175, v171, v172);
      uint64_t v20 = 79;
      break;
    case 0x50uLL:
      uint64_t v455 = IMGetXPCArrayFromDictionary();
      uint64_t v456 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v458 = a5;
      }
      else {
        uint64_t v458 = 0;
      }
      if (a4) {
        uint64_t v459 = a6;
      }
      else {
        uint64_t v459 = 0;
      }
      __XPCServerIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(v456, v457, v458, v459, v455, v456);
      uint64_t v20 = 80;
      break;
    case 0x51uLL:
      uint64_t v460 = IMGetXPCStringFromDictionary();
      uint64_t v461 = IMGetXPCStringFromDictionary();
      uint64_t v462 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v464 = a5;
      }
      else {
        uint64_t v464 = 0;
      }
      if (a4) {
        uint64_t v465 = a6;
      }
      else {
        uint64_t v465 = 0;
      }
      __XPCServerIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(v462, v463, v464, v465, v460, v461, v462);
      uint64_t v20 = 81;
      break;
    case 0x52uLL:
      if (a4) {
        uint64_t v466 = a5;
      }
      else {
        uint64_t v466 = 0;
      }
      if (a4) {
        uint64_t v467 = a6;
      }
      else {
        uint64_t v467 = 0;
      }
      __XPCServerIMDMessageRecordCountAllUnreadMessages_IPCAction(v15, v16, v466, v467);
      uint64_t v20 = 82;
      break;
    case 0x53uLL:
      uint64_t v468 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v470 = a5;
      }
      else {
        uint64_t v470 = 0;
      }
      if (a4) {
        uint64_t v471 = a6;
      }
      else {
        uint64_t v471 = 0;
      }
      __XPCServerIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(v468, v469, v470, v471, v468);
      uint64_t v20 = 83;
      break;
    case 0x54uLL:
      int64_t v176 = xpc_dictionary_get_int64(a3, "chatID");
      if (a4) {
        uint64_t v178 = a5;
      }
      else {
        uint64_t v178 = 0;
      }
      if (a4) {
        uint64_t v179 = a6;
      }
      else {
        uint64_t v179 = 0;
      }
      __XPCServerIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(v176, v177, v178, v179, v176);
      uint64_t v20 = 84;
      break;
    case 0x55uLL:
      id v472 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v473 = a5;
      }
      else {
        uint64_t v473 = 0;
      }
      if (a4) {
        uint64_t v474 = a6;
      }
      else {
        uint64_t v474 = 0;
      }
      objc_msgSend(v472, "handleIMDMessageRecordCopyAllUnreadMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v473, v474);
LABEL_768:
      uint64_t v20 = 48;
      break;
    case 0x56uLL:
      if (a4) {
        uint64_t v475 = a5;
      }
      else {
        uint64_t v475 = 0;
      }
      if (a4) {
        uint64_t v476 = a6;
      }
      else {
        uint64_t v476 = 0;
      }
      __XPCServerIMDMessageRecordLastFailedMessageRowID_IPCAction(v15, v16, v475, v476);
      uint64_t v20 = 86;
      break;
    case 0x57uLL:
      if (a4) {
        uint64_t v180 = a5;
      }
      else {
        uint64_t v180 = 0;
      }
      if (a4) {
        uint64_t v181 = a6;
      }
      else {
        uint64_t v181 = 0;
      }
      __XPCServerIMDMessageRecordLastSyncedMessageRowID_IPCAction(v15, v16, v180, v181);
      uint64_t v20 = 87;
      break;
    case 0x58uLL:
      if (a4) {
        uint64_t v477 = a5;
      }
      else {
        uint64_t v477 = 0;
      }
      if (a4) {
        uint64_t v478 = a6;
      }
      else {
        uint64_t v478 = 0;
      }
      __XPCServerIMDMessageRecordLastFailedMessageDate_IPCAction(v15, v16, v477, v478);
      uint64_t v20 = 88;
      break;
    case 0x59uLL:
      if (a4) {
        uint64_t v479 = a5;
      }
      else {
        uint64_t v479 = 0;
      }
      if (a4) {
        uint64_t v480 = a6;
      }
      else {
        uint64_t v480 = 0;
      }
      __XPCServerIMDMessageRecordGetMostRecentMessageDate_IPCAction(v15, v16, v479, v480);
      uint64_t v20 = 89;
      break;
    case 0x5AuLL:
      uint64_t v481 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v483 = a5;
      }
      else {
        uint64_t v483 = 0;
      }
      if (a4) {
        uint64_t v484 = a6;
      }
      else {
        uint64_t v484 = 0;
      }
      __XPCServerIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(v481, v482, v483, v484, v481);
      uint64_t v20 = 90;
      break;
    case 0x5BuLL:
      if (a4) {
        uint64_t v485 = a5;
      }
      else {
        uint64_t v485 = 0;
      }
      if (a4) {
        uint64_t v486 = a6;
      }
      else {
        uint64_t v486 = 0;
      }
      __XPCServerIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(v15, v16, v485, v486);
      uint64_t v20 = 91;
      break;
    case 0x5CuLL:
      if (a4) {
        uint64_t v182 = a5;
      }
      else {
        uint64_t v182 = 0;
      }
      if (a4) {
        uint64_t v183 = a6;
      }
      else {
        uint64_t v183 = 0;
      }
      __XPCServerIMDMessageRecordGetMessagesSequenceNumber_IPCAction(v15, v16, v182, v183);
      uint64_t v20 = 92;
      break;
    case 0x5DuLL:
      uint64_t v487 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v489 = a5;
      }
      else {
        uint64_t v489 = 0;
      }
      if (a4) {
        uint64_t v490 = a6;
      }
      else {
        uint64_t v490 = 0;
      }
      __XPCServerIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(v487, v488, v489, v490, v487);
      uint64_t v20 = 93;
      break;
    case 0x5EuLL:
      if (a4) {
        uint64_t v491 = a5;
      }
      else {
        uint64_t v491 = 0;
      }
      if (a4) {
        uint64_t v492 = a6;
      }
      else {
        uint64_t v492 = 0;
      }
      __XPCServerIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(v15, v16, v491, v492);
      uint64_t v20 = 94;
      break;
    case 0x5FuLL:
      if (a4) {
        uint64_t v493 = a5;
      }
      else {
        uint64_t v493 = 0;
      }
      if (a4) {
        uint64_t v494 = a6;
      }
      else {
        uint64_t v494 = 0;
      }
      __XPCServerIMDMessageRecordDeleteOrphanedMessages_IPCAction(v15, v16, v493, v494);
      uint64_t v20 = 95;
      break;
    case 0x60uLL:
      uint64_t v1292 = IMGetXPCStringFromDictionary();
      uint64_t v184 = IMGetXPCArrayFromDictionary();
      uint64_t v185 = IMGetXPCCodableFromDictionaryWithStandardAllowlist();
      BOOL v186 = xpc_dictionary_get_BOOL(a3, "fromMe");
      if (a4) {
        uint64_t v188 = a5;
      }
      else {
        uint64_t v188 = 0;
      }
      if (a4) {
        uint64_t v189 = a6;
      }
      else {
        uint64_t v189 = 0;
      }
      __XPCServerIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(v186, v187, v188, v189, v1292, v184, v185, v186);
      uint64_t v20 = 96;
      break;
    case 0x61uLL:
      uint64_t v495 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v497 = a5;
      }
      else {
        uint64_t v497 = 0;
      }
      if (a4) {
        uint64_t v498 = a6;
      }
      else {
        uint64_t v498 = 0;
      }
      __XPCServerIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(v495, v496, v497, v498, v495);
      uint64_t v20 = 97;
      break;
    case 0x62uLL:
      int64_t v499 = xpc_dictionary_get_int64(a3, "limit");
      int64_t v500 = xpc_dictionary_get_int64(a3, "rowID");
      if (a4) {
        uint64_t v502 = a5;
      }
      else {
        uint64_t v502 = 0;
      }
      if (a4) {
        uint64_t v503 = a6;
      }
      else {
        uint64_t v503 = 0;
      }
      __XPCServerIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(v500, v501, v502, v503, v499, v500);
      uint64_t v20 = 98;
      break;
    case 0x63uLL:
      int64_t v190 = xpc_dictionary_get_int64(a3, "limit");
      int64_t v191 = xpc_dictionary_get_int64(a3, "date");
      if (a4) {
        uint64_t v193 = a5;
      }
      else {
        uint64_t v193 = 0;
      }
      if (a4) {
        uint64_t v194 = a6;
      }
      else {
        uint64_t v194 = 0;
      }
      __XPCServerIMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate_IPCAction(v191, v192, v193, v194, v190, v191);
      uint64_t v20 = 99;
      break;
    case 0x64uLL:
      int64_t v504 = xpc_dictionary_get_int64(a3, "limit");
      int64_t v505 = xpc_dictionary_get_int64(a3, "rowID");
      if (a4) {
        uint64_t v507 = a5;
      }
      else {
        uint64_t v507 = 0;
      }
      if (a4) {
        uint64_t v508 = a6;
      }
      else {
        uint64_t v508 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(v505, v506, v507, v508, v504, v505);
      uint64_t v20 = 100;
      break;
    case 0x65uLL:
      uint64_t v509 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v511 = a5;
      }
      else {
        uint64_t v511 = 0;
      }
      if (a4) {
        uint64_t v512 = a6;
      }
      else {
        uint64_t v512 = 0;
      }
      __XPCServerIMDMessageRecordCopyMostRecentUseageOfAddresses_IPCAction(v509, v510, v511, v512, v509);
      uint64_t v20 = 101;
      break;
    case 0x66uLL:
      uint64_t v1298 = IMGetXPCStringFromDictionary();
      int64_t v1282 = xpc_dictionary_get_int64(a3, "date");
      int64_t v1268 = xpc_dictionary_get_int64(a3, "dateRead");
      int64_t v1257 = xpc_dictionary_get_int64(a3, "dateDelivered");
      int64_t v1249 = xpc_dictionary_get_int64(a3, "datePlayed");
      int64_t v1243 = xpc_dictionary_get_int64(a3, "error");
      int64_t v1237 = xpc_dictionary_get_int64(a3, "type");
      int64_t v1231 = xpc_dictionary_get_int64(a3, "replaceID");
      uint64_t v1225 = IMGetXPCCodableFromDictionaryWithStandardAllowlist();
      uint64_t v1219 = IMGetXPCStringFromDictionary();
      uint64_t v1213 = IMGetXPCDataFromDictionary();
      uint64_t v1207 = IMGetXPCStringFromDictionary();
      uint64_t v1201 = IMGetXPCStringFromDictionary();
      uint64_t v1195 = IMGetXPCStringFromDictionary();
      uint64_t v1189 = IMGetXPCStringFromDictionary();
      uint64_t v1183 = IMGetXPCStringFromDictionary();
      uint64_t v1177 = IMGetXPCStringFromDictionary();
      uint64_t v1171 = IMGetXPCStringFromDictionary();
      uint64_t v1165 = IMGetXPCStringFromDictionary();
      int64_t v1159 = xpc_dictionary_get_int64(a3, "groupActionType");
      int64_t v1153 = xpc_dictionary_get_int64(a3, "itemType");
      uint64_t v1149 = IMGetXPCStringFromDictionary();
      int64_t v1145 = xpc_dictionary_get_int64(a3, "shareStatus");
      int64_t v1141 = xpc_dictionary_get_int64(a3, "shareDirection");
      int64_t v1138 = xpc_dictionary_get_int64(a3, "expireState");
      int64_t v1136 = xpc_dictionary_get_int64(a3, "messageActionType");
      uint64_t v1134 = IMGetXPCStringFromDictionary();
      int64_t v1132 = xpc_dictionary_get_int64(a3, "associatedMessageType");
      int64_t v1130 = xpc_dictionary_get_int64(a3, "associatedMessageRangeLocation");
      int64_t v1128 = xpc_dictionary_get_int64(a3, "associatedMessageRangeLength");
      uint64_t v1126 = IMGetXPCStringFromDictionary();
      uint64_t v1124 = IMGetXPCDataFromDictionary();
      uint64_t v1122 = IMGetXPCStringFromDictionary();
      int64_t v1120 = xpc_dictionary_get_int64(a3, "timeExpressiveSendPlayed");
      uint64_t v1118 = IMGetXPCDataFromDictionary();
      int64_t v1116 = xpc_dictionary_get_int64(a3, "cloudKitSyncState");
      uint64_t v1114 = IMGetXPCStringFromDictionary();
      uint64_t v1112 = IMGetXPCDataFromDictionary();
      uint64_t v1110 = IMGetXPCStringFromDictionary();
      uint64_t v1108 = IMGetXPCDictionaryFromDictionary();
      uint64_t v1106 = IMGetXPCStringFromDictionary();
      uint64_t v1104 = IMGetXPCStringFromDictionary();
      int64_t v1102 = xpc_dictionary_get_int64(a3, "sortID");
      uint64_t v1100 = IMGetXPCStringFromDictionary();
      uint64_t v1098 = IMGetXPCStringFromDictionary();
      uint64_t v1096 = IMGetXPCStringFromDictionary();
      uint64_t v1094 = IMGetXPCStringFromDictionary();
      int64_t v1093 = xpc_dictionary_get_int64(a3, "partCount");
      int64_t v1092 = xpc_dictionary_get_int64(a3, "dateEdited");
      uint64_t v1091 = IMGetXPCStringFromDictionary();
      uint64_t v1090 = IMGetXPCStringFromDictionary();
      uint64_t v513 = IMGetXPCStringFromDictionary();
      int64_t v514 = xpc_dictionary_get_int64(a3, "scheduleType");
      int64_t v515 = xpc_dictionary_get_int64(a3, "scheduleState");
      if (a4) {
        uint64_t v517 = a5;
      }
      else {
        uint64_t v517 = 0;
      }
      if (a4) {
        uint64_t v518 = a6;
      }
      else {
        uint64_t v518 = 0;
      }
      *((void *)&v1089 + 1) = v1090;
      *((void *)&v1088 + 1) = v1092;
      *(void *)&long long v1089 = v1091;
      *(void *)&long long v1088 = v1093;
      *((void *)&v1086 + 1) = v1098;
      *(void *)&long long v1086 = v1100;
      *(void *)&long long v1084 = v1114;
      *((void *)&v1084 + 1) = v1112;
      *(void *)&long long v1076 = v1159;
      *((void *)&v1076 + 1) = v1145;
      *((void *)&v1069 + 1) = v1189;
      *((void *)&v1066 + 1) = v1201;
      *(void *)&long long v1069 = v1195;
      *(void *)&long long v1066 = v1207;
      *((void *)&v1054 + 1) = v1243;
      *(void *)&long long v1054 = v1249;
      __XPCServerIMDMessageRecordCreate_IPCAction(v515, v516, v517, v518, v1298, v1282, v1268, v1257, v1054, v1237, v1231, v1225, v1219, v1213, v1066, v1069, v1183, v1177, v1171,
        v1153,
        v1149,
        v1076,
        v1141,
        v1165,
        v1138,
        v1136,
        v1134,
        v1132,
        v1130,
        v1128,
        v1126,
        v1124,
        v1122,
        v1120,
        v1118,
        v1116,
        v1084,
        v1110,
        v1108,
        v1106,
        v1104,
        v1102,
        v1086,
        v1096,
        v1094,
        v1088,
        v1089,
        v513,
        v514,
        v515);
      uint64_t v20 = 102;
      break;
    case 0x67uLL:
      int64_t v519 = xpc_dictionary_get_int64(a3, "messageID");
      if (a4) {
        uint64_t v521 = a5;
      }
      else {
        uint64_t v521 = 0;
      }
      if (a4) {
        uint64_t v522 = a6;
      }
      else {
        uint64_t v522 = 0;
      }
      __XPCServerIMDMessageRecordCopyChats_IPCAction(v519, v520, v521, v522, v519);
      uint64_t v20 = 103;
      break;
    case 0x68uLL:
      uint64_t v523 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v525 = a5;
      }
      else {
        uint64_t v525 = 0;
      }
      if (a4) {
        uint64_t v526 = a6;
      }
      else {
        uint64_t v526 = 0;
      }
      __XPCServerIMDMessageRecordChatForMessageGUID_IPCAction(v523, v524, v525, v526, v523);
      uint64_t v20 = 104;
      break;
    case 0x69uLL:
      int64_t v195 = xpc_dictionary_get_int64(a3, "messageID");
      if (a4) {
        uint64_t v197 = a5;
      }
      else {
        uint64_t v197 = 0;
      }
      if (a4) {
        uint64_t v198 = a6;
      }
      else {
        uint64_t v198 = 0;
      }
      __XPCServerIMDMessageRecordCopyAttachments_IPCAction(v195, v196, v197, v198, v195);
      uint64_t v20 = 105;
      break;
    case 0x6AuLL:
      int64_t v199 = xpc_dictionary_get_int64(a3, "messageID");
      int64_t v200 = xpc_dictionary_get_int64(a3, "handleID");
      if (a4) {
        uint64_t v202 = a5;
      }
      else {
        uint64_t v202 = 0;
      }
      if (a4) {
        uint64_t v203 = a6;
      }
      else {
        uint64_t v203 = 0;
      }
      __XPCServerIMDMessageRecordSetHandle_IPCAction(v200, v201, v202, v203, v199, v200);
      uint64_t v20 = 106;
      break;
    case 0x6BuLL:
      int64_t v527 = xpc_dictionary_get_int64(a3, "messageID");
      if (a4) {
        uint64_t v529 = a5;
      }
      else {
        uint64_t v529 = 0;
      }
      if (a4) {
        uint64_t v530 = a6;
      }
      else {
        uint64_t v530 = 0;
      }
      __XPCServerIMDMessageRecordCopyHandle_IPCAction(v527, v528, v529, v530, v527);
      uint64_t v20 = 107;
      break;
    case 0x6CuLL:
      int64_t v204 = xpc_dictionary_get_int64(a3, "messageID");
      if (a4) {
        uint64_t v206 = a5;
      }
      else {
        uint64_t v206 = 0;
      }
      if (a4) {
        uint64_t v207 = a6;
      }
      else {
        uint64_t v207 = 0;
      }
      __XPCServerIMDMessageRecordCopyOtherHandle_IPCAction(v204, v205, v206, v207, v204);
      uint64_t v20 = 108;
      break;
    case 0x6DuLL:
      int64_t v1299 = xpc_dictionary_get_int64(a3, "messageID");
      int64_t v1283 = xpc_dictionary_get_int64(a3, "replaceID");
      uint64_t v1269 = IMGetXPCStringFromDictionary();
      int64_t v1258 = xpc_dictionary_get_int64(a3, "fzDate");
      int64_t v1250 = xpc_dictionary_get_int64(a3, "fzDateRead");
      int64_t v1244 = xpc_dictionary_get_int64(a3, "fzDateDelivered");
      int64_t v1238 = xpc_dictionary_get_int64(a3, "fzDatePlayed");
      uint64_t v1232 = IMGetXPCStringFromDictionary();
      uint64_t v1226 = IMGetXPCDataFromDictionary();
      uint64_t v1220 = IMGetXPCCodableFromDictionaryWithStandardAllowlist();
      uint64_t v1214 = IMGetXPCStringFromDictionary();
      uint64_t v1208 = IMGetXPCStringFromDictionary();
      uint64_t v1202 = IMGetXPCStringFromDictionary();
      int64_t v1196 = xpc_dictionary_get_int64(a3, "handleID");
      uint64_t v1190 = IMGetXPCStringFromDictionary();
      int64_t v1184 = xpc_dictionary_get_int64(a3, "fzError");
      int64_t v1178 = xpc_dictionary_get_int64(a3, "fzType");
      uint64_t v1172 = IMGetXPCStringFromDictionary();
      int64_t v1166 = xpc_dictionary_get_int64(a3, "groupActionType");
      int64_t v1160 = xpc_dictionary_get_int64(a3, "otherHandleID");
      int64_t v1154 = xpc_dictionary_get_int64(a3, "shareStatus");
      int64_t v1150 = xpc_dictionary_get_int64(a3, "shareDirection");
      int64_t v1146 = xpc_dictionary_get_int64(a3, "expireState");
      int64_t v1142 = xpc_dictionary_get_int64(a3, "messageActionType");
      uint64_t v1139 = IMGetXPCStringFromDictionary();
      int64_t v1137 = xpc_dictionary_get_int64(a3, "associatedMessageType");
      uint64_t v1135 = IMGetXPCStringFromDictionary();
      int64_t v1133 = xpc_dictionary_get_int64(a3, "timePlayedExpressiveSend");
      int64_t v1131 = xpc_dictionary_get_int64(a3, "associatedMessageRangeLocation");
      int64_t v1129 = xpc_dictionary_get_int64(a3, "associatedMessageRangeLength");
      uint64_t v1127 = IMGetXPCDataFromDictionary();
      uint64_t v1125 = IMGetXPCDataFromDictionary();
      int64_t v1123 = xpc_dictionary_get_int64(a3, "cloudKitSyncState");
      uint64_t v1121 = IMGetXPCStringFromDictionary();
      uint64_t v1119 = IMGetXPCDataFromDictionary();
      uint64_t v1117 = IMGetXPCStringFromDictionary();
      uint64_t v1115 = IMGetXPCStringFromDictionary();
      uint64_t v1113 = IMGetXPCStringFromDictionary();
      int64_t v1111 = xpc_dictionary_get_int64(a3, "sortID");
      uint64_t v1109 = IMGetXPCStringFromDictionary();
      uint64_t v1107 = IMGetXPCStringFromDictionary();
      uint64_t v1105 = IMGetXPCStringFromDictionary();
      uint64_t v1103 = IMGetXPCStringFromDictionary();
      int64_t v1101 = xpc_dictionary_get_int64(a3, "partCount");
      int64_t v1099 = xpc_dictionary_get_int64(a3, "dateEdited");
      uint64_t v1097 = IMGetXPCStringFromDictionary();
      uint64_t v1095 = IMGetXPCStringFromDictionary();
      uint64_t v531 = IMGetXPCStringFromDictionary();
      int64_t v532 = xpc_dictionary_get_int64(a3, "scheduleType");
      int64_t v533 = xpc_dictionary_get_int64(a3, "scheduleState");
      if (a4) {
        uint64_t v535 = a5;
      }
      else {
        uint64_t v535 = 0;
      }
      if (a4) {
        uint64_t v536 = a6;
      }
      else {
        uint64_t v536 = 0;
      }
      *((void *)&v1087 + 1) = v1095;
      *(void *)&long long v1087 = v1097;
      *((void *)&v1085 + 1) = v1107;
      *(void *)&long long v1085 = v1109;
      *((void *)&v1083 + 1) = v1115;
      *((void *)&v1082 + 1) = v1119;
      *(void *)&long long v1083 = v1117;
      *(void *)&long long v1082 = v1121;
      *((void *)&v1080 + 1) = v1131;
      *(void *)&long long v1080 = v1137;
      *(void *)&long long v1075 = v1166;
      *((void *)&v1075 + 1) = v1154;
      *((void *)&v1073 + 1) = v1178;
      *(void *)&long long v1073 = v1184;
      *((void *)&v1067 + 1) = v1202;
      *((void *)&v1063 + 1) = v1214;
      *(void *)&long long v1067 = v1208;
      *(void *)&long long v1063 = v1220;
      *((void *)&v1060 + 1) = v1226;
      *(void *)&long long v1060 = v1232;
      *((void *)&v1055 + 1) = v1244;
      *(void *)&long long v1055 = v1250;
      __XPCServerIMDMessageRecordBulkUpdate_IPCAction(v533, v534, v535, v536, v1299, v1283, v1269, v1258, v1055, v1238, v1060, v1063, v1067, v1196, v1190, v1073, v1160, v1075, v1150,
        v1172,
        v1146,
        v1142,
        v1139,
        v1080,
        v1129,
        v1127,
        v1135,
        v1133,
        v1125,
        v1123,
        v1082,
        v1083,
        v1113,
        v1111,
        v1085,
        v1105,
        v1103,
        v1101,
        v1099,
        v1087,
        v531,
        v532,
        v533);
      uint64_t v20 = 109;
      break;
    case 0x6EuLL:
      uint64_t v537 = IMGetXPCStringFromDictionary();
      int64_t v538 = xpc_dictionary_get_int64(a3, "task_flags");
      if (a4) {
        uint64_t v540 = a5;
      }
      else {
        uint64_t v540 = 0;
      }
      if (a4) {
        uint64_t v541 = a6;
      }
      else {
        uint64_t v541 = 0;
      }
      __XPCServerIMDMessagePTaskInsertRow_IPCAction(v538, v539, v540, v541, v537, v538);
      uint64_t v20 = 110;
      break;
    case 0x6FuLL:
      int64_t v542 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v544 = a5;
      }
      else {
        uint64_t v544 = 0;
      }
      if (a4) {
        uint64_t v545 = a6;
      }
      else {
        uint64_t v545 = 0;
      }
      __XPCServerIMDMessagePTaskSelectWithLimit_IPCAction(v542, v543, v544, v545, v542);
      uint64_t v20 = 111;
      break;
    case 0x70uLL:
      uint64_t v546 = IMGetXPCStringFromDictionary();
      int64_t v547 = xpc_dictionary_get_int64(a3, "task_flags");
      if (a4) {
        uint64_t v549 = a5;
      }
      else {
        uint64_t v549 = 0;
      }
      if (a4) {
        uint64_t v550 = a6;
      }
      else {
        uint64_t v550 = 0;
      }
      __XPCServerIMDMessagePTaskUpdateTaskFlagsForGUID_IPCAction(v547, v548, v549, v550, v546, v547);
      uint64_t v20 = 112;
      break;
    case 0x71uLL:
      if (a4) {
        uint64_t v551 = a5;
      }
      else {
        uint64_t v551 = 0;
      }
      if (a4) {
        uint64_t v552 = a6;
      }
      else {
        uint64_t v552 = 0;
      }
      __XPCServerIMDMessagePTaskDeleteAllCompletedTask_IPCAction(v15, v16, v551, v552);
      uint64_t v20 = 113;
      break;
    case 0x72uLL:
      int64_t v1300 = xpc_dictionary_get_int64(a3, "style");
      int64_t v1284 = xpc_dictionary_get_int64(a3, "state");
      uint64_t v1270 = IMGetXPCStringFromDictionary();
      uint64_t v1259 = IMGetXPCDataFromDictionary();
      uint64_t v1251 = IMGetXPCStringFromDictionary();
      uint64_t v1245 = IMGetXPCStringFromDictionary();
      uint64_t v1239 = IMGetXPCStringFromDictionary();
      uint64_t v1233 = IMGetXPCStringFromDictionary();
      uint64_t v1227 = IMGetXPCStringFromDictionary();
      uint64_t v1221 = IMGetXPCStringFromDictionary();
      uint64_t v1215 = IMGetXPCStringFromDictionary();
      uint64_t v1209 = IMGetXPCStringFromDictionary();
      int64_t v1203 = xpc_dictionary_get_int64(a3, "isArchived");
      int64_t v1197 = xpc_dictionary_get_int64(a3, "isFiltered");
      int64_t v1191 = xpc_dictionary_get_int64(a3, "isBlackholed");
      int64_t v1185 = xpc_dictionary_get_int64(a3, "hasHadSuccessfulQuery");
      uint64_t v1179 = IMGetXPCStringFromDictionary();
      uint64_t v1173 = IMGetXPCStringFromDictionary();
      int64_t v1167 = xpc_dictionary_get_int64(a3, "ckSyncState");
      uint64_t v1161 = IMGetXPCStringFromDictionary();
      int64_t v1155 = xpc_dictionary_get_int64(a3, "lastReadMessageTimeStamp");
      uint64_t v1151 = IMGetXPCStringFromDictionary();
      uint64_t v1147 = IMGetXPCStringFromDictionary();
      int64_t v1143 = xpc_dictionary_get_int64(a3, "syndicationType");
      int64_t v553 = xpc_dictionary_get_int64(a3, "syndicationDate");
      int64_t v554 = xpc_dictionary_get_int64(a3, "isRecovered");
      int64_t v555 = xpc_dictionary_get_int64(a3, "isDeletingIncomingMessages");
      if (a4) {
        uint64_t v557 = a5;
      }
      else {
        uint64_t v557 = 0;
      }
      if (a4) {
        uint64_t v558 = a6;
      }
      else {
        uint64_t v558 = 0;
      }
      *((void *)&v1079 + 1) = v554;
      *((void *)&v1077 + 1) = v1143;
      *(void *)&long long v1079 = v553;
      *(void *)&long long v1077 = v1191;
      *(void *)&long long v1074 = v1179;
      *((void *)&v1074 + 1) = v1173;
      *((void *)&v1068 + 1) = v1197;
      *((void *)&v1064 + 1) = v1209;
      *(void *)&long long v1068 = v1203;
      *(void *)&long long v1064 = v1215;
      *((void *)&v1061 + 1) = v1221;
      *(void *)&long long v1061 = v1227;
      *((void *)&v1058 + 1) = v1233;
      *(void *)&long long v1058 = v1239;
      *((void *)&v1056 + 1) = v1245;
      *(void *)&long long v1056 = v1251;
      __XPCServerIMDChatRecordCreate_IPCAction(v555, v556, v557, v558, v1300, v1284, v1270, v1259, v1056, v1058, v1061, v1064, v1068, v1185, v1074, v1167, v1161, v1155, v1151,
        v1147,
        v1077,
        v1079,
        v555);
      uint64_t v20 = 114;
      break;
    case 0x73uLL:
      int64_t v559 = xpc_dictionary_get_int64(a3, "chatRowID");
      if (a4) {
        uint64_t v561 = a5;
      }
      else {
        uint64_t v561 = 0;
      }
      if (a4) {
        uint64_t v562 = a6;
      }
      else {
        uint64_t v562 = 0;
      }
      __XPCServerIMDChatRecordCopyHandles_IPCAction(v559, v560, v561, v562, v559);
      uint64_t v20 = 115;
      break;
    case 0x74uLL:
      int64_t v563 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v564 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v566 = a5;
      }
      else {
        uint64_t v566 = 0;
      }
      if (a4) {
        uint64_t v567 = a6;
      }
      else {
        uint64_t v567 = 0;
      }
      __XPCServerIMDChatRecordCopyMessagesWithLimit_IPCAction(v564, v565, v566, v567, v563, v564);
      uint64_t v20 = 116;
      break;
    case 0x75uLL:
      int64_t v568 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v569 = xpc_dictionary_get_int64(a3, "isArchived");
      if (a4) {
        uint64_t v571 = a5;
      }
      else {
        uint64_t v571 = 0;
      }
      if (a4) {
        uint64_t v572 = a6;
      }
      else {
        uint64_t v572 = 0;
      }
      __XPCServerIMDChatRecordSetIsArchived_IPCAction(v569, v570, v571, v572, v568, v569);
      uint64_t v20 = 117;
      break;
    case 0x76uLL:
      int64_t v208 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v209 = xpc_dictionary_get_int64(a3, "handleID");
      if (a4) {
        uint64_t v211 = a5;
      }
      else {
        uint64_t v211 = 0;
      }
      if (a4) {
        uint64_t v212 = a6;
      }
      else {
        uint64_t v212 = 0;
      }
      __XPCServerIMDChatRecordAddHandle_IPCAction(v209, v210, v211, v212, v208, v209);
      uint64_t v20 = 118;
      break;
    case 0x77uLL:
      int64_t v573 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v574 = xpc_dictionary_get_int64(a3, "handleID");
      if (a4) {
        uint64_t v576 = a5;
      }
      else {
        uint64_t v576 = 0;
      }
      if (a4) {
        uint64_t v577 = a6;
      }
      else {
        uint64_t v577 = 0;
      }
      __XPCServerIMDChatRecordRemoveHandle_IPCAction(v574, v575, v576, v577, v573, v574);
      uint64_t v20 = 119;
      break;
    case 0x78uLL:
      int64_t v1301 = xpc_dictionary_get_int64(a3, "identifier");
      int64_t v1285 = xpc_dictionary_get_int64(a3, "style");
      int64_t v1271 = xpc_dictionary_get_int64(a3, "state");
      uint64_t v1260 = IMGetXPCStringFromDictionary();
      uint64_t v1252 = IMGetXPCDataFromDictionary();
      uint64_t v1246 = IMGetXPCStringFromDictionary();
      uint64_t v1240 = IMGetXPCStringFromDictionary();
      uint64_t v1234 = IMGetXPCStringFromDictionary();
      uint64_t v1228 = IMGetXPCStringFromDictionary();
      uint64_t v1222 = IMGetXPCStringFromDictionary();
      uint64_t v1216 = IMGetXPCStringFromDictionary();
      uint64_t v1210 = IMGetXPCStringFromDictionary();
      uint64_t v1204 = IMGetXPCStringFromDictionary();
      int64_t v1198 = xpc_dictionary_get_int64(a3, "isArchived");
      int64_t v1192 = xpc_dictionary_get_int64(a3, "isFiltered");
      int64_t v1186 = xpc_dictionary_get_int64(a3, "isBlackholed");
      int64_t v1180 = xpc_dictionary_get_int64(a3, "hasHadSuccessfulQuery");
      uint64_t v1174 = IMGetXPCStringFromDictionary();
      uint64_t v1168 = IMGetXPCStringFromDictionary();
      int64_t v1162 = xpc_dictionary_get_int64(a3, "ckSyncState");
      uint64_t v1156 = IMGetXPCStringFromDictionary();
      int64_t v1152 = xpc_dictionary_get_int64(a3, "lastReadMessageTimeStamp");
      uint64_t v1148 = IMGetXPCStringFromDictionary();
      uint64_t v1144 = IMGetXPCStringFromDictionary();
      int64_t v1140 = xpc_dictionary_get_int64(a3, "syndicationType");
      int64_t v578 = xpc_dictionary_get_int64(a3, "syndicationDate");
      int64_t v579 = xpc_dictionary_get_int64(a3, "isRecovered");
      int64_t v580 = xpc_dictionary_get_int64(a3, "isDeletingIncomingMessages");
      if (a4) {
        uint64_t v582 = a5;
      }
      else {
        uint64_t v582 = 0;
      }
      if (a4) {
        uint64_t v583 = a6;
      }
      else {
        uint64_t v583 = 0;
      }
      *((void *)&v1081 + 1) = v579;
      *((void *)&v1078 + 1) = v1140;
      *(void *)&long long v1081 = v578;
      *(void *)&long long v1078 = v1186;
      *((void *)&v1070 + 1) = v1192;
      *(void *)&long long v1070 = v1198;
      *(void *)&long long v1065 = v1216;
      *((void *)&v1065 + 1) = v1210;
      *((void *)&v1062 + 1) = v1222;
      *(void *)&long long v1062 = v1228;
      *((void *)&v1059 + 1) = v1234;
      *(void *)&long long v1059 = v1240;
      *((void *)&v1057 + 1) = v1246;
      *(void *)&long long v1057 = v1252;
      __XPCServerIMDChatRecordBulkUpdate_IPCAction(v580, v581, v582, v583, v1301, v1285, v1271, v1260, v1057, v1059, v1062, v1065, v1204, v1070, v1180, v1174, v1168, v1162, v1156,
        v1152,
        v1148,
        v1144,
        v1078,
        v1081,
        v580);
      uint64_t v20 = 120;
      break;
    case 0x79uLL:
      if (a4) {
        uint64_t v584 = a5;
      }
      else {
        uint64_t v584 = 0;
      }
      if (a4) {
        uint64_t v585 = a6;
      }
      else {
        uint64_t v585 = 0;
      }
      __XPCServerIMDChatRecordCopyAllChats_IPCAction(v15, v16, v584, v585);
      uint64_t v20 = 121;
      break;
    case 0x7AuLL:
      int64_t v586 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v588 = a5;
      }
      else {
        uint64_t v588 = 0;
      }
      if (a4) {
        uint64_t v589 = a6;
      }
      else {
        uint64_t v589 = 0;
      }
      __XPCServerIMDChatRecordCopyAllActiveChatsWithLimit_IPCAction(v586, v587, v588, v589, v586);
      uint64_t v20 = 122;
      break;
    case 0x7BuLL:
      int64_t v590 = xpc_dictionary_get_int64(a3, "request");
      int64_t v591 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v593 = a5;
      }
      else {
        uint64_t v593 = 0;
      }
      if (a4) {
        uint64_t v594 = a6;
      }
      else {
        uint64_t v594 = 0;
      }
      __XPCServerIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction(v591, v592, v593, v594, v590, v591);
      uint64_t v20 = 123;
      break;
    case 0x7CuLL:
      int64_t v595 = xpc_dictionary_get_int64(a3, "knownSenderLimit");
      int64_t v596 = xpc_dictionary_get_int64(a3, "otherFilterLimit");
      if (a4) {
        uint64_t v598 = a5;
      }
      else {
        uint64_t v598 = 0;
      }
      if (a4) {
        uint64_t v599 = a6;
      }
      else {
        uint64_t v599 = 0;
      }
      __XPCServerIMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit_IPCAction(v596, v597, v598, v599, v595, v596);
      uint64_t v20 = 124;
      break;
    case 0x7DuLL:
      uint64_t v600 = IMGetXPCStringFromDictionary();
      int64_t v601 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v603 = a5;
      }
      else {
        uint64_t v603 = 0;
      }
      if (a4) {
        uint64_t v604 = a6;
      }
      else {
        uint64_t v604 = 0;
      }
      __XPCServerIMDCoreSpotlightAddMessageGUID_IPCAction(v601, v602, v603, v604, v600, v601);
      uint64_t v20 = 125;
      break;
    case 0x7EuLL:
      uint64_t v213 = IMGetXPCArrayFromDictionary();
      int64_t v214 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v216 = a5;
      }
      else {
        uint64_t v216 = 0;
      }
      if (a4) {
        uint64_t v217 = a6;
      }
      else {
        uint64_t v217 = 0;
      }
      __XPCServerIMDCoreSpotlightAddMessageGUIDs_IPCAction(v214, v215, v216, v217, v213, v214);
      uint64_t v20 = 126;
      break;
    case 0x7FuLL:
      uint64_t v218 = IMGetXPCArrayFromDictionary();
      int64_t v219 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v221 = a5;
      }
      else {
        uint64_t v221 = 0;
      }
      if (a4) {
        uint64_t v222 = a6;
      }
      else {
        uint64_t v222 = 0;
      }
      __XPCServerIMDCoreSpotlightDeleteMessageGUIDs_IPCAction(v219, v220, v221, v222, v218, v219);
      uint64_t v20 = 127;
      break;
    case 0x80uLL:
      id v605 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v606 = a5;
      }
      else {
        uint64_t v606 = 0;
      }
      if (a4) {
        uint64_t v607 = a6;
      }
      else {
        uint64_t v607 = 0;
      }
      objc_msgSend(v605, "deleteAllDonationsForAppDeletion_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v606, v607);
      uint64_t v20 = 128;
      break;
    case 0x81uLL:
      uint64_t v223 = IMGetXPCStringFromDictionary();
      int64_t v224 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v226 = a5;
      }
      else {
        uint64_t v226 = 0;
      }
      if (a4) {
        uint64_t v227 = a6;
      }
      else {
        uint64_t v227 = 0;
      }
      __XPCServerIMDCoreSpotlightAddChatGUID_IPCAction(v224, v225, v226, v227, v223, v224);
      uint64_t v20 = 129;
      break;
    case 0x82uLL:
      uint64_t v608 = IMGetXPCStringFromDictionary();
      int64_t v609 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v611 = a5;
      }
      else {
        uint64_t v611 = 0;
      }
      if (a4) {
        uint64_t v612 = a6;
      }
      else {
        uint64_t v612 = 0;
      }
      __XPCServerIMDCoreSpotlightDeleteChatGUID_IPCAction(v609, v610, v611, v612, v608, v609);
      uint64_t v20 = 130;
      break;
    case 0x83uLL:
      int64_t v613 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v615 = a5;
      }
      else {
        uint64_t v615 = 0;
      }
      if (a4) {
        uint64_t v616 = a6;
      }
      else {
        uint64_t v616 = 0;
      }
      __XPCServerIMDCoreSpotlightSetNeedsMessageReindex_IPCAction(v613, v614, v615, v616, v613);
      uint64_t v20 = 131;
      break;
    case 0x84uLL:
      uint64_t v617 = IMGetXPCIntFromDictionary();
      int64_t v618 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v620 = a5;
      }
      else {
        uint64_t v620 = 0;
      }
      if (a4) {
        uint64_t v621 = a6;
      }
      else {
        uint64_t v621 = 0;
      }
      __XPCServerIMDCoreSpotlightIndexNextMessageBatchIfNeeded_IPCAction(v618, v619, v620, v621, v617, v618);
      uint64_t v20 = 132;
      break;
    case 0x85uLL:
      uint64_t v228 = IMGetXPCArrayFromDictionary();
      int64_t v229 = xpc_dictionary_get_int64(a3, "reason");
      if (a4) {
        uint64_t v231 = a5;
      }
      else {
        uint64_t v231 = 0;
      }
      if (a4) {
        uint64_t v232 = a6;
      }
      else {
        uint64_t v232 = 0;
      }
      __XPCServerIMDCoreSpotlightReindexMessages_IPCAction(v229, v230, v231, v232, v228, v229);
      uint64_t v20 = 133;
      break;
    case 0x86uLL:
      uint64_t v1302 = IMGetXPCArrayFromDictionary();
      uint64_t v622 = IMGetXPCDataFromDictionary();
      int64_t v623 = xpc_dictionary_get_int64(a3, "reason");
      uint64_t v624 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v622 error:0];
      if (a4) {
        uint64_t v626 = a5;
      }
      else {
        uint64_t v626 = 0;
      }
      if (a4) {
        uint64_t v627 = a6;
      }
      else {
        uint64_t v627 = 0;
      }
      __XPCServerIMDCoreSpotlightReindexMessagesWithCollaborationMetadata_IPCAction(v624, v625, v626, v627, v1302, v624, v623);
      uint64_t v20 = 134;
      break;
    case 0x87uLL:
      id v628 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v629 = a5;
      }
      else {
        uint64_t v629 = 0;
      }
      if (a4) {
        uint64_t v630 = a6;
      }
      else {
        uint64_t v630 = 0;
      }
      objc_msgSend(v628, "handleIMDCoreSpotlightDeleteAttachment_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v629, v630);
      uint64_t v20 = 135;
      break;
    case 0x88uLL:
      id v233 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v234 = a5;
      }
      else {
        uint64_t v234 = 0;
      }
      if (a4) {
        uint64_t v235 = a6;
      }
      else {
        uint64_t v235 = 0;
      }
      objc_msgSend(v233, "handleIMDCoreSpotlightValidateClientState_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v234, v235);
      uint64_t v20 = 136;
      break;
    case 0x89uLL:
      id v631 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v632 = a5;
      }
      else {
        uint64_t v632 = 0;
      }
      if (a4) {
        uint64_t v633 = a6;
      }
      else {
        uint64_t v633 = 0;
      }
      objc_msgSend(v631, "handleIMDCoreSpotlightFetchClientState_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v632, v633);
      uint64_t v20 = 137;
      break;
    case 0x8AuLL:
      id v236 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v237 = a5;
      }
      else {
        uint64_t v237 = 0;
      }
      if (a4) {
        uint64_t v238 = a6;
      }
      else {
        uint64_t v238 = 0;
      }
      objc_msgSend(v236, "handleIMDCoreSpotlightInvalidateSpotlightClientStateVersioning_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v237, v238);
      uint64_t v20 = 138;
      break;
    case 0x8BuLL:
      uint64_t v1303 = IMGetXPCStringFromDictionary();
      uint64_t v1286 = IMGetXPCStringFromDictionary();
      uint64_t v1272 = IMGetXPCArrayFromDictionary();
      char v634 = IMGetXPCBoolFromDictionary();
      uint64_t v636 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v637 = a5;
      }
      else {
        uint64_t v637 = 0;
      }
      if (a4) {
        uint64_t v638 = a6;
      }
      else {
        uint64_t v638 = 0;
      }
      __XPCServerIMDCoreSpotlightMarkAttachment_IPCAction((uint64_t)a2, v635, v637, v638, v1303, v636, v1286, v1272, v634);
      uint64_t v20 = 139;
      break;
    case 0x8CuLL:
      uint64_t v639 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v641 = a5;
      }
      else {
        uint64_t v641 = 0;
      }
      if (a4) {
        uint64_t v642 = a6;
      }
      else {
        uint64_t v642 = 0;
      }
      __XPCServerIMDChatRecordCopyChatForGUID_IPCAction(v639, v640, v641, v642, v639);
      uint64_t v20 = 140;
      break;
    case 0x8DuLL:
      int64_t v643 = xpc_dictionary_get_int64(a3, "messageID");
      if (a4) {
        uint64_t v645 = a5;
      }
      else {
        uint64_t v645 = 0;
      }
      if (a4) {
        uint64_t v646 = a6;
      }
      else {
        uint64_t v646 = 0;
      }
      __XPCServerIMDChatRecordCopyChatForMessageID_IPCAction(v643, v644, v645, v646, v643);
      uint64_t v20 = 141;
      break;
    case 0x8EuLL:
      uint64_t v647 = IMGetXPCStringFromDictionary();
      uint64_t v648 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v650 = a5;
      }
      else {
        uint64_t v650 = 0;
      }
      if (a4) {
        uint64_t v651 = a6;
      }
      else {
        uint64_t v651 = 0;
      }
      __XPCServerIMDChatRecordCopyChatsWithHandleOnService_IPCAction(v648, v649, v650, v651, v647, v648);
      uint64_t v20 = 142;
      break;
    case 0x8FuLL:
      id v652 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v653 = a5;
      }
      else {
        uint64_t v653 = 0;
      }
      if (a4) {
        uint64_t v654 = a6;
      }
      else {
        uint64_t v654 = 0;
      }
      objc_msgSend(v652, "handleIMDChatRecordCopyChatsWithHandlesOnServiceWithDisplayNameGroupIDStyle_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v653, v654);
      uint64_t v20 = 143;
      break;
    case 0x90uLL:
      id v655 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v656 = a5;
      }
      else {
        uint64_t v656 = 0;
      }
      if (a4) {
        uint64_t v657 = a6;
      }
      else {
        uint64_t v657 = 0;
      }
      objc_msgSend(v655, "handleIMDChatRecordCopyChatsWithAtLeastHandlesOnServiceWithStyle_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v656, v657);
      uint64_t v20 = 144;
      break;
    case 0x91uLL:
      id v658 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v659 = a5;
      }
      else {
        uint64_t v659 = 0;
      }
      if (a4) {
        uint64_t v660 = a6;
      }
      else {
        uint64_t v660 = 0;
      }
      objc_msgSend(v658, "handleIMDChatRecordCopyChatsFilteredUsingPredicate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v659, v660);
      uint64_t v20 = 145;
      break;
    case 0x92uLL:
      id v661 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v662 = a5;
      }
      else {
        uint64_t v662 = 0;
      }
      if (a4) {
        uint64_t v663 = a6;
      }
      else {
        uint64_t v663 = 0;
      }
      objc_msgSend(v661, "handleIMDChatRecordCopySortedChatsFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v662, v663);
      uint64_t v20 = 146;
      break;
    case 0x93uLL:
      id v664 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v665 = a5;
      }
      else {
        uint64_t v665 = 0;
      }
      if (a4) {
        uint64_t v666 = a6;
      }
      else {
        uint64_t v666 = 0;
      }
      objc_msgSend(v664, "handleIMDChatRecordCopyChatsSortedByLastMessageDateAndFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v665, v666);
      uint64_t v20 = 147;
      break;
    case 0x94uLL:
      id v667 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v668 = a5;
      }
      else {
        uint64_t v668 = 0;
      }
      if (a4) {
        uint64_t v669 = a6;
      }
      else {
        uint64_t v669 = 0;
      }
      objc_msgSend(v667, "handleIMDChatRecordCopyChatsWithIdentifier_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v668, v669);
      uint64_t v20 = 148;
      break;
    case 0x95uLL:
      uint64_t v670 = IMGetXPCStringFromDictionary();
      uint64_t v671 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v673 = a5;
      }
      else {
        uint64_t v673 = 0;
      }
      if (a4) {
        uint64_t v674 = a6;
      }
      else {
        uint64_t v674 = 0;
      }
      __XPCServerIMDChatRecordCopyChatsWithIdentifierOnService_IPCAction(v671, v672, v673, v674, v670, v671);
      uint64_t v20 = 149;
      break;
    case 0x96uLL:
      id v675 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v676 = a5;
      }
      else {
        uint64_t v676 = 0;
      }
      if (a4) {
        uint64_t v677 = a6;
      }
      else {
        uint64_t v677 = 0;
      }
      objc_msgSend(v675, "handleIMDChatRecordCopyChatsWithPinningIdentifier_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v676, v677);
      uint64_t v20 = 150;
      break;
    case 0x97uLL:
      uint64_t v678 = IMGetXPCStringFromDictionary();
      uint64_t v679 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v681 = a5;
      }
      else {
        uint64_t v681 = 0;
      }
      if (a4) {
        uint64_t v682 = a6;
      }
      else {
        uint64_t v682 = 0;
      }
      __XPCServerIMDChatRecordCopyChatsWithRoomnameOnService_IPCAction(v679, v680, v681, v682, v678, v679);
      uint64_t v20 = 151;
      break;
    case 0x98uLL:
      uint64_t v683 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v685 = a5;
      }
      else {
        uint64_t v685 = 0;
      }
      if (a4) {
        uint64_t v686 = a6;
      }
      else {
        uint64_t v686 = 0;
      }
      __XPCServerIMDChatRecordCopyChatsWithGroupID_IPCAction(v683, v684, v685, v686, v683);
      uint64_t v20 = 152;
      break;
    case 0x99uLL:
      id v687 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v688 = a5;
      }
      else {
        uint64_t v688 = 0;
      }
      if (a4) {
        uint64_t v689 = a6;
      }
      else {
        uint64_t v689 = 0;
      }
      objc_msgSend(v687, "handleIMDChatRecordCopyDuplicateGroupChatRecords_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v688, v689);
      uint64_t v20 = 153;
      break;
    case 0x9AuLL:
      id v239 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v240 = a5;
      }
      else {
        uint64_t v240 = 0;
      }
      if (a4) {
        uint64_t v241 = a6;
      }
      else {
        uint64_t v241 = 0;
      }
      objc_msgSend(v239, "handleIMDChatRecordCopyGroupPhotoPaths_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v240, v241);
      uint64_t v20 = 154;
      break;
    case 0x9BuLL:
      id v690 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v691 = a5;
      }
      else {
        uint64_t v691 = 0;
      }
      if (a4) {
        uint64_t v692 = a6;
      }
      else {
        uint64_t v692 = 0;
      }
      objc_msgSend(v690, "handleIMDChatRecordResolveInconsistentGUID_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v691, v692);
      uint64_t v20 = 155;
      break;
    case 0x9CuLL:
      uint64_t v693 = IMGetXPCStringFromDictionary();
      uint64_t v694 = IMGetXPCStringFromDictionary();
      uint64_t v695 = IMGetXPCBoolFromDictionary();
      if (a4) {
        uint64_t v697 = a5;
      }
      else {
        uint64_t v697 = 0;
      }
      if (a4) {
        uint64_t v698 = a6;
      }
      else {
        uint64_t v698 = 0;
      }
      __XPCServerIMDChatRecordCopyNewestChatForGroupIDOnService_IPCAction(v695, v696, v697, v698, v693, v694, v695);
      uint64_t v20 = 156;
      break;
    case 0x9DuLL:
      uint64_t v242 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v244 = a5;
      }
      else {
        uint64_t v244 = 0;
      }
      if (a4) {
        uint64_t v245 = a6;
      }
      else {
        uint64_t v245 = 0;
      }
      __XPCServerIMDChatRecordDeleteChatForGUID_IPCAction(v242, v243, v244, v245, v242);
      uint64_t v20 = 157;
      break;
    case 0x9EuLL:
      id v699 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v700 = a5;
      }
      else {
        uint64_t v700 = 0;
      }
      if (a4) {
        uint64_t v701 = a6;
      }
      else {
        uint64_t v701 = 0;
      }
      objc_msgSend(v699, "handleIMDChatRecordMoveMessagesToRecoverableMessage_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v700, v701);
      uint64_t v20 = 158;
      break;
    case 0x9FuLL:
      id v246 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v247 = a5;
      }
      else {
        uint64_t v247 = 0;
      }
      if (a4) {
        uint64_t v248 = a6;
      }
      else {
        uint64_t v248 = 0;
      }
      objc_msgSend(v246, "handleIMDChatRecordRecoverMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v247, v248);
      uint64_t v20 = 159;
      break;
    case 0xA0uLL:
      id v702 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v703 = a5;
      }
      else {
        uint64_t v703 = 0;
      }
      if (a4) {
        uint64_t v704 = a6;
      }
      else {
        uint64_t v704 = 0;
      }
      objc_msgSend(v702, "handleIMDChatRecordPermanentlyDeleteRecoverableMessagesInChatsWithGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v703, v704);
      uint64_t v20 = 160;
      break;
    case 0xA1uLL:
      id v705 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v706 = a5;
      }
      else {
        uint64_t v706 = 0;
      }
      if (a4) {
        uint64_t v707 = a6;
      }
      else {
        uint64_t v707 = 0;
      }
      objc_msgSend(v705, "handleIMDChatRecordLoadRecoverableMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v706, v707);
      uint64_t v20 = 161;
      break;
    case 0xA2uLL:
      uint64_t v708 = IMGetXPCStringFromDictionary();
      uint64_t v709 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v711 = a5;
      }
      else {
        uint64_t v711 = 0;
      }
      if (a4) {
        uint64_t v712 = a6;
      }
      else {
        uint64_t v712 = 0;
      }
      __XPCServerIMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded_IPCAction(v709, v710, v711, v712, v708, v709);
      uint64_t v20 = 162;
      break;
    case 0xA3uLL:
      uint64_t v713 = IMGetXPCStringFromDictionary();
      uint64_t v714 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v716 = a5;
      }
      else {
        uint64_t v716 = 0;
      }
      if (a4) {
        uint64_t v717 = a6;
      }
      else {
        uint64_t v717 = 0;
      }
      __XPCServerIMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded_IPCAction(v714, v715, v716, v717, v713, v714);
      uint64_t v20 = 163;
      break;
    case 0xA4uLL:
      if (a4) {
        uint64_t v249 = a5;
      }
      else {
        uint64_t v249 = 0;
      }
      if (a4) {
        uint64_t v250 = a6;
      }
      else {
        uint64_t v250 = 0;
      }
      __XPCServerIMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages_IPCAction(v15, v16, v249, v250);
      uint64_t v20 = 164;
      break;
    case 0xA5uLL:
      uint64_t v718 = IMGetXPCStringFromDictionary();
      int64_t v719 = xpc_dictionary_get_int64(a3, "isFiltered");
      if (a4) {
        uint64_t v721 = a5;
      }
      else {
        uint64_t v721 = 0;
      }
      if (a4) {
        uint64_t v722 = a6;
      }
      else {
        uint64_t v722 = 0;
      }
      __XPCServerIMDChatRecordSetIsFiltered_IPCAction(v719, v720, v721, v722, v718, v719);
      uint64_t v20 = 165;
      break;
    case 0xA6uLL:
      if (a4) {
        uint64_t v723 = a5;
      }
      else {
        uint64_t v723 = 0;
      }
      if (a4) {
        uint64_t v724 = a6;
      }
      else {
        uint64_t v724 = 0;
      }
      __XPCServerIMDChatRecordDeleteEmptyChats_IPCAction(v15, v16, v723, v724);
      uint64_t v20 = 166;
      break;
    case 0xA7uLL:
      uint64_t v725 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v727 = a5;
      }
      else {
        uint64_t v727 = 0;
      }
      if (a4) {
        uint64_t v728 = a6;
      }
      else {
        uint64_t v728 = 0;
      }
      __XPCServerIMDChatRecordCopyChatIdentitiesForMessageWithGUIDs_IPCAction(v725, v726, v727, v728, v725);
      uint64_t v20 = 167;
      break;
    case 0xA8uLL:
      id v729 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v730 = a5;
      }
      else {
        uint64_t v730 = 0;
      }
      if (a4) {
        uint64_t v731 = a6;
      }
      else {
        uint64_t v731 = 0;
      }
      objc_msgSend(v729, "handleIMDChatRecordsUpdateSyncStatusForGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v730, v731);
      goto LABEL_1448;
    case 0xA9uLL:
      uint64_t v732 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v734 = a5;
      }
      else {
        uint64_t v734 = 0;
      }
      if (a4) {
        uint64_t v735 = a6;
      }
      else {
        uint64_t v735 = 0;
      }
      __XPCServerIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(v732, v733, v734, v735, v732);
      uint64_t v20 = 169;
      break;
    case 0xAAuLL:
      uint64_t v736 = IMGetXPCStringFromDictionary();
      uint64_t v737 = IMGetXPCArrayFromDictionary();
      uint64_t v738 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v740 = a5;
      }
      else {
        uint64_t v740 = 0;
      }
      if (a4) {
        uint64_t v741 = a6;
      }
      else {
        uint64_t v741 = 0;
      }
      __XPCServerIMDChatRecordRepairDuplicateChats_IPCAction(v738, v739, v740, v741, v737, v736, v738);
      uint64_t v20 = 170;
      break;
    case 0xABuLL:
      uint64_t v742 = IMGetXPCStringFromDictionary();
      int64_t v743 = xpc_dictionary_get_int64(a3, "days");
      if (a4) {
        uint64_t v745 = a5;
      }
      else {
        uint64_t v745 = 0;
      }
      if (a4) {
        uint64_t v746 = a6;
      }
      else {
        uint64_t v746 = 0;
      }
      __XPCServerIMDChatRecordSplitDatabaseByDays_IPCAction(v743, v744, v745, v746, v743, v742);
      uint64_t v20 = 171;
      break;
    case 0xACuLL:
      uint64_t v747 = IMGetXPCStringFromDictionary();
      int64_t v748 = xpc_dictionary_get_int64(a3, "message_count");
      if (a4) {
        uint64_t v750 = a5;
      }
      else {
        uint64_t v750 = 0;
      }
      if (a4) {
        uint64_t v751 = a6;
      }
      else {
        uint64_t v751 = 0;
      }
      __XPCServerIMDChatRecordSplitDatabaseByRecentCount_IPCAction(v748, v749, v750, v751, v748, v747);
      uint64_t v20 = 172;
      break;
    case 0xADuLL:
      uint64_t v752 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v754 = a5;
      }
      else {
        uint64_t v754 = 0;
      }
      if (a4) {
        uint64_t v755 = a6;
      }
      else {
        uint64_t v755 = 0;
      }
      __XPCServerIMDSwitchDatabase_IPCAction(v752, v753, v754, v755, v752);
      uint64_t v20 = 173;
      break;
    case 0xAEuLL:
      if (a4) {
        uint64_t v756 = a5;
      }
      else {
        uint64_t v756 = 0;
      }
      if (a4) {
        uint64_t v757 = a6;
      }
      else {
        uint64_t v757 = 0;
      }
      __XPCServerIMDChatRecordCopyAllNamedChats_IPCAction(v15, v16, v756, v757);
      uint64_t v20 = 174;
      break;
    case 0xAFuLL:
      uint64_t v758 = IMGetXPCStringFromDictionary();
      uint64_t v759 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v761 = a5;
      }
      else {
        uint64_t v761 = 0;
      }
      if (a4) {
        uint64_t v762 = a6;
      }
      else {
        uint64_t v762 = 0;
      }
      __XPCServerIMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender_IPCAction(v759, v760, v761, v762, v758, v759);
      uint64_t v20 = 175;
      break;
    case 0xB0uLL:
      uint64_t v763 = IMGetXPCStringFromDictionary();
      uint64_t v764 = IMGetXPCStringFromDictionary();
      int64_t v765 = xpc_dictionary_get_int64(a3, "version");
      if (a4) {
        uint64_t v767 = a5;
      }
      else {
        uint64_t v767 = 0;
      }
      if (a4) {
        uint64_t v768 = a6;
      }
      else {
        uint64_t v768 = 0;
      }
      __XPCServerIMDDowngradeDatabase_IPCAction(v765, v766, v767, v768, v763, v764, v765);
      uint64_t v20 = 176;
      break;
    case 0xB1uLL:
      int64_t v769 = xpc_dictionary_get_int64(a3, "limit");
      int64_t v770 = xpc_dictionary_get_int64(a3, "filter");
      if (a4) {
        uint64_t v772 = a5;
      }
      else {
        uint64_t v772 = 0;
      }
      if (a4) {
        uint64_t v773 = a6;
      }
      else {
        uint64_t v773 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesToUploadToCloudKit_IPCAction(v770, v771, v772, v773, v769, v770);
      uint64_t v20 = 177;
      break;
    case 0xB2uLL:
      int64_t v774 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v776 = a5;
      }
      else {
        uint64_t v776 = 0;
      }
      if (a4) {
        uint64_t v777 = a6;
      }
      else {
        uint64_t v777 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKit_IPCAction(v774, v775, v776, v777, v774);
      uint64_t v20 = 178;
      break;
    case 0xB3uLL:
      int64_t v778 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v780 = a5;
      }
      else {
        uint64_t v780 = 0;
      }
      if (a4) {
        uint64_t v781 = a6;
      }
      else {
        uint64_t v781 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKit_IPCAction(v778, v779, v780, v781, v778);
      uint64_t v20 = 179;
      break;
    case 0xB4uLL:
      int64_t v782 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v784 = a5;
      }
      else {
        uint64_t v784 = 0;
      }
      if (a4) {
        uint64_t v785 = a6;
      }
      else {
        uint64_t v785 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKit_IPCAction(v782, v783, v784, v785, v782);
      uint64_t v20 = 180;
      break;
    case 0xB5uLL:
      if (a4) {
        uint64_t v786 = a5;
      }
      else {
        uint64_t v786 = 0;
      }
      if (a4) {
        uint64_t v787 = a6;
      }
      else {
        uint64_t v787 = 0;
      }
      __XPCServerIMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync_IPCAction(v15, v16, v786, v787);
      uint64_t v20 = 181;
      break;
    case 0xB6uLL:
      int64_t v788 = xpc_dictionary_get_int64(a3, "days");
      if (a4) {
        uint64_t v790 = a5;
      }
      else {
        uint64_t v790 = 0;
      }
      if (a4) {
        uint64_t v791 = a6;
      }
      else {
        uint64_t v791 = 0;
      }
      __XPCServerIMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays_IPCAction(v788, v789, v790, v791, v788);
      uint64_t v20 = 182;
      break;
    case 0xB7uLL:
      int64_t v792 = xpc_dictionary_get_int64(a3, "options");
      if (a4) {
        uint64_t v794 = a5;
      }
      else {
        uint64_t v794 = 0;
      }
      if (a4) {
        uint64_t v795 = a6;
      }
      else {
        uint64_t v795 = 0;
      }
      __XPCServerIMDAttachmentRecordFindLargestConversations_IPCAction(v792, v793, v794, v795, v792);
      uint64_t v20 = 183;
      break;
    case 0xB8uLL:
      int64_t v796 = xpc_dictionary_get_int64(a3, "options");
      int64_t v797 = xpc_dictionary_get_int64(a3, "limit");
      int64_t v798 = xpc_dictionary_get_int64(a3, "offset");
      if (a4) {
        uint64_t v799 = a5;
      }
      else {
        uint64_t v799 = 0;
      }
      if (a4) {
        uint64_t v800 = a6;
      }
      else {
        uint64_t v800 = 0;
      }
      __XPCServerIMDAttachmentRecordFindLargestAttachmentGUIDsWithLimitAndOffset_IPCAction(v798, (uint64_t)a3, v799, v800, v796, v797, v798);
      uint64_t v20 = 184;
      break;
    case 0xB9uLL:
      int64_t v801 = xpc_dictionary_get_int64(a3, "options");
      if (a4) {
        uint64_t v803 = a5;
      }
      else {
        uint64_t v803 = 0;
      }
      if (a4) {
        uint64_t v804 = a6;
      }
      else {
        uint64_t v804 = 0;
      }
      __XPCServerIMDAttachmentRecordSpaceTakenByAttachmentClass_IPCAction(v801, v802, v803, v804, v801);
      uint64_t v20 = 185;
      break;
    case 0xBAuLL:
      int64_t v805 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v807 = a5;
      }
      else {
        uint64_t v807 = 0;
      }
      if (a4) {
        uint64_t v808 = a6;
      }
      else {
        uint64_t v808 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesToDeleteFromCloudKit_IPCAction(v805, v806, v807, v808, v805);
      uint64_t v20 = 186;
      break;
    case 0xBBuLL:
      uint64_t v809 = IMGetXPCStringFromDictionary();
      uint64_t v810 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v812 = a5;
      }
      else {
        uint64_t v812 = 0;
      }
      if (a4) {
        uint64_t v813 = a6;
      }
      else {
        uint64_t v813 = 0;
      }
      __XPCServerIMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit_IPCAction(v810, v811, v812, v813, v809, v810);
      uint64_t v20 = 187;
      break;
    case 0xBCuLL:
      if (a4) {
        uint64_t v814 = a5;
      }
      else {
        uint64_t v814 = 0;
      }
      if (a4) {
        uint64_t v815 = a6;
      }
      else {
        uint64_t v815 = 0;
      }
      __XPCServerIMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit_IPCAction(v15, v16, v814, v815);
      uint64_t v20 = 188;
      break;
    case 0xBDuLL:
      if (a4) {
        uint64_t v816 = a5;
      }
      else {
        uint64_t v816 = 0;
      }
      if (a4) {
        uint64_t v817 = a6;
      }
      else {
        uint64_t v817 = 0;
      }
      __XPCServerIMDMessageRecordMarkDeletedTombStonedMessages_IPCAction(v15, v16, v816, v817);
      uint64_t v20 = 189;
      break;
    case 0xBEuLL:
      uint64_t v818 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v820 = a5;
      }
      else {
        uint64_t v820 = 0;
      }
      if (a4) {
        uint64_t v821 = a6;
      }
      else {
        uint64_t v821 = 0;
      }
      __XPCServerIMDMessageRecordDeleteTombStonedMessagesWithRecordIDs_IPCAction(v818, v819, v820, v821, v818);
      uint64_t v20 = 190;
      break;
    case 0xBFuLL:
      uint64_t v822 = IMGetXPCStringFromDictionary();
      uint64_t v823 = IMGetXPCStringFromDictionary();
      int64_t v824 = xpc_dictionary_get_int64(a3, "timeStamp");
      if (a4) {
        uint64_t v826 = a5;
      }
      else {
        uint64_t v826 = 0;
      }
      if (a4) {
        uint64_t v827 = a6;
      }
      else {
        uint64_t v827 = 0;
      }
      __XPCServerInsertIntoDeletedChatsTable_IPCAction(v824, v825, v826, v827, v822, v823, v824);
      uint64_t v20 = 191;
      break;
    case 0xC0uLL:
      int64_t v828 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v830 = a5;
      }
      else {
        uint64_t v830 = 0;
      }
      if (a4) {
        uint64_t v831 = a6;
      }
      else {
        uint64_t v831 = 0;
      }
      __XPCServerIMDChatRecordCopyChatRecordIDsAndGUIDsToDeleteFromCloudKitWithLimit_IPCAction(v828, v829, v830, v831, v828);
      break;
    case 0xC1uLL:
      if (a4) {
        uint64_t v832 = a5;
      }
      else {
        uint64_t v832 = 0;
      }
      if (a4) {
        uint64_t v833 = a6;
      }
      else {
        uint64_t v833 = 0;
      }
      __XPCServerIMDChatClearPendingDeleteChatsTable_IPCAction(v15, v16, v832, v833);
      break;
    case 0xC2uLL:
      uint64_t v834 = IMGetXPCArrayFromDictionary();
      int64_t v835 = xpc_dictionary_get_int64(a3, "fromError");
      int64_t v836 = xpc_dictionary_get_int64(a3, "toError");
      if (a4) {
        uint64_t v838 = a5;
      }
      else {
        uint64_t v838 = 0;
      }
      if (a4) {
        uint64_t v839 = a6;
      }
      else {
        uint64_t v839 = 0;
      }
      __XPCServerIMDChatRemapMessagesWithErrorCodeToErrorCode_IPCAction(v836, v837, v838, v839, v834, v835, v836);
      uint64_t v20 = -1;
      break;
    case 0xC3uLL:
      if (a4) {
        uint64_t v840 = a5;
      }
      else {
        uint64_t v840 = 0;
      }
      if (a4) {
        uint64_t v841 = a6;
      }
      else {
        uint64_t v841 = 0;
      }
      __XPCServerIMDMessageRecordCalculateLocalCloudKitStatistics_IPCAction(v15, v16, v840, v841);
      break;
    case 0xC4uLL:
      if (a4) {
        uint64_t v842 = a5;
      }
      else {
        uint64_t v842 = 0;
      }
      if (a4) {
        uint64_t v843 = a6;
      }
      else {
        uint64_t v843 = 0;
      }
      __XPCServerIMDMessageRecordCalculateTotalCounts_IPCAction(v15, v16, v842, v843);
      break;
    case 0xC5uLL:
      int64_t v844 = xpc_dictionary_get_int64(a3, "rowID");
      if (a4) {
        uint64_t v846 = a5;
      }
      else {
        uint64_t v846 = 0;
      }
      if (a4) {
        uint64_t v847 = a6;
      }
      else {
        uint64_t v847 = 0;
      }
      __XPCServerIMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit_IPCAction(v844, v845, v846, v847, v844);
      break;
    case 0xC6uLL:
      int64_t v848 = xpc_dictionary_get_int64(a3, "rowID");
      if (a4) {
        uint64_t v850 = a5;
      }
      else {
        uint64_t v850 = 0;
      }
      if (a4) {
        uint64_t v851 = a6;
      }
      else {
        uint64_t v851 = 0;
      }
      __XPCServerIMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit_IPCAction(v848, v849, v850, v851, v848);
      break;
    case 0xC7uLL:
      uint64_t v852 = IMGetXPCDictionaryFromDictionary();
      if (a4) {
        uint64_t v854 = a5;
      }
      else {
        uint64_t v854 = 0;
      }
      if (a4) {
        uint64_t v855 = a6;
      }
      else {
        uint64_t v855 = 0;
      }
      __XPCServerIMDMessageRecordSetCloudKitSyncCounts_IPCAction(v852, v853, v854, v855, v852);
      break;
    case 0xC8uLL:
      id v856 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v857 = a5;
      }
      else {
        uint64_t v857 = 0;
      }
      if (a4) {
        uint64_t v858 = a6;
      }
      else {
        uint64_t v858 = 0;
      }
      objc_msgSend(v856, "handleIMDMessageRecordsUpdateSyncStatusForGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v857, v858);
LABEL_1448:
      uint64_t v20 = 168;
      break;
    case 0xC9uLL:
      id v859 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v860 = a5;
      }
      else {
        uint64_t v860 = 0;
      }
      if (a4) {
        uint64_t v861 = a6;
      }
      else {
        uint64_t v861 = 0;
      }
      objc_msgSend(v859, "handleIMDMessageRecordsUpdateSyncedSyndicationRangesForGUIDsToStatus_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v860, v861);
      uint64_t v20 = 201;
      break;
    case 0xCAuLL:
      if (a4) {
        uint64_t v862 = a5;
      }
      else {
        uint64_t v862 = 0;
      }
      if (a4) {
        uint64_t v863 = a6;
      }
      else {
        uint64_t v863 = 0;
      }
      __XPCServerIMDAttachmentRecordMarkFailedAttachmentsAsNeedingSync_IPCAction(v15, v16, v862, v863);
      uint64_t v20 = 202;
      break;
    case 0xCBuLL:
      if (xpc_dictionary_get_value(a3, "afterRow")) {
        uint64_t v864 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "afterRow"));
      }
      else {
        uint64_t v864 = 0;
      }
      int64_t v1036 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v1038 = a5;
      }
      else {
        uint64_t v1038 = 0;
      }
      if (a4) {
        uint64_t v1039 = a6;
      }
      else {
        uint64_t v1039 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentsToDeleteFromCloudKit(v1036, v1037, v1038, v1039, v864, v1036);
      uint64_t v20 = 203;
      break;
    case 0xCCuLL:
      if (xpc_dictionary_get_value(a3, "afterRow")) {
        uint64_t v865 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "afterRow"));
      }
      else {
        uint64_t v865 = 0;
      }
      int64_t v1040 = xpc_dictionary_get_int64(a3, "limit");
      if (a4) {
        uint64_t v1042 = a5;
      }
      else {
        uint64_t v1042 = 0;
      }
      if (a4) {
        uint64_t v1043 = a6;
      }
      else {
        uint64_t v1043 = 0;
      }
      __XPCServerIMDAttachmentRecordCopyAttachmentGUIDs(v1040, v1041, v1042, v1043, v865, v1040);
      uint64_t v20 = 204;
      break;
    case 0xCDuLL:
      uint64_t v866 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v868 = a5;
      }
      else {
        uint64_t v868 = 0;
      }
      if (a4) {
        uint64_t v869 = a6;
      }
      else {
        uint64_t v869 = 0;
      }
      __XPCServerIMDAttachmentRecordDeleteTombStonedAttachmentsWithRecordIDs_IPCAction(v866, v867, v868, v869, v866);
      uint64_t v20 = 205;
      break;
    case 0xCEuLL:
      if (a4) {
        uint64_t v870 = a5;
      }
      else {
        uint64_t v870 = 0;
      }
      if (a4) {
        uint64_t v871 = a6;
      }
      else {
        uint64_t v871 = 0;
      }
      __XPCServerIMDAttachmentRecordDeleteTombStonedAttachmentsToDeleteFromCloudKit_IPCAction(v15, v16, v870, v871);
      uint64_t v20 = 206;
      break;
    case 0xCFuLL:
      id v872 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v873 = a5;
      }
      else {
        uint64_t v873 = 0;
      }
      if (a4) {
        uint64_t v874 = a6;
      }
      else {
        uint64_t v874 = 0;
      }
      objc_msgSend(v872, "handleIMDAttachmentRecordsUpdateSyncStatusForGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v873, v874);
      uint64_t v20 = 207;
      break;
    case 0xD0uLL:
      uint64_t v875 = IMOSLoggingEnabled();
      if (v875)
      {
        v877 = OSLogHandleForIMFoundationCategory();
        uint64_t v875 = os_log_type_enabled(v877, OS_LOG_TYPE_INFO);
        if (v875)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v877, OS_LOG_TYPE_INFO, "Clean database requested", buf, 2u);
        }
      }
      if (a4) {
        uint64_t v878 = a5;
      }
      else {
        uint64_t v878 = 0;
      }
      if (a4) {
        uint64_t v879 = a6;
      }
      else {
        uint64_t v879 = 0;
      }
      __XPCServerIMDDatabaseClean_IPCAction(v875, v876, v878, v879);
      uint64_t v20 = 208;
      break;
    case 0xD1uLL:
      if (a4) {
        uint64_t v880 = a5;
      }
      else {
        uint64_t v880 = 0;
      }
      if (a4) {
        uint64_t v881 = a6;
      }
      else {
        uint64_t v881 = 0;
      }
      __XPCServerIMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync_IPCAction(v15, v16, v880, v881);
      uint64_t v20 = 209;
      break;
    case 0xD2uLL:
      uint64_t v882 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v884 = a5;
      }
      else {
        uint64_t v884 = 0;
      }
      if (a4) {
        uint64_t v885 = a6;
      }
      else {
        uint64_t v885 = 0;
      }
      __XPCServerIMDKVValueForKey_IPCAction(v882, v883, v884, v885, v882);
      goto LABEL_1526;
    case 0xD3uLL:
      id v886 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v887 = a5;
      }
      else {
        uint64_t v887 = 0;
      }
      if (a4) {
        uint64_t v888 = a6;
      }
      else {
        uint64_t v888 = 0;
      }
      objc_msgSend(v886, "handleIMDKVIntegerForKey_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v887, v888);
      uint64_t v20 = 211;
      break;
    case 0xD4uLL:
      uint64_t v889 = IMGetXPCStringFromDictionary();
      uint64_t v890 = IMGetXPCDataFromDictionary();
      if (a4) {
        uint64_t v892 = a5;
      }
      else {
        uint64_t v892 = 0;
      }
      if (a4) {
        uint64_t v893 = a6;
      }
      else {
        uint64_t v893 = 0;
      }
      __XPCServerIMDKVPersistValueForKey_IPCAction(v890, v891, v892, v893, v889, v890);
LABEL_1526:
      uint64_t v20 = 210;
      break;
    case 0xD5uLL:
      uint64_t v894 = IMGetXPCDictionaryFromDictionary();
      if (a4) {
        uint64_t v896 = a5;
      }
      else {
        uint64_t v896 = 0;
      }
      if (a4) {
        uint64_t v897 = a6;
      }
      else {
        uint64_t v897 = 0;
      }
      __XPCServerIMDNotificationsPostNotifications_asyncIPCAction(v894, v895, v896, v897, v894);
      uint64_t v20 = 213;
      break;
    case 0xD6uLL:
      uint64_t v898 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v900 = a5;
      }
      else {
        uint64_t v900 = 0;
      }
      if (a4) {
        uint64_t v901 = a6;
      }
      else {
        uint64_t v901 = 0;
      }
      __XPCServerIMDMessageRecordCopyMessagesWithReplyToGUIDs(v898, v899, v900, v901, v898);
      uint64_t v20 = 214;
      break;
    case 0xD7uLL:
      uint64_t v902 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v904 = a5;
      }
      else {
        uint64_t v904 = 0;
      }
      if (a4) {
        uint64_t v905 = a6;
      }
      else {
        uint64_t v905 = 0;
      }
      __XPCServerIMDNotificationsRetractNotificationsForReadMessages_asyncIPCAction(v902, v903, v904, v905, v902);
      uint64_t v20 = 215;
      break;
    case 0xD8uLL:
      uint64_t v906 = IMGetXPCDictionaryFromDictionary();
      if (a4) {
        uint64_t v908 = a5;
      }
      else {
        uint64_t v908 = 0;
      }
      if (a4) {
        uint64_t v909 = a6;
      }
      else {
        uint64_t v909 = 0;
      }
      __XPCServerIMDNotificationsRetractNotificationsFromFirstUnlock_IPCAction(v906, v907, v908, v909, v906);
      uint64_t v20 = 216;
      break;
    case 0xD9uLL:
      uint64_t v910 = IMGetXPCArrayFromDictionary();
      uint64_t v911 = IMGetXPCDictionaryFromDictionary();
      if (a4) {
        uint64_t v913 = a5;
      }
      else {
        uint64_t v913 = 0;
      }
      if (a4) {
        uint64_t v914 = a6;
      }
      else {
        uint64_t v914 = 0;
      }
      __XPCServerIMDNotificationsPostUrgentNotificationsForMessages_IPCAction(v911, v912, v913, v914, v910, v911);
      goto LABEL_1576;
    case 0xDAuLL:
      uint64_t v915 = IMGetXPCArrayFromDictionary();
      uint64_t v916 = IMGetXPCDictionaryFromDictionary();
      if (a4) {
        uint64_t v918 = a5;
      }
      else {
        uint64_t v918 = 0;
      }
      if (a4) {
        uint64_t v919 = a6;
      }
      else {
        uint64_t v919 = 0;
      }
      __XPCServerIMDNotificationsUpdatePostedNotificationsForMessages_IPCAction(v916, v917, v918, v919, v915, v916);
      goto LABEL_1576;
    case 0xDBuLL:
      uint64_t v920 = IMGetXPCStringFromDictionary();
      uint64_t v921 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v923 = a5;
      }
      else {
        uint64_t v923 = 0;
      }
      if (a4) {
        uint64_t v924 = a6;
      }
      else {
        uint64_t v924 = 0;
      }
      __XPCServerIMDNotificationsPostFirstUnlockMessage_IPCAction(v921, v922, v923, v924, v920, v921);
LABEL_1576:
      uint64_t v20 = 217;
      break;
    case 0xDDuLL:
      int64_t v925 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v926 = xpc_dictionary_get_int64(a3, "isBlackholed");
      if (a4) {
        uint64_t v928 = a5;
      }
      else {
        uint64_t v928 = 0;
      }
      if (a4) {
        uint64_t v929 = a6;
      }
      else {
        uint64_t v929 = 0;
      }
      __XPCServerIMDChatRecordSetIsBlackholed_IPCAction(v926, v927, v928, v929, v925, v926);
      uint64_t v20 = 221;
      break;
    case 0xDEuLL:
      uint64_t v930 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v932 = a5;
      }
      else {
        uint64_t v932 = 0;
      }
      if (a4) {
        uint64_t v933 = a6;
      }
      else {
        uint64_t v933 = 0;
      }
      __XPCServerIMDMessageRecordMarkMessageGUIDUnread_IPCAction(v930, v931, v932, v933, v930);
      uint64_t v20 = 222;
      break;
    case 0xDFuLL:
      uint64_t v934 = IMGetXPCStringFromDictionary();
      uint64_t v935 = IMGetXPCStringFromDictionary();
      BOOL v936 = xpc_dictionary_get_BOOL(a3, "fromMe");
      if (a4) {
        uint64_t v938 = a5;
      }
      else {
        uint64_t v938 = 0;
      }
      if (a4) {
        uint64_t v939 = a6;
      }
      else {
        uint64_t v939 = 0;
      }
      __XPCServerIMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe_IPCAction(v936, v937, v938, v939, v934, v935, v936);
      uint64_t v20 = 223;
      break;
    case 0xE0uLL:
      uint64_t v940 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v942 = a5;
      }
      else {
        uint64_t v942 = 0;
      }
      if (a4) {
        uint64_t v943 = a6;
      }
      else {
        uint64_t v943 = 0;
      }
      __XPCServerIMDChatRecordPurgeAttachments_IPCAction(v940, v941, v942, v943, v940);
      uint64_t v20 = 224;
      break;
    case 0xE1uLL:
      id v944 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v945 = a5;
      }
      else {
        uint64_t v945 = 0;
      }
      if (a4) {
        uint64_t v946 = a6;
      }
      else {
        uint64_t v946 = 0;
      }
      objc_msgSend(v944, "handleIMDMessageRecordUpdateAttachmentSyndicationRanges_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v945, v946);
      uint64_t v20 = 225;
      break;
    case 0xE2uLL:
      id v947 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v948 = a5;
      }
      else {
        uint64_t v948 = 0;
      }
      if (a4) {
        uint64_t v949 = a6;
      }
      else {
        uint64_t v949 = 0;
      }
      objc_msgSend(v947, "handleIMDMessageRecordMoveToRecoverableMessage_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v948, v949);
      uint64_t v20 = 226;
      break;
    case 0xE3uLL:
      id v950 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v951 = a5;
      }
      else {
        uint64_t v951 = 0;
      }
      if (a4) {
        uint64_t v952 = a6;
      }
      else {
        uint64_t v952 = 0;
      }
      objc_msgSend(v950, "handleIMDMessageRecordDeleteRecoverableMessagesOlderThanDays_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v951, v952);
      uint64_t v20 = 227;
      break;
    case 0xE5uLL:
      id v953 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v954 = a5;
      }
      else {
        uint64_t v954 = 0;
      }
      if (a4) {
        uint64_t v955 = a6;
      }
      else {
        uint64_t v955 = 0;
      }
      objc_msgSend(v953, "handleIMDMessageRecordLoadRecoverableMessagesPendingCloudKitUpdate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v954, v955);
      uint64_t v20 = 229;
      break;
    case 0xE6uLL:
      id v956 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v957 = a5;
      }
      else {
        uint64_t v957 = 0;
      }
      if (a4) {
        uint64_t v958 = a6;
      }
      else {
        uint64_t v958 = 0;
      }
      objc_msgSend(v956, "handleIMDMessageRecordUpdateRecoverableMessageSyncState_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v957, v958);
      uint64_t v20 = 230;
      break;
    case 0xE7uLL:
      id v959 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v960 = a5;
      }
      else {
        uint64_t v960 = 0;
      }
      if (a4) {
        uint64_t v961 = a6;
      }
      else {
        uint64_t v961 = 0;
      }
      objc_msgSend(v959, "handleIMDMessageRecordStoreRecoverableMessagePartBody_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v960, v961);
      uint64_t v20 = 231;
      break;
    case 0xE8uLL:
      id v962 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v963 = a5;
      }
      else {
        uint64_t v963 = 0;
      }
      if (a4) {
        uint64_t v964 = a6;
      }
      else {
        uint64_t v964 = 0;
      }
      objc_msgSend(v962, "handleIMDMessageRecordLoadRecoverableMessagesPendingCloudKitDelete_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v963, v964);
      uint64_t v20 = 232;
      break;
    case 0xE9uLL:
      id v965 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v966 = a5;
      }
      else {
        uint64_t v966 = 0;
      }
      if (a4) {
        uint64_t v967 = a6;
      }
      else {
        uint64_t v967 = 0;
      }
      objc_msgSend(v965, "handleIMDMessageRecordClearUnsyncedRemovedRecoverableMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v966, v967);
      uint64_t v20 = 233;
      break;
    case 0xEAuLL:
      id v968 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v969 = a5;
      }
      else {
        uint64_t v969 = 0;
      }
      if (a4) {
        uint64_t v970 = a6;
      }
      else {
        uint64_t v970 = 0;
      }
      objc_msgSend(v968, "handleIMDNotificationsPostSharePlayNotification_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v969, v970);
      uint64_t v20 = 234;
      break;
    case 0xEBuLL:
      id v971 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v972 = a5;
      }
      else {
        uint64_t v972 = 0;
      }
      if (a4) {
        uint64_t v973 = a6;
      }
      else {
        uint64_t v973 = 0;
      }
      objc_msgSend(v971, "handleIMDMessageRecordUpdateMessagesSyndicationRanges_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v972, v973);
      uint64_t v20 = 235;
      break;
    case 0xECuLL:
      int64_t v974 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v975 = xpc_dictionary_get_int64(a3, "isRecovered");
      if (a4) {
        uint64_t v977 = a5;
      }
      else {
        uint64_t v977 = 0;
      }
      if (a4) {
        uint64_t v978 = a6;
      }
      else {
        uint64_t v978 = 0;
      }
      __XPCServerIMDChatRecordSetIsRecovered_IPCAction(v975, v976, v977, v978, v974, v975);
      uint64_t v20 = 236;
      break;
    case 0xEDuLL:
      int64_t v979 = xpc_dictionary_get_int64(a3, "chatRowID");
      int64_t v980 = xpc_dictionary_get_int64(a3, "isDeletingIncomingMessages");
      if (a4) {
        uint64_t v982 = a5;
      }
      else {
        uint64_t v982 = 0;
      }
      if (a4) {
        uint64_t v983 = a6;
      }
      else {
        uint64_t v983 = 0;
      }
      __XPCServerIMDChatRecordSetIsDeletingIncomingMessages_IPCAction(v980, v981, v982, v983, v979, v980);
      uint64_t v20 = 237;
      break;
    case 0xEEuLL:
      id v984 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v985 = a5;
      }
      else {
        uint64_t v985 = 0;
      }
      if (a4) {
        uint64_t v986 = a6;
      }
      else {
        uint64_t v986 = 0;
      }
      objc_msgSend(v984, "handleIMDMessageRecordDeleteJunkMessagesOlderThanDays_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v985, v986);
      uint64_t v20 = 238;
      break;
    case 0xEFuLL:
      uint64_t v987 = IMGetXPCArrayFromDictionary();
      if (a4) {
        uint64_t v989 = a5;
      }
      else {
        uint64_t v989 = 0;
      }
      if (a4) {
        uint64_t v990 = a6;
      }
      else {
        uint64_t v990 = 0;
      }
      __XPCServerIMDMessageRecordRetractNotificationsForChatGuids_asyncIPCAction(v987, v988, v989, v990, v987);
      uint64_t v20 = 239;
      break;
    case 0xF0uLL:
      id v991 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v992 = a5;
      }
      else {
        uint64_t v992 = 0;
      }
      if (a4) {
        uint64_t v993 = a6;
      }
      else {
        uint64_t v993 = 0;
      }
      objc_msgSend(v991, "handleIMDMessageRecordUpdateRecoverableMessageSyncStateForMessageGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v992, v993);
      uint64_t v20 = 240;
      break;
    case 0xF1uLL:
      id v994 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v995 = a5;
      }
      else {
        uint64_t v995 = 0;
      }
      if (a4) {
        uint64_t v996 = a6;
      }
      else {
        uint64_t v996 = 0;
      }
      objc_msgSend(v994, "notifyFirstUnlockComplete_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v995, v996);
      uint64_t v20 = 241;
      break;
    case 0xF2uLL:
      uint64_t v997 = IMGetXPCStringFromDictionary();
      uint64_t v998 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v1000 = a5;
      }
      else {
        uint64_t v1000 = 0;
      }
      if (a4) {
        uint64_t v1001 = a6;
      }
      else {
        uint64_t v1001 = 0;
      }
      __XPCServerIMDUpdateWallpaperForCNContact_IPCAction(v998, v999, v1000, v1001, v997, v998);
      uint64_t v20 = 242;
      break;
    case 0xF3uLL:
      uint64_t v1002 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v1004 = a5;
      }
      else {
        uint64_t v1004 = 0;
      }
      if (a4) {
        uint64_t v1005 = a6;
      }
      else {
        uint64_t v1005 = 0;
      }
      __XPCServerIMDCNGivenNameAndBirthdayForHandleID_IPCAction(v1002, v1003, v1004, v1005, v1002);
      uint64_t v20 = 243;
      break;
    case 0xF4uLL:
      uint64_t v1006 = IMGetXPCStringFromDictionary();
      if (a4) {
        uint64_t v1008 = a5;
      }
      else {
        uint64_t v1008 = 0;
      }
      if (a4) {
        uint64_t v1009 = a6;
      }
      else {
        uint64_t v1009 = 0;
      }
      __XPCServerIMDCNFullNameAndOrganizationNameForHandleID_IPCAction(v1006, v1007, v1008, v1009, v1006);
      uint64_t v20 = 244;
      break;
    case 0xF5uLL:
      id v1010 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1011 = a5;
      }
      else {
        uint64_t v1011 = 0;
      }
      if (a4) {
        uint64_t v1012 = a6;
      }
      else {
        uint64_t v1012 = 0;
      }
      objc_msgSend(v1010, "handleIMDCountOfRecordType_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1011, v1012);
      uint64_t v20 = 245;
      break;
    case 0xF6uLL:
      id v1013 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1014 = a5;
      }
      else {
        uint64_t v1014 = 0;
      }
      if (a4) {
        uint64_t v1015 = a6;
      }
      else {
        uint64_t v1015 = 0;
      }
      objc_msgSend(v1013, "handleIMDHandleRecordCopyHandlesFilteredUsingPredicate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1014, v1015);
      uint64_t v20 = 246;
      break;
    case 0xF7uLL:
      id v1016 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1017 = a5;
      }
      else {
        uint64_t v1017 = 0;
      }
      if (a4) {
        uint64_t v1018 = a6;
      }
      else {
        uint64_t v1018 = 0;
      }
      objc_msgSend(v1016, "handleIMDHandleRecordCopySortedHandlesFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1017, v1018);
      uint64_t v20 = 247;
      break;
    case 0xF8uLL:
      id v1019 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1020 = a5;
      }
      else {
        uint64_t v1020 = 0;
      }
      if (a4) {
        uint64_t v1021 = a6;
      }
      else {
        uint64_t v1021 = 0;
      }
      objc_msgSend(v1019, "handleIMDMessageRecordMarkGUIDsAsRead_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1020, v1021);
      uint64_t v20 = 248;
      break;
    case 0xF9uLL:
      int64_t v1022 = xpc_dictionary_get_int64(a3, "identifier");
      if (a4) {
        uint64_t v1024 = a5;
      }
      else {
        uint64_t v1024 = 0;
      }
      if (a4) {
        uint64_t v1025 = a6;
      }
      else {
        uint64_t v1025 = 0;
      }
      __XPCServerIMDChatRecordCopyChatRecordForIdentifier_IPCAction(v1022, v1023, v1024, v1025, v1022);
      uint64_t v20 = 249;
      break;
    case 0xFAuLL:
      id v1026 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1027 = a5;
      }
      else {
        uint64_t v1027 = 0;
      }
      if (a4) {
        uint64_t v1028 = a6;
      }
      else {
        uint64_t v1028 = 0;
      }
      objc_msgSend(v1026, "handleIMDFetchContactsForIdentifiers_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1027, v1028);
      uint64_t v20 = 250;
      break;
    case 0xFBuLL:
      id v1029 = +[IMDDatabaseServer sharedServer];
      if (a4) {
        uint64_t v1030 = a5;
      }
      else {
        uint64_t v1030 = 0;
      }
      if (a4) {
        uint64_t v1031 = a6;
      }
      else {
        uint64_t v1031 = 0;
      }
      objc_msgSend(v1029, "handleIMDDeleteDatabase_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, a3, v1030, v1031);
      uint64_t v20 = 251;
      break;
    default:
      break;
  }

  if (IMOSLoggingEnabled())
  {
    v1048 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1048, OS_LOG_TYPE_INFO))
    {
      uint64_t v1049 = IMProcessNameForPid();
      v1050 = @"NO";
      *(_DWORD *)long long buf = 134219010;
      unint64_t v1306 = a1;
      __int16 v1307 = 2112;
      if (a4) {
        v1050 = @"YES";
      }
      v1308 = v14;
      __int16 v1309 = 1024;
      pid_t v1310 = pid;
      __int16 v1311 = 2112;
      uint64_t v1312 = v1049;
      __int16 v1313 = 2112;
      v1314 = v1050;
      _os_log_impl(&dword_1AFB53000, v1048, OS_LOG_TYPE_INFO, "Handled message %ld/%@ from (%d: %@) wantsReply %@", buf, 0x30u);
    }
  }
  os_activity_scope_leave(&state);
  return v20;
}

void IMDPersistencePerformBlockAfterDelay(void *a1, double a2)
{
  if (a1)
  {
    if (byte_1EB5ABD00)
    {
      IMDSharedThreadedRecordStore();
      CSDBPerformBlockAfterDelay();
    }
    else
    {
      id v3 = (id)[a1 copy];
      if (qword_1E9AF83D8 != -1) {
        dispatch_once(&qword_1E9AF83D8, &unk_1F084C340);
      }
      uint64_t v4 = qword_1E9AF83D0;
      if (qword_1E9AF83D0)
      {
        dispatch_time_t v5 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1AFC535D4;
        block[3] = &unk_1E5F922D0;
        block[4] = v3;
        dispatch_after(v5, v4, block);
      }
    }
  }
}

uint64_t sub_1AFB5FABC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithChatRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void IMDAttachmentRecordDoubleCheckSize(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (qword_1EB5AB9D8 != -1) {
    dispatch_once(&qword_1EB5AB9D8, &unk_1F084CB60);
  }
  if (byte_1E9AF7F50)
  {
    if (v3 && [v3 length])
    {
      long long v8 = *MEMORY[0x1E4F6D360];
      char v4 = IMFileSizeForItemAtPath();
      dispatch_time_t v5 = 0;
      if (v4)
      {
        int64_t v6 = IMLogHandleForCategory();
        uint64_t v7 = v6;
        if ((void)v8 == a2)
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412802;
            id v10 = v3;
            __int16 v11 = 2048;
            uint64_t v12 = v8;
            __int16 v13 = 2048;
            uint64_t v14 = *((void *)&v8 + 1);
            _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Writing correct size for attachment at path: %@. Size: %lld (allocation size on disk: %lld)", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138413058;
          id v10 = v3;
          __int16 v11 = 2048;
          uint64_t v12 = a2;
          __int16 v13 = 2048;
          uint64_t v14 = v8;
          __int16 v15 = 2048;
          uint64_t v16 = *((void *)&v8 + 1);
          _os_log_error_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_ERROR, "Writing incorrect size for attachment at path: %@. Incorrect size %lld, correct size: %lld (allocation size on disk: %lld)", buf, 0x2Au);
        }
      }
      else
      {
        uint64_t v7 = IMLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_1AFC61C08((uint64_t)v3, v5, v7);
        }
      }
    }
    else
    {
      dispatch_time_t v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1AFC61BC4(v5);
      }
    }
  }
}

void sub_1AFB5FDE0()
{
  id v1 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v0 = [v1 isInternalInstall];
  if (v0) {
    LOBYTE(v0) = IMGetDomainBoolForKeyWithDefaultValue();
  }
  byte_1E9AF7F50 = v0;
}

id sub_1AFB5FE4C(void *a1)
{
  uint64_t v2 = [a1 identifier];
  id v3 = [a1 content];
  char v4 = [v3 userInfo];
  dispatch_time_t v5 = (void *)[v4 mutableCopy];

  [v5 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"CKBBContextKeyIsCellularWaypointAvailable"];
  int64_t v6 = [a1 content];
  uint64_t v7 = (void *)[v6 mutableCopy];

  long long v8 = (void *)[v5 copy];
  [v7 setUserInfo:v8];

  uint64_t v9 = (void *)[v7 copy];
  id v10 = [a1 trigger];
  __int16 v11 = [MEMORY[0x1E4F44628] requestWithIdentifier:v2 content:v9 trigger:v10];

  return v11;
}

void sub_1AFB60BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1AFB60C14(uint64_t a1, uint64_t a2)
{
}

void sub_1AFB60C24(uint64_t a1)
{
}

uint64_t sub_1AFB60C30(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

void sub_1AFB61044(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB61064(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFB61074(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFB61084(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFB61094(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

void sub_1AFB61520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB61538(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1AFB617A0()
{
  int v0 = objc_alloc_init(IMDContactCache);
  uint64_t v1 = (void *)qword_1EB5ABCD0;
  qword_1EB5ABCD0 = (uint64_t)v0;
}

uint64_t sub_1AFB61E00(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCacheForAliases:*(void *)(a1 + 40)];
}

uint64_t sub_1AFB61FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) cacheContact:a3 forKey:a2];
}

void IMDMessagePTaskInsertRow(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v7, 0, sizeof(v7));
    memset(v6, 0, sizeof(v6));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
    _IMDSqlOperationBeginQuery((uint64_t)v6, @"INSERT INTO message_processing_task (guid, task_flags) VALUES (?, ?);");
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, a1);
    IMDSqlStatementBindInt64((uint64_t)v7, a2);
    IMDSqlOperationFinishQuery((uint64_t)v6);
    uint64_t v5 = 0;
    IMDSqlOperationRelease((uint64_t)v6, &v5);
    if (v5)
    {
      char v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        uint64_t v9 = a1;
        __int16 v10 = 2048;
        sqlite3_int64 v11 = a2;
        __int16 v12 = 2112;
        uint64_t v13 = v5;
        _os_log_error_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_ERROR, "Unable to insert row (guid:%@ taskFlag:%ld) into Message PTask Table: %@", buf, 0x20u);
      }
    }
  }
  else
  {
    __syncXPCIMDMessagePTaskInsertRow_IPCAction(0, a1, a2);
  }
}

uint64_t IMDMessagePTaskSelectWithLimit(sqlite3_int64 a1)
{
  uint64_t v10 = 0;
  sqlite3_int64 v11 = &v10;
  uint64_t v12 = 0x3052000000;
  uint64_t v13 = sub_1AFB63F44;
  uint64_t v14 = sub_1AFB63F54;
  id v15 = 0;
  id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v9, 0, sizeof(v9));
    memset(v8, 0, sizeof(v8));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v8);
    _IMDSqlOperationBeginQuery((uint64_t)v8, @"SELECT * FROM message_processing_task ORDER BY ROWID ASC LIMIT ?;");
    IMDSqlStatementBindInt64((uint64_t)v9, a1);
    while (IMDSqlOperationHasRows((uint64_t)v8))
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v9);
      if (Row) {
        [(id)v11[5] addObject:Row];
      }
    }
    IMDSqlOperationFinishQuery((uint64_t)v8);
    uint64_t v7 = 0;
    IMDSqlOperationRelease((uint64_t)v8, &v7);
    if (v7)
    {
      id v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1AFC61EB4(&v7, v3);
      }
    }
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    _OWORD v6[2] = (void (*)(void))sub_1AFB63F60;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    v6[4] = (void (*)(void))&v10;
    __syncXPCIMDMessagePTaskSelectWithLimit_IPCAction(v6, a1);
  }
  uint64_t v4 = v11[5];
  _Block_object_dispose(&v10, 8);
  return v4;
}

void sub_1AFB63F18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB63F44(uint64_t a1, uint64_t a2)
{
}

void sub_1AFB63F54(uint64_t a1)
{
}

xpc_object_t sub_1AFB63F60(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB63FF4;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB63FF4(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v2 setObject:IMGetXPCStringFromDictionary() forKeyedSubscript:@"guid"];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", IMGetXPCIntFromDictionary()), @"task_flags");
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v2];

  return 1;
}

void IMDMessagePTaskUpdateTaskFlagsForGUID(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v7, 0, sizeof(v7));
    memset(v6, 0, sizeof(v6));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
    _IMDSqlOperationBeginQuery((uint64_t)v6, @"UPDATE message_processing_task SET task_flags = ? WHERE guid = ?;");
    IMDSqlStatementBindInt64((uint64_t)v7, a2);
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, a1);
    IMDSqlOperationFinishQuery((uint64_t)v6);
    uint64_t v5 = 0;
    IMDSqlOperationRelease((uint64_t)v6, &v5);
    if (v5)
    {
      uint64_t v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        uint64_t v9 = a1;
        __int16 v10 = 2048;
        sqlite3_int64 v11 = a2;
        __int16 v12 = 2112;
        uint64_t v13 = v5;
        _os_log_error_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_ERROR, "Unable to update row (guid:%@ taskFlag:%ld) for Message PTask Table: %@", buf, 0x20u);
      }
    }
  }
  else
  {
    __syncXPCIMDMessagePTaskUpdateTaskFlagsForGUID_IPCAction(0, a1, a2);
  }
}

void IMDMessagePTaskDeleteAllCompletedTask()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    _IMDSqlOperationBeginQuery((uint64_t)v2, @"Delete from message_processing_task WHERE task_flags = 0;");
    IMDSqlOperationFinishQuery((uint64_t)v2);
    uint64_t v1 = 0;
    IMDSqlOperationRelease((uint64_t)v2, &v1);
    if (v1)
    {
      int v0 = IMLogHandleForCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
        sub_1AFC61F30(&v1, v0);
      }
    }
  }
  else
  {
    __syncXPCIMDMessagePTaskDeleteAllCompletedTask_IPCAction(0);
  }
}

void sub_1AFB64D60()
{
  v10[15] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F6D5B8];
  v9[0] = @"rowID";
  v9[1] = v0;
  v10[0] = @"ROWID";
  v10[1] = @"item_type";
  uint64_t v1 = *MEMORY[0x1E4F6D590];
  v9[2] = *MEMORY[0x1E4F6D5A0];
  v9[3] = v1;
  v10[2] = @"guid";
  v10[3] = @"date";
  uint64_t v2 = *MEMORY[0x1E4F6D5B0];
  v9[4] = *MEMORY[0x1E4F6D5D0];
  v9[5] = v2;
  v10[4] = @"text";
  v10[5] = @"is_from_me";
  uint64_t v3 = *MEMORY[0x1E4F6D5A8];
  v9[6] = *MEMORY[0x1E4F6D598];
  v9[7] = v3;
  v10[6] = @"fallback_hash";
  v10[7] = @"has_dd_results";
  uint64_t v4 = *MEMORY[0x1E4F6D5E0];
  v9[8] = *MEMORY[0x1E4F6D5C0];
  _OWORD v9[9] = v4;
  v10[8] = @"needs_relay";
  v10[9] = @"schedule_type";
  uint64_t v5 = *MEMORY[0x1E4F6D5E8];
  v9[10] = *MEMORY[0x1E4F6D5D8];
  v9[11] = v5;
  v10[10] = @"schedule_state";
  v10[11] = @"service";
  uint64_t v6 = *MEMORY[0x1E4F6D580];
  v9[12] = *MEMORY[0x1E4F6D588];
  v9[13] = v6;
  v10[12] = @"ck_sync_state";
  v10[13] = @"balloon_bundle_id";
  v9[14] = *MEMORY[0x1E4F6D5C8];
  v10[14] = @"is_pending_satellite_send";
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:15];
  long long v8 = (void *)qword_1EB5ABA10;
  qword_1EB5ABA10 = v7;
}

void *IMDCreateIMItemFromIMDMessageRecord(const __CFArray **a1, void *a2, char a3, int a4)
{
  return IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(a1, a2, a3, a4, 0);
}

void sub_1AFB653E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB6540C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB6541C(uint64_t a1)
{
}

void sub_1AFB65424(uint64_t a1, void *a2)
{
}

void sub_1AFB65434(uint64_t a1, void *a2)
{
}

void sub_1AFB656F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB65714(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB65724(uint64_t a1)
{
}

void sub_1AFB6572C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) bindParametersToSqliteWithStatement:a4];
  id v8 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v5 = [*(id *)(a1 + 40) _copyHandleRecordsFromCoreSDBResults:v8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1AFB65BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1AFB65C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5) {
    [v5 bindParametersToSqliteWithStatement:a4];
  }
  CSDBSqliteBindInt64();
  id v9 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v6 = [*(id *)(a1 + 40) _copyHandleRecordsFromCoreSDBResults:v9];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1AFB65D10()
{
  uint64_t v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v1 = [v0 isSpotlightClientStateEnabled];

  uint64_t v2 = &off_1E5F8D2B0;
  if (!v1) {
    uint64_t v2 = off_1E5F8D2A8;
  }
  id v3 = objc_alloc_init(*v2);
  uint64_t v4 = (void *)qword_1E9AF8008;
  qword_1E9AF8008 = (uint64_t)v3;
}

void sub_1AFB65E18(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 32);
  id v13 = 0;
  uint64_t v4 = [v2 currentClientStateWithError:&v13];
  uint64_t v5 = v13;
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC62020(v3);
    }
LABEL_7:

    goto LABEL_8;
  }
  id v8 = *(void **)(a1 + 40);
  id v12 = 0;
  [v8 saveClientState:v4 withError:&v12];
  id v9 = v12;
  if (v9)
  {
    uint64_t v6 = v9;
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC61FAC(v3);
    }
    goto LABEL_7;
  }
  [MEMORY[0x1E4F6EA40] _finishedMigration];
  uint64_t v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_DEFAULT, "Imported indexed client state from %@ to %@", buf, 0x16u);
  }
LABEL_8:
}

void sub_1AFB662A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB662D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB662E0(uint64_t a1)
{
}

void sub_1AFB662E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1AFB66418(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1AFB664E8;
  v10[3] = &unk_1E5F8E5C0;
  id v7 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v7;
  id v11 = v5;
  id v8 = v6;
  id v9 = v5;
  sub_1AFBD5444(v10);
}

uint64_t sub_1AFB664E8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1AFB669B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB669D0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1AFB66AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1AFB66B78;
  v6[3] = &unk_1E5F8E638;
  id v4 = *(id *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  sub_1AFBD5444(v6);
}

uint64_t sub_1AFB66B78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1AFB66ED0()
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (qword_1E9AF7FE8 != -1) {
    dispatch_once(&qword_1E9AF7FE8, &unk_1F084C020);
  }
  if (byte_1E9AF8030)
  {
    id v0 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v1 = *MEMORY[0x1E4F6C1B0];
    uint64_t v5 = *MEMORY[0x1E4F28228];
    v6[0] = @"Simulated error due to defaults";
    uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1];
    id v3 = (void *)[v0 initWithDomain:v1 code:1000 userInfo:v2];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_1AFB66FE8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    if ([v5 length])
    {
      id v13 = 0;
      id v7 = (id)[objc_alloc(MEMORY[0x1E4F6EA40]) initWithData:v6 error:&v13];
      id v8 = v13;
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = IMLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1AFC620C8((uint64_t)v9);
        }

        id v11 = objc_alloc_init(MEMORY[0x1E4F6EA40]);
        id v7 = v11;
      }
    }
    else
    {
      id v7 = objc_alloc_init(MEMORY[0x1E4F6EA40]);
    }
    id v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v15 = v7;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Current client state: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_1AFB6740C()
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (qword_1E9AF7FF0 != -1) {
    dispatch_once(&qword_1E9AF7FF0, &unk_1F084D080);
  }
  if (byte_1E9AF8038)
  {
    id v0 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v1 = *MEMORY[0x1E4F6C1B0];
    uint64_t v5 = *MEMORY[0x1E4F28228];
    v6[0] = @"Simulated error due to defaults";
    uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1];
    id v3 = (void *)[v0 initWithDomain:v1 code:1000 userInfo:v2];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_1AFB67524(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = IMLogHandleForCategory();
  id v6 = v5;
  if (a2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC62218(a1, v6);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Saved client state", v7, 2u);
    }

    notify_post("com.apple.imdpersistenceagent.notification.spotlightclientstateupdated");
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

double sub_1AFB67914()
{
  id v0 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v1 = [v0 isInternalInstall];

  if (v1)
  {
    double result = (double)IMGetDomainIntForKey();
    *(double *)&qword_1E9AF8020 = result;
  }
  return result;
}

double sub_1AFB67974()
{
  id v0 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v1 = [v0 isInternalInstall];

  if (v1)
  {
    double result = (double)IMGetDomainIntForKey();
    *(double *)&qword_1E9AF8028 = result;
  }
  return result;
}

void sub_1AFB679D4()
{
  id v0 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v1 = [v0 isInternalInstall];

  if (v1) {
    byte_1E9AF8030 = IMGetDomainBoolForKey();
  }
}

void sub_1AFB67A30()
{
  id v0 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v1 = [v0 isInternalInstall];

  if (v1) {
    byte_1E9AF8038 = IMGetDomainBoolForKey();
  }
}

void sub_1AFB67A8C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1AFB67AA8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1AFB67D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB67DB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB67DC4(uint64_t a1)
{
}

void sub_1AFB67DCC(uint64_t a1, void *a2)
{
}

void IMDSqlStatementBindTextFromCFString(uint64_t a1, uint64_t a2)
{
  if (a1 && *(void *)(a1 + 16) && *(void *)a1
    || (uint64_t v4 = IMLogHandleForCategory(), !os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    if (a2) {
      goto LABEL_8;
    }
  }
  else
  {
    sub_1AFC6233C();
    if (a2) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1AFC62294();
  }
LABEL_8:
  if (a1 && *(void *)a1)
  {
    uint64_t v6 = CSDBCreateUTF8StringFromCFString();
    if (v6)
    {
      id v7 = (const char *)v6;
      id v8 = *(sqlite3_stmt **)a1;
      int v9 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v9;
      sqlite3_bind_text(v8, v9, v7, -1, MEMORY[0x1E4F14838]);
    }
  }
}

void IMDSqlStatementBindTextFromArrayOfCFStrings(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray && (uint64_t v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6248C();
    if (!a1) {
      goto LABEL_9;
    }
  }
  else if (!a1)
  {
    goto LABEL_9;
  }
  if (*(void *)(a1 + 16) && *(void *)a1)
  {
    if (!theArray) {
      return;
    }
LABEL_13:
    int Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v7 = 0;
      if (Count <= 1uLL) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = Count;
      }
      do
      {
        CFArrayGetValueAtIndex(theArray, v7);
        uint64_t v9 = CSDBCreateUTF8StringFromCFString();
        if (v9)
        {
          uint64_t v10 = (const char *)v9;
          id v11 = *(sqlite3_stmt **)a1;
          int v12 = *(_DWORD *)(a1 + 32) + 1;
          *(_DWORD *)(a1 + 32) = v12;
          sqlite3_bind_text(v11, v12, v10, -1, MEMORY[0x1E4F14838]);
        }
        ++v7;
      }
      while (v8 != v7);
    }
    return;
  }
LABEL_9:
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC623E4();
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (theArray && *(void *)a1) {
    goto LABEL_13;
  }
}

void IMDSqlStatementBindInt64(uint64_t a1, sqlite3_int64 a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v4 = *(sqlite3_stmt **)a1;
      if (*(void *)a1) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC62534();
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  uint64_t v4 = *(sqlite3_stmt **)a1;
  if (*(void *)a1)
  {
LABEL_7:
    int v6 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v6;
    sqlite3_bind_int64(v4, v6, a2);
  }
}

void IMDSqlStatementBindInt(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = *(sqlite3_stmt **)a1;
    if (*(void *)a1) {
      goto LABEL_6;
    }
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC625DC();
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  uint64_t v4 = *(sqlite3_stmt **)a1;
  if (*(void *)a1)
  {
LABEL_6:
    int v6 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v6;
    sqlite3_bind_int(v4, v6, a2);
  }
}

void IMDSqlStatementBindDouble(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = *(sqlite3_stmt **)a1;
    if (*(void *)a1) {
      goto LABEL_6;
    }
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC62684();
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  uint64_t v4 = *(sqlite3_stmt **)a1;
  if (*(void *)a1)
  {
LABEL_6:
    int v6 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v6;
    sqlite3_bind_double(v4, v6, a2);
  }
}

void IMDSqlStatementBindBlob(uint64_t a1, CFDataRef theData)
{
  if (a1)
  {
    uint64_t v4 = *(sqlite3_stmt **)a1;
    if (*(void *)a1) {
      goto LABEL_6;
    }
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC6272C();
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  uint64_t v4 = *(sqlite3_stmt **)a1;
  if (*(void *)a1)
  {
LABEL_6:
    int v6 = *(_DWORD *)(a1 + 32);
    int v7 = v6 + 1;
    *(_DWORD *)(a1 + 32) = v6 + 1;
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      int Length = CFDataGetLength(theData);
      sqlite3_bind_blob(v4, v7, BytePtr, Length, 0);
    }
    else
    {
      sqlite3_bind_null(v4, v6 + 1);
    }
  }
}

uint64_t IMDIntFromSqlColumn(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (!*(void *)a1)
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6287C();
    }
    uint64_t v2 = *(sqlite3_stmt ***)a1;
    if (!*(void *)a1) {
      return 0;
    }
  }
  if (*v2) {
    return sqlite3_column_int(*v2, *(_DWORD *)(a1 + 16));
  }
  uint64_t v5 = IMLogHandleForCategory();
  uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1AFC627D4();
    return 0;
  }
  return result;
}

double IMDDoubleFromSqlColumn(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (*(void *)a1) {
    goto LABEL_13;
  }
  id v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1AFC629CC();
  }
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (!*(void *)a1) {
    return 0.0;
  }
LABEL_13:
  if (*v2) {
    return sqlite3_column_double(*v2, *(_DWORD *)(a1 + 16));
  }
  uint64_t v5 = IMLogHandleForCategory();
  double v4 = 0.0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1AFC62924();
  }
  return v4;
}

sqlite3_int64 IMDInt64FromSqlColumn(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (*(void *)a1) {
    goto LABEL_12;
  }
  id v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1AFC62B1C();
  }
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (*(void *)a1)
  {
LABEL_12:
    if (*v2) {
      return sqlite3_column_int64(*v2, *(_DWORD *)(a1 + 16));
    }
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC62A74();
    }
  }
  return 0;
}

const unsigned __int8 *IMDStringFromSqlColumn(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (!*(void *)a1)
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC62C6C();
    }
    uint64_t v2 = *(sqlite3_stmt ***)a1;
    if (!*(void *)a1) {
      return 0;
    }
  }
  if (!*v2)
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC62BC4();
    }
    return 0;
  }
  uint64_t result = sqlite3_column_text(*v2, *(_DWORD *)(a1 + 16));
  if (result) {
    return (const unsigned __int8 *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)result, 0x8000100u);
  }
  return result;
}

CFDataRef IMDBlobFromSqlColumn(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (*(void *)a1) {
    goto LABEL_5;
  }
  id v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1AFC62DBC();
  }
  uint64_t v2 = *(sqlite3_stmt ***)a1;
  if (*(void *)a1)
  {
LABEL_5:
    double v4 = *v2;
    if (*v2)
    {
      uint64_t v5 = (const UInt8 *)sqlite3_column_blob(*v2, *(_DWORD *)(a1 + 16));
      unsigned int v6 = sqlite3_column_bytes(v4, *(_DWORD *)(a1 + 16));
      if (v5) {
        BOOL v7 = v6 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7) {
        return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v6);
      }
    }
    else
    {
      uint64_t v9 = IMLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1AFC62D14();
      }
    }
  }
  return 0;
}

void IMDSqlStatementIterateRow(sqlite3_stmt **a1, uint64_t a2)
{
  if (!a2 && (double v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC62FB4();
    if (a1)
    {
LABEL_4:
      if (*a1) {
        goto LABEL_6;
      }
    }
  }
  else if (a1)
  {
    goto LABEL_4;
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC62F0C();
    if (!a1) {
      return;
    }
    goto LABEL_7;
  }
LABEL_6:
  if (!a1) {
    return;
  }
LABEL_7:
  if (a2)
  {
    unsigned int v6 = *a1;
    if (*a1)
    {
      char v14 = 0;
      if (sqlite3_column_count(v6) >= 1)
      {
        int v7 = 0;
        do
        {
          uint64_t v8 = sqlite3_column_name(v6, v7);
          uint64_t v9 = *(void (**)(uint64_t, void *, char *))(a2 + 16);
          v11[0] = a1;
          v11[1] = v8;
          int v12 = v7;
          int v13 = 0;
          v9(a2, v11, &v14);
          if (v14) {
            break;
          }
          ++v7;
        }
        while (v7 < sqlite3_column_count(v6));
      }
    }
    else
    {
      uint64_t v10 = IMLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1AFC62E64();
      }
    }
  }
}

void IMDSqlStatementColumnByIndex(sqlite3_stmt **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1 || (unsigned int v6 = *a1) == 0)
  {
    int v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6305C();
    }
    if (!a1) {
      goto LABEL_16;
    }
    unsigned int v6 = *a1;
    if (!*a1) {
      goto LABEL_16;
    }
  }
  int v8 = sqlite3_column_count(v6);
  int v9 = v8;
  if (a2 < 0 || v8 <= a2)
  {
    uint64_t v10 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"index >= 0 && index < count", "IMDSqlColumn IMDSqlStatementColumnByIndex(IMDSqlStatement *, int)", IMFileLocationTrimFileName(), 187, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    id v11 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v14 = v10;
        _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (*a1)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = a2;
    *(_DWORD *)(a3 + 20) = v9;
  }
  else
  {
LABEL_16:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void IMDSqlStatementColumnByName(sqlite3_stmt **a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1 || (unsigned int v6 = *a1) == 0)
  {
    int v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_1AFC63104();
      if (!a1) {
        goto LABEL_12;
      }
    }
    else if (!a1)
    {
      goto LABEL_12;
    }
    unsigned int v6 = *a1;
    if (*a1) {
      goto LABEL_6;
    }
LABEL_12:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return;
  }
LABEL_6:
  int v8 = sqlite3_column_count(v6);
  if (v8 < 1) {
    goto LABEL_12;
  }
  int v9 = v8;
  int v10 = 0;
  while (1)
  {
    id v11 = sqlite3_column_name(*a1, v10);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 20) = v9;
    if (!v11)
    {
      id v11 = sqlite3_column_name(*a1, v10);
      *(void *)(a3 + 8) = v11;
    }
    if (!strncmp(v11, a2, 0x100uLL)) {
      break;
    }
    if (v9 == ++v10) {
      goto LABEL_12;
    }
  }
}

uint64_t IMDSqlColumnGetType(uint64_t a1)
{
  if (*(void *)a1 && **(void **)a1) {
    return sqlite3_column_type(**(sqlite3_stmt ***)a1, *(_DWORD *)(a1 + 16));
  }
  else {
    return 0;
  }
}

sqlite3_stmt *IMDSqlColumnGetObject(long long *a1)
{
  int v1 = *(sqlite3_stmt ***)a1;
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t result = *v1;
  if (*v1)
  {
    switch(sqlite3_column_type(result, *((_DWORD *)a1 + 4)))
    {
      case 1:
        id v4 = objc_alloc(MEMORY[0x1E4F28ED0]);
        long long v6 = *a1;
        uint64_t v7 = *((void *)a1 + 2);
        IMDInt64FromSqlColumn((uint64_t)&v6);
        uint64_t result = (sqlite3_stmt *)MEMORY[0x1F4181798](v4, sel_initWithUnsignedLongLong_);
        break;
      case 2:
        id v5 = objc_alloc(MEMORY[0x1E4F28ED0]);
        long long v6 = *a1;
        uint64_t v7 = *((void *)a1 + 2);
        IMDDoubleFromSqlColumn((uint64_t)&v6);
        uint64_t result = (sqlite3_stmt *)MEMORY[0x1F4181798](v5, sel_initWithDouble_);
        break;
      case 3:
        long long v6 = *a1;
        uint64_t v7 = *((void *)a1 + 2);
        uint64_t result = (sqlite3_stmt *)IMDStringFromSqlColumn((uint64_t)&v6);
        break;
      case 4:
        long long v6 = *a1;
        uint64_t v7 = *((void *)a1 + 2);
        uint64_t result = IMDBlobFromSqlColumn((uint64_t)&v6);
        break;
      default:
        return 0;
    }
  }
  return result;
}

void IMDSqlColumnSetColumnValueInXPCDictionary(void *a1, uint64_t a2)
{
  if (!a1)
  {
    int v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1AFC63254();
    }
    if (**(void **)a2) {
      return;
    }
LABEL_14:
    int v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1AFC631AC();
    }
    return;
  }
  id v3 = *(sqlite3_stmt ***)a2;
  id v4 = **(sqlite3_stmt ***)a2;
  if (!v4) {
    goto LABEL_14;
  }
  long long v6 = *(const char **)(a2 + 8);
  if (!v6)
  {
    uint64_t v7 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *(_DWORD *)(a2 + 16));
    *(void *)(a2 + 8) = v7;
    id v3 = *(sqlite3_stmt ***)a2;
    if (!*(void *)a2) {
      return;
    }
    long long v6 = v7;
  }
  if (*v3)
  {
    switch(sqlite3_column_type(*v3, *(_DWORD *)(a2 + 16)))
    {
      case 1:
        sqlite3_int64 v8 = sqlite3_column_int64(v4, *(_DWORD *)(a2 + 16));
        xpc_dictionary_set_int64(a1, v6, v8);
        break;
      case 2:
        double v15 = sqlite3_column_double(v4, *(_DWORD *)(a2 + 16));
        xpc_dictionary_set_double(a1, v6, v15);
        break;
      case 3:
        id v11 = sqlite3_column_text(v4, *(_DWORD *)(a2 + 16));
        if (v11)
        {
          xpc_dictionary_set_string(a1, v6, (const char *)v11);
        }
        break;
      case 4:
        int v12 = sqlite3_column_blob(v4, *(_DWORD *)(a2 + 16));
        unsigned int v13 = sqlite3_column_bytes(v4, *(_DWORD *)(a2 + 16));
        if (v12) {
          BOOL v14 = v13 == 0;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14)
        {
          xpc_dictionary_set_data(a1, v6, v12, v13);
        }
        break;
      default:
        return;
    }
  }
}

xpc_object_t IMDSqlStatementGetXPCRow(sqlite3_stmt **a1)
{
  if (!a1 || !*a1)
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_1AFC632FC();
      if (!a1) {
        return 0;
      }
    }
    else if (!a1)
    {
      return 0;
    }
    if (*a1) {
      goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (*a1)
  {
    int v4 = sqlite3_column_count(*a1);
    if (v4 >= 1)
    {
      int v5 = v4;
      for (int i = 0; i != v5; ++i)
      {
        v8[0] = a1;
        v8[1] = 0;
        int v9 = i;
        int v10 = v5;
        IMDSqlColumnSetColumnValueInXPCDictionary(v3, (uint64_t)v8);
      }
    }
  }
  return v3;
}

__CFDictionary *IMDSqlStatementGetRow(sqlite3_stmt **a1)
{
  if (!a1 || (uint64_t v2 = *a1) == 0)
  {
    xpc_object_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_1AFC633A4();
      if (!a1) {
        return 0;
      }
    }
    else if (!a1)
    {
      return 0;
    }
    uint64_t v2 = *a1;
    if (*a1) {
      goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  int v4 = sqlite3_column_count(v2);
  if (v4 < 1) {
    return 0;
  }
  int v5 = v4;
  int v6 = 0;
  Mutable = 0;
  sqlite3_int64 v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    int v10 = sqlite3_column_name(*a1, v6);
    *(void *)&long long v16 = a1;
    *((void *)&v16 + 1) = v10;
    int v17 = v6;
    int v18 = v5;
    Object = IMDSqlColumnGetObject(&v16);
    if (Object)
    {
      int v12 = Object;
      id v13 = [NSString alloc];
      if (!v10)
      {
        if (*a1) {
          int v10 = sqlite3_column_name(*a1, v6);
        }
        else {
          int v10 = 0;
        }
      }
      BOOL v14 = (void *)[v13 initWithCString:v10 encoding:4];
      if (!Mutable) {
        Mutable = CFDictionaryCreateMutable(0, 0, v8, v9);
      }
      CFDictionarySetValue(Mutable, v14, v12);
    }
    ++v6;
  }
  while (v5 != v6);
  return Mutable;
}

sqlite3_stmt *IMDSqlStatementColumnCount(sqlite3_stmt **a1)
{
  if (a1)
  {
    uint64_t result = *a1;
    if (result) {
      return (sqlite3_stmt *)sqlite3_column_count(result);
    }
    xpc_object_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC634F4();
    }
    uint64_t result = *a1;
    if (*a1) {
      return (sqlite3_stmt *)sqlite3_column_count(result);
    }
  }
  else
  {
    int v4 = IMLogHandleForCategory();
    uint64_t result = (sqlite3_stmt *)os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1AFC6344C();
      return 0;
    }
  }
  return result;
}

void sub_1AFB68FE0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void sub_1AFB69160()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  int v1 = (void *)qword_1EB5ABCD8;
  qword_1EB5ABCD8 = (uint64_t)v0;
}

void sub_1AFB691F0()
{
  os_log_t v0 = os_log_create("com.apple.Messages", "IMDNotificationsController");
  int v1 = (void *)qword_1E9AF8040;
  qword_1E9AF8040 = (uint64_t)v0;
}

void sub_1AFB69340(int a1)
{
  char v1 = a1;
  if ((dispatch_get_specific("_IMDNotificationRequestQueue") != 0) != a1)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "**************************************************************************", buf, 2u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      xpc_object_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "******* Notification work done on wrong queue, please file a radar *******", v7, 2u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      int v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "**************************************************************************", v6, 2u);
      }
    }
    int v5 = +[IMDNotificationsController logger];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1AFC6359C(v1, v5);
    }
  }
}

void sub_1AFB698F0(void *a1)
{
  dispatch_block_t block = a1;
  sub_1AFB69340(0);
  if (qword_1E9AF7F60 != -1) {
    dispatch_once(&qword_1E9AF7F60, &unk_1F084D2F8);
  }
  dispatch_async((dispatch_queue_t)qword_1E9AF7F70, block);
}

void sub_1AFB69968(uint64_t a1)
{
  char v1 = [*(id *)(a1 + 32) notificationCenter];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB699FC;
  v3[3] = &unk_1E5F8E770;
  id v4 = v1;
  id v2 = v1;
  [v2 getNotificationSettingsWithCompletionHandler:v3];
}

void sub_1AFB699FC(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "getNotificationSettingsWithCompletionHandler settings:%@", (uint8_t *)&v5, 0xCu);
    }
  }
  if (![v3 criticalAlertSetting]) {
    [*(id *)(a1 + 32) requestAuthorizationWithOptions:23 completionHandler:&unk_1F084C8B0];
  }
}

void sub_1AFB69AFC(uint64_t a1, int a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    int v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109378;
      v6[1] = a2;
      __int16 v7 = 2112;
      id v8 = v4;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "requestAuthorizationWithOptions granted:%{BOOL}d error:%@", (uint8_t *)v6, 0x12u);
    }
  }
}

void sub_1AFB6AB64(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithLongLong:*(void *)(a1 + 32)];
  IMSetDomainValueForKey();
}

void sub_1AFB6AC3C(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithLongLong:*(void *)(a1 + 32)];
  IMSetDomainValueForKey();
}

void sub_1AFB6ADA0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFB6AD64);
  }
  objc_sync_exit(v2);
  _Unwind_Resume(exc_buf);
}

void sub_1AFB6AE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1AFB6AEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1AFB6AF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_1AFB6AF80(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [v4 date];
  __int16 v7 = [v5 date];
  uint64_t v8 = [v6 compare:v7];
  if (!v8)
  {
    uint64_t v9 = [v4 rowID];
    if (v9 > [v5 rowID]) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = -1;
    }
  }

  return v8;
}

uint64_t sub_1AFB6B0F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
LABEL_8:
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if ([v5 rawDate] <= *(void *)(a1 + 32))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [v5 guid];
        int v11 = 138412290;
        int v12 = v9;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Skipping posting guid as we already posted messages newer: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    goto LABEL_8;
  }
  uint64_t v7 = 1;
LABEL_9:

  return v7;
}

void sub_1AFB6B79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB6B7F0(uint64_t a1, void *a2)
{
  uint64_t result = [a2 count];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1AFB6BCA4(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v5 = [v3 rawDate];
  id v6 = [*(id *)(a1 + 32) _generateNotificationRequestForDeliveryError:v3 isCarouselUITriggered:*(unsigned __int8 *)(a1 + 48)];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [v6 identifier];
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Generated notification request for failed delivery identifier %@", (uint8_t *)&v9, 0xCu);
    }
  }
  [*(id *)(a1 + 40) addObject:v6];
  [*(id *)(a1 + 32) advanceLastAlertedFailedMessageDate:v5];
}

uint64_t sub_1AFB6C22C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllDeliveredMessageNotifications];
}

void sub_1AFB6C68C(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        int v9 = [v8 handleRecord];
        uint64_t v10 = [v9 canonicalizedURIString];
        if (v10)
        {
          uint64_t v11 = (void *)v10;
        }
        else
        {
          int v12 = [v8 handleRecord];
          uint64_t v11 = [v12 uncanonicalizedURIString];

          if (!v11) {
            goto LABEL_11;
          }
        }
        if (([*(id *)(a1 + 32) containsObject:v11] & 1) == 0)
        {
          [*(id *)(a1 + 32) addObject:v11];
          [*(id *)(a1 + 40) addObject:v8];
        }
LABEL_11:
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_1AFB6C8BC(id *a1)
{
  uint64_t v2 = [a1[4] count];
  uint64_t v3 = [a1[5] count];
  id v4 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v3 + v2];
  [v4 addObjectsFromArray:a1[5]];
  [v4 addObjectsFromArray:a1[4]];
  objc_msgSend(a1[6], "__postNotificationRequests:isMostActiveDevice:", v4, objc_msgSend(a1[6], "_isMostActiveDevice"));
}

uint64_t sub_1AFB6C9E4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [v1 _isMostActiveDevice];
  return objc_msgSend(v1, "__postNotificationRequests:isMostActiveDevice:", v2, v3);
}

uint64_t sub_1AFB6CAC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__postNotificationRequests:isMostActiveDevice:", *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_1AFB6CDA8(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC63880(a1, (uint64_t)v3, v4);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = [*(id *)(a1 + 32) identifier];
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Finished posting notification: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1AFB6CEE4(uint64_t a1, void *a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", objc_msgSend(a2, "authorizationStatus"));
  id v3 = [MEMORY[0x1E4F6E890] sharedInstance];
  uint64_t v4 = *MEMORY[0x1E4F6DD30];
  uint64_t v6 = *MEMORY[0x1E4F6DD38];
  v7[0] = v2;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
  [v3 trackEvent:v4 withDictionary:v5];
}

void sub_1AFB6D4F4(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) notificationCenter];
  [v2 removeDeliveredNotificationsWithIdentifiers:*(void *)(a1 + 40)];

  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Withdrew message notifications for message guids %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1AFB6D718(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeAllDeliveredMessageNotifications];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB6D7B0;
  v3[3] = &unk_1E5F8D508;
  uint64_t v2 = *(void **)(a1 + 40);
  void v3[4] = *(void *)(a1 + 32);
  id v4 = v2;
  IMDPersistencePerformBlock(v3, 0);
}

uint64_t sub_1AFB6D7B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotificationsWithContext:*(void *)(a1 + 40)];
}

void sub_1AFB6DCF8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) notificationCenter];
  id v3 = *(void **)(a1 + 40);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFB6DE60;
  v7[3] = &unk_1E5F8E910;
  id v4 = v2;
  id v8 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v7];
  if ([*(id *)(a1 + 48) count])
  {
    if (IMOSLoggingEnabled())
    {
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v10 = v6;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Retracting notifications for messageGUIDs: %@", buf, 0xCu);
      }
    }
    [v4 removeDeliveredNotificationsWithIdentifiers:*(void *)(a1 + 48)];
  }
}

void sub_1AFB6DE60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFB6DF0C;
  v8[3] = &unk_1E5F8E8E8;
  id v9 = v5;
  id v7 = v5;
  [v6 replaceContentForRequestWithIdentifier:v7 replacementContent:a3 completionHandler:v8];
}

void sub_1AFB6DF0C(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC63934(a1, (uint64_t)v3, v4);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Finished updating edited message content for notification request: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1AFB6E380(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) notificationCenter];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFB6E42C;
  v4[3] = &unk_1E5F8E8E8;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 addNotificationRequest:v3 withCompletionHandler:v4];
}

void sub_1AFB6E42C(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "we added the notification request under first unlock %@ with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1AFB71924(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB71880);
  }
  _Unwind_Resume(a1);
}

id sub_1AFB71EE0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1E9AF8050;
  uint64_t v7 = qword_1E9AF8050;
  if (!qword_1E9AF8050)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFB7CB9C;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFB7CB9C((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFB71FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1AFB735F8(uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned char *a5, unsigned char *a6, void *a7, void *a8, void *a9)
{
  long long v15 = [*(id *)(a1 + 32) objectForKey:a2];
  long long v16 = v15;
  if (v15)
  {
    if (a7) {
      *a7 = 0;
    }
    if (a3)
    {
      int v17 = [v15 path];
      id v18 = (id)[v17 length];
      if (v18)
      {
        id v18 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v17 isDirectory:0];
      }
      *a3 = v18;
    }
    if (a4)
    {
      *a4 = [v16 utiString];
    }
    if (a5) {
      *a5 = [v16 isSticker];
    }
    if (a6) {
      *a6 = [v16 isOutgoing];
    }
    if (a8)
    {
      *a8 = [v16 emojiImageShortDescription];
    }
    if (a9)
    {
      uint64_t v19 = [v16 attributionInfo];
      *a9 = [v19 objectForKeyedSubscript:*MEMORY[0x1E4F6D3C0]];
    }
  }

  return v16 != 0;
}

void sub_1AFB73840()
{
  if (IMOSLoggingEnabled())
  {
    os_log_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Re-Alert setting has changd", v1, 2u);
    }
  }
  dword_1EB5AAAF4 = -1;
}

void sub_1AFB73DD0(uint64_t a1, void *a2, char a3)
{
  if (a2) {
    a3 = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 invalidate];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

id sub_1AFB75354(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _suggestedDisplayNameForAddress:v3];
  if (![v4 length])
  {
    uint64_t v5 = [*(id *)(a1 + 32) _nicknameDisplayNameForID:v3];

    uint64_t v4 = (void *)v5;
  }

  return v4;
}

uint64_t sub_1AFB756EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB756FC(uint64_t a1)
{
}

intptr_t sub_1AFB75704(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v6);
}

void sub_1AFB76748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB76760(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id v10 = a2;
  if (MEMORY[0x1B3E89A10]())
  {
    uint64_t v7 = IMNormalizePhoneNumber();

    __int16 v8 = (void *)v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  else
  {
    __int16 v8 = v10;
    if (!v10) {
      goto LABEL_7;
    }
  }
  id v11 = v8;
  int v9 = [*(id *)(a1 + 32) containsObject:v8];
  __int16 v8 = v11;
  if (v9)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a5 = 1;
  }
LABEL_7:
}

void sub_1AFB774E4()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  qword_1EB5ABBC8 = MEMORY[0x1B3E89B10](@"STConversation", @"ScreenTimeCore");
  uint64_t v0 = MEMORY[0x1B3E89B10](@"STConversationContext", @"ScreenTimeCore");
  qword_1EB5ABBD8 = v0;
  if (qword_1EB5ABBC8)
  {
    if (v0) {
      return;
    }
    goto LABEL_11;
  }
  id v1 = NSString;
  uint64_t v2 = IMFileLocationTrimFileName();
  uint64_t v3 = [NSString stringWithFormat:&stru_1F084E970];
  uint64_t v4 = [v1 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"IMSTConversationClass", "-[IMDNotificationsController screenTimeNotificationOptionsForChatDictionary:]_block_invoke", v2, 3175, v3];

  uint64_t v5 = (void (*)(void *))IMGetAssertionFailureHandler();
  if (v5)
  {
    v5(v4);
  }
  else if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v14 = v4;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
    }
  }
  if (!qword_1EB5ABBD8)
  {
LABEL_11:
    uint64_t v7 = NSString;
    uint64_t v8 = IMFileLocationTrimFileName();
    int v9 = [NSString stringWithFormat:&stru_1F084E970];
    id v10 = [v7 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"IMSTConversationContextClass", "-[IMDNotificationsController screenTimeNotificationOptionsForChatDictionary:]_block_invoke", v8, 3176, v9];

    id v11 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v14 = v10;
        _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

void sub_1AFB7854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t sub_1AFB785A4(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "INInteraction updated, re-posting notifications", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) postNotificationsWithContext:0];
}

uint64_t sub_1AFB78A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  uint64_t v3 = [v2 isAdaptiveImageGlyph];

  return v3;
}

uint64_t sub_1AFB78AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  uint64_t v3 = [v2 isCommSafetySensitive];

  return v3;
}

id sub_1AFB78B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  uint64_t v4 = [*(id *)(a1 + 40) _adaptiveImageGlyphForAttachment:v3];

  return v4;
}

void sub_1AFB79298(id *a1, void *a2, unint64_t a3, uint64_t a4)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v18 = v7;
    uint64_t v8 = [a1[4] objectForKey:v7];
    int v9 = [v8 isCommSafetySensitive];
    if ([v8 isAdaptiveImageGlyph]) {
      BOOL v10 = a3 >= a3 + a4;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      uint64_t v11 = 0;
      uint64_t v20 = *MEMORY[0x1E4F6DDC0];
      uint64_t v19 = *MEMORY[0x1E4F6DDC8];
      int v17 = v22;
      do
      {
        uint64_t v12 = objc_msgSend(a1[5], "_adaptiveImageGlyphForAttachment:", v8, v17);
        long long v13 = (void *)v12;
        if (v9)
        {
          long long v14 = [a1[6] attributesAtIndex:a3 effectiveRange:0];
          uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:@"" attributes:v14];
          objc_msgSend(a1[7], "replaceCharactersInRange:withAttributedString:", a3 + v11, 1, v15);
        }
        else if (v12)
        {
          objc_msgSend(a1[7], "addAttribute:value:range:", v20, v12, a3 + v11, 1);
          objc_msgSend(a1[7], "addAttribute:value:range:", v19, v13, a3 + v11, 1);
        }
        else
        {
          long long v16 = IMLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_1AFC63B60(&buf, v17, v16);
          }
        }
        ++v11;
      }
      while (a4 != v11);
    }

    id v7 = v18;
  }
}

void sub_1AFB79478(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFB79518;
  v7[3] = &unk_1E5F8EAC8;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  [a2 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_1AFB79518(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isEqualToString:*MEMORY[0x1E4F6DDC0]] & 1) == 0
    && ([v3 isEqualToString:*MEMORY[0x1E4F6DDC8]] & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeAttribute:range:", v3, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1AFB79FA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    if (!v2) {
      JUMPOUT(0x1AFB79F44);
    }
    JUMPOUT(0x1AFB797F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AFB7A75C()
{
}

id sub_1AFB7C3F8(uint64_t a1, uint64_t a2)
{
  return +[IMDNotificationsController _addressForHandle:a2];
}

void sub_1AFB7CB00()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v1 = dispatch_queue_create("IMDNotificationRequestQueue", attr);
  uint64_t v2 = (void *)qword_1E9AF7F70;
  qword_1E9AF7F70 = (uint64_t)v1;

  dispatch_queue_set_specific((dispatch_queue_t)qword_1E9AF7F70, "_IMDNotificationRequestQueue", (void *)1, 0);
}

Class sub_1AFB7CB9C(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1E9AF8058)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = sub_1AFB7CCC8;
    void v3[4] = &unk_1E5F8E728;
    void v3[5] = v3;
    long long v4 = xmmword_1E5F8EB58;
    uint64_t v5 = 0;
    qword_1E9AF8058 = _sl_dlopen();
  }
  if (!qword_1E9AF8058) {
    sub_1AFC63D18(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SOSUtilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC63D98();
  }
  qword_1E9AF8050 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1AFB7CCC8()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF8058 = result;
  return result;
}

void sub_1AFB7CD3C()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v1 = dispatch_queue_create("IMDSharingActiveDeviceQueue", attr);
  uint64_t v2 = (void *)qword_1E9AF7F80;
  qword_1E9AF7F80 = (uint64_t)v1;
}

Class sub_1AFB7CDC0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1E9AF7F88)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = sub_1AFB7CEEC;
    void v3[4] = &unk_1E5F8E728;
    void v3[5] = v3;
    long long v4 = xmmword_1E5F8EB70;
    uint64_t v5 = 0;
    qword_1E9AF7F88 = _sl_dlopen();
  }
  if (!qword_1E9AF7F88) {
    sub_1AFC63E14(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SMMessage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC63E94();
  }
  qword_1E9AF7FA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1AFB7CEEC()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF7F88 = result;
  return result;
}

void sub_1AFB7CF6C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

id IMDKVValueForKey(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3052000000;
    id v8 = sub_1AFB7D0F0;
    uint64_t v9 = sub_1AFB7D100;
    uint64_t v10 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      v4[2] = sub_1AFB7D10C;
      v4[3] = &unk_1E5F8EBC0;
      void v4[4] = v1;
      v4[5] = &v5;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT value FROM kvtable WHERE key = ?", (uint64_t)v4);
    }
    else
    {
      v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v3[1] = (void (*)(void))3221225472;
      v3[2] = (void (*)(void))sub_1AFB7D150;
      v3[3] = (void (*)(void))&unk_1E5F8D580;
      void v3[4] = (void (*)(void))&v5;
      __syncXPCIMDKVValueForKey_IPCAction(v3, (uint64_t)v1);
    }
    id v1 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_1AFB7D0D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB7D0F0(uint64_t a1, uint64_t a2)
{
}

void sub_1AFB7D100(uint64_t a1)
{
}

uint64_t sub_1AFB7D10C(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  uint64_t result = CSDBSqliteStatementCopyDataResult();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

id sub_1AFB7D150(uint64_t a1)
{
  id result = (id)IMGetXPCDataFromDictionary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void IMDKVPersistValueForKey(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      if (a2)
      {
        uint64_t v6 = sub_1AFB7D2A8;
        uint64_t v7 = &unk_1E5F8EBE8;
        uint64_t v8 = a1;
        uint64_t v9 = a2;
        long long v4 = @"INSERT OR REPLACE INTO kvtable (key, value) VALUES (?, ?)";
      }
      else
      {
        uint64_t v6 = sub_1AFB7D2F8;
        uint64_t v7 = &unk_1E5F8EC10;
        uint64_t v8 = a1;
        long long v4 = @"DELETE FROM kvtable WHERE key = ?";
      }
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v4, (uint64_t)v5);
    }
    else
    {
      __syncXPCIMDKVPersistValueForKey_IPCAction(0, a1, a2);
    }
  }
}

uint64_t sub_1AFB7D2A8()
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindBlobFromCFData();
  return CSDBSqliteStatementPerform();
}

uint64_t sub_1AFB7D2F8()
{
  CSDBSqliteBindTextFromCFString();
  return CSDBSqliteStatementPerform();
}

BOOL _IMDSqlOperationRunQueryWithString(const __CFString *a1, void *a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64194();
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0xD010000000;
  long long v14 = &unk_1AFCE00D7;
  memset(v15, 0, sizeof(v15));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v15);
  if (a3)
  {
    uint64_t v7 = v10;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1AFB7D494;
    v10[3] = &unk_1E5F8EC38;
    void v10[4] = a3;
    v10[5] = &v11;
  }
  else
  {
    uint64_t v7 = 0;
  }
  _IMDSqlOperationRunQuery((uint64_t)(v12 + 4), a1, 0, (uint64_t)v7);
  BOOL v8 = IMDSqlOperationRelease((uint64_t)(v12 + 4), a2);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1AFB7D47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB7D494(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 8) + 32);
}

void IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitQuery_OriginalPreSorting(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppend(Mutable, @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) ");
  if (a1) {
    CFStringAppend(Mutable, @"AND m.ROWID >=(SELECT * FROM (SELECT mm.rowid FROM message mm WHERE mm.GUint ID = ? UNION SELECT 0) ORDER BY ROWID DESC LIMIT 1  ) ");
  }
  if (a2) {
    CFStringAppend(Mutable, @" AND m.item_type == 0 AND m.associated_message_type == 0 ");
  }
  CFStringAppend(Mutable, @"ORDER BY cm.chat_id, cm.message_id DESC ");
  if (a3) {
    CFStringAppend(Mutable, @"LIMIT ?");
  }
  if (a4) {
    *a4 = CFRetain(Mutable);
  }
  CFRelease(Mutable);
}

void IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifierQuery_Original(uint64_t a1, int a2, int a3, int a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppend(Mutable, @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) ");
  if (a2) {
    CFStringAppend(Mutable, @"AND ((m.thread_originator_guid = ? AND m.thread_originator_part = ?) OR m.associated_message_guid = ?)");
  }
  if (a1) {
    CFStringAppend(Mutable, @"AND m.ROWID >=(SELECT * FROM (SELECT mm.rowid FROM message mm WHERE mm.GUint ID = ? UNION SELECT 0) ORDER BY ROWID DESC LIMIT 1  ) ");
  }
  if (a3) {
    CFStringAppend(Mutable, @" AND m.item_type == 0 AND m.associated_message_type == 0 ");
  }
  if (a4) {
    CFStringAppend(Mutable, @" AND m.is_read == 0 AND m.is_finished == 1 AND m.is_from_me == 0 ");
  }
  CFStringAppend(Mutable, @"ORDER BY cm.chat_id, cm.message_date DESC, cm.message_id DESC ");
  if (a5) {
    CFStringAppend(Mutable, @"LIMIT ?");
  }
  if (a6) {
    *a6 = CFRetain(Mutable);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67110402;
      v14[1] = a2;
      __int16 v15 = 2112;
      uint64_t v16 = a1;
      __int16 v17 = 1024;
      int v18 = a3;
      __int16 v19 = 1024;
      int v20 = a4;
      __int16 v21 = 2048;
      uint64_t v22 = a5;
      __int16 v23 = 2112;
      uint64_t v24 = Mutable;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "useThreadOriginator = %d, messageGUint ID = %@, onlyMessageItems= %d, onlyUnread= %d, limit= %lld, Query: %@", (uint8_t *)v14, 0x32u);
    }
  }
  CFRelease(Mutable);
}

uint64_t _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit_OriginalPreSorting(void *a1, void *a2, uint64_t a3, int a4, int64_t a5)
{
  uint64_t v10 = [a1 count];
  uint64_t v11 = [a2 count];
  if (v10 && v11 && v10 == v11)
  {
    uint64_t v18 = 0;
    __int16 v19 = &v18;
    uint64_t v20 = 0x2020000000;
    uint64_t v21 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = sub_1AFB7D918;
      v16[3] = &unk_1E5F8ED20;
      char v17 = a4;
      v16[6] = a5;
      v16[7] = v10;
      v16[8] = a1;
      v16[9] = a2;
      v16[4] = &v18;
      v16[5] = a3;
      _IMDPerformLockedDatabaseBlock((uint64_t)v16);
    }
    else
    {
      v15[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v15[1] = (void (*)(void))3221225472;
      v15[2] = (void (*)(void))sub_1AFB7DC1C;
      v15[3] = (void (*)(void))&unk_1E5F8D580;
      v15[4] = (void (*)(void))&v18;
      __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v15, (uint64_t)a1, (uint64_t)a2, a3, 0, a5, a4 != 0, 0);
    }
    uint64_t v13 = v19[3];
    _Block_object_dispose(&v18, 8);
  }
  else
  {
    uint64_t v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6423C(v12);
    }
    return 0;
  }
  return v13;
}

void sub_1AFB7D900(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB7D918(uint64_t a1)
{
  uint64_t result = CSDBSqliteDatabaseConnectionForReading();
  if (result)
  {
    CSDBSqliteConnectionBeginTransactionType();
    CFTypeRef cf = 0;
    IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitQuery_OriginalPreSorting(*(void *)(a1 + 40), *(unsigned char *)(a1 + 80) != 0, *(void *)(a1 + 48), &cf);
    uint64_t v3 = CSDBSqliteDatabaseStatementForWriting();
    if (v3 && *(void *)(v3 + 8))
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      if (*(void *)(a1 + 56))
      {
        unint64_t v5 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v5);
          CSDBSqliteBindTextFromCFString();
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5);
          CSDBSqliteBindTextFromCFString();
          if (*(void *)(a1 + 40)) {
            CSDBSqliteBindTextFromCFString();
          }
          if (*(uint64_t *)(a1 + 48) >= 1) {
            CSDBSqliteBindInt();
          }
          CFArrayRef v6 = (const __CFArray *)CSDBRecordStoreProcessStatement();
          if (v6)
          {
            CFArrayRef v7 = v6;
            if (CFArrayGetCount(v6) && (int)CFArrayGetCount(v7) >= 1)
            {
              CFIndex v8 = 0;
              do
              {
                CFArrayGetValueAtIndex(v7, v8);
                uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInteger:(int)CSDBRecordGetID()];
                if (v9) {
                  [v4 addObject:v9];
                }

                ++v8;
              }
              while (v8 < (int)CFArrayGetCount(v7));
            }
            CFRelease(v7);
          }
          CSDBSqliteStatementReset();
          ++v5;
        }
        while (v5 < *(void *)(a1 + 56));
      }
      uint64_t v10 = (void *)MEMORY[0x1B3E8A120]();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (id)objc_msgSend((id)objc_msgSend(v4, "allObjects"), "sortedArrayUsingComparator:", &unk_1F084CC00);

      CFArrayRef v11 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v11)
      {
        CFIndex Count = CFArrayGetCount(v11);
        if (Count << 32)
        {
          if ((int)Count >= *(void *)(a1 + 48)) {
            CFIndex v13 = *(void *)(a1 + 48);
          }
          else {
            CFIndex v13 = (int)Count;
          }
          uint64_t v14 = *MEMORY[0x1E4F1CF80];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, MEMORY[0x1E4F1D510]);
          if (v13 >= 1)
          {
            for (CFIndex i = 0; i != v13; ++i)
            {
              uint64_t v17 = objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), i), "integerValue");
              uint64_t v18 = IMDMessageRecordCreateFromRecordIDUnlocked(v14, v17);
              if (v18)
              {
                __int16 v19 = v18;
                CFArrayAppendValue(Mutable, v18);
                CFRelease(v19);
              }
            }
          }
          CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
        }
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CSDBSqliteConnectionCommit();
    return CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

uint64_t sub_1AFB7DC10(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 compare:a2];
}

xpc_object_t sub_1AFB7DC1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB7DCB0;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB7DCB0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  unint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier_Original(void *a1, void *a2, uint64_t a3, const __CFString *a4, int a5, int a6, int64_t a7)
{
  uint64_t v14 = [a1 count];
  uint64_t v15 = [a2 count];
  uint64_t v16 = v15;
  id v31 = 0;
  id v32 = 0;
  if (a4)
  {
    CFIndex Length = CFStringGetLength(a4);
    if (v14 && v16 && v14 == v16)
    {
      if (Length >= 1)
      {
        IMMessageThreadIdentifierGetComponents();
        if ([v32 length])
        {
          BOOL v18 = [v31 length] != 0;
LABEL_12:
          uint64_t v27 = 0;
          uint64_t v28 = &v27;
          uint64_t v29 = 0x2020000000;
          uint64_t v30 = 0;
          if (IMDIsRunningInDatabaseServerProcess())
          {
            v23[0] = MEMORY[0x1E4F143A8];
            v23[1] = 3221225472;
            v23[2] = sub_1AFB7DF88;
            v23[3] = &unk_1E5F8ED48;
            BOOL v24 = v18;
            char v25 = a5;
            char v26 = a6;
            v23[8] = a7;
            v23[9] = v14;
            v23[10] = a1;
            v23[11] = a2;
            v23[4] = v32;
            v23[5] = v31;
            v23[12] = a4;
            v23[6] = &v27;
            v23[7] = a3;
            _IMDPerformLockedDatabaseBlock((uint64_t)v23);
          }
          else
          {
            v22[0] = (void (*)(void))MEMORY[0x1E4F143A8];
            v22[1] = (void (*)(void))3221225472;
            v22[2] = (void (*)(void))sub_1AFB7E1EC;
            v22[3] = (void (*)(void))&unk_1E5F8D580;
            v22[4] = (void (*)(void))&v27;
            __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v22, (uint64_t)a1, (uint64_t)a2, a3, 0, a7, a5 != 0, a6 != 0);
          }
          uint64_t v20 = v28[3];
          _Block_object_dispose(&v27, 8);
          return v20;
        }
      }
LABEL_11:
      BOOL v18 = 0;
      goto LABEL_12;
    }
  }
  else if (v14 && v15 && v14 == v15)
  {
    goto LABEL_11;
  }
  __int16 v19 = IMLogHandleForCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6423C(v19);
  }
  return 0;
}

void sub_1AFB7DF70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB7DF88(uint64_t a1)
{
  uint64_t result = CSDBSqliteDatabaseConnectionForReading();
  if (result)
  {
    CSDBSqliteConnectionBeginTransactionType();
    CFTypeRef cf = 0;
    IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifierQuery_Original(*(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 104), *(unsigned char *)(a1 + 105) != 0, *(unsigned char *)(a1 + 106) != 0, *(void *)(a1 + 64), &cf);
    uint64_t v3 = CSDBSqliteDatabaseStatementForWriting();
    if (v3 && *(void *)(v3 + 8))
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      if (*(void *)(a1 + 72))
      {
        unint64_t v5 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
          CSDBSqliteBindTextFromCFString();
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v5);
          CSDBSqliteBindTextFromCFString();
          if (*(unsigned char *)(a1 + 104))
          {
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            AssociatedMessageGUIDFromThreadIdentifier = (void *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();
            CSDBSqliteBindTextFromCFString();
          }
          if (*(void *)(a1 + 56)) {
            CSDBSqliteBindTextFromCFString();
          }
          if (*(uint64_t *)(a1 + 64) >= 1) {
            CSDBSqliteBindInt();
          }
          CFArrayRef v7 = (const __CFArray *)CSDBRecordStoreProcessStatement();
          if (v7)
          {
            CFArrayRef v8 = v7;
            if (CFArrayGetCount(v7) && (int)CFArrayGetCount(v8) >= 1)
            {
              CFIndex v9 = 0;
              do
              {
                CFArrayGetValueAtIndex(v8, v9);
                uint64_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInteger:(int)CSDBRecordGetID()];
                if (v10) {
                  [v4 addObject:v10];
                }

                ++v9;
              }
              while (v9 < (int)CFArrayGetCount(v8));
            }
            CFRelease(v8);
          }
          CSDBSqliteStatementReset();
          ++v5;
        }
        while (v5 < *(void *)(a1 + 72));
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = IMDMessageRecordLoadMessagesInSet(v4, *(void *)(a1 + 64), 1);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CSDBSqliteConnectionCommit();
    return CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

xpc_object_t sub_1AFB7E1EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB7E280;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB7E280(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  unint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

void IMDMessageRecordSelectMessagesWithGUIDsChatIdentifiersOnServicesQuery1_Original(int a1, CFTypeRef *a2)
{
  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    unint64_t v5 = Mutable;
    CFStringAppend(Mutable, @"SELECT FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid ");
    CFStringRef v6 = (const __CFString *)IMDGenerateInClauseForCount(a1);
    CFStringAppend(v5, v6);
    CFStringAppend(v5, @""));
    if (a2) {
      *a2 = CFRetain(v5);
    }
    CFRelease(v5);
  }
}

void IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery1_Original(int a1, CFTypeRef *a2)
{
  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    unint64_t v5 = Mutable;
    CFStringAppend(Mutable, @"DELETE FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid ");
    CFStringRef v6 = (const __CFString *)IMDGenerateInClauseForCount(a1);
    CFStringAppend(v5, v6);
    CFStringAppend(v5, @""));
    if (a2) {
      *a2 = CFRetain(v5);
    }
    CFRelease(v5);
  }
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForAllUnreadChats_Original(uint64_t a1)
{
  return _IMDMessageRecordCountAllUnreadMessagesForChatQuery(@"SELECT cm.chat_id, COUNT(1) FROM message m INNER JOIN chat_message_join cm ON m.ROWiD = cm.message_id WHERE m.item_type == 0 AND m.is_read == 0 AND m.is_from_me == 0 GROUP BY cm.chat_id", a1);
}

void IMDCNRecordIDAndHistoryTokenForAliasesWithCompletionHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  CFArrayRef v7 = a3;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFArrayRef v8 = objc_alloc_init(IMDCNPersonAliasResolver);
    CFIndex v9 = [(IMDCNPersonAliasResolver *)v8 _updateAliasToCNIDMap:v5 withHistoryToken:v6];
    uint64_t v10 = (void *)MEMORY[0x1E4F1CA60];
    CFArrayRef v11 = [(IMDCNPersonAliasResolver *)v8 currentHistoryToken];
    uint64_t v12 = objc_msgSend(v10, "dictionaryWithObjectsAndKeys:", v9, @"aliasMap", v11, @"historyToken", 0);

    v7[2](v7, v12);
  }
  else
  {
    v13[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v13[1] = (void (*)(void))3221225472;
    v13[2] = (void (*)(void))sub_1AFB7E670;
    v13[3] = (void (*)(void))&unk_1E5F8FB98;
    id v14 = v5;
    uint64_t v15 = v7;
    __asyncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(v13, (uint64_t)v14, (uint64_t)v6);
  }
}

void sub_1AFB7E670(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = xpc_dictionary_get_value(v3, "dictionary_result");
  if (v4)
  {
    id v5 = IMGetXPCDictionaryFromDictionary();
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        CFArrayRef v7 = [v5 objectForKey:@"aliasMap"];
        uint64_t v8 = [v7 count];
        uint64_t v9 = [*(id *)(a1 + 32) count];
        int v10 = 134218240;
        uint64_t v11 = v8;
        __int16 v12 = 2048;
        uint64_t v13 = v9;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDCNRecordIDForAliases ASYNC returning updated map count %lu. Old map count %lu", (uint8_t *)&v10, 0x16u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id IMDCNRecordIDAndHistoryTokenForAliases(void *a1)
{
  id v1 = a1;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = sub_1AFB7E9C0;
  uint64_t v17 = sub_1AFB7E9D0;
  id v18 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    id v3 = [(IMDCNPersonAliasResolver *)v2 _fetchAliasToCNIDMapForAliases:v1];
    id v4 = (void *)MEMORY[0x1E4F1C9E8];
    id v5 = [(IMDCNPersonAliasResolver *)v2 currentHistoryToken];
    uint64_t v6 = objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v3, @"aliasMap", v5, @"historyToken", 0);
    CFArrayRef v7 = (void *)v14[5];
    v14[5] = v6;
  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1AFB7E9D8;
    v10[3] = (void (*)(void))&unk_1E5F8FBC0;
    __int16 v12 = &v13;
    uint64_t v11 = (IMDCNPersonAliasResolver *)v1;
    __syncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(v10, (uint64_t)v11);
    uint64_t v2 = v11;
  }

  id v8 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_1AFB7E9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB7E9C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB7E9D0(uint64_t a1)
{
}

void sub_1AFB7E9D8(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = xpc_dictionary_get_value(v3, "dictionary_result");
  if (v4)
  {
    uint64_t v5 = IMGetXPCDictionaryFromDictionary();
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    CFArrayRef v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:@"aliasMap"];
        uint64_t v10 = [v9 count];
        uint64_t v11 = [*(id *)(a1 + 32) count];
        int v12 = 134218240;
        uint64_t v13 = v10;
        __int16 v14 = 2048;
        uint64_t v15 = v11;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "IMDCNRecordIDForAliases returning map count %lu for aliases count %lu", (uint8_t *)&v12, 0x16u);
      }
    }
  }
}

id IMDCNRecordIDForAliases(void *a1)
{
  id v1 = a1;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x3032000000;
  uint64_t v13 = sub_1AFB7E9C0;
  __int16 v14 = sub_1AFB7E9D0;
  id v15 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    uint64_t v3 = [(IMDCNPersonAliasResolver *)v2 _fetchAliasToCNIDMapForAliases:v1];
    id v4 = (void *)v11[5];
    void v11[5] = v3;
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v7[1] = (void (*)(void))3221225472;
    void v7[2] = (void (*)(void))sub_1AFB7ECA8;
    v7[3] = (void (*)(void))&unk_1E5F8FBC0;
    uint64_t v9 = &v10;
    id v8 = (IMDCNPersonAliasResolver *)v1;
    __syncXPCIMDCNRecordIDForAliases_IPAction(v7, (uint64_t)v8);
    uint64_t v2 = v8;
  }

  id v5 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v5;
}

void sub_1AFB7EC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB7ECA8(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = xpc_dictionary_get_value(v3, "dictionary_result");
  if (v4)
  {
    uint64_t v5 = IMGetXPCDictionaryFromDictionary();
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    CFArrayRef v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count];
        uint64_t v10 = [*(id *)(a1 + 32) count];
        int v11 = 134218240;
        uint64_t v12 = v9;
        __int16 v13 = 2048;
        uint64_t v14 = v10;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "IMDCNRecordIDForAliases returning map count %lu for aliases count %lu", (uint8_t *)&v11, 0x16u);
      }
    }
  }
}

id IMDCNGivenNameAndBirthdayForHandleID(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000;
  int v11 = sub_1AFB7E9C0;
  uint64_t v12 = sub_1AFB7E9D0;
  id v13 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    uint64_t v3 = [(IMDCNPersonAliasResolver *)v2 _fetchContactGivenNameAndBirthdayForHandleID:v1];
    id v4 = (void *)v9[5];
    v9[5] = v3;
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v7[1] = (void (*)(void))3221225472;
    void v7[2] = (void (*)(void))sub_1AFB7EF54;
    v7[3] = (void (*)(void))&unk_1E5F8D580;
    void v7[4] = (void (*)(void))&v8;
    __syncXPCIMDCNGivenNameAndBirthdayForHandleID_IPCAction(v7, (uint64_t)v1);
  }
  id v5 = (id)v9[5];
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1AFB7EF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB7EF54(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = xpc_dictionary_get_value(v3, "dictionary_result");
  if (v4)
  {
    uint64_t v5 = IMGetXPCDictionaryFromDictionary();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    CFArrayRef v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count];
        int v10 = 134217984;
        uint64_t v11 = v9;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "IMDCNGivenNameAndBirthdayForHandleID returning total Contact keys: %lu", (uint8_t *)&v10, 0xCu);
      }
    }
  }
}

id IMDCNFullNameAndOrganizationNameForHandleID(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000;
  uint64_t v11 = sub_1AFB7E9C0;
  uint64_t v12 = sub_1AFB7E9D0;
  id v13 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    uint64_t v3 = [(IMDCNPersonAliasResolver *)v2 _fetchContactFullNameAndOrganizationNameForHandleID:v1];
    id v4 = (void *)v9[5];
    v9[5] = v3;
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v7[1] = (void (*)(void))3221225472;
    void v7[2] = (void (*)(void))sub_1AFB7F1E0;
    v7[3] = (void (*)(void))&unk_1E5F8D580;
    void v7[4] = (void (*)(void))&v8;
    __syncXPCIMDCNFullNameAndOrganizationNameForHandleID_IPCAction(v7, (uint64_t)v1);
  }
  id v5 = (id)v9[5];
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1AFB7F1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB7F1E0(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = xpc_dictionary_get_value(v3, "dictionary_result");
  if (v4)
  {
    uint64_t v5 = IMGetXPCDictionaryFromDictionary();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    CFArrayRef v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count];
        int v10 = 134217984;
        uint64_t v11 = v9;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "IMDCNFullNameAndOrganizationNameForHandleID returning total Contact keys: %lu", (uint8_t *)&v10, 0xCu);
      }
    }
  }
}

uint64_t IMDAreAllAliasesUnknown(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = IMDCNRecordIDForAliases(v1);
    id v4 = v3;
    if (v3 && [v3 count])
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v5 = v4;
      uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v16;
        char v8 = 1;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v16 != v7) {
              objc_enumerationMutation(v5);
            }
            int v10 = objc_msgSend(v5, "objectForKeyedSubscript:", *(void *)(*((void *)&v15 + 1) + 8 * i), (void)v15);
            int v11 = [v10 isEqualToString:@"__kIMDCNPersonNotFound"];

            if (!v11) {
              char v8 = 0;
            }
          }
          uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
        }
        while (v6);
      }
      else
      {
        char v8 = 1;
      }
    }
    else
    {
      char v8 = 1;
    }

    uint64_t v12 = v8 & 1;
  }
  else
  {
    uint64_t v12 = 1;
  }
  if (IMOSLoggingEnabled())
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 67109120;
      int v20 = v12;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "IMDAreAllAliasesUnknown result is %d", buf, 8u);
    }
  }
  return v12;
}

uint64_t IMDIsFavoritedContact(void *a1)
{
  id v1 = a1;
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    BOOL v3 = [(IMDCNPersonAliasResolver *)v2 isFavoritedContact:v1];
    *((unsigned char *)v8 + 24) = v3;
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    _DWORD v6[2] = (void (*)(void))sub_1AFB7F610;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&v7;
    __syncXPCIMDIsFavoritedContact_IPCAction(v6, (uint64_t)v1);
  }
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1AFB7F5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1AFB7F610(uint64_t a1, xpc_object_t xdict)
{
  BOOL result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1AFB7F650()
{
  uint64_t v0 = objc_alloc_init(IMDDatabaseServer);
  id v1 = (void *)qword_1EB5ABA58;
  qword_1EB5ABA58 = (uint64_t)v0;
}

void sub_1AFB7F9D4(uint64_t a1)
{
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  BOOL v3 = [v2 chatRecordsFilteredByPredicate:v4];

  [*(id *)(a1 + 40) _respondWithChatRecords:v3 responseMessage:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1AFB7FB5C(uint64_t a1)
{
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  BOOL v3 = *(void **)(a1 + 40);
  id v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  id v5 = [v3 _codableObjectsCopiedFromXPCArray:v4 objectClass:objc_opt_class()];

  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  uint64_t v7 = [*(id *)(a1 + 40) database];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFB7FCB8;
  v9[3] = &unk_1E5F8FC10;
  char v8 = *(void **)(a1 + 48);
  v9[4] = *(void *)(a1 + 40);
  id v10 = v8;
  id v11 = *(id *)(a1 + 56);
  [v7 fetchChatRecordsFilteredUsingPredicate:v2 sortedUsingDescriptors:v5 limit:int64 completionHandler:v9];
}

uint64_t sub_1AFB7FCB8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithChatRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB7FDAC(uint64_t a1)
{
  IMGetXPCStringFromDictionary();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  BOOL v3 = [v2 chatRecordsWithIdentifier:v4];

  [*(id *)(a1 + 40) _respondWithChatRecords:v3 responseMessage:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1AFB7FF20(uint64_t a1)
{
  uint64_t v2 = IMGetXPCStringFromDictionary();
  BOOL v3 = [*(id *)(a1 + 40) database];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB80000;
  v5[3] = &unk_1E5F8FC10;
  id v4 = *(void **)(a1 + 48);
  v5[4] = *(void *)(a1 + 40);
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v3 fetchChatRecordsWithPinningIdentifier:v2 completionHandler:v5];
}

uint64_t sub_1AFB80000(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithChatRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB800F4(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCStringFromDictionary();
  BOOL v3 = IMGetXPCStringFromDictionary();
  id v4 = IMGetXPCStringFromDictionary();
  uint64_t v5 = IMGetXPCBoolFromDictionary();
  unsigned __int8 int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "style");
  id v7 = [*(id *)(a1 + 40) database];
  char v8 = [v7 chatRecordsWithHandles:v9 serviceName:v2 displayName:v3 groupID:v4 style:int64 useOriginalGroupID:v5];

  [*(id *)(a1 + 40) _respondWithChatRecords:v8 responseMessage:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1AFB80308(uint64_t a1)
{
  uint64_t v2 = IMGetXPCArrayFromDictionary();
  BOOL v3 = IMGetXPCStringFromDictionary();
  unsigned __int8 int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "style");
  uint64_t v5 = [*(id *)(a1 + 40) database];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFB80428;
  v7[3] = &unk_1E5F8FC10;
  id v6 = *(void **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v6;
  id v9 = *(id *)(a1 + 56);
  [v5 fetchChatRecordsWithAtLeastHandles:v2 serviceName:v3 style:int64 completionHandler:v7];
}

uint64_t sub_1AFB80428(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithChatRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB80548(uint64_t a1)
{
  uint64_t v2 = IMGetXPCArrayFromDictionary();
  BOOL v3 = [*(id *)(a1 + 40) database];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB8063C;
  v5[3] = &unk_1E5F8FC60;
  id v4 = *(void **)(a1 + 48);
  v5[4] = *(void *)(a1 + 40);
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  [v3 fetchGroupPhotoPathsForChatsWithGroupIDs:v2 completionHandler:v5];
}

void sub_1AFB8063C(uint64_t a1, void *a2)
{
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  id v10 = sub_1AFB80724;
  id v11 = &unk_1E5F8FC38;
  id v4 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v4;
  id v5 = a2;
  [v5 enumerateKeysAndObjectsUsingBlock:&v8];
  id v6 = objc_msgSend(*(id *)(a1 + 32), "_xpcDictionaryWithCodableObjects:", v5, v8, v9, v10, v11, v12);

  if (v6) {
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 48), "dictionary_result", v6);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
}

uint64_t sub_1AFB80724(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__authorizeOutgoingSandboxedResource_connection_);
}

void sub_1AFB80810(uint64_t a1)
{
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  BOOL v3 = *(void **)(a1 + 40);
  id v5 = [v3 database];
  id v4 = (void *)[v5 copyDuplicateGroupChatRecordsWithLimit:int64];
  [v3 _respondWithChatRecords:v4 responseMessage:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1AFB8095C(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCIntFromDictionary();
  BOOL v3 = [*(id *)(a1 + 40) database];
  [v3 updateChatsSyncStatusTo:v2 forGUIDs:v5];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB80AE0(id *a1)
{
  uint64_t v2 = IMGetXPCStringFromDictionary();
  BOOL v3 = IMGetXPCStringFromDictionary();
  uint64_t v4 = [a1[5] database];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB80BDC;
  v5[3] = &unk_1E5F8FCD8;
  id v6 = a1[6];
  id v7 = a1[7];
  [v4 resolveInconsistentGUIDForChatRecordWithGUID:v2 newGUID:v3 completionHandler:v5];
}

uint64_t sub_1AFB80BDC(uint64_t a1, BOOL value)
{
  xpc_dictionary_set_BOOL(*(xpc_object_t *)(a1 + 32), "success", value);
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1AFB80CFC(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCIntFromDictionary();
  BOOL v3 = [*(id *)(a1 + 40) database];
  [v3 updateMessagesSyncStatusTo:v2 forGUIDs:v5];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB80E60(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCIntFromDictionary();
  BOOL v3 = [*(id *)(a1 + 40) database];
  [v3 updateMessagesSyncedSyndicationRangesForGUIDs:v5 toStatus:v2];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB80FE4(uint64_t a1)
{
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "chatRowID");
  BOOL v3 = [*(id *)(a1 + 40) database];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB810BC;
  v5[3] = &unk_1E5F8FD00;
  uint64_t v4 = *(void **)(a1 + 48);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v3 fetchLastMessageRecordForChatRecordWithRowID:int64 completionHandler:v5];
}

void sub_1AFB810BC(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (void *)a1[4];
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v4 = (void *)MEMORY[0x1E4F1C978];
    id v5 = a2;
    id v6 = [v4 arrayWithObjects:&v9 count:1];
    objc_msgSend(v3, "_respondWithMessageRecords:responseMessage:completionHandler:", v6, a1[5], a1[6], v9, v10);
  }
  else
  {
    uint64_t v8 = a1[5];
    uint64_t v7 = a1[6];
    id v6 = 0;
    [v3 _respondWithMessageRecords:MEMORY[0x1E4F1CBF0] responseMessage:v8 completionHandler:v7];
  }
}

void sub_1AFB8126C(uint64_t a1)
{
  uint64_t v2 = IMGetXPCStringFromDictionary();
  objc_opt_class();
  BOOL v3 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  id v6 = [v4 _codableObjectsCopiedFromXPCArray:v5 objectClass:objc_opt_class()];

  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  uint64_t v8 = [*(id *)(a1 + 40) database];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1AFB813E8;
  v10[3] = &unk_1E5F8FC10;
  uint64_t v9 = *(void **)(a1 + 48);
  void v10[4] = *(void *)(a1 + 40);
  id v11 = v9;
  id v12 = *(id *)(a1 + 56);
  [v8 fetchMessageRecordsForChatRecordWithGUID:v2 filteredUsingPredicate:v3 sortedUsingDescriptors:v6 limit:int64 completionHandler:v10];
}

uint64_t sub_1AFB813E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithMessageRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB814DC(uint64_t a1)
{
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v3 = IMGetXPCIntFromDictionary();
  uint64_t v4 = [*(id *)(a1 + 40) database];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1AFB815E8;
  v6[3] = &unk_1E5F8FC10;
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [v4 fetchUnreadMessageRecordsForChatsFilteredUsingPredicate:v2 limit:v3 completionHandler:v6];
}

uint64_t sub_1AFB815E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithMessageRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB816DC(uint64_t a1)
{
  uint64_t v2 = IMGetXPCStringFromDictionary();
  uint64_t v3 = IMGetXPCBoolFromDictionary();
  uint64_t v4 = [*(id *)(a1 + 40) database];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1AFB817D4;
  v6[3] = &unk_1E5F8FD00;
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [v4 fetchMessageRecordWithGUID:v2 excludeRecoverableMessages:v3 completionHandler:v6];
}

void sub_1AFB817D4(uint64_t a1, void *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    v6[0] = v3;
    id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1];
  }
  else
  {
    id v5 = (void *)MEMORY[0x1E4F1CBF0];
  }
  [*(id *)(a1 + 32) _respondWithMessageRecords:v5 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB81940(uint64_t a1)
{
  IMGetXPCStringFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v2 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), "shouldHideFromSyndication");
  id v3 = [*(id *)(a1 + 40) database];
  [v3 updateAttachmentSyndicationRanges:v5 shouldHideFromSyndication:v2];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB81AA4(uint64_t a1)
{
  IMGetXPCStringFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v2 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), "shouldHideFromSyndication");
  id v3 = [*(id *)(a1 + 40) database];
  [v3 updateMessageSyndicationRanges:v5 shouldHideFromSyndication:v2];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB81C28(uint64_t a1)
{
  BOOL v2 = IMGetXPCStringFromDictionary();
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  uint64_t v4 = [*(id *)(a1 + 40) database];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFB81D20;
  v6[3] = &unk_1E5F8FC10;
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [v4 fetchScheduledMessageRecordsForChatRecordWithGUID:v2 limit:int64 completionHandler:v6];
}

uint64_t sub_1AFB81D20(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithMessageRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB81E14(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  id v3 = [*(id *)(a1 + 40) database];
  id v7 = [v3 scheduledMessagesMetadataPendingCloudKitDeleteWithLimit:v2];

  uint64_t v4 = [*(id *)(a1 + 40) _xpcArrayWithCodableObjects:v7];
  if (v4)
  {
    id v5 = *(void **)(a1 + 48);
    if (v5) {
      xpc_dictionary_set_value(v5, "scheduledMessagesMetadataPendingCloudKitDelete", v4);
    }
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
}

void sub_1AFB81F98(uint64_t a1)
{
  IMGetXPCStringFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCStringFromDictionary();
  id v3 = [*(id *)(a1 + 40) database];
  [v3 addScheduledMessageGUIDandCKRecordToDeleteFromCloudKit:v5 recordID:v2];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB82104(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  [v2 deleteTombstonedScheduledMessagesWithRecordIDs:v4];

  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1AFB82248(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  [v2 markMessageRecordsAsReadWithGUIDs:v4];

  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1AFB8238C(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 moveMessageRecordsToRecoveryForMessageGUIDs:v5 deleteDate:v2];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB8250C(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 moveMessageRecordsToRecoveryForChatRecordsWithGUIDs:v5 deleteDate:v2];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB8268C(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  [v2 recoverMessageRecordsForChatRecordsWithGUIDs:v4];

  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

uint64_t sub_1AFB827D0(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 deleteRecoverableMessagesOlderThanDays:v2];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

uint64_t sub_1AFB82918(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 deleteJunkMessagesOlderThanDays:v2];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_1AFB82A80(id *a1)
{
  uint64_t v2 = IMGetXPCArrayFromDictionary();
  uint64_t v3 = [a1[5] database];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFB82B60;
  v6[3] = &unk_1E5F8FC10;
  id v4 = a1[6];
  id v5 = a1[5];
  id v7 = v4;
  id v8 = v5;
  id v9 = a1[7];
  [v3 permanentlyDeleteRecoverableMessagesInChatsWithGUIDs:v2 completionHandler:v6];
}

void sub_1AFB82B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  if (v4)
  {
    id v5 = [*(id *)(a1 + 40) _xpcArrayWithCodableObjects:v3];
    xpc_dictionary_set_value(v4, "deletedChats", v5);

    id v3 = v7;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
    id v3 = v7;
  }
}

void sub_1AFB82CDC(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  uint64_t v3 = IMGetXPCIntFromDictionary();
  id v4 = [*(id *)(a1 + 40) database];
  id v8 = [v4 recoverableMessagesMetadataPendingCloudKitSaveWithLimit:v2 filter:v3];

  id v5 = [*(id *)(a1 + 40) _xpcArrayWithCodableObjects:v8];
  if (v5)
  {
    uint64_t v6 = *(void **)(a1 + 48);
    if (v6) {
      xpc_dictionary_set_value(v6, "recoverableMessagesMetadataPendingCloudKitSave", v5);
    }
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
}

void sub_1AFB82E98(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  id v7 = [v3 recoverableMessagesMetadataPendingCloudKitDeleteWithLimit:v2];

  id v4 = [*(id *)(a1 + 40) _xpcArrayWithCodableObjects:v7];
  if (v4)
  {
    id v5 = *(void **)(a1 + 48);
    if (v5) {
      xpc_dictionary_set_value(v5, "recoverableMessagesMetadataPendingCloudKitDelete", v4);
    }
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
}

uint64_t sub_1AFB82FF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) database];
  [v2 clearRecoverableMessageTombStones];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_1AFB83114(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  uint64_t v3 = IMGetXPCIntFromDictionary();
  uint64_t v4 = IMGetXPCIntFromDictionary();
  id v5 = [*(id *)(a1 + 40) database];
  [v5 updateRecoverableMessageSyncState:v2 forMessageRowID:v3 onPartIndex:v4];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v7 = *(uint64_t (**)(void))(result + 16);
    return v7();
  }
  return result;
}

void sub_1AFB83298(uint64_t a1)
{
  uint64_t v2 = IMGetXPCIntFromDictionary();
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 updateRecoverableMessageSyncState:v2 forMessageGUIDs:v5];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB833FC(uint64_t a1)
{
  IMGetXPCStringFromDictionary();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  objc_opt_class();
  uint64_t v3 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v4 = [*(id *)(a1 + 40) database];
  [v4 storeRecoverableMessagePartWithBody:v3 forMessageWithGUID:v6 deleteDate:v2];

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_1AFB83584(uint64_t a1)
{
  IMGetXPCStringFromDictionary();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCStringFromDictionary();
  uint64_t v3 = IMGetXPCStringFromDictionary();
  uint64_t v4 = IMGetXPCStringFromDictionary();
  uint64_t v5 = [*(id *)(a1 + 40) database];
  [v5 postSharePlayNotificationForChatGUID:v6 faceTimeConversationUUID:v2 handleIdentifier:v3 localizedApplicationName:v4];
}

void sub_1AFB8383C(xpc_object_t *a1)
{
  uint64_t int64 = xpc_dictionary_get_uint64(a1[4], "tableName");
  uint64_t v3 = [a1[5] database];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFB83910;
  v4[3] = &unk_1E5F8FD50;
  id v5 = a1[6];
  id v6 = a1[7];
  [v3 fetchCountOfRecordType:uint64 completionHandler:v4];
}

uint64_t sub_1AFB83910(uint64_t a1, int64_t value)
{
  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "total", value);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_1AFB83A40(uint64_t a1)
{
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  uint64_t v3 = [v2 handleRecordsFilteredByPredicate:v4];

  [*(id *)(a1 + 40) _respondWithHandleRecords:v3 responseMessage:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1AFB83BC8(uint64_t a1)
{
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  id v5 = [v3 _codableObjectsCopiedFromXPCArray:v4 objectClass:objc_opt_class()];

  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  id v7 = [*(id *)(a1 + 40) database];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFB83D24;
  v9[3] = &unk_1E5F8FC10;
  id v8 = *(void **)(a1 + 48);
  v9[4] = *(void *)(a1 + 40);
  id v10 = v8;
  id v11 = *(id *)(a1 + 56);
  [v7 fetchHandleRecordsFilteredUsingPredicate:v2 sortedUsingDescriptors:v5 limit:int64 completionHandler:v9];
}

uint64_t sub_1AFB83D24(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _respondWithHandleRecords:a2 responseMessage:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1AFB83DF8(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = IMGetXPCIntFromDictionary();
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 updateAttachmentsSyncStatusTo:v2 forGUIDs:v5];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB83F5C(uint64_t a1)
{
  IMGetXPCArrayFromDictionary();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "reason");
  uint64_t v3 = [*(id *)(a1 + 40) database];
  [v3 coreSpotlightDeleteAttachmentGUIDs:v5 reason:int64];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1AFB840C0(uint64_t a1)
{
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) database];
  [v2 deleteAttachmentsDirectWithPredicate:v4];

  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1AFB84238(uint64_t a1)
{
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  id v4 = [*(id *)(a1 + 40) database];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFB84344;
  v6[3] = &unk_1E5F8FC10;
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [v4 fetchAttachmentRecordsFilteredUsingPredicate:v2 limit:int64 completionHandler:v6];
}

uint64_t sub_1AFB84344(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__respondWithAttachmentRecords_responseMessage_completionHandler_);
}

void sub_1AFB84438(uint64_t a1)
{
  objc_opt_class();
  uint64_t v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  id v5 = [v3 _codableObjectsCopiedFromXPCArray:v4 objectClass:objc_opt_class()];

  int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  id v7 = [*(id *)(a1 + 40) database];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFB84594;
  v9[3] = &unk_1E5F8FC10;
  id v8 = *(void **)(a1 + 48);
  v9[4] = *(void *)(a1 + 40);
  id v10 = v8;
  id v11 = *(id *)(a1 + 56);
  [v7 fetchAttachmentRecordsFilteredUsingPredicate:v2 sortedUsingDescriptors:v5 limit:int64 completionHandler:v9];
}

uint64_t sub_1AFB84594(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__respondWithAttachmentRecords_responseMessage_completionHandler_);
}

void sub_1AFB84688(id *a1)
{
  uint64_t v2 = IMGetXPCStringFromDictionary();
  uint64_t v3 = [a1[5] database];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFB84764;
  v4[3] = &unk_1E5F8FD50;
  id v5 = a1[6];
  id v6 = a1[7];
  [v3 fetchInteger64ForKey:v2 completionHandler:v4];
}

uint64_t sub_1AFB84764(uint64_t a1, int64_t value)
{
  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "result", value);
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1AFB84898(id *a1)
{
  uint64_t v2 = [a1[4] database];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB8494C;
  v3[3] = &unk_1E5F8FD78;
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 validateSpotlightClientStateWithCompletion:v3];
}

void sub_1AFB8494C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (a2)
  {
    IMInsertBoolsToXPCDictionary();
  }
  else if (v5)
  {
    IMInsertCodableObjectsToXPCDictionary();
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, v6);
  }
}

void sub_1AFB84AC0(id *a1)
{
  uint64_t v2 = [a1[4] database];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB84B74;
  v3[3] = &unk_1E5F8FDA0;
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 fetchSpotlightClientStateWithCompletion:v3];
}

void sub_1AFB84B74(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = v9;
  uint64_t v7 = v5;
  if (v9 || v5) {
    IMInsertCodableObjectsToXPCDictionary();
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
  }
}

void sub_1AFB84CE4(id *a1)
{
  uint64_t v2 = [a1[4] database];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB84D98;
  v3[3] = &unk_1E5F8E6B0;
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 invalidateSpotlightClientStateVersioningWithCompletion:v3];
}

void sub_1AFB84D98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    IMInsertCodableObjectsToXPCDictionary();
    id v3 = v5;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    id v3 = v5;
  }
}

void sub_1AFB84EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    IMInsertCodableObjectsToXPCDictionary();
    id v3 = v5;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    id v3 = v5;
  }
}

void sub_1AFB8503C(uint64_t a1)
{
  uint64_t v2 = IMGetXPCArrayFromDictionary();
  id v3 = [*(id *)(a1 + 40) database];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB8511C;
  v5[3] = &unk_1E5F8FDC8;
  uint64_t v4 = *(void **)(a1 + 48);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v3 fetchContactsForIdentifiers:v2 completionHandler:v5];
}

void sub_1AFB8511C(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v8 = 134217984;
      uint64_t v9 = [v3 count];
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDContactQueries: Fetched %tu contacts from IMDP.", (uint8_t *)&v8, 0xCu);
    }
  }
  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) _xpcDictionaryWithCodableObjects:v3];
    if (v5)
    {
      id v6 = *(void **)(a1 + 40);
      if (v6) {
        xpc_dictionary_set_value(v6, "identifiersToContacts", v5);
      }
    }
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
}

void sub_1AFB852EC(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "About to close current DB", (uint8_t *)&v8, 2u);
    }
  }
  IMDSMSRecordStoreClose();
  id v3 = IMMessagesDatabaseURL();
  uint64_t v4 = [v3 path];
  BOOL v5 = IMDDatabaseDelete((uint64_t)v4, 0);

  if (!v5 && IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      uint64_t v9 = v3;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Could not delete database at path %@", (uint8_t *)&v8, 0xCu);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
}

uint64_t _IMDSetAllowLocalMigration(uint64_t result)
{
  byte_1E9AF7640 = result;
  return result;
}

int *_IMDGetMigrators()
{
  return &dword_1EB5AAB08;
}

uint64_t _IMDDatabasePerformOneMigration(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v13 = v12;
  long long v34 = 0u;
  memset(v33, 0, sizeof(v33));
  IMDSqlOperationInitWithCSDBConnection(a3, a2, (uint64_t)v33);
  BOOL v14 = IMDSqlOperationBeginTransaction(v33);
  if (!v14 && !*((void *)&v34 + 1))
  {
    long long v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64490();
    }
  }
  if (!v14) {
    goto LABEL_29;
  }
  BOOL v16 = IMDDropAllTriggersWithOperation((uint64_t)v33, 1);
  if (v16
    || *((void *)&v34 + 1)
    || (long long v17 = IMLogHandleForCategory(), !os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)))
  {
    if (v16)
    {
      BOOL v18 = IMDDropUnknownIndexesWithOperation((uint64_t)v33, 1);
      if (v18
        || *((void *)&v34 + 1)
        || (__int16 v19 = IMLogHandleForCategory(), !os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
      {
        if (!v18
          || !IMDDropUnknownTablesWithOperation((uint64_t)v33, 1)
          || !IMDCreateTablesWithOperation((uint64_t)v33, 1))
        {
          goto LABEL_29;
        }
        int v20 = (uint64_t (*)(_OWORD *, uint64_t))*((void *)a1 + 1);
        if (!v20) {
          goto LABEL_24;
        }
        int v21 = v20(v33, a4);
        if ((v21 & 1) == 0 && !*((void *)&v34 + 1))
        {
          uint64_t v22 = IMLogHandleForCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            sub_1AFC64280();
            goto LABEL_29;
          }
        }
        if (v21)
        {
LABEL_24:
          if (IMDSqlOperationCommitTransaction(v33))
          {
            CSDBSqliteDatabaseSetVersion();
            if (a5) {
              *a5 = *a1;
            }
            if (!*((void *)&v34 + 1))
            {
              IMDSqlOperationRelease((uint64_t)v33, 0);
              __int16 v23 = IMLogHandleForCategory();
              uint64_t v24 = 1;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                int v25 = *a1;
                [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
                *(_DWORD *)uint8_t buf = 67109632;
                int v36 = a4;
                __int16 v37 = 1024;
                int v38 = v25;
                __int16 v39 = 2048;
                double v40 = v26 - v13;
                _os_log_impl(&dword_1AFB53000, v23, OS_LOG_TYPE_INFO, "Migrated from %d to %d ok in %f seconds", buf, 0x18u);
              }
              return v24;
            }
          }
        }
      }
      else
      {
        sub_1AFC64330();
      }
    }
  }
  else
  {
    sub_1AFC643E0();
  }
LABEL_29:
  uint64_t v27 = IMLogHandleForCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    int v28 = *a1;
    *(double *)&uint64_t v29 = COERCE_DOUBLE(IMDSqlOperationErrorDescription((uint64_t)v33));
    *(_DWORD *)uint8_t buf = 67109634;
    int v36 = a4;
    __int16 v37 = 1024;
    int v38 = v28;
    __int16 v39 = 2112;
    double v40 = *(double *)&v29;
    _os_log_impl(&dword_1AFB53000, v27, OS_LOG_TYPE_INFO, "Migration from %d to %d failed with error: %@", buf, 0x18u);
  }
  IMDSqlOperationGetError((uint64_t)v33, a6);
  IMDSqlOperationRevertTransaction(v33);
  IMDSqlOperationRelease((uint64_t)v33, 0);
  uint64_t v30 = IMLogHandleForCategory();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    int v31 = *a1;
    *(_DWORD *)uint8_t buf = 67109376;
    int v36 = a4;
    __int16 v37 = 1024;
    int v38 = v31;
    _os_log_impl(&dword_1AFB53000, v30, OS_LOG_TYPE_INFO, "Unable to perform database migration from %d to %d", buf, 0xEu);
  }
  return 0;
}

BOOL _IMDDatabaseCompleteMigration(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  IMDSqlOperationInitWithCSDBConnection(a2, a1, (uint64_t)v9);
  if (IMDCreateTablesWithOperation((uint64_t)v9, 1))
  {
    IMDCreateIndexesWithOperation((uint64_t)v9, 1);
    IMDCreateTriggersWithOperation((uint64_t)v9, 1);
  }
  else if (!*((void *)&v10 + 1))
  {
    long long v11 = xmmword_1E5F8FE10;
    long long v12 = *(_OWORD *)off_1E5F8FE20;
    uint64_t v13 = 222;
    uint64_t v5 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"success || operation->error != nil", "BOOL IMDCreateTriggersAndIndexes(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 222, objc_msgSend(NSString, "stringWithFormat:", @"can't have migration fail without error!!"];
    id v6 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v15 = v5;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  return IMDSqlOperationRelease((uint64_t)v9, a4);
}

uint64_t _IMDDatabasePerformMigrations(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5)
{
  uint64_t v6 = a3;
  int v25 = 0;
  unsigned int v9 = dword_1EB5AAB08;
  if (!dword_1EB5AAB08)
  {
LABEL_7:
    _IMDDatabaseCompleteMigration(a1, a2, a3, &v25);
    uint64_t v13 = 1;
    BOOL v14 = v25;
    goto LABEL_8;
  }
  long long v11 = &dword_1EB5AAB08;
  while (v6 >= v9)
  {
LABEL_6:
    unsigned int v12 = v11[6];
    v11 += 6;
    unsigned int v9 = v12;
    if (!v12) {
      goto LABEL_7;
    }
  }
  if (_IMDDatabasePerformOneMigration(v11, a1, a2, v6, a4, &v25))
  {
    uint64_t v6 = *v11;
    goto LABEL_6;
  }
  BOOL v14 = v25;
  if (v25)
  {
    uint64_t v13 = 0;
  }
  else
  {
    BOOL v14 = (void *)[MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:3072 userInfo:0];
    uint64_t v13 = 0;
    int v25 = v14;
  }
LABEL_8:
  if (a5 && v14)
  {
    if (*a5)
    {
      long long v26 = xmmword_1E5F8FE38;
      long long v27 = *(_OWORD *)off_1E5F8FE48;
      uint64_t v28 = 59;
      uint64_t v15 = [NSString stringWithFormat:@"Unexpected not nil '%@' in %s at %s:%d. %@", @"*outError", "BOOL IMDSetOutError(NSError **, NSError *)", IMFileLocationTrimFileName(), 59, objc_msgSend(NSString, "stringWithFormat:", @"outError is already pointing at an error, this could be a leak")];
      uint64_t v16 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
      if (v16)
      {
        v16(v15);
      }
      else
      {
        uint64_t v24 = v15;
        _IMWarn();
      }
    }
    *a5 = v14;
  }
  char v17 = v13 ^ 1;
  if (v6 == 18017) {
    char v17 = 1;
  }
  if ((v17 & 1) == 0)
  {
    int v18 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall");
    __int16 v19 = IMLogHandleForCategory();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (v18 && (int)v6 >= 18018)
    {
      if (v20) {
        sub_1AFC64540(v6, v19);
      }
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance", v24), "isInternalInstall"))
      {
        int v21 = objc_msgSend(MEMORY[0x1E4F6C410], "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:", objc_msgSend(NSString, "stringGUID"), @"Messages Database Downgrade Detected", @"[Internal Only] Messages database is newer than expected version. This may have occurred due to a software downgrade.\n\nNo data has been removed but Messages may not behave as expected.", @"OK", 0, 0);
        if (v21)
        {
          uint64_t v22 = v21;
          [v21 setUsesNotificationCenter:0];
          [v22 setRepresentedApplicationBundle:*MEMORY[0x1E4F6C440]];
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C418], "sharedInstance"), "addUserNotification:listener:completionHandler:", v22, 0, &unk_1F084CC40);
        }
      }
      return 1;
    }
    else
    {
      if (v20) {
        sub_1AFC645C8(v19);
      }
      return 0;
    }
  }
  return v13;
}

void sub_1AFB85EE0()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "User acknowledged database downgrade", v1, 2u);
    }
  }
}

void sub_1AFB85F80(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_error_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0x26u);
}

uint64_t IMDChatRecordAddChat(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB860A0;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFB86088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB860A0(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    CSDBRecordStoreAddRecord();
    uint64_t result = CSDBRecordSaveStore();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyAllChats()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_DEBUG, "IMDSMSRecordStoreCopyAllChats", buf, 2u);
    }
  }
  *(void *)uint8_t buf = 0;
  char v7 = buf;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v1 = +[IMDChatQueryStrings copyAllChatsQuery];
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFB8628C;
    v5[3] = &unk_1E5F8FF50;
    void v5[4] = buf;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v1, (uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1AFB863B0;
    v4[3] = (void (*)(void))&unk_1E5F8D580;
    void v4[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyAllChats_IPCAction(v4);
  }
  uint64_t v2 = *((void *)v7 + 3);
  _Block_object_dispose(buf, 8);
  return v2;
}

void sub_1AFB8628C(uint64_t a1)
{
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      uint64_t v5 = (int)Count;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v8 = Mutable;
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDChatRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            uint64_t v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFB863B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB86444;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB86444(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    char v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

uint64_t IMDChatRecordCopyAllNamedChats()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_DEBUG, "IMDSMSRecordStoreCopyAllNamedChats", buf, 2u);
    }
  }
  *(void *)uint8_t buf = 0;
  char v7 = buf;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v1 = +[IMDChatQueryStrings copyAllNamedChatsQuery];
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFB86684;
    v5[3] = &unk_1E5F8FF50;
    void v5[4] = buf;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v1, (uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1AFB867A8;
    v4[3] = (void (*)(void))&unk_1E5F8D580;
    void v4[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyAllNamedChats_IPCAction(v4);
  }
  uint64_t v2 = *((void *)v7 + 3);
  _Block_object_dispose(buf, 8);
  return v2;
}

void sub_1AFB86684(uint64_t a1)
{
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      uint64_t v5 = (int)Count;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v8 = Mutable;
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDChatRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            uint64_t v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFB867A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB8683C;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB8683C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    char v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

uint64_t IMDChatRecordCopyAllActiveChats()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_DEBUG, "IMDSMSRecordStoreCopyAllActiveChats", buf, 2u);
    }
  }
  *(void *)uint8_t buf = 0;
  char v7 = buf;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v1 = +[IMDChatQueryStrings copyAllChatsQuery];
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFB86A84;
    v5[3] = &unk_1E5F8FF50;
    void v5[4] = buf;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v1, (uint64_t)v5);
  }
  else
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1AFB86BA8;
    v4[3] = &unk_1E5F8D580;
    void v4[4] = buf;
    __syncXPCIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction((void (*)(void))v4, -1);
  }
  uint64_t v2 = *((void *)v7 + 3);
  _Block_object_dispose(buf, 8);
  return v2;
}

void sub_1AFB86A48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB86A84(uint64_t a1)
{
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      uint64_t v5 = (int)Count;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v8 = Mutable;
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDChatRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            uint64_t v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFB86BA8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB86C3C;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB86C3C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    char v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

id IMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit(int64_t a1, int64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Copying all unread chats and recent chats", buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v6 = (void *)[MEMORY[0x1E4F6E938] fetchSMSFilterExtensionParams];
    id v7 = +[IMDChatQueryStrings copyRecentChatsQueryWithFilterCount:](IMDChatQueryStrings, "copyRecentChatsQueryWithFilterCount:", [v6 count] + 5);
    uint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] array];
    *(void *)uint8_t buf = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    uint64_t v22 = sub_1AFB8DD54;
    __int16 v23 = &unk_1E5F90668;
    int64_t v26 = a1;
    int64_t v27 = a2;
    uint64_t v24 = (uint64_t)v6;
    int v25 = v8;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v7, (uint64_t)buf);
    if (v8) {
      uint64_t v9 = [v8 count];
    }
    else {
      uint64_t v9 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v28 = 134218496;
        uint64_t v29 = v9;
        __int16 v30 = 2048;
        int64_t v31 = a1;
        __int16 v32 = 2048;
        int64_t v33 = a2;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Found %llu recent chats (knownSenderLimit: %lld, otherFilterLimit: %lld)", v28, 0x20u);
      }
    }

    [v5 addObjectsFromArray:v8];
    [v5 count];
    uint64_t v11 = [v5 count];
    uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
    id v13 = +[IMDChatQueryStrings copyChatsWithUnreadMessagesWithLimit:2000 - v11];
    *(void *)uint8_t buf = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    uint64_t v22 = sub_1AFB8DF84;
    __int16 v23 = &unk_1E5F8EC10;
    uint64_t v24 = v12;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v13, (uint64_t)buf);

    [v5 addObjectsFromArray:v12];
    v17[3] = (uint64_t)v5;
  }
  else
  {
    v15[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v15[1] = (void (*)(void))3221225472;
    v15[2] = (void (*)(void))sub_1AFB87068;
    v15[3] = (void (*)(void))&unk_1E5F8D580;
    v15[4] = (void (*)(void))&v16;
    __syncXPCIMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit_IPCAction(v15, a1, a2);
    id v5 = (id)v17[3];
  }
  _Block_object_dispose(&v16, 8);
  return v5;
}

xpc_object_t sub_1AFB87068(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void IMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412802;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&uint8_t buf[24] = a3;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Trying to update chats wuth lastAddressedSIMID %@ to new simID %@ and new handle %@", buf, 0x20u);
    }
  }
  if (a1)
  {
    BOOL v7 = [a1 length] == 0;
    if (a2) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v7 = 1;
    if (a2)
    {
LABEL_6:
      BOOL v8 = [a2 length] == 0;
      if (a3) {
        goto LABEL_7;
      }
LABEL_13:
      BOOL v9 = 1;
      if (v7) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  BOOL v8 = 1;
  if (!a3) {
    goto LABEL_13;
  }
LABEL_7:
  BOOL v9 = [a3 length] == 0;
  if (v7)
  {
LABEL_8:
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        uint64_t v11 = "Old lastAddressedSIMID passed is nil, returning.";
        uint64_t v12 = v10;
        uint32_t v13 = 2;
LABEL_18:
        _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
        return;
      }
    }
    return;
  }
LABEL_14:
  if (v8 && v9)
  {
    if (IMOSLoggingEnabled())
    {
      BOOL v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        uint64_t v11 = "Both new lastAddressedSIMID and lastAddressedSIMID are nil, not updating chats with simID %@ and returning.";
        uint64_t v12 = v14;
        uint32_t v13 = 12;
        goto LABEL_18;
      }
    }
  }
  else if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v15 = [a2 copy];
    if (v15) {
      uint64_t v16 = (__CFString *)v15;
    }
    else {
      uint64_t v16 = &stru_1F084E970;
    }
    uint64_t v17 = [a3 copy];
    memset(&v27[7], 0, 32);
    if (v17) {
      uint64_t v18 = (__CFString *)v17;
    }
    else {
      uint64_t v18 = &stru_1F084E970;
    }
    memset(v27, 0, 112);
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, (CFStringRef)+[IMDChatQueryStrings remapChatsWithLastAddressedSIMIDToNewLastAddressedIDsQuery]);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, (uint64_t)v18);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, (uint64_t)v16);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, *MEMORY[0x1E4F6E1A0]);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, (uint64_t)a1);
    IMDSqlOperationFinishQuery((uint64_t)buf);
    uint64_t v21 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v21);
    if (v21)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v19 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v22 = 138412290;
          __int16 v23 = v21;
          _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Error executing IMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs %@ ", v22, 0xCu);
        }
      }
    }
    if (IMOSLoggingEnabled())
    {
      BOOL v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v22 = 138412546;
        __int16 v23 = v18;
        __int16 v24 = 2112;
        int v25 = v16;
        _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Last addressed handles/simIDs got modified to %@ and %@. Posting notification to reload chat registry.", v22, 0x16u);
      }
    }
    notify_post("com.apple.imdpersistenceagent.notification.lastaddressedidsmodified");
  }
  else
  {
    __syncXPCIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(0);
  }
}

uint64_t IMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0] = 138412546;
      *(void *)&buf[1] = a1;
      LOWORD(buf[3]) = 2112;
      *(void *)((char *)&buf[3] + 2) = a2;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Trying to find last address labelID/date from chatIds %@ and labelIDs %@", (uint8_t *)buf, 0x16u);
    }
  }
  unint64_t v5 = [a1 count];
  uint64_t v6 = [a2 count];
  if (v5 && (unint64_t v7 = v6) != 0)
  {
    BOOL v8 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:&stru_1F084E970];
    if (v5 >= 2)
    {
      unint64_t v9 = v5 - 1;
      do
      {
        [v8 appendString:@"?, "];
        --v9;
      }
      while (v9);
    }
    uint64_t v10 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:&stru_1F084E970];
    if (v7 >= 2)
    {
      unint64_t v11 = v7 - 1;
      do
      {
        [v10 appendString:@"?, "];
        --v11;
      }
      while (v11);
    }
    uint64_t v23 = 0;
    __int16 v24 = &v23;
    uint64_t v25 = 0x2020000000;
    CFMutableDictionaryRef Mutable = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (IMDIsRunningInDatabaseServerProcess())
    {
      CFStringRef v12 = (const __CFString *)objc_msgSend(NSString, "stringWithFormat:", @"select max(cm.message_date),last_addressed_sim_id from (select * from chat where chat_identifier in (%@?) AND style=45 and service_name=? and last_addressed_sim_id in (%@?)) c INNER JOIN chat_message_join cm ON c.ROWID=cm.chat_id;",
                                  v8,
                                  v10);
      if (IMOSLoggingEnabled())
      {
        uint32_t v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          buf[0] = 138412290;
          *(void *)&buf[1] = v12;
          _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedLabelID: running with query %@", (uint8_t *)buf, 0xCu);
        }
      }
      memset(v29, 0, sizeof(v29));
      memset(buf, 0, sizeof(buf));
      IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
      _IMDSqlOperationBeginQuery((uint64_t)buf, v12);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v29, (CFArrayRef)a1);
      IMDSqlStatementBindTextFromCFString((uint64_t)v29, *MEMORY[0x1E4F6E1A0]);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v29, (CFArrayRef)a2);
      if (IMDSqlOperationHasRows((uint64_t)buf))
      {
        Row = IMDSqlStatementGetRow((sqlite3_stmt **)v29);
        uint64_t v15 = Row;
        if (Row)
        {
          if ([(__CFDictionary *)Row objectForKeyedSubscript:@"last_addressed_sim_id"])
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v24[3], @"labelID", (const void *)[(__CFDictionary *)v15 objectForKeyedSubscript:@"last_addressed_sim_id"]);
            if ([(__CFDictionary *)v15 objectForKeyedSubscript:@"max(cm.message_date)"])
            {
              CFDictionarySetValue((CFMutableDictionaryRef)v24[3], @"date", (const void *)[(__CFDictionary *)v15 objectForKeyedSubscript:@"max(cm.message_date)"]);
            }
          }
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = v24[3];
            *(_DWORD *)int64_t v27 = 138412290;
            *(void *)&v27[4] = v17;
            _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedLabelID: found results from db %@", v27, 0xCu);
          }
        }
      }
      IMDSqlOperationFinishQuery((uint64_t)buf);
      *(void *)int64_t v27 = 0;
      IMDSqlOperationRelease((uint64_t)buf, v27);
      if (*(void *)v27)
      {
        uint64_t v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6468C();
        }
      }
    }
    else
    {
      v22[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v22[1] = (void (*)(void))3221225472;
      v22[2] = (void (*)(void))sub_1AFB879BC;
      v22[3] = (void (*)(void))&unk_1E5F8D580;
      uint8_t v22[4] = (void (*)(void))&v23;
      __syncXPCIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(v22, (uint64_t)a1, (uint64_t)a2);
    }
    uint64_t v20 = v24[3];
    _Block_object_dispose(&v23, 8);
  }
  else
  {
    uint64_t v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64648(v19);
    }
    return 0;
  }
  return v20;
}

void sub_1AFB879BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "dictionary_result");
  if (value)
  {
    uint64_t v4 = value;
    unint64_t v5 = (const void *)IMGetXPCStringFromDictionary();
    int64_t int64 = xpc_dictionary_get_int64(v4, "date");
    if (v5) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"labelID", v5);
    }
    if (int64)
    {
      unint64_t v7 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      BOOL v8 = (const void *)[MEMORY[0x1E4F28ED0] numberWithLongLong:int64];
      CFDictionarySetValue(v7, @"date", v8);
    }
  }
}

__CFArray *IMDChatGetChatsThatContainRecipient(uint64_t a1)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    uint64_t v31 = 0;
    __int16 v32 = &v31;
    uint64_t v33 = 0x2020000000;
    uint64_t v34 = 0;
    uint64_t v25 = 0;
    int64_t v26 = &v25;
    uint64_t v27 = 0x3052000000;
    CFMutableArrayRef v28 = (CFMutableArrayRef)sub_1AFB87F80;
    uint64_t v29 = sub_1AFB87F90;
    uint64_t v30 = 0;
    uint64_t v30 = [MEMORY[0x1E4F1C978] array];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1AFB87F9C;
    v24[3] = &unk_1E5F8FFA0;
    v24[5] = &v25;
    v24[6] = @"SELECT guid,display_Name,chat_id from chat c INNER JOIN chat_handle_join ch ON c.ROWint ID = ch.chat_id INNER JOIN handle h on h.ROWint ID = ch.handle_id WHERE c.state = 3 AND h.id = ?";
    v24[4] = a1;
    IMDRunSqlOperation((uint64_t)v24);
    unint64_t v3 = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (v3 < [(id)v26[5] count])
    {
      uint64_t v5 = [NSString stringWithFormat:@"%@", objc_msgSend((id)objc_msgSend((id)v26[5], "objectAtIndexedSubscript:", v3), "valueForKey:", @"chat_id"];
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = sub_1AFB8803C;
      v23[3] = &unk_1E5F8EBC0;
      v23[4] = v5;
      v23[5] = &v31;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT handle_id FROM chat_handle_join WHERE chat_id = ?", (uint64_t)v23);
      uint64_t v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unint64_t v7 = (const void *)objc_msgSend((id)objc_msgSend((id)v26[5], "objectAtIndexedSubscript:", v3), "valueForKey:", @"guid");
      if (v7) {
        CFDictionarySetValue(v6, @"chatGUID", v7);
      }
      BOOL v8 = (const void *)objc_msgSend((id)objc_msgSend((id)v26[5], "objectAtIndexedSubscript:", v3), "valueForKey:", @"display_name");
      if (v8) {
        CFDictionarySetValue(v6, @"displayName", v8);
      }
      CFArrayRef v9 = (const __CFArray *)v32[3];
      if (v9)
      {
        CFIndex Count = CFArrayGetCount(v9);
        uint64_t v11 = (int)Count;
        CFStringRef v12 = CFArrayCreateMutable(v4, (int)Count, MEMORY[0x1E4F1D510]);
        if (v12)
        {
          if (Count << 32 >= 1)
          {
            CFIndex v13 = 0;
            if (v11 <= 1) {
              uint64_t v14 = 1;
            }
            else {
              uint64_t v14 = v11;
            }
            do
            {
              CFArrayGetValueAtIndex((CFArrayRef)v32[3], v13);
              int ID = CSDBRecordGetID();
              uint64_t v16 = (const void *)IMDHandleRecordCreateFromRecordIDUnlocked(v4, ID);
              CFArrayAppendValue(v12, v16);
              if (v16) {
                CFRelease(v16);
              }
              ++v13;
            }
            while (v14 != v13);
          }
          CFDictionarySetValue(v6, @"handles", v12);
          CFRelease(v12);
        }
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Handle records from kIMDChatTableSelectHandleIDFromChatID query is empty.", buf, 2u);
        }
      }
      uint64_t v18 = (const void *)v32[3];
      if (v18)
      {
        CFRelease(v18);
        v32[3] = 0;
      }
      CFArrayAppendValue(Mutable, v6);
      if (v6) {
        CFRelease(v6);
      }
      ++v3;
    }

    _Block_object_dispose(&v25, 8);
    uint64_t v19 = &v31;
  }
  else
  {
    uint64_t v25 = 0;
    int64_t v26 = &v25;
    uint64_t v27 = 0x2020000000;
    CFMutableArrayRef v28 = 0;
    CFMutableArrayRef v28 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    v21[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v21[1] = (void (*)(void))3221225472;
    v21[2] = (void (*)(void))sub_1AFB880A0;
    v21[3] = (void (*)(void))&unk_1E5F8D580;
    v21[4] = (void (*)(void))&v25;
    __syncXPCIMDChatGetChatsThatContainRecipient_IPCAction(v21, a1);
    CFMutableDictionaryRef Mutable = (__CFArray *)v26[3];
    uint64_t v19 = &v25;
  }
  _Block_object_dispose(v19, 8);
  return Mutable;
}

void sub_1AFB87F18()
{
}

void sub_1AFB87F24()
{
}

void sub_1AFB87F2C()
{
}

void sub_1AFB87F80(uint64_t a1, uint64_t a2)
{
}

void sub_1AFB87F90(uint64_t a1)
{
}

id sub_1AFB87F9C(void *a1, uint64_t a2)
{
  CFStringRef v4 = (const __CFString *)a1[6];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFB88030;
  v6[3] = &unk_1E5F8FF78;
  void v6[4] = a1[4];
  void v6[5] = a2;
  id result = _IMDSqlOperationGetRowsWithBindingBlock(a2, v4, (uint64_t)v6);
  *(void *)(*(void *)(a1[5] + 8) + 40) = result;
  return result;
}

void sub_1AFB88030(uint64_t a1)
{
}

uint64_t sub_1AFB8803C(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  uint64_t result = CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1AFB880A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    CFStringRef v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      for (size_t i = 0; i != v6; ++i)
      {
        BOOL v8 = (__CFDictionary *)[MEMORY[0x1E4F1CA60] dictionary];
        xpc_object_t v9 = xpc_array_get_value(v4, i);
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = (const void *)IMGetXPCStringFromDictionary();
          if (v11) {
            CFDictionarySetValue(v8, @"chatGUID", v11);
          }
          CFStringRef v12 = (const void *)IMGetXPCStringFromDictionary();
          if (v12) {
            CFDictionarySetValue(v8, @"displayName", v12);
          }
          xpc_object_t v13 = xpc_dictionary_get_value(v10, "handles");
          if (v13)
          {
            uint64_t v14 = v13;
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (xpc_array_get_count(v14))
            {
              size_t v16 = 0;
              do
              {
                xpc_object_t v17 = xpc_array_get_value(v14, v16);
                uint64_t v18 = (const void *)_IMDCopyIMDHandleRecordFromXPCObjectClient(v17);
                if (v18)
                {
                  uint64_t v19 = v18;
                  CFArrayAppendValue(Mutable, v18);
                  CFRelease(v19);
                }
                ++v16;
              }
              while (v16 < xpc_array_get_count(v14));
            }
            if (Mutable)
            {
              CFDictionarySetValue(v8, @"handles", Mutable);
              CFRelease(Mutable);
            }
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v8);
        }
      }
    }
  }
}

uint64_t IMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0] = 138412546;
      *(void *)&buf[1] = a1;
      LOWORD(buf[3]) = 2112;
      *(void *)((char *)&buf[3] + 2) = a2;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Trying to find last address handles/date from chatIds %@ and handles %@", (uint8_t *)buf, 0x16u);
    }
  }
  unint64_t v5 = [a1 count];
  uint64_t v6 = [a2 count];
  if (v5 && (unint64_t v7 = v6) != 0)
  {
    BOOL v8 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:&stru_1F084E970];
    if (v5 >= 2)
    {
      unint64_t v9 = v5 - 1;
      do
      {
        [v8 appendString:@"?, "];
        --v9;
      }
      while (v9);
    }
    uint64_t v10 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:&stru_1F084E970];
    if (v7 >= 2)
    {
      unint64_t v11 = v7 - 1;
      do
      {
        [v10 appendString:@"?, "];
        --v11;
      }
      while (v11);
    }
    uint64_t v23 = 0;
    __int16 v24 = &v23;
    uint64_t v25 = 0x2020000000;
    CFMutableDictionaryRef Mutable = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (IMDIsRunningInDatabaseServerProcess())
    {
      CFStringRef v12 = (const __CFString *)objc_msgSend(NSString, "stringWithFormat:", @"select max(cm.message_date),last_addressed_handle from (select * from chat where chat_identifier in (%@?) AND style=45 and service_name=? and last_addressed_handle in (%@?)) c INNER JOIN chat_message_join cm ON c.ROWID=cm.chat_id;",
                                  v8,
                                  v10);
      if (IMOSLoggingEnabled())
      {
        xpc_object_t v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          buf[0] = 138412290;
          *(void *)&buf[1] = v12;
          _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedHandle: running with query %@", (uint8_t *)buf, 0xCu);
        }
      }
      memset(v29, 0, sizeof(v29));
      memset(buf, 0, sizeof(buf));
      IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
      _IMDSqlOperationBeginQuery((uint64_t)buf, v12);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v29, (CFArrayRef)a1);
      IMDSqlStatementBindTextFromCFString((uint64_t)v29, *MEMORY[0x1E4F6E1A0]);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v29, (CFArrayRef)a2);
      if (IMDSqlOperationHasRows((uint64_t)buf))
      {
        Row = IMDSqlStatementGetRow((sqlite3_stmt **)v29);
        uint64_t v15 = Row;
        if (Row)
        {
          if ([(__CFDictionary *)Row objectForKeyedSubscript:@"last_addressed_handle"])
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v24[3], @"handle", (const void *)[(__CFDictionary *)v15 objectForKeyedSubscript:@"last_addressed_handle"]);
            if ([(__CFDictionary *)v15 objectForKeyedSubscript:@"max(cm.message_date)"])
            {
              CFDictionarySetValue((CFMutableDictionaryRef)v24[3], @"date", (const void *)[(__CFDictionary *)v15 objectForKeyedSubscript:@"max(cm.message_date)"]);
            }
          }
        }
        if (IMOSLoggingEnabled())
        {
          size_t v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = v24[3];
            *(_DWORD *)uint64_t v27 = 138412290;
            *(void *)&v27[4] = v17;
            _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedHandle: found results from db %@", v27, 0xCu);
          }
        }
      }
      IMDSqlOperationFinishQuery((uint64_t)buf);
      *(void *)uint64_t v27 = 0;
      IMDSqlOperationRelease((uint64_t)buf, v27);
      if (*(void *)v27)
      {
        uint64_t v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_1AFC64738();
        }
      }
    }
    else
    {
      v22[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v22[1] = (void (*)(void))3221225472;
      v22[2] = (void (*)(void))sub_1AFB8874C;
      v22[3] = (void (*)(void))&unk_1E5F8D580;
      uint8_t v22[4] = (void (*)(void))&v23;
      __syncXPCIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(v22, (uint64_t)a1, (uint64_t)a2);
    }
    uint64_t v20 = v24[3];
    _Block_object_dispose(&v23, 8);
  }
  else
  {
    uint64_t v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_1AFC646F4(v19);
    }
    return 0;
  }
  return v20;
}

void sub_1AFB8874C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "dictionary_result");
  if (value)
  {
    CFStringRef v4 = value;
    unint64_t v5 = (const void *)IMGetXPCStringFromDictionary();
    int64_t int64 = xpc_dictionary_get_int64(v4, "date");
    if (v5) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @"handle", v5);
    }
    if (int64)
    {
      unint64_t v7 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      BOOL v8 = (const void *)[MEMORY[0x1E4F28ED0] numberWithLongLong:int64];
      CFDictionarySetValue(v7, @"date", v8);
    }
  }
}

id IMDChatRowIDsMostRecentByLastMessageWithLimit(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!IMDIsRunningInDatabaseServerProcess()) {
    return 0;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v14);
  _IMDSqlOperationBeginQuery((uint64_t)v14, (CFStringRef)+[IMDChatQueryStrings chatRowIDsSortedByLastMessageDate]);
  if (IMDSqlOperationHasRows((uint64_t)v14))
  {
    uint64_t v3 = 0;
    uint64_t v4 = MEMORY[0x1E4F1CC38];
    do
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v15);
      uint64_t v6 = Row;
      if (Row && [(__CFDictionary *)Row objectForKeyedSubscript:@"chat_id"])
      {
        id v7 = objc_alloc(MEMORY[0x1E4F1C9E8]);
        uint64_t v8 = [(__CFDictionary *)v6 objectForKeyedSubscript:@"max(message_date)"];
        uint64_t v9 = MEMORY[0x1E4F1CC28];
        if (v3 < a1) {
          uint64_t v9 = v4;
        }
        uint64_t v10 = objc_msgSend(v7, "initWithObjectsAndKeys:", v8, @"d", v9, @"l", 0);
        objc_msgSend(v2, "setObject:forKey:", v10, -[__CFDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", @"chat_id"));
      }
      ++v3;
    }
    while (IMDSqlOperationHasRows((uint64_t)v14));
  }
  IMDSqlOperationFinishQuery((uint64_t)v14);
  uint64_t v13 = 0;
  IMDSqlOperationRelease((uint64_t)v14, &v13);
  if (v13)
  {
    if (IMOSLoggingEnabled())
    {
      unint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v17 = v13;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Unable to find most recent ChatRow IDs from chat_message_join error: %@", buf, 0xCu);
      }
    }
  }
  return v2;
}

void IMDChatRecordCopyAllActiveChatsProgressivelyWithLimitAndBlock(int64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  char v4 = IMDIsRunningInDatabaseServerProcess();
  if (a2 && (v4 & 1) == 0)
  {
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x2020000000;
    uint64_t v11 = 0;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1AFB88BDC;
    v7[3] = &unk_1E5F90090;
    void v7[4] = a2;
    void v7[5] = &v8;
    __syncXPCIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction((void (*)(void))v7, a1);
    if (IMOSLoggingEnabled())
    {
      unint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = v9[3];
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v13 = v6;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Copying active chats progressively: total number copied was %ld", buf, 0xCu);
      }
    }
    _Block_object_dispose(&v8, 8);
  }
}

void sub_1AFB88BDC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    char v4 = value;
    size_t count = xpc_array_get_count(value);
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], count, MEMORY[0x1E4F1D510]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB88D88;
    applier[3] = &unk_1E5F90068;
    applier[4] = *(void *)(a1 + 40);
    void applier[5] = Mutable;
    xpc_array_apply(v4, applier);
    CFIndex v7 = CFArrayGetCount(Mutable);
    if (v7 >= 1)
    {
      CFIndex v8 = v7;
      for (CFIndex i = 0; i != v8; ++i)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        (*(void (**)(uint64_t, const void *))(v10 + 16))(v10, ValueAtIndex);
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    CFStringRef v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Received empty batch in IMDChatRecordCopyAllActiveChatsProgressivelyWithLimitAndBlock", v13, 2u);
    }
  }
}

uint64_t sub_1AFB88D88(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    CFIndex v7 = v6;
    CFIndex v8 = *(__CFArray **)(a1 + 40);
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFArrayAppendValue(v8, v7);
    CFRelease(v7);
  }
  return 1;
}

void IMDChatRecordCopyAllActiveChatsWithLimitAndBlock(int64_t a1, uint64_t a2)
{
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000;
    uint64_t v17 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    uint64_t v13 = 0;
    v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1AFB88F90;
    v9[3] = (void (*)(void))&unk_1E5F900B8;
    v9[4] = (void (*)(void))&v10;
    void v9[5] = (void (*)(void))&v14;
    __syncXPCIMDChatRecordCopyAllActiveChatsWithLimit_IPCAction(v9, a1);
    if (v11[3])
    {
      uint64_t v4 = 0;
      while (1)
      {
        unint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
        uint64_t v6 = *(void **)(v15[3] + 8 * v4);
        CFIndex v7 = _IMDCopyIMDChatRecordFromXPCObjectClient(v6);
        xpc_release(v6);
        if (a2)
        {
          if (v7) {
            break;
          }
        }
        if (v7) {
          goto LABEL_8;
        }
LABEL_9:
        if (++v4 >= (unint64_t)v11[3]) {
          goto LABEL_10;
        }
      }
      (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v7);
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
LABEL_10:
    CFIndex v8 = (void *)v15[3];
    if (v8) {
      free(v8);
    }
    _Block_object_dispose(&v10, 8);
    _Block_object_dispose(&v14, 8);
  }
}

void sub_1AFB88F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1AFB88F90(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t v4 = result;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_array_get_count(result);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = malloc_type_malloc(8* *(void *)(*(void *)(*(void *)(a1 + 32) + 8)+ 24), 0x80040B8603338uLL);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB8906C;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 40);
    return (xpc_object_t)xpc_array_apply(v4, applier);
  }
  return result;
}

uint64_t sub_1AFB8906C(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8 * a2) = object;
  return 1;
}

uint64_t IMDChatRecordCopyChatRecordUnlocked(uint64_t a1)
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB89178;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFB89160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB89178(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDChatRecordCopyChatRecord(int64_t a1)
{
  if (a1 == -1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFB892F8;
    v5[3] = &unk_1E5F8FE88;
    void v5[4] = &v6;
    void v5[5] = a1;
    _IMDPerformLockedMessageStoreBlock((uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1AFB8933C;
    v4[3] = (void (*)(void))&unk_1E5F8D580;
    void v4[4] = (void (*)(void))&v6;
    __syncXPCIMDChatRecordCopyChatRecordForIdentifier_IPCAction(v4, a1);
  }
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1AFB892E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB892F8(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void *sub_1AFB8933C(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFStringRef IMDChatRecordCopyChatForGUID(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      uint64_t v6 = 0;
      uint64_t v7 = &v6;
      uint64_t v8 = 0x2020000000;
      uint64_t v9 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        uint64_t v2 = +[IMDChatQueryStrings copyChatForGUIDQuery];
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        void v5[2] = sub_1AFB894CC;
        v5[3] = &unk_1E5F900E0;
        void v5[4] = &v6;
        void v5[5] = v1;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)v2, (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1AFB89588;
        v4[3] = (void (*)(void))&unk_1E5F8D580;
        void v4[4] = (void (*)(void))&v6;
        __syncXPCIMDChatRecordCopyChatForGUID_IPCAction(v4, (uint64_t)v1);
      }
      CFStringRef v1 = (CFStringRef)v7[3];
      _Block_object_dispose(&v6, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1AFB894B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB894CC(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

void *sub_1AFB89588(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t IMDChatRecordCopyChatForMessageID(int64_t a1)
{
  int64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x2020000000;
    uint64_t v8 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      v4[2] = sub_1AFB89704;
      v4[3] = &unk_1E5F900E0;
      void v4[4] = &v5;
      void v4[5] = v1;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE ROWint ID = (SELECT chat_id from chat_message_join WHERE message_id = ?)", (uint64_t)v4);
      CFRelease(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE ROWint ID = (SELECT chat_id from chat_message_join WHERE message_id = ?)");
    }
    else
    {
      v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v3[1] = (void (*)(void))3221225472;
      v3[2] = (void (*)(void))sub_1AFB897C0;
      v3[3] = (void (*)(void))&unk_1E5F8D580;
      void v3[4] = (void (*)(void))&v5;
      __syncXPCIMDChatRecordCopyChatForMessageID_IPCAction(v3, v1);
    }
    int64_t v1 = v6[3];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_1AFB896E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB89704(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

void *sub_1AFB897C0(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFStringRef IMDChatRecordCopyChatForGUIDUnlocked(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      uint64_t v5 = 0;
      uint64_t v6 = &v5;
      uint64_t v7 = 0x2020000000;
      uint64_t v8 = 0;
      CFArrayRef v2 = +[IMDChatQueryStrings copyChatForGUIDUnlockedQuery];
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      v4[2] = sub_1AFB898EC;
      v4[3] = &unk_1E5F900E0;
      void v4[4] = &v5;
      void v4[5] = v1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v2, (uint64_t)v4);

      CFStringRef v1 = (CFStringRef)v6[3];
      _Block_object_dispose(&v5, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1AFB898D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB898EC(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Did not get results for chat guid %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

uint64_t IMDChatRecordCopyChatsWithHandleOnService(const __CFString *a1, const __CFString *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v5 = "No handle provided to IMDChatRecordCopyChatsWithHandleOnService";
    goto LABEL_13;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v5 = "No service provided to IMDChatRecordCopyChatsWithHandleOnService";
LABEL_13:
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
LABEL_14:
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_1AFB89CB0;
    v9[3] = &unk_1E5F90108;
    void v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v11;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    chat_identifier = ? AND    service_name = ? ORDER BY chat.ROWID ASC;",
      (uint64_t)v9);
  }
  else
  {
    v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v8[1] = (void (*)(void))3221225472;
    void v8[2] = (void (*)(void))sub_1AFB89D50;
    v8[3] = (void (*)(void))&unk_1E5F8D580;
    void v8[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatsWithHandleOnService_IPCAction(v8, (uint64_t)a1, (uint64_t)a2);
  }
  uint64_t v6 = v12[3];
LABEL_15:
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1AFB89C74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB89CB0(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (void *)CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

xpc_object_t sub_1AFB89D50(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyChatsWithIdentifierOnService(const __CFString *a1, const __CFString *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v5 = "No identifier provided to IMDChatRecordCopyChatsWithIdentifierOnService";
    goto LABEL_13;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v5 = "No service provided to IMDChatRecordCopyChatsWithIdentifierOnService";
LABEL_13:
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
LABEL_14:
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_1AFB89FA8;
    v9[3] = &unk_1E5F90108;
    void v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v11;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    chat_identifier = ? AND    service_name = ? ORDER BY chat.ROWID ASC;",
      (uint64_t)v9);
  }
  else
  {
    v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v8[1] = (void (*)(void))3221225472;
    void v8[2] = (void (*)(void))sub_1AFB8A048;
    v8[3] = (void (*)(void))&unk_1E5F8D580;
    void v8[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatsWithIdentifierOnService_IPCAction(v8, (uint64_t)a1, (uint64_t)a2);
  }
  uint64_t v6 = v12[3];
LABEL_15:
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1AFB89F6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB89FA8(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (void *)CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

xpc_object_t sub_1AFB8A048(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyChatsWithRoomnameOnService(const __CFString *a1, const __CFString *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v5 = "No roomname provided to IMDChatRecordCopyChatsWithRoomnameOnService";
    goto LABEL_13;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v5 = "No service provided to IMDChatRecordCopyChatsWithRoomnameOnService";
LABEL_13:
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
LABEL_14:
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_1AFB8A2A0;
    v9[3] = &unk_1E5F90108;
    void v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v11;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    room_name = ? AND    service_name = ? ORDER BY chat.ROWID ASC;",
      (uint64_t)v9);
  }
  else
  {
    v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v8[1] = (void (*)(void))3221225472;
    void v8[2] = (void (*)(void))sub_1AFB8A340;
    v8[3] = (void (*)(void))&unk_1E5F8D580;
    void v8[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatsWithRoomnameOnService_IPCAction(v8, (uint64_t)a1, (uint64_t)a2);
  }
  uint64_t v6 = v12[3];
LABEL_15:
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1AFB8A264(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB8A2A0(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (void *)CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

xpc_object_t sub_1AFB8A340(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyChatsWithGroupID(const __CFString *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (a1 && CFStringGetLength(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = sub_1AFB8A53C;
      v6[3] = &unk_1E5F900E0;
      void v6[4] = &v8;
      void v6[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    group_id = ? ORDER BY chat.ROWID ASC;",
        (uint64_t)v6);
    }
    else
    {
      v5[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v5[1] = (void (*)(void))3221225472;
      void v5[2] = (void (*)(void))sub_1AFB8A5D0;
      v5[3] = (void (*)(void))&unk_1E5F8D580;
      void v5[4] = (void (*)(void))&v8;
      __syncXPCIMDChatRecordCopyChatsWithGroupID_IPCAction(v5, (uint64_t)a1);
    }
    uint64_t v3 = v9[3];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      CFArrayRef v2 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "No group ID provided to IMDChatRecordCopyChatsWithGroupID", buf, 2u);
      }
    }
    uint64_t v3 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_1AFB8A504(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB8A53C(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (void *)CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

xpc_object_t sub_1AFB8A5D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyNewestChatForGroupIDOnService(const __CFString *a1, const __CFString *a2, int a3)
{
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled()) {
      return 0;
    }
    int v7 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v8 = "No roomname provided to IMDChatRecordCopyNewestChatForGroupIDOnService";
    goto LABEL_16;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled()) {
      return 0;
    }
    int v7 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v8 = "No service provided to IMDChatRecordCopyNewestChatForGroupIDOnService";
LABEL_16:
    _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, v8, buf, 2u);
    return 0;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (a3) {
      uint64_t v6 = @"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join on    chat_id == chat.rowid WHERE    original_group_id = ? AND    service_name = ? ORDER BY    chat_message_join.message_date DESC LIMIT    1;";
    }
    else {
      uint64_t v6 = @"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join on    chat_id == chat.rowid WHERE    group_id = ? AND    service_name = ? ORDER BY    chat_message_join.message_date DESC LIMIT    1;";
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1AFB8A8CC;
    v18[3] = &unk_1E5F90108;
    v18[5] = a1;
    v18[6] = a2;
    v18[4] = &v19;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v6, (uint64_t)v18);
  }
  else
  {
    *(void *)uint8_t buf = 0;
    uint64_t v13 = buf;
    uint64_t v14 = 0x3052000000;
    uint64_t v15 = sub_1AFB87F80;
    uint64_t v16 = sub_1AFB87F90;
    dispatch_semaphore_t v17 = 0;
    dispatch_semaphore_t v17 = dispatch_semaphore_create(0);
    v11[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v11[1] = (void (*)(void))3221225472;
    void v11[2] = (void (*)(void))sub_1AFB8A994;
    v11[3] = (void (*)(void))&unk_1E5F900B8;
    v11[4] = (void (*)(void))&v19;
    void v11[5] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyNewestChatForGroupIDOnService_IPCAction(v11, (uint64_t)a1, (uint64_t)a2);
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)v13 + 5), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*((dispatch_object_t *)v13 + 5));
    _Block_object_dispose(buf, 8);
  }
  uint64_t v9 = v20[3];
  _Block_object_dispose(&v19, 8);
  return v9;
}

void sub_1AFB8A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB8A8CC(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

intptr_t sub_1AFB8A994(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  CFArrayRef v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return dispatch_semaphore_signal(v3);
}

CFArrayRef IMDChatRecordCopyChatIdentitiesForMessageWithGUIDs(const __CFArray *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "CFArrayRef IMDChatRecordCopyChatIdentitiesForMessageWithGUIDs(CFArrayRef)";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = CFArrayGetCount(a1);
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "%s with total message guids count %llu", buf, 0x16u);
    }
  }
  *(void *)uint8_t buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3052000000;
  uint64_t v10 = sub_1AFB87F80;
  uint64_t v11 = sub_1AFB87F90;
  uint64_t v12 = 0;
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    if (a1 && CFArrayGetCount(a1))
    {
      v5[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v5[1] = (void (*)(void))3221225472;
      void v5[2] = (void (*)(void))sub_1AFB8B448;
      v5[3] = (void (*)(void))&unk_1E5F8D580;
      void v5[4] = (void (*)(void))buf;
      __syncXPCIMDChatRecordCopyChatIdentitiesForMessageWithGUIDs_IPCAction(v5);
      goto LABEL_11;
    }
    if (IMOSLoggingEnabled())
    {
      CFArrayRef v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v7 = 136315138;
        uint64_t v8 = "CFArrayRef IMDChatRecordCopyChatIdentitiesForMessageWithGUIDs(CFArrayRef)";
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "%s nil or empty messageGUIDs", v7, 0xCu);
      }
    }
LABEL_15:
    a1 = 0;
    goto LABEL_16;
  }
  if (a1)
  {
    if (CFArrayGetCount(a1))
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = sub_1AFB8AC94;
      v6[3] = &unk_1E5F901A0;
      void v6[4] = buf;
      void v6[5] = a1;
      IMDRunSqlOperation((uint64_t)v6);
LABEL_11:
      a1 = *(const __CFArray **)(*(void *)&buf[8] + 40);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  _Block_object_dispose(buf, 8);
  return a1;
}

BOOL sub_1AFB8AC94(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (const __CFString *)[NSString stringWithFormat:@"%@ (%@)", @"SELECT    m.guid AS message_guid, c.guid AS chat_guid, c.style AS chat_style, c.group_id AS chat_group_id, c.original_group_id AS chat_original_group_id FROM chat c JOIN chat_message_join cmj ON c.ROWID = cmj.chat_id JOIN message m ON cmj.message_id = m.ROWID WHERE m.guid IN", objc_msgSend(NSString, "substitutionStringForCount:", CFArrayGetCount(*(CFArrayRef *)(a1 + 40)))];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFB8ADA8;
  v8[3] = &unk_1E5F90128;
  uint64_t v5 = *(void *)(a1 + 40);
  void v8[4] = a2;
  void v8[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFB8ADB4;
  v7[3] = &unk_1E5F90178;
  uint8_t v7[4] = *(void *)(a1 + 32);
  void v7[5] = a2;
  return _IMDSqlOperationRunQuery(a2, v4, (uint64_t)v8, (uint64_t)v7);
}

void sub_1AFB8ADA8(uint64_t a1)
{
}

BOOL sub_1AFB8ADB4(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v34 = 0;
      uint64_t v35 = &v34;
      uint64_t v36 = 0x3052000000;
      __int16 v37 = sub_1AFB87F80;
      int v38 = sub_1AFB87F90;
      uint64_t v39 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = &v28;
      uint64_t v30 = 0x3052000000;
      uint64_t v31 = sub_1AFB87F80;
      __int16 v32 = sub_1AFB87F90;
      uint64_t v33 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = &v22;
      uint64_t v24 = 0x3052000000;
      uint64_t v25 = sub_1AFB87F80;
      int64_t v26 = sub_1AFB87F90;
      uint64_t v27 = 0;
      uint64_t v16 = 0;
      dispatch_semaphore_t v17 = &v16;
      uint64_t v18 = 0x3052000000;
      uint64_t v19 = sub_1AFB87F80;
      uint64_t v20 = sub_1AFB87F90;
      uint64_t v21 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = &v10;
      uint64_t v12 = 0x3052000000;
      uint64_t v13 = sub_1AFB87F80;
      uint64_t v14 = sub_1AFB87F90;
      uint64_t v15 = 0;
      uint64_t v4 = *(void *)(a1 + 40);
      v9[0] = v3;
      v9[1] = 3221225472;
      v9[2] = sub_1AFB8B244;
      v9[3] = &unk_1E5F90150;
      v9[4] = &v34;
      void v9[5] = &v28;
      v9[6] = &v22;
      void v9[7] = &v16;
      v9[8] = &v10;
      IMDSqlOperationIterateRow(v4, (uint64_t)v9);
      if (v35[5] && v29[5])
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        }
        id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        [v5 setObject:v35[5] forKeyedSubscript:@"messageID"];
        [v5 setObject:v29[5] forKeyedSubscript:@"chatID"];
        [v5 setObject:v23[5] forKeyedSubscript:@"chatStyle"];
        [v5 setObject:v17[5] forKeyedSubscript:@"chatGroupID"];
        [v5 setObject:v11[5] forKeyedSubscript:@"chatOriginalGroupID"];
        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v5];
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = v35[5];
          uint64_t v8 = v29[5];
          *(_DWORD *)uint8_t buf = 138412546;
          uint64_t v41 = v7;
          __int16 v42 = 2112;
          uint64_t v43 = v8;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDChatRecordChatGUIDsForMessageGUIDs got invalid column data back: %@|%@", buf, 0x16u);
        }
      }
      _Block_object_dispose(&v10, 8);
      _Block_object_dispose(&v16, 8);
      _Block_object_dispose(&v22, 8);
      _Block_object_dispose(&v28, 8);
      _Block_object_dispose(&v34, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFB8B1F0()
{
}

void sub_1AFB8B1F8()
{
}

void sub_1AFB8B244(void *a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v5 = a1[4];
      goto LABEL_10;
    case 1:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v5 = a1[5];
      goto LABEL_10;
    case 2:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v4 = (const unsigned __int8 *)[MEMORY[0x1E4F28ED0] numberWithLongLong:IMDInt64FromSqlColumn((uint64_t)&v8)];
      uint64_t v5 = a1[6];
      goto LABEL_10;
    case 3:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v5 = a1[7];
      goto LABEL_10;
    case 4:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v5 = a1[8];
LABEL_10:
      *(void *)(*(void *)(v5 + 8) + 40) = v4;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        uint64_t v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v7 = *((_DWORD *)a2 + 4);
          LODWORD(v8) = 67109120;
          DWORD1(v8) = v7;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Unexpected column in reply query with index %d", (uint8_t *)&v8, 8u);
        }
      }
      break;
  }
}

xpc_object_t sub_1AFB8B448(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    xpc_object_t result = (xpc_object_t)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithArray:IMGetXPCArrayFromDictionary()];
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  }
  return result;
}

void IMDChatRecordDeleteChatForGUID_Fast(void *a1)
{
  if (!a1 || ![a1 length])
  {
    CFArrayRef v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_1AFC647A0();
      if (!a1) {
        return;
      }
    }
    else if (!a1)
    {
      return;
    }
  }
  if ([a1 length])
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = sub_1AFB8B58C;
      v3[3] = &unk_1E5F901C8;
      void v3[4] = a1;
      IMDRunSqlOperation((uint64_t)v3);
    }
    else
    {
      __syncXPCIMDChatRecordDeleteChatForGUID_IPCAction(0, (uint64_t)a1);
    }
  }
}

void sub_1AFB8B58C(uint64_t a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFB8B63C;
  v4[3] = &unk_1E5F8FF78;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  _IMDSqlOperationRunQuery(a2, @"DELETE FROM chat WHERE guid = ?;", (uint64_t)v4, 0);
  if (!*(void *)(a2 + 168))
  {
    IMDCoreSpotlightDeleteChatGUID(*(void **)(a1 + 32), 1006);
    IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
  }
}

void sub_1AFB8B63C(uint64_t a1)
{
}

void IMDChatRecordDeleteChatForGUID(__CFString *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 && CFStringGetLength(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      IMDCoreSpotlightDeleteChatGUID(a1, 1006);
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      void v8[2] = sub_1AFB8B8B4;
      v8[3] = &unk_1E5F901E8;
      void v8[4] = a1;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE guid = ? ORDER BY chat.ROWID ASC;",
        (uint64_t)v8);
      uint64_t v2 = IMSharedHelperExternalLocationForFile();
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", 0), "fileExistsAtPath:", v2))
      {
        char v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v2, &v7);
        int v4 = IMOSLoggingEnabled();
        if (v3)
        {
          if (v4)
          {
            uint64_t v5 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              uint64_t v10 = v2;
              uint64_t v6 = "  => Successfully deleted item at path: %@ ";
LABEL_18:
              _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, v6, buf, 0xCu);
            }
          }
        }
        else if (v4)
        {
          uint64_t v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            uint64_t v10 = v2;
            uint64_t v6 = "  => failed to remove item at path: %@ ";
            goto LABEL_18;
          }
        }
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v10 = v2;
          uint64_t v6 = "   => file doesn't exist at path: %@";
          goto LABEL_18;
        }
      }
    }
    else
    {
      __syncXPCIMDChatRecordDeleteChatForGUID_IPCAction(0, (uint64_t)a1);
    }
  }
}

void sub_1AFB8B894(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB8B868);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB8B8B4()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v0 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  int Count = CFArrayGetCount(v0);
  int v2 = Count;
  if (Count < 2)
  {
    if (Count != 1) {
      goto LABEL_12;
    }
  }
  else if (IMOSLoggingEnabled())
  {
    char v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v11[0] = 67109120;
      v11[1] = v2;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Query for GUID yields %d results, deleting all\n", (uint8_t *)v11, 8u);
    }
  }
  CFIndex v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  do
  {
    CFArrayGetValueAtIndex(v0, v4);
    int ID = CSDBRecordGetID();
    uint64_t v7 = IMDChatRecordCreateFromRecordIDUnlocked(v5, ID);
    long long v8 = v7;
    if (v7)
    {
      uint64_t v9 = IMDChatRecordCopyHandles(v7);
      IMDCoreSpotlightDeleteCoreRecentsWithHandles(v9);
      if (v9) {
        CFRelease(v9);
      }
      CFRelease(v8);
    }
    CSDBRecordStoreRemoveRecord();
    ++v4;
  }
  while (v2 != v4);
LABEL_12:
  if (v0) {
    CFRelease(v0);
  }
  return CSDBRecordSaveStore();
}

void IMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFB8BBE8;
    v5[3] = &unk_1E5F90128;
    void v5[4] = a2;
    void v5[5] = a1;
    if (IMOSLoggingEnabled())
    {
      CFIndex v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint8_t buf = 138412546;
        uint64_t v7 = a2;
        __int16 v8 = 2112;
        uint64_t v9 = a1;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_DEBUG, "IMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]", buf, 0x16u);
      }
    }
    _IMDPerformBlock((uint64_t)v5);
  }
  else
  {
    __syncXPCIMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded_IPCAction(0, a1, a2);
  }
}

void sub_1AFB8BBE8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = IMDChatRecordCopyChatForGUIDUnlocked(*(CFStringRef *)(a1 + 32));
  CFStringRef v3 = IMDMessageRecordCopyMessageForGUIDUnlocked(*(const __CFString **)(a1 + 40));
  CFStringRef v4 = v3;
  if (v2)
  {
    if (v3)
    {
      IMDChatRecordAddMessageIfNeededUnlocked((uint64_t)v2, (uint64_t)v3);
      CFRelease(v2);
LABEL_12:
      CFRelease(v4);
      return;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v6;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Unable to associate message with chat, the chat is NULL (chat guid: %@)", (uint8_t *)&v9, 0xCu);
      }
    }
    if (v4) {
      goto LABEL_12;
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Unable to associate message with chat, the message is NULL (message guid: %@)", (uint8_t *)&v9, 0xCu);
    }
  }
  CFStringRef v4 = v2;
  if (v2) {
    goto LABEL_12;
  }
}

void IMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded(const __CFString *a1, const __CFString *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 138412546;
      CFStringRef v11 = a2;
      __int16 v12 = 2112;
      CFStringRef v13 = a1;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_DEBUG, "IMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]", (uint8_t *)&v10, 0x16u);
    }
  }
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    __syncXPCIMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded_IPCAction(0, (uint64_t)a1, (uint64_t)a2);
    return;
  }
  CFStringRef v5 = IMDChatRecordCopyChatForGUID(a2);
  CFStringRef v6 = IMDMessageRecordCopyMessageForGUID(a1);
  CFStringRef v7 = v6;
  if (v5)
  {
    if (v6)
    {
      IMDChatRecordRemoveMessage((uint64_t)v5, (uint64_t)v6);
      CFRelease(v5);
LABEL_13:
      CFRelease(v7);
      return;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Unable to disassociate message from chat, the chat is NULL.", (uint8_t *)&v10, 2u);
      }
    }
    if (v7) {
      goto LABEL_13;
    }
  }
  if (IMOSLoggingEnabled())
  {
    int v9 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Unable to disassociate message from chat, the message is NULL.", (uint8_t *)&v10, 2u);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
}

CFMutableArrayRef IMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      CFArrayRef v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_DEBUG, "IMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages", buf, 2u);
      }
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *(void *)uint8_t buf = MEMORY[0x1E4F143A8];
    uint64_t v5 = 3221225472;
    uint64_t v6 = (uint64_t)sub_1AFB8E10C;
    CFMutableArrayRef v7 = (CFMutableArrayRef)&unk_1E5F90750;
    CFMutableArrayRef v8 = Mutable;
    _IMDPerformLockedDatabaseBlock((uint64_t)buf);
  }
  else
  {
    *(void *)uint8_t buf = 0;
    uint64_t v5 = (uint64_t)buf;
    uint64_t v6 = 0x2020000000;
    CFMutableArrayRef v7 = 0;
    CFMutableArrayRef v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v3[1] = (void (*)(void))3221225472;
    v3[2] = (void (*)(void))sub_1AFB8C138;
    v3[3] = (void (*)(void))&unk_1E5F8D580;
    void v3[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages_IPCAction(v3);
    CFMutableArrayRef Mutable = *(CFMutableArrayRef *)(v5 + 24);
    _Block_object_dispose(buf, 8);
  }
  return Mutable;
}

void sub_1AFB8C138(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    CFStringRef v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      for (size_t i = 0; i != v6; ++i)
      {
        string = xpc_array_get_string(v4, i);
        if (string)
        {
          int v9 = (const void *)[NSString stringWithUTF8String:string];
          if (v9) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v9);
          }
        }
      }
    }
  }
}

void IMDChatRecordSetIsFiltered(const __CFString *a1, uint64_t a2)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v4 = (uint64_t *)IMDChatRecordCopyChatForGUID(a1);
    uint64_t v5 = IMDChatRecordCopyChatRecordUnlocked(v4[2]);
    if (v4 && v5)
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      void v8[2] = sub_1AFB8C318;
      v8[3] = &unk_1E5F90128;
      void v8[4] = v5;
      void v8[5] = a2;
      _IMDPerformBlock((uint64_t)v8);
    }
    else if (IMOSLoggingEnabled())
    {
      size_t v6 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)CFMutableArrayRef v7 = 0;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Unable to update filter flag, the chat record is NULL.", v7, 2u);
      }
    }
    CFRelease(v4);
  }
  else
  {
    __syncXPCIMDChatRecordSetIsFiltered_IPCAction(0, (uint64_t)a1);
  }
}

void sub_1AFB8C318(uint64_t a1)
{
  _IMDChatRecordSetProperty();
  CFStringRef v2 = *(const void **)(a1 + 32);
  IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
}

void IMDChatRecordDeleteEmptyChats()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    IMDRunSqlOperation((uint64_t)&unk_1F084CC60);
  }
  else
  {
    __syncXPCIMDChatRecordDeleteEmptyChats_IPCAction(0);
  }
}

void sub_1AFB8C3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Deleting all empty chats.", (uint8_t *)&v7, 2u);
    }
  }
  _IMDSqlOperationRunQuery(a2, @"DELETE FROM chat WHERE ((SELECT COUNT(*) FROM chat_message_join WHERE chat_id = chat.ROWID) == 0 AND (SELECT COUNT(*) FROM chat_recoverable_message_join WHERE chat_id = chat.ROWID) == 0);",
    (uint64_t)&unk_1F084C508,
    0);
  if (*(void *)(a2 + 168))
  {
    if (IMOSLoggingEnabled())
    {
      CFStringRef v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a2 + 168);
        int v7 = 138412290;
        uint64_t v8 = v5;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Error occured while deleting empty chats %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  if (IMOSLoggingEnabled())
  {
    size_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Finished deleting all empty chats.", (uint8_t *)&v7, 2u);
    }
  }
}

void IMDChatInsertIntoDeletedChatsTable(void *a1, void *a2, sqlite3_int64 a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    size_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412802;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&unsigned char buf[24] = a3;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Request to insert guid %@ recordID %@ timeStamp %lld", buf, 0x20u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v19, 0, sizeof(v19));
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, @"INSERT INTO sync_deleted_chats (guid, recordID, timestamp) VALUES (?, ?, ?);");
    IMDSqlStatementBindTextFromCFString((uint64_t)v19, (uint64_t)a1);
    IMDSqlStatementBindTextFromCFString((uint64_t)v19, (uint64_t)a2);
    IMDSqlStatementBindInt64((uint64_t)v19, a3);
    IMDSqlOperationFinishQuery((uint64_t)buf);
    uint64_t v9 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v9);
    if (v9)
    {
      int v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v10 = 138413058;
        CFStringRef v11 = a1;
        __int16 v12 = 2112;
        CFStringRef v13 = a2;
        __int16 v14 = 2048;
        sqlite3_int64 v15 = a3;
        __int16 v16 = 2112;
        uint64_t v17 = v9;
        _os_log_error_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_ERROR, "Unable to insert row (guid:%@ recordID: %@ timeStamp:%ld, error %@) into sync_deleted_chats Table", v10, 0x2Au);
      }
    }
  }
  else
  {
    __syncXPCInsertIntoDeletedChatsTable_IPCAction(0, a1, a2, a3);
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412802;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = a2;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&unsigned char buf[24] = a3;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Returned from IMDP after inserting in synd deleted table guid %@ recordID %@ timeStamp %lld", buf, 0x20u);
      }
    }
  }
}

uint64_t IMDChatCopyChatRecordIDsAndGUIDsToDeleteWithLimit(int64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Request to load deleted chat recordIDs with limit %lld", buf, 0xCu);
    }
  }
  uint64_t v11 = 0;
  __int16 v12 = &v11;
  uint64_t v13 = 0x3052000000;
  __int16 v14 = sub_1AFB87F80;
  sqlite3_int64 v15 = sub_1AFB87F90;
  id v16 = 0;
  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    long long v18 = 0u;
    memset(v19, 0, sizeof(v19));
    *(_OWORD *)uint8_t buf = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, @"select guid, recordID, timestamp from sync_deleted_chats where LENGTH(recordID) > 0;");
    while (IMDSqlOperationHasRows((uint64_t)buf))
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v19);
      if (Row) {
        [(id)v12[5] addObject:Row];
      }
    }
    IMDSqlOperationFinishQuery((uint64_t)buf);
    uint64_t v10 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v10);
    if (v10)
    {
      size_t v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1AFC64850();
      }
    }
  }
  else
  {
    v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1AFB8CB04;
    v9[3] = (void (*)(void))&unk_1E5F8D580;
    v9[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatRecordIDsAndGUIDsToDeleteFromCloudKitWithLimit_IPCAction(v9, a1);
    if (IMOSLoggingEnabled())
    {
      CFStringRef v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = [(id)v12[5] count];
        *(_DWORD *)uint8_t buf = 134217984;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Returned from DB call after loading messages to delete messages count %lu", buf, 0xCu);
      }
    }
  }
  uint64_t v7 = v12[5];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1AFB8CA94(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFB8CA4CLL);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

xpc_object_t sub_1AFB8CB04(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB8CB98;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB8CB98(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v5 = objc_msgSend(NSString, "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "guid"), 4);
  uint64_t v6 = objc_msgSend(NSString, "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "recordID"), 4);
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v5, @"guid", v6, @"recordID", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(xdict, "timeStamp")), @"timeStamp", 0));
  return 1;
}

void IMDChatClearPendingDeleteChatsTable()
{
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v2[0]) = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Request to clear pending deletes from chat table", (uint8_t *)v2, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    IMDSqlOperationExecuteQuery((uint64_t)v2, @"delete from sync_deleted_chats;", (uint64_t)&unk_1F084C100);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDChatClearPendingDeleteChatsTable_IPCAction(0);
    if (IMOSLoggingEnabled())
    {
      uint64_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Returned from DB call after marking clearing all pending delete chats", (uint8_t *)v2, 2u);
      }
    }
  }
}

void sub_1AFB8CDD4()
{
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDChatClearPendingDeleteChatsTable cleared pending delete chat table", v1, 2u);
    }
  }
}

void IMDChatRemapMessagesWithErrorCodeToErrorCode(void *a1, sqlite3_int64 a2, sqlite3_int64 a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 134218498;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&unsigned char buf[24] = a1;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Request to reset messages with error %lld to error %lld on chatGUIDS %@", buf, 0x20u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v8 = [a1 countByEnumeratingWithState:&v31 objects:v38 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v32;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v32 != v9) {
            objc_enumerationMutation(a1);
          }
          CFStringRef v11 = IMDChatRecordCopyChatForGUID(*(CFStringRef *)(*((void *)&v31 + 1) + 8 * i));
          CFStringRef v12 = v11;
          if (v11)
          {
            objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v11->data));
            CFRelease(v12);
          }
        }
        uint64_t v8 = [a1 countByEnumeratingWithState:&v31 objects:v38 count:16];
      }
      while (v8);
    }
    int v13 = [v7 count];
    int v14 = v13;
    if (v13)
    {
      if (v13 >= 2)
      {
        CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
        id v16 = Mutable;
        if (Mutable)
        {
          CFStringAppend(Mutable, CFSTR("UPDATE message SET error=? WHERE rowid IN (SELECT message_id FROM chat_message_join WHERE chat_id IN (?"));
          int v17 = v14 - 1;
          do
          {
            CFStringAppend(v16, @", ?");
            --v17;
          }
          while (v17);
          CFStringAppend(v16, @") AND error=?"));
        }
        else
        {
          uint64_t v25 = IMLogHandleForCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_1AFC64A00();
          }
          id v16 = 0;
        }
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v19 = IMLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_1AFC64920(v19);
      }
    }
    CFRetain(@"UPDATE message SET error=? WHERE rowid IN (SELECT message_id FROM chat_message_join WHERE chat_id IN (?)) AND error=?");
    id v16 = @"UPDATE message SET error=? WHERE rowid IN (SELECT message_id FROM chat_message_join WHERE chat_id IN (?)) AND error=?";
LABEL_26:
    if (IMOSLoggingEnabled())
    {
      uint64_t v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedHandle: running with query %@", buf, 0xCu);
      }
    }
    memset(v37, 0, 144);
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, v16);
    IMDSqlStatementBindInt64((uint64_t)v37, a3);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v21 = [v7 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v28;
      do
      {
        for (uint64_t j = 0; j != v21; ++j)
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v7);
          }
          IMDSqlStatementBindInt64((uint64_t)v37, [*(id *)(*((void *)&v27 + 1) + 8 * j) integerValue]);
        }
        uint64_t v21 = [v7 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v21);
    }

    IMDSqlStatementBindInt64((uint64_t)v37, a2);
    IMDSqlOperationFinishQuery((uint64_t)buf);
    uint64_t v26 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v26);
    if (v16) {
      CFRelease(v16);
    }
    if (v26)
    {
      uint64_t v24 = IMLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1AFC648B8();
      }
    }
    return;
  }
  __syncXPCIMDChatRemapMessagesWithErrorCodeToErrorCode_IPCAction(0, (uint64_t)a1, a2, a3);
  if (IMOSLoggingEnabled())
  {
    long long v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "Returned from DB call after marking clearing all pending delete chats", buf, 2u);
    }
  }
}

void sub_1AFB8D330(const __CFArray *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v3 = 0;
    if (Count <= 1uLL) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = Count;
    }
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v3);
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      char v36 = 0;
      uint64_t v34 = 0;
      int64_t v35 = 0;
      char v33 = 0;
      uint64_t v32 = 0;
      long long v31 = 0;
      char v30 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v24 = 0;
      int64_t v25 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = [ValueAtIndex previewGenerationState];
      _IMDAttachmentRecordBulkCopy((uint64_t)ValueAtIndex, &v44, &v43, &v42, &v41, &v40, &v39, &v38, &v37, &v36, &v35, &v34, &v33, &v32, &v31, &v30, &v29, &v28, &v27,
        &v26,
        &v25,
        &v24,
        &v23);
      if (v40)
      {
        uint64_t v22 = 0;
        id v7 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
        if ([v7 fileExistsAtPath:v40])
        {
          uint64_t v8 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
          [v8 removeItemAtPath:v40 error:&v22];
          BOOL v9 = v22 == 0;
          int v10 = IMOSLoggingEnabled();
          if (v9)
          {
            if (v10)
            {
              id v16 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                uint64_t v46 = v40;
                CFStringRef v12 = v16;
                int v13 = "Removed attachment at path: %@";
LABEL_17:
                uint32_t v14 = 12;
LABEL_18:
                _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, v13, buf, v14);
              }
            }
          }
          else if (v10)
          {
            CFStringRef v11 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412546;
              uint64_t v46 = v40;
              __int16 v47 = 2112;
              uint64_t v48 = v22;
              CFStringRef v12 = v11;
              int v13 = "deleting attachment failed at path: %@: %@";
              uint32_t v14 = 22;
              goto LABEL_18;
            }
          }
        }
        else if (IMOSLoggingEnabled())
        {
          sqlite3_int64 v15 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            uint64_t v46 = v40;
            CFStringRef v12 = v15;
            int v13 = "No attachment to remove at path: %@";
            goto LABEL_17;
          }
        }
      }
      BOOL v18 = v29 != 1 || v37 != 0;
      int v19 = IMOSLoggingEnabled();
      if (v18)
      {
        if (v19)
        {
          uint64_t v20 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            uint64_t v46 = v44;
            _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Resetting downloadState for attachment guid: %@", buf, 0xCu);
          }
        }
        IMDAttachmentRecordBulkUpdate((uint64_t)ValueAtIndex, v44, v43, v42, v41, v40, v39, v38, 0, v36, v35, v34, v33, v32, v31, v30, 1, v28, v27,
          v26,
          v25,
          v24,
          v23,
          v6);
      }
      else if (v19)
      {
        uint64_t v21 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v46 = v44;
          _os_log_impl(&dword_1AFB53000, v21, OS_LOG_TYPE_INFO, "Attachment already marked as needing download for guid: %@", buf, 0xCu);
        }
      }
      ++v3;
    }
    while (v4 != v3);
  }
}

void IMDChatRecordPurgeAttachments(const __CFString *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      CFIndex v32 = (CFIndex)a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Purging attachment files for chat guid: %@", buf, 0xCu);
    }
  }
  CFIndex v3 = (void *)[MEMORY[0x1E4F1CA48] array];
  CFStringRef v4 = IMDChatRecordCopyChatForGUID(a1);
  CFStringRef cf = v4;
  if (v4)
  {
    CFArrayRef v5 = (const __CFArray *)IMDChatRecordCopyMessagesWithLimit((uint64_t)v4, -1);
    CFArrayRef v6 = v5;
    if (v5)
    {
      CFIndex Count = CFArrayGetCount(v5);
      uint64_t v29 = (int)Count;
      if (IMOSLoggingEnabled())
      {
        uint64_t v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 134217984;
          CFIndex v32 = (int)Count;
          _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Found %ld messages for chat", buf, 0xCu);
        }
      }
      if (Count << 32 >= 1)
      {
        CFIndex v9 = 0;
        CFIndex v10 = 0;
        if (v29 <= 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v29;
        }
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
          uint64_t v13 = (uint64_t)ValueAtIndex;
          if (!ValueAtIndex)
          {
            if (IMOSLoggingEnabled())
            {
              int v19 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 134217984;
                CFIndex v32 = v10;
                _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Failed to load message at index: %ld", buf, 0xCu);
              }
            }
            goto LABEL_28;
          }
          uint32_t v14 = (const void *)IMDMessageRecordCopyGUIDForMessage((uint64_t)ValueAtIndex);
          [v3 addObject:v14];
          CFArrayRef v15 = (const __CFArray *)IMDMessageRecordCopyAttachments(v13);
          CFArrayRef v16 = v15;
          if (v15)
          {
            int v17 = CFArrayGetCount(v15);
            if (IMOSLoggingEnabled())
            {
              BOOL v18 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 134218242;
                CFIndex v32 = v17;
                __int16 v33 = 2112;
                uint64_t v34 = (uint64_t)v14;
                _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "Found %ld attachments for message: %@", buf, 0x16u);
              }
            }
            sub_1AFB8D330(v16);
            CFRelease(v16);
            v9 += v17;
            if (!v14) {
              goto LABEL_28;
            }
          }
          else
          {
            if (IMOSLoggingEnabled())
            {
              uint64_t v20 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                CFIndex v32 = (CFIndex)v14;
                _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Failed to load attachments for message: %@", buf, 0xCu);
              }
            }
            if (!v14) {
              goto LABEL_28;
            }
          }
          CFRelease(v14);
LABEL_28:
          if (v11 == ++v10) {
            goto LABEL_38;
          }
        }
      }
      CFIndex v9 = 0;
LABEL_38:
      CFRelease(v6);
      if (!IMOSLoggingEnabled()) {
        goto LABEL_42;
      }
      uint64_t v26 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      *(_DWORD *)uint8_t buf = 134218240;
      CFIndex v32 = v9;
      __int16 v33 = 2048;
      uint64_t v34 = v29;
      uint64_t v23 = "Updated %lld attachments on %ld messages";
      uint64_t v24 = v26;
      uint32_t v25 = 22;
    }
    else
    {
      if (!IMOSLoggingEnabled()) {
        goto LABEL_42;
      }
      uint64_t v22 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      *(_DWORD *)uint8_t buf = 138412290;
      CFIndex v32 = (CFIndex)a1;
      uint64_t v23 = "No messages load for chat: %@";
      uint64_t v24 = v22;
      uint32_t v25 = 12;
    }
    _os_log_impl(&dword_1AFB53000, v24, OS_LOG_TYPE_INFO, v23, buf, v25);
LABEL_42:
    CFRelease(cf);
    goto LABEL_43;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      CFIndex v32 = (CFIndex)a1;
      _os_log_impl(&dword_1AFB53000, v21, OS_LOG_TYPE_INFO, "Chat record not loaded for chat: %@", buf, 0xCu);
      if (!v3) {
        return;
      }
      goto LABEL_44;
    }
  }
LABEL_43:
  if (!v3) {
    return;
  }
LABEL_44:
  if (IMOSLoggingEnabled())
  {
    uint64_t v27 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = [v3 count];
      *(_DWORD *)uint8_t buf = 134217984;
      CFIndex v32 = v28;
      _os_log_impl(&dword_1AFB53000, v27, OS_LOG_TYPE_INFO, "Reindexing %ld messages", buf, 0xCu);
    }
  }
  IMDCoreSpotlightReindexMessages(v3, 1007, 0);
}

void sub_1AFB8DCE0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB8DC28);
  }
  _Unwind_Resume(a1);
}

void sub_1AFB8DD54(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  do
  {
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    ++v2;
  }
  while (v2 != 5);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  CFIndex v3 = *(void **)(a1 + 32);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        if ((unint64_t)[*(id *)(*((void *)&v11 + 1) + 8 * i) filterMode] >= 0x10)
        {
          CSDBSqliteBindInt64();
          CSDBSqliteBindInt64();
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v17 count:16];
    }
    while (v4);
  }
  id v7 = (void *)CSDBRecordStoreProcessStatement();
  CFArrayRef v8 = (const __CFArray *)_IMDChatRecordCopyChatsFromRecords(v7);
  if (v8)
  {
    [*(id *)(a1 + 40) addObjectsFromArray:v8];
    if (IMOSLoggingEnabled())
    {
      CFIndex v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        CFIndex Count = CFArrayGetCount(v8);
        *(_DWORD *)uint8_t buf = 134217984;
        CFIndex v16 = Count;
        _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Found %llu recent chats for filter modes", buf, 0xCu);
      }
    }
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1AFB8DF84(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)CSDBRecordStoreProcessStatement();
  CFArrayRef v3 = (const __CFArray *)_IMDChatRecordCopyChatsFromRecords(v2);
  if (!v3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v6) = 0;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "No chats found with unread messages.", (uint8_t *)&v6, 2u);
      }
    }
LABEL_9:
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  [*(id *)(a1 + 32) addObjectsFromArray:v3];
  if (!IMOSLoggingEnabled()) {
    goto LABEL_9;
  }
  uint64_t v4 = OSLogHandleForIMFoundationCategory();
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
    goto LABEL_9;
  }
  int v6 = 134217984;
  CFIndex Count = CFArrayGetCount(v3);
  _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Found %llu chats with unread messages.", (uint8_t *)&v6, 0xCu);
  if (v2) {
LABEL_10:
  }
    CFRelease(v2);
LABEL_11:
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1AFB8E0E8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    if (!v2) {
      JUMPOUT(0x1AFB8E0ACLL);
    }
    JUMPOUT(0x1AFB8E0A4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB8E10C(uint64_t a1)
{
  if (CSDBSqliteDatabaseConnectionForReading())
  {
    uint64_t v2 = CSDBSqliteConnectionStatementForSQL();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(sqlite3_stmt **)(v2 + 8);
      if (v4)
      {
        if (sqlite3_step(v4) == 100)
        {
          CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          do
          {
            if (sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0))
            {
              int v6 = sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0);
              CFStringRef v7 = CFStringCreateWithCString(v5, (const char *)v6, 0x8000100u);
              if (v7)
              {
                CFStringRef v8 = v7;
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v7);
                CFRelease(v8);
              }
            }
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v3 + 8)) == 100);
        }
        CSDBSqliteStatementReset();
      }
    }
    CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  CFRelease(@"SELECT DISTINCT  c.guid FROM   chat c INNER JOIN chat_message_join cm ON   c.ROWint ID = cm.chat_id INNER JOIN message m ON   m.ROWint ID = cm.message_id WHERE   m.is_from_me = 0   AND m.is_played = 0   AND m.is_audio_message = 1   AND c.style = 45 ");
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void sub_1AFB8E224(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1AFB8E590(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB8E548);
  }
  _Unwind_Resume(a1);
}

void sub_1AFB8E9B0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB8E8F0);
  }
  _Unwind_Resume(a1);
}

void sub_1AFB8E9FC(uint64_t a1, int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      int v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = [*(id *)(a1 + 32) count];
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v15 = v7;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Successfully donated %llu interactions", buf, 0xCu);
      }
    }
  }
  else
  {
    CFStringRef v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64B2C(a1, (uint64_t)v5, v8);
    }
  }
  CFIndex v9 = [*(id *)(a1 + 40) queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1AFB8EBB4;
  block[3] = &unk_1E5F8D508;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v11.i64[0];
  int8x16_t v13 = vextq_s8(v11, v11, 8uLL);
  dispatch_async(v9, block);
}

uint64_t sub_1AFB8EBB4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__finishedDonatingItems_);
}

uint64_t sub_1AFB8EC74(uint64_t a1)
{
  return [*(id *)(a1 + 32) _donateItems:*(void *)(a1 + 40)];
}

void sub_1AFB8F4BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB8F4FC(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Beginning iteration of _IMDCleanseOrphanedAttachmentsWithEnumerator attachments", v4, 2u);
    }
  }
  return [objc_loadWeak((id *)(a1 + 48)) _cleanseOrphanedAttachmentsWithEnumerator:*(void *)(a1 + 32) atPath:*(void *)(a1 + 40)];
}

void sub_1AFB8F8DC()
{
  void v5[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F6D4B0];
  v4[0] = @"rowID";
  v4[1] = v0;
  v5[0] = @"ROWID";
  v5[1] = @"id";
  uint64_t v1 = *MEMORY[0x1E4F6D4B8];
  v4[2] = *MEMORY[0x1E4F6D4C8];
  v4[3] = v1;
  void v5[2] = @"uncanonicalized_id";
  v5[3] = @"country";
  void v4[4] = *MEMORY[0x1E4F6D4C0];
  void v5[4] = @"service";
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:5];
  uint64_t v3 = (void *)qword_1EB5ABA18;
  qword_1EB5ABA18 = v2;
}

void sub_1AFB8FA20()
{
  os_log_t v0 = os_log_create("com.apple.Messages", "IMDCustomPluginNotificationContext");
  uint64_t v1 = (void *)qword_1E9AF8060;
  qword_1E9AF8060 = (uint64_t)v0;
}

id sub_1AFB8FF20()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v1 = 0;
  uint64_t v2 = @"chat_message_join";
  do
  {
    objc_msgSend(v0, "setObject:forKey:", objc_msgSend(NSString, "stringWithFormat:", @"CREATE TABLE IF NOT EXISTS %@ (%@);",
        v2,
        off_1E5F90888[v1 + 1]),
      v2);
    uint64_t v2 = off_1E5F90888[v1 + 2];
    v1 += 2;
  }
  while (v1 != 28);
  return v0;
}

uint64_t IMDSelectAllTableNames(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x3052000000;
  CFStringRef v8 = sub_1AFB900CC;
  CFIndex v9 = sub_1AFB900DC;
  uint64_t v10 = 0;
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFB900E8;
  v4[3] = &unk_1E5F901A0;
  void v4[4] = &v5;
  void v4[5] = a1;
  IMDRunSqlOperation((uint64_t)v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1AFB900B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB900CC(uint64_t a1, uint64_t a2)
{
}

void sub_1AFB900DC(uint64_t a1)
{
}

uint64_t sub_1AFB900E8(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB90198;
  v5[3] = &unk_1E5F90178;
  void v5[4] = *(void *)(a1 + 32);
  void v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, @"select name from sqlite_master where type = 'table'", 0, (uint64_t)v5);
  uint64_t result = IMDSqlOperationGetError(a2, *(void **)(a1 + 40));
  if (result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
  }
  return result;
}

BOOL sub_1AFB90198(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFB90244;
      v5[3] = &unk_1E5F90980;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFB90244(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v3 = IMDStringFromSqlColumn((uint64_t)&v4);
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v3];
  CFRelease(v3);
}

uint64_t IMDRowCountForTable(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v11 = xmmword_1E5F909A0;
    long long v12 = *(_OWORD *)off_1E5F909B0;
    uint64_t v13 = 98;
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"tableName", "int64_t IMDRowCountForTable(NSString *, NSError **)", IMFileLocationTrimFileName(), 98, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      int v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v15 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(void *)&long long v11 = 0;
  *((void *)&v11 + 1) = &v11;
  *(void *)&long long v12 = 0x2020000000;
  *((void *)&v12 + 1) = -1;
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"select count(*) from %@", a1);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1AFB904E0;
  v10[3] = &unk_1E5F909D0;
  uint8_t v10[4] = &v11;
  void v10[5] = v7;
  void v10[6] = a2;
  IMDRunSqlOperation((uint64_t)v10);
  CFRelease(v7);
  uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 24);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t sub_1AFB904E0(uint64_t a1, uint64_t a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFB90578;
  v6[3] = &unk_1E5F90178;
  CFStringRef v4 = *(const __CFString **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  void v6[5] = a2;
  _IMDSqlOperationRunQuery(a2, v4, 0, (uint64_t)v6);
  return IMDSqlOperationGetError(a2, *(void **)(a1 + 48));
}

BOOL sub_1AFB90578(uint64_t a1)
{
  for (BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40)); result; BOOL result = IMDSqlOperationHasRows(v4))
  {
    IMDSqlStatementColumnByIndex((sqlite3_stmt **)(*(void *)(a1 + 40) + 32), 0, (uint64_t)v5);
    uint64_t v3 = (int)IMDIntFromSqlColumn((uint64_t)v5);
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  }
  return result;
}

void sub_1AFB905E0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!*(void *)(a1 + 8))
    {
      uint64_t v1 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"c", "void IMDCreateLegacyTables(IMDSqlOperation *)", IMFileLocationTrimFileName(), 132, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
      uint64_t v2 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
      if (v2)
      {
        v2(v1);
      }
      else if (IMOSLoggingEnabled())
      {
        int v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v8 = v1;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }
      }
    }
    CSDBRecordStoreCreateTablesForClass();
    CSDBRecordStoreCreateTablesForClass();
    CSDBRecordStoreCreateTablesForClass();
  }
  else
  {
    uint64_t v3 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "void IMDCreateLegacyTables(IMDSqlOperation *)", IMFileLocationTrimFileName(), 125, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v8 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

BOOL IMDCreateTablesWithOperation(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = sub_1AFB8FF20();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v16 + 1) + 8 * i);
          _IMDSqlOperationRunQuery(a1, (CFStringRef)[v4 objectForKey:v8], 0, 0);
          if (*(void *)(a1 + 168))
          {
            uint64_t v10 = IMLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
              sub_1AFC64CA0(v8, a1);
            }
            goto LABEL_16;
          }
          if (a2)
          {
            uint64_t v9 = IMLogHandleForCategory();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              *(void *)&uint8_t buf[4] = v8;
              _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Created table (if needed) ok: %@", buf, 0xCu);
            }
          }
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_16:
    uint64_t v11 = *(void *)(a1 + 168);
    if (!v11)
    {
      sub_1AFB905E0(a1);
      uint64_t v11 = *(void *)(a1 + 168);
    }
    return v11 == 0;
  }
  else
  {
    *(_OWORD *)uint8_t buf = xmmword_1E5F90C20;
    long long v24 = *(_OWORD *)off_1E5F90C30;
    uint64_t v25 = 142;
    uint64_t v13 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "BOOL IMDCreateTablesWithOperation(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 142, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    long long v14 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v14)
    {
      v14(v13);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v21 = 138412290;
        uint64_t v22 = v13;
        _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v21, 0xCu);
      }
    }
    return 0;
  }
}

BOOL IMDDropTableWithOperation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *(_OWORD *)long long v17 = xmmword_1E5F90C48;
    long long v18 = *(_OWORD *)off_1E5F90C58;
    uint64_t v19 = 169;
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "BOOL IMDDropTableWithOperation(IMDSqlOperation *, NSString *, BOOL)", IMFileLocationTrimFileName(), 169, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    CFStringRef v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v16 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a2)
  {
    *(_OWORD *)long long v17 = xmmword_1E5F90C70;
    long long v18 = *(_OWORD *)off_1E5F90C80;
    uint64_t v19 = 170;
    uint64_t v9 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"tableName", "BOOL IMDDropTableWithOperation(IMDSqlOperation *, NSString *, BOOL)", IMFileLocationTrimFileName(), 170, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v16 = v9;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a1) {
    return 0;
  }
  _IMDSqlOperationRunQuery(a1, (CFStringRef)[NSString stringWithFormat:@"DROP TABLE IF EXISTS %@;", a2],
    0,
    0);
  if (*(void *)(a1 + 168))
  {
    long long v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64D24(a2, a1);
    }
  }
  else if (a3)
  {
    long long v14 = IMLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long v17 = 138412290;
      *(void *)&v17[4] = a2;
      _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Dropped table (if needed) ok: %@", v17, 0xCu);
    }
  }
  return *(void *)(a1 + 168) == 0;
}

BOOL IMDDropUnknownTablesWithOperation(uint64_t a1, int a2)
{
  return IMDDropTableWithOperation(a1, @"sqlite_stat1", a2);
}

uint64_t IMDDatabaseContainsTable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)IMDSelectAllTableNames(a2);
  return [v3 containsObject:a1];
}

void *sub_1AFB90EE4(void *a1)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", @"IF NOT EXISTS", &stru_1F084E970), "stringByReplacingOccurrencesOfString:withString:", @";",
                 &stru_1F084E970);
  [v1 rangeOfString:@" "];
  if (v2)
  {
    do
    {
      uint64_t v1 = (void *)[v1 stringByReplacingOccurrencesOfString:@" " withString:&stru_1F084E970];
      [v1 rangeOfString:@" "];
    }
    while (v3);
  }
  return v1;
}

uint64_t IMDConfirmTablesCreatedAsExpected(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = sub_1AFB9118C;
  v16[3] = &unk_1E5F90CC8;
  v16[4] = v2;
  v16[5] = a1;
  IMDRunSqlOperation((uint64_t)v16);
  id v3 = sub_1AFB8FF20();
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v9 = sub_1AFB90EE4((void *)[v3 objectForKey:v8]);
        if ((objc_msgSend(v9, "isEqualToString:", sub_1AFB90EE4(objc_msgSend(v2, "objectForKey:", v8))) & 1) == 0)
        {
          NSLog(&cfstr_Expected.isa, [v3 objectForKey:v8]);
          NSLog(&cfstr_Actual.isa, [v2 objectForKey:v8]);
          uint64_t v10 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
          objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "BOOL IMDConfirmTablesCreatedAsExpected(NSError **)"), @"IMDTables.m", 282, @"index check failed");
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v17 count:16];
    }
    while (v5);
  }
  return 1;
}

uint64_t sub_1AFB9118C(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB9122C;
  v5[3] = &unk_1E5F8FF78;
  void v5[4] = *(void *)(a1 + 32);
  void v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, @"SELECT name, sql FROM sqlite_master WHERE type = 'table';", 0, (uint64_t)v5);
  return IMDSqlOperationGetError(a2, *(void **)(a1 + 40));
}

BOOL sub_1AFB9122C(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v12 = 0;
      long long v13 = &v12;
      uint64_t v14 = 0x3052000000;
      long long v15 = sub_1AFB900CC;
      uint64_t v16 = sub_1AFB900DC;
      uint64_t v17 = 0;
      uint64_t v6 = 0;
      CFStringRef v7 = &v6;
      uint64_t v8 = 0x3052000000;
      uint64_t v9 = sub_1AFB900CC;
      uint64_t v10 = sub_1AFB900DC;
      uint64_t v11 = 0;
      uint64_t v4 = *(void *)(a1 + 40);
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFB913C4;
      v5[3] = &unk_1E5F90CA0;
      void v5[4] = &v12;
      void v5[5] = &v6;
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      [*(id *)(a1 + 32) setObject:v7[5] forKey:v13[5]];
      _Block_object_dispose(&v6, 8);
      _Block_object_dispose(&v12, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFB913A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB913C4(uint64_t a1, long long *a2)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v8);
  uint64_t v5 = (const char *)*((void *)a2 + 1);
  if (!v5)
  {
    uint64_t v5 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((void *)a2 + 1) = v5;
  }
  if (!strncmp(v5, "name", 0x100uLL))
  {
    CFTypeRef v6 = CFRetain(v4);
    uint64_t v7 = *(void *)(a1 + 32);
    goto LABEL_9;
  }
  if (!v5)
  {
    uint64_t v5 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((void *)a2 + 1) = v5;
  }
  if (!strncmp(v5, "sql", 0x100uLL))
  {
    CFTypeRef v6 = CFRetain(v4);
    uint64_t v7 = *(void *)(a1 + 40);
LABEL_9:
    *(void *)(*(void *)(v7 + 8) + 40) = v6;
  }
  CFRelease(v4);
}

void sub_1AFB914C4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

__CFString *IMDChatRecordCopyChatsWithHandlesOnServiceWithDisplayNameGroupIDStyleQuery(uint64_t a1, char a2, char a3, int a4, int a5)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppend(Mutable, (CFStringRef)+[IMDChatQueryStrings selectAllColumns]);
  CFStringAppend(Mutable, CFSTR(" c WHERE(c.ROWID IN("));
  if (a1 >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      CFStringAppend(Mutable, @"SELECT chat_id FROM chat_handle_join WHERE handle_id IN (SELECT ROWID FROM handle WHERE id = ?)");
      if (v11 < a1 - 1) {
        CFStringAppend(Mutable, @" INTERSECT ");
      }
      ++v11;
    }
    while (a1 != v11);
  }
  CFStringAppend(Mutable, @""));
  CFStringAppend(Mutable, @" AND c.service_name = ?");
  if (a3)
  {
    CFStringAppend(Mutable, @" AND c.display_name = ?");
    if (!a4)
    {
LABEL_8:
      if (!a5) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if (!a4)
  {
    goto LABEL_8;
  }
  CFStringAppend(Mutable, @" AND c.group_id = ?");
  if (a5) {
LABEL_9:
  }
    CFStringAppend(Mutable, @" AND c.original_group_id = ?");
LABEL_10:
  CFStringAppend(Mutable, @" AND style = ?");
  if ((a2 & 1) == 0) {
    CFStringAppend(Mutable, @" AND (SELECT COUNT(handle_id) FROM chat_handle_join WHERE chat_id = c.ROWID) = ?");
  }
  CFStringAppend(Mutable, @" "));
  return Mutable;
}

uint64_t IMDChatRecordCopyChatsFilteredUsingPredicateQuery(uint64_t a1)
{
  return [[NSString alloc] initWithFormat:@"%@ WHERE %@", +[IMDChatQueryStrings selectAllColumns](IMDChatQueryStrings, "selectAllColumns"), a1];
}

uint64_t IMDChatRecordCopySortedChatsFilteredUsingPredicateWithLimitQuery(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v3 = (__CFString *)[NSString stringWithFormat:@"WHERE %@", a1];
  }
  else {
    uint64_t v3 = &stru_1F084E970;
  }
  if ([a2 count])
  {
    uint64_t v4 = [a2 componentsJoinedByString:@", "];
    uint64_t v5 = (__CFString *)[NSString stringWithFormat:@"ORDER BY %@ ", v4];
  }
  else
  {
    uint64_t v5 = &stru_1F084E970;
  }
  return [[NSString alloc] initWithFormat:@"%@ %@ %@ LIMIT ?", +[IMDChatQueryStrings selectAllColumns](IMDChatQueryStrings, "selectAllColumns"), v3, v5];
}

void *IMDChatRecordRowIDsWithChatGUIDsQuery(void *a1)
{
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", @"SELECT rowid FROM chat WHERE guid IN (");
  if ([a1 count])
  {
    unint64_t v3 = 0;
    do
    {
      [v2 appendString:@"?"];
      if (v3 < [a1 count] - 1) {
        [v2 appendString:@", "];
      }
      ++v3;
    }
    while (v3 < [a1 count]);
  }
  [v2 appendString:@""]);
  return v2;
}

void *IMDInsertMessagesFromChatsWihGUIDsIntoRecoverableMessageJoinQuery(void *a1)
{
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", @"INSERT OR REPLACE INTO chat_recoverable_message_join (chat_id, message_id, delete_date) SELECT chat_id, message_id, message_date FROM chat_message_join WHERE message_date < ? AND chat_id IN (");
  if ([a1 count])
  {
    unint64_t v3 = 0;
    do
    {
      [v2 appendString:@"?"];
      if (v3 < [a1 count] - 1) {
        [v2 appendString:@", "];
      }
      ++v3;
    }
    while (v3 < [a1 count]);
  }
  [v2 appendString:@";"]);
  return v2;
}

void *IMDDeleteFromChatMessageJoinWhereMessageInRecoveryForChatsWithGUIDsQuery(void *a1)
{
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", @"DELETE FROM chat_message_join WHERE chat_id IN (");
  if ([a1 count])
  {
    unint64_t v3 = 0;
    do
    {
      [v2 appendString:@"?"];
      if (v3 < [a1 count] - 1) {
        [v2 appendString:@", "];
      }
      ++v3;
    }
    while (v3 < [a1 count]);
  }
  objc_msgSend(v2, "appendString:", @" AND message_id IN (SELECT message_id FROM chat_recoverable_message_join WHERE chat_id IN ("));
  if ([a1 count])
  {
    unint64_t v4 = 0;
    do
    {
      [v2 appendString:@"?"];
      if (v4 < [a1 count] - 1) {
        [v2 appendString:@", "];
      }
      ++v4;
    }
    while (v4 < [a1 count]);
  }
  [v2 appendString:@"];"));
  return v2;
}

uint64_t _IMDPerformBlockWithDelay(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64E50();
    }
  }
  if (!IMDSharedThreadedRecordStore())
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64DA8();
    }
  }
  return CSDBPerformBlockAfterDelay();
}

uint64_t sub_1AFB91B20(uint64_t a1)
{
  IMDEnsureSharedRecordStoreInitialized();
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    unint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void _IMDPerformBlock(uint64_t a1)
{
  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    uint64_t v2 = *(void (**)(uint64_t))(a1 + 16);
    v2(a1);
  }
  else
  {
    unint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64EF8();
    }
    IMDEnsureSharedRecordStoreInitialized();
  }
}

uint64_t _IMDPerformLockedMessageStoreBlock(uint64_t a1)
{
  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    IMDSharedThreadedRecordStore();
    uint64_t v2 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 16);
    return v3(a1, v2);
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC64FA0();
    }
    return IMDEnsureSharedRecordStoreInitialized();
  }
}

void _IMDPerformLockedMessageStoreBlockWithoutInitialize(uint64_t a1)
{
  if (a1)
  {
    IMDSharedThreadedRecordStore();
    uint64_t v2 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    unint64_t v3 = *(void (**)(uint64_t, uint64_t))(a1 + 16);
    v3(a1, v2);
  }
  else
  {
    unint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65048();
    }
  }
}

void _IMDPerformLockedDatabaseBlock(uint64_t a1)
{
  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    if (!IMDSharedThreadedRecordStore())
    {
      uint64_t v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC652E8();
      }
    }
    uint64_t v3 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    if (!v3)
    {
      unint64_t v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1AFC65240();
      }
    }
    uint64_t v5 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
    if (!v5)
    {
      CFTypeRef v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1AFC65198();
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, v3, v5);
  }
  else
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC650F0();
    }
    IMDEnsureSharedRecordStoreInitialized();
  }
}

uint64_t _IMDPerformLockedConnectionBlock(uint64_t a1)
{
  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    memset(v9, 0, sizeof(v9));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v9);
    if (!IMDSharedThreadedRecordStore())
    {
      uint64_t v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC656D8();
      }
    }
    uint64_t v3 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    if (!v3)
    {
      unint64_t v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1AFC65630();
      }
    }
    uint64_t v5 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
    if (!v5)
    {
      CFTypeRef v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1AFC65588();
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 16))(a1, v3, v5, *((void *)&v9[0] + 1));
    return IMDSqlOperationRelease((uint64_t)v9, 0);
  }
  else
  {
    long long v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC654E0();
    }
    return IMDEnsureSharedRecordStoreInitialized();
  }
}

uint64_t IMDBridgedRecordCopyPropertyValue(void *a1, CFIndex a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 _localCache];
  if (!v4)
  {

LABEL_11:
    if (IMDIsRunningInDatabaseServerProcess())
    {
      *(void *)&long long v14 = 0;
      *((void *)&v14 + 1) = &v14;
      long long v15 = 0x2020000000uLL;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = sub_1AFB920E0;
      v10[3] = &unk_1E5F922F8;
      id v11 = v3;
      uint64_t v12 = &v14;
      CFIndex v13 = a2;
      _IMDPerformBlock(v10, 0);
      uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 24);

      _Block_object_dispose(&v14, 8);
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_15;
  }
  CFArrayRef v5 = (const __CFArray *)v4;
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  if (v3)
  {
    [v3 _propertyDescriptorForProperty:a2];
    CFTypeRef v6 = (uint64_t (**)(const void *))v15;
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v5, a2);
  uint64_t v8 = (uint64_t)ValueAtIndex;
  if (ValueAtIndex && v6)
  {
    if (!*v6)
    {

      goto LABEL_15;
    }
    uint64_t v8 = (*v6)(ValueAtIndex);
  }

  if (!v8) {
    goto LABEL_11;
  }
LABEL_15:

  return v8;
}

void sub_1AFB920C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB920E0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _fetchUpdatedRecord];
  if (v2)
  {
    id v3 = (const void *)v2;
    [*(id *)(a1 + 32) _propertyIDForProperty:*(void *)(a1 + 48)];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

const void *IMDBridgedRecordGetPropertyValue(void *a1, CFIndex a2)
{
  id v3 = a1;
  CFArrayRef v4 = (const __CFArray *)[v3 _localCache];
  if (!v4 || (ValueAtIndex = CFArrayGetValueAtIndex(v4, a2)) == 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v11 = 0;
      uint64_t v12 = &v11;
      uint64_t v13 = 0x2020000000;
      uint64_t v14 = 0;
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      void v7[2] = sub_1AFB92264;
      v7[3] = &unk_1E5F922F8;
      id v8 = v3;
      uint64_t v9 = &v11;
      CFIndex v10 = a2;
      _IMDPerformBlock((uint64_t)v7);
      ValueAtIndex = (const void *)v12[3];

      _Block_object_dispose(&v11, 8);
    }
    else
    {
      ValueAtIndex = 0;
    }
  }

  return ValueAtIndex;
}

void sub_1AFB9224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB92264(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _fetchUpdatedRecord];
  if (v2)
  {
    id v3 = (const void *)v2;
    [*(id *)(a1 + 32) _propertyIDForProperty:*(void *)(a1 + 48)];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDBridgedRecordCopyPropertyNumberAsInteger64(void *a1, CFIndex a2)
{
  uint64_t v2 = (void *)IMDBridgedRecordCopyPropertyValue(a1, a2);
  uint64_t v3 = [v2 longLongValue];

  return v3;
}

BOOL IMDBridgedRecordGetPropertyBool(void *a1, CFIndex a2)
{
  return IMDBridgedRecordGetPropertyValue(a1, a2) != 0;
}

void IMDBridgedRecordPopulatePropertyImplementations(objc_class *a1, uint64_t a2, int a3)
{
  if (qword_1EB5ABD08 != -1) {
    dispatch_once(&qword_1EB5ABD08, &unk_1F084CCC0);
  }
  id v48 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v49 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v50 = a3;
    unint64_t v6 = 0x1E4F29000uLL;
    cls = a1;
    while (1)
    {
      uint64_t v7 = a2 + 40 * v5;
      uint64_t v9 = *(char **)v7;
      uint64_t v8 = *(void *)(v7 + 8);
      id v10 = objc_alloc_init(MEMORY[0x1E4F28E78]);
      if (v9)
      {
        char v11 = *v9;
        if (*v9)
        {
          uint64_t v12 = v9;
          do
          {
            if (v11 == 95)
            {
              char v11 = __toupper(v12[1]);
              v12 += 2;
            }
            else
            {
              ++v12;
            }
            objc_msgSend(v10, "appendFormat:", @"%c", v11);
            char v11 = *v12;
          }
          while (*v12);
        }
      }
      uint64_t v13 = (void *)[v10 copy];

      if ([v13 hasPrefix:@"is"])
      {
        uint64_t v14 = sub_1AFB928EC(v13, 0, 2u);

        uint64_t v13 = (void *)v14;
      }
      id v15 = v13;
      objc_property_t Property = class_getProperty(a1, (const char *)[v15 UTF8String]);
      if (Property) {
        break;
      }
      uint64_t v17 = [v15 stringByReplacingOccurrencesOfString:@"Guid" withString:@"GUID"];

      id v15 = v17;
      objc_property_t Property = class_getProperty(a1, (const char *)[v15 UTF8String]);
      if (Property) {
        break;
      }
      if ([v15 hasSuffix:@"Id"])
      {
        uint64_t v40 = objc_msgSend(v15, "stringByReplacingCharactersInRange:withString:", objc_msgSend(v15, "length") - 2, 2, @"ID");

        id v41 = v40;
        uint64_t v18 = class_getProperty(a1, (const char *)[v41 UTF8String]);

        if (!v18) {
          goto LABEL_35;
        }
        goto LABEL_17;
      }
LABEL_34:

LABEL_35:
      if (++v5 == v50) {
        goto LABEL_40;
      }
    }
    uint64_t v18 = Property;

LABEL_17:
    id v15 = [*(id *)(v6 + 24) stringWithUTF8String:property_getName(v18)];
    uint64_t v19 = property_copyAttributeValue(v18, "G");
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = v8;
      uint64_t v22 = [*(id *)(v6 + 24) stringWithUTF8String:v19];
      free(v20);
    }
    else
    {
      uint64_t v21 = v8;
      uint64_t v22 = [*(id *)(v6 + 24) stringWithUTF8String:property_getName(v18)];
    }
    uint64_t v23 = property_copyAttributeValue(v18, "S");
    if (v23)
    {
      long long v24 = v23;
      uint64_t v25 = [NSString stringWithUTF8String:v23];
      free(v24);
    }
    else
    {
      uint64_t v26 = [NSString stringWithUTF8String:property_getName(v18)];
      uint64_t v27 = NSString;
      uint64_t v28 = sub_1AFB928EC(v26, 1, 0);
      uint64_t v25 = [v27 stringWithFormat:@"set%@", v28];
    }
    uint64_t v29 = [NSString stringWithUTF8String:v9];
    [v49 setObject:v29 forKeyedSubscript:v15];

    char v30 = property_copyAttributeValue(v18, "T");
    long long v31 = v30;
    if (v21 == 3)
    {
      if (!strcmp(v30, "@\"NSDate\"")) {
        uint64_t v32 = 3;
      }
      else {
        uint64_t v32 = 2;
      }
    }
    else if (v21)
    {
      uint64_t v32 = 4;
    }
    else
    {
      uint64_t v32 = strcmp(v30, "@\"NSDate\"") == 0;
    }
    free(v31);
    __int16 v33 = NSSelectorFromString(v22);
    if (class_addMethod(cls, v33, (IMP)*(&off_1F084CAC0 + 4 * v32), (const char *)*(&off_1F084CAC0 + 4 * v32 + 1)))
    {
      uint64_t v34 = [MEMORY[0x1E4F28ED0] numberWithInt:v5];
      [v48 setObject:v34 forKeyedSubscript:v22];

      if ((v32 | 2) == 3)
      {
        uint64_t v35 = NSString;
        char v36 = sub_1AFB928EC(v15, 1, 0);
        uint64_t v37 = [v35 stringWithFormat:@"raw%@", v36];

        uint64_t v38 = NSSelectorFromString(v37);
        class_addMethod(cls, v38, (IMP)*(&off_1F084CAC0 + 8 * (unint64_t)(v32 == 3)), (const char *)*(&off_1F084CAC0 + 8 * (unint64_t)(v32 == 3) + 1));
        uint64_t v39 = [MEMORY[0x1E4F28ED0] numberWithInt:v5];
        [v48 setObject:v39 forKeyedSubscript:v37];
      }
    }

    a1 = cls;
    unint64_t v6 = 0x1E4F29000;
    goto LABEL_34;
  }
LABEL_40:
  pthread_rwlock_wrlock(&stru_1EB5AB840);
  uint64_t v42 = (void *)[v48 copy];
  uint64_t v43 = (void *)qword_1EB5AB908;
  uint64_t v44 = NSStringFromClass(a1);
  [v43 setObject:v42 forKeyedSubscript:v44];

  v45 = (void *)[v49 copy];
  uint64_t v46 = (void *)qword_1EB5AB910;
  __int16 v47 = NSStringFromClass(a1);
  [v46 setObject:v45 forKeyedSubscript:v47];

  pthread_rwlock_unlock(&stru_1EB5AB840);
}

id sub_1AFB928EC(void *a1, int a2, unsigned int a3)
{
  id v5 = a1;
  if ([v5 length])
  {
    id v6 = v5;
    __darwin_ct_rune_t v7 = *(char *)([v6 UTF8String] + a3);
    if (a2) {
      char v8 = __toupper(v7);
    }
    else {
      char v8 = __tolower(v7);
    }
    id v10 = objc_msgSend(NSString, "stringWithFormat:", @"%c", v8);
    objc_msgSend(v6, "stringByReplacingCharactersInRange:withString:", 0, a3 + 1, v10);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v9 = v5;
  }

  return v9;
}

id IMDBridgedRecordGetPropertyKeyPathToColumnsMap(objc_class *a1)
{
  pthread_rwlock_rdlock(&stru_1EB5AB840);
  uint64_t v2 = (void *)qword_1EB5AB910;
  uint64_t v3 = NSStringFromClass(a1);
  CFArrayRef v4 = [v2 objectForKeyedSubscript:v3];

  pthread_rwlock_unlock(&stru_1EB5AB840);
  return v4;
}

void sub_1AFB92A40()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v1 = (void *)qword_1EB5AB910;
  qword_1EB5AB910 = (uint64_t)v0;

  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v3 = (void *)qword_1EB5AB908;
  qword_1EB5AB908 = (uint64_t)v2;
}

const void *sub_1AFB92A9C(void *a1, const char *a2)
{
  id v3 = a1;
  int v4 = sub_1AFB92C14((uint64_t)v3, a2);
  PropertyValue = IMDBridgedRecordGetPropertyValue(v3, v4);

  return PropertyValue;
}

uint64_t sub_1AFB92AE4(void *a1, const char *a2)
{
  id v2 = (void *)MEMORY[0x1E4F1C9C8];
  double v3 = (double)(uint64_t)sub_1AFB92A9C(a1, a2);
  return objc_msgSend(v2, "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", v3);
}

uint64_t sub_1AFB92B24(void *a1, const char *a2)
{
  id v3 = a1;
  int v4 = sub_1AFB92C14((uint64_t)v3, a2);
  id v5 = (void *)IMDBridgedRecordCopyPropertyValue(v3, v4);

  uint64_t v6 = [v5 longLongValue];
  return v6;
}

uint64_t sub_1AFB92B7C(void *a1, const char *a2)
{
  id v2 = (void *)MEMORY[0x1E4F1C9C8];
  double v3 = (double)sub_1AFB92B24(a1, a2);
  return objc_msgSend(v2, "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", v3);
}

id sub_1AFB92BBC(void *a1, const char *a2)
{
  id v3 = a1;
  int v4 = sub_1AFB92C14((uint64_t)v3, a2);
  id v5 = (void *)IMDBridgedRecordCopyPropertyValue(v3, v4);

  return v5;
}

uint64_t sub_1AFB92C14(uint64_t a1, const char *a2)
{
  id v3 = (objc_class *)objc_opt_class();
  int v4 = NSStringFromClass(v3);
  pthread_rwlock_rdlock(&stru_1EB5AB840);
  id v5 = [(id)qword_1EB5AB908 objectForKeyedSubscript:v4];
  pthread_rwlock_unlock(&stru_1EB5AB840);
  uint64_t v6 = NSStringFromSelector(a2);
  __darwin_ct_rune_t v7 = [v5 objectForKeyedSubscript:v6];

  uint64_t v8 = [v7 intValue];
  return v8;
}

void sub_1AFB92EB8()
{
  v8[10] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F6CD38];
  v7[0] = @"rowID";
  v7[1] = v0;
  v8[0] = @"ROWID";
  v8[1] = @"guid";
  uint64_t v1 = *MEMORY[0x1E4F6CD40];
  void v7[2] = *MEMORY[0x1E4F6CCF0];
  v7[3] = v1;
  void v8[2] = @"chat_identifier";
  v8[3] = @"group_id";
  uint64_t v2 = *MEMORY[0x1E4F6CD20];
  void v7[4] = *MEMORY[0x1E4F6CE40];
  void v7[5] = v2;
  void v8[4] = @"service_name";
  void v8[5] = @"display_name";
  uint64_t v3 = *MEMORY[0x1E4F6CD18];
  void v7[6] = *MEMORY[0x1E4F6CD78];
  v7[7] = v3;
  void v8[6] = @"is_filtered";
  v8[7] = @"ck_sync_state";
  uint64_t v4 = *MEMORY[0x1E4F6CD68];
  v7[8] = *MEMORY[0x1E4F6CD80];
  _OWORD v7[9] = v4;
  v8[8] = @"is_recovered";
  v8[9] = @"is_deleting_incoming_messages";
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:10];
  uint64_t v6 = (void *)qword_1EB5ABA20;
  qword_1EB5ABA20 = v5;
}

void sub_1AFB93070()
{
  uint64_t v0 = objc_alloc_init(IMExtensionNotificationManager);
  uint64_t v1 = (void *)qword_1EB5ABAD8;
  qword_1EB5ABAD8 = (uint64_t)v0;
}

void sub_1AFB93764()
{
  uint64_t v0 = dispatch_queue_create("com.apple.IMDPersistenceIPCQueue", 0);
  qword_1EB5ABF20 = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t sub_1AFB937C0()
{
  pthread_mutex_lock(&stru_1EB5AB978);
  if (qword_1EB5ABF18)
  {
    xpc_connection_cancel((xpc_connection_t)qword_1EB5ABF18);
    xpc_release((xpc_object_t)qword_1EB5ABF18);
    qword_1EB5ABF18 = 0;
  }
  return pthread_mutex_unlock(&stru_1EB5AB978);
}

uint64_t IMDSqlOperationInvalidateCaches(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1AFC658D0();
    }
  }
  if (!IMDSharedThreadedRecordStore())
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65828();
    }
  }
  if (!CSDBRecordStoreRefFromThreadedRecordStoreRef())
  {
    uint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65780();
    }
  }
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void IMDSqlOperationUpdateLastDeleteSequenceNumber(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a1 || !*(void *)(a1 + 8))
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65A24();
    }
  }
  if (!IMDSharedThreadedRecordStore())
  {
    uint64_t v3 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"IMDSharedThreadedRecordStore()", "void IMDSqlOperationUpdateLastDeleteSequenceNumber(IMDSqlOperation *)", IMFileLocationTrimFileName(), 48, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v11 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  IMDSharedThreadedRecordStore();
  if (!CSDBRecordStoreRefFromThreadedRecordStoreRef())
  {
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"CSDBRecordStoreRefFromThreadedRecordStoreRef(IMDSharedThreadedRecordStore())", "void IMDSqlOperationUpdateLastDeleteSequenceNumber(IMDSqlOperation *)", IMFileLocationTrimFileName(), 49, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    __darwin_ct_rune_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v11 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_22;
    }
    id v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65978();
    }
    if (*(void *)(a1 + 8))
    {
LABEL_22:
      CSDBSqliteConnectionIntegerForProperty();
      CSDBSqliteConnectionSetIntegerForProperty();
      _IMDSMSRecordStoreUpdateLastDeleteSequenceNumberUnlocked();
    }
  }
}

void IMDSqlOperationInitWithThreadedMessageStore(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v3 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"messageStore", "IMDSqlOperation IMDSqlOperationInitWithThreadedMessageStore(CSDBThreadedRecordStoreRef)", IMFileLocationTrimFileName(), 110, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v8 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v6 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
  IMDSqlOperationInitWithCSDBDatabase(v6, a2);
}

void IMDSqlOperationInitAndCreateIfNeededWithPath(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"path", "IMDSqlOperation IMDSqlOperationInitAndCreateIfNeededWithPath(NSString *)", IMFileLocationTrimFileName(), 115, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v9 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  __darwin_ct_rune_t v7 = (void *)IMDCreateThreadedRecordStoreWithPath(a1);
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  IMDSqlOperationInitWithThreadedMessageStore((uint64_t)v7, (uint64_t)a2);
  IMDSqlOperationSetThreadedMessageStore((uint64_t)a2, v7);
}

void IMDSqlOperationSetThreadedMessageStore(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(void *)(a1 + 24) = 0;
    }
    if (a2) {
      *(void *)(a1 + 24) = a2;
    }
  }
  else
  {
    uint64_t v5 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "void IMDSqlOperationSetThreadedMessageStore(IMDSqlOperation *, CSDBThreadedRecordStoreRef)", IMFileLocationTrimFileName(), 154, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v6 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      __darwin_ct_rune_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v9 = v5;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

void IMDSqlOperationInitWithPath(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    v12[0] = xmmword_1E5F92868;
    v12[1] = *(_OWORD *)off_1E5F92878;
    uint64_t v13 = 128;
    uint64_t v5 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"path", "IMDSqlOperation IMDSqlOperationInitWithPath(NSString *)", IMFileLocationTrimFileName(), 128, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v6 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      __darwin_ct_rune_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v15 = v5;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    LOBYTE(v12[0]) = 0;
    goto LABEL_10;
  }
  LOBYTE(v12[0]) = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", a1, v12) & 1) == 0)
  {
LABEL_10:
    a2[9] = 0u;
    a2[10] = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    id v8 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v9 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v10 = [NSString stringWithFormat:@"Database not found at %@", a1];
    uint64_t v11 = [v9 dictionaryWithObject:v10 forKey:*MEMORY[0x1E4F28568]];
    uint64_t v4 = (void *)[v8 initWithDomain:*MEMORY[0x1E4F281F8] code:4 userInfo:v11];
    IMDSqlOperationSetError((uint64_t)a2, v4);
    goto LABEL_11;
  }
  uint64_t v4 = (void *)IMDCreateThreadedRecordStoreWithPath(a1);
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  IMDSqlOperationInitWithThreadedMessageStore((uint64_t)v4, (uint64_t)a2);
  IMDSqlOperationSetThreadedMessageStore((uint64_t)a2, v4);
LABEL_11:
}

uint64_t sub_1AFB946FC(uint64_t a1)
{
  return dword_1EB5ABD88[a1];
}

uint64_t IMDMessageRecordGetTypeID()
{
  return qword_1EB5ABEF0;
}

uint64_t sub_1AFB94744()
{
  qword_1EB5ABEF0 = _CFRuntimeRegisterClass();
  uint64_t v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  uint64_t v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5F92A20, 90);
  uint64_t v2 = 0;
  uint64_t v3 = &off_1E5F92A20;
  do
  {
    v3 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_1EB5ABD88[v2++] = result;
  }
  while (v2 != 90);
  return result;
}

const void *IMDMessageRecordCreateFromRecordIDWithLock(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  pthread_once(&stru_1EB5AB958, (void (*)(void))sub_1AFB94744);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  uint64_t v6 = Instance;
  if (Instance)
  {
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    *((void *)Instance + 2) = a2;
    if (a3)
    {
      __darwin_ct_rune_t v7 = (const void *)IMDMessageRecordCopyMessageRecord(a2);
      if (v7)
      {
LABEL_4:
        CFRelease(v7);
        return v6;
      }
    }
    else
    {
      __darwin_ct_rune_t v7 = (const void *)IMDMessageRecordCopyMessageRecordUnlocked(a2);
      if (v7) {
        goto LABEL_4;
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v10 = 134217984;
        uint64_t v11 = a2;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Error IMDMessageRecordCreateFromRecordIDWithLock could not create message for id %lld", (uint8_t *)&v10, 0xCu);
      }
    }
    CFRelease(v6);
    return 0;
  }
  return v6;
}

_OWORD *IMDMessageRecordCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    pthread_once(&stru_1EB5AB958, (void (*)(void))sub_1AFB94744);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    return sub_1AFB94DF0(Instance, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55);
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v67 = &v66;
    uint64_t v68 = 0x2020000000;
    uint64_t v69 = 0;
    v65[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v65[1] = (void (*)(void))3221225472;
    v65[2] = (void (*)(void))sub_1AFB953D4;
    v65[3] = (void (*)(void))&unk_1E5F8D580;
    v65[4] = (void (*)(void))&v66;
    __syncXPCIMDMessageRecordCreate_IPCAction(v65, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
      a2,
      a21,
      a23,
      a24,
      a25,
      a22,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55);
    uint64_t v57 = v67[3];
    _Block_object_dispose(&v66, 8);
    return (_OWORD *)v57;
  }
}

void sub_1AFB94DD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

_OWORD *sub_1AFB94DF0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  uint64_t v89 = a5;
  uint64_t valuePtr = a4;
  uint64_t v87 = a7;
  uint64_t v88 = a6;
  int v59 = IMDIsRunningInDatabaseServerProcess();
  v60 = 0;
  if (a1 && v59)
  {
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    if (IMOSLoggingEnabled())
    {
      int64_t v61 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v61, OS_LOG_TYPE_DEBUG, "_IMDMessageRecordCreate()", buf, 2u);
      }
    }
    IMDEnsureSharedRecordStoreInitialized();
    int64_t v62 = (const void *)CSDBRecordCreate();
    if (v62)
    {
      unint64_t v63 = [a11 unsignedLongLongValue];
      unint64_t v64 = v63;
      uint64_t v65 = (v63 >> 13) & 1;
      if ((v63 >> 19)) {
        uint64_t v65 = 0;
      }
      uint64_t v77 = v65;
      uint64_t v78 = (v63 >> 19) & 1;
      if (v78) {
        uint64_t v66 = 0;
      }
      else {
        uint64_t v66 = (v63 >> 12) & 1;
      }
      uint64_t v76 = v66;
      CFNumberRef cf = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      CFNumberRef v84 = CFNumberCreate(0, kCFNumberSInt64Type, &v89);
      CFNumberRef v83 = CFNumberCreate(0, kCFNumberSInt64Type, &v88);
      CFNumberRef v82 = CFNumberCreate(0, kCFNumberSInt64Type, &v87);
      CFNumberRef v81 = CFNumberCreate(0, kCFNumberSInt64Type, &a35);
      CFNumberRef v67 = CFNumberCreate(0, kCFNumberSInt64Type, &a44);
      CFNumberRef v80 = CFNumberCreate(0, kCFNumberSInt64Type, &a50);
      CFNumberRef v79 = CFNumberCreate(0, kCFNumberSInt64Type, &a49);
      uint64_t v86 = 0;
      CFNumberRef v68 = CFNumberCreate(0, kCFNumberSInt64Type, &v86);
      uint64_t v69 = 0;
      uint64_t v98 = a3;
      uint64_t v102 = a17;
      uint64_t v104 = a13;
      uint64_t v105 = 10;
      uint64_t v106 = a9;
      uint64_t v107 = a14;
      uint64_t v108 = a15;
      uint64_t v109 = a16;
      uint64_t v110 = a8;
      *(void *)uint8_t buf = a12;
      uint64_t v101 = 0;
      uint64_t v103 = 0;
      CFNumberRef v113 = v83;
      uint64_t v114 = v76;
      uint64x2_t v70 = (uint64x2_t)vdupq_n_s64(v64);
      int8x16_t v71 = (int8x16_t)vdupq_n_s64(1uLL);
      uint64_t v115 = 1;
      int8x16_t v116 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77BB0), v71);
      int8x16_t v117 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77BC0), v71);
      int8x16_t v118 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77BD0), v71);
      uint64_t v119 = v77;
      uint64_t v122 = (v64 >> 18) & 1;
      uint64_t v123 = v78;
      int8x16_t v120 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77BE0), v71);
      int8x16_t v121 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77BF0), v71);
      uint64_t v126 = 0;
      uint64_t v127 = (v64 >> 20) & 1;
      if (a28) {
        uint64_t v72 = 0;
      }
      else {
        uint64_t v72 = a2;
      }
      uint64_t v131 = v72;
      uint64_t v133 = a22;
      uint64_t v134 = a23;
      uint64_t v135 = a24;
      uint64_t v136 = a25;
      uint64_t v137 = (v64 >> 24) & 1;
      uint64_t v138 = a26;
      uint64_t v139 = a27;
      uint64_t v140 = (v64 >> 25) & 1;
      uint64_t v141 = a28;
      uint64_t v142 = a29;
      uint64_t v143 = a32;
      uint64_t v144 = a33;
      uint64_t v145 = a34;
      uint64_t v146 = a30;
      uint64_t v147 = a31;
      uint64_t v149 = a36;
      uint64_t v150 = a37;
      uint64_t v151 = a38;
      uint64_t v152 = a40;
      uint64_t v153 = a42;
      uint64_t v154 = (v64 >> 26) & 1;
      int8x16_t v129 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77C00), v71);
      uint64_t v155 = a43;
      CFNumberRef v156 = v67;
      uint64_t v158 = a45;
      uint64_t v159 = a46;
      int8x16_t v157 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77C10), v71);
      uint64_t v160 = a47;
      uint64_t v161 = a48;
      CFNumberRef v163 = v68;
      int8x16_t v162 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77C20), v71);
      uint64_t v165 = (v64 >> 36) & 1;
      uint64_t v99 = a10;
      uint64_t v100 = 0;
      CFNumberRef v111 = cf;
      CFNumberRef v112 = v84;
      uint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v128 = 0;
      CFNumberRef v130 = v82;
      uint64_t v132 = 0;
      CFNumberRef v148 = v81;
      CFNumberRef v164 = v80;
      CFNumberRef v166 = v79;
      int8x16_t v167 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77C30), v71);
      uint64_t v168 = (v64 >> 38) & 1;
      uint64_t v169 = a51;
      uint64_t v170 = (v64 >> 37) & 1;
      uint64_t v171 = a52;
      uint64_t v172 = a53;
      int8x16_t v173 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1AFC77C40), v71);
      uint64_t v174 = a54;
      uint64_t v175 = a55;
      uint64_t v176 = (v64 >> 43) & 1;
      do
      {
        CSDBRecordSetProperty();
        v69 += 8;
      }
      while (v69 != 720);
      if (IMDMessageRecordAddMessageRecord((uint64_t)v62))
      {
        *((void *)a1 + 2) = (int)CSDBRecordGetID();
        if (IMOSLoggingEnabled())
        {
          uint64_t v73 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v74 = *((void *)a1 + 2);
            *(_DWORD *)uint64_t v91 = 138412802;
            uint64_t v92 = a1;
            __int16 v93 = 2048;
            uint64_t v94 = v74;
            __int16 v95 = 2112;
            uint64_t v96 = a12;
            _os_log_impl(&dword_1AFB53000, v73, OS_LOG_TYPE_DEBUG, "New message record [%@] has ID [%lld]  [%@].", v91, 0x20u);
          }
        }
        v60 = a1;
      }
      else
      {
        CFRelease(a1);
        v60 = 0;
      }
      CFRelease(v62);
      if (cf) {
        CFRelease(cf);
      }
      if (v83) {
        CFRelease(v83);
      }
      if (v84) {
        CFRelease(v84);
      }
      if (v82) {
        CFRelease(v82);
      }
      if (v81) {
        CFRelease(v81);
      }
      if (v80) {
        CFRelease(v80);
      }
      if (v79) {
        CFRelease(v79);
      }
    }
    else
    {
      CFRelease(a1);
      return 0;
    }
  }
  return v60;
}

uint64_t sub_1AFB953D4(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDCopyIMDMessageRecordFromXPCObjectClient(void *a1)
{
  if (xpc_dictionary_get_count(a1) < 3) {
    return 0;
  }
  pthread_once(&stru_1EB5AB958, (void (*)(void))sub_1AFB94744);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v2 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    if (!*(void *)(Instance + 24))
    {
      uint64_t v4 = 90;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 90, 0);
      do
      {
        CFArrayAppendValue(Mutable, 0);
        --v4;
      }
      while (v4);
      int64_t int64 = xpc_dictionary_get_int64(a1, "flags");
      uint64_t v7 = 0;
      id v8 = &qword_1E5F92A30;
      while (2)
      {
        uint64_t v9 = *v8;
        switch(*(v8 - 1))
        {
          case 0:
            uint64_t v10 = sub_1AFB9B298(v7);
            if (v10)
            {
              unint64_t v11 = (v10 & int64) != 0;
              goto LABEL_17;
            }
            uint64_t v12 = IMGetXPCIntFromDictionary();
            goto LABEL_16;
          case 1:
            uint64_t v12 = IMGetXPCStringFromDictionary();
            goto LABEL_16;
          case 2:
            uint64_t v12 = IMGetXPCDataFromDictionary();
LABEL_16:
            unint64_t v11 = v12;
            goto LABEL_17;
          case 3:
            uint64_t valuePtr = 0;
            uint64_t valuePtr = IMGetXPCIntFromDictionary();
            unint64_t v11 = (unint64_t)CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
            uint64_t v13 = (const void *)v11;
            goto LABEL_18;
          default:
            unint64_t v11 = 0;
LABEL_17:
            uint64_t v13 = 0;
LABEL_18:
            if (CFArrayGetValueAtIndex(Mutable, v7))
            {
              if (v9)
              {
                uint64_t v14 = *(void (**)(void))(v9 + 8);
                if (v14) {
                  v14();
                }
              }
            }
            if (v11 && v9 && *(void *)v9) {
              unint64_t v11 = (*(uint64_t (**)(unint64_t))v9)(v11);
            }
            CFArraySetValueAtIndex(Mutable, v7, (const void *)v11);
            if (v13) {
              CFRelease(v13);
            }
            ++v7;
            v8 += 5;
            if (v7 != 90) {
              continue;
            }
            *(void *)(v2 + 24) = Mutable;
            xpc_object_t value = xpc_dictionary_get_value(a1, "attachments_cache");
            if (value)
            {
              uint64_t v16 = value;
              if (!*(void *)(v2 + 48)) {
                *(void *)(v2 + 48) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              }
              v23[0] = MEMORY[0x1E4F143A8];
              v23[1] = 3221225472;
              v23[2] = sub_1AFB9BD1C;
              v23[3] = &unk_1E5F93D30;
              v23[4] = v2;
              xpc_array_apply(v16, v23);
            }
            xpc_object_t v17 = xpc_dictionary_get_value(a1, "handle_cache");
            if (v17) {
              *(void *)(v2 + 32) = _IMDCopyIMDHandleRecordFromXPCObjectClient(v17);
            }
            xpc_object_t v18 = xpc_dictionary_get_value(a1, "other_handle_cache");
            if (v18) {
              *(void *)(v2 + 40) = _IMDCopyIMDHandleRecordFromXPCObjectClient(v18);
            }
            break;
        }
        break;
      }
    }
    xpc_object_t v19 = xpc_dictionary_get_value(a1, "threadCountsByPart");
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), 0);
    uint64_t valuePtr = 0;
    p_uint64_t valuePtr = &valuePtr;
    uint64_t v27 = 0x3052000000;
    uint64_t v28 = sub_1AFB9BD84;
    uint64_t v29 = sub_1AFB9BD94;
    uint64_t v30 = 0;
    if (v19 && ValueAtIndex)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = sub_1AFB9BDA0;
      applier[3] = &unk_1E5F93D58;
      applier[4] = &valuePtr;
      xpc_dictionary_apply(v19, applier);
      uint64_t v21 = *(const void **)(v2 + 56);
      if (v21)
      {
        CFRelease(v21);
        *(void *)(v2 + 56) = 0;
      }
      *(void *)(v2 + 56) = p_valuePtr[5];
    }
    _Block_object_dispose(&valuePtr, 8);
    *(void *)(v2 + 16) = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

void sub_1AFB957E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *IMDMessageRecordCreateFromRecordID(uint64_t a1, uint64_t a2)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    return IMDMessageRecordCreateFromRecordIDWithLock(a1, a2, 1);
  }
  else
  {
    return (const void *)IMDMessageRecordCopyMessageForRowID(a2);
  }
}

const void *IMDMessageRecordCreateFromRecordIDUnlocked(uint64_t a1, uint64_t a2)
{
  return IMDMessageRecordCreateFromRecordIDWithLock(a1, a2, 0);
}

uint64_t IMDMessageRecordGetIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 16);
  }
  uint64_t v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    uint64_t v4 = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL message record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDMessageRecordGetRecordIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return (int)CSDBRecordGetID();
  }
  uint64_t v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    uint64_t v4 = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDMessageRecordCopyGUID(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65C20(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1AFB95B20;
    v14[3] = &unk_1E5F90178;
    v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFB95B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB95B20(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordCopyGUIDUnlocked(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65C98(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1AFB95CCC;
    v14[3] = &unk_1E5F90178;
    v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFB95CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB95CCC(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordCopyText(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65D10(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1AFB95E78;
    v14[3] = &unk_1E5F90178;
    v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, 1);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFB95E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB95E78(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetItemType(uint64_t a1, int a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = -1;
  if (!a1)
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65D88(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 24))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1AFB9602C;
    v13[3] = &unk_1E5F90178;
    v13[4] = &v14;
    v13[5] = a1;
    if (a2) {
      _IMDPerformBlock((uint64_t)v13);
    }
    else {
      sub_1AFB9602C((uint64_t)v13);
    }
LABEL_11:
    uint64_t v3 = v15[3];
    goto LABEL_12;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 40);
  uint64_t v3 = (uint64_t)ValueAtIndex;
  if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
    uint64_t v3 = ((uint64_t (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
  }
LABEL_12:
  _Block_object_dispose(&v14, 8);
  return v3;
}

void sub_1AFB9600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9602C(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetDate(uint64_t a1, int a2)
{
  uint64_t v18 = 0;
  xpc_object_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = -1;
  if (a1)
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 24);
    if (v4
      && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 14), (CFNumberRef v6 = ValueAtIndex) != 0)
      && (!*MEMORY[0x1E4F5D030]
       || (CFNumberRef v6 = (const __CFNumber *)((uint64_t (*)(const __CFNumber *))*MEMORY[0x1E4F5D030])(ValueAtIndex)) != 0))
    {
      CFNumberGetValue(v6, kCFNumberSInt64Type, v19 + 3);
      CFRelease(v6);
    }
    else
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = sub_1AFB9620C;
      v17[3] = &unk_1E5F90178;
      v17[4] = &v18;
      v17[5] = a1;
      if (a2) {
        _IMDPerformBlock((uint64_t)v17);
      }
      else {
        sub_1AFB9620C((uint64_t)v17);
      }
    }
  }
  else
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65E00(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  uint64_t v15 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v15;
}

void sub_1AFB961EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9620C(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    CFNumberRef v4 = (const __CFNumber *)CSDBRecordCopyProperty();
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFNumberGetValue(v4, kCFNumberSInt64Type, (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetScheduleType(uint64_t a1, int a2)
{
  uint64_t v18 = 0;
  xpc_object_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = -1;
  if (a1)
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 24);
    if (v4
      && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 87), (CFNumberRef v6 = ValueAtIndex) != 0)
      && (!*MEMORY[0x1E4F5D038]
       || (CFNumberRef v6 = (const __CFNumber *)((uint64_t (*)(const __CFNumber *))*MEMORY[0x1E4F5D038])(ValueAtIndex)) != 0))
    {
      CFNumberGetValue(v6, kCFNumberSInt64Type, v19 + 3);
      CFRelease(v6);
    }
    else
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = sub_1AFB96410;
      v17[3] = &unk_1E5F90178;
      v17[4] = &v18;
      v17[5] = a1;
      if (a2) {
        _IMDPerformBlock((uint64_t)v17);
      }
      else {
        sub_1AFB96410((uint64_t)v17);
      }
    }
  }
  else
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65E78(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  uint64_t v15 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v15;
}

void sub_1AFB963F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB96410(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetScheduleState(uint64_t a1, int a2)
{
  uint64_t v18 = 0;
  xpc_object_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = -1;
  if (a1)
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 24);
    if (v4
      && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 88), (CFNumberRef v6 = ValueAtIndex) != 0)
      && (!*MEMORY[0x1E4F5D038]
       || (CFNumberRef v6 = (const __CFNumber *)((uint64_t (*)(const __CFNumber *))*MEMORY[0x1E4F5D038])(ValueAtIndex)) != 0))
    {
      CFNumberGetValue(v6, kCFNumberSInt64Type, v19 + 3);
      CFRelease(v6);
    }
    else
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = sub_1AFB965F0;
      v17[3] = &unk_1E5F90178;
      v17[4] = &v18;
      v17[5] = a1;
      if (a2) {
        _IMDPerformBlock((uint64_t)v17);
      }
      else {
        sub_1AFB965F0((uint64_t)v17);
      }
    }
  }
  else
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65EF0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  uint64_t v15 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v15;
}

void sub_1AFB965D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB965F0(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordWasDeduplicated(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 36);
      unsigned __int8 v2 = ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        return ((unsigned __int8 (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      char v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFB9678C;
      v12[3] = &unk_1E5F90178;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      unsigned __int8 v2 = *((unsigned char *)v14 + 24);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    uint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65F68(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFB96774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9678C(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

void IMDMessageRecordSetWasDeduplicated(uint64_t a1, unsigned __int8 a2)
{
  if (a1)
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1AFB968AC;
    v4[3] = &unk_1E5F928B8;
    void v4[4] = a1;
    unsigned __int8 v5 = a2;
    _IMDPerformBlock((uint64_t)v4);
  }
  else
  {
    uint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC65FDC(a2, v3);
    }
  }
}

void sub_1AFB968AC(uint64_t a1)
{
  uint64_t v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void *IMDMessageRecordCopyOtherHandle(const __CFArray **a1)
{
  return sub_1AFB96918(a1, 1);
}

void *sub_1AFB96918(const __CFArray **a1, int a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v15 = 0;
    char v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = -1;
    CFArrayRef v3 = a1[3];
    if (v3)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 41);
      uint64_t v5 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        uint64_t v5 = ((uint64_t (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F143A8];
      uint64_t v10 = 3221225472;
      uint64_t v11 = (uint64_t)sub_1AFB9BB48;
      uint64_t v12 = &unk_1E5F90178;
      uint64_t v13 = &v15;
      uint64_t v14 = v2;
      if (a2) {
        _IMDPerformBlock((uint64_t)&v9);
      }
      else {
        sub_1AFB9BB48((uint64_t)&v9);
      }
      uint64_t v5 = v16[3];
    }
    _Block_object_dispose(&v15, 8);
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t)&v9;
    uint64_t v11 = 0x2020000000;
    uint64_t v12 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v2 = (void *)IMDHandleRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], v5);
      *(void *)(v10 + 24) = v2;
    }
    else
    {
      uint64_t v6 = (const void *)v2[5];
      if (v6)
      {
        uint64_t v2 = CFRetain(v6);
      }
      else
      {
        v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v8[1] = (void (*)(void))3221225472;
        void v8[2] = (void (*)(void))sub_1AFB9BB14;
        v8[3] = (void (*)(void))&unk_1E5F8D580;
        void v8[4] = (void (*)(void))&v9;
        __syncXPCIMDMessageRecordCopyOtherHandle_IPCAction(v8, v2[2]);
        uint64_t v2 = *(void **)(v10 + 24);
      }
    }
    _Block_object_dispose(&v9, 8);
  }
  return v2;
}

void sub_1AFB96AD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void *IMDMessageRecordCopyHandle(const __CFArray **a1)
{
  return sub_1AFB96B08(a1, 1);
}

void *sub_1AFB96B08(const __CFArray **a1, int a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v15 = 0;
    char v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = -1;
    CFArrayRef v3 = a1[3];
    if (v3)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 4);
      uint64_t v5 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        uint64_t v5 = ((uint64_t (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F143A8];
      uint64_t v10 = 3221225472;
      uint64_t v11 = (uint64_t)sub_1AFB9BBE8;
      uint64_t v12 = &unk_1E5F90178;
      uint64_t v13 = &v15;
      uint64_t v14 = v2;
      if (a2) {
        _IMDPerformBlock((uint64_t)&v9);
      }
      else {
        sub_1AFB9BBE8((uint64_t)&v9);
      }
      uint64_t v5 = v16[3];
    }
    _Block_object_dispose(&v15, 8);
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t)&v9;
    uint64_t v11 = 0x2020000000;
    uint64_t v12 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v2 = (void *)IMDHandleRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], v5);
      *(void *)(v10 + 24) = v2;
    }
    else
    {
      uint64_t v6 = (const void *)v2[4];
      if (v6)
      {
        uint64_t v2 = CFRetain(v6);
      }
      else
      {
        v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v8[1] = (void (*)(void))3221225472;
        void v8[2] = (void (*)(void))sub_1AFB9BBB4;
        v8[3] = (void (*)(void))&unk_1E5F8D580;
        void v8[4] = (void (*)(void))&v9;
        __syncXPCIMDMessageRecordCopyHandle_IPCAction(v8, v2[2]);
        uint64_t v2 = *(void **)(v10 + 24);
      }
    }
    _Block_object_dispose(&v9, 8);
  }
  return v2;
}

void sub_1AFB96CC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyChats(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t Identifier = IMDMessageRecordGetIdentifier(a1);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1AFB96E40;
    v7[3] = &unk_1E5F900E0;
    void v7[4] = &v8;
    void v7[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT chat_id FROM chat_message_join WHERE message_id = ?;",
      (uint64_t)v7);
  }
  else
  {
    int64_t v3 = IMDMessageRecordGetIdentifier(a1);
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFB96F1C;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyChats_IPCAction(v6, v3);
  }
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1AFB96E1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB96E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      }
      int v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      uint64_t v10 = IMDChatRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

xpc_object_t sub_1AFB96F1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB96FB0;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB96FB0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    uint64_t v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyChatsForMessageIdentifier(int64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFB97184;
    v5[3] = &unk_1E5F900E0;
    void v5[4] = &v6;
    void v5[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT chat_id FROM chat_message_join WHERE message_id = ?;",
      (uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1AFB97260;
    v4[3] = (void (*)(void))&unk_1E5F8D580;
    void v4[4] = (void (*)(void))&v6;
    __syncXPCIMDMessageRecordCopyChats_IPCAction(v4, a1);
  }
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1AFB97168(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFB97184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      }
      int v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      uint64_t v10 = IMDChatRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

xpc_object_t sub_1AFB97260(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB972F4;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB972F4(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    uint64_t v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

CFStringRef IMDMessageRecordChatForMessageGUID(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      uint64_t v5 = 0;
      uint64_t v6 = &v5;
      uint64_t v7 = 0x2020000000;
      uint64_t v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v4[0] = MEMORY[0x1E4F143A8];
        v4[1] = 3221225472;
        v4[2] = sub_1AFB974E0;
        v4[3] = &unk_1E5F900E0;
        void v4[4] = &v5;
        void v4[5] = v1;
        _IMDPerformLockedStatementBlockWithQuery(@"SELECT c.rowid FROM chat c INNER JOIN chat_message_join j   ON c.rowid = j.chat_id INNER JOIN message m   ON m.rowid = j.message_id WHERE m.guid = ?;",
          (uint64_t)v4);
      }
      else
      {
        v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v3[1] = (void (*)(void))3221225472;
        v3[2] = (void (*)(void))sub_1AFB9759C;
        v3[3] = (void (*)(void))&unk_1E5F8D580;
        void v3[4] = (void (*)(void))&v5;
        __syncXPCIMDMessageRecordChatForMessageGUID_IPCAction(v3, (uint64_t)v1);
      }
      CFStringRef v1 = (CFStringRef)v6[3];
      _Block_object_dispose(&v5, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1AFB974C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFB974E0(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

void *sub_1AFB9759C(uint64_t a1, void *a2)
{
  xpc_object_t result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyAttachmentsWithLock(uint64_t a1)
{
  uint64_t Identifier = IMDMessageRecordGetIdentifier(a1);
  return IMDMessageRecordCopyAttachmentsForIDWithLock(Identifier);
}

uint64_t IMDMessageRecordCopyAttachmentsForIDWithLock(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFB97970;
  v3[3] = &unk_1E5F900E0;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedStatementBlockWithQuery(@"SELECT attachment_id FROM message_attachment_join WHERE message_id = ? LIMIT ?;",
    (uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFB976AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyAttachments(uint64_t a1)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t Identifier = IMDMessageRecordGetIdentifier(a1);
    return IMDMessageRecordCopyAttachmentsForIDWithLock(Identifier);
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = &v8;
    uint64_t v10 = 0x2020000000;
    uint64_t v11 = 0;
    uint64_t v4 = *(const void **)(a1 + 48);
    if (v4)
    {
      CFTypeRef v5 = CFRetain(v4);
    }
    else
    {
      int64_t v6 = IMDMessageRecordGetIdentifier(a1);
      v7[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v7[1] = (void (*)(void))3221225472;
      void v7[2] = (void (*)(void))sub_1AFB977E0;
      v7[3] = (void (*)(void))&unk_1E5F8D580;
      void v7[4] = (void (*)(void))&v8;
      __syncXPCIMDMessageRecordCopyAttachments_IPCAction(v7, v6);
      CFTypeRef v5 = (CFTypeRef)v9[3];
    }
    _Block_object_dispose(&v8, 8);
    return (uint64_t)v5;
  }
}

void sub_1AFB977C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1AFB977E0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB97874;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFB97874(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFTypeRef v5 = (const void *)_IMDCopyIMDAttachmentRecordFromXPCObjectClient(a3);
  if (v5)
  {
    int64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

CFStringRef IMDMessageRecordCopyThreadCountsByPart(uint64_t a1)
{
  uint64_t v2 = IMDIsRunningInDatabaseServerProcess();
  if (v2)
  {
    CFStringRef v3 = (const __CFString *)IMDMessageRecordCopyGUID(v2, a1);
    CFStringRef v4 = IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts(v3);
    if (v3) {
      CFRelease(v3);
    }
    return v4;
  }
  CFTypeRef v5 = *(const void **)(a1 + 56);
  if (!v5) {
    return 0;
  }
  return (const __CFString *)CFRetain(v5);
}

void sub_1AFB97970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  if (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) != 100) {
    goto LABEL_20;
  }
  char v6 = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  do
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
    }
    int v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
    uint64_t v10 = (const void *)IMDAttachmentRecordCopyAttachmentRecordUnlocked(v9);
    if (v10)
    {
      int ID = CSDBRecordGetID();
      uint64_t v12 = IMDAttachmentRecordCreateFromRecordIDUnlocked(v7, ID);
      if (v12)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v12);
        if (v6)
        {
          char v6 = 1;
        }
        else
        {
          uint64_t v13 = (void *)IMDAttachmentRecordCopyGUID(v7, (uint64_t)v12);
          if (v13)
          {
            int v14 = IMFileTransferGUIDIsTemporary();
            char v6 = v14;
            if (v14)
            {
              if (IMOSLoggingEnabled())
              {
                uint64_t v15 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint8_t buf = 138412290;
                  xpc_object_t v19 = v13;
                  _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Found legacy GUID %@ in list of attachments", buf, 0xCu);
                }
              }
            }
          }
          else
          {
            char v6 = 0;
          }
        }
        CFRelease(v12);
      }
      CFRelease(v10);
    }
  }
  while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100);
  if ((v6 & 1) == 0)
  {
LABEL_20:
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v17 = *(__CFArray **)(v16 + 24);
    if (v17)
    {
      v21.length = CFArrayGetCount(*(CFArrayRef *)(v16 + 24));
      v21.location = 0;
      CFArraySortValues(v17, v21, (CFComparatorFunction)sub_1AFB97BBC, 0);
    }
  }
}

uint64_t sub_1AFB97BBC(uint64_t a1, uint64_t a2)
{
  if (!(a1 | a2)) {
    return 0;
  }
  if (a1 && !a2) {
    return 1;
  }
  if (!a1 && a2) {
    return -1;
  }
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  CFStringRef v6 = (const __CFString *)IMDAttachmentRecordCopyGUID(*MEMORY[0x1E4F1CF80], a1);
  CFStringRef v7 = (const __CFString *)IMDAttachmentRecordCopyGUID(v5, a2);
  CFComparisonResult v3 = CFStringCompare(v6, v7, 0x40uLL);
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v3;
}

__n128 IMDMessageRecordBulkCopyForPhotos(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, CFNumberRef *a12, void *a13, void *a14, void *a15, const void **a16, void *a17, void *a18, void *a19, unsigned char *a20,unsigned char *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,const void **a38,void *a39,uint64_t a40,void *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47)
{
  IMDMessageRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    v48,
    a41,
    a42,
    a46,
    a47,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  return result;
}

void IMDMessageRecordBulkCopy(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, CFNumberRef *a12, void *a13, void *a14, void *a15, const void **a16, void *a17, void *a18, void *a19, unsigned char *a20,unsigned char *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,const void **a38,void *a39,uint64_t a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,const void **a54,const void **a55)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v170[0] = MEMORY[0x1E4F143A8];
      v170[1] = 3221225472;
      v170[2] = sub_1AFB98D50;
      v170[3] = &unk_1E5F92978;
      v170[4] = a1;
      v170[5] = a3;
      v170[6] = a6;
      v170[7] = a7;
      v170[8] = a8;
      v170[9] = a9;
      v170[10] = a4;
      v170[11] = a18;
      v170[12] = a19;
      v170[13] = a5;
      v170[14] = a10;
      v170[15] = a16;
      v170[16] = a20;
      v170[17] = a21;
      v170[18] = a2;
      v170[19] = a23;
      v170[20] = a25;
      v170[21] = a26;
      v170[22] = a27;
      v170[23] = a28;
      v170[24] = a29;
      v170[25] = a31;
      v170[26] = a32;
      v170[27] = a49;
      v170[28] = a50;
      v170[29] = a52;
      v170[30] = a12;
      v170[31] = a11;
      v170[32] = a14;
      v170[33] = a15;
      v170[34] = a17;
      v170[35] = a13;
      v170[36] = a22;
      v170[37] = a24;
      v170[38] = a30;
      v170[39] = a33;
      v170[40] = a34;
      v170[41] = a35;
      v170[42] = a36;
      v170[43] = a37;
      v170[44] = a38;
      v170[45] = a39;
      v170[46] = a41;
      v170[47] = a42;
      v170[48] = a43;
      v170[49] = a44;
      v170[50] = a45;
      v170[51] = a46;
      v170[52] = a47;
      v170[53] = a48;
      v170[54] = a51;
      v170[55] = a53;
      v170[56] = a54;
      v170[57] = a55;
      _IMDPerformBlock(v170, 0);
    }
    else
    {
      CFArrayRef v63 = *(const __CFArray **)(a1 + 24);
      if (v63)
      {
        uint64_t valuePtr = 0;
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v63, 18);
        BOOL v146 = ValueAtIndex != 0;
        uint64_t v147 = ValueAtIndex;
        uint64_t v145 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
        uint64_t v144 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 20);
        uint64_t v143 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 21);
        uint64_t v142 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 22);
        uint64_t v150 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 23);
        CFNumberRef v148 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 24);
        uint64_t v149 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 25);
        uint64_t v151 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 26);
        uint64_t v152 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 27);
        uint64_t v153 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 28);
        uint64_t v160 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 35);
        uint64_t v154 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 29);
        uint64_t v155 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 30);
        CFNumberRef v156 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 31);
        int8x16_t v157 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 17);
        uint64_t v158 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 72);
        uint64_t v159 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 73);
        uint64_t v65 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 37);
        uint64_t v66 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 38);
        CFNumberRef v67 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 46);
        CFNumberRef v68 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 63);
        uint64_t v69 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 66);
        uint64x2_t v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 67);
        uint64_t v141 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 76);
        uint64_t v140 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 78);
        uint64_t v139 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 79);
        uint64_t v138 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 80);
        int8x16_t v71 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 82);
        uint64_t v72 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 85);
        uint64_t v73 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 89);
        uint64_t v74 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 86);
        uint64_t v75 = v146 | 2;
        if (!v145) {
          uint64_t v75 = v146;
        }
        if (v144) {
          v75 |= 4uLL;
        }
        if (v143) {
          v75 |= 8uLL;
        }
        if (v142) {
          v75 |= 0x20uLL;
        }
        if (v150) {
          v75 |= 0x40uLL;
        }
        if (v148) {
          v75 |= 0x800uLL;
        }
        if (v149) {
          v75 |= 0x2000uLL;
        }
        if (v151) {
          v75 |= 0x4000uLL;
        }
        if (v152) {
          v75 |= 0x8000uLL;
        }
        if (v153) {
          v75 |= 0x10000uLL;
        }
        if (v154) {
          v75 |= 0x20000uLL;
        }
        if (v155) {
          v75 |= 0x40000uLL;
        }
        if (v156) {
          v75 |= 0x80000uLL;
        }
        if (v157) {
          v75 |= 0x1000uLL;
        }
        if (v158) {
          v75 |= 0x400000000uLL;
        }
        if (v159) {
          v75 |= 0x800000000uLL;
        }
        if (v160) {
          v75 |= 0x100000uLL;
        }
        if (v65) {
          v75 |= 0x200000uLL;
        }
        if (v66) {
          v75 |= 0x400000uLL;
        }
        if (v67) {
          v75 |= 0x1000000uLL;
        }
        if (v68) {
          v75 |= 0x4000000uLL;
        }
        if (v69) {
          v75 |= 0x8000000uLL;
        }
        if (v70) {
          v75 |= 0x10000000uLL;
        }
        if (v141) {
          v75 |= 0x1000000000uLL;
        }
        if (v140) {
          v75 |= 0x200000000uLL;
        }
        if (v139) {
          v75 |= 0x8000000000uLL;
        }
        if (v138) {
          v75 |= 0x4000000000uLL;
        }
        if (v73) {
          v75 |= 0x80000000000uLL;
        }
        if (v71) {
          v75 |= 0x2000000000uLL;
        }
        if (v72) {
          v75 |= 0x20000000000uLL;
        }
        uint64_t v76 = v75 | 0x40000000000;
        if (!v74) {
          uint64_t v76 = v75;
        }
        if (v147
          || v145
          || v144
          || v143
          || v142
          || v150
          || v148
          || v149
          || v151
          || v152
          || v153
          || v154
          || v155
          || v156
          || v157
          || v158
          || v159
          || v160
          || v65
          || v66
          || v67
          || v68
          || v69
          || v70
          || v141
          || v140
          || v139
          || v138
          || v73
          || v71
          || v72
          || v74)
        {
          uint64_t valuePtr = v76;
        }
        uint64_t v77 = v76;
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 49) == 1) {
          uint64_t valuePtr = v77 | 0x2000000;
        }
        if (a12) {
          *a12 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        }
        if (a3) {
          *a3 = *(void *)(a1 + 16);
        }
        if (a6)
        {
          CFNumberRef v78 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 14);
          if (v78) {
            CFNumberGetValue(v78, kCFNumberSInt64Type, a6);
          }
        }
        if (a7)
        {
          CFNumberRef v79 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 15);
          if (v79) {
            CFNumberGetValue(v79, kCFNumberSInt64Type, a7);
          }
        }
        if (a8)
        {
          CFNumberRef v80 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 16);
          if (v80) {
            CFNumberGetValue(v80, kCFNumberSInt64Type, a8);
          }
        }
        if (a9)
        {
          CFNumberRef v81 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 39);
          if (v81) {
            CFNumberGetValue(v81, kCFNumberSInt64Type, a9);
          }
        }
        if (a36)
        {
          CFNumberRef v82 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 57);
          if (v82) {
            CFNumberGetValue(v82, kCFNumberSInt64Type, a36);
          }
        }
        if (a4) {
          *a4 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
        }
        if (a18) {
          *a18 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 13);
        }
        if (a19) {
          *a19 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 9);
        }
        if (a2) {
          *a2 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 40);
        }
        if (a23) {
          *a23 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 41);
        }
        if (a25) {
          *a25 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 43);
        }
        if (a27) {
          *a27 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 45);
        }
        if (a26) {
          *a26 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 44);
        }
        if (a29) {
          *a29 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 48);
        }
        if (a28) {
          *a28 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 47);
        }
        if (a5)
        {
          CFNumberRef v83 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
          CFNumberRef v84 = v83;
          if (v83) {
            CFRetain(v83);
          }
          *a5 = v84;
        }
        if (a10)
        {
          uint64_t v85 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
          uint64_t v86 = v85;
          if (v85) {
            CFRetain(v85);
          }
          *a10 = v86;
        }
        if (a16) {
          *a16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
        }
        if (a20) {
          *a20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 33);
        }
        if (a21) {
          *a21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 35);
        }
        if (a11)
        {
          uint64_t v87 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
          uint64_t v88 = v87;
          if (v87) {
            CFRetain(v87);
          }
          *a11 = v88;
        }
        if (a24)
        {
          uint64_t v89 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 42);
          uint64_t v90 = v89;
          if (v89) {
            CFRetain(v89);
          }
          *a24 = v90;
        }
        if (a14)
        {
          uint64_t v91 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
          uint64_t v92 = v91;
          if (v91) {
            CFRetain(v91);
          }
          *a14 = v92;
        }
        if (a15)
        {
          __int16 v93 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 12);
          uint64_t v94 = v93;
          if (v93) {
            CFRetain(v93);
          }
          *a15 = v94;
        }
        if (a17)
        {
          __int16 v95 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 5);
          uint64_t v96 = v95;
          if (v95) {
            CFRetain(v95);
          }
          *a17 = v96;
        }
        if (a13)
        {
          uint64_t v97 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
          uint64_t v98 = v97;
          if (v97) {
            CFRetain(v97);
          }
          *a13 = v98;
        }
        if (a22)
        {
          uint64_t v99 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 34);
          uint64_t v100 = v99;
          if (v99) {
            CFRetain(v99);
          }
          *a22 = v100;
        }
        if (a30)
        {
          uint64_t v101 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 50);
          uint64_t v102 = v101;
          if (v101) {
            CFRetain(v101);
          }
          *a30 = v102;
        }
        if (a31) {
          *a31 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 51);
        }
        if (a32)
        {
          uint64_t v103 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 55);
          signed int v104 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 56);
          *a32 = v103;
          a32[1] = v104;
        }
        if (a33)
        {
          uint64_t v105 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 52);
          uint64_t v106 = v105;
          if (v105) {
            CFRetain(v105);
          }
          *a33 = v106;
        }
        if (a34)
        {
          uint64_t v107 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 53);
          uint64_t v108 = v107;
          if (v107) {
            CFRetain(v107);
          }
          *a34 = v108;
        }
        if (a35)
        {
          uint64_t v109 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 54);
          uint64_t v110 = v109;
          if (v109) {
            CFRetain(v109);
          }
          *a35 = v110;
        }
        if (a37)
        {
          CFNumberRef v111 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 58);
          CFNumberRef v112 = v111;
          if (v111) {
            CFRetain(v111);
          }
          *a37 = v112;
        }
        if (a38) {
          *a38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 59);
        }
        if (a39)
        {
          CFNumberRef v113 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 60);
          uint64_t v114 = v113;
          if (v113) {
            CFRetain(v113);
          }
          *a39 = v114;
        }
        if (a41)
        {
          uint64_t v115 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 61);
          int8x16_t v116 = v115;
          if (v115) {
            CFRetain(v115);
          }
          *a41 = v116;
        }
        if (a42)
        {
          int8x16_t v117 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 62);
          int8x16_t v118 = v117;
          if (v117) {
            CFRetain(v117);
          }
          *a42 = v118;
        }
        if (a43)
        {
          uint64_t v119 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 64);
          int8x16_t v120 = v119;
          if (v119) {
            CFRetain(v119);
          }
          *a43 = v120;
        }
        if (a44)
        {
          CFNumberRef v121 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 65);
          if (v121) {
            CFNumberGetValue(v121, kCFNumberSInt64Type, a44);
          }
        }
        if (a45)
        {
          uint64_t v122 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 68);
          uint64_t v123 = v122;
          if (v122) {
            CFRetain(v122);
          }
          *a45 = v123;
        }
        if (a46)
        {
          uint64_t v124 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 69);
          uint64_t v125 = v124;
          if (v124) {
            CFRetain(v124);
          }
          *a46 = v125;
        }
        if (a47)
        {
          uint64_t v126 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 70);
          uint64_t v127 = v126;
          if (v126) {
            CFRetain(v126);
          }
          *a47 = v127;
        }
        if (a48)
        {
          uint64_t v128 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 71);
          int8x16_t v129 = v128;
          if (v128) {
            CFRetain(v128);
          }
          *a48 = v129;
        }
        if (a49)
        {
          CFNumberRef v130 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 77);
          if (v130) {
            CFNumberGetValue(v130, kCFNumberSInt64Type, a49);
          }
        }
        if (a50)
        {
          CFNumberRef v131 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 75);
          if (v131) {
            CFNumberGetValue(v131, kCFNumberSInt64Type, a50);
          }
        }
        if (a51)
        {
          uint64_t v132 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 81);
          uint64_t v133 = v132;
          if (v132) {
            CFRetain(v132);
          }
          *a51 = v133;
        }
        if (a52)
        {
          uint64_t v134 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 83);
          uint64_t v135 = v134;
          if (v134) {
            CFRetain(v134);
          }
          *a52 = v135;
        }
        if (a53)
        {
          uint64_t v136 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 84);
          uint64_t v137 = v136;
          if (v136) {
            CFRetain(v136);
          }
          *a53 = v137;
        }
        if (a54) {
          *a54 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 87);
        }
        if (a55) {
          *a55 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 88);
        }
      }
    }
  }
  else
  {
    v55 = IMLogHandleForCategory();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66068(v55, v56, v57, v58, v59, v60, v61, v62);
    }
  }
}

void sub_1AFB98D50(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v2)
  {
    CFComparisonResult v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = (int)CSDBRecordGetID();
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 48) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 80)) {
      **(void **)(a1 + 80) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 88)) {
      **(void **)(a1 + 88) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 96)) {
      **(void **)(a1 + 96) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 128)) {
      **(unsigned char **)(a1 + 128) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 136)) {
      **(unsigned char **)(a1 + 136) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 144)) {
      **(void **)(a1 + 144) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 152)) {
      **(void **)(a1 + 152) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 160)) {
      **(void **)(a1 + 160) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 168)) {
      **(void **)(a1 + 168) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 176)) {
      **(void **)(a1 + 176) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 184)) {
      **(void **)(a1 + 184) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 192)) {
      **(void **)(a1 + 192) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 200)) {
      **(void **)(a1 + 200) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 208))
    {
      uint64_t Property = CSDBRecordGetProperty();
      uint64_t v5 = CSDBRecordGetProperty();
      CFStringRef v6 = *(uint64_t **)(a1 + 208);
      uint64_t *v6 = Property;
      v6[1] = v5;
    }
    if (*(void *)(a1 + 216)) {
      **(void **)(a1 + 216) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 224)) {
      **(void **)(a1 + 224) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 232)) {
      **(void **)(a1 + 232) = CSDBRecordCopyProperty();
    }
    uint64_t valuePtr = 0;
    char v7 = CSDBRecordGetProperty();
    char v8 = CSDBRecordGetProperty();
    char v9 = CSDBRecordGetProperty();
    char v10 = CSDBRecordGetProperty();
    char v11 = CSDBRecordGetProperty();
    char v15 = CSDBRecordGetProperty();
    char v17 = CSDBRecordGetProperty();
    char v19 = CSDBRecordGetProperty();
    char v21 = CSDBRecordGetProperty();
    char v23 = CSDBRecordGetProperty();
    char v24 = CSDBRecordGetProperty();
    char v38 = CSDBRecordGetProperty();
    char v12 = CSDBRecordGetProperty();
    char v13 = CSDBRecordGetProperty();
    char v16 = CSDBRecordGetProperty();
    char v18 = CSDBRecordGetProperty();
    char v20 = CSDBRecordGetProperty();
    char v22 = CSDBRecordGetProperty();
    char v25 = CSDBRecordGetProperty();
    char v26 = CSDBRecordGetProperty();
    char v27 = CSDBRecordGetProperty();
    char v28 = CSDBRecordGetProperty();
    char v29 = CSDBRecordGetProperty();
    char v30 = CSDBRecordGetProperty();
    char v31 = CSDBRecordGetProperty();
    char v32 = CSDBRecordGetProperty();
    char v33 = CSDBRecordGetProperty();
    char v34 = CSDBRecordGetProperty();
    char v35 = CSDBRecordGetProperty();
    char v36 = CSDBRecordGetProperty();
    char v37 = CSDBRecordGetProperty();
    char v14 = CSDBRecordGetProperty();
    if (v7) {
      valuePtr |= 1uLL;
    }
    if (v8) {
      valuePtr |= 2uLL;
    }
    if (v9) {
      valuePtr |= 4uLL;
    }
    if (v10) {
      valuePtr |= 8uLL;
    }
    if (v11) {
      valuePtr |= 0x20uLL;
    }
    if (v15) {
      valuePtr |= 0x40uLL;
    }
    if (v17) {
      valuePtr |= 0x800uLL;
    }
    if (v19) {
      valuePtr |= 0x2000uLL;
    }
    if (v21) {
      valuePtr |= 0x4000uLL;
    }
    if (v23) {
      valuePtr |= 0x8000uLL;
    }
    if (v24) {
      valuePtr |= 0x10000uLL;
    }
    if (v12) {
      valuePtr |= 0x20000uLL;
    }
    if (v13) {
      valuePtr |= 0x40000uLL;
    }
    if (v16) {
      valuePtr |= 0x80000uLL;
    }
    if (v18) {
      valuePtr |= 0x1000uLL;
    }
    if (v20) {
      valuePtr |= 0x400000000uLL;
    }
    if (v22) {
      valuePtr |= 0x800000000uLL;
    }
    if (v38) {
      valuePtr |= 0x100000uLL;
    }
    if (v25) {
      valuePtr |= 0x200000uLL;
    }
    if (v26) {
      valuePtr |= 0x400000uLL;
    }
    if (v27) {
      valuePtr |= 0x1000000uLL;
    }
    if (v28) {
      valuePtr |= 0x4000000uLL;
    }
    if (v29) {
      valuePtr |= 0x8000000uLL;
    }
    if (v30) {
      valuePtr |= 0x10000000uLL;
    }
    if (v31) {
      valuePtr |= 0x1000000000uLL;
    }
    if (v32) {
      valuePtr |= 0x200000000uLL;
    }
    if (v33) {
      valuePtr |= 0x8000000000uLL;
    }
    if (v34) {
      valuePtr |= 0x4000000000uLL;
    }
    if (v14) {
      valuePtr |= 0x80000000000uLL;
    }
    if (v35) {
      valuePtr |= 0x2000000000uLL;
    }
    if (v36) {
      valuePtr |= 0x20000000000uLL;
    }
    if (v37) {
      valuePtr |= 0x40000000000uLL;
    }
    if (CSDBRecordGetProperty() == 1) {
      valuePtr |= 0x2000000uLL;
    }
    if (*(void *)(a1 + 240)) {
      **(void **)(a1 + 240) = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    }
    if (*(void *)(a1 + 248)) {
      **(void **)(a1 + 248) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 256)) {
      **(void **)(a1 + 256) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 264)) {
      **(void **)(a1 + 264) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 272)) {
      **(void **)(a1 + 272) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 280)) {
      **(void **)(a1 + 280) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 288)) {
      **(void **)(a1 + 288) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 296)) {
      **(void **)(a1 + 296) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 304)) {
      **(void **)(a1 + 304) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 312)) {
      **(void **)(a1 + 312) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 320)) {
      **(void **)(a1 + 320) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 328)) {
      **(void **)(a1 + 328) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 336)) {
      **(void **)(a1 + 336) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 344)) {
      **(void **)(a1 + 344) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 352)) {
      **(void **)(a1 + 352) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 360)) {
      **(void **)(a1 + 360) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 368)) {
      **(void **)(a1 + 368) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 376)) {
      **(void **)(a1 + 376) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 384)) {
      **(void **)(a1 + 384) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 392)) {
      **(void **)(a1 + 392) = sub_1AFB99958();
    }
    if (*(void *)(a1 + 400)) {
      **(void **)(a1 + 400) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 408)) {
      **(void **)(a1 + 408) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 416)) {
      **(void **)(a1 + 416) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 424)) {
      **(void **)(a1 + 424) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 432)) {
      **(void **)(a1 + 432) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 440)) {
      **(void **)(a1 + 440) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 448)) {
      **(void **)(a1 + 448) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 456)) {
      **(void **)(a1 + 456) = CSDBRecordGetProperty();
    }
    CFRelease(v3);
  }
}

CFNumberRef sub_1AFB99958()
{
  uint64_t valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CSDBRecordCopyProperty();
  if (result)
  {
    CFNumberRef v1 = result;
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void *IMDCreateMessageSortComparatorAscending()
{
  return _Block_copy(&unk_1F084CD40);
}

uint64_t sub_1AFB999BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a2, 0));
  uint64_t result = objc_msgSend(v5, "compare:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a3, 0)));
  if (!result)
  {
    char v7 = (void *)[MEMORY[0x1E4F28ED0] numberWithUnsignedLongLong:IMDMessageRecordGetIdentifier(a2)];
    uint64_t v8 = [MEMORY[0x1E4F28ED0] numberWithUnsignedLongLong:IMDMessageRecordGetIdentifier(a3)];
    return [v7 compare:v8];
  }
  return result;
}

void *IMDCreateMessageSortComparatorDescending()
{
  return _Block_copy(&unk_1F084C528);
}

uint64_t sub_1AFB99AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a2, 0));
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a3, 0)), "compare:", v5);
  if (!result)
  {
    char v7 = (void *)[MEMORY[0x1E4F28ED0] numberWithUnsignedLongLong:IMDMessageRecordGetIdentifier(a3)];
    uint64_t v8 = [MEMORY[0x1E4F28ED0] numberWithUnsignedLongLong:IMDMessageRecordGetIdentifier(a2)];
    return [v7 compare:v8];
  }
  return result;
}

void IMDMessageRecordSetHandle(uint64_t a1, uint64_t a2)
{
  int v4 = IMDIsRunningInDatabaseServerProcess();
  uint64_t Identifier = IMDHandleRecordGetIdentifier(a2);
  int64_t v6 = Identifier;
  if (v4)
  {
    if (a1)
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = sub_1AFB9BC54;
      v16[3] = &unk_1E5F90128;
      v16[4] = a1;
      v16[5] = Identifier;
      _IMDPerformBlock((uint64_t)v16);
    }
    else
    {
      uint64_t v8 = IMLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1AFC660E0(v8, v9, v10, v11, v12, v13, v14, v15);
      }
    }
  }
  else
  {
    int64_t v7 = IMDMessageRecordGetIdentifier(a1);
    __syncXPCIMDMessageRecordSetHandle_IPCAction(0, v7, v6);
  }
}

void IMDMessageRecordSetOtherHandle(uint64_t a1, uint64_t a2)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t Identifier = IMDHandleRecordGetIdentifier(a2);
    if (a1)
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      _OWORD v14[2] = sub_1AFB9BCB8;
      v14[3] = &unk_1E5F90128;
      v14[4] = a1;
      v14[5] = Identifier;
      _IMDPerformBlock((uint64_t)v14);
    }
    else
    {
      int64_t v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1AFC66158(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC661D0(v5);
    }
  }
}

CFIndex IMDMessageRecordMarkMessageGUIDAsDeduplicated(CFIndex result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)result;
    uint64_t result = CFStringGetLength((CFStringRef)result);
    if (result)
    {
      if (IMDIsRunningInDatabaseServerProcess())
      {
        CFStringRef v2 = IMDMessageRecordCopyMessageForGUID(v1);
        if (v2)
        {
          CFStringRef v3 = v2;
          if (!IMDMessageRecordWasDeduplicated((uint64_t)v2))
          {
            v4[0] = MEMORY[0x1E4F143A8];
            v4[1] = 3221225472;
            v4[2] = sub_1AFB968AC;
            v4[3] = &unk_1E5F928B8;
            void v4[4] = v3;
            char v5 = 1;
            _IMDPerformBlock((uint64_t)v4);
          }
          CFRelease(v3);
        }
      }
      else
      {
        __syncXPCIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(0, (uint64_t)v1);
      }
      return 1;
    }
  }
  return result;
}

uint64_t IMDMessageRecordAddAttachmentIfNeededUnlocked(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t Identifier = IMDAttachmentRecordGetIdentifier(a2);
  uint64_t v4 = IMDMessageRecordGetIdentifier(a1);
  if (IMOSLoggingEnabled())
  {
    char v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint8_t buf = 134218240;
      uint64_t v9 = Identifier;
      __int16 v10 = 2048;
      uint64_t v11 = v4;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_DEBUG, "Trying to associate attachment [%lld] with message [%lld]", buf, 0x16u);
    }
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFB99F98;
  v7[3] = &unk_1E5F92998;
  void v7[4] = v4;
  void v7[5] = Identifier;
  return _IMDPerformLockedStatementBlockWithQuery(@"INSERT OR IGNORE INTO message_attachment_join (message_id, attachment_id) VALUES (?, ?);",
           (uint64_t)v7);
}

void sub_1AFB99F98()
{
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  int v0 = CSDBSqliteStatementPerform();
  if (v0 != 101)
  {
    int v1 = v0;
    CFStringRef v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66214(v1, v2);
    }
  }
}

void IMDMessageRecordBulkUpdate(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, uint64_t a15, int64_t a16, int64_t a17, int64_t a18, uint64_t a19, int64_t a20,int64_t a21,int64_t a22,int64_t a23,int64_t a24,uint64_t a25,int64_t a26,int64_t a27,int64_t a28,uint64_t a29,uint64_t a30,int64_t a31,uint64_t a32,int64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int64_t a44,int64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int64_t a49,int64_t a50)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v66[0] = MEMORY[0x1E4F143A8];
      v66[1] = 3221225472;
      v66[2] = sub_1AFB9A470;
      v66[3] = &unk_1E5F929B8;
      v66[4] = a1;
      v66[5] = a10;
      v66[6] = a2;
      v66[7] = a4;
      v66[8] = a5;
      v66[9] = a6;
      v66[10] = a7;
      v66[11] = a31;
      v66[12] = a16;
      v66[13] = a17;
      v66[14] = a14;
      v66[15] = a18;
      v66[16] = a20;
      v66[17] = a22;
      v66[18] = a21;
      v66[19] = a23;
      v66[20] = a24;
      v66[21] = a26;
      v66[22] = a27;
      v66[23] = a28;
      v66[24] = a3;
      v66[25] = a8;
      v66[26] = a9;
      v66[27] = a15;
      v66[28] = a29;
      v66[29] = a12;
      v66[30] = a13;
      v66[31] = a11;
      v66[32] = a19;
      v66[33] = a25;
      v66[34] = a30;
      v66[35] = a32;
      v66[36] = a33;
      v66[37] = a34;
      v66[38] = a36;
      v66[39] = a37;
      v66[40] = a38;
      v66[41] = a39;
      v66[42] = a40;
      v66[43] = a41;
      v66[44] = a42;
      v66[45] = a43;
      v66[46] = a45;
      v66[47] = a46;
      v66[48] = a44;
      v66[49] = a47;
      v66[50] = a48;
      v66[51] = a49;
      v66[52] = a50;
      _IMDPerformBlock((uint64_t)v66);
    }
    else
    {
      __syncXPCIMDMessageRecordBulkUpdate_IPCAction(0, *(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a20,
        a21,
        a22,
        a19,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44,
        a45,
        a46,
        a47,
        a48,
        a49,
        a50);
    }
  }
  else
  {
    uint64_t v51 = IMLogHandleForCategory();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      sub_1AFC662A0(v51, v52, v53, v54, v55, v56, v57, v58);
    }
  }
}

void sub_1AFB9A470(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v2)
  {
    CFStringRef v3 = (const void *)v2;
    int v4 = [*(id *)(a1 + 40) unsignedLongLongValue];
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if ((v4 & 0x2000000) != 0) {
      CSDBRecordSetProperty();
    }
    if (*(uint64_t *)(a1 + 48) >= 1) {
      CSDBRecordSetProperty();
    }
    sub_1AFB9ABB8((uint64_t)v3, 14, *(void *)(a1 + 56));
    sub_1AFB9ABB8((uint64_t)v3, 15, *(void *)(a1 + 64));
    sub_1AFB9ABB8((uint64_t)v3, 16, *(void *)(a1 + 72));
    sub_1AFB9ABB8((uint64_t)v3, 39, *(void *)(a1 + 80));
    sub_1AFB9ABB8((uint64_t)v3, 57, *(void *)(a1 + 88));
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(void *)(a1 + 184))
    {
      CSDBRecordSetProperty();
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 192)) {
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(void *)(a1 + 232)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 240)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 248)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 256)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 264)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 272)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 280)) {
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(void *)(a1 + 312)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 320)) {
      CSDBRecordSetProperty();
    }
    uint64_t v5 = *(void *)(a1 + 328);
    if (v5 >= 1) {
      sub_1AFB9ABB8((uint64_t)v3, 65, v5);
    }
    if (*(void *)(a1 + 336)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 344)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 352)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 360)) {
      CSDBRecordSetProperty();
    }
    uint64_t v6 = *(void *)(a1 + 368);
    if (v6) {
      sub_1AFB9ABB8((uint64_t)v3, 75, v6);
    }
    if (*(void *)(a1 + 376)) {
      CSDBRecordSetProperty();
    }
    sub_1AFB9ABB8((uint64_t)v3, 77, *(void *)(a1 + 384));
    if (*(void *)(a1 + 392)) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 400)) {
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

void sub_1AFB9ABB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CSDBRecordSetProperty();
    CFRelease(v4);
  }
}

void IMDMessageRecordAnonymizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    long long v29 = xmmword_1E5F929D8;
    long long v30 = *(_OWORD *)off_1E5F929E8;
    uint64_t v31 = 2531;
    uint64_t v17 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"IMDIsRunningInDatabaseServerProcess()", "void IMDMessageRecordAnonymizedUpdate(IMDMessageRecordRef, CFStringRef, CFDataRef, CFStringRef, CFStringRef, CFStringRef, CFDataRef, CFDataRef, CFStringRef)", IMFileLocationTrimFileName(), 2531, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    char v18 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v18)
    {
      v18(v17);
    }
    else if (IMOSLoggingEnabled())
    {
      char v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v33 = v17;
        _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_1AFB9AE58;
    v28[3] = &unk_1E5F92A00;
    uint8_t v28[4] = a1;
    v28[5] = a2;
    v28[6] = a3;
    v28[7] = a5;
    v28[8] = a7;
    v28[9] = a4;
    v28[10] = a6;
    v28[11] = a8;
    v28[12] = a9;
    _IMDPerformBlock((uint64_t)v28);
  }
  else
  {
    char v20 = IMLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66318(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
}

void sub_1AFB9AE58(void *a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(a1[4] + 16));
  if (v2)
  {
    CFNumberRef v3 = (const void *)v2;
    CFStringRef v4 = (const __CFString *)a1[5];
    if (v4 && CFStringGetLength(v4) >= 1) {
      CSDBRecordSetProperty();
    }
    CFDataRef v5 = (const __CFData *)a1[6];
    if (v5 && CFDataGetLength(v5) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v6 = (const __CFString *)a1[7];
    if (v6 && CFStringGetLength(v6) >= 1) {
      CSDBRecordSetProperty();
    }
    CFDataRef v7 = (const __CFData *)a1[8];
    if (v7 && CFDataGetLength(v7) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v8 = (const __CFString *)a1[9];
    if (v8 && CFStringGetLength(v8) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v9 = (const __CFString *)a1[10];
    if (v9 && CFStringGetLength(v9) >= 1) {
      CSDBRecordSetProperty();
    }
    CFDataRef v10 = (const __CFData *)a1[11];
    if (v10 && CFDataGetLength(v10) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v11 = (const __CFString *)a1[12];
    if (v11 && CFStringGetLength(v11) >= 1) {
      CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

void IMDMessageRecordInvalidateRecord(uint64_t a1)
{
  int v2 = IMDIsRunningInDatabaseServerProcess();
  if (a1)
  {
    if (v2)
    {
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = sub_1AFB9B074;
      v3[3] = &unk_1E5F8E728;
      void v3[4] = a1;
      _IMDPerformBlock((uint64_t)v3);
    }
  }
}

void sub_1AFB9B074(uint64_t a1)
{
  uint64_t v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    int v2 = (const void *)v1;
    CSDBRecordInvalidateRecord();
    CFRelease(v2);
  }
}

const void *_IMDCopyIMDMessageRecordFromXPCObjectServer(void *a1)
{
  if (!a1) {
    return 0;
  }
  int64_t int64 = xpc_dictionary_get_int64(a1, "recordIdentifier");
  if (int64 < 1) {
    return 0;
  }
  return IMDMessageRecordCreateFromRecordIDWithLock(0, int64, 0);
}

xpc_object_t _IMDCopyXPCObjectFromIMDMessageRecordClient(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  CFIndex v3 = 0;
  int64_t v4 = 0;
  CFDataRef v5 = &qword_1E5F92A28;
  do
  {
    CFStringRef v6 = (const char *)*(v5 - 1);
    uint64_t v7 = *v5;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3);
    CFNumberRef v9 = ValueAtIndex;
    switch(v7)
    {
      case 0:
        uint64_t v10 = sub_1AFB9B298(v3);
        if (!v10)
        {
          uint64_t v12 = v2;
          uint64_t v13 = v6;
          int64_t v11 = (int64_t)v9;
          goto LABEL_11;
        }
        v4 |= v10;
        break;
      case 1:
        IMInsertNSStringsToXPCDictionary();
        break;
      case 2:
        IMInsertDatasToXPCDictionary();
        break;
      case 3:
        int64_t valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        int64_t v11 = valuePtr;
        uint64_t v12 = v2;
        uint64_t v13 = v6;
LABEL_11:
        xpc_dictionary_set_int64(v12, v13, v11);
        break;
      default:
        break;
    }
    v5 += 5;
    ++v3;
  }
  while (v3 != 90);
  if (v4) {
    xpc_dictionary_set_int64(v2, "flags", v4);
  }
  int64_t v14 = *(void *)(a1 + 16);
  if (v14) {
    xpc_dictionary_set_int64(v2, "recordIdentifier", v14);
  }
  return v2;
}

uint64_t sub_1AFB9B298(uint64_t a1)
{
  if ((unint64_t)(a1 - 17) > 0x48) {
    return 0;
  }
  else {
    return qword_1AFC77F28[a1 - 17];
  }
}

void _IMDMessageRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a2)
  {
    if (a1)
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_1AFB9B39C;
      v20[3] = &unk_1E5F93838;
      v20[4] = a2;
      v20[5] = a1;
      char v21 = a3;
      v20[6] = a1;
      char v22 = a4;
      _IMDPerformBlock((uint64_t)v20);
    }
    else
    {
      uint64_t v12 = IMLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1AFC66408(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else
  {
    int64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66390(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void sub_1AFB9B39C(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFIndex v3 = (const void *)v2;
    uint64_t v4 = 0;
    int64_t v5 = 0;
    uint64_t v6 = &qword_1E5F92A28;
    do
    {
      uint64_t v7 = (const char *)*(v6 - 1);
      uint64_t v8 = *v6;
      CFNumberRef Property = (const __CFNumber *)CSDBRecordGetProperty();
      CFNumberRef v10 = Property;
      switch(v8)
      {
        case 0:
          if (Property)
          {
            uint64_t v11 = sub_1AFB9B298(v4);
            if (!v11)
            {
              uint64_t v13 = *(void **)(a1 + 32);
              uint64_t v14 = v7;
              int64_t v12 = (int64_t)v10;
              goto LABEL_13;
            }
            v5 |= v11;
          }
          break;
        case 1:
          CFNumberRef v43 = Property;
          uint64_t v44 = 0;
          IMInsertNSStringsToXPCDictionary();
          break;
        case 2:
          CFNumberRef v43 = Property;
          uint64_t v44 = 0;
          IMInsertDatasToXPCDictionary();
          break;
        case 3:
          valuePtr[0] = 0;
          if (Property)
          {
            CFNumberGetValue(Property, kCFNumberSInt64Type, valuePtr);
            int64_t v12 = valuePtr[0];
          }
          else
          {
            int64_t v12 = 0;
          }
          uint64_t v13 = *(void **)(a1 + 32);
          uint64_t v14 = v7;
LABEL_13:
          xpc_dictionary_set_int64(v13, v14, v12);
          break;
        default:
          break;
      }
      v6 += 5;
      ++v4;
    }
    while (v4 != 90);
    if (v5) {
      xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "flags", v5);
    }
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v15 = sub_1AFB96B08(*(const __CFArray ***)(a1 + 48), 0);
      if (v15)
      {
        uint64_t v16 = v15;
        xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
        if (v17)
        {
          uint64_t v18 = v17;
          _IMDHandleRecordBulkCopyXPCDictionary((uint64_t)v16, (uint64_t)v17, 0);
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "handle_cache", v18);
          xpc_release(v18);
        }
        CFRelease(v16);
      }
      uint64_t v19 = sub_1AFB96918(*(const __CFArray ***)(a1 + 48), 0);
      if (v19)
      {
        char v20 = v19;
        xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
        if (v21)
        {
          char v22 = v21;
          _IMDHandleRecordBulkCopyXPCDictionary((uint64_t)v20, (uint64_t)v21, 0);
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "other_handle_cache", v22);
          xpc_release(v22);
        }
        CFRelease(v20);
      }
    }
    if (*(unsigned char *)(a1 + 57))
    {
      uint64_t Identifier = IMDMessageRecordGetIdentifier(*(void *)(a1 + 48));
      uint64_t v24 = (void *)IMDMessageRecordCopyAttachmentsForIDWithLock(Identifier);
      xpc_object_t v25 = xpc_array_create(0, 0);
      if (v25)
      {
        uint64_t v26 = v25;
        int v27 = [v24 count];
        if (v27 >= 1)
        {
          uint64_t v28 = 0;
          uint64_t v29 = v27;
          do
          {
            uint64_t v30 = objc_msgSend(v24, "objectAtIndex:", v28, v43, v44);
            xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
            if (v31)
            {
              char v32 = v31;
              _IMDAttachmentRecordBulkCopyXPCDictionary(v30, (uint64_t)v31, 0);
              xpc_array_append_value(v26, v32);
              xpc_release(v32);
            }
            ++v28;
          }
          while (v29 != v28);
        }
        uint64_t v33 = *(void **)(a1 + 32);
        if (v33) {
          xpc_dictionary_set_value(v33, "attachments_cache", v26);
        }
        xpc_release(v26);
      }
      if (v24) {
        CFRelease(v24);
      }
    }
    uint64_t v34 = *(void **)(a1 + 32);
    uint64_t v35 = CSDBRecordGetProperty();
    uint64_t v36 = CSDBRecordGetProperty();
    if (!v35 || !v36)
    {
      CFStringRef v37 = (const __CFString *)CSDBRecordGetProperty();
      char v38 = (__CFString *)IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts(v37);
      if (v38)
      {
        xpc_object_t v39 = xpc_dictionary_create(0, 0, 0);
        if (v39)
        {
          uint64_t v40 = v39;
          valuePtr[0] = MEMORY[0x1E4F143A8];
          valuePtr[1] = 3221225472;
          valuePtr[2] = sub_1AFB9BE4C;
          valuePtr[3] = &unk_1E5F93D80;
          valuePtr[4] = v39;
          [(__CFString *)v38 enumerateKeysAndObjectsUsingBlock:valuePtr];
          xpc_dictionary_set_value(v34, "threadCountsByPart", v40);
          xpc_release(v40);
        }
      }
    }
    id v41 = *(void **)(a1 + 32);
    int64_t v42 = IMDMessageRecordGetIdentifier(*(void *)(a1 + 48));
    xpc_dictionary_set_int64(v41, "recordIdentifier", v42);
    CFRelease(v3);
  }
}

void IMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Request to markAllUnsuccessFullySyncedMessagesAsNeedingSync ", buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    *(_OWORD *)uint8_t buf = 0u;
    long long v4 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    IMDSqlOperationExecuteQuery((uint64_t)buf, @"update message set ck_sync_state=0 where ck_sync_state=2;",
      (uint64_t)&unk_1F084C2C0);
    uint64_t v2 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v2);
    if (v2 && IMOSLoggingEnabled())
    {
      uint64_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v14 = 138412290;
        uint64_t v15 = v2;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Error executing markAllUnsuccessFullySyncedMessagesAsNeedingSync %@ ", v14, 0xCu);
      }
    }
  }
  else
  {
    __syncXPCIMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync_IPCAction(0);
  }
}

void sub_1AFB9B938()
{
  if (IMOSLoggingEnabled())
  {
    int v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Executed query to mark all unsuccessfuly synced messages as needing sync", v1, 2u);
    }
  }
}

uint64_t sub_1AFB9B9D8(uint64_t result)
{
  *(void *)(result + 16) = -1;
  return result;
}

void sub_1AFB9B9E4(uint64_t a1)
{
  *(void *)(a1 + 16) = -1;
  if (*(void *)(a1 + 24))
  {
    CFIndex v2 = 0;
    CFIndex v3 = &qword_1E5F92A30;
    do
    {
      uint64_t v4 = *v3;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
      {
        long long v5 = *(void (**)(void))(v4 + 8);
        if (v5) {
          v5();
        }
      }
      ++v2;
      v3 += 5;
    }
    while (v2 != 90);
    long long v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 24) = 0;
    }
  }
  long long v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 32) = 0;
  }
  long long v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 40) = 0;
  }
  long long v9 = *(const void **)(a1 + 48);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 48) = 0;
  }
  long long v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 56) = 0;
  }
}

BOOL sub_1AFB9BAA8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_1AFB9BABC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFStringRef sub_1AFB9BAC4(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<IMDMessageRecord %p [%p]>{}", a1, v3);
}

uint64_t sub_1AFB9BB14(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1AFB9BB48(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFAllocatorRef v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t sub_1AFB9BBB4(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1AFB9BBE8(uint64_t a1)
{
  uint64_t v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFAllocatorRef v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

void sub_1AFB9BC54(uint64_t a1)
{
  uint64_t v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void sub_1AFB9BCB8(uint64_t a1)
{
  uint64_t v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

uint64_t sub_1AFB9BD1C(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = (void *)MEMORY[0x1B3E8A120]();
  long long v6 = (const void *)_IMDCopyIMDAttachmentRecordFromXPCObjectClient(a3);
  if (v6)
  {
    long long v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 32) + 48), v6);
    CFRelease(v7);
  }
  return 1;
}

void sub_1AFB9BD84(uint64_t a1, uint64_t a2)
{
}

void sub_1AFB9BD94(uint64_t a1)
{
}

uint64_t sub_1AFB9BDA0(uint64_t a1, uint64_t a2, xpc_object_t xint)
{
  int64_t value = xpc_int64_get_value(xint);
  long long v6 = (void *)[[NSString alloc] initWithUTF8String:a2];
  long long v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend(v7, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", value), v6);

  return 1;
}

void sub_1AFB9BE4C(uint64_t a1, void *a2, void *a3)
{
  if ([a2 UTF8String])
  {
    long long v6 = *(void **)(a1 + 32);
    long long v7 = (const char *)[a2 UTF8String];
    int64_t v8 = [a3 unsignedIntegerValue];
    xpc_dictionary_set_int64(v6, v7, v8);
  }
}

void IMDNotificationsPostNotificationsWithContext(void *a1)
{
  id v2 = a1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v1 = +[IMDNotificationsController sharedInstance];
    [v1 postNotificationsWithContext:v2];
  }
  else
  {
    __asyncXPCIMDNotificationsPostNotifications_IPCAction(qword_1F084CD60, (uint64_t)v2);
  }
}

void IMDNotificationsRetractNotificationsForReadMessages(void *a1)
{
  id v2 = a1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v1 = +[IMDNotificationsController sharedInstance];
    [v1 retractNotificationsForReadMessages:v2];
  }
  else
  {
    __asyncXPCIMDNotificationsRetractNotificationsForReadMessages_IPCAction(qword_1F084C870, (uint64_t)v2);
  }
}

void IMDNotificationsRetractNotificationsFromFirstUnlockWithContext(void *a1)
{
  id v2 = a1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v1 = +[IMDNotificationsController sharedInstance];
    [v1 repostNotificationsFromFirstUnlockWithContext:v2];
  }
  else
  {
    __asyncXPCIMDNotificationsRetractNotificationsFromFirstUnlock_IPCAction(qword_1F084D278, (uint64_t)v2);
  }
}

void IMDNotificationsPostUrgentNotificationsForMessages(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v4 = +[IMDNotificationsController sharedInstance];
    [v4 postUrgentNotificationForMessages:v5 withContext:v3];
  }
  else
  {
    __syncXPCIMDNotificationsPostUrgentNotificationsForMessages_IPCAction(qword_1F084D180, (uint64_t)v5, (uint64_t)v3);
  }
}

void IMDNotificationsUpdatePostedNotificationsForMessages(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v4 = +[IMDNotificationsController sharedInstance];
    [v4 updatePostedNotificationsForMessages:v5 withContext:v3];
  }
  else
  {
    __syncXPCIMDNotificationsUpdatePostedNotificationsForMessages_IPCAction(qword_1F084D1C0, (uint64_t)v5, (uint64_t)v3);
  }
}

void IMDNotificationsPostFirstUnlockMessage(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v4 = +[IMDNotificationsController sharedInstance];
    [v4 postFirstUnlockMessage:v5 forIdentifier:v3];
  }
  else
  {
    __syncXPCIMDNotificationsPostFirstUnlockMessage_IPCAction(qword_1F084C5C8, (uint64_t)v5, (uint64_t)v3);
  }
}

uint64_t IMDHandleRecordGetTypeID()
{
  return qword_1EB5ABEF8;
}

uint64_t sub_1AFB9C24C()
{
  qword_1EB5ABEF8 = _CFRuntimeRegisterClass();
  int v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  uint64_t v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5F93DE8, 5);
  uint64_t v2 = 0;
  id v3 = &off_1E5F93DE8;
  do
  {
    v3 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_1EB5ABF00[v2++] = result;
  }
  while (v2 != 5);
  return result;
}

uint64_t sub_1AFB9C2F0(uint64_t a1)
{
  return dword_1EB5ABF00[a1];
}

void *IMDHandleRecordCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    *(void *)uint8_t buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    *(void *)&unsigned char buf[24] = 0;
    v23[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v23[1] = (void (*)(void))3221225472;
    v23[2] = (void (*)(void))sub_1AFB9C860;
    v23[3] = (void (*)(void))&unk_1E5F8D580;
    v23[4] = (void (*)(void))buf;
    __syncXPCIMDHandleRecordCreate_IPCAction(v23, a2, a3, (uint64_t)a4, a5, a6);
    long long v12 = *(void **)(*(void *)&buf[8] + 24);
    char v20 = (uint64_t *)buf;
LABEL_23:
    _Block_object_dispose(v20, 8);
    return v12;
  }
  pthread_once(&stru_1EB5AB968, (void (*)(void))sub_1AFB9C24C);
  uint64_t Instance = _CFRuntimeCreateInstance();
  long long v12 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    long long v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "_IMDHandleRecordCreate()", buf, 2u);
    }
    IMDEnsureSharedRecordStoreInitialized();
    uint64_t v14 = (const void *)CSDBRecordCreate();
    if (v14)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v25;
      uint64_t v27 = 0x2020000000;
      uint64_t v28 = 0;
      if (([a4 isEqualToString:*MEMORY[0x1E4F6E1B0]] & 1) == 0)
      {
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = sub_1AFB9C730;
        v24[3] = &unk_1E5F901A0;
        v24[4] = &v25;
        v24[5] = a2;
        IMDRunSqlOperation((uint64_t)v24);
        if (IMOSLoggingEnabled())
        {
          uint64_t v15 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            uint64_t v16 = v26[3];
            *(_DWORD *)uint8_t buf = 138412546;
            *(void *)&uint8_t buf[4] = a4;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v16;
            _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "We are setting the person_centric_id for a non-iMessage(%@) handle to be %@", buf, 0x16u);
          }
        }
      }
      *(_OWORD *)uint8_t buf = xmmword_1AFC78170;
      *(_OWORD *)&uint8_t buf[16] = xmmword_1AFC78180;
      uint64_t v39 = 4;
      uint64_t v33 = a2;
      uint64_t v34 = a3;
      uint64_t v35 = a4;
      uint64_t v36 = a5;
      if (!a6) {
        a6 = v26[3];
      }
      uint64_t v17 = 0;
      uint64_t v37 = a6;
      do
      {
        CSDBRecordSetProperty();
        v17 += 8;
      }
      while (v17 != 40);
      if (IMDHandleRecordAddHandleRecord((uint64_t)v14))
      {
        _OWORD v12[2] = (int)CSDBRecordGetID();
        uint64_t v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = v12[2];
          *(_DWORD *)uint64_t v29 = 138412546;
          uint64_t v30 = v12;
          __int16 v31 = 2048;
          uint64_t v32 = v19;
          _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "new IMDHandleRecordRef [%@] has id [%lld].", v29, 0x16u);
        }
      }
      else
      {
        CFRelease(v12);
        long long v12 = 0;
      }
      CFRelease(v14);
      xpc_object_t v21 = (const void *)v26[3];
      if (v21) {
        CFRelease(v21);
      }
      char v20 = &v25;
      goto LABEL_23;
    }
    CFRelease(v12);
    return 0;
  }
  return v12;
}

BOOL sub_1AFB9C730(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFB9C7FC;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFB9C808;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT person_centric_id FROM handle where int ID = ? and service = 'iMessage'", (uint64_t)v5, (uint64_t)v4);
}

void sub_1AFB9C7FC(uint64_t a1)
{
}

const unsigned __int8 *sub_1AFB9C808(uint64_t a1)
{
  uint64_t result = (const unsigned __int8 *)IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    IMDSqlOperationColumnByIndex(*(void *)(a1 + 40), 0, (uint64_t)v3);
    uint64_t result = IMDStringFromSqlColumn((uint64_t)v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1AFB9C860(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDCopyIMDHandleRecordFromXPCObjectClient(void *a1)
{
  if (xpc_dictionary_get_count(a1) < 3) {
    return 0;
  }
  pthread_once(&stru_1EB5AB968, (void (*)(void))sub_1AFB9C24C);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v2 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    CFIndex v4 = 5;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 5, 0);
    do
    {
      CFArrayAppendValue(Mutable, 0);
      --v4;
    }
    while (v4);
    long long v7 = (uint64_t (*)(const void *))*MEMORY[0x1E4F5D048];
    long long v6 = *(void (**)(void))(MEMORY[0x1E4F5D048] + 8);
    int64_t v8 = &off_1E5F93DE8;
    do
    {
      long long v9 = (const void *)IMGetXPCStringFromDictionary();
      if (CFArrayGetValueAtIndex(Mutable, v4) && v6) {
        v6();
      }
      if (v9) {
        BOOL v10 = v7 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10) {
        long long v9 = (const void *)v7(v9);
      }
      CFArraySetValueAtIndex(Mutable, v4++, v9);
      v8 += 5;
    }
    while (v4 != 5);
    *(void *)(v2 + 24) = Mutable;
    *(void *)(v2 + 16) = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

const void *IMDHandleRecordCreateFromRecordID_0(uint64_t a1, uint64_t a2)
{
  pthread_once(&stru_1EB5AB968, (void (*)(void))sub_1AFB9C24C);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 0;
  }
  CFIndex v4 = (const void *)Instance;
  *(void *)(Instance + 16) = a2;
  *(void *)(Instance + 24) = 0;
  id v5 = (const void *)IMDHandleRecordCopyHandleRecordUnlocked(a2);
  if (v5)
  {
    long long v6 = v4;
  }
  else
  {
    id v5 = v4;
    long long v6 = 0;
  }
  CFRelease(v5);
  return v6;
}

uint64_t IMDHandleRecordGetIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 16);
  }
  uint64_t v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    uint64_t v4 = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL handle record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDHandleRecordCopyID(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    long long v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66480(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1AFB9CC6C;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFB9CC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9CC6C(uint64_t a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDHandleRecordCopyCountry(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    long long v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC664F8(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1AFB9CE18;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 1);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFB9CE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9CE18(uint64_t a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDHandleRecordCopyUncanonicalizedID(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    long long v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66570(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1AFB9CFC4;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 3);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFB9CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9CFC4(uint64_t a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDHandleRecordCopyPersonCentricID(uint64_t a1, uint64_t a2)
{
  if (!a2 || (IMSharedHelperPersistMergeID() & 1) == 0)
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC665E8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a2 + 24);
  if (!v3)
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1AFB9D17C;
    v15[3] = &unk_1E5F90178;
    v15[4] = &v16;
    v15[5] = a2;
    _IMDPerformBlock((uint64_t)v15);
    CFNumberRef ValueAtIndex = (const void *)v17[3];
    _Block_object_dispose(&v16, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 4);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v5 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v5();
}

void sub_1AFB9D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9D17C(uint64_t a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFArrayRef v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

void IMDHandleRecordBulkCopy(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  if (a1)
  {
    CFArrayRef v12 = *(const __CFArray **)(a1 + 24);
    if (v12)
    {
      if (a2)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v12, 0);
        uint64_t v14 = ValueAtIndex;
        if (ValueAtIndex) {
          CFRetain(ValueAtIndex);
        }
        *a2 = v14;
      }
      if (a3)
      {
        uint64_t v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
        uint64_t v16 = v15;
        if (v15) {
          CFRetain(v15);
        }
        *a3 = v16;
      }
      if (a4)
      {
        uint64_t v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
        uint64_t v18 = v17;
        if (v17) {
          CFRetain(v17);
        }
        *a4 = v18;
      }
      if (a5)
      {
        uint64_t v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 3);
        char v20 = v19;
        if (v19) {
          CFRetain(v19);
        }
        *a5 = v20;
      }
      if (a6)
      {
        xpc_object_t v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
        char v22 = v21;
        if (v21) {
          CFRetain(v21);
        }
        *a6 = v22;
      }
    }
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = sub_1AFB9D388;
      v31[3] = &unk_1E5F93DC8;
      v31[4] = a1;
      v31[5] = a2;
      v31[6] = a3;
      v31[7] = a4;
      v31[8] = a5;
      v31[9] = a6;
      _IMDPerformBlock((uint64_t)v31);
    }
  }
  else
  {
    uint64_t v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66660(v23, v24, v25, v26, v27, v28, v29, v30);
    }
  }
}

void sub_1AFB9D388(uint64_t a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v2)
  {
    CFArrayRef v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 48) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 72) && IMSharedHelperPersistMergeID()) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    CFRelease(v3);
  }
}

void IMDHandleRecordBulkUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (IMOSLoggingEnabled())
      {
        CFArrayRef v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138413570;
          uint64_t v24 = a1;
          __int16 v25 = 2112;
          uint64_t v26 = a2;
          __int16 v27 = 2112;
          uint64_t v28 = a3;
          __int16 v29 = 2112;
          uint64_t v30 = a4;
          __int16 v31 = 2112;
          uint64_t v32 = a5;
          __int16 v33 = 2112;
          uint64_t v34 = a6;
          _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Updating handle: %@   ID: %@   Country: %@   Service: %@  Unformatted: %@ PersonCentricID: %@", buf, 0x3Eu);
        }
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = sub_1AFB9D690;
      v22[3] = &unk_1E5F93DC8;
      uint8_t v22[4] = a1;
      v22[5] = a2;
      v22[6] = a3;
      unsigned char v22[7] = a4;
      v22[8] = a5;
      v22[9] = a6;
      _IMDPerformBlock((uint64_t)v22);
    }
    else
    {
      int64_t v21 = *(void *)(a1 + 16);
      __syncXPCIMDHandleRecordBulkUpdate_IPCAction(0, v21, a2, a3, a4, a5, a6);
    }
  }
  else
  {
    uint64_t v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1AFC666D8(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
}

void sub_1AFB9D690(void *a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(a1[4] + 16));
  if (v2)
  {
    CFArrayRef v3 = (const void *)v2;
    if (a1[5]) {
      CSDBRecordSetProperty();
    }
    if (a1[6]) {
      CSDBRecordSetProperty();
    }
    if (a1[7]) {
      CSDBRecordSetProperty();
    }
    if (a1[8]) {
      CSDBRecordSetProperty();
    }
    if (a1[9]) {
      CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

const void *_IMDCopyIMDHandleRecordFromXPCObjectServer(void *a1)
{
  if (!a1) {
    return 0;
  }
  int64_t int64 = xpc_dictionary_get_int64(a1, "recordIdentifier");
  if (int64 < 1) {
    return 0;
  }
  return IMDHandleRecordCreateFromRecordID_0(0, int64);
}

xpc_object_t _IMDCopyXPCObjectFromIMDHandleRecordClient(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  CFIndex v3 = 0;
  uint64_t v4 = &off_1E5F93DE8;
  do
  {
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3)) {
      IMInsertNSStringsToXPCDictionary();
    }
    ++v3;
    v4 += 5;
  }
  while (v3 != 5);
  int64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    xpc_dictionary_set_int64(v2, "recordIdentifier", v5);
  }
  return v2;
}

id _IMDHandleRecordCopyHandlesFromRecords(void *a1)
{
  if (a1)
  {
    xpc_object_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a1, "count"));
    if ([a1 count])
    {
      unint64_t v3 = 0;
      uint64_t v4 = *MEMORY[0x1E4F1CF80];
      do
      {
        [a1 objectAtIndex:v3];
        int ID = CSDBRecordGetID();
        long long v6 = IMDHandleRecordCreateFromRecordID_0(v4, ID);
        if (v6)
        {
          uint64_t v7 = v6;
          [v2 addObject:v6];
          CFRelease(v7);
        }
        ++v3;
      }
      while (v3 < [a1 count]);
    }
    return v2;
  }
  else
  {
    uint64_t v9 = (objc_class *)MEMORY[0x1E4F1C978];
    return objc_alloc_init(v9);
  }
}

id _IMDHandleRecordCopyHandlesFromXPCArray(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:xpc_array_get_count(a1)];
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFB9DA2C;
    applier[3] = &unk_1E5F93EB8;
    applier[4] = v2;
    xpc_array_apply(a1, applier);
    return (id)v2;
  }
  else
  {
    uint64_t v4 = (objc_class *)MEMORY[0x1E4F1C978];
    return objc_alloc_init(v4);
  }
}

uint64_t sub_1AFB9DA2C(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDHandleRecordFromXPCObjectClient(a3);
  if (v6)
  {
    uint64_t v7 = (const void *)v6;
    [*(id *)(a1 + 32) addObject:v6];
    CFRelease(v7);
  }
  return 1;
}

void _IMDHandleRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a1)
    {
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_1AFB9DB70;
      v19[3] = &unk_1E5F93EE0;
      v19[4] = a2;
      v19[5] = a1;
      v19[6] = a1;
      if (a3) {
        _IMDPerformBlock((uint64_t)v19);
      }
      else {
        sub_1AFB9DB70((uint64_t)v19);
      }
    }
    else
    {
      uint64_t v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1AFC667C8(v11, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
  else
  {
    unint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC66750(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
}

void sub_1AFB9DB70(uint64_t a1)
{
  uint64_t v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    unint64_t v3 = (const void *)v2;
    uint64_t v4 = 0;
    uint64_t v5 = &off_1E5F93DE8;
    do
    {
      v5 += 5;
      CSDBRecordGetProperty();
      IMInsertNSStringsToXPCDictionary();
      v4 += 4;
    }
    while (v4 != 20);
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "recordIdentifier", *(void *)(*(void *)(a1 + 48) + 16));
    CFRelease(v3);
  }
}

BOOL IMDDeleteOrphanedHandles(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    _IMDSqlOperationBeginQuery(a1, @"DELETE FROM handle WHERE ROWID IN (SELECT ROWID FROM handle h1 WHERE ((SELECT 1 from chat_handle_join WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE other_handle = h1.ROWID LIMIT 1) IS NULL));");
    return IMDSqlOperationFinishQuery(a1);
  }
  else
  {
    uint64_t v3 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"op", "BOOL IMDDeleteOrphanedHandles(IMDSqlOperation *)", IMFileLocationTrimFileName(), 760, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v7 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    return 0;
  }
}

id IMDFindOrphanedHandleRowIDs(uint64_t a1)
{
  id result = _IMDSqlOperationGetRows(a1, @"SELECT ROWID FROM handle h1 WHERE ((SELECT 1 from chat_handle_join WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE other_handle = h1.ROWID LIMIT 1) IS NULL);");
  if (*(void *)(a1 + 168))
  {

    return 0;
  }
  return result;
}

uint64_t sub_1AFB9DE2C(uint64_t result)
{
  *(void *)(result + 16) = -1;
  return result;
}

void sub_1AFB9DE38(uint64_t a1)
{
  *(void *)(a1 + 16) = -1;
  if (*(void *)(a1 + 24))
  {
    CFIndex v2 = 0;
    uint64_t v3 = *(void (**)(void))(MEMORY[0x1E4F5D048] + 8);
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2)) {
        BOOL v4 = v3 == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4) {
        v3();
      }
      ++v2;
    }
    while (v2 != 5);
    uint64_t v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 24) = 0;
    }
  }
}

BOOL sub_1AFB9DEB8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_1AFB9DECC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFStringRef sub_1AFB9DED4(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<IMDHandleRecord %p [%p]>{}", a1, v3);
}

void sub_1AFB9E6F0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFB9E4E4);
  }
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1AFB9E784(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFB9E794(uint64_t a1)
{
}

void sub_1AFB9E79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 32)) {
    CSDBSqliteBindTextFromCFString();
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6) {
    [v6 bindParametersToSqliteWithStatement:a4];
  }
  CSDBSqliteBindInt64();
  id v10 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v7 = [*(id *)(a1 + 48) _copyMessageRecordsFromCoreSDBResults:v10];
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1AFB9EBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) bindParametersToSqliteWithStatement:a4];
  id v8 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v5 = [*(id *)(a1 + 40) _copyMessageRecordsFromCoreSDBResults:v8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1AFB9EEA8(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  id v6 = (id)CSDBRecordStoreProcessStatement();
  CFAllocatorRef v2 = (void *)[*(id *)(a1 + 40) _copyMessageRecordsFromCoreSDBResults:v6];
  uint64_t v3 = [v2 firstObject];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1AFB9F0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFB9F0C0(uint64_t a1)
{
  CFAllocatorRef v2 = *(void **)(a1 + 32);
  if (v2 && [v2 length]) {
    CSDBSqliteBindTextFromCFString();
  }
  CSDBSqliteBindInt64();
  id v6 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v3 = [*(id *)(a1 + 40) _copyMessageRecordsFromCoreSDBResults:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_1AFB9F22C()
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  return CSDBRecordStoreProcessStatement();
}

uint64_t sub_1AFB9F3CC()
{
  CSDBSqliteBindTextFromCFArrayOfCFStrings();
  return CSDBRecordStoreProcessStatement();
}

uint64_t sub_1AFB9F4EC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = [MEMORY[0x1E4F1C9C8] now];
  objc_msgSend(v2, "__im_nanosecondTimeInterval");
  CSDBSqliteBindInt64();

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        CSDBSqliteBindTextFromCFString();
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return CSDBSqliteStatementPerform();
}

void sub_1AFB9FE40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFB9FC88);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBA0C3C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBA0BA0);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBA1BC4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBA1BACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBA20C8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBA1FACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBA2868(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBA2810);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBA31B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBA31CC(uint64_t a1)
{
}

BOOL sub_1AFBA31D8(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFBA3284;
      v5[3] = &unk_1E5F90980;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBA3284(uint64_t a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)a2 + 4);
        LODWORD(v5) = 67109120;
        DWORD1(v5) = v4;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Unexpected column in count chat messages query with index %d", (uint8_t *)&v5, 8u);
      }
    }
  }
  else
  {
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
}

void sub_1AFBA38E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBA3900(uint64_t a1)
{
}

BOOL sub_1AFBA390C(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFBA39B8;
      v5[3] = &unk_1E5F90980;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBA39B8(uint64_t a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)a2 + 4);
        LODWORD(v5) = 67109120;
        DWORD1(v5) = v4;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Unexpected column in count chat messages query with index %d", (uint8_t *)&v5, 8u);
      }
    }
  }
  else
  {
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
}

void sub_1AFBA3C3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBA3C54(uint64_t a1)
{
}

BOOL sub_1AFBA3C60(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFBA3D0C;
      v5[3] = &unk_1E5F90980;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBA3D0C(uint64_t a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)a2 + 4);
        LODWORD(v5) = 67109120;
        DWORD1(v5) = v4;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Unexpected column in count chat messages query with index %d", (uint8_t *)&v5, 8u);
      }
    }
  }
  else
  {
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
}

void sub_1AFBA405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1AFBA4080(void *a1, uint64_t a2)
{
  CFStringRef v3 = (const __CFString *)a1[4];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFBA4148;
  v7[3] = &unk_1E5F90128;
  uint64_t v4 = a1[6];
  void v7[4] = a2;
  void v7[5] = v4;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFBA4154;
  v6[3] = &unk_1E5F90178;
  void v6[4] = a1[5];
  void v6[5] = a2;
  return _IMDSqlOperationRunQuery(a2, v3, (uint64_t)v7, (uint64_t)v6);
}

void sub_1AFBA4148(uint64_t a1)
{
}

BOOL sub_1AFBA4154(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    *(void *)&long long v3 = 138413314;
    long long v19 = v3;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = &v45;
      uint64_t v47 = 0x3032000000;
      uint64_t v48 = sub_1AFB9E784;
      id v49 = sub_1AFB9E794;
      id v50 = 0;
      uint64_t v41 = 0;
      int64_t v42 = &v41;
      uint64_t v43 = 0x2020000000;
      uint64_t v44 = -1;
      uint64_t v35 = 0;
      uint64_t v36 = &v35;
      uint64_t v37 = 0x3032000000;
      char v38 = sub_1AFB9E784;
      uint64_t v39 = sub_1AFB9E794;
      id v40 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = &v31;
      uint64_t v33 = 0x2020000000;
      uint64_t v34 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = &v27;
      uint64_t v29 = 0x2020000000;
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v21 = 0;
      char v22 = &v21;
      uint64_t v23 = 0x3032000000;
      uint64_t v24 = sub_1AFB9E784;
      __int16 v25 = sub_1AFB9E794;
      id v26 = 0;
      uint64_t v5 = *(void *)(a1 + 40);
      v20[0] = v4;
      v20[1] = 3221225472;
      v20[2] = sub_1AFBA46D4;
      v20[3] = &unk_1E5F94110;
      v20[4] = &v45;
      v20[5] = &v41;
      v20[6] = &v35;
      void v20[7] = &v31;
      v20[8] = &v27;
      v20[9] = &v21;
      IMDSqlOperationIterateRow(v5, (uint64_t)v20);
      if ([(id)v46[5] length]
        && v42[3] != -1
        && [(id)v36[5] length]
        && v32[3]
        && v28[3] != 0x7FFFFFFFFFFFFFFFLL)
      {
        v52[0] = v46[5];
        v51[0] = @"chatGUID";
        v51[1] = @"messageRowID";
        long long v12 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v42[3]];
        uint64_t v13 = v36[5];
        v52[1] = v12;
        v52[2] = v13;
        v51[2] = @"messageGUID";
        v51[3] = @"deleteDateInterval";
        uint64_t v14 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v32[3]];
        v52[3] = v14;
        v51[4] = @"partIndex";
        uint64_t v15 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v28[3]];
        v52[4] = v15;
        uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 forKeys:v51 count:5];
        uint64_t v17 = (void *)[v16 mutableCopy];

        if (v22[5])
        {
          uint64_t v18 = JWDecodeCodableObjectWithStandardAllowlist();
          [v17 setObject:v18 forKeyedSubscript:@"partBody"];
        }
        objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "addObject:", v17, v19);
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = v46[5];
          id v8 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v42[3]];
          uint64_t v9 = v36[5];
          long long v10 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v32[3]];
          long long v11 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v28[3]];
          *(_DWORD *)uint8_t buf = v19;
          uint64_t v54 = v7;
          __int16 v55 = 2112;
          uint64_t v56 = v8;
          __int16 v57 = 2112;
          uint64_t v58 = v9;
          __int16 v59 = 2112;
          uint64_t v60 = v10;
          __int16 v61 = 2112;
          uint64_t v62 = v11;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Recently Deleted | Error in column values returned: %@|%@|%@|%@|%@", buf, 0x34u);
        }
      }
      _Block_object_dispose(&v21, 8);

      _Block_object_dispose(&v27, 8);
      _Block_object_dispose(&v31, 8);
      _Block_object_dispose(&v35, 8);

      _Block_object_dispose(&v41, 8);
      _Block_object_dispose(&v45, 8);

      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBA4670()
{
}

void sub_1AFBA46D4(void *a1, long long *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
      uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v17);
      uint64_t v5 = *(void *)(a1[4] + 8);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      return;
    case 1:
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v17);
      uint64_t v10 = a1[5];
      goto LABEL_11;
    case 2:
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
      long long v11 = IMDStringFromSqlColumn((uint64_t)&v17);
      uint64_t v12 = *(void *)(a1[6] + 8);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      return;
    case 3:
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v17);
      uint64_t v10 = a1[7];
      goto LABEL_11;
    case 4:
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v17);
      uint64_t v10 = a1[8];
LABEL_11:
      *(void *)(*(void *)(v10 + 8) + 24) = v9;
      break;
    case 5:
      long long v17 = *a2;
      uint64_t v18 = *((void *)a2 + 2);
      CFDataRef v14 = IMDBlobFromSqlColumn((uint64_t)&v17);
      uint64_t v15 = *(void *)(a1[9] + 8);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      break;
    default:
      if (IMOSLoggingEnabled())
      {
        uint64_t v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = *((_DWORD *)a2 + 4);
          LODWORD(v17) = 67109120;
          DWORD1(v17) = v8;
          _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Recently Deleted | Unexpected column in messages pending update query with index %d", (uint8_t *)&v17, 8u);
        }
      }
      break;
  }
}

void sub_1AFBA4B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1AFBA4B2C(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFBA4BF8;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFBA4C04;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT urrm.chat_guid, urrm.message_guid, urrm.part_index FROM unsynced_removed_recoverable_messages AS urrm LIMIT ?;",
           (uint64_t)v5,
           (uint64_t)v4);
}

void sub_1AFBA4BF8(uint64_t a1)
{
}

BOOL sub_1AFBA4C04(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v24 = 0;
      __int16 v25 = &v24;
      uint64_t v26 = 0x3032000000;
      uint64_t v27 = sub_1AFB9E784;
      uint64_t v28 = sub_1AFB9E794;
      id v29 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = &v18;
      uint64_t v20 = 0x3032000000;
      uint64_t v21 = sub_1AFB9E784;
      char v22 = sub_1AFB9E794;
      id v23 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x2020000000;
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = *(void *)(a1 + 40);
      v13[0] = v3;
      v13[1] = 3221225472;
      v13[2] = sub_1AFBA4FB0;
      v13[3] = &unk_1E5F94160;
      v13[4] = &v24;
      v13[5] = &v18;
      void v13[6] = &v14;
      IMDSqlOperationIterateRow(v4, (uint64_t)v13);
      if ([(id)v25[5] length] && objc_msgSend((id)v19[5], "length") && v15[3] != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = v25[5];
        v30[0] = @"chatGUID";
        v30[1] = @"messageGUID";
        uint64_t v10 = v19[5];
        v31[0] = v9;
        v31[1] = v10;
        v30[2] = @"partIndex";
        long long v11 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:");
        v31[2] = v11;
        uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:v30 count:3];

        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v12];
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          uint64_t v6 = v25[5];
          uint64_t v7 = v19[5];
          int v8 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v15[3]];
          *(_DWORD *)uint8_t buf = 138412802;
          uint64_t v33 = v6;
          __int16 v34 = 2112;
          uint64_t v35 = v7;
          __int16 v36 = 2112;
          uint64_t v37 = v8;
          _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Error in column values returned: %@|%@|%@", buf, 0x20u);
        }
      }
      _Block_object_dispose(&v14, 8);
      _Block_object_dispose(&v18, 8);

      _Block_object_dispose(&v24, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBA4F74()
{
}

void sub_1AFBA4FB0(void *a1, long long *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 4);
  if (v4 == 2)
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    *(void *)(*(void *)(a1[6] + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v13);
  }
  else if (v4 == 1)
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    int v8 = IMDStringFromSqlColumn((uint64_t)&v13);
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      long long v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = *((_DWORD *)a2 + 4);
        LODWORD(v13) = 67109120;
        DWORD1(v13) = v12;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Recently Deleted | Unexpected column in messages pending delete query with index %d", (uint8_t *)&v13, 8u);
      }
    }
  }
  else
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    uint64_t v5 = IMDStringFromSqlColumn((uint64_t)&v13);
    uint64_t v6 = *(void *)(a1[4] + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

void sub_1AFBA5D44(_Unwind_Exception *a1)
{
}

void sub_1AFBA5FC4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1AFBA5FE4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1AFBA5FFC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1AFBA6014(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

uint64_t sub_1AFBA6070(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1AFBA6084(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_1AFBA60A4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_1AFBA6398(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)CPCopySharedResourcesPreferencesDomainForDomain();
  if (v2)
  {
    CFStringRef v3 = v2;
    CFPreferencesAppSynchronize(v2);
    CFPreferencesSetAppValue(@"IMCSIndexReason", (CFPropertyListRef)[MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a1], v3);
    CFRelease(v3);
  }
}

id sub_1AFBA6414()
{
  CFStringRef v0 = (const __CFString *)CPCopySharedResourcesPreferencesDomainForDomain();
  if (v0)
  {
    CFStringRef v1 = v0;
    CFPreferencesAppSynchronize(v0);
    CFStringRef v2 = (void *)CFPreferencesCopyAppValue(@"IMDCoreSpotlightLastFullReindexRequestTime", v1);
    CFRelease(v1);
  }
  else
  {
    CFStringRef v2 = 0;
  }
  return v2;
}

uint64_t sub_1AFBA7438(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBA7448(uint64_t a1)
{
}

void sub_1AFBA7450(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  unint64_t v15 = a5;
  unint64_t v16 = a6;
  id v17 = a7;
  int v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      int v36 = 138412802;
      uint64_t v37 = v20;
      __int16 v38 = 2112;
      unint64_t v39 = v15;
      __int16 v40 = 2112;
      unint64_t v41 = v16;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v36, 0x20u);
    }
  }
  else
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      int v36 = 138412802;
      uint64_t v37 = v21;
      __int16 v38 = 2112;
      unint64_t v39 = (unint64_t)v14;
      __int16 v40 = 2112;
      unint64_t v41 = (unint64_t)v17;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with GUID %@. suggestedRetryGUID: %@ Error: %@", (uint8_t *)&v36, 0x20u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    char v22 = [(id)v15 pathExtension];
    uint64_t v23 = IMUTITypeForExtension();
    uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8);
    __int16 v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;

    if (v16) {
      uint64_t v26 = (void *)v16;
    }
    else {
      uint64_t v26 = (void *)v15;
    }
    id v27 = v26;
    uint64_t v28 = [objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v27];
    uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;

    if (v16 && IMOSLoggingEnabled())
    {
      uint64_t v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        int v36 = 138412290;
        uint64_t v37 = v32;
        _os_log_impl(&dword_1AFB53000, v31, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@", (uint8_t *)&v36, 0xCu);
      }
    }
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a4);
  if (v17)
  {
    uint64_t v33 = [*(id *)(a1 + 32) _createErrorFromSyncError:v17];
    uint64_t v34 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v35 = *(void **)(v34 + 40);
    *(void *)(v34 + 40) = v33;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1AFBA7778(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  unint64_t v15 = a5;
  unint64_t v16 = a6;
  id v17 = a7;
  int v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v33 = 138412802;
      uint64_t v34 = v20;
      __int16 v35 = 2112;
      unint64_t v36 = v15;
      __int16 v37 = 2112;
      unint64_t v38 = v16;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with secondary GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v33, 0x20u);
    }
  }
  else
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v33 = 138412546;
      uint64_t v34 = v21;
      __int16 v35 = 2112;
      unint64_t v36 = (unint64_t)v17;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with secondary GUID %@. Error: %@", (uint8_t *)&v33, 0x16u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    char v22 = [(id)v15 pathExtension];
    uint64_t v23 = IMUTITypeForExtension();
    uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8);
    __int16 v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;

    if (v16) {
      uint64_t v26 = (void *)v16;
    }
    else {
      uint64_t v26 = (void *)v15;
    }
    id v27 = v26;
    uint64_t v28 = [objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v27];
    uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;

    if (v16 && IMOSLoggingEnabled())
    {
      uint64_t v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v33 = 138412290;
        uint64_t v34 = v32;
        _os_log_impl(&dword_1AFB53000, v31, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@", (uint8_t *)&v33, 0xCu);
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1AFBA8B44(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  unint64_t v15 = a5;
  unint64_t v16 = a6;
  id v17 = a7;
  int v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      int v28 = 138412802;
      id v29 = v13;
      __int16 v30 = 2112;
      unint64_t v31 = v15;
      __int16 v32 = 2112;
      unint64_t v33 = v16;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v28, 0x20u);
    }
  }
  else
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      int v28 = 138412802;
      id v29 = v13;
      __int16 v30 = 2112;
      unint64_t v31 = (unint64_t)v14;
      __int16 v32 = 2112;
      unint64_t v33 = (unint64_t)v17;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with GUID %@. suggestedRetryGUID: %@ Error: %@", (uint8_t *)&v28, 0x20u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    uint64_t v20 = [(id)v15 pathExtension];
    uint64_t v21 = IMUTITypeForExtension();
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v21 forKeyedSubscript:v13];

    if (v16) {
      char v22 = (void *)v16;
    }
    else {
      char v22 = (void *)v15;
    }
    id v23 = v22;
    uint64_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v23];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v24 forKeyedSubscript:v13];

    if (v16 && IMOSLoggingEnabled())
    {
      __int16 v25 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKeyedSubscript:v13];
        int v28 = 138412546;
        id v29 = v26;
        __int16 v30 = 2112;
        unint64_t v31 = (unint64_t)v13;
        _os_log_impl(&dword_1AFB53000, v25, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@ for file transfer guid: %@", (uint8_t *)&v28, 0x16u);
      }
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v14 forKeyedSubscript:v13];
  if (v17)
  {
    id v27 = [*(id *)(a1 + 32) _createErrorFromSyncError:v17];
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v27 forKeyedSubscript:v13];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) addObject:v13];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1AFBA8EB4(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  unint64_t v15 = a5;
  unint64_t v16 = a6;
  id v17 = a7;
  int v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      int v27 = 138412802;
      id v28 = v13;
      __int16 v29 = 2112;
      unint64_t v30 = v15;
      __int16 v31 = 2112;
      unint64_t v32 = v16;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with secondary GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v27, 0x20u);
    }
  }
  else
  {
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      int v27 = 138412546;
      id v28 = v13;
      __int16 v29 = 2112;
      unint64_t v30 = (unint64_t)v17;
      _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with secondary GUID %@. Error: %@", (uint8_t *)&v27, 0x16u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    uint64_t v20 = [(id)v15 pathExtension];
    uint64_t v21 = IMUTITypeForExtension();
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v21 forKeyedSubscript:v13];

    if (v16) {
      char v22 = (void *)v16;
    }
    else {
      char v22 = (void *)v15;
    }
    id v23 = v22;
    uint64_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v23];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v24 forKeyedSubscript:v13];

    if (v16 && IMOSLoggingEnabled())
    {
      __int16 v25 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        uint64_t v26 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:v13];
        int v27 = 138412546;
        id v28 = v26;
        __int16 v29 = 2112;
        unint64_t v30 = (unint64_t)v13;
        _os_log_impl(&dword_1AFB53000, v25, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@ for file transfer guid: %@", (uint8_t *)&v27, 0x16u);
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1AFBA9A48(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBA94C0);
  }
  _Unwind_Resume(a1);
}

id IMDAttachmentRecordGetAttachmentDiagnosticInfo()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v0 = [MEMORY[0x1E4F1CA48] array];
    memset(v8, 0, sizeof(v8));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v8);
    _IMDSqlOperationBeginQuery((uint64_t)v8, @"SELECT guid, original_guid, uti, filename, total_bytes, ck_sync_state, transfer_state, hide_attachment, is_sticker, mime_type, attribution_info FROM attachment;");
    while (IMDSqlOperationHasRows((uint64_t)v8))
    {
      CFStringRef v1 = objc_alloc_init(IMDAttachmentDiagnosticInfo);
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = sub_1AFBAA47C;
      v6[3] = &unk_1E5F950B0;
      uint64_t v7 = v1;
      CFStringRef v2 = v1;
      IMDSqlOperationIterateRow((uint64_t)v8, (uint64_t)v6);
      [v0 addObject:v2];
    }
    IMDSqlOperationFinishQuery((uint64_t)v8);
    IMDSqlOperationRelease((uint64_t)v8, 0);
    CFStringRef v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = [v0 count];
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v10 = v4;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Loaded %ld IMDAttachment info objects from database", buf, 0xCu);
    }
  }
  else
  {
    CFStringRef v0 = 0;
  }
  return v0;
}

void sub_1AFBAA47C(uint64_t a1, long long *a2)
{
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      CFStringRef v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      [*(id *)(a1 + 32) setGuid:v3];
      goto LABEL_16;
    case 1:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      CFStringRef v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      [*(id *)(a1 + 32) setOriginalGUID:v3];
      goto LABEL_16;
    case 2:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      CFStringRef v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      [*(id *)(a1 + 32) setUti:v3];
      goto LABEL_16;
    case 3:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      CFStringRef v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      uint64_t v4 = [v3 stringByExpandingTildeInPath];
      [*(id *)(a1 + 32) setFilePath:v4];
      goto LABEL_15;
    case 4:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setTotal_bytes:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 5:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setCk_sync_state:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 6:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setTransfer_state:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 7:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setHide_attachment:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 8:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setIs_sticker:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 9:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      CFStringRef v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      objc_msgSend(*(id *)(a1 + 32), "setMime_type:", v3);
      goto LABEL_16;
    case 0xA:
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      CFStringRef v3 = IMDBlobFromSqlColumn((uint64_t)&v7);
      if (!v3) {
        goto LABEL_16;
      }
      uint64_t v5 = JWDecodeDictionary();
      uint64_t v4 = v5;
      if (v5)
      {
        uint64_t v6 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F6D3E0]];
        objc_msgSend(*(id *)(a1 + 32), "setPlugin_identifier:", v6);
      }
LABEL_15:

LABEL_16:
      return;
    default:
      return;
  }
}

uint64_t IMDDatabaseTriggers()
{
  if (qword_1EB5ABC80 != -1) {
    dispatch_once(&qword_1EB5ABC80, &unk_1F084CD80);
  }
  return qword_1EB5ABC88;
}

void sub_1AFBAA760()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  CFStringRef v1 = @"before_delete_on_attachment";
  qword_1EB5ABC88 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  do
  {
    if ((IMAllowMessagesIniCloud() & 1) == 0
      && (([(__CFString *)v1 isEqualToString:@"add_to_sync_deleted_messages"] & 1) != 0
       || [(__CFString *)v1 isEqualToString:@"add_to_sync_deleted_attachments"]))
    {
      if (IMOSLoggingEnabled())
      {
        CFStringRef v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v5 = v1;
          _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Not adding trigger for external builds %@", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v2 = [NSString stringWithFormat:@"CREATE TRIGGER IF NOT EXISTS %@ %@", v1, off_1E5F950D0[v0 + 1]];
      [(id)qword_1EB5ABC88 setObject:v2 forKey:v1];
    }
    CFStringRef v1 = off_1E5F950D0[v0 + 2];
    v0 += 2;
  }
  while (v0 != 36);
}

BOOL IMDDropAllTriggersWithOperation(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1AFBAAB7C;
  v17[3] = &unk_1E5F8FF78;
  v17[4] = v4;
  v17[5] = a1;
  _IMDSqlOperationRunQuery(a1, @"SELECT name FROM sqlite_master WHERE type = 'trigger'", 0, (uint64_t)v17);
  if (!*(void *)(a1 + 168))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v22 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)[NSString stringWithFormat:@"DROP TRIGGER IF EXISTS %@", v9], 0, 0))
          {
            uint64_t v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              uint64_t v12 = IMDSqlOperationErrorDescription(a1);
              *(_DWORD *)uint8_t buf = 138412546;
              uint64_t v19 = v9;
              __int16 v20 = 2112;
              uint64_t v21 = v12;
              _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Dropped trigger failed: %@: %@", buf, 0x16u);
            }
            return *(void *)(a1 + 168) == 0;
          }
          if (a2)
          {
            uint64_t v10 = IMLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              uint64_t v19 = v9;
              _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Dropped trigger: %@", buf, 0xCu);
            }
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v22 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
  }
  return *(void *)(a1 + 168) == 0;
}

BOOL sub_1AFBAAB7C(uint64_t a1)
{
  for (BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40)); result; BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40)))
  {
    IMDSqlOperationColumnByIndex(*(void *)(a1 + 40), 0, (uint64_t)v4);
    CFStringRef v3 = IMDStringFromSqlColumn((uint64_t)v4);
    [*(id *)(a1 + 32) addObject:v3];
    if (v3) {
      CFRelease(v3);
    }
  }
  return result;
}

BOOL IMDDropAllTriggers(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBAAC60;
  v3[3] = &unk_1E5F95200;
  char v4 = a2;
  void v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1AFBAAC60(uint64_t a1, uint64_t a2)
{
  IMDDropAllTriggersWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  char v4 = *(void **)(a1 + 32);
  return IMDSqlOperationGetError(a2, v4);
}

uint64_t IMDSelectAllTriggers(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3052000000;
  uint64_t v8 = sub_1AFBAAD9C;
  uint64_t v9 = sub_1AFBAADAC;
  uint64_t v10 = 0;
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFBAADB8;
  v4[3] = &unk_1E5F901A0;
  void v4[4] = &v5;
  void v4[5] = a1;
  IMDRunSqlOperation((uint64_t)v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1AFBAAD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBAAD9C(uint64_t a1, uint64_t a2)
{
}

void sub_1AFBAADAC(uint64_t a1)
{
}

uint64_t sub_1AFBAADB8(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFBAAE7C;
  v5[3] = &unk_1E5F90178;
  void v5[4] = *(void *)(a1 + 32);
  void v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, @"select * from sqlite_master where type = 'trigger'", 0, (uint64_t)v5);
  CFRelease(@"select * from sqlite_master where type = 'trigger'");
  uint64_t result = IMDSqlOperationGetError(a2, *(void **)(a1 + 40));
  if (result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
  }
  return result;
}

BOOL sub_1AFBAAE7C(uint64_t a1)
{
  for (BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40)); result; BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40)))
  {
    uint64_t v3 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v4 = *(void *)(a1 + 40);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFBAAF4C;
    v5[3] = &unk_1E5F95228;
    void v5[4] = v3;
    IMDSqlOperationIterateRow(v4, (uint64_t)v5);
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v3];
  }
  return result;
}

void sub_1AFBAAF4C(uint64_t a1, long long *a2)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v9);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = NSString;
  uint64_t v7 = (const char *)*((void *)a2 + 1);
  if (!v7)
  {
    uint64_t v8 = **(sqlite3_stmt ***)a2;
    if (v8)
    {
      uint64_t v7 = sqlite3_column_name(v8, *((_DWORD *)a2 + 4));
      *((void *)a2 + 1) = v7;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  objc_msgSend(v5, "setObject:forKey:", v4, objc_msgSend(v6, "stringWithCString:encoding:", v7, 4));
  CFRelease(v4);
}

BOOL IMDCreateTriggersWithOperation(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *(_OWORD *)uint64_t v24 = xmmword_1E5F95248;
    *(_OWORD *)&v24[16] = *(_OWORD *)off_1E5F95258;
    uint64_t v25 = 174;
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "BOOL IMDCreateTriggersWithOperation(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 174, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v23 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (qword_1EB5ABC80 != -1) {
    dispatch_once(&qword_1EB5ABC80, &unk_1F084CD80);
  }
  uint64_t v7 = (void *)qword_1EB5ABC88;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v8 = [(id)qword_1EB5ABC88 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        CFStringRef v12 = (const __CFString *)[v7 objectForKey:v11];
        if (!_IMDSqlOperationRunQuery(a1, v12, 0, 0))
        {
          long long v15 = IMLogHandleForCategory();
          BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
          if (result)
          {
            uint64_t v16 = IMDSqlOperationErrorDescription(a1);
            *(_DWORD *)uint64_t v24 = 138412546;
            *(void *)&v24[4] = v11;
            *(_WORD *)&v24[12] = 2112;
            *(void *)&v24[14] = v16;
            _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Create trigger failed: %@: %@", v24, 0x16u);
            return 0;
          }
          return result;
        }
        if (a2)
        {
          long long v13 = IMLogHandleForCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v24 = 138412546;
            *(void *)&v24[4] = v11;
            *(_WORD *)&v24[12] = 2112;
            *(void *)&v24[14] = v12;
            _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Created trigger ok: %@, trigger: %@", v24, 0x16u);
          }
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
  return 1;
}

BOOL IMDDropTriggersWithTriggerNames(void *a1, int a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v23 = xmmword_1E5F95270;
    long long v24 = *(_OWORD *)off_1E5F95280;
    uint64_t v3 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"names", "BOOL IMDDropTriggersWithTriggerNames(NSArray *, BOOL)", IMFileLocationTrimFileName(), 194, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v35 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v23);
  IMDSqlOperationBeginTransaction(&v23);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v6 = [a1 countByEnumeratingWithState:&v19 objects:v38 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v10 = (__CFString *)[[NSString alloc] initWithFormat:@"DROP TRIGGER IF EXISTS %@", v9];
        _IMDSqlOperationBeginQuery((uint64_t)&v23, v10);

        IMDSqlOperationFinishQuery((uint64_t)&v23);
        if (*((void *)&v33 + 1))
        {
          uint64_t v11 = IMLogHandleForCategory();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
            continue;
          }
          uint64_t v12 = IMDSqlOperationErrorDescription((uint64_t)&v23);
          *(_DWORD *)uint8_t buf = 138412546;
          uint64_t v35 = v9;
          __int16 v36 = 2112;
          uint64_t v37 = v12;
          long long v13 = v11;
          long long v14 = "dropping trigger failed: %@: %@";
          uint32_t v15 = 22;
          goto LABEL_18;
        }
        if (a2)
        {
          uint64_t v16 = IMLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            uint64_t v35 = v9;
            long long v13 = v16;
            long long v14 = "dropped trigger ok: %@";
            uint32_t v15 = 12;
LABEL_18:
            _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, v14, buf, v15);
            continue;
          }
        }
      }
      uint64_t v6 = [a1 countByEnumeratingWithState:&v19 objects:v38 count:16];
    }
    while (v6);
  }
  IMDSqlOperationCommitOrRevertTransaction(&v23);
  return IMDSqlOperationRelease((uint64_t)&v23, 0);
}

BOOL IMDCreateTriggersWithTriggerNames(void *a1, int a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v25 = xmmword_1E5F95298;
    long long v26 = *(_OWORD *)off_1E5F952A8;
    uint64_t v3 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"names", "BOOL IMDCreateTriggersWithTriggerNames(NSArray *, BOOL)", IMFileLocationTrimFileName(), 221, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v37 = (const char *)v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v25);
  IMDSqlOperationBeginTransaction(&v25);
  if (qword_1EB5ABC80 != -1) {
    dispatch_once(&qword_1EB5ABC80, &unk_1F084CD80);
  }
  uint64_t v6 = (void *)qword_1EB5ABC88;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v7 = [a1 countByEnumeratingWithState:&v21 objects:v44 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(a1);
        }
        uint64_t v10 = *(const char **)(*((void *)&v21 + 1) + 8 * i);
        CFStringRef v11 = (const __CFString *)[v6 objectForKey:v10];
        if (v11)
        {
          _IMDSqlOperationBeginQuery((uint64_t)&v25, v11);
          IMDSqlOperationFinishQuery((uint64_t)&v25);
          if (*((void *)&v35 + 1))
          {
            uint64_t v12 = IMLogHandleForCategory();
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
              continue;
            }
            uint64_t v13 = IMDSqlOperationErrorDescription((uint64_t)&v25);
            *(_DWORD *)uint8_t buf = 138412546;
            uint64_t v37 = v10;
            __int16 v38 = 2112;
            uint64_t v39 = (const char *)v13;
            long long v14 = v12;
            uint32_t v15 = "Create trigger failed: %@: %@";
            goto LABEL_23;
          }
          if (a2)
          {
            long long v18 = IMLogHandleForCategory();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412546;
              uint64_t v37 = v10;
              __int16 v38 = 2112;
              uint64_t v39 = (const char *)v11;
              long long v14 = v18;
              uint32_t v15 = "Created trigger ok: %@ trigger %@";
LABEL_23:
              _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, v15, buf, 0x16u);
              continue;
            }
          }
        }
        else
        {
          uint64_t v16 = IMLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = [NSString stringWithFormat:&stru_1F084E970];
            *(_DWORD *)uint8_t buf = 136315906;
            uint64_t v37 = "sql";
            __int16 v38 = 2080;
            uint64_t v39 = "BOOL IMDCreateTriggersWithTriggerNames(NSArray *, BOOL)";
            __int16 v40 = 1024;
            int v41 = 230;
            __int16 v42 = 2112;
            uint64_t v43 = v17;
            _os_log_error_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_ERROR, "ASSERTION FAILED: %s is unexpectedly nil in \"%s\" at line %d [%@]", buf, 0x26u);
          }
        }
      }
      uint64_t v7 = [a1 countByEnumeratingWithState:&v21 objects:v44 count:16];
    }
    while (v7);
  }
  IMDSqlOperationCommitOrRevertTransaction(&v25);
  return IMDSqlOperationRelease((uint64_t)&v25, 0);
}

BOOL IMDCreateTriggers(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBABB00;
  v3[3] = &unk_1E5F95200;
  char v4 = a2;
  void v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1AFBABB00(uint64_t a1, uint64_t a2)
{
  IMDCreateTriggersWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  char v4 = *(void **)(a1 + 32);
  return IMDSqlOperationGetError(a2, v4);
}

id IMDSpotlightPriorityIndexerClasses()
{
  v2[9] = *MEMORY[0x1E4F143B8];
  v2[0] = objc_opt_class();
  v2[1] = objc_opt_class();
  v2[2] = objc_opt_class();
  v2[3] = objc_opt_class();
  v2[4] = objc_opt_class();
  v2[5] = objc_opt_class();
  v2[6] = objc_opt_class();
  v2[7] = objc_opt_class();
  v2[8] = objc_opt_class();
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:9];
  return v0;
}

void sub_1AFBABD8C()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_fromMe" searchable:1 searchableByDefault:0 unique:1 multiValued:0];
  CFStringRef v1 = (void *)qword_1E9AF8010;
  qword_1E9AF8010 = v0;
}

void sub_1AFBABE38()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_businessChat" searchable:1 searchableByDefault:0 unique:1 multiValued:0];
  CFStringRef v1 = (void *)qword_1EB5ABBA8;
  qword_1EB5ABBA8 = v0;
}

void sub_1AFBABEE4()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_mentionedAddresses" searchable:1 searchableByDefault:0 unique:1 multiValued:0];
  CFStringRef v1 = (void *)qword_1EB5ABAC8;
  qword_1EB5ABAC8 = v0;
}

void sub_1AFBABF90()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_chatUniqueIdentifier" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  CFStringRef v1 = (void *)qword_1EB5ABA00;
  qword_1EB5ABA00 = v0;
}

void sub_1AFBAC03C()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_chatIsMuted" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  CFStringRef v1 = (void *)qword_1E9AF7FF8;
  qword_1E9AF7FF8 = v0;
}

void sub_1AFBAC1E0()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_suggested_contact_name" searchable:0 searchableByDefault:0 unique:0 multiValued:0];
  CFStringRef v1 = (void *)qword_1E9AF8070;
  qword_1E9AF8070 = v0;
}

void sub_1AFBAC28C()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_suggested_contact_photo" searchable:0 searchableByDefault:0 unique:0 multiValued:0];
  CFStringRef v1 = (void *)qword_1E9AF8080;
  qword_1E9AF8080 = v0;
}

void sub_1AFBAC338()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_groupPhotoPath" searchable:0 searchableByDefault:0 unique:0 multiValued:0];
  CFStringRef v1 = (void *)qword_1EB5ABB98;
  qword_1EB5ABB98 = v0;
}

void sub_1AFBAD9C8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    uint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC67F68((uint64_t)v2, v3);
    }
  }
}

id sub_1AFBADA28(uint64_t a1, void *a2)
{
  id v2 = [a2 handles];
  uint64_t v3 = [v2 firstObject];

  return v3;
}

void sub_1AFBAEC8C()
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  [v2 addObject:sub_1AFBAED94()];
  [v2 addObject:sub_1AFBAEE78()];
  [v2 addObject:sub_1AFBAEF5C()];
  [v2 addObject:sub_1AFBAF040()];
  [v2 addObject:sub_1AFBAF124()];
  [v2 addObject:sub_1AFBAF208()];
  [v2 addObject:sub_1AFBAF2EC()];
  [v2 addObject:sub_1AFBAF3D0()];
  [v2 addObject:sub_1AFBAF4B4()];
  [v2 addObject:sub_1AFBAF598()];
  [v2 addObject:sub_1AFBAF67C()];
  uint64_t v0 = [v2 copy];
  CFStringRef v1 = (void *)qword_1E9AF8090;
  qword_1E9AF8090 = v0;
}

id sub_1AFBAED94()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8100;
  uint64_t v7 = qword_1E9AF8100;
  if (!qword_1E9AF8100)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4770;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4770((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAEE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAEE78()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8110;
  uint64_t v7 = qword_1E9AF8110;
  if (!qword_1E9AF8110)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4930;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4930((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAEF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAEF5C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8118;
  uint64_t v7 = qword_1E9AF8118;
  if (!qword_1E9AF8118)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4988;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4988((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF040()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8120;
  uint64_t v7 = qword_1E9AF8120;
  if (!qword_1E9AF8120)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB49E0;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB49E0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF124()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8128;
  uint64_t v7 = qword_1E9AF8128;
  if (!qword_1E9AF8128)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4A38;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4A38((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF208()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8130;
  uint64_t v7 = qword_1E9AF8130;
  if (!qword_1E9AF8130)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4A90;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4A90((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF2EC()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8138;
  uint64_t v7 = qword_1E9AF8138;
  if (!qword_1E9AF8138)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4AE8;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4AE8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF3D0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8140;
  uint64_t v7 = qword_1E9AF8140;
  if (!qword_1E9AF8140)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4B40;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4B40((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF4B4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8148;
  uint64_t v7 = qword_1E9AF8148;
  if (!qword_1E9AF8148)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4B98;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4B98((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF598()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8150;
  uint64_t v7 = qword_1E9AF8150;
  if (!qword_1E9AF8150)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4BF0;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4BF0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAF67C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8158;
  uint64_t v7 = qword_1E9AF8158;
  if (!qword_1E9AF8158)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4C48;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4C48((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAF748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAFA58()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8160;
  uint64_t v7 = qword_1E9AF8160;
  if (!qword_1E9AF8160)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4CA0;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4CA0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAFB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBAFB3C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9AF8168;
  uint64_t v7 = qword_1E9AF8168;
  if (!qword_1E9AF8168)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB4CF8;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB4CF8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBAFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBB008C()
{
  if (objc_opt_respondsToSelector())
  {
    uint64_t v0 = 0;
  }
  else if (objc_opt_respondsToSelector())
  {
    uint64_t v0 = 1;
  }
  else
  {
    id v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT)) {
      sub_1AFC68024(v1);
    }

    uint64_t v0 = 2;
  }
  qword_1E9AF80A0 = v0;
}

void sub_1AFBB083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBB1108()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_lpDescription" searchable:1 searchableByDefault:0 unique:0 multiValued:0];
  id v1 = (void *)qword_1E9AF80B0;
  qword_1E9AF80B0 = v0;
}

void sub_1AFBB17F4()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_lpRichMedia" searchable:1 searchableByDefault:0 unique:1 multiValued:0];
  id v1 = (void *)qword_1E9AF80C0;
  qword_1E9AF80C0 = v0;
}

void sub_1AFBB18A0()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_lpPluginPaths" searchable:0 searchableByDefault:0 unique:1 multiValued:1];
  id v1 = (void *)qword_1E9AF80D0;
  qword_1E9AF80D0 = v0;
}

void sub_1AFBB4068()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_isSyndicatableMedia" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  id v1 = (void *)qword_1EB5ABB68;
  qword_1EB5ABB68 = v0;
}

void sub_1AFBB4114()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_livePhotoComplementPath" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  id v1 = (void *)qword_1EB5ABB58;
  qword_1EB5ABB58 = v0;
}

void sub_1AFBB41C0()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_momentShareURL" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  id v1 = (void *)qword_1E9AF80E0;
  qword_1E9AF80E0 = v0;
}

void sub_1AFBB426C()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_PHAssetUUID" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  id v1 = (void *)qword_1E9AF80F0;
  qword_1E9AF80F0 = v0;
}

Class sub_1AFBB4770(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaSongMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC68068();
  }
  qword_1E9AF8100 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1AFBB47C8()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!qword_1E9AF8108)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = sub_1AFBB48BC;
    v0[4] = &unk_1E5F8E728;
    v0[5] = v0;
    long long v1 = xmmword_1E5F95300;
    uint64_t v2 = 0;
    qword_1E9AF8108 = _sl_dlopen();
  }
  if (!qword_1E9AF8108) {
    sub_1AFC680E4(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1AFBB48BC()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF8108 = result;
  return result;
}

Class sub_1AFBB4930(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaAlbumMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC68164();
  }
  qword_1E9AF8110 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4988(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaArtistMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC681E0();
  }
  qword_1E9AF8118 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB49E0(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaMusicVideoMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6825C();
  }
  qword_1E9AF8120 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4A38(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaPodcastEpisodeMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC682D8();
  }
  qword_1E9AF8128 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4A90(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaPodcastMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC68354();
  }
  qword_1E9AF8130 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4AE8(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaTVEpisodeMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC683D0();
  }
  qword_1E9AF8138 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4B40(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaTVSeasonMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6844C();
  }
  qword_1E9AF8140 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4B98(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaPlaylistMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC684C8();
  }
  qword_1E9AF8148 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4BF0(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaMovieMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC68544();
  }
  qword_1E9AF8150 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4C48(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPiTunesMediaMovieBundleMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC685C0();
  }
  qword_1E9AF8158 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4CA0(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPAppleTVMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6863C();
  }
  qword_1E9AF8160 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4CF8(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPAppleNewsMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC686B8();
  }
  qword_1E9AF8168 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB4D50(uint64_t a1)
{
  sub_1AFBB47C8();
  Class result = objc_getClass("LPMapMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC68734();
  }
  qword_1E9AF8170 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1AFBB5254(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBB5264(uint64_t a1)
{
}

void sub_1AFBB526C(uint64_t a1, void *a2)
{
}

uint64_t IMDGetTimeStampedFilePath(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"path", "NSString *IMDGetTimeStampedFilePath(NSString *, NSString *)", IMFileLocationTrimFileName(), 31, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v13 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  id v7 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v7 setDateFormat:@"yyMMdd-HHmmss"];
  uint64_t v8 = [a1 pathExtension];
  uint64_t v9 = (void *)[a1 stringByDeletingPathExtension];
  uint64_t v10 = objc_msgSend(v7, "stringFromDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "date"));

  if (a2) {
    return [v9 stringByAppendingFormat:@"-%@-%@.%@", a2, v10, v8];
  }
  else {
    return [v9 stringByAppendingFormat:@"-%@.%@", v10, v8];
  }
}

uint64_t IMDGetDestinationFilePath(void *a1, void *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"originalPath", "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 48, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    id v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v22 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a2)
  {
    uint64_t v9 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"destFolder", "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 49, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      CFStringRef v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v22 = v9;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v12 = (void *)[a1 lastPathComponent];
  if (!v12)
  {
    uint64_t v13 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"fileName", "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 52, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v14 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v14)
    {
      v14(v13);
    }
    else if (IMOSLoggingEnabled())
    {
      uint32_t v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v22 = v13;
        _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v16 = IMDGetTimeStampedFilePath(v12, a3);
  if (v16) {
    return [a2 stringByAppendingPathComponent:v16];
  }
  uint64_t v18 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"newFileName", "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 55, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
  long long v19 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
  if (v19)
  {
    v19(v18);
  }
  else if (IMOSLoggingEnabled())
  {
    long long v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      uint64_t v22 = v18;
      _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
    }
  }
  return 0;
}

void IMDRegisterReconnectBlockWithIdentifier()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    IMDSMSRecordStoreUseProtectedDatabase();
    uint64_t v0 = (const void *)IMDSMSRecordStoreCopySMSDBPathWithCreate(0);
    CSDBRegisterReconnectBlockWithIdentifier();
    if (v0)
    {
      CFRelease(v0);
    }
  }
}

uint64_t IMDDeregisterReconnectBlockWithIdentifier(uint64_t a1)
{
  uint64_t result = IMDIsRunningInDatabaseServerProcess();
  if (result)
  {
    return MEMORY[0x1F4114C30](a1);
  }
  return result;
}

id IMDGetDatabasePath()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IMDSMSRecordStoreUseProtectedDatabase();
  uint64_t v0 = (void *)IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
  if (!v0)
  {
    uint64_t v1 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"originalPath", "NSString *IMDGetDatabasePath(void)", IMFileLocationTrimFileName(), 76, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v2 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v2)
    {
      v2(v1);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v6 = v1;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  return v0;
}

uint64_t IMDGetDefaultTrimmedDatabaseFolderPath()
{
  id v0 = IMDGetDatabasePath();
  return [v0 stringByDeletingLastPathComponent];
}

uint64_t IMDGetDefaultTrimmedDatabaseFilePath()
{
  id v0 = IMDGetDatabasePath();
  uint64_t v1 = (void *)[IMDGetDatabasePath() stringByDeletingLastPathComponent];
  return IMDGetDestinationFilePath(v0, v1, @"trimmed");
}

uint64_t IMDTrimDatabaseToDays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [[IMTrimDatabaseToDays alloc] initWithSourceDatabasePath:a1 destinationDatabasePath:a2 newerThanDays:a3];
  return sub_1AFBB5C0C(v5, a4);
}

uint64_t sub_1AFBB5C0C(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v9 = xmmword_1E5F95458;
    long long v10 = *(_OWORD *)off_1E5F95468;
    uint64_t v11 = 81;
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"copier", "BOOL _IMDArchiveDatabase(IMAbstractDatabaseArchiver *, NSError **)", IMFileLocationTrimFileName(), 81, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v13 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFBB64FC;
  v8[3] = &unk_1E5F95480;
  void v8[4] = a2;
  return [a1 copyDatabase:v8];
}

uint64_t IMDTrimDatabaseToMessageCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [[IMTrimDatabaseToMessageCount alloc] initWithSourceDatabasePath:a1 destinationDatabasePath:a2 messageCount:a3];
  return sub_1AFBB5C0C(v5, a4);
}

uint64_t IMDTrimSharedDatabaseToDays(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    id v6 = IMDGetDatabasePath();
    return IMDTrimDatabaseToDays((uint64_t)v6, a1, a2, (uint64_t)a3);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1AFBB5F40;
    v9[3] = (void (*)(void))&unk_1E5F95438;
    v9[4] = (void (*)(void))&v10;
    void v9[5] = a3;
    __syncXPCIMDSplitDatabaseByDays_IPCAction(v9, a2);
    uint64_t v8 = *((unsigned __int8 *)v11 + 24);
    _Block_object_dispose(&v10, 8);
    return v8;
  }
}

void sub_1AFBB5F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1AFBB5F40(uint64_t a1, xpc_object_t xdict)
{
  BOOL result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDTrimSharedDatabaseToMessageCount(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    id v6 = IMDGetDatabasePath();
    return IMDTrimDatabaseToMessageCount((uint64_t)v6, a1, a2, (uint64_t)a3);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1AFBB6094;
    v9[3] = (void (*)(void))&unk_1E5F95438;
    v9[4] = (void (*)(void))&v10;
    void v9[5] = a3;
    __syncXPCIMDSplitDatabaseByRecentCount_IPCAction(v9, a2);
    uint64_t v8 = *((unsigned __int8 *)v11 + 24);
    _Block_object_dispose(&v10, 8);
    return v8;
  }
}

void sub_1AFBB607C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1AFBB6094(uint64_t a1, xpc_object_t xdict)
{
  BOOL result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDSwitchToDatabase()
{
  if (IMOSLoggingEnabled())
  {
    id v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Tried to change DB on non gizmo device. This is not supported!!", v1, 2u);
    }
  }
}

BOOL IMDCanDowngradeDatabaseToVersion(uint64_t a1)
{
  unsigned int SchemaVersion = IMDSMSRecordStoreGetSchemaVersion();
  return a1 > 9005 && SchemaVersion > a1;
}

uint64_t IMDDowngradeDatabaseToVersion(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint8_t buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = a2;
    _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "QuickSwitch about to downgrade database at path %@ to %@", buf, 0x16u);
  }
  unsigned int SchemaVersion = IMDSMSRecordStoreGetSchemaVersion();
  BOOL v10 = a3 <= 9005 || SchemaVersion <= a3;
  uint64_t v11 = !v10;
  if (v10)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 134217984;
        *(void *)&uint8_t buf[4] = a3;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Database QuickSwitch tried to downgraded incompatible database versioin %ld", buf, 0xCu);
      }
    }
  }
  else
  {
    *(void *)uint8_t buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    char v21 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v12 = [(IMAbstractDatabaseArchiver *)[IMDWhitetailToCoralDowngrader alloc] initWithSourceDatabasePath:a1 destinationDatabasePath:a2];
      char v13 = sub_1AFBB5C0C(v12, (uint64_t)a4);
      *(unsigned char *)(*(void *)&buf[8] + 24) = v13;
    }
    else
    {
      uint32_t v15 = IMLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v19 = 0;
        _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Quickswitch Downgrade Sending XPC now...", v19, 2u);
      }
      v18[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v18[1] = (void (*)(void))3221225472;
      v18[2] = (void (*)(void))sub_1AFBB64B0;
      v18[3] = (void (*)(void))&unk_1E5F95438;
      v18[4] = (void (*)(void))buf;
      v18[5] = a4;
      __IMDDowngradeDatabaseToVersion_IPCAction(v18, a1, a2);
    }
    if (!*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long v19 = 0;
          _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "Database QuickSwitch Downgrade got unsuccessful result", v19, 2u);
        }
      }
    }
    _Block_object_dispose(buf, 8);
  }
  return v11;
}

BOOL sub_1AFBB64B0(uint64_t a1, xpc_object_t xdict)
{
  BOOL result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDGetErrorFromXPCDictionary()
{
  return 0;
}

void *sub_1AFBB64FC(void *result, uint64_t a2, void *a3)
{
  uint64_t v3 = (void *)result[4];
  if (v3)
  {
    if (a3)
    {
      uint64_t v4 = result;
      BOOL result = a3;
      uint64_t v3 = (void *)v4[4];
    }
    else
    {
      BOOL result = 0;
    }
    *uint64_t v3 = result;
  }
  return result;
}

id sub_1AFBB67B4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1E9AF8178;
  uint64_t v7 = qword_1E9AF8178;
  if (!qword_1E9AF8178)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1AFBB8534;
    v3[3] = &unk_1E5F8EB38;
    void v3[4] = &v4;
    sub_1AFBB8534((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBB6880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBB6930(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = [sub_1AFBB67B4() interactionRecorder];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFBB69F4;
  v8[3] = &unk_1E5F954C8;
  id v9 = v4;
  id v7 = v4;
  [v6 recordInteractions:v5 completionHandler:v8];
}

uint64_t sub_1AFBB69F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1AFBB7390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t sub_1AFBB7428(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBB7438(uint64_t a1)
{
}

void sub_1AFBB7440(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKey:@"properties"];
  char v13 = [v2 objectForKey:*MEMORY[0x1E4F6CD48]];

  uint64_t v3 = (__CFString *)IMDAttachmentRecordCopyAttachmentForGUID(v13);
  id v4 = v3;
  if (v3)
  {
    id v5 = [(__CFString *)v3 transferName];
    uint64_t v6 = objc_msgSend(v5, "im_lastPathComponent");
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v9 = IMSharedHelperExternalLocationForFile();
    if (v9)
    {
      uint64_t v10 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v9 isDirectory:0];
      uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
  }
}

void sub_1AFBB76D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBB7C3C(uint64_t a1, int a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v15 = 138412290;
        id v16 = v5;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Batch donation failed with error %@", (uint8_t *)&v15, 0xCu);
      }
    }
  }
  else if (a2)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v9 = *(unsigned __int8 *)(a1 + 64);
    int v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v15) = 0;
          _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Donation complete!", (uint8_t *)&v15, 2u);
        }
      }
      [*(id *)(a1 + 32) _setNeedsDonation:0];
      [*(id *)(a1 + 32) _setLastDonatedRowID:1];
    }
    else
    {
      uint64_t v12 = (void *)(v8 - v7);
      if (v10)
      {
        char v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v15 = 134217984;
          id v16 = v12;
          _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Setting lastDonatedRowID to %lu", (uint8_t *)&v15, 0xCu);
        }
      }
      [*(id *)(a1 + 32) _setLastDonatedRowID:v12];
    }
  }
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(void))(v14 + 16))();
  }
}

void sub_1AFBB7F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1AFBB7F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  uint64_t v3 = [*(id *)(a1 + 32) newCDInteractionForChatDictionary:a3 messageDictionary:a2];
  id v4 = (void *)v3;
  if (v3)
  {
    v7[0] = v3;
    id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t sub_1AFBB8318(uint64_t a1)
{
  [*(id *)(a1 + 32) _setNeedsDonation:1];
  [*(id *)(a1 + 32) _setLastDonatedRowID:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [MEMORY[0x1E4F6E700] reindexFirstBatchSize];
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 40);
  return [v2 indexNextMessageBatchIfNeeded:v3 reason:v4 completion:v5];
}

Class sub_1AFBB8534(uint64_t a1)
{
  sub_1AFBB858C();
  Class result = objc_getClass("_CDInteractionRecorder");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC687B0();
  }
  qword_1E9AF8178 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1AFBB858C()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!qword_1E9AF8180)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = sub_1AFBB8680;
    v0[4] = &unk_1E5F8E728;
    v0[5] = v0;
    long long v1 = xmmword_1E5F95588;
    uint64_t v2 = 0;
    qword_1E9AF8180 = _sl_dlopen();
  }
  if (!qword_1E9AF8180) {
    sub_1AFC6882C(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1AFBB8680()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF8180 = result;
  return result;
}

Class sub_1AFBB86F4(uint64_t a1)
{
  sub_1AFBB858C();
  Class result = objc_getClass("_CDInteraction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC688AC();
  }
  qword_1E9AF8188 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBB874C(uint64_t a1)
{
  sub_1AFBB858C();
  Class result = objc_getClass("_CDContact");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC68928();
  }
  qword_1E9AF8190 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1AFBB8EE8()
{
  id v0 = objc_alloc_init(IMDDatabase);
  long long v1 = (void *)qword_1EB5ABA80;
  qword_1EB5ABA80 = (uint64_t)v0;
}

void sub_1AFBB8F24()
{
  id v0 = objc_alloc_init(IMDDatabaseClient);
  long long v1 = (void *)qword_1EB5ABBE8;
  qword_1EB5ABBE8 = (uint64_t)v0;
}

void sub_1AFBB9064(uint64_t a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F6EAE8]) initWithXPCObject:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    uint64_t v2 = v4;
  }
}

uint64_t _IMDSMSDatabaseMigrateData_38_6100()
{
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = *(sqlite3_stmt **)(v0 + 8);
    if (v2)
    {
      if (sqlite3_step(v2) == 100)
      {
        do
        {
          uint64_t v3 = (void *)MEMORY[0x1B3E8A120]();
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 1);
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 2);
          uint64_t v4 = CSDBSqliteConnectionStatementForSQL();
          if (v4 && *(void *)(v4 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          uint64_t v5 = CSDBSqliteConnectionStatementForSQL();
          if (v5 && *(void *)(v5 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          uint64_t v6 = CSDBSqliteConnectionStatementForSQL();
          if (v6 && *(void *)(v6 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  uint64_t v7 = CSDBSqliteConnectionStatementForSQL();
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = *(sqlite3_stmt **)(v7 + 8);
    if (v9)
    {
      if (sqlite3_step(v9) == 100)
      {
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          uint64_t v11 = (void *)MEMORY[0x1B3E8A120]();
          sqlite3_column_int(*(sqlite3_stmt **)(v8 + 8), 0);
          if (sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 1))
          {
            uint64_t v12 = sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 1);
            char v13 = (__CFString *)CFStringCreateWithCString(v10, (const char *)v12, 0x8000100u);
          }
          else
          {
            char v13 = 0;
          }
          if (sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 2))
          {
            uint64_t v14 = sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 2);
            int v15 = (__CFString *)CFStringCreateWithCString(v10, (const char *)v14, 0x8000100u);
          }
          else
          {
            int v15 = 0;
          }
          IMComponentsFromChatGUID();
          [(__CFString *)v15 lowercaseString];
          id v16 = (void *)IMCopyGUIDForChat();
          uint64_t v17 = CSDBSqliteConnectionStatementForSQL();
          if (v17 && *(void *)(v17 + 8))
          {
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  uint64_t v18 = CSDBSqliteConnectionStatementForSQL();
  if (v18)
  {
    uint64_t v19 = v18;
    long long v20 = *(sqlite3_stmt **)(v18 + 8);
    if (v20)
    {
      if (sqlite3_step(v20) == 100)
      {
        do
        {
          char v21 = (void *)MEMORY[0x1B3E8A120]();
          sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
          sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 1);
          uint64_t v22 = CSDBSqliteConnectionStatementForSQL();
          if (v22 && *(void *)(v22 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          uint64_t v23 = CSDBSqliteConnectionStatementForSQL();
          if (v23 && *(void *)(v23 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          uint64_t v24 = CSDBSqliteConnectionStatementForSQL();
          if (v24 && *(void *)(v24 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v19 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  uint64_t v25 = CSDBSqliteConnectionStatementForSQL();
  if (v25 && *(void *)(v25 + 8))
  {
    CSDBSqliteStatementPerform();
    CSDBSqliteStatementReset();
  }
  return 1;
}

uint64_t IMDHandleRecordCopyHandleRecord(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBB964C;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBB9634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBB964C(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDHandleRecordCopyHandleRecordUnlocked(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBB9750;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBB9738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBB9750(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDHandleRecordAddHandleRecord(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBB9854;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFBB983C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBB9854(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    CSDBRecordStoreAddRecord();
    uint64_t result = CSDBRecordSaveStore();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDHandleRecordCopyHandleForIDOnService(const __CFString *a1, const __CFString *a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v5 = 0;
  if (!a2 || !Length) {
    return v5;
  }
  if (!CFStringGetLength(a2)) {
    return 0;
  }
  uint64_t v9 = 0;
  CFAllocatorRef v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v12 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1AFBB9A10;
    v8[3] = &unk_1E5F90108;
    void v8[5] = a1;
    void v8[6] = a2;
    void v8[4] = &v9;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, id, country, service, uncanonicalized_id, person_centric_id FROM handle WHERE   id = ? AND   service = ? ORDER BY handle.ROWID ASC;",
      (uint64_t)v8);
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v7[1] = (void (*)(void))3221225472;
    void v7[2] = (void (*)(void))sub_1AFBB9AD8;
    v7[3] = (void (*)(void))&unk_1E5F8D580;
    void v7[4] = (void (*)(void))&v9;
    __syncXPCIMDHandleRecordCopyHandleForIDOnService_IPCAction(v7, (uint64_t)a1, (uint64_t)a2);
  }
  uint64_t v5 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1AFBB99F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBB9A10(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDHandleRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1AFBB9AD8(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1AFBBA010(int a1, id a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  [v4 UTF8String];
  IMInsertKeyedCodableObjectsToXPCDictionary();
}

uint64_t sub_1AFBBA1C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  [*(id *)(a1 + 32) addObject:v4];

  return 1;
}

uint64_t sub_1AFBBA304(uint64_t a1)
{
  CFArrayRef v2 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  [*(id *)(a1 + 32) addObject:v2];

  return 1;
}

uint64_t sub_1AFBBA358(uint64_t a1, uint64_t a2)
{
  CFArrayRef v3 = [NSString stringWithUTF8String:a2];
  id v4 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];

  return 1;
}

uint64_t sub_1AFBBA4C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)_IMDCopyIMDAttachmentRecordFromXPCObjectClient(a3);
  [*(id *)(a1 + 32) addObject:v4];

  return 1;
}

void sub_1AFBBA6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBBA6EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBBA6FC(uint64_t a1)
{
}

void sub_1AFBBA704(uint64_t a1, xpc_object_t xdict)
{
  CFArrayRef v3 = xpc_dictionary_get_value(xdict, "array_result");
  if (v3)
  {
    char v7 = v3;
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    CFArrayRef v3 = v7;
  }
}

void sub_1AFBBA8DC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBAAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBAAFC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v3 = v7;
  }
}

void sub_1AFBBAC6C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBAF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBAF44(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v3 = v7;
  }
}

void sub_1AFBBB0FC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBB2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBB2FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_value(xdict, "dictionary_result");
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _codableDictionaryCopiedFromXPCDictionary:v7 objectClass:objc_opt_class()];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_1AFBBB4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBB4E4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = [*(id *)(a1 + 32) _chatRecordsCopiedFromXPCArray:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v3 = v7;
  }
}

uint64_t sub_1AFBBB674(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_BOOL(xdict, "success");
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1AFBBB7A8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _messageRecordsCopiedFromXPCArray:v3];
    uint64_t v5 = [v4 firstObject];
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v5);
  }
}

void sub_1AFBBB9E8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v6 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _messageRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
  }
}

void sub_1AFBBBB90(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v6 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _messageRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
  }
}

void sub_1AFBBBE38(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _messageRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v6 = [v4 firstObject];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBC294(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Received response back from database for notifyFirstUnlockComplete", v4, 2u);
    }
  }
}

void sub_1AFBBC398(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Received response back from database for deleteDatabase", v4, 2u);
    }
  }
}

void sub_1AFBBC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBC5A0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = [*(id *)(a1 + 32) _handleRecordsCopiedFromXPCArray:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v3 = v7;
  }
}

void sub_1AFBBC778(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _handleRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      id v6 = v4;
    }
    else {
      id v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBCA80(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _attachmentRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      id v6 = v4;
    }
    else {
      id v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBCC78(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v7 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _attachmentRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4) {
      id v6 = v4;
    }
    else {
      id v6 = (void *)MEMORY[0x1E4F1CBF0];
    }
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1AFBBCE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBBCE28(uint64_t a1)
{
  uint64_t v2 = IMGetXPCDataFromDictionary();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

uint64_t sub_1AFBBCF88(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_int64(xdict, "result");
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1AFBBD694(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "deletedChats");
  if (v3)
  {
    id v6 = v3;
    uint64_t v4 = [*(id *)(a1 + 32) _codableObjectsCopiedFromXPCArray:v3 objectClass:objc_opt_class()];
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
    }

    uint64_t v3 = v6;
  }
}

void sub_1AFBBD880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBD898(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_value(xdict, "recoverableMessagesMetadataPendingCloudKitSave");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _codableObjectsCopiedFromXPCArray:v6 objectClass:objc_opt_class()];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_1AFBBDA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBDA78(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_value(xdict, "recoverableMessagesMetadataPendingCloudKitDelete");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _codableObjectsCopiedFromXPCArray:v6 objectClass:objc_opt_class()];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_1AFBBDD54(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 134217984;
      uint64_t v7 = v5;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Finished bulk updating recoverable message guids to status %ld", (uint8_t *)&v6, 0xCu);
    }
  }
}

uint64_t sub_1AFBBE108(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_int64(xdict, "total");
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v3();
}

void sub_1AFBBE25C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = xpc_dictionary_get_value(xdict, "array_result");
  id v6 = (id)v3;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) _messageRecordsCopiedFromXPCArray:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
  }
}

void sub_1AFBBE428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBBE440(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_value(xdict, "scheduledMessagesMetadataPendingCloudKitDelete");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    uint64_t v3 = [*(id *)(a1 + 32) _codableObjectsCopiedFromXPCArray:v6 objectClass:objc_opt_class()];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_1AFBBE5E8(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Finished Adding scheduled message to delete from Cloud Kit. GUID: %@, RecordID %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1AFBBE7AC(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Finished Deleting tombstoned scheduled message with recordIDs %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1AFBBE958(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Finished marking messages read with guids %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1AFBBEB58(uint64_t a1, void *a2)
{
  id v3 = a2;
  IMGetXPCBoolFromDictionary();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1AFBBECC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  id v4 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1AFBBEE54(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1AFBBEFE0(uint64_t a1, xpc_object_t xdict)
{
  id v3 = xpc_dictionary_get_value(xdict, "identifiersToContacts");
  if (v3)
  {
    id v6 = v3;
    id v4 = [*(id *)(a1 + 32) _codableDictionaryCopiedFromXPCDictionary:v3 objectClass:objc_opt_class()];
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
    }

    id v3 = v6;
  }
}

void sub_1AFBBF134(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

IMDPersistentAttachmentController *sub_1AFBBF61C()
{
  uint64_t result = objc_alloc_init(IMDPersistentAttachmentController);
  qword_1EB5ABCE0 = (uint64_t)result;
  return result;
}

uint64_t sub_1AFBBF8CC(__CFString *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ([(__CFString *)a1 length]
    && [(__CFString *)a1 rangeOfString:@"/var/mobile/Library/SMS/Attachments"] != 0x7FFFFFFFFFFFFFFFLL)
  {
    return 1;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      id v6 = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Input path: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  uint64_t result = IMOSLoggingEnabled();
  if (result)
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
    if (result)
    {
      int v5 = 138412290;
      id v6 = @"/var/mobile/Library/SMS/Attachments";
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Attachment store Path: %@", (uint8_t *)&v5, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1AFBC0828(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)uint8_t buf = 138412290;
      uint64_t v18 = v3;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "        ...removing old file: %@", buf, 0xCu);
    }
  }
  int v11 = sub_1AFBBF8CC(*(__CFString **)(a1 + 32));
  uint64_t result = [*(id *)(a1 + 40) removeItemAtPath:*(void *)(a1 + 32) error:0];
  int v5 = *(void **)(a1 + 48);
  if (v5)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t result = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    uint64_t v6 = result;
    if (result)
    {
      uint64_t v7 = *(void *)v13;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * v8);
          if (IMOSLoggingEnabled())
          {
            uint64_t v10 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              uint64_t v18 = v9;
              _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "        ...removing old sibling file: %@", buf, 0xCu);
            }
          }
          [*(id *)(a1 + 40) removeItemAtPath:v9 error:0];
          ++v8;
        }
        while (v6 != v8);
        uint64_t result = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  if (v11) {
    return [*(id *)(a1 + 56) _removeLegacyAttachmentPathsInAttachmentStoreWithOriginalPath:*(void *)(a1 + 32) withFileManager:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1AFBC0C2C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBC0BF8);
  }
  _Unwind_Resume(a1);
}

id IMDCopyAttachmentPersistentPath(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Storing group photo at an accessible location.", buf, 2u);
      }
    }
    uint64_t v7 = (void *)IMSharedHelperExternalLocationForFile();
  }
  else
  {
    int v11 = objc_msgSend(a2, "im_lastPathComponent");
    long long v12 = (void *)[v11 pathExtension];
    unsigned __int8 v13 = [a1 hash];
    if (![v12 length])
    {
      long long v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C348], "defaultHFSFileManager"), "pathExtensionForUTIType:", a4);
      if (![v14 length]) {
        long long v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C348], "defaultHFSFileManager"), "pathExtensionForMIMEType:", a3);
      }
      if ([v14 length]) {
        int v11 = (void *)[v11 stringByAppendingPathExtension:v14];
      }
    }
    uint64_t v15 = objc_msgSend(NSString, "stringWithFormat:", @"%02x", v13);
    uint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"%02d", v13 & 0xF);
    if ([v11 length] && objc_msgSend(a1, "length")) {
      uint64_t v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(@"/var/mobile/Library/SMS/Attachments", "stringByAppendingPathComponent:", v15), "stringByAppendingPathComponent:", v16), "stringByAppendingPathComponent:", objc_msgSend(a1, "im_lastPathComponent")), "stringByAppendingPathComponent:", v11);
    }
    else {
      uint64_t v7 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412546;
        long long v20 = v7;
        __int16 v21 = 2112;
        uint64_t v22 = a1;
        _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Resulting path %@   for transfer: %@", buf, 0x16u);
      }
    }
  }
  return v7;
}

id IMCoreSpotlightIndex()
{
  if (qword_1EB5ABA60 != -1) {
    dispatch_once(&qword_1EB5ABA60, &unk_1F084CE40);
  }
  uint64_t v0 = (void *)qword_1EB5ABA68;
  return v0;
}

void sub_1AFBC1E80()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F23838]) initWithName:@"com.apple.MobileSMS" bundleIdentifier:@"com.apple.MobileSMS"];
  uint64_t v1 = (void *)qword_1EB5ABA68;
  qword_1EB5ABA68 = v0;
}

id IMCoreSpotlightCriticalIndex()
{
  if (qword_1E9AF81A0 != -1) {
    dispatch_once(&qword_1E9AF81A0, &unk_1F084C890);
  }
  uint64_t v0 = (void *)qword_1E9AF8198;
  return v0;
}

void sub_1AFBC1F20()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F23838]) _initWithName:@"com.apple.MobileSMS" protectionClass:0 bundleIdentifier:@"com.apple.MobileSMS" options:32];
  uint64_t v1 = (void *)qword_1E9AF8198;
  qword_1E9AF8198 = v0;
}

__CFDictionary *IMCopyIndexableItemDictionaryForRecord(void *a1)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (__CFDictionary *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:14];
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v145 = 0;
  BOOL v146 = 0;
  uint64_t v144 = 0;
  uint64_t v143 = 0;
  CFNumberRef v142 = 0;
  char v141 = 0;
  uint64_t v140 = 0;
  uint64_t v139 = 0;
  uint64_t v138 = 0;
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  uint64_t v135 = 0;
  uint64_t v134 = 0;
  uint64_t v133 = 0;
  uint64_t v132 = 0;
  CFNumberRef v131 = 0;
  CFNumberRef v130 = 0;
  int8x16_t v129 = 0;
  uint64_t v128 = 0;
  IMDMessageRecordBulkCopy((uint64_t)v1, &v140, 0, 0, &v147, &v148, 0, 0, 0, &v146, &v145, &v142, &v143, 0, 0, 0, &v144, 0, 0,
    &v141,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    &v136,
    &v137,
    0,
    &v139,
    &v135,
    &v138,
    0,
    &v134,
    0,
    0,
    0,
    0,
    &v132,
    0,
    0,
    &v131,
    &v130,
    &v133,
    0,
    0,
    0,
    &v129,
    0,
    &v128,
    0,
    0);
  uint64_t v92 = v147;
  uint64_t v3 = v145;
  int64_t value = v143;
  CFNumberRef v100 = v142;
  uint64_t v102 = v146;
  uint64_t v96 = v138;
  uint64_t v98 = v139;
  id v120 = v135;
  id v4 = v134;
  id v118 = v133;
  id v116 = v132;
  CFStringRef v5 = v131;
  uint64_t v106 = v144;
  uint64_t v108 = v130;
  id v112 = v129;
  id v114 = v136;
  uint64_t v6 = v128;
  uint64_t v109 = v131;
  if ([(__CFString *)v131 length])
  {
    CFStringRef v7 = IMDMessageRecordCopyMessageForGUID(v5);
    uint64_t v8 = (__CFString *)v7;
    if (v7)
    {
      uint64_t v9 = IMCopyIndexableItemDictionaryForRecord(v7);
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v148);
  int v11 = v10;
  if (v10)
  {
    id v12 = v10;
  }
  else
  {
    id v12 = [MEMORY[0x1E4F1C9C8] date];
  }
  uint64_t v13 = JWDecodeCodableObjectWithStandardAllowlist();
  long long v14 = (void *)v13;
  id v110 = v9;
  if (v9)
  {
    signed int v104 = (void *)v13;
    uint64_t v15 = v6;
    uint64_t v16 = v4;
    uint64_t v17 = v3;
    uint64_t v18 = v2;
    uint64_t v19 = [v9 objectForKey:@"attributedBody"];
    long long v20 = v109;
    __int16 v21 = (void *)[objc_alloc(MEMORY[0x1E4F6E830]) initWithMessageBody:v19 messageGUID:v109];
    uint64_t v22 = v21;
    if (!v108) {
      goto LABEL_15;
    }
    uint64_t v23 = [v21 messageParts];
    id v24 = v1;
    unint64_t v25 = [v23 count];

    long long v20 = v109;
    BOOL v26 = v25 >= 2;
    id v1 = v24;
    if (v26)
    {
      ThreadIdentifierWithComponents = (void *)IMMessageCreateThreadIdentifierWithComponents();
      AssociatedMessageGUIDFromThreaduint64_t Identifier = (__CFString *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();

      id v1 = v24;
    }
    else
    {
LABEL_15:
      AssociatedMessageGUIDFromThreaduint64_t Identifier = v20;
    }

    uint64_t v2 = v18;
    uint64_t v3 = v17;
    id v4 = v16;
    uint64_t v6 = v15;
    long long v14 = v104;
  }
  else
  {
    AssociatedMessageGUIDFromThreaduint64_t Identifier = 0;
  }
  long long v28 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", objc_msgSend(v1, "rowID"));
  if (v28) {
    CFDictionarySetValue(v2, @"rowID", v28);
  }

  id v29 = v12;
  if (v29) {
    CFDictionarySetValue(v2, @"time", v29);
  }
  uint64_t v105 = v29;

  id v30 = v92;
  if (v30) {
    CFDictionarySetValue(v2, @"guid", v30);
  }

  id v31 = v102;
  if (v31) {
    CFDictionarySetValue(v2, @"plainBody", v31);
  }

  id v32 = v14;
  if (v32) {
    CFDictionarySetValue(v2, @"attributedBody", v32);
  }
  uint64_t v103 = v32;

  id v33 = v106;
  if (v33) {
    CFDictionarySetValue(v2, @"subject", v33);
  }

  id v34 = value;
  valuea = v34;
  if (v34)
  {
    CFDictionarySetValue(v2, @"service", v34);
    id v34 = valuea;
  }
  id v107 = v33;

  CFNumberRef v35 = v100;
  if (v35) {
    CFDictionarySetValue(v2, @"flags", v35);
  }
  CFNumberRef v101 = v35;

  __int16 v36 = [MEMORY[0x1E4F28ED0] numberWithBool:v141 != 0];
  if (v36) {
    CFDictionarySetValue(v2, @"hasAttachments", v36);
  }

  uint64_t v37 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v140];
  if (v37) {
    CFDictionarySetValue(v2, @"type", v37);
  }

  id v38 = v98;
  if (v38) {
    CFDictionarySetValue(v2, @"balloonBundleID", v38);
  }

  id v39 = v120;
  id v121 = v39;
  if (v39)
  {
    CFDictionarySetValue(v2, @"payloadData", v39);
    id v39 = v121;
  }
  uint64_t v99 = v38;

  id v40 = v96;
  if (v40) {
    CFDictionarySetValue(v2, @"expressiveSendStyleID", v40);
  }
  uint64_t v97 = v40;

  int v41 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v137];
  if (v41) {
    CFDictionarySetValue(v2, @"associatedMessageType", v41);
  }

  id v42 = v114;
  if (v42) {
    CFDictionarySetValue(v2, @"associatedMessageGUID", v42);
  }

  id v43 = v118;
  id v119 = v43;
  if (v43)
  {
    CFDictionarySetValue(v2, @"syndicationRanges", v43);
    id v43 = v119;
  }

  id v44 = v116;
  id v117 = v44;
  if (v44)
  {
    CFDictionarySetValue(v2, @"destinationCallerID", v44);
    id v44 = v117;
  }

  id v45 = v110;
  id v115 = v45;
  if (v110)
  {
    CFDictionarySetValue(v2, @"threadOriginator", v45);
    id v45 = v115;
  }

  uint64_t v46 = AssociatedMessageGUIDFromThreadIdentifier;
  CFNumberRef v111 = v46;
  if (v46)
  {
    CFDictionarySetValue(v2, @"threadOriginatorFormattedGUID", v46);
    uint64_t v46 = v111;
  }

  id v47 = v112;
  id v113 = v47;
  if (v47)
  {
    CFDictionarySetValue(v2, @"biaReferenceID", v47);
    id v47 = v113;
  }
  __int16 v95 = v42;

  id v48 = v6;
  if (v48) {
    CFDictionarySetValue(v2, @"associatedMessageEmoji", v48);
  }
  __int16 v93 = v48;

  if (v4)
  {
    id v49 = v4;
    id v50 = [MEMORY[0x1E4F1C9E8] dictionaryWithMessageSummaryInfoData:v49];
    if (v50) {
      CFDictionarySetValue(v2, @"messageSummaryInfo", v50);
    }
  }
  uint64_t v51 = [v1 handleRecord];
  id v52 = v51;
  uint64_t v91 = v51;
  if (v51)
  {
    uint64_t v53 = _IMDCoreSpotlightHandleID(v51);
    id v54 = [v52 uncanonicalizedURIString];
    if (v54) {
      CFDictionarySetValue(v2, @"uncanonicalizedHandle", v54);
    }

    id v52 = v53;
    if (v52)
    {
      CFDictionarySetValue(v2, @"handle", v52);
    }
  }
  uint64_t v90 = v52;
  if (v141)
  {
    id v84 = v31;
    id v85 = v30;
    uint64_t v86 = v4;
    uint64_t v87 = v3;
    id v88 = v1;
    theDict = v2;
    __int16 v55 = [v1 attachmentRecords];
    id v56 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v124 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    id v57 = v55;
    uint64_t v58 = [v57 countByEnumeratingWithState:&v124 objects:v149 count:16];
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v60 = *(void *)v125;
      do
      {
        for (uint64_t i = 0; i != v59; ++i)
        {
          if (*(void *)v125 != v60) {
            objc_enumerationMutation(v57);
          }
          uint64_t v62 = *(void **)(*((void *)&v124 + 1) + 8 * i);
          uint64_t v63 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
          unint64_t v64 = [v62 attributionInfo];
          [v62 _writeIfNeededForPreviewGenerationStateMigration];
          uint64_t v65 = [v62 guid];
          if (v65) {
            CFDictionarySetValue(v63, @"guid", v65);
          }

          uint64_t v66 = [v62 path];
          if (v66) {
            CFDictionarySetValue(v63, @"path", v66);
          }

          CFNumberRef v67 = [v62 transferName];
          if (v67) {
            CFDictionarySetValue(v63, @"name", v67);
          }

          id v68 = v64;
          if (v68) {
            CFDictionarySetValue(v63, @"attributionInfo", v68);
          }

          uint64_t v69 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(v62, "isCommSafetySensitive"));
          if (v69) {
            CFDictionarySetValue(v63, @"isCommSafetySensitive", v69);
          }

          uint64x2_t v70 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(v62, "isSticker"));
          if (v70) {
            CFDictionarySetValue(v63, @"isSticker", v70);
          }

          int8x16_t v71 = [v62 utiString];
          if (v71) {
            CFDictionarySetValue(v63, @"uti", v71);
          }

          uint64_t v72 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", objc_msgSend(v62, "previewGenerationState"));
          if (v72) {
            CFDictionarySetValue(v63, @"previewGenerationState", v72);
          }

          if ([(__CFDictionary *)v63 count]) {
            [v56 addObject:v63];
          }
        }
        uint64_t v59 = [v57 countByEnumeratingWithState:&v124 objects:v149 count:16];
      }
      while (v59);
    }

    id v73 = v56;
    if (v73) {
      CFDictionarySetValue(theDict, @"attachments", v73);
    }

    id v1 = v88;
    uint64_t v2 = theDict;
    id v4 = v86;
    uint64_t v3 = v87;
    id v31 = v84;
    id v30 = v85;
  }
  uint64_t v74 = [(__CFDictionary *)v2 objectForKey:@"flags"];
  char v75 = [v74 unsignedLongLongValue];

  if ((v75 & 4) != 0)
  {
    uint64_t IsKnownContact = 1;
    uint64_t v76 = v90;
  }
  else
  {
    uint64_t v76 = v90;
    uint64_t IsKnownContact = _IMDCoreSpotlightIsKnownContact(v90);
  }
  CFNumberRef v78 = [MEMORY[0x1E4F28ED0] numberWithBool:IsKnownContact];
  CFNumberRef v79 = v107;
  if (v78)
  {
    CFDictionarySetValue(v2, @"knownSender", v78);
  }
  else
  {
    CFNumberRef v80 = MEMORY[0x1E4F14500];
    id v81 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR)) {
      sub_1AFC689A4();
    }

    CFNumberRef v79 = v107;
  }

  CFNumberRef v82 = v2;
  return v82;
}

id _IMDCoreSpotlightHandleID(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = NSString;
    uint64_t v3 = IMFileLocationTrimFileName();
    id v4 = [NSString stringWithFormat:&stru_1F084E970];
    CFStringRef v5 = [v2 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"handle", "NSString *_IMDCoreSpotlightHandleID(IMDHandleRecord *__strong _Nonnull)", v3, 438, v4];

    uint64_t v6 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      CFStringRef v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v13 = v5;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v8 = [v1 canonicalizedURIString];
  if (!v8)
  {
    uint64_t v8 = [v1 uncanonicalizedURIString];
  }
  uint64_t v9 = [v8 _stripFZIDPrefix];
  uint64_t v10 = objc_msgSend(v9, "im_stripCategoryLabel");

  return v10;
}

uint64_t _IMDCoreSpotlightIsKnownContact(void *a1)
{
  id v1 = _IMDCoreSpotlightCNContactForAddress(a1);
  uint64_t v2 = [MEMORY[0x1E4F6E6D8] isCNContactAKnownContact:v1];

  return v2;
}

__CFDictionary *IMCopyIndexableChatDictionaryForRecord(void *a1, int a2)
{
  id v3 = a1;
  id v4 = (__CFDictionary *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:12];
  id v48 = 0;
  id v49 = 0;
  uint64_t v46 = 0;
  id v47 = 0;
  id v44 = 0;
  id v45 = 0;
  id v42 = 0;
  id v43 = 0;
  id v40 = 0;
  int v41 = 0;
  id v38 = 0;
  uint64_t v39 = 1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  _IMDChatRecordBulkCopy((uint64_t)v3, &v47, 0, &v45, &v44, &v43, 0, &v49, 0, &v48, &v40, &v46, &v42, 0, (const void **)&v39, 0, 0, 0, 0,
    &v41,
    0,
    0,
    0,
    &v38,
    &v37,
    &v36,
    0,
    0);
  CFStringRef v5 = v48;
  uint64_t v6 = v49;
  uint64_t v8 = v45;
  CFStringRef v7 = v46;
  uint64_t v10 = v43;
  uint64_t v9 = v44;
  CFNumberRef v35 = v42;
  id v33 = v40;
  int64_t value = v41;
  if (v49) {
    CFDictionarySetValue(v4, @"guid", v49);
  }
  if (v5) {
    CFDictionarySetValue(v4, @"groupName", v5);
  }
  id v32 = (void *)v5;
  int v11 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v47];
  if (v11) {
    CFDictionarySetValue(v4, @"style", v11);
  }

  if (v7) {
    CFDictionarySetValue(v4, @"loginID", v7);
  }
  id v31 = (void *)v7;
  id v12 = JWDecodeDictionary();
  if (v12) {
    CFDictionarySetValue(v4, @"properties", v12);
  }
  if (v10) {
    CFDictionarySetValue(v4, @"chatIdentifier", v10);
  }
  if (v35) {
    CFDictionarySetValue(v4, @"groupID", v35);
  }
  if (value) {
    CFDictionarySetValue(v4, @"originalGroupID", value);
  }
  if (v8) {
    CFDictionarySetValue(v4, @"accountID", v8);
  }
  id v30 = (void *)v8;
  if (v33) {
    CFDictionarySetValue(v4, @"lalh", v33);
  }
  id v29 = v9;
  uint64_t v13 = [v12 objectForKeyedSubscript:*MEMORY[0x1E4F6CD48]];
  if (v13) {
    CFDictionarySetValue(v4, @"groupPhotoGUID", v13);
  }
  uint64_t v14 = (__CFString *)IMDAttachmentRecordCopyAttachmentForGUID(v13);
  uint64_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = [(__CFString *)v14 path];
    if (v16) {
      CFDictionarySetValue(v4, @"groupPhotoPath", v16);
    }
  }
  long long v28 = (void *)v10;
  uint64_t v17 = [v3 handleRecords];
  uint64_t v18 = objc_msgSend(v17, "__imArrayByApplyingBlock:", &unk_1F084D498);

  if (v18) {
    CFDictionarySetValue(v4, @"participants", v18);
  }
  uint64_t v19 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v39];
  if (v19) {
    CFDictionarySetValue(v4, @"isFiltered", v19);
  }

  long long v20 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v38];
  if (v20) {
    CFDictionarySetValue(v4, @"isBlackholed", v20);
  }

  __int16 v21 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v37];
  if (v21) {
    CFDictionarySetValue(v4, @"syndicationType", v21);
  }

  uint64_t v22 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v36);
  if (v22) {
    CFDictionarySetValue(v4, @"syndicationDate", v22);
  }
  if (a2)
  {
    uint64_t v23 = v6;
    id v24 = v3;
    Message = (void *)IMDChatRecordCopyLastMessage((uint64_t)v3);
    BOOL v26 = [Message date];
    if (v26) {
      CFDictionarySetValue(v4, @"lastMessageDate", v26);
    }

    id v3 = v24;
    uint64_t v6 = v23;
  }

  return v4;
}

id sub_1AFBC3264(uint64_t a1, void *a2)
{
  return _IMDCoreSpotlightHandleID(a2);
}

id _IMDIntentsSOSImage()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 resourcePath];

  uint64_t v2 = [v1 stringByAppendingPathComponent:@"Icons"];
  id v3 = [v2 stringByAppendingPathComponent:@"SOS_lt_60.png"];

  id v4 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v3];
  CFStringRef v5 = [MEMORY[0x1E4F304C0] imageWithURL:v4];

  return v5;
}

void _IMDCoreRecentsApiInit()
{
  uint64_t v0 = +[IMDCoreSpotlightDispatchObject sharedInstance];
  int v1 = [v0 allowsOverrideOfObjects];

  if (v1)
  {
    id v3 = +[IMDCoreSpotlightDispatchObject sharedInstance];
    uint64_t v2 = [MEMORY[0x1E4F5CCE0] defaultInstance];
    [v3 setRecentsInstance:v2];
  }
}

id _IMDCoreSpotlightCNContactForHandleID(void *a1)
{
  int v1 = _IMDCoreSpotlightCNContactForAddress(a1);
  if ([MEMORY[0x1E4F6E6D8] isCNContactAKnownContact:v1]) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  id v3 = v2;

  return v3;
}

id _IMDCoreSpotlightCNContactForAddress(void *a1)
{
  void v7[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F1ADC8];
  v7[0] = *MEMORY[0x1E4F1AEE0];
  v7[1] = v1;
  uint64_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a1;
  id v4 = [v2 arrayWithObjects:v7 count:2];
  CFStringRef v5 = _IMDCoreSpotlightCNContactForAddressWithAdditionalPropertyKeys(v3, v4);

  return v5;
}

id _IMDCoreSpotlightCNContactForHandle(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = NSString;
    uint64_t v3 = IMFileLocationTrimFileName();
    id v4 = [NSString stringWithFormat:&stru_1F084E970];
    CFStringRef v5 = [v2 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"handle", "CNContact * _Nonnull _IMDCoreSpotlightCNContactForHandle(IMDHandleRecord *__strong _Nonnull)", v3, 459, v4];

    uint64_t v6 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      CFStringRef v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v12 = v5;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v8 = _IMDCoreSpotlightHandleID(v1);
  uint64_t v9 = _IMDCoreSpotlightCNContactForHandleID(v8);

  return v9;
}

id _IMDCoreSpotlightCNContactForAddressWithAdditionalPropertyKeys(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    CFStringRef v5 = [MEMORY[0x1E4F6E6D8] validateAndCleanupID:v3];
    if (![v5 length])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          id v42 = v3;
          _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Validated Address is nil, we are returning nil. Address: %@", buf, 0xCu);
        }
      }
      id v11 = 0;
      goto LABEL_46;
    }
    uint64_t v6 = (void *)MEMORY[0x1E4F1CA48];
    CFStringRef v7 = [MEMORY[0x1E4F1B910] descriptorForRequiredKeysForStyle:0];
    uint64_t v8 = [v6 arrayWithObject:v7];

    if ([v4 count]) {
      [v8 addObjectsFromArray:v4];
    }
    uint64_t v9 = +[IMDContactCache sharedInstance];
    uint64_t v10 = [v9 cachedContactForKey:v5];

    if (v10)
    {
      if ([v10 areKeysAvailable:v8])
      {
        id v11 = v10;
LABEL_45:

LABEL_46:
        goto LABEL_47;
      }
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v42 = v5;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: No cached contact for ID:%@. We are refetching.", buf, 0xCu);
      }
    }
    uint64_t v15 = [MEMORY[0x1E4F1B8F8] predicateForContactsMatchingEmailAddress:v5];
    uint64_t v16 = _IMDContactStore();
    id v40 = 0;
    uint64_t v17 = [v16 unifiedContactsMatchingPredicate:v15 keysToFetch:v8 error:&v40];
    id v38 = v40;

    if (v38)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = [v38 localizedDescription];
          *(_DWORD *)uint8_t buf = 138412290;
          id v42 = v19;
          _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Contact Store (email)fetch failed: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      long long v20 = [v17 firstObject];
      if (v20)
      {
        __int16 v21 = +[IMDContactCache sharedInstance];
        [v21 cacheContact:v20 forKey:v5];

        if (IMOSLoggingEnabled())
        {
          uint64_t v22 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412546;
            id v42 = v5;
            __int16 v43 = 2112;
            id v44 = v20;
            _os_log_impl(&dword_1AFB53000, v22, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Got a Contact for address %@. Caching and returning contact: %@", buf, 0x16u);
          }
        }
        id v11 = v20;
        goto LABEL_44;
      }
    }
    uint64_t v23 = (void *)MEMORY[0x1E4F1B8F8];
    id v24 = [MEMORY[0x1E4F1BA70] phoneNumberWithStringValue:v5];
    uint64_t v25 = [v23 predicateForContactsMatchingPhoneNumber:v24];

    BOOL v26 = _IMDContactStore();
    id v39 = 0;
    long long v27 = [v26 unifiedContactsMatchingPredicate:v25 keysToFetch:v8 error:&v39];
    id v28 = v39;

    if (v28)
    {
      if (IMOSLoggingEnabled())
      {
        id v29 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          id v30 = [v28 localizedDescription];
          *(_DWORD *)uint8_t buf = 138412290;
          id v42 = v30;
          _os_log_impl(&dword_1AFB53000, v29, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Contact Store (phone)fetch failed: %@", buf, 0xCu);
        }
      }
      id v31 = 0;
    }
    else
    {
      id v31 = [v27 firstObject];
      if (v31)
      {
        id v34 = +[IMDContactCache sharedInstance];
        [v34 cacheContact:v31 forKey:v5];

        if (IMOSLoggingEnabled())
        {
          CFNumberRef v35 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            id v42 = v5;
            _os_log_impl(&dword_1AFB53000, v35, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Got a Contact for address %@. Caching and returning contact.", buf, 0xCu);
          }
        }
      }
      else
      {
        id v31 = [MEMORY[0x1E4F6E6D8] createMutableContactWithID:v5];
        if (IMOSLoggingEnabled())
        {
          uint64_t v36 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412546;
            id v42 = v5;
            __int16 v43 = 2112;
            id v44 = v31;
            _os_log_impl(&dword_1AFB53000, v36, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Did not get a Contact for address %@ from Contact Store. Caching mutable contact: %@", buf, 0x16u);
          }
        }
        uint64_t v37 = +[IMDContactCache sharedInstance];
        [v37 cacheContact:v31 forKey:v5];
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v32 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v42 = v31;
        _os_log_impl(&dword_1AFB53000, v32, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Return contact: %@", buf, 0xCu);
      }
    }
    id v11 = v31;

    uint64_t v15 = (void *)v25;
    uint64_t v17 = v27;
LABEL_44:

    goto LABEL_45;
  }
  if (IMOSLoggingEnabled())
  {
    id v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Address is nil, we are returning nil.", buf, 2u);
    }
  }
  id v11 = 0;
LABEL_47:

  return v11;
}

id _IMDCoreSpotlightPerson(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v8)
  {
    id v11 = objc_alloc(MEMORY[0x1E4F23810]);
    id v28 = v8;
    id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v28 count:1];
    uint64_t v13 = _IMDContactsKindForID(v8, v10);
    uint64_t v14 = (void *)[v11 initWithDisplayName:v7 handles:v12 handleIdentifier:v13];
  }
  else
  {
    *(_OWORD *)id v24 = xmmword_1E5F95930;
    *(_OWORD *)&v24[16] = *(_OWORD *)off_1E5F95940;
    *(void *)uint64_t v25 = 545;
    uint64_t v15 = NSString;
    uint64_t v16 = IMFileLocationTrimFileName();
    uint64_t v17 = [NSString stringWithFormat:&stru_1F084E970];
    uint64_t v18 = [v15 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"handleID", "CSPerson *_IMDCoreSpotlightPerson(NSString *__strong _Nonnull, NSString *__strong _Nonnull, CNContact *__strong _Nonnull, NSString *__strong _Nonnull)", v16, 545, v17];

    uint64_t v19 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v19)
    {
      v19(v18);
    }
    else if (IMOSLoggingEnabled())
    {
      long long v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v30 = v18;
        _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    uint64_t v14 = 0;
  }
  __int16 v21 = [v9 identifier];
  [v14 setContactIdentifier:v21];

  if ([MEMORY[0x1E4F6E700] verboseLoggingEnabled] && IMOSLoggingEnabled())
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)id v24 = 138413314;
      *(void *)&v24[4] = v14;
      *(_WORD *)&v24[12] = 2112;
      *(void *)&v24[14] = v7;
      *(_WORD *)&v24[22] = 2112;
      *(void *)&v24[24] = v8;
      *(_WORD *)uint64_t v25 = 2112;
      *(void *)&v25[2] = v9;
      __int16 v26 = 2112;
      id v27 = v10;
      _os_log_impl(&dword_1AFB53000, v22, OS_LOG_TYPE_INFO, "Created CSPerson: %@, fullName: %@, handleID: %@, contact: %@, service: %@", v24, 0x34u);
    }
  }
  return v14;
}

id _IMDContactsKindForID(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    CFStringRef v5 = NSString;
    uint64_t v6 = IMFileLocationTrimFileName();
    id v7 = [NSString stringWithFormat:&stru_1F084E970];
    id v8 = [v5 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"handleID", "NSString *_IMDContactsKindForID(NSString *__strong _Nonnull, NSString *__strong _Nonnull)", v6, 566, v7];

    id v9 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v9)
    {
      v9(v8);
    }
    else if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v16 = v8;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  id v11 = (id)*MEMORY[0x1E4F1AE60];
  if ((_IMDCoreSpotlightServiceIsLegacy(v4) & 1) == 0)
  {
    if ([v3 _appearsToBePhoneNumber])
    {
      id v12 = (id *)MEMORY[0x1E4F1AEE0];
    }
    else
    {
      if (![v3 _appearsToBeEmail]) {
        goto LABEL_15;
      }
      id v12 = (id *)MEMORY[0x1E4F1ADC8];
    }
    id v13 = *v12;

    id v11 = v13;
  }
LABEL_15:

  return v11;
}

uint64_t _IMDCoreSpotlightServiceIsLegacy(void *a1)
{
  uint64_t v1 = qword_1E9AF7F68;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1E9AF7F68, &unk_1F084C548);
  }
  int v3 = [(id)qword_1E9AF7FA0 containsObject:v2];

  return v3 ^ 1u;
}

void sub_1AFBC43B0()
{
  void v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F6E1B8];
  v4[0] = *MEMORY[0x1E4F6E1B0];
  v4[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F6E1A0];
  v4[2] = *MEMORY[0x1E4F6E198];
  v4[3] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:4];
  int v3 = (void *)qword_1E9AF7FA0;
  qword_1E9AF7FA0 = v2;
}

BOOL _IMDCoreSpotlightMessageMentionsMe(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFStringRef v5 = _IMDCoreSpotlightTokensMentionedInMessage(v3);
  if ([v5 count])
  {
    uint64_t v6 = _IMDCoreSpotlightTokensForMeIncludingCallerID(v4);
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000;
    char v16 = 0;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1AFBC4768;
    v10[3] = &unk_1E5F95988;
    id v7 = v6;
    id v11 = v7;
    id v12 = &v13;
    [v5 enumerateObjectsUsingBlock:v10];
    BOOL v8 = *((unsigned char *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

void sub_1AFBC4578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _IMDCoreSpotlightTokensMentionedInMessage(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x1E4F1CA48];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  uint64_t v4 = *MEMORY[0x1E4F6D538];
  uint64_t v5 = [v2 length];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFBC47B0;
  v9[3] = &unk_1E5F959B0;
  id v10 = v3;
  id v6 = v3;
  objc_msgSend(v2, "enumerateAttribute:inRange:options:usingBlock:", v4, 0, v5, 0, v9);

  id v7 = (void *)[v6 copy];
  return v7;
}

id _IMDCoreSpotlightTokensForMeIncludingCallerID(void *a1)
{
  id v1 = a1;
  id v2 = _IMDContactStore();
  id v3 = IMMentionContactKeysForMe();
  uint64_t v9 = 0;
  uint64_t v4 = [v2 _crossPlatformUnifiedMeContactWithKeysToFetch:v3 error:&v9];

  uint64_t v5 = IMMentionMeTokensForContact();
  id v6 = (void *)[v5 mutableCopy];
  if ([v1 length]) {
    [v6 addObject:v1];
  }
  id v7 = (void *)[v6 copy];

  return v7;
}

uint64_t sub_1AFBC4768(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = [*(id *)(a1 + 32) containsObject:a2];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1AFBC47B0(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (MEMORY[0x1B3E89A10]())
  {
    IMNormalizePhoneNumber();
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v3 = v5;
  }
  uint64_t v4 = v3;
  if ([v3 length]) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

id _IMDCoreRecentsKindForHandleID(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    id v5 = NSString;
    uint64_t v6 = IMFileLocationTrimFileName();
    id v7 = [NSString stringWithFormat:&stru_1F084E970];
    BOOL v8 = [v5 stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"handleID", "NSString *_IMDCoreRecentsKindForHandleID(NSString *__strong _Nonnull, NSString *__strong _Nonnull)", v6, 654, v7];

    uint64_t v9 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v9)
    {
      v9(v8);
    }
    else if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        char v16 = v8;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  id v11 = (id)*MEMORY[0x1E4F5CC70];
  if ((_IMDCoreSpotlightServiceIsLegacy(v4) & 1) == 0)
  {
    if ([v3 _appearsToBePhoneNumber])
    {
      id v12 = (id *)MEMORY[0x1E4F5CC80];
    }
    else
    {
      if (![v3 _appearsToBeEmail]) {
        goto LABEL_15;
      }
      id v12 = (id *)MEMORY[0x1E4F5CC60];
    }
    id v13 = *v12;

    id v11 = v13;
  }
LABEL_15:

  return v11;
}

id sub_1AFBC4A38()
{
  if (!qword_1EB5ABBC0 && (IMIsRunningInUnitTesting() & 1) == 0)
  {
    uint64_t v0 = [(id)*MEMORY[0x1E4F6DDD8] stringByAppendingString:@"pendingNicknamesKeyStore.db"];
    id v1 = [v0 stringByResolvingAndStandardizingPath];

    uint64_t v2 = [objc_alloc(MEMORY[0x1E4F6B810]) initWithPath:v1 storeName:@"pendingNicknameUpdatesStore" dataProtectionClass:0];
    id v3 = (void *)qword_1EB5ABBC0;
    qword_1EB5ABBC0 = v2;
  }
  id v4 = (void *)qword_1EB5ABBC0;
  return v4;
}

id sub_1AFBC4AE4()
{
  if (!qword_1EB5ABBB8 && (IMIsRunningInUnitTesting() & 1) == 0)
  {
    uint64_t v0 = [(id)*MEMORY[0x1E4F6DDD8] stringByAppendingString:@"handledNicknamesKeyStore.db"];
    id v1 = [v0 stringByResolvingAndStandardizingPath];

    uint64_t v2 = [objc_alloc(MEMORY[0x1E4F6B810]) initWithPath:v1 storeName:@"handledNicknamesStore" dataProtectionClass:0];
    id v3 = (void *)qword_1EB5ABBB8;
    qword_1EB5ABBB8 = v2;
  }
  id v4 = (void *)qword_1EB5ABBB8;
  return v4;
}

id sub_1AFBC4B90(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v18 = 0;
  id v5 = [v3 dataForKey:v4 error:&v18];
  id v6 = v18;
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v20 = v6;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "We got an error loading the nickname info from the kv store for notifications %@", buf, 0xCu);
      }
    }
    id v8 = 0;
LABEL_7:
    uint64_t v9 = 0;
    goto LABEL_21;
  }
  if ([v5 length])
  {
    id v10 = (void *)MEMORY[0x1E4F28DC0];
    id v11 = IMNicknameUnarchivingClasses();
    id v17 = 0;
    id v8 = [v10 _strictlyUnarchivedObjectOfClasses:v11 fromData:v5 error:&v17];
    id v12 = v17;

    int v13 = IMOSLoggingEnabled();
    if (v12)
    {
      if (v13)
      {
        uint64_t v14 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          id v20 = v12;
          _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "We got an error unarchiving the nickname dictionary %@", buf, 0xCu);
        }
      }
      goto LABEL_7;
    }
    if (v13)
    {
      uint64_t v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412546;
        id v20 = v4;
        __int16 v21 = 2112;
        id v22 = v8;
        _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "We have a nickname dictionary for %@ %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v8 = 0;
  }
  id v8 = v8;
  uint64_t v9 = v8;
LABEL_21:

  return v9;
}

id _IMDNicknameInfoForAddress(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1AFBC4A38();
  id v3 = sub_1AFBC4B90(v2, v1);

  if (![v3 count])
  {
    id v4 = sub_1AFBC4AE4();
    uint64_t v5 = sub_1AFBC4B90(v4, v1);

    id v3 = (void *)v5;
  }

  return v3;
}

id _IMDContactNameForNickname(void *a1, int a2)
{
  id v3 = a1;
  if (v3)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1BA40]);
    uint64_t v5 = [v3 firstName];
    [v4 setGivenName:v5];

    id v6 = [v3 lastName];
    [v4 setFamilyName:v6];

    id v7 = [MEMORY[0x1E4F1B910] stringFromContact:v4 style:0];
  }
  else
  {
    id v7 = 0;
  }
  if ([v7 length] && a2)
  {
    id v8 = NSString;
    uint64_t v9 = IMSharedUtilitiesFrameworkBundle();
    id v10 = [v9 localizedStringForKey:@"MAYBE" value:&stru_1F084E970 table:@"IMSharedUtilities"];
    uint64_t v11 = objc_msgSend(v8, "localizedStringWithFormat:", v10, v7);

    id v7 = (void *)v11;
  }

  return v7;
}

void _AddLocationsFromVCFToCoreRecents(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  id v44 = a2;
  id v45 = a3;
  id v56 = a4;
  id v42 = v8;
  if (v8)
  {
    __int16 v43 = +[IMDContactCache contactsForVCardAtPath:v8];
    if ([v43 count])
    {
      __int16 v55 = [MEMORY[0x1E4F1CA48] array];
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      obuint64_t j = v43;
      uint64_t v41 = [obj countByEnumeratingWithState:&v70 objects:v77 count:16];
      if (v41)
      {
        uint64_t v38 = *(void *)v71;
        uint64_t v54 = *MEMORY[0x1E4F5CC78];
        do
        {
          uint64_t v9 = 0;
          do
          {
            if (*(void *)v71 != v38)
            {
              uint64_t v10 = v9;
              objc_enumerationMutation(obj);
              uint64_t v9 = v10;
            }
            uint64_t v39 = v9;
            uint64_t v51 = *(void **)(*((void *)&v70 + 1) + 8 * v9);
            uint64_t v11 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithDouble:", *(double *)MEMORY[0x1B3E89B20]("CRRecentWeightMessagesReceivedAddress", @"CoreRecents"));
            id v12 = [MEMORY[0x1E4F6E6F0] metadataDictionaryForMessageID:v44 senderID:v45 date:v56];
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            int v13 = [v51 postalAddresses];
            uint64_t v14 = [v13 countByEnumeratingWithState:&v66 objects:v76 count:16];
            if (v14)
            {
              uint64_t v15 = *(void *)v67;
              do
              {
                for (uint64_t i = 0; i != v14; ++i)
                {
                  if (*(void *)v67 != v15) {
                    objc_enumerationMutation(v13);
                  }
                  id v17 = (void *)MEMORY[0x1E4F1BA88];
                  id v18 = [*(id *)(*((void *)&v66 + 1) + 8 * i) value];
                  uint64_t v19 = [v17 singleLineStringFromPostalAddress:v18 addCountryName:0];

                  id v20 = [MEMORY[0x1E4F5CCE0] recentEventForAddress:v19 displayName:0 kind:v54 date:v56 weight:v11 metadata:v12 options:0];
                  [v55 addObject:v20];

                  if (a5) {
                    *a5 = (id)[v19 copy];
                  }
                }
                uint64_t v14 = [v13 countByEnumeratingWithState:&v66 objects:v76 count:16];
              }
              while (v14);
            }

            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            id v46 = [v51 urlAddresses];
            uint64_t v48 = [v46 countByEnumeratingWithState:&v62 objects:v75 count:16];
            if (v48)
            {
              uint64_t v47 = *(void *)v63;
              do
              {
                uint64_t v21 = 0;
                do
                {
                  if (*(void *)v63 != v47)
                  {
                    uint64_t v22 = v21;
                    objc_enumerationMutation(v46);
                    uint64_t v21 = v22;
                  }
                  uint64_t v52 = v21;
                  uint64_t v23 = *(void **)(*((void *)&v62 + 1) + 8 * v21);
                  id v24 = [v23 label];
                  int v25 = [v24 isEqualToString:@"map url"];

                  if (v25)
                  {
                    id v50 = [v23 value];
                    __int16 v26 = [MEMORY[0x1E4F1CB10] URLWithString:v50];
                    id v49 = [v26 query];

                    long long v60 = 0u;
                    long long v61 = 0u;
                    long long v58 = 0u;
                    long long v59 = 0u;
                    id v27 = [v49 componentsSeparatedByString:@"&"];
                    uint64_t v28 = [v27 countByEnumeratingWithState:&v58 objects:v74 count:16];
                    if (v28)
                    {
                      uint64_t v29 = *(void *)v59;
                      do
                      {
                        for (uint64_t j = 0; j != v28; ++j)
                        {
                          if (*(void *)v59 != v29) {
                            objc_enumerationMutation(v27);
                          }
                          uint64_t v31 = [*(id *)(*((void *)&v58 + 1) + 8 * j) componentsSeparatedByString:@"="];
                          id v32 = [v31 objectAtIndex:0];
                          id v33 = [v31 objectAtIndex:1];
                          if ([v32 isEqualToString:@"ll"])
                          {
                            id v34 = [MEMORY[0x1E4F5CCE0] recentEventForAddress:v33 displayName:0 kind:v54 date:v56 weight:v11 metadata:v12 options:0];
                            [v55 addObject:v34];
                          }
                        }
                        uint64_t v28 = [v27 countByEnumeratingWithState:&v58 objects:v74 count:16];
                      }
                      while (v28);
                    }
                  }
                  uint64_t v21 = v52 + 1;
                }
                while (v52 + 1 != v48);
                uint64_t v48 = [v46 countByEnumeratingWithState:&v62 objects:v75 count:16];
              }
              while (v48);
            }

            uint64_t v9 = v39 + 1;
          }
          while (v39 + 1 != v41);
          uint64_t v41 = [obj countByEnumeratingWithState:&v70 objects:v77 count:16];
        }
        while (v41);
      }

      if ([v55 count])
      {
        CFNumberRef v35 = +[IMDCoreSpotlightDispatchObject sharedInstance];
        uint64_t v36 = [v35 recentsInstance];
        [v36 recordContactEvents:v55 recentsDomain:*MEMORY[0x1E4F5CCC0] sendingAddress:0 source:0 userInitiated:0];
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v37 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v37, OS_LOG_TYPE_INFO, "_AddLocationsFromVCFToCoreRecents() was passed a nil filePath", buf, 2u);
    }
  }
}

id _IMDCoreSpotlightChatUIDForChatDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 valueForKey:@"style"];

  if (v2)
  {
    id v3 = [v1 valueForKey:@"style"];
    int v4 = [v3 charValue];

    if (v4 == 45)
    {
      uint64_t v5 = @"chatIdentifier";
      goto LABEL_6;
    }
    if (v4 == 43)
    {
      uint64_t v5 = @"groupID";
LABEL_6:
      uint64_t v2 = [v1 valueForKey:v5];
      goto LABEL_8;
    }
    uint64_t v2 = 0;
  }
LABEL_8:

  return v2;
}

uint64_t IMDCoreSpotlightPhotoAtPathIsScreenshot(void *a1)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 length]
    && ([MEMORY[0x1E4F1CB10] fileURLWithPath:v1],
        CFURLRef v2 = (const __CFURL *)objc_claimAutoreleasedReturnValue(),
        id v3 = CGImageSourceCreateWithURL(v2, 0),
        v2,
        v3))
  {
    int v4 = CGImageSourceGetType(v3);
    if (IMUTTypeIsSupportedScreenshot())
    {
      uint64_t v13 = *MEMORY[0x1E4F2FF08];
      v14[0] = MEMORY[0x1E4F1CC28];
      CFDictionaryRef v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
      CFDictionaryRef v6 = CGImageSourceCopyPropertiesAtIndex(v3, 0, v5);
      CFDictionaryRef v7 = v6;
      if (v6)
      {
        id v8 = [(__CFDictionary *)v6 objectForKey:*MEMORY[0x1E4F2F800]];
        uint64_t v9 = v8;
        if (v8)
        {
          uint64_t v10 = [v8 objectForKey:*MEMORY[0x1E4F2F958]];
          uint64_t v11 = [v10 isEqualToString:@"Screenshot"];
        }
        else
        {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void IMDCoreSpotlightURLFromAttributedMessageBody(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  if (v1)
  {
    id v3 = (uint64_t *)v2;
    uint64_t v4 = *MEMORY[0x1E4F6C1D0];
    if (objc_msgSend(v1, "attribute:existsInRange:", *MEMORY[0x1E4F6C1D0], 0, v2))
    {
      uint64_t v19 = 0;
      id v20 = 0;
      CFDictionaryRef v5 = objc_msgSend(v1, "attribute:atIndex:longestEffectiveRange:inRange:", v4, 0, &v19, 0, v3);
      objc_opt_class();
      id v6 = 0;
      if (objc_opt_isKindOfClass())
      {
        id v6 = 0;
        if (!v19 && v20 == v3) {
          id v6 = v5;
        }
      }

      goto LABEL_21;
    }
    id v6 = 0;
    if (objc_msgSend(v1, "attribute:existsInRange:", *MEMORY[0x1E4F6C160], 0, v3))
    {
      uint64_t v19 = 0;
      id v20 = &v19;
      uint64_t v21 = 0x3032000000;
      uint64_t v22 = sub_1AFBC5D80;
      uint64_t v23 = sub_1AFBC5D90;
      id v24 = 0;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = sub_1AFBC5D98;
      v18[3] = &unk_1E5F95A00;
      v18[4] = &v19;
      objc_msgSend(v1, "enumerateAttributesInRange:options:usingBlock:", 0, v3, 0, v18);
      CFDictionaryRef v7 = _IMDCopyDDScannerResultFromAttributedStringData((void *)v20[5]);
      id v6 = (id)[v7 coreResult];
      if (v6)
      {
        uint64_t v30 = 0;
        uint64_t v31 = &v30;
        uint64_t v32 = 0x2020000000;
        id v8 = (unsigned int (*)(id))off_1E9AF81D0;
        id v33 = off_1E9AF81D0;
        if (!off_1E9AF81D0)
        {
          uint64_t v25 = MEMORY[0x1E4F143A8];
          uint64_t v26 = 3221225472;
          id v27 = sub_1AFBC7E08;
          uint64_t v28 = &unk_1E5F8EB38;
          uint64_t v29 = &v30;
          uint64_t v9 = (void *)sub_1AFBC7E58();
          uint64_t v10 = dlsym(v9, "DDResultGetCategory");
          *(void *)(v29[1] + 24) = v10;
          off_1E9AF81D0 = *(_UNKNOWN **)(v29[1] + 24);
          id v8 = (unsigned int (*)(id))v31[3];
        }
        _Block_object_dispose(&v30, 8);
        if (v8)
        {
          if (v8(v6) != 1)
          {
            id v6 = 0;
            goto LABEL_20;
          }
          uint64_t v30 = 0;
          uint64_t v31 = &v30;
          uint64_t v32 = 0x2020000000;
          uint64_t v11 = (uint64_t (*)(id, void))off_1E9AF81E0;
          id v33 = off_1E9AF81E0;
          if (!off_1E9AF81E0)
          {
            uint64_t v25 = MEMORY[0x1E4F143A8];
            uint64_t v26 = 3221225472;
            id v27 = sub_1AFBC7FC4;
            uint64_t v28 = &unk_1E5F8EB38;
            uint64_t v29 = &v30;
            id v12 = (void *)sub_1AFBC7E58();
            uint64_t v13 = dlsym(v12, "DDResultCopyExtractedURLWithOptions");
            *(void *)(v29[1] + 24) = v13;
            off_1E9AF81E0 = *(_UNKNOWN **)(v29[1] + 24);
            uint64_t v11 = (uint64_t (*)(id, void))v31[3];
          }
          _Block_object_dispose(&v30, 8);
          if (v11)
          {
            uint64_t v14 = (void *)v11(v6, 0);
            id v6 = [MEMORY[0x1E4F1CB10] URLWithString:v14];

            goto LABEL_20;
          }
          char v16 = [MEMORY[0x1E4F28B00] currentHandler];
          id v17 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _DDResultCopyExtractedURLWithOptions(DDResultRef, DDResultURLExtractionOptions)");
          objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, @"IMDCoreSpotlightIndexHelpers.m", 75, @"%s", dlerror());
        }
        else
        {
          char v16 = [MEMORY[0x1E4F28B00] currentHandler];
          id v17 = [NSString stringWithUTF8String:"DDResultCategory _DDResultGetCategory(DDResultRef)"];
          objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, @"IMDCoreSpotlightIndexHelpers.m", 74, @"%s", dlerror());
        }

        __break(1u);
        return;
      }
LABEL_20:

      _Block_object_dispose(&v19, 8);
    }
  }
  else
  {
    id v6 = 0;
  }
LABEL_21:

  id v15 = v6;
}

void sub_1AFBC5D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBC5D80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBC5D90(uint64_t a1)
{
}

void sub_1AFBC5D98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id v7 = a2;
  uint64_t v8 = *MEMORY[0x1E4F6C160];
  id v13 = v7;
  uint64_t v9 = [v7 objectForKeyedSubscript:*MEMORY[0x1E4F6C160]];

  if (v9)
  {
    uint64_t v10 = [v13 objectForKeyedSubscript:v8];
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    *a5 = 1;
  }
}

id _IMDCopyDDScannerResultFromAttributedStringData(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (![v1 length])
  {
    CFDictionaryRef v5 = 0;
    goto LABEL_17;
  }
  uint64_t v2 = (void *)MEMORY[0x1B3E8A120]();
  id v9 = 0;
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v1 error:&v9];
  id v4 = v9;
  if (v3)
  {
    if (!qword_1E9AF81A8) {
      qword_1E9AF81A8 = MEMORY[0x1B3E89B10](@"DDScannerResult", @"DataDetectorsCore");
    }
    CFDictionaryRef v5 = [v3 decodeObjectOfClass:objc_opt_class() forKey:@"dd-result"];
    [v3 finishDecoding];
    if (v5) {
      goto LABEL_16;
    }
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = [v3 error];
        *(_DWORD *)uint8_t buf = 138412546;
        id v11 = v1;
        __int16 v12 = 2112;
        id v13 = v7;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Could not unarchive DDScannerResult data: %@ error: %@", buf, 0x16u);
      }
LABEL_14:
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      id v11 = v4;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Could not create keyed unarchiver due to error: %@", buf, 0xCu);
    }
    goto LABEL_14;
  }
  CFDictionaryRef v5 = 0;
LABEL_16:

LABEL_17:

  return v5;
}

void sub_1AFBC6068(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBC6008);
  }
  _Unwind_Resume(a1);
}

id _IMDCoreSpotlightStrippedBody(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [a1 objectForKey:a2];
  if (!v6) {
    id v6 = v5;
  }
  id v7 = [v6 stringByReplacingOccurrencesOfString:*MEMORY[0x1E4F6C110] withString:&stru_1F084E970];
  uint64_t v8 = [v7 stringByReplacingOccurrencesOfString:*MEMORY[0x1E4F6C130] withString:&stru_1F084E970];

  return v8;
}

void sub_1AFBC6294()
{
  uint64_t v0 = objc_alloc_init(IMDCoreSpotlightDispatchObject);
  id v1 = (void *)qword_1EB5ABCE8;
  qword_1EB5ABCE8 = (uint64_t)v0;
}

id _IMDCoreSpotlightFullNameForContact(void *a1, int a2)
{
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      id v5 = [v3 nickname];
    }
    else
    {
      id v5 = 0;
    }
    if (![v5 length])
    {
      uint64_t v6 = [MEMORY[0x1E4F1B910] stringFromContact:v4 style:0];

      id v5 = (void *)v6;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id _IMDCoreSpotlightNicknameForAddress(void *a1)
{
  id v1 = _IMDNicknameInfoForAddress(a1);
  if ([v1 count]) {
    uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F6E8B8]) initWithDictionaryRepresentation:v1];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

id sub_1AFBC647C()
{
  if (qword_1E9AF7F90 != -1) {
    dispatch_once(&qword_1E9AF7F90, &unk_1F084BFA0);
  }
  uint64_t v0 = (void *)qword_1E9AF7F98;
  return v0;
}

void sub_1AFBC64D0()
{
  uint64_t v0 = [MEMORY[0x1E4F5DB70] serviceForContacts];
  id v1 = (void *)qword_1E9AF7F98;
  qword_1E9AF7F98 = v0;
}

id _IMDCoreSpotlightSuggestedNameForAddress(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = sub_1AFBC647C();
    uint64_t v14 = 0;
    id v15 = &v14;
    uint64_t v16 = 0x3032000000;
    id v17 = sub_1AFBC5D80;
    id v18 = sub_1AFBC5D90;
    id v19 = 0;
    dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1AFBC67F0;
    v10[3] = &unk_1E5F95A28;
    id v11 = 0;
    id v13 = &v14;
    id v4 = v3;
    __int16 v12 = v4;
    [v2 namesForDetail:v1 limitTo:1 prependMaybe:0 onlySignificant:0 withCompletion:v10];
    dispatch_time_t v5 = dispatch_time(0, 400000000);
    if (dispatch_semaphore_wait(v4, v5) && IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Suggestion service request timed out", buf, 2u);
      }
    }
    if ([(id)v15[5] length])
    {
      id v7 = (id)v15[5];
      if (IMOSLoggingEnabled())
      {
        uint64_t v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412546;
          id v21 = v7;
          __int16 v22 = 2112;
          id v23 = v1;
          _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Using suggested name \"%@\" for handle %@", buf, 0x16u);
        }
      }
    }
    else
    {
      id v7 = 0;
    }

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_1AFBC67F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC68A40(a1, (uint64_t)v6, v7);
    }
    goto LABEL_6;
  }
  if ([v5 count])
  {
    id v7 = [v5 firstObject];
    uint64_t v8 = [v7 copy];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

LABEL_6:
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

id _IMDCoreSpotlightNewINPersonFromHandleAndContact(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v47 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = [v10 identifier];
  uint64_t v14 = _IMDCoreSpotlightNewINPersonHandleFromIMHandleValueAndContact(v9, v10);
  id v15 = [MEMORY[0x1E4F28F30] componentsForContact:v10];
  if ([v9 hasSuffix:*MEMORY[0x1E4F6D2C0]])
  {
    uint64_t v16 = IMSharedUtilitiesFrameworkBundle();
    id v17 = [v16 localizedStringForKey:@"TS_NOTIFICATION_EMERGENCY_SOS_HANDLE" value:&stru_1F084E970 table:@"IMSharedUtilities-SYDROB_FEATURES"];

    uint64_t v18 = _IMDIntentsSOSImage();
LABEL_5:
    id v20 = (void *)v18;
    BOOL v21 = 0;
    goto LABEL_19;
  }
  if (IMIsStringStewieEmergency())
  {
    id v19 = IMSharedUtilitiesFrameworkBundle();
    id v17 = [v19 localizedStringForKey:@"STEWIE_NOTIFICATION_EMERGENCY_SOS_HANDLE" value:&stru_1F084E970 table:@"IMSharedUtilities-SYDROB_FEATURES"];

    uint64_t v18 = _IMDIntentsSOSImage();
    goto LABEL_5;
  }
  if (IMIsStringStewieRoadside())
  {
    if (v11)
    {
      id v17 = v11;
    }
    else
    {
      uint64_t v25 = IMSharedUtilitiesFrameworkBundle();
      id v17 = [v25 localizedStringForKey:@"STEWIE_NOTIFICATION_ROADSIDE_HANDLE" value:&stru_1F084E970 table:@"IMSharedUtilities-Avocet"];
    }
LABEL_18:
    BOOL v21 = 0;
    id v20 = 0;
    goto LABEL_19;
  }
  if ((MEMORY[0x1B3E899E0](v9) & 1) != 0 || objc_msgSend(v9, "__im_isChatBot"))
  {
    __int16 v22 = [MEMORY[0x1E4F6E640] sharedInstance];
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = sub_1AFBC7364;
    v48[3] = &unk_1E5F95A50;
    id v49 = v12;
    id v23 = [v22 businessNameForUID:v9 updateHandler:v48];
    if ([v23 length])
    {
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v26 = IMLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_1AFC68ACC(v26);
      }

      uint64_t v24 = [MEMORY[0x1E4F6E640] placeholderBusinessNameForBrandURI:v9];
    }
    id v17 = v24;

    goto LABEL_18;
  }
  if (v10 && [MEMORY[0x1E4F6E6D8] isCNContactAKnownContact:v10])
  {
    uint64_t v29 = [MEMORY[0x1E4F1B9A8] sharedDefaults];
    uint64_t v30 = _IMDCoreSpotlightFullNameForContact(v10, [v29 shortNameFormatPrefersNicknames]);
    if ([v30 length] && IMOSLoggingEnabled())
    {
      uint64_t v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412802;
        id v51 = v9;
        __int16 v52 = 2112;
        os_log_t v53 = v30;
        __int16 v54 = 2112;
        __int16 v55 = v13;
        _os_log_impl(&dword_1AFB53000, v31, OS_LOG_TYPE_INFO, "For handle %@ used contacts to determine displayName \"%@\" and image. Using contactID: %@", buf, 0x20u);
      }
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  if ([v30 length])
  {
    BOOL v21 = 0;
    id v20 = 0;
  }
  else
  {
    uint64_t v32 = _IMDCoreSpotlightNicknameForAddress(v9);
    os_log_t log = v32;
    if (v32)
    {
      id v40 = _IMDContactNameForNickname(v32, 0);
      uint64_t v33 = [v40 length];
      BOOL v21 = v33 != 0;
      if (v33)
      {
        uint64_t v39 = v40;

        id v20 = _IMDINImageForNickname(log);
        if (IMOSLoggingEnabled())
        {
          id v34 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412802;
            id v51 = v9;
            __int16 v52 = 2112;
            os_log_t v53 = v39;
            __int16 v54 = 2112;
            __int16 v55 = v20;
            _os_log_impl(&dword_1AFB53000, v34, OS_LOG_TYPE_INFO, "For handle %@ used nickname to determine displayName \"%@\" and image %@", buf, 0x20u);
          }
        }
        uint64_t v30 = v39;
      }
      else
      {
        id v20 = 0;
      }
    }
    else
    {
      BOOL v21 = 0;
      id v20 = 0;
    }
  }
  if ([v30 length])
  {
    CFNumberRef v35 = v30;
  }
  else
  {
    uint64_t v41 = _IMDCoreSpotlightSuggestedNameForAddress(v9);
    if ([v41 length])
    {
      os_log_t loga = v41;

      if (IMOSLoggingEnabled())
      {
        uint64_t v36 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412546;
          id v51 = v9;
          __int16 v52 = 2112;
          os_log_t v53 = loga;
          _os_log_impl(&dword_1AFB53000, v36, OS_LOG_TYPE_INFO, "For handle %@ used nickname to determine displayName \"%@\" and no image", buf, 0x16u);
        }
      }
      BOOL v21 = 1;
    }
    else
    {
      os_log_t loga = v30;
    }

    CFNumberRef v35 = loga;
  }
  os_log_t logb = v35;
  if (![v35 length]
    && [v47 length]
    && ([v47 lowercaseString],
        uint64_t v37 = objc_claimAutoreleasedReturnValue(),
        int v42 = [v9 isEqualToString:v37],
        v37,
        v42))
  {
    id v17 = v47;

    if (IMOSLoggingEnabled())
    {
      logc = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(logc, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412546;
        id v51 = v9;
        __int16 v52 = 2112;
        os_log_t v53 = v17;
        _os_log_impl(&dword_1AFB53000, logc, OS_LOG_TYPE_INFO, "For handle %@ used uncanonicalized address to determine displayName \"%@\" and no image", buf, 0x16u);
      }
    }
  }
  else
  {
    id v17 = logb;
  }
LABEL_19:
  LOBYTE(v38) = v21;
  id v27 = (void *)[objc_alloc(MEMORY[0x1E4F305B0]) initWithPersonHandle:v14 nameComponents:v15 displayName:v17 image:v20 contactIdentifier:v13 customIdentifier:0 isContactSuggestion:v38 suggestionType:0];

  return v27;
}

id _IMDCoreSpotlightNewINPersonHandleFromIMHandleValueAndContact(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!MEMORY[0x1B3E89A10](v3))
  {
    if (!IMStringIsEmail())
    {
      uint64_t v14 = 0;
      uint64_t v20 = 0;
      goto LABEL_42;
    }
    if (!v4)
    {
      uint64_t v14 = 0;
      uint64_t v20 = 1;
      goto LABEL_42;
    }
    id v5 = IMNormalizeFormattedString();
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v6 = [v4 emailAddresses];
    uint64_t v14 = (void *)[v6 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v14)
    {
      id v23 = v4;
      id v24 = v3;
      uint64_t v15 = *(void *)v26;
      while (2)
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v26 != v15) {
            objc_enumerationMutation(v6);
          }
          id v17 = *(void **)(*((void *)&v25 + 1) + 8 * (void)v16);
          uint64_t v18 = objc_msgSend(v17, "value", v23, v24);
          id v19 = IMNormalizeFormattedString();

          if ([v19 isEqual:v5])
          {
            if (qword_1E9AF81C8 != -1) {
              dispatch_once(&qword_1E9AF81C8, &unk_1F084D4D8);
            }
            if (off_1E9AF81C0)
            {
              uint64_t v14 = ((void (*)(void *))off_1E9AF81C0)(v17);

              uint64_t v20 = 1;
LABEL_37:
              id v4 = v23;
              id v3 = v24;
              goto LABEL_40;
            }
          }

          uint64_t v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        uint64_t v14 = (void *)[v6 countByEnumeratingWithState:&v25 objects:v33 count:16];
        if (v14) {
          continue;
        }
        break;
      }
      id v4 = v23;
      id v3 = v24;
    }
    uint64_t v20 = 1;
    goto LABEL_40;
  }
  if (!v4)
  {
    uint64_t v14 = 0;
    uint64_t v20 = 2;
    goto LABEL_42;
  }
  id v5 = objc_msgSend(objc_alloc((Class)MEMORY[0x1B3E89B10](@"CNPhoneNumber", @"Contacts")), "initWithStringValue:", v3);
  if (v5)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v6 = [v4 phoneNumbers];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      id v23 = v4;
      id v24 = v3;
      uint64_t v9 = *(void *)v30;
      while (2)
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v30 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v29 + 1) + 8 * v10);
          id v12 = objc_msgSend(v11, "value", v23, v24);
          int v13 = [v12 isLikePhoneNumber:v5];

          if (v13)
          {
            if (qword_1E9AF81B8 != -1) {
              dispatch_once(&qword_1E9AF81B8, &unk_1F084D4B8);
            }
            if (off_1E9AF81B0)
            {
              uint64_t v14 = ((void (*)(void *))off_1E9AF81B0)(v11);
              uint64_t v20 = 2;
              goto LABEL_37;
            }
          }
          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = [v6 countByEnumeratingWithState:&v29 objects:v34 count:16];
        if (v8) {
          continue;
        }
        break;
      }
      uint64_t v14 = 0;
      id v4 = v23;
      id v3 = v24;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v20 = 2;
LABEL_40:

    goto LABEL_41;
  }
  uint64_t v14 = 0;
  uint64_t v20 = 2;
LABEL_41:

LABEL_42:
  BOOL v21 = (void *)[objc_alloc(MEMORY[0x1E4F305B8]) initWithValue:v3 type:v20 label:v14];

  return v21;
}

void sub_1AFBC7364(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Business name updated to \"%@\", calling interaction updated handler", (uint8_t *)&v6, 0xCu);
    }
  }
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    IMDPersistencePerformBlock(v5, 0);
  }
}

id _IMDINImageForNickname(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 avatar];
  if ([v2 imageExists])
  {
    id v3 = [v2 imageFilePath];
    if ([v3 length])
    {
      id v4 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v3];
      id v5 = [MEMORY[0x1E4F304C0] imageWithURL:v4];
      if (IMOSLoggingEnabled())
      {
        int v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v10 = 138412290;
          id v11 = v3;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Using image file path: %@", (uint8_t *)&v10, 0xCu);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v10) = 0;
          _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Image file path is nil", (uint8_t *)&v10, 2u);
        }
      }
      id v5 = 0;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Image does not exist at nickname file path", (uint8_t *)&v10, 2u);
      }
    }
    id v5 = 0;
  }

  return v5;
}

id _IMDCoreSpotlightNewINInteractionForIncomingMessage(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, void *a11, void *a12, void *a13, void *a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17, void *a18)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v62 = a1;
  id v63 = a2;
  id v61 = a3;
  id v64 = a4;
  id v54 = a5;
  id v71 = a6;
  id v68 = a7;
  id v58 = a8;
  id v25 = a9;
  id v26 = a11;
  id v66 = a12;
  id v57 = a13;
  id v65 = a14;
  id v27 = a18;
  long long v69 = [MEMORY[0x1E4F1CA48] array];
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  obuint64_t j = v26;
  uint64_t v28 = [obj countByEnumeratingWithState:&v73 objects:v78 count:16];
  if (!v28)
  {

LABEL_17:
    if (IMOSLoggingEnabled())
    {
      uint64_t v38 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v38, OS_LOG_TYPE_INFO, "None of the current chat participants match the current senderID, creating a new person.", buf, 2u);
      }
    }
    _IMDCoreSpotlightNewINPersonFromHandleAndContact(v54, v71, 0, v25, v27);
    id v29 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_22;
  }
  id v29 = 0;
  uint64_t v30 = *(void *)v74;
  do
  {
    for (uint64_t i = 0; i != v28; ++i)
    {
      if (*(void *)v74 != v30) {
        objc_enumerationMutation(obj);
      }
      long long v32 = *(void **)(*((void *)&v73 + 1) + 8 * i);
      uint64_t v33 = [v32 handleID];
      id v34 = [v32 contact];
      uint64_t v35 = _IMDCoreSpotlightNewINPersonFromHandleAndContact(v33, v71, v34, v25, v27);

      int v36 = [v32 isSender];
      if (v29) {
        int v37 = 0;
      }
      else {
        int v37 = v36;
      }
      if (v37 == 1) {
        id v29 = v35;
      }
      else {
        [v69 addObject:v35];
      }
    }
    uint64_t v28 = [obj countByEnumeratingWithState:&v73 objects:v78 count:16];
  }
  while (v28);

  if (!v29) {
    goto LABEL_17;
  }
LABEL_22:
  if (MEMORY[0x1B3E89A10](v66)) {
    uint64_t IsEmail = 2;
  }
  else {
    uint64_t IsEmail = IMStringIsEmail();
  }
  id v40 = (void *)[objc_alloc(MEMORY[0x1E4F305B8]) initWithValue:v66 type:IsEmail];
  uint64_t v41 = (void *)[objc_alloc(MEMORY[0x1E4F305B0]) initWithPersonHandle:v40 nameComponents:0 displayName:0 image:0 contactIdentifier:0 customIdentifier:0];
  [v41 setIsMe:1];
  [v69 addObject:v41];
  if (a10 == 45 || ![v25 length]) {
    long long v60 = 0;
  }
  else {
    long long v60 = (void *)[objc_alloc(MEMORY[0x1E4F30750]) initWithVocabularyIdentifier:v68 spokenPhrase:v25 pronunciationHint:0];
  }
  long long v67 = (void *)[objc_alloc(MEMORY[0x1E4F306D0]) initWithRecipients:v69 content:v63 speakableGroupName:v60 conversationIdentifier:v68 serviceName:v64 sender:v29];
  [v67 setNotificationThreadIdentifier:v58];
  [v67 _setLaunchId:@"com.apple.MobileSMS"];
  int v42 = +[IMDDonationManager sharedInstance];
  [v42 copyGroupPhotoToExternalPathIfNecessary:v57 chatGUID:v68 attachmentFilepath:v65];

  uint64_t v56 = objc_msgSend(v65, "im_lastPathComponent");
  long long v59 = IMSharedHelperExternalLocationForFile();
  if ([v59 length])
  {
    __int16 v55 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v59];
    __int16 v43 = [MEMORY[0x1E4F304C0] imageWithURL:v55];
    if (v43) {
      [v67 setImage:v43 forParameterNamed:@"speakableGroupName"];
    }
  }
  else
  {
    __int16 v55 = 0;
  }
  id v44 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v45 = [v44 isTranscriptSharingEnabled];

  if (v45 && [v58 hasPrefix:*MEMORY[0x1E4F6E4A8]])
  {
    id v46 = _IMDIntentsSOSImage();
    if (v46) {
      [v67 setImage:v46 forParameterNamed:@"speakableGroupName"];
    }
  }
  id v47 = objc_alloc_init(MEMORY[0x1E4F306D8]);
  [v47 setMentionsCurrentUser:a15];
  [v47 setReplyToCurrentUser:a16];
  [v47 setNotifyRecipientAnyway:a17];
  objc_msgSend(v47, "setRecipientCount:", objc_msgSend(obj, "count"));
  [v67 setDonationMetadata:v47];
  uint64_t v48 = (void *)[objc_alloc(MEMORY[0x1E4F306E0]) initWithCode:3 userActivity:0];
  id v49 = (void *)[objc_alloc(MEMORY[0x1E4F30558]) initWithIdentifier:v62 conversationIdentifier:v68 content:v63 dateSent:v61 sender:v29 recipients:v69 groupName:v60 messageType:1 serviceName:v64];
  uint64_t v77 = v49;
  id v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v77 count:1];
  [v48 setSentMessages:v50];

  id v51 = (void *)[objc_alloc(MEMORY[0x1E4F30508]) initWithIntent:v67 response:v48];
  [v51 setIdentifier:v62];
  [v51 setGroupIdentifier:v68];
  [v51 setDirection:2];
  __int16 v52 = (void *)[objc_alloc(MEMORY[0x1E4F28C18]) initWithStartDate:v61 duration:0.0];
  [v51 setDateInterval:v52];

  [v51 setIntentHandlingStatus:3];
  return v51;
}

void *sub_1AFBC7DA8()
{
  uint64_t result = (void *)MEMORY[0x1B3E89B20]("INPersonHandleLabelForCNLabeledValue", @"Intents");
  off_1E9AF81B0 = result;
  return result;
}

void *sub_1AFBC7DD8()
{
  uint64_t result = (void *)MEMORY[0x1B3E89B20]("INPersonHandleLabelForCNLabeledValue", @"Intents");
  off_1E9AF81C0 = result;
  return result;
}

void *sub_1AFBC7E08(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1AFBC7E58();
  uint64_t result = dlsym(v2, "DDResultGetCategory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E9AF81D0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1AFBC7E58()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!qword_1E9AF81D8)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = sub_1AFBC7F50;
    v2[4] = &unk_1E5F8E728;
    v2[5] = v2;
    long long v3 = xmmword_1E5F95A70;
    uint64_t v4 = 0;
    qword_1E9AF81D8 = _sl_dlopen();
  }
  uint64_t v0 = qword_1E9AF81D8;
  if (!qword_1E9AF81D8) {
    sub_1AFC68B10(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_1AFBC7F50()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF81D8 = result;
  return result;
}

void *sub_1AFBC7FC4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1AFBC7E58();
  uint64_t result = dlsym(v2, "DDResultCopyExtractedURLWithOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E9AF81E0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _IMDSMSDatabaseMigrateData_21_22(uint64_t a1, uint64_t a2)
{
  uint64_t v369 = *MEMORY[0x1E4F143B8];
  long long v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Starting migration from V21 to V22.", buf, 2u);
  }
  uint64_t v4 = CSDBSqliteConnectionStatementForSQL();
  if (v4 && *(void *)(v4 + 8) && CSDBSqliteStatementPerform() == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = IMLogHandleForCategory();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v7)
      {
        uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)(a2 + 8));
        *(_DWORD *)uint8_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = 1;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v8;
        uint64_t v9 = "Failed to delete trigger delete_attachment_files [SQLite result %d reason %s]";
        int v10 = v6;
        uint32_t v11 = 18;
LABEL_11:
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
      }
    }
    else if (v7)
    {
      *(_DWORD *)uint8_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      uint64_t v9 = "Failed to delete trigger delete_attachment_files [SQLite result %d]";
      int v10 = v6;
      uint32_t v11 = 8;
      goto LABEL_11;
    }
  }
  uint64_t v12 = CSDBSqliteConnectionStatementForSQL();
  if (!v12 || !*(void *)(v12 + 8) || CSDBSqliteStatementPerform() == 1)
  {
    int v13 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v14 = "Whoa, pardner, where is the V21_MIGRATION_GROUP_CHAT_MAP ?!";
LABEL_17:
    _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, v14, buf, 2u);
    return 0;
  }
  uint64_t v17 = CSDBSqliteConnectionStatementForSQL();
  if (!v17 || !*(void *)(v17 + 8) || CSDBSqliteStatementPerform() == 1)
  {
    int v13 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)uint8_t buf = 0;
    uint64_t v14 = "Whoa, pardner, where is the V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP ?!";
    goto LABEL_17;
  }
  uint64_t v18 = CSDBSqliteConnectionStatementForSQL();
  if (!v18 || (v19 = v18, (uint64_t v20 = *(sqlite3_stmt **)(v18 + 8)) == 0))
  {
    uint64_t v15 = 0;
    goto LABEL_589;
  }
  int v21 = sqlite3_step(v20);
  if (!v21 || v21 == 101)
  {
    uint64_t v295 = IMLogHandleForCategory();
    uint64_t v15 = 1;
    if (os_log_type_enabled(v295, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v295, OS_LOG_TYPE_INFO, "No message rows available to migrate, great success!!", buf, 2u);
    }
    goto LABEL_588;
  }
  if (v21 != 100) {
    goto LABEL_587;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v314 = *MEMORY[0x1E4F6C188];
  uint64_t v309 = *MEMORY[0x1E4F6C110];
  uint64_t v334 = v19;
  while (1)
  {
    char v22 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 30);
    int v23 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    uint64_t v24 = MEMORY[0x1B3E8A120]();
    int v25 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    id v26 = *(sqlite3_stmt **)(v19 + 8);
    int v329 = v23;
    context = (void *)v24;
    if (v22)
    {
      char v27 = sqlite3_column_int(v26, 26);
      if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 18))
      {
        uint64_t v28 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 18);
        id v29 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v28, 0x8000100u);
      }
      else
      {
        id v29 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 22))
      {
        id v34 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 22);
        uint64_t v35 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v34, 0x8000100u);
      }
      else
      {
        uint64_t v35 = 0;
      }
      int v36 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v19 + 8), 17);
      unsigned int v37 = sqlite3_column_bytes(*(sqlite3_stmt **)(v19 + 8), 17);
      CFDataRef v38 = 0;
      if (v36 && v37) {
        CFDataRef v38 = CFDataCreate(alloc, v36, v37);
      }
      id v330 = (id)JWDecodeCodableObjectWithStandardAllowlist();
      if (v38) {
        CFRelease(v38);
      }
      if (!((unint64_t)v29 | (unint64_t)v35))
      {
        uint64_t v42 = -1;
        goto LABEL_407;
      }
      uint64_t v39 = CSDBSqliteConnectionStatementForSQL();
      if (v39)
      {
        uint64_t v40 = v39;
        if (*(void *)(v39 + 8))
        {
          if (v35) {
            CSDBSqliteBindTextFromCFString();
          }
          CSDBSqliteBindTextFromCFString();
          if (sqlite3_step(*(sqlite3_stmt **)(v40 + 8)) == 100)
          {
            int v41 = sqlite3_column_int(*(sqlite3_stmt **)(v40 + 8), 0);
            CSDBSqliteStatementReset();
            if (v41 != -1)
            {
              uint64_t v42 = v41;
LABEL_407:
              int v229 = v25;
              if (v42 == -1)
              {
                uint64_t v261 = IMLogHandleForCategory();
                int v239 = 1;
                if (os_log_type_enabled(v261, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint8_t buf = 138412802;
                  *(void *)&uint8_t buf[4] = v29;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v35;
                  __int16 v348 = 1024;
                  LODWORD(v349) = v229;
                  _os_log_impl(&dword_1AFB53000, v261, OS_LOG_TYPE_INFO, "ORPHAN: Unable to find/create a chat for handle[%@] and roomname[%@] for legacy messageID[%d]. Skipping this message.", buf, 0x1Cu);
                  if (!v35)
                  {
LABEL_468:
                    if (v29) {
                      CFRelease(v29);
                    }

                    if (!v239) {
                      goto LABEL_585;
                    }
                    goto LABEL_572;
                  }
LABEL_467:
                  CFRelease(v35);
                  goto LABEL_468;
                }
LABEL_466:
                if (!v35) {
                  goto LABEL_468;
                }
                goto LABEL_467;
              }
              uint64_t v230 = CSDBSqliteConnectionStatementForSQL();
              if (v230 && *(void *)(v230 + 8))
              {
                CSDBSqliteBindInt();
                int v231 = CSDBSqliteStatementPerform();
                CSDBSqliteStatementReset();
                if (v231 != 101)
                {
                  BOOL v262 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint8_t buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = v25;
                    *(_WORD *)&uint8_t buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v231;
                    _os_log_error_impl(&dword_1AFB53000, v262, OS_LOG_TYPE_ERROR, "[Database] ERROR: Unable to migrate message row %d with error: %d", buf, 0xEu);
                  }
                  goto LABEL_465;
                }
                CFMutableArrayRef theArrayd = (CFMutableArrayRef)CSDBSqliteConnectionRowidOfLastInsert();
                if (theArrayd != (CFMutableArrayRef)-1)
                {
                  uint64_t v232 = CSDBSqliteConnectionStatementForSQL();
                  if (v232)
                  {
                    if (*(void *)(v232 + 8))
                    {
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      int v233 = CSDBSqliteStatementPerform();
                      CSDBSqliteStatementReset();
                      if (v233 != 101)
                      {
                        uint64_t v234 = IMLogHandleForCategory();
                        if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)uint8_t buf = 67109376;
                          *(_DWORD *)&uint8_t buf[4] = v25;
                          *(_WORD *)&uint8_t buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v233;
                          _os_log_impl(&dword_1AFB53000, v234, OS_LOG_TYPE_INFO, "Unable to update flags row %d with error: %d", buf, 0xEu);
                        }
                      }
                    }
                  }
                  if (sub_1AFBCBD04())
                  {
                    if (!v29 || v35 && (v27 & 4) != 0)
                    {
LABEL_421:
                      uint64_t v235 = (void *)[v330 string];
                      uint64_t v236 = [v330 length];
                      if (v236)
                      {
                        unint64_t v237 = v236;
                        uint64_t v238 = 0;
                        int v239 = 1;
                        while (1)
                        {
                          long long valuePtr = 0uLL;
                          uint64_t v240 = objc_msgSend(v330, "attributesAtIndex:longestEffectiveRange:inRange:", v238, &valuePtr, v238, v237 - v238);
                          if ([v235 characterAtIndex:(void)valuePtr] != 65532) {
                            goto LABEL_458;
                          }
                          uint64_t v241 = [v240 objectForKey:v314];
                          if (!v241)
                          {
                            int64_t v257 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v257, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)uint8_t buf = 136315138;
                              *(void *)&uint8_t buf[4] = "Boolean __findOrCreateiMessageAttachmentsForLegacyGUID(CSDBSqliteConn"
                                                   "ection *, CFStringRef, int64_t)";
                              _os_log_impl(&dword_1AFB53000, v257, OS_LOG_TYPE_INFO, "Invalid legacy guid provided in %s - this is bad but non-fatal.", buf, 0xCu);
                            }
                            uint64_t v258 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR)) {
                              sub_1AFC68E5C(v355, &v356, v258);
                            }
                            goto LABEL_458;
                          }
                          uint64_t v242 = v241;
                          uint64_t v243 = CSDBSqliteConnectionStatementForSQL();
                          uint64_t v244 = v243;
                          if (!v243) {
                            break;
                          }
                          if (!*(void *)(v243 + 8)) {
                            break;
                          }
                          CSDBSqliteBindTextFromCFString();
                          if (sqlite3_step(*(sqlite3_stmt **)(v244 + 8)) != 100) {
                            break;
                          }
                          int v245 = sqlite3_column_int(*(sqlite3_stmt **)(v244 + 8), 0);
                          CSDBSqliteStatementReset();
                          if (v245 == -1) {
                            goto LABEL_440;
                          }
                          uint64_t Insert = v245;
LABEL_430:
                          if (Insert == -1) {
                            goto LABEL_457;
                          }
                          uint64_t v247 = CSDBSqliteConnectionStatementForSQL();
                          if (!v247 || !*(void *)(v247 + 8)) {
                            goto LABEL_457;
                          }
                          CSDBSqliteBindInt();
                          CSDBSqliteBindInt();
                          int v248 = CSDBSqliteStatementPerform();
                          CSDBSqliteStatementReset();
                          uint64_t v19 = v334;
                          if (v248 == 1)
                          {
                            uint64_t v249 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v249, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)uint8_t buf = 134218496;
                              *(void *)&uint8_t buf[4] = Insert;
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = theArrayd;
                              __int16 v348 = 1024;
                              LODWORD(v349) = 1;
                              _os_log_impl(&dword_1AFB53000, v249, OS_LOG_TYPE_INFO, "Unable to bind attachmentID[%lld] to messageID[%lld]: %d", buf, 0x1Cu);
                            }
                            uint64_t v250 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v250, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)uint8_t buf = 134218498;
                              *(void *)&uint8_t buf[4] = Insert;
                              *(_WORD *)&buf[12] = 2112;
                              *(void *)&buf[14] = v242;
                              __int16 v348 = 2048;
                              CFMutableArrayRef v349 = theArrayd;
                              _os_log_impl(&dword_1AFB53000, v250, OS_LOG_TYPE_INFO, "Fatal error binding attachmentID[%lld - %@] to messageID[%lld]", buf, 0x20u);
                            }
                            int v239 = 0;
LABEL_457:
                            uint64_t v19 = v334;
                          }
LABEL_458:
                          uint64_t v238 = *((void *)&valuePtr + 1) + valuePtr;
                          if (*((void *)&valuePtr + 1) + (void)valuePtr >= v237) {
                            goto LABEL_466;
                          }
                        }
                        CSDBSqliteStatementReset();
LABEL_440:
                        uint64_t v251 = CSDBSqliteConnectionStatementForSQL();
                        if (!v251) {
                          goto LABEL_453;
                        }
                        uint64_t v252 = v251;
                        if (!*(void *)(v251 + 8)) {
                          goto LABEL_453;
                        }
                        CSDBSqliteBindTextFromCFString();
                        if (sqlite3_step(*(sqlite3_stmt **)(v252 + 8)) != 100)
                        {
                          CSDBSqliteStatementReset();
LABEL_453:
                          uint64_t v259 = IMLogHandleForCategory();
                          uint64_t v19 = v334;
                          if (os_log_type_enabled(v259, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)uint8_t buf = 138412290;
                            *(void *)&uint8_t buf[4] = v242;
                            _os_log_impl(&dword_1AFB53000, v259, OS_LOG_TYPE_INFO, "Unable to find legacy attachment for guid[%@]. Not fatal, but bailing.", buf, 0xCu);
                          }
                          goto LABEL_458;
                        }
                        int v253 = sqlite3_column_int(*(sqlite3_stmt **)(v252 + 8), 0);
                        CSDBSqliteStatementReset();
                        if (v253 == -1) {
                          goto LABEL_453;
                        }
                        uint64_t v254 = CSDBSqliteConnectionStatementForSQL();
                        if (!v254 || !*(void *)(v254 + 8)) {
                          goto LABEL_457;
                        }
                        uint64_t v255 = v253;
                        CSDBSqliteBindInt();
                        int v256 = CSDBSqliteStatementPerform();
                        CSDBSqliteStatementReset();
                        if (v256 != 101)
                        {
                          uint64_t v260 = IMLogHandleForCategory();
                          if (os_log_type_enabled(v260, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)uint8_t buf = 134218240;
                            *(void *)&uint8_t buf[4] = v255;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v256;
                            _os_log_impl(&dword_1AFB53000, v260, OS_LOG_TYPE_INFO, "Unable to migrate attachment row %lld with error: %d", buf, 0x12u);
                          }
                          goto LABEL_457;
                        }
                        uint64_t Insert = CSDBSqliteConnectionRowidOfLastInsert();
                        goto LABEL_430;
                      }
                      int v239 = 1;
                      if (!v35) {
                        goto LABEL_468;
                      }
                      goto LABEL_467;
                    }
                    if (sub_1AFBCBDB8(a2, 0, v29, @"iMessage", 0) != -1)
                    {
                      uint64_t v263 = CSDBSqliteConnectionStatementForSQL();
                      if (!v263) {
                        goto LABEL_421;
                      }
                      if (!*(void *)(v263 + 8)) {
                        goto LABEL_421;
                      }
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      int v264 = CSDBSqliteStatementPerform();
                      CSDBSqliteStatementReset();
                      if (v264 != 1) {
                        goto LABEL_421;
                      }
                      uint64_t v265 = IMLogHandleForCategory();
                      if (!os_log_type_enabled(v265, OS_LOG_TYPE_INFO)) {
                        goto LABEL_465;
                      }
                      *(_DWORD *)uint8_t buf = 134218240;
                      *(void *)&uint8_t buf[4] = theArrayd;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1;
                      uint64_t v266 = v265;
                      uint64_t v267 = "Unable to update handle id on message row %lld with error: %d";
                      uint32_t v268 = 18;
                      goto LABEL_553;
                    }
                    uint64_t v291 = IMLogHandleForCategory();
                    if (os_log_type_enabled(v291, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)uint8_t buf = 134218240;
                      *(void *)&uint8_t buf[4] = -1;
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = theArrayd;
                      uint64_t v266 = v291;
                      uint64_t v267 = "Invalid handleID[%lld] or messageID[%lld] passed for binding";
                      uint32_t v268 = 22;
LABEL_553:
                      _os_log_impl(&dword_1AFB53000, v266, OS_LOG_TYPE_INFO, v267, buf, v268);
                    }
                  }
                }
              }
LABEL_465:
              int v239 = 0;
              goto LABEL_466;
            }
          }
          else
          {
            CSDBSqliteStatementReset();
          }
        }
      }
      uint64_t v43 = CSDBSqliteConnectionStatementForSQL();
      if (v43)
      {
        uint64_t v44 = v43;
        if (*(void *)(v43 + 8))
        {
          if (v35) {
            CSDBSqliteBindTextFromCFString();
          }
          CSDBSqliteBindTextFromCFString();
          int v45 = sqlite3_step(*(sqlite3_stmt **)(v44 + 8));
          if (v45 != 100)
          {
            int v53 = v45;
            id v54 = IMLogHandleForCategory();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t v350 = 138412802;
              *(void *)&v350[4] = v29;
              __int16 v351 = 2112;
              uint64_t v352 = v35;
              __int16 v353 = 1024;
              LODWORD(v354) = v53;
              _os_log_impl(&dword_1AFB53000, v54, OS_LOG_TYPE_INFO, "ORPHAN: Unable to find a legacy madrid chat record for handle[%@] and roomname[%@] with sqlite status (%d). This usually means that a chat was deleted but the messages it contained weren't. Failing chat creation.", v350, 0x1Cu);
            }
            uint64_t v42 = -1;
            goto LABEL_405;
          }
          int v46 = sqlite3_column_int(*(sqlite3_stmt **)(v44 + 8), 0);
          id v47 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v44 + 8), 10);
          unsigned int v48 = sqlite3_column_bytes(*(sqlite3_stmt **)(v44 + 8), 10);
          CFDataRef v49 = 0;
          if (v47 && v48) {
            CFDataRef v49 = CFDataCreate(alloc, v47, v48);
          }
          uint64_t v50 = v46;
          id v51 = (id)JWDecodeArray();
          if ([v51 count])
          {
            sqlite3_column_int(*(sqlite3_stmt **)(v44 + 8), 1);
            if (sqlite3_column_text(*(sqlite3_stmt **)(v44 + 8), 5))
            {
              __int16 v52 = sqlite3_column_text(*(sqlite3_stmt **)(v44 + 8), 5);
              theArray = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v52, 0x8000100u);
            }
            else
            {
              theArray = 0;
            }
            uint64_t v209 = CSDBSqliteConnectionStatementForSQL();
            if (v209 && *(void *)(v209 + 8))
            {
              CFDataRef v321 = v49;
              CSDBSqliteBindInt();
              int v210 = CSDBSqliteStatementPerform();
              CSDBSqliteStatementReset();
              if (v210 == 1)
              {
                uint64_t v211 = IMLogHandleForCategory();
                CFDataRef v49 = v321;
                if (os_log_type_enabled(v211, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v350 = 134218240;
                  *(void *)&v350[4] = v50;
                  __int16 v351 = 1024;
                  LODWORD(v352) = 1;
                  _os_log_impl(&dword_1AFB53000, v211, OS_LOG_TYPE_INFO, "Unable to migrate chat row %lld with error: %d", v350, 0x12u);
                }
              }
              else
              {
                uint64_t v216 = CSDBSqliteConnectionRowidOfLastInsert();
                CFDataRef v49 = v321;
                if (v216 != -1)
                {
                  uint64_t v42 = v216;
                  if ([(__CFString *)theArray hasPrefix:@"chat"])
                  {
                    uint64_t v217 = CSDBSqliteConnectionStatementForSQL();
                    if (v217)
                    {
                      if (*(void *)(v217 + 8))
                      {
                        CSDBSqliteBindTextFromCFString();
                        CSDBSqliteBindInt();
                        if (CSDBSqliteStatementPerform() != 101)
                        {
                          uint64_t v218 = IMLogHandleForCategory();
                          if (os_log_type_enabled(v218, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)uint64_t v350 = 134217984;
                            *(void *)&v350[4] = v42;
                            _os_log_impl(&dword_1AFB53000, v218, OS_LOG_TYPE_INFO, "Unable to update chatID[%lld]'s room_name.", v350, 0xCu);
                          }
                        }
                        CSDBSqliteStatementReset();
                        CFDataRef v49 = v321;
                      }
                    }
                  }
                  uint64_t v219 = CSDBSqliteConnectionStatementForSQL();
                  if (!v219 || !*(void *)(v219 + 8)) {
                    goto LABEL_389;
                  }
                  uint64_t v220 = (__CFString *)IMCopyGUIDForChat();
                  CSDBSqliteBindTextFromCFString();
                  CSDBSqliteBindInt();
                  int v221 = CSDBSqliteStatementPerform();
                  if (v221 != 101)
                  {
                    os_log_t loga = IMLogHandleForCategory();
                    if (os_log_type_enabled(loga, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)uint64_t v350 = 134218242;
                      *(void *)&v350[4] = v42;
                      __int16 v351 = 2112;
                      uint64_t v352 = v220;
                      _os_log_impl(&dword_1AFB53000, loga, OS_LOG_TYPE_INFO, "Unable to update chatID[%lld] with guid[%@]", v350, 0x16u);
                    }
                  }
                  if (v220) {
                    CFRelease(v220);
                  }
                  CSDBSqliteStatementReset();
                  BOOL v222 = v221 == 101;
                  CFDataRef v49 = v321;
                  if (v222)
                  {
LABEL_389:
                    long long v339 = 0u;
                    long long v340 = 0u;
                    long long valuePtr = 0u;
                    long long v338 = 0u;
                    uint64_t v223 = [v51 countByEnumeratingWithState:&valuePtr objects:buf count:16];
                    if (v223)
                    {
                      uint64_t v224 = v223;
                      int v318 = v25;
                      uint64_t v225 = *(void *)v338;
                      while (2)
                      {
                        for (uint64_t i = 0; i != v224; ++i)
                        {
                          if (*(void *)v338 != v225) {
                            objc_enumerationMutation(v51);
                          }
                          uint64_t v227 = sub_1AFBCBDB8(a2, 0, *(__CFString **)(*((void *)&valuePtr + 1) + 8 * i), @"iMessage", 0);
                          if (!sub_1AFBCC228(a2, v227, v42))
                          {
                            uint64_t v42 = -1;
                            goto LABEL_555;
                          }
                        }
                        uint64_t v224 = [v51 countByEnumeratingWithState:&valuePtr objects:buf count:16];
                        if (v224) {
                          continue;
                        }
                        break;
                      }
LABEL_555:
                      int v25 = v318;
                      CFDataRef v49 = v321;
                    }
                    goto LABEL_401;
                  }
LABEL_400:
                  uint64_t v42 = -1;
LABEL_401:

                  if (v49) {
                    CFRelease(v49);
                  }
                  if (theArray) {
                    CFRelease(theArray);
                  }
LABEL_405:
                  CSDBSqliteStatementReset();
                  goto LABEL_406;
                }
              }
            }
            uint64_t v228 = IMLogHandleForCategory();
            if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v350 = 138412546;
              *(void *)&v350[4] = v29;
              __int16 v351 = 2112;
              uint64_t v352 = v35;
              _os_log_error_impl(&dword_1AFB53000, v228, OS_LOG_TYPE_ERROR, "[Database] ERROR: Could not create chat from handle[%@] and roomname[%@].", v350, 0x16u);
            }
            goto LABEL_400;
          }
          uint64_t v135 = IMLogHandleForCategory();
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v350 = 134218498;
            *(void *)&v350[4] = v50;
            __int16 v351 = 2112;
            uint64_t v352 = v29;
            __int16 v353 = 2112;
            CFStringRef v354 = v35;
            _os_log_error_impl(&dword_1AFB53000, v135, OS_LOG_TYPE_ERROR, "[DATABASE] There don't appear to be any participants in this chat, so it will NOT be migrated. RowID: %lld Handle %@ Roomname %@", v350, 0x20u);
          }
          CSDBSqliteStatementReset();
          if (v49) {
            CFRelease(v49);
          }
        }
      }
      uint64_t v42 = -1;
LABEL_406:
      uint64_t v19 = v334;
      goto LABEL_407;
    }
    int v317 = v25;
    char log = sqlite3_column_int(v26, 4);
    sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 10);
    sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 7);
    if (sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 8) < 1) {
      break;
    }
    uint64_t v30 = CSDBSqliteConnectionStatementForSQL();
    if (!v30) {
      break;
    }
    uint64_t v31 = v30;
    if (!*(void *)(v30 + 8)) {
      break;
    }
    CSDBSqliteBindInt();
    CSDBSqliteBindInt();
    CSDBSqliteBindInt();
    int v32 = sqlite3_step(*(sqlite3_stmt **)(v31 + 8));
    if (v32 != 100)
    {
      int v55 = v32;
      uint64_t v56 = IMLogHandleForCategory();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint8_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v55;
        _os_log_error_impl(&dword_1AFB53000, v56, OS_LOG_TYPE_ERROR, "[Database] ****** Result from select query: %d", buf, 8u);
      }
      CSDBSqliteStatementReset();
      break;
    }
    int v33 = sqlite3_column_int(*(sqlite3_stmt **)(v31 + 8), 0);
    CSDBSqliteStatementReset();
    if (v33 <= 0) {
      break;
    }
LABEL_571:
LABEL_572:
    uint64_t v294 = IMLogHandleForCategory();
    if (os_log_type_enabled(v294, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v329;
      _os_log_impl(&dword_1AFB53000, v294, OS_LOG_TYPE_INFO, "Successful migration for legacy message [%d]", buf, 8u);
    }
    if (sqlite3_step(*(sqlite3_stmt **)(v19 + 8)) != 100)
    {
      uint64_t v15 = 1;
      goto LABEL_588;
    }
  }
  uint64_t v57 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 7);
  int v58 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 8);
  int v59 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
  if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1))
  {
    long long v60 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1);
    CFStringRef v61 = CFStringCreateWithCString(alloc, (const char *)v60, 0x8000100u);
  }
  else
  {
    CFStringRef v61 = 0;
  }
  if ((int)v57 < 1)
  {
    id v63 = IMLogHandleForCategory();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
      sub_1AFC68E30(&v345, v346);
    }
    if (v57 == -1)
    {
      CFMutableArrayRef Mutable = 0;
      goto LABEL_173;
    }
    int cf = v58;
    int v310 = v59;
    uint64_t v62 = (int)v57;
  }
  else
  {
    int cf = v58;
    int v310 = v59;
    uint64_t v62 = v57;
  }
  uint64_t v319 = v62;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
  uint64_t v65 = CSDBSqliteConnectionStatementForSQL();
  if (v65)
  {
    uint64_t v66 = v65;
    if (*(void *)(v65 + 8))
    {
      CSDBSqliteBindInt();
      if (sqlite3_step(*(sqlite3_stmt **)(v66 + 8)) == 100)
      {
        int v67 = sqlite3_column_int(*(sqlite3_stmt **)(v66 + 8), 0);
        CSDBSqliteStatementReset();
        if (v67 != -1)
        {
          *(void *)&long long valuePtr = v67;
          CFNumberRef v68 = CFNumberCreate(alloc, kCFNumberLongLongType, &valuePtr);
          if (!v68) {
            goto LABEL_159;
          }
          CFNumberRef v69 = v68;
          CFArrayAppendValue(Mutable, v68);
          CFRelease(v69);
          if (!Mutable) {
            goto LABEL_173;
          }
          goto LABEL_160;
        }
      }
      else
      {
        CSDBSqliteStatementReset();
      }
    }
  }
  long long v70 = IMLogHandleForCategory();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint8_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v319;
    _os_log_impl(&dword_1AFB53000, v70, OS_LOG_TYPE_INFO, "Got an invalid rowid looking for a handle mapped to group id: %lld", buf, 0xCu);
  }
  *(void *)&long long valuePtr = -1;
  uint64_t v71 = CSDBSqliteConnectionStatementForSQL();
  theArraya = Mutable;
  if (v71 && *(void *)(v71 + 8))
  {
    CSDBSqliteBindInt();
    *(_DWORD *)uint8_t buf = 0;
    int v331 = CSDBSqliteStatementIntegerResult();
    CSDBSqliteStatementReset();
  }
  else
  {
    int v331 = -1;
  }
  uint64_t v72 = CSDBSqliteConnectionStatementForSQL();
  if (!v72) {
    goto LABEL_158;
  }
  uint64_t v73 = v72;
  if (!*(void *)(v72 + 8)) {
    goto LABEL_158;
  }
  CSDBSqliteBindInt();
  if (sqlite3_step(*(sqlite3_stmt **)(v73 + 8)) != 100)
  {
LABEL_157:
    CSDBSqliteStatementReset();
LABEL_158:
    CFMutableArrayRef Mutable = theArraya;
LABEL_159:
    if (!Mutable) {
      goto LABEL_173;
    }
LABEL_160:
    if (!CFArrayGetCount(Mutable))
    {
      char v115 = 0;
      goto LABEL_174;
    }
    if (v61) {
      CFRelease(v61);
    }
    CFArrayRef v108 = Mutable;
    CFIndex Count = CFArrayGetCount(Mutable);
    int v110 = Count > 1 && cf > 0;
    uint64_t v111 = CSDBSqliteConnectionStatementForSQL();
    if (v111)
    {
      uint64_t v112 = v111;
      if (*(void *)(v111 + 8))
      {
        CSDBSqliteBindInt();
        CSDBSqliteBindInt();
        if (sqlite3_step(*(sqlite3_stmt **)(v112 + 8)) == 100)
        {
          int v113 = sqlite3_column_int(*(sqlite3_stmt **)(v112 + 8), 0);
          CSDBSqliteStatementReset();
          if (v113 != -1)
          {
            uint64_t v114 = v113;
            goto LABEL_213;
          }
        }
        else
        {
          CSDBSqliteStatementReset();
        }
      }
    }
    id v117 = IMLogHandleForCategory();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      *(void *)&uint8_t buf[4] = v319;
      _os_log_impl(&dword_1AFB53000, v117, OS_LOG_TYPE_INFO, "Got an invalid rowid looking for a chat mapped to group id: %lld", buf, 0xCu);
    }
    uint64_t v118 = CSDBSqliteConnectionStatementForSQL();
    if (v118)
    {
      uint64_t v119 = v118;
      if (*(void *)(v118 + 8))
      {
        CSDBSqliteBindInt();
        CSDBSqliteBindTextFromCFString();
        while (1)
        {
          while (1)
          {
            if (sqlite3_step(*(sqlite3_stmt **)(v119 + 8)) != 100)
            {
              CSDBSqliteStatementReset();
              goto LABEL_207;
            }
            int v120 = sqlite3_column_int(*(sqlite3_stmt **)(v119 + 8), 0);
            uint64_t v121 = CSDBSqliteConnectionStatementForSQL();
            if (v121)
            {
              uint64_t v122 = v121;
              if (*(void *)(v121 + 8)) {
                break;
              }
            }
          }
          CSDBSqliteBindInt();
          uint64_t v123 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
          while (sqlite3_step(*(sqlite3_stmt **)(v122 + 8)) == 100)
          {
            *(_DWORD *)uint8_t buf = 0;
            *(_DWORD *)uint8_t buf = sqlite3_column_int(*(sqlite3_stmt **)(v122 + 8), 0);
            CFNumberRef v124 = CFNumberCreate(alloc, kCFNumberIntType, buf);
            CFArrayAppendValue(v123, v124);
            if (v124) {
              CFRelease(v124);
            }
          }
          long long v125 = (void *)[MEMORY[0x1E4F1CAD0] setWithArray:v108];
          if (objc_msgSend(v125, "isEqualToSet:", objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", v123)))break; {
          if (v123)
          }
            CFRelease(v123);
          CSDBSqliteStatementReset();
        }
        if (v123) {
          CFRelease(v123);
        }
        CSDBSqliteStatementReset();
        if (v120 != -1)
        {
          uint64_t v114 = v120;
          sub_1AFBCC6F4(a2, v319, v120, v110);
LABEL_213:
          CFStringRef v61 = (CFStringRef)v108;
LABEL_214:
          uint64_t v19 = v334;
          goto LABEL_215;
        }
      }
    }
LABEL_207:
    uint64_t v126 = CSDBSqliteConnectionStatementForSQL();
    if (!v126 || !*(void *)(v126 + 8))
    {
      uint64_t v114 = -1;
      goto LABEL_213;
    }
    if (Count > 1)
    {
      CFStringRef v127 = (const __CFString *)[NSString generatedRoomNameForGroupChat];
      CFStringRef v128 = v127;
      if (v127)
      {
        CFRetain(v127);
        CFStringRef v129 = v128;
        goto LABEL_487;
      }
LABEL_371:
      CFStringRef v129 = 0;
LABEL_487:
      int64_t v270 = (const void *)IMCopyGUIDForChat();
      CSDBSqliteBindTextFromCFString();
      if (v270) {
        CFRelease(v270);
      }
      CSDBSqliteBindInt();
      CSDBSqliteBindInt();
      if (v129)
      {
        CSDBSqliteBindTextFromCFString();
        CFRelease(v129);
      }
      else
      {
        CSDBSqliteBindNull();
      }
      CFStringRef v61 = (CFStringRef)v108;
      CSDBSqliteBindTextFromCFString();
      if (v128) {
        CSDBSqliteBindTextFromCFString();
      }
      else {
        CSDBSqliteBindNull();
      }
      int v271 = CSDBSqliteStatementPerform();
      CSDBSqliteStatementReset();
      if (v271 == 1)
      {
        uint64_t v272 = IMLogHandleForCategory();
        uint64_t v19 = v334;
        if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR)) {
          sub_1AFC68DF8(&v367, &v368);
        }
        uint64_t v114 = -1;
      }
      else
      {
        uint64_t v114 = CSDBSqliteConnectionRowidOfLastInsert();
        sub_1AFBCC6F4(a2, v319, v114, v110);
        int v273 = CFArrayGetCount(v108);
        if (v273 < 1) {
          goto LABEL_214;
        }
        CFIndex v274 = 0;
        if (v273 <= 1uLL) {
          uint64_t v275 = 1;
        }
        else {
          uint64_t v275 = v273;
        }
        uint64_t v19 = v334;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v61, v274);
          if (ValueAtIndex)
          {
            *(void *)uint8_t buf = -1;
            CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, buf);
            sub_1AFBCC228(a2, *(uint64_t *)buf, v114);
          }
          ++v274;
        }
        while (v275 != v274);
      }
LABEL_215:
      CFRelease(v61);
      goto LABEL_216;
    }
    CFNumberRef v136 = (const __CFNumber *)CFArrayGetValueAtIndex(v108, 0);
    if (!v136)
    {
      uint64_t v215 = IMLogHandleForCategory();
      if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint8_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v310;
        _os_log_error_impl(&dword_1AFB53000, v215, OS_LOG_TYPE_ERROR, "[Database] ERROR: Got a NULL handleID for messageID[%d] to create chat. Something is wrong.", buf, 8u);
      }
      CFStringRef v128 = 0;
      goto LABEL_371;
    }
    *(void *)&long long valuePtr = -1;
    CFNumberGetValue(v136, kCFNumberLongLongType, &valuePtr);
    if ((void)valuePtr == -1)
    {
      uint64_t v269 = IMLogHandleForCategory();
      if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint8_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v310;
        uint64_t v138 = v269;
        uint64_t v139 = "[Database] ERROR: Was slinging around an invalid handleID for messageID[%d] to create chat. Something is wrong.";
        uint32_t v140 = 8;
LABEL_577:
        _os_log_error_impl(&dword_1AFB53000, v138, OS_LOG_TYPE_ERROR, v139, buf, v140);
      }
LABEL_485:
      CFStringRef v129 = 0;
    }
    else
    {
      CFStringRef v129 = sub_1AFBCC874();
      if (!v129)
      {
        uint64_t v137 = IMLogHandleForCategory();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint8_t buf = 134217984;
          *(void *)&uint8_t buf[4] = valuePtr;
          uint64_t v138 = v137;
          uint64_t v139 = "[Database] ERROR: Got a NULL identifier for handleID[%lld]. Something is seriously wrong.";
          uint32_t v140 = 12;
          goto LABEL_577;
        }
        goto LABEL_485;
      }
    }
    CFStringRef v128 = 0;
    goto LABEL_487;
  }
  CFStringRef v312 = v61;
  while (1)
  {
    if (sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 3))
    {
      long long v74 = sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 3);
      long long v75 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v74, 0x8000100u);
    }
    else
    {
      long long v75 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 2))
    {
      long long v76 = sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 2);
      uint64_t v77 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v76, 0x8000100u);
    }
    else
    {
      uint64_t v77 = 0;
    }
    uint64_t v78 = sub_1AFBCC494(v77);
    int v79 = [(__CFString *)v78 _appearsToBePhoneNumber];
    unint64_t v80 = [(__CFString *)v78 length];
    int HasPrefix = CFStringHasPrefix(v78, @"+");
    if (v331 == 1 && v79 && !HasPrefix && v80 >= 7)
    {
      CFNumberRef v82 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
      uint64_t v83 = CSDBSqliteConnectionStatementForSQL();
      if (v83)
      {
        uint64_t v84 = v83;
        if (*(void *)(v83 + 8))
        {
          CSDBSqliteBindInt();
          while (sqlite3_step(*(sqlite3_stmt **)(v84 + 8)) == 100)
          {
            id v85 = sqlite3_column_text(*(sqlite3_stmt **)(v84 + 8), 0);
            if (v85)
            {
              CFStringRef v86 = CFStringCreateWithCString(alloc, (const char *)v85, 0x8000100u);
              if (v86)
              {
                CFStringRef v87 = v86;
                CFArrayAppendValue(v82, v86);
                CFRelease(v87);
              }
            }
          }
          CSDBSqliteStatementReset();
        }
      }
      if (v82)
      {
        uint64_t v88 = v57;
        if ((int)CFArrayGetCount(v82) >= 1)
        {
          for (CFIndex j = 0; j < (int)CFArrayGetCount(v82); ++j)
          {
            uint64_t v90 = (__CFString *)CFArrayGetValueAtIndex(v82, j);
            if (v90)
            {
              uint64_t v91 = v90;
              if (v78) {
                CFRelease(v78);
              }
              uint64_t v78 = sub_1AFBCC494(v91);
              int v92 = [(__CFString *)v78 _appearsToBePhoneNumber];
              int v93 = CFStringHasPrefix(v78, @"+");
              if (!v92 || v93) {
                break;
              }
              uint64_t v94 = IMLogHandleForCategory();
              if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                *(void *)&uint8_t buf[4] = v91;
                __int16 v95 = v94;
                uint64_t v96 = "Ugh, the address '%@' wouldn't canonicalize.";
LABEL_133:
                _os_log_impl(&dword_1AFB53000, v95, OS_LOG_TYPE_INFO, v96, buf, 0xCu);
              }
            }
            else
            {
              uint64_t v97 = IMLogHandleForCategory();
              if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                *(void *)&uint8_t buf[4] = 0;
                __int16 v95 = v97;
                uint64_t v96 = "MsgAddress '%@' was null, we won't even try to canonicalize it.";
                goto LABEL_133;
              }
            }
          }
        }
        CFRelease(v82);
        uint64_t v57 = v88;
        CFStringRef v61 = v312;
      }
    }
    *(void *)uint64_t v350 = 0;
    *(void *)uint64_t v350 = sub_1AFBCBDB8(a2, v77, v78, @"SMS", v75);
    if (*(void *)v350 == -1) {
      break;
    }
    CFNumberRef v98 = CFNumberCreate(alloc, kCFNumberLongLongType, v350);
    if (v98)
    {
      CFNumberRef v99 = v98;
      CFArrayAppendValue(theArraya, v98);
      CFRelease(v99);
      if (v331 == 1)
      {
        uint64_t v100 = *(void *)v350;
        if (*(void *)v350 == -1)
        {
          id v107 = IMLogHandleForCategory();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint8_t buf = 134218240;
            *(void *)&uint8_t buf[4] = -1;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v319;
            signed int v104 = v107;
            uint64_t v105 = "[Database] ERROR: You tried to join handle [%lld] to group [%lld] with an invalid row id.";
            uint32_t v106 = 22;
LABEL_155:
            _os_log_error_impl(&dword_1AFB53000, v104, OS_LOG_TYPE_ERROR, v105, buf, v106);
            if (!v75) {
              goto LABEL_148;
            }
LABEL_147:
            CFRelease(v75);
            goto LABEL_148;
          }
        }
        else
        {
          uint64_t v101 = CSDBSqliteConnectionStatementForSQL();
          if (v101)
          {
            if (*(void *)(v101 + 8))
            {
              CSDBSqliteBindInt();
              CSDBSqliteBindInt();
              int v102 = CSDBSqliteStatementPerform();
              CSDBSqliteStatementReset();
              if (v102 == 1)
              {
                uint64_t v103 = IMLogHandleForCategory();
                if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)uint8_t buf = 134218496;
                  *(void *)&uint8_t buf[4] = v100;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v319;
                  __int16 v348 = 1024;
                  LODWORD(v349) = 1;
                  signed int v104 = v103;
                  uint64_t v105 = "[Database] ERROR: Failed to asscociate handle [%lld] to group [%lld] with sqlite result: %d.";
                  uint32_t v106 = 28;
                  goto LABEL_155;
                }
              }
            }
          }
        }
      }
    }
    if (v75) {
      goto LABEL_147;
    }
LABEL_148:
    if (v77) {
      CFRelease(v77);
    }
    if (v78) {
      CFRelease(v78);
    }
    uint64_t v19 = v334;
    if (sqlite3_step(*(sqlite3_stmt **)(v73 + 8)) != 100) {
      goto LABEL_157;
    }
  }
  if (v75) {
    CFRelease(v75);
  }
  if (v77) {
    CFRelease(v77);
  }
  if (theArraya) {
    CFRelease(theArraya);
  }
  uint64_t v19 = v334;
  if (v78) {
    CFRelease(v78);
  }
  CFMutableArrayRef Mutable = 0;
LABEL_173:
  char v115 = 1;
LABEL_174:
  id v116 = IMLogHandleForCategory();
  if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint8_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v57;
    _os_log_impl(&dword_1AFB53000, v116, OS_LOG_TYPE_INFO, "ORPHAN: Unable to find handles for groupID[%d]. This means we have message rows without a matching group. Failing the chat lookup.", buf, 8u);
  }
  if ((v115 & 1) == 0) {
    CFRelease(Mutable);
  }
  uint64_t v114 = -1;
  if (v61) {
    goto LABEL_215;
  }
LABEL_216:
  if (log < 0)
  {
    if (v114 != -1) {
      sub_1AFBCC51C(a2, v19, v114);
    }
    goto LABEL_571;
  }
  if (v114 == -1)
  {
    uint64_t v134 = IMLogHandleForCategory();
    if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v317;
      _os_log_impl(&dword_1AFB53000, v134, OS_LOG_TYPE_INFO, "ORPHAN: Could not find an appropriate chat to use for messageID[%d]. Skipping this message.", buf, 8u);
    }
    goto LABEL_571;
  }
  uint64_t v130 = CSDBSqliteConnectionStatementForSQL();
  if (!v130 || !*(void *)(v130 + 8))
  {
    uint64_t v133 = IMLogHandleForCategory();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      sub_1AFC68B90(&v357, v358);
    }
    goto LABEL_571;
  }
  [NSString stringGUID];
  if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3))
  {
    CFNumberRef v131 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3);
    CFStringRef v132 = CFStringCreateWithCString(alloc, (const char *)v131, 0x8000100u);
  }
  else
  {
    CFStringRef v132 = 0;
  }
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  int v141 = CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  if (v141 != 1)
  {
    uint64_t v142 = CSDBSqliteConnectionRowidOfLastInsert();
    if (v132) {
      CFRelease(v132);
    }
    sub_1AFBCBD04();
    id v143 = objc_alloc_init(MEMORY[0x1E4F28E48]);
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3))
    {
      uint64_t v144 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3);
      CFStringRef v145 = CFStringCreateWithCString(alloc, (const char *)v144, 0x8000100u);
    }
    else
    {
      CFStringRef v145 = 0;
    }
    uint64_t v320 = v142;
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSince1970:", (double)sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 2)), "timeIntervalSinceReferenceDate");
    if (v145)
    {
      BOOL v146 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v145];
      [v143 appendAttributedString:v146];

      CFRelease(v145);
    }
    CFTypeRef v332 = (CFTypeRef)sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    int v147 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 7);
    uint64_t v148 = CSDBSqliteConnectionStatementForSQL();
    if (!v148) {
      goto LABEL_325;
    }
    uint64_t v149 = v148;
    if (!*(void *)(v148 + 8)) {
      goto LABEL_325;
    }
    CSDBSqliteBindInt();
    if (sqlite3_step(*(sqlite3_stmt **)(v149 + 8)) == 100)
    {
      if (v147 <= 0) {
        uint64_t v150 = --(char)v147;
      }
      else {
        uint64_t v150 = v147;
      }
      uint64_t v308 = v150;
      if ((int)v332 <= 0) {
        uint64_t v151 = -(-(int)v332 & 0xF);
      }
      else {
        uint64_t v151 = v332 & 0xF;
      }
      uint64_t v307 = v151;
      uint64_t v311 = v143;
      while (1)
      {
        uint64_t v152 = sqlite3_column_int(*(sqlite3_stmt **)(v149 + 8), 3);
        if (sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 5))
        {
          uint64_t v153 = sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 5);
          uint64_t v154 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v153, 0x8000100u);
        }
        else
        {
          uint64_t v154 = 0;
        }
        if (sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 10))
        {
          uint64_t v155 = sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 10);
          CFNumberRef v156 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v155, 0x8000100u);
        }
        else
        {
          CFNumberRef v156 = 0;
        }
        if (v154) {
          break;
        }
LABEL_267:
        uint64_t v19 = v334;
        if (v156) {
          goto LABEL_268;
        }
LABEL_269:
        if (sqlite3_step(*(sqlite3_stmt **)(v149 + 8)) != 100) {
          goto LABEL_324;
        }
      }
      int v157 = CFEqual(v154, @"application/smil");
      int v158 = CFEqual(v154, @"text/plain");
      if (v157)
      {
LABEL_266:
        CFRelease(v154);
        goto LABEL_267;
      }
      if (v158)
      {
        if (sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 2))
        {
          uint64_t v159 = sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 2);
          CFStringRef v160 = CFStringCreateWithCString(alloc, (const char *)v159, 0x8000100u);
          if (v160)
          {
            uint64_t v161 = (__CFString *)v160;
            int8x16_t v162 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v160];
            [v143 appendAttributedString:v162];

            CFRelease(v154);
            if (v156) {
              CFRelease(v156);
            }
            CFNumberRef v156 = v161;
            uint64_t v19 = v334;
LABEL_268:
            CFRelease(v156);
            goto LABEL_269;
          }
        }
        goto LABEL_266;
      }
      if (v156)
      {
        id v163 = (id)[(__CFString *)v156 pathExtension];
        if (v163)
        {
          id v164 = v163;
          if ([v163 length])
          {
LABEL_284:
            objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C348], "defaultHFSFileManager"), "UTITypeOfPathExtension:", v164);
            uint64_t v165 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v149 + 8), 2);
            unsigned int v166 = sqlite3_column_bytes(*(sqlite3_stmt **)(v149 + 8), 2);
            CFDataRef v167 = 0;
            if (v165 && v166) {
              CFDataRef v167 = CFDataCreate(alloc, v165, v166);
            }
            CFDataRef cfa = v167;
            uint64_t v168 = (void *)[NSString stringWithFormat:@"/var/mobile/Library/SMS/Parts/"];
            uint64_t v169 = (void *)[v168 stringByAppendingPathComponent:objc_msgSend(NSString, "stringWithFormat:", @"%02x", v308)];
            uint64_t v170 = (void *)[v169 stringByAppendingPathComponent:objc_msgSend(NSString, "stringWithFormat:", @"%02d", v307)];
            uint64_t v171 = (void *)[v170 stringByAppendingPathComponent:objc_msgSend(NSString, "stringWithFormat:", @"%d-%d", v332, v152)];
            if (v164) {
              [v171 stringByAppendingPathExtension:v164];
            }
            CFMutableArrayRef theArrayb = (CFMutableArrayRef)[NSString stringGUID];
            uint64_t v172 = CSDBSqliteConnectionStatementForSQL();
            if (!v172 || !*(void *)(v172 + 8)) {
              goto LABEL_320;
            }
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            int v173 = CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
            if (v173 == 1)
            {
              uint64_t v174 = IMLogHandleForCategory();
              if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR)) {
                sub_1AFC68D24(&v365, v366);
              }
LABEL_320:
              uint64_t v189 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", theArrayb, v314, 0);
              int64_t v190 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v309 attributes:v189];
              id v143 = v311;
              [v311 appendAttributedString:v190];

              if (v164) {
                CFRelease(v164);
              }
              if (cfa) {
                CFRelease(cfa);
              }
              goto LABEL_266;
            }
            CSDBSqliteConnectionRowidOfLastInsert();
            uint64_t v175 = CSDBSqliteConnectionStatementForSQL();
            if (v175)
            {
              if (*(void *)(v175 + 8))
              {
                CSDBSqliteBindInt();
                CSDBSqliteBindInt();
                int v176 = CSDBSqliteStatementPerform();
                CSDBSqliteStatementReset();
                if (v176 == 1)
                {
                  uint64_t v177 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR)) {
                    sub_1AFC68DC0(&v363, v364);
                  }
                }
              }
            }
            if (!cfa)
            {
LABEL_315:
              uint64_t v186 = CSDBSqliteConnectionStatementForSQL();
              if (v186)
              {
                if (*(void *)(v186 + 8))
                {
                  CSDBSqliteBindTextFromCFString();
                  CSDBSqliteBindTextFromCFString();
                  int v187 = CSDBSqliteStatementPerform();
                  CSDBSqliteStatementReset();
                  if (v187 == 1)
                  {
                    uint64_t v188 = IMLogHandleForCategory();
                    if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR)) {
                      sub_1AFC68D5C(&v361, v362);
                    }
                  }
                }
              }
              goto LABEL_320;
            }
            if (v156)
            {
              uint64_t v178 = [(__CFString *)v156 lastPathComponent];
            }
            else
            {
              uint64_t v313 = (uint64_t)theArrayb;
              if (!v164)
              {
LABEL_306:
                uint64_t v179 = objc_msgSend(NSString, "stringWithFormat:", @"%02x", -[__CFArray hash](theArrayb, "hash"));
                uint64_t v180 = NSString;
                int v181 = [(__CFArray *)theArrayb hash];
                if (v181 <= 0) {
                  uint64_t v182 = -(-v181 & 0xF);
                }
                else {
                  uint64_t v182 = v181 & 0xF;
                }
                uint64_t v183 = (void *)[(id)objc_msgSend((id)objc_msgSend(@"/var/mobile/Library/SMS/Attachments" stringByAppendingPathComponent:v179), "stringByAppendingPathComponent:", objc_msgSend(v180, "stringWithFormat:", @"%02d", v182)), "stringByAppendingPathComponent:", v313];
                *(void *)&long long valuePtr = 0;
                if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", objc_msgSend(v183, "stringByDeletingLastPathComponent"), 1, 0, &valuePtr) & 1) == 0)
                {
                  uint64_t v184 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v191 = [v183 stringByDeletingLastPathComponent];
                    *(_DWORD *)uint8_t buf = 138412546;
                    *(void *)&uint8_t buf[4] = v191;
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = valuePtr;
                    _os_log_error_impl(&dword_1AFB53000, v184, OS_LOG_TYPE_ERROR, "[Database] ERROR: Failed to create directory [%@]: %@", buf, 0x16u);
                  }
                }
                if (([(__CFData *)cfa writeToFile:v183 atomically:1] & 1) == 0)
                {
                  uint64_t v185 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR)) {
                    sub_1AFC68D94(&v343, v344);
                  }
                }
                goto LABEL_315;
              }
              uint64_t v178 = [(__CFArray *)theArrayb stringByAppendingPathExtension:v164];
            }
            uint64_t v313 = v178;
            goto LABEL_306;
          }
          CFRelease(v164);
        }
      }
      else if (![(__CFString *)v154 length])
      {
        id v164 = 0;
        goto LABEL_284;
      }
      id v164 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C348], "defaultHFSFileManager"), "pathExtensionForMIMEType:", v154);
      goto LABEL_284;
    }
LABEL_324:
    CSDBSqliteStatementReset();
LABEL_325:
    if ([v143 length]) {
      id v192 = (id)objc_msgSend(v143, "__im_attributedStringByAssigningMessagePartNumbers");
    }
    else {
      id v192 = 0;
    }

    id v193 = v192;
    JWEncodeCodableObject();
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1))
    {
      uint64_t v194 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1);
      uint64_t v333 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v194, 0x8000100u);
    }
    else
    {
      uint64_t v333 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3))
    {
      int64_t v195 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3);
      CFStringRef v196 = CFStringCreateWithCString(alloc, (const char *)v195, 0x8000100u);
    }
    else
    {
      CFStringRef v196 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 6))
    {
      uint64_t v197 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 6);
      CFStringRef theArrayc = CFStringCreateWithCString(alloc, (const char *)v197, 0x8000100u);
    }
    else
    {
      CFStringRef theArrayc = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 13))
    {
      uint64_t v198 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 13);
      uint64_t v199 = v19;
      int64_t v200 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v198, 0x8000100u);
    }
    else
    {
      uint64_t v199 = v19;
      int64_t v200 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v199 + 8), 12))
    {
      uint64_t v201 = sqlite3_column_text(*(sqlite3_stmt **)(v199 + 8), 12);
      CFStringRef v202 = CFStringCreateWithCString(alloc, (const char *)v201, 0x8000100u);
    }
    else
    {
      CFStringRef v202 = 0;
    }
    BOOL v203 = (!v196 || !CFStringGetLength(v196))
        && (!v202 || !CFStringGetLength(v202))
        && [v193 length] == 0;
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSince1970:", (double)sqlite3_column_int(*(sqlite3_stmt **)(v334 + 8), 2)), "timeIntervalSinceReferenceDate");
    *(void *)&long long valuePtr = -1;
    int64_t v204 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
    uint64_t v205 = CSDBSqliteConnectionStatementForSQL();
    if (v205 && (uint64_t v206 = v205, *(void *)(v205 + 8)))
    {
      CSDBSqliteBindInt();
      while (1)
      {
        if (sqlite3_step(*(sqlite3_stmt **)(v206 + 8)) != 100)
        {
          CSDBSqliteStatementReset();
          goto LABEL_363;
        }
        *(_DWORD *)uint8_t buf = 0;
        *(_DWORD *)uint8_t buf = sqlite3_column_int(*(sqlite3_stmt **)(v206 + 8), 0);
        if (*(_DWORD *)buf == -1) {
          break;
        }
        CFNumberRef v207 = CFNumberCreate(alloc, kCFNumberIntType, buf);
        if (v207)
        {
          CFNumberRef v208 = v207;
          CFArrayAppendValue(v204, v207);
          CFRelease(v208);
        }
      }
      if (v204) {
        CFRelease(v204);
      }
    }
    else
    {
LABEL_363:
      if (v204)
      {
        int v212 = CFArrayGetCount(v204);
        BOOL v213 = v212 == 1;
        if (v212 == 1)
        {
          CFNumberRef v214 = (const __CFNumber *)CFArrayGetValueAtIndex(v204, 0);
          if (v214) {
            CFNumberGetValue(v214, kCFNumberLongLongType, &valuePtr);
          }
        }
        CFRelease(v204);
LABEL_511:
        uint64_t v277 = valuePtr;
        if ((void)valuePtr == -1)
        {
          uint64_t v277 = sub_1AFBCBDB8(a2, v333, 0, @"SMS", v200);
          *(void *)&long long valuePtr = v277;
        }
        if (v203)
        {
          int64_t v278 = IMLogHandleForCategory();
          if (os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint8_t buf = 0;
            _os_log_impl(&dword_1AFB53000, v278, OS_LOG_TYPE_INFO, "This message is empty, and we should NOT keep it.", buf, 2u);
          }
          if ((void)valuePtr != -1)
          {
LABEL_524:
            uint64_t v281 = CSDBSqliteConnectionStatementForSQL();
            if (!v281 || !*(void *)(v281 + 8))
            {
              v288 = IMLogHandleForCategory();
              v285 = v333;
              if (os_log_type_enabled(v288, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)uint8_t buf = 0;
                _os_log_impl(&dword_1AFB53000, v288, OS_LOG_TYPE_INFO, "Unable to delete message.", buf, 2u);
              }
              goto LABEL_539;
            }
            CSDBSqliteBindInt();
            int v282 = CSDBSqliteStatementPerform();
            uint64_t v283 = IMLogHandleForCategory();
            BOOL v284 = os_log_type_enabled(v283, OS_LOG_TYPE_INFO);
            v285 = v333;
            if (v282 == 1)
            {
              if (v284)
              {
                *(_DWORD *)uint8_t buf = 134218240;
                *(void *)&uint8_t buf[4] = v320;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1;
                uint64_t v286 = v283;
                uint64_t v287 = "Problems deleting message [%lld], SQLite error: %d";
LABEL_537:
                _os_log_impl(&dword_1AFB53000, v286, OS_LOG_TYPE_INFO, v287, buf, 0x12u);
              }
            }
            else if (v284)
            {
              *(_DWORD *)uint8_t buf = 134218240;
              *(void *)&uint8_t buf[4] = v320;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v317;
              uint64_t v286 = v283;
              uint64_t v287 = "Message [%lld] Legacy [%d] was problematic, thus we skip it.";
              goto LABEL_537;
            }
            CSDBSqliteStatementReset();
LABEL_539:
            sub_1AFBCC51C(a2, v334, v114);
            uint64_t v290 = IMLogHandleForCategory();
            if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR)) {
              sub_1AFC68CC0(&v341, v342);
            }
            if (theArrayc) {
              CFRelease(theArrayc);
            }
            if (v200) {
              CFRelease(v200);
            }
            if (v202) {
              CFRelease(v202);
            }
            uint64_t v19 = v334;
            if (v285) {
              CFRelease(v285);
            }
            if (v196) {
              CFRelease(v196);
            }
            goto LABEL_571;
          }
        }
        else if (v277 != -1 || !v213)
        {
          uint64_t v289 = CSDBSqliteConnectionStatementForSQL();
          if (v289 && *(void *)(v289 + 8))
          {
            CSDBSqliteBindBlobFromCFData();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            if ((void)valuePtr == -1) {
              CSDBSqliteBindNull();
            }
            else {
              CSDBSqliteBindInt();
            }
            CSDBSqliteBindInt();
            int v292 = CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
            if (v292 == 1)
            {
              uint64_t v293 = IMLogHandleForCategory();
              if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR)) {
                sub_1AFC68CEC(&v359, v360);
              }
            }
          }
          if (v333) {
            CFRelease(v333);
          }
          if (v202) {
            CFRelease(v202);
          }
          if (v196) {
            CFRelease(v196);
          }
          if (theArrayc) {
            CFRelease(theArrayc);
          }
          if (v200) {
            CFRelease(v200);
          }
          uint64_t v19 = v334;
          goto LABEL_571;
        }
        uint64_t v280 = IMLogHandleForCategory();
        if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v280, OS_LOG_TYPE_INFO, "This message lacks a handle, and we should NOT keep it.", buf, 2u);
        }
        goto LABEL_524;
      }
    }
    BOOL v213 = 0;
    goto LABEL_511;
  }
  v296 = IMLogHandleForCategory();
  if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
  {
    sub_1AFC68C40(v296);
    if (v132) {
LABEL_583:
    }
      CFRelease(v132);
  }
  else if (v132)
  {
    goto LABEL_583;
  }
LABEL_585:
  uint64_t v297 = IMLogHandleForCategory();
  if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR)) {
    sub_1AFC68BC8(v329, v297);
  }
LABEL_587:
  uint64_t v15 = 0;
LABEL_588:
  CSDBSqliteStatementReset();
LABEL_589:
  uint64_t v298 = CSDBSqliteConnectionStatementForSQL();
  if (!v298 || !*(void *)(v298 + 8) || (int v299 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v299 == 1))
  {
    uint64_t v300 = IMLogHandleForCategory();
    if (os_log_type_enabled(v300, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v300, OS_LOG_TYPE_INFO, "Whoa pardner, we didn't drop the group to chat map table. C'est la vie.", buf, 2u);
    }
  }
  uint64_t v301 = CSDBSqliteConnectionStatementForSQL();
  if (!v301 || !*(void *)(v301 + 8) || (int v302 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v302 == 1))
  {
    uint64_t v303 = IMLogHandleForCategory();
    if (os_log_type_enabled(v303, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v303, OS_LOG_TYPE_INFO, "Whoa pardner, we didn't drop the non-canonical group to handle map table. C'est la vie.", buf, 2u);
    }
  }
  if (v15)
  {
    v304 = IMLogHandleForCategory();
    if (os_log_type_enabled(v304, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v304, OS_LOG_TYPE_INFO, "Asking DB to analyze.", buf, 2u);
    }
    CSDBSqliteConnectionPerformSQL();
  }
  int64_t v305 = IMLogHandleForCategory();
  if (os_log_type_enabled(v305, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint8_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl(&dword_1AFB53000, v305, OS_LOG_TYPE_INFO, "Migration ended with result %d", buf, 8u);
  }
  uint64_t v306 = IMLogHandleForCategory();
  if (os_log_type_enabled(v306, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl(&dword_1AFB53000, v306, OS_LOG_TYPE_INFO, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -", buf, 2u);
  }
  return v15;
}

BOOL sub_1AFBCBD04()
{
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0) {
    return 1;
  }
  if (!*(void *)(v0 + 8)) {
    return 1;
  }
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  int v1 = CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  if (v1 != 1) {
    return 1;
  }
  uint64_t v2 = IMLogHandleForCategory();
  BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1AFC68EAC();
    return 0;
  }
  return result;
}

uint64_t sub_1AFBCBDB8(int a1, __CFString *a2, __CFString *theString, const __CFString *a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (theString)
  {
    uint64_t Insert = sub_1AFBCC384(a1, theString, a4, (uint64_t)a5, 1);
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t Insert = -1;
    if (!a2) {
      goto LABEL_7;
    }
  }
  if (Insert == -1) {
    uint64_t Insert = sub_1AFBCC384(a1, a2, a4, (uint64_t)a5, 0);
  }
LABEL_7:
  if (Insert != -1) {
    goto LABEL_8;
  }
  if (IMStringIsEmpty() && IMStringIsEmpty())
  {
    uint32_t v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v24 = 138412802;
      int v25 = a2;
      __int16 v26 = 2112;
      char v27 = (const char *)theString;
      __int16 v28 = 2080;
      id v29 = "int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)";
      uint64_t v12 = "Got an invalid IDs uncanon: (%@) canon: (%@) in %s.";
LABEL_23:
      uint64_t v14 = v11;
      uint32_t v15 = 32;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (IMStringIsEmpty())
  {
    int v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v24 = 138412546;
      int v25 = (__CFString *)a4;
      __int16 v26 = 2080;
      char v27 = "int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)";
      uint64_t v12 = "Got an invalid service (%@) in %s.";
      uint64_t v14 = v13;
      uint32_t v15 = 22;
LABEL_24:
      _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v24, v15);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  if ((!a2
     || (objc_msgSend((id)-[__CFString lowercaseString](a2, "lowercaseString"), "isEqualToString:", @"missed call") & 1) == 0)&& (!theString|| !objc_msgSend((id)-[__CFString lowercaseString](theString, "lowercaseString"), "isEqualToString:", @"missed call")))
  {
    uint64_t v18 = CSDBSqliteConnectionStatementForSQL();
    if (!v18 || !*(void *)(v18 + 8)) {
      goto LABEL_25;
    }
    if (theString)
    {
      CFTypeRef v19 = CFRetain(theString);
    }
    else
    {
      uint64_t v20 = sub_1AFBCC494(a2);
      char IsEmpty = IMStringIsEmpty();
      if (!v20 || (IsEmpty & 1) != 0)
      {
        char v22 = IMStringIsEmpty();
        CFTypeRef v19 = 0;
        if (a2 && (v22 & 1) == 0) {
          CFTypeRef v19 = CFRetain(a2);
        }
        if (!v20) {
          goto LABEL_41;
        }
      }
      else
      {
        CFTypeRef v19 = CFRetain(v20);
      }
      CFRelease(v20);
    }
LABEL_41:
    CSDBSqliteBindTextFromCFString();
    CSDBSqliteBindTextFromCFString();
    [a5 uppercaseString];
    CSDBSqliteBindTextFromCFString();
    if (IMStringIsEmpty()) {
      CSDBSqliteBindNull();
    }
    else {
      CSDBSqliteBindTextFromCFString();
    }
    if (CSDBSqliteStatementPerform() == 101)
    {
      uint64_t Insert = CSDBSqliteConnectionRowidOfLastInsert();
    }
    else
    {
      int v23 = IMLogHandleForCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        int v24 = 138413058;
        int v25 = a2;
        __int16 v26 = 2112;
        char v27 = (const char *)theString;
        __int16 v28 = 2112;
        id v29 = (const char *)a4;
        __int16 v30 = 2112;
        uint64_t v31 = a5;
        _os_log_error_impl(&dword_1AFB53000, v23, OS_LOG_TYPE_ERROR, "[Database] ERROR: Unable to create handle row with uncanonid[%@] canonid[%@] service[%@] country[%@]", (uint8_t *)&v24, 0x2Au);
      }
      uint64_t Insert = -1;
    }
    CSDBSqliteStatementReset();
    if (v19) {
      CFRelease(v19);
    }
LABEL_8:
    if (Insert != -1) {
      return Insert;
    }
    goto LABEL_25;
  }
  uint32_t v11 = IMLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v24 = 138412802;
    int v25 = a2;
    __int16 v26 = 2112;
    char v27 = (const char *)theString;
    __int16 v28 = 2080;
    id v29 = "int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)";
    uint64_t v12 = "Got an invalid identifier (%@) (%@) in %s.";
    goto LABEL_23;
  }
LABEL_25:
  uint64_t v16 = IMLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v24 = 138413058;
    int v25 = a2;
    __int16 v26 = 2112;
    char v27 = (const char *)theString;
    __int16 v28 = 2112;
    id v29 = (const char *)a4;
    __int16 v30 = 2112;
    uint64_t v31 = a5;
    _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "AWOL handle for uncanonicalizedID [%@]  canonicalizedID [%@] Service [%@] Country [%@]", (uint8_t *)&v24, 0x2Au);
  }
  return -1;
}

BOOL sub_1AFBCC228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 == -1 || a3 == -1)
  {
    uint64_t v9 = IMLogHandleForCategory();
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
    if (result)
    {
      int v10 = 134218240;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "** You attempted to bind HandleID [%lld] to ChatID [%lld]. One of these values is bogus.", (uint8_t *)&v10, 0x16u);
      return 0;
    }
  }
  else
  {
    uint64_t v5 = CSDBSqliteConnectionStatementForSQL();
    if (v5 && *(void *)(v5 + 8))
    {
      CSDBSqliteBindInt();
      CSDBSqliteBindInt();
    }
    int v6 = CSDBSqliteStatementPerform();
    CSDBSqliteStatementReset();
    if (v6 == 1)
    {
      BOOL v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1AFC68F14();
      }
    }
    return v6 != 1;
  }
  return result;
}

uint64_t sub_1AFBCC384(int a1, __CFString *theString, const __CFString *a3, uint64_t a4, int a5)
{
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v9 = -1;
  if (a3)
  {
    if (Length)
    {
      if (CFStringGetLength(a3))
      {
        uint64_t v10 = CSDBSqliteConnectionStatementForSQL();
        if (v10)
        {
          uint64_t v11 = v10;
          if (*(void *)(v10 + 8))
          {
            if (a5 || (uint64_t v13 = sub_1AFBCC494(theString)) == 0)
            {
              CFTypeRef v12 = CFRetain(theString);
            }
            else
            {
              uint64_t v14 = v13;
              CFTypeRef v12 = CFRetain(v13);
              CFRelease(v14);
            }
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 100) {
              uint64_t v9 = sqlite3_column_int(*(sqlite3_stmt **)(v11 + 8), 0);
            }
            else {
              uint64_t v9 = -1;
            }
            CSDBSqliteStatementReset();
            if (v12) {
              CFRelease(v12);
            }
          }
        }
      }
    }
  }
  return v9;
}

__CFString *sub_1AFBCC494(__CFString *theString)
{
  int v1 = theString;
  if (theString)
  {
    if (CFStringHasPrefix(theString, @"+"))
    {
      uint64_t v2 = (__CFString *)IMCanonicalizeFormattedString();
    }
    else if ([(__CFString *)v1 _appearsToBePhoneNumber])
    {
      uint64_t v2 = (__CFString *)IMInternationalForPhoneNumberWithOptions();
    }
    else
    {
      uint64_t v2 = (__CFString *)[(__CFString *)v1 lowercaseString];
    }
    int v1 = v2;
    if (v2) {
      CFRetain(v2);
    }
  }
  return v1;
}

void sub_1AFBCC51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = sqlite3_column_int(*(sqlite3_stmt **)(a2 + 8), 2);
  uint64_t v4 = CSDBSqliteConnectionStatementForSQL();
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(v4 + 8))
    {
      CSDBSqliteBindInt();
      if (sqlite3_step(*(sqlite3_stmt **)(v5 + 8)) == 100)
      {
        int v6 = sqlite3_column_int(*(sqlite3_stmt **)(v5 + 8), 0);
        CSDBSqliteStatementReset();
        if (v6) {
          return;
        }
      }
      else
      {
        CSDBSqliteStatementReset();
      }
    }
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (v8)
  {
    CFNumberRef v9 = v8;
    values = v8;
    keys[0] = @"CKPlaceholderTimeSince1970Property";
    CFDictionaryRef v10 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v10)
    {
      CFDictionaryRef v11 = v10;
      uint64_t v12 = CSDBSqliteConnectionStatementForSQL();
      if (v12 && *(void *)(v12 + 8))
      {
        if (JWEncodeDictionary()) {
          CSDBSqliteBindBlobFromCFData();
        }
        CSDBSqliteBindInt();
        int v13 = CSDBSqliteStatementPerform();
        if (v13 != 101)
        {
          int v14 = v13;
          uint32_t v15 = IMLogHandleForCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_1AFC68F7C(a3, v14, v15);
          }
        }
        CSDBSqliteStatementReset();
      }
      CFRelease(v11);
    }
    CFRelease(v9);
  }
}

void sub_1AFBCC6F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 == -1 || a3 == -1)
  {
    CFDictionaryRef v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1AFC69004(a3, a2, v10);
    }
  }
  else
  {
    uint64_t v7 = CSDBSqliteConnectionStatementForSQL();
    if (v7)
    {
      if (*(void *)(v7 + 8))
      {
        CSDBSqliteBindInt();
        CSDBSqliteBindInt();
        CSDBSqliteBindInt();
        int v8 = CSDBSqliteStatementPerform();
        CSDBSqliteStatementReset();
        if (v8 == 1)
        {
          CFNumberRef v9 = IMLogHandleForCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            int v11 = 134218752;
            uint64_t v12 = a3;
            __int16 v13 = 2048;
            uint64_t v14 = a2;
            __int16 v15 = 1024;
            int v16 = a4;
            __int16 v17 = 1024;
            int v18 = 1;
            _os_log_error_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_ERROR, "[Database] ERROR: Failed to Asscociated chat [%lld] for group [%lld] (isBroadcast[%d]) with Sqlite result: %d.", (uint8_t *)&v11, 0x22u);
          }
        }
      }
    }
  }
}

CFStringRef sub_1AFBCC874()
{
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  if (!*(void *)(v0 + 8)) {
    return 0;
  }
  CSDBSqliteBindInt();
  if (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100 && sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 0))
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v3 = sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 0);
    CFStringRef v4 = CFStringCreateWithCString(v2, (const char *)v3, 0x8000100u);
  }
  else
  {
    CFStringRef v4 = 0;
  }
  CSDBSqliteStatementReset();
  return v4;
}

float *sub_1AFBCC928(float *result, _DWORD *a2, float a3)
{
  *BOOL result = a3;
  *a2 = 1;
  return result;
}

void sub_1AFBCC938(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

unsigned char *sub_1AFBCC97C(unsigned char *result, unsigned char *a2)
{
  *BOOL result = 0;
  *a2 = 0;
  return result;
}

void sub_1AFBCC98C(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_1AFBCC9A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Cu);
}

void IMDSqlOperationSetError(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    uint64_t v4 = *(const void **)(a1 + 168);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 168) = 0;
    }
    if (cf) {
      *(void *)(a1 + 168) = CFRetain(cf);
    }
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC69648();
    }
  }
}

BOOL IMDSqlOperationBeginTransaction(void *a1)
{
  if (a1)
  {
    if (!a1[1])
    {
      CFAllocatorRef v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC69A38();
      }
    }
    _IMDSqlOperationBeginQuery((uint64_t)a1, @"BEGIN IMMEDIATE;");
    IMDSqlOperationFinishQuery((uint64_t)a1);
    if (a1[21]) {
      return 0;
    }
    a1[2] = CFRetain(@"BEGIN IMMEDIATE;");
    return 1;
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1AFC69990();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationCommitTransaction(void *a1)
{
  if (a1)
  {
    if (!a1[1])
    {
      CFAllocatorRef v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC69C30();
      }
    }
    if (!a1[2])
    {
      long long v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1AFC69B88();
      }
      if (!a1[2]) {
        return 0;
      }
    }
    _IMDSqlOperationBeginQuery((uint64_t)a1, @"COMMIT;");
    IMDSqlOperationFinishQuery((uint64_t)a1);
    if (a1[21]) {
      return 0;
    }
    int v6 = (const void *)a1[2];
    if (v6)
    {
      CFRelease(v6);
      a1[2] = 0;
    }
    return 1;
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1AFC69AE0();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationRevertTransaction(void *a1)
{
  if (a1)
  {
    if (!a1[1])
    {
      CFAllocatorRef v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC69E28();
      }
    }
    if (!a1[2])
    {
      long long v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1AFC69D80();
      }
      if (!a1[2]) {
        return 0;
      }
    }
    _IMDSqlOperationBeginQuery((uint64_t)a1, @"ROLLBACK;");
    IMDSqlOperationFinishQuery((uint64_t)a1);
    if (a1[21]) {
      return 0;
    }
    int v6 = (const void *)a1[2];
    if (v6)
    {
      CFRelease(v6);
      a1[2] = 0;
    }
    return 1;
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1AFC69CD8();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationCommitOrRevertTransaction(void *a1)
{
  if (a1)
  {
    if (a1[21])
    {
      IMDSqlOperationRevertTransaction(a1);
      return 0;
    }
    IMDSqlOperationCommitTransaction(a1);
    return 1;
  }
  else
  {
    CFAllocatorRef v2 = IMLogHandleForCategory();
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1AFC69ED0();
      return 0;
    }
  }
  return result;
}

id _IMDSqlOperationGetRows(uint64_t a1, const __CFString *a2)
{
  return _IMDSqlOperationGetRowsWithBindingBlock(a1, a2, (uint64_t)&unk_1F084CE60);
}

id _IMDSqlOperationGetRowsWithBindingBlock(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A0E0();
    }
  }
  if (!theString)
  {
    uint64_t v7 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"query", "NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)", IMFileLocationTrimFileName(), 327, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    int v8 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v8)
    {
      v8(v7);
    }
    else if (IMOSLoggingEnabled())
    {
      CFNumberRef v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v20 = v7;
        _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a3)
  {
    if (!a1) {
      return 0;
    }
    _IMDSqlOperationBeginQuery(a1, theString);
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }
  else
  {
    uint64_t v10 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"binder", "NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)", IMFileLocationTrimFileName(), 328, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    int v11 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v20 = v10;
        _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    if (!a1) {
      return 0;
    }
    _IMDSqlOperationBeginQuery(a1, theString);
  }
  id v13 = 0;
  while (IMDSqlOperationHasRows(a1))
  {
    Row = IMDSqlStatementGetRow((sqlite3_stmt **)(a1 + 32));
    if (Row)
    {
      if (!v13)
      {
        id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        if (!v13)
        {
          uint64_t v15 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"rows", "NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)", IMFileLocationTrimFileName(), 343, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
          int v16 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
          if (v16)
          {
            v16(v15);
          }
          else if (IMOSLoggingEnabled())
          {
            __int16 v17 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              uint64_t v20 = v15;
              _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
            }
          }
          id v13 = 0;
        }
      }
      [v13 addObject:Row];
    }
  }
  IMDSqlOperationFinishQuery(a1);
  if (*(void *)(a1 + 168) && v13)
  {

    return 0;
  }
  if (!v13) {
    return MEMORY[0x1E4F1CBF0];
  }
  return v13;
}

id _IMDSqlOperationGetRowsForQuery(const __CFString *a1, void *a2)
{
  return _IMDSqlOperationGetRowsForQueryWithBindingBlock(a1, a2, (uint64_t)&unk_1F084D1A0);
}

id _IMDSqlOperationGetRowsForQueryWithBindingBlock(const __CFString *a1, void *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v15 = xmmword_1E5F95B00;
    long long v16 = *(_OWORD *)off_1E5F95B10;
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"query", "NSArray *_IMDSqlOperationGetRowsForQueryWithBindingBlock(CFStringRef, NSError **, IMDSqlOperationBlock)", IMFileLocationTrimFileName(), 368, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v19 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a3)
  {
    long long v15 = xmmword_1E5F95B28;
    long long v16 = *(_OWORD *)off_1E5F95B38;
    uint64_t v9 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"binderBlock", "NSArray *_IMDSqlOperationGetRowsForQueryWithBindingBlock(CFStringRef, NSError **, IMDSqlOperationBlock)", IMFileLocationTrimFileName(), 369, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      int v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v19 = v9;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = &v15;
  *(void *)&long long v16 = 0xD010000000;
  *((void *)&v16 + 1) = &unk_1AFCE00D7;
  memset(v17, 0, sizeof(v17));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v17);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = sub_1AFBCD550;
  v14[3] = &unk_1E5F8EC38;
  uint8_t v14[4] = a3;
  v14[5] = &v15;
  id RowsWithBindingBlock = _IMDSqlOperationGetRowsWithBindingBlock(*((void *)&v15 + 1) + 32, a1, (uint64_t)v14);
  if (IMDSqlOperationRelease(*((void *)&v15 + 1) + 32, a2))
  {
    if (!RowsWithBindingBlock) {
      id RowsWithBindingBlock = MEMORY[0x1E4F1CBF0];
    }
  }
  else
  {

    id RowsWithBindingBlock = 0;
  }
  _Block_object_dispose(&v15, 8);
  return RowsWithBindingBlock;
}

uint64_t sub_1AFBCD550(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, *(void *)(*(void *)(a1 + 40) + 8) + 32);
  }
  return result;
}

BOOL IMDSqlOperationExecuteQuery(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!theString)
  {
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"query", "BOOL IMDSqlOperationExecuteQuery(IMDSqlOperation *, NSString *, IMDBlock)", IMFileLocationTrimFileName(), 387, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v14 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    uint64_t v9 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"query", "BOOL IMDSqlOperationExecuteQuery(IMDSqlOperation *, NSString *, IMDBlock)", IMFileLocationTrimFileName(), 388, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      int v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v14 = v9;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  _IMDSqlOperationBeginQuery(a1, theString);
  if (a3) {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }
  return IMDSqlOperationFinishQuery(a1);
}

void IMDSqlOperationIterateRow(uint64_t a1, uint64_t a2)
{
  if (!a1 && (uint64_t v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6A230();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6A188();
  }
LABEL_6:
  IMDSqlStatementIterateRow((sqlite3_stmt **)(a1 + 32), a2);
}

void IMDSqlOperationColumnByIndex(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (!a1)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A2D8();
    }
  }
  IMDSqlStatementColumnByIndex((sqlite3_stmt **)(a1 + 32), a2, a3);
}

void IMDSqlOperationColumnByName(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "IMDSqlColumn IMDSqlOperationColumnByName(IMDSqlOperation *, const char *)", IMFileLocationTrimFileName(), 450, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v10 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  IMDSqlStatementColumnByName((sqlite3_stmt **)(a1 + 32), a2, a3);
}

sqlite3_stmt *IMDSqlOperationColumnCount(uint64_t a1)
{
  if (!a1)
  {
    CFAllocatorRef v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A380();
    }
  }
  return IMDSqlStatementColumnCount((sqlite3_stmt **)(a1 + 32));
}

uint64_t sub_1AFBCDACC(uint64_t a1)
{
  return dword_1EB5ABD10[a1];
}

uint64_t _IMDChatRecordSetProperty()
{
  return CSDBRecordSetProperty();
}

uint64_t _IMDChatRecordGetProperty()
{
  return CSDBRecordGetProperty();
}

uint64_t _IMDChatRecordCopyProperty()
{
  return CSDBRecordCopyProperty();
}

CFNumberRef _IMDChatRecordGetDateProperty()
{
  uint64_t valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CSDBRecordCopyProperty();
  if (result)
  {
    CFNumberRef v1 = result;
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t IMDChatRecordGetTypeID()
{
  return qword_1EB5ABD80;
}

uint64_t sub_1AFBCDB9C()
{
  qword_1EB5ABD80 = _CFRuntimeRegisterClass();
  uint64_t v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  CFNumberRef v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5F95C78, 27);
  uint64_t v2 = 0;
  long long v3 = &off_1E5F95C78;
  do
  {
    v3 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_1EB5ABD10[v2++] = result;
  }
  while (v2 != 27);
  return result;
}

const void *IMDChatRecordCreate(uint64_t a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, int64_t a15, int64_t a16, uint64_t a17, uint64_t a18, int64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28)
{
  int64_t v29 = a27;
  int64_t v28 = a28;
  int64_t v46 = a26;
  int64_t v31 = a24;
  int64_t v30 = a25;
  uint64_t v47 = a23;
  uint64_t v32 = a22;
  int64_t v45 = a21;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    pthread_once(&stru_1EB5AB948, (void (*)(void))sub_1AFBCDB9C);
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
    id v34 = Instance;
    if (Instance)
    {
      Instance[1] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      int v41 = Instance + 1;
      int64_t v42 = v28;
      if (IMOSLoggingEnabled())
      {
        uint64_t v35 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v35, OS_LOG_TYPE_DEBUG, "_IMDChatRecordCreate()", buf, 2u);
        }
      }
      IMDEnsureSharedRecordStoreInitialized();
      int v36 = (const void *)CSDBRecordCreate();
      if (v36)
      {
        CFNumberRef cf = CFNumberCreate(0, kCFNumberSInt64Type, &a21);
        CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt64Type, &a26);
        uint64_t v37 = 0;
        *(void *)uint8_t buf = a8;
        uint64_t v66 = (uint8_t *)a2;
        uint64_t v67 = a3;
        uint64_t v68 = a4;
        uint64_t v69 = a5;
        uint64_t v70 = a6;
        uint64_t v71 = a7;
        uint64_t v72 = a9;
        uint64_t v73 = a12;
        int64_t v74 = a14;
        uint64_t v75 = a11;
        uint64_t v76 = a10;
        uint64_t v77 = a13;
        int64_t v78 = a15;
        int64_t v79 = a16;
        uint64_t v80 = a17;
        uint64_t v81 = a18;
        int64_t v82 = a19;
        uint64_t v83 = a20;
        CFNumberRef v84 = cf;
        uint64_t v85 = v32;
        uint64_t v86 = v47;
        int64_t v87 = v31;
        CFNumberRef v88 = v43;
        int64_t v89 = v30;
        int64_t v90 = v29;
        int64_t v91 = v42;
        do
        {
          if (IMOSLoggingEnabled())
          {
            CFDataRef v38 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t v56 = 67109376;
              *(_DWORD *)uint64_t v57 = v37;
              *(_WORD *)&v57[4] = 1024;
              *(_DWORD *)&v57[6] = 27;
              _os_log_impl(&dword_1AFB53000, v38, OS_LOG_TYPE_DEBUG, "_IMDChatRecordSetProperty [%d of %d]", v56, 0xEu);
            }
          }
          CSDBRecordSetProperty();
          ++v37;
        }
        while (v37 != 27);
        if (cf) {
          CFRelease(cf);
        }
        if (v43) {
          CFRelease(v43);
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v39 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v56 = 138413314;
            *(void *)uint64_t v57 = a6;
            *(_WORD *)&v57[8] = 2112;
            uint64_t v58 = a10;
            __int16 v59 = 2112;
            uint64_t v60 = a13;
            __int16 v61 = 2112;
            uint64_t v62 = a20;
            __int16 v63 = 2112;
            uint64_t v64 = a7;
            _os_log_impl(&dword_1AFB53000, v39, OS_LOG_TYPE_INFO, "Saving new chat record to database with identifier: %@ displayName: %@ groupID: %@ originalGroupID: %@ service: %@", v56, 0x34u);
          }
        }
        if (IMDChatRecordAddChat((uint64_t)v36))
        {
          *int v41 = (int)CSDBRecordGetID();
        }
        else
        {
          CFRelease(v34);
          id v34 = 0;
        }
        IMDSMSRecordStoreRecordCommitChangesAndRelease(v36);
      }
      else
      {
        CFRelease(v34);
        return 0;
      }
    }
  }
  else
  {
    *(void *)uint8_t buf = 0;
    uint64_t v66 = buf;
    uint64_t v67 = 0x2020000000;
    uint64_t v68 = 0;
    v55[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v55[1] = (void (*)(void))3221225472;
    v55[2] = (void (*)(void))sub_1AFBCE204;
    v55[3] = (void (*)(void))&unk_1E5F8D580;
    v55[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCreate_IPCAction(v55, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      v45,
      v32,
      v47,
      v31,
      v30,
      v46,
      v29,
      v28);
    id v34 = (const void *)*((void *)v66 + 3);
    _Block_object_dispose(buf, 8);
  }
  return v34;
}

void *sub_1AFBCE204(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void *_IMDCopyIMDChatRecordFromXPCObjectClient(void *a1)
{
  if (xpc_dictionary_get_count(a1) < 3) {
    return 0;
  }
  pthread_once(&stru_1EB5AB948, (void (*)(void))sub_1AFBCDB9C);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v2 = (void *)Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    if (!*(void *)(Instance + 24))
    {
      CFIndex v4 = 27;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 27, 0);
      do
      {
        CFArrayAppendValue(Mutable, 0);
        --v4;
      }
      while (v4);
      uint64_t v6 = &qword_1E5F95C88;
      while (2)
      {
        uint64_t v7 = *v6;
        switch(*(v6 - 1))
        {
          case 0:
            uint64_t v8 = IMGetXPCIntFromDictionary();
            goto LABEL_13;
          case 1:
            uint64_t v8 = IMGetXPCStringFromDictionary();
            goto LABEL_13;
          case 2:
            uint64_t v8 = IMGetXPCDataFromDictionary();
LABEL_13:
            CFNumberRef v9 = (CFNumberRef)v8;
            goto LABEL_14;
          case 3:
            valuePtr[0] = 0;
            valuePtr[0] = IMGetXPCIntFromDictionary();
            CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
            CFNumberRef v10 = v9;
            goto LABEL_16;
          default:
            CFNumberRef v9 = 0;
LABEL_14:
            CFNumberRef v10 = 0;
LABEL_16:
            if (CFArrayGetValueAtIndex(Mutable, v4))
            {
              if (v7)
              {
                uint64_t v11 = *(void (**)(void))(v7 + 8);
                if (v11) {
                  v11();
                }
              }
            }
            if (v9 && v7 && *(void *)v7) {
              CFNumberRef v9 = (CFNumberRef)(*(uint64_t (**)(CFNumberRef))v7)(v9);
            }
            CFArraySetValueAtIndex(Mutable, v4, v9);
            if (v10) {
              CFRelease(v10);
            }
            ++v4;
            v6 += 5;
            if (v4 != 27) {
              continue;
            }
            v2[3] = Mutable;
            xpc_object_t value = xpc_dictionary_get_value(a1, "handles_cache");
            if (value)
            {
              id v13 = value;
              if (!v2[4])
              {
                size_t count = xpc_array_get_count(value);
                v2[4] = CFArrayCreateMutable(0, count, MEMORY[0x1E4F1D510]);
              }
              valuePtr[0] = MEMORY[0x1E4F143A8];
              valuePtr[1] = 3221225472;
              valuePtr[2] = sub_1AFBD3584;
              valuePtr[3] = &unk_1E5F93D30;
              valuePtr[4] = v2;
              xpc_array_apply(v13, valuePtr);
            }
            xpc_object_t v15 = xpc_dictionary_get_value(a1, "last_message_cache");
            if (v15) {
              v2[6] = _IMDCopyIMDMessageRecordFromXPCObjectClient(v15);
            }
            v2[5] = xpc_dictionary_get_int64(a1, "unread_count_cache");
            v2[7] = xpc_dictionary_get_int64(a1, "last_message_date_on_load");
            break;
        }
        break;
      }
    }
    v2[2] = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

_OWORD *IMDChatRecordCreateFromRecordID(uint64_t a1, int64_t a2)
{
  return sub_1AFBCE51C(a1, a2, 1);
}

_OWORD *sub_1AFBCE51C(uint64_t a1, int64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&stru_1EB5AB948, (void (*)(void))sub_1AFBCDB9C);
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  uint64_t v6 = Instance;
  if (Instance)
  {
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    *((void *)Instance + 2) = a2;
    if (a3) {
      uint64_t v7 = IMDChatRecordCopyChatRecord(a2);
    }
    else {
      uint64_t v7 = IMDChatRecordCopyChatRecordUnlocked(a2);
    }
    uint64_t v8 = (const void *)v7;
    if (IMOSLoggingEnabled())
    {
      CFNumberRef v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 134218242;
        int64_t v13 = a2;
        __int16 v14 = 2112;
        xpc_object_t v15 = v8;
        _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_DEBUG, "Got record in _IMDChatRecordCreateFromRecordIDWithLock (%lld) : %@", (uint8_t *)&v12, 0x16u);
      }
    }
    if (!v8)
    {
      if (IMOSLoggingEnabled())
      {
        CFNumberRef v10 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          int v12 = 134217984;
          int64_t v13 = a2;
          _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Could not get chat record for identifier %lld", (uint8_t *)&v12, 0xCu);
        }
      }
      uint64_t v8 = v6;
      uint64_t v6 = 0;
    }
    CFRelease(v8);
  }
  return v6;
}

_OWORD *IMDChatRecordCreateFromRecordIDUnlocked(uint64_t a1, int64_t a2)
{
  return sub_1AFBCE51C(a1, a2, 0);
}

uint64_t IMDChatRecordGetIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 16);
  }
  uint64_t v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    uint64_t v4 = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Attempted to get identifier for NULL chat record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDChatRecordCopyGUID(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A428(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBCE8E0;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBCE8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBCE8E0(uint64_t a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDChatRecordCopyChatIdentifier(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A4A0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBCEA8C;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 5);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBCEA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBCEA8C(uint64_t a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDChatRecordCopyGUIDUnlocked(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A518(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBCEC38;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBCEC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBCEC38(uint64_t a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDChatRecordCopyDisplayName(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A590(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBCEDE4;
    v14[3] = &unk_1E5F90178;
    uint8_t v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 11);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBCEDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBCEDE4(uint64_t a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

void *IMDChatRecordCopyHandles(void *a1)
{
  CFNumberRef v1 = a1;
  if (a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x2020000000;
    uint64_t v11 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v2 = v1[2];
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      void v7[2] = sub_1AFBCEFA8;
      void v7[3] = &unk_1E5F900E0;
      void v7[4] = &v8;
      void v7[5] = v2;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT handle_id FROM chat_handle_join WHERE chat_id = ?", (uint64_t)v7);
    }
    else
    {
      int v3 = (const void *)v1[4];
      if (v3)
      {
        CFNumberRef v1 = CFRetain(v3);
LABEL_8:
        _Block_object_dispose(&v8, 8);
        return v1;
      }
      int64_t v4 = v1[2];
      v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v6[1] = (void (*)(void))3221225472;
      void v6[2] = (void (*)(void))sub_1AFBCF084;
      v6[3] = (void (*)(void))&unk_1E5F8D580;
      void v6[4] = (void (*)(void))&v8;
      __syncXPCIMDChatRecordCopyHandles_IPCAction(v6, v4);
    }
    CFNumberRef v1 = (void *)v9[3];
    goto LABEL_8;
  }
  return v1;
}

void sub_1AFBCEF88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBCEFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      }
      int v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      uint64_t v10 = (const void *)IMDHandleRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

xpc_object_t sub_1AFBCF084(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFBCF118;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFBCF118(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDHandleRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDChatRecordCopyLastMessage(uint64_t a1)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  uint64_t Identifier = IMDChatRecordGetIdentifier(a1);
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1AFBCF33C;
  void v7[3] = &unk_1E5F95BD0;
  void v7[5] = &v12;
  void v7[6] = Identifier;
  void v7[4] = &v8;
  _IMDPerformLockedStatementBlockWithQuery(@"SELECT cm.message_id from chat_message_join cm where cm.chat_id = ? ORDER BY cm.message_date DESC, cm.message_id DESC LIMIT 1;",
    (uint64_t)v7);
  if (*((unsigned char *)v9 + 24))
  {
    uint64_t v2 = (const void *)v13[3];
    if (v2) {
      CFRelease(v2);
    }
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E778], "sharedFeatureFlags"), "isScheduledMessagesCoreEnabled"))int v3 = @"SELECT ROWID from message m                 WHERE m.item_type == 0                 AND (m.schedule_type == 0                     OR (m.schedule_type == 2 AND (m.schedule_state != 1 AND m.schedule_state != 2)))                 AND m.ROWID in                     (SELECT message_id FROM chat_message_join where chat_id = ?)                 ORDER BY date DESC, ROWID DESC LIMIT 1"; {
    else
    }
      int v3 = @"SELECT ROWID from message m WHERE m.item_type == 0 AND m.ROWID in (SELECT message_id FROM chat_message_join where chat_id = ?) ORDER BY date DESC, ROWID DESC LIMIT 1";
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1AFBCF480;
    v6[3] = &unk_1E5F900E0;
    void v6[4] = &v12;
    void v6[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v6);
  }
  uint64_t v4 = v13[3];
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v4;
}

void sub_1AFBCF310(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBCF33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    do
    {
      int v8 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      int v9 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, v8);
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t ItemType = IMDMessageRecordGetItemType((uint64_t)v9, 0);
        uint64_t ScheduleType = IMDMessageRecordGetScheduleType((uint64_t)v10, 0);
        uint64_t ScheduleState = IMDMessageRecordGetScheduleState((uint64_t)v10, 0);
        int v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E778], "sharedFeatureFlags"), "isScheduledMessagesCoreEnabled");
        BOOL v15 = (unint64_t)(ScheduleState - 1) < 2;
        if (v14) {
          BOOL v16 = ScheduleType == 2;
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          BOOL v15 = 0;
        }
        if (ItemType) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = !v15;
        }
        if (v17)
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v19 = *(const void **)(v18 + 24);
          if (v19)
          {
            CFRelease(v19);
            *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
            uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
          }
          *(void *)(v18 + 24) = v10;
        }
        else
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          CFRelease(v10);
        }
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

uint64_t sub_1AFBCF480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    do
    {
      int v8 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      int v9 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, v8);
      if (v9) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

uint64_t IMDChatRecordCopyMessagesWithLimit(uint64_t a1, int64_t a2)
{
  uint64_t v10 = 0;
  char v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t Identifier = IMDChatRecordGetIdentifier(a1);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_1AFBCF668;
    v9[3] = &unk_1E5F90108;
    void v9[5] = Identifier;
    v9[6] = a2;
    void v9[4] = &v10;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT message_id FROM chat_message_join WHERE chat_id = ? ORDER BY ROWID DESC LIMIT ?;",
      (uint64_t)v9);
  }
  else
  {
    int64_t v5 = IMDChatRecordGetIdentifier(a1);
    v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v8[1] = (void (*)(void))3221225472;
    void v8[2] = (void (*)(void))sub_1AFBCF750;
    v8[3] = (void (*)(void))&unk_1E5F8D580;
    void v8[4] = (void (*)(void))&v10;
    __syncXPCIMDChatRecordCopyMessagesWithLimit_IPCAction(v8, v5, a2);
  }
  uint64_t v6 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1AFBCF644(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBCF668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    int v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      }
      int v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      uint64_t v10 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        char v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

xpc_object_t sub_1AFBCF750(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFBCF7E4;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFBCF7E4(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  int64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

__n128 IMDChatRecordBulkCopyForPhotos(uint64_t a1, const void **a2, const void **a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, const void **a14, const void **a15, void *a16, void *a17, void *a18, const void **a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  _IMDChatRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a24,
    a26,
    0,
    0,
    0,
    0,
    0);
  return result;
}

void _IMDChatRecordBulkCopy(uint64_t a1, const void **a2, const void **a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, const void **a14, const void **a15, void *a16, void *a17, void *a18, const void **a19, void *a20,void *a21,void *a22,void *a23,const void **a24,const void **a25,void *a26,const void **a27,const void **a28)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 3221225472;
      v77[2] = sub_1AFBCFEA8;
      v77[3] = &unk_1E5F95BF0;
      v77[4] = a1;
      v77[5] = a2;
      v77[6] = a3;
      v77[7] = a4;
      v77[8] = a5;
      v77[9] = a6;
      v77[10] = a7;
      v77[11] = a11;
      v77[12] = a10;
      v77[13] = a8;
      v77[14] = a9;
      v77[15] = a12;
      v77[16] = a13;
      v77[17] = a14;
      v77[18] = a15;
      v77[19] = a16;
      v77[20] = a17;
      v77[21] = a18;
      v77[22] = a19;
      v77[23] = a20;
      v77[24] = a21;
      v77[25] = a22;
      v77[26] = a23;
      v77[27] = a24;
      v77[28] = a26;
      v77[29] = a25;
      v77[30] = a27;
      v77[31] = a28;
      _IMDPerformBlock((uint64_t)v77);
    }
    else
    {
      CFArrayRef v36 = *(const __CFArray **)(a1 + 24);
      if (v36)
      {
        if (a4)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v36, 3);
          CFDataRef v38 = ValueAtIndex;
          if (ValueAtIndex) {
            CFRetain(ValueAtIndex);
          }
          *a4 = v38;
        }
        if (a5)
        {
          uint64_t v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
          uint64_t v40 = v39;
          if (v39) {
            CFRetain(v39);
          }
          *a5 = v40;
        }
        if (a6)
        {
          int v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 5);
          int64_t v42 = v41;
          if (v41) {
            CFRetain(v41);
          }
          *a6 = v42;
        }
        if (a7)
        {
          CFNumberRef v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 6);
          uint64_t v44 = v43;
          if (v43) {
            CFRetain(v43);
          }
          *a7 = v44;
        }
        if (a11)
        {
          int64_t v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
          int64_t v46 = v45;
          if (v45) {
            CFRetain(v45);
          }
          *a11 = v46;
        }
        if (a10)
        {
          uint64_t v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
          unsigned int v48 = v47;
          if (v47) {
            CFRetain(v47);
          }
          *a10 = v48;
        }
        if (a8)
        {
          CFDataRef v49 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
          uint64_t v50 = v49;
          if (v49) {
            CFRetain(v49);
          }
          *a8 = v50;
        }
        if (a9)
        {
          id v51 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
          __int16 v52 = v51;
          if (v51) {
            CFRetain(v51);
          }
          *a9 = v52;
        }
        if (a12)
        {
          int v53 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 8);
          id v54 = v53;
          if (v53) {
            CFRetain(v53);
          }
          *a12 = v54;
        }
        if (a13)
        {
          int v55 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 12);
          uint64_t v56 = v55;
          if (v55) {
            CFRetain(v55);
          }
          *a13 = v56;
        }
        if (a14) {
          *a14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 9);
        }
        if (a3) {
          *a3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
        }
        if (a2) {
          *a2 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
        }
        if (a15) {
          *a15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 13);
        }
        if (a16) {
          *a16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 14);
        }
        if (a17)
        {
          uint64_t v57 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 15);
          uint64_t v58 = v57;
          if (v57) {
            CFRetain(v57);
          }
          *a17 = v58;
        }
        if (a18)
        {
          __int16 v59 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 16);
          uint64_t v60 = v59;
          if (v59) {
            CFRetain(v59);
          }
          *a18 = v60;
        }
        if (a19) {
          *a19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 17);
        }
        if (a20)
        {
          __int16 v61 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 18);
          uint64_t v62 = v61;
          if (v61) {
            CFRetain(v61);
          }
          *a20 = v62;
        }
        if (a21)
        {
          CFNumberRef v63 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
          if (v63) {
            CFNumberGetValue(v63, kCFNumberSInt64Type, a21);
          }
        }
        if (a22)
        {
          uint64_t v64 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 20);
          uint64_t v65 = v64;
          if (v64) {
            CFRetain(v64);
          }
          *a22 = v65;
        }
        if (a23)
        {
          uint64_t v66 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 21);
          uint64_t v67 = v66;
          if (v66) {
            CFRetain(v66);
          }
          *a23 = v67;
        }
        if (a24) {
          *a24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 22);
        }
        if (a26)
        {
          CFNumberRef v68 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 23);
          if (v68) {
            CFNumberGetValue(v68, kCFNumberSInt64Type, a26);
          }
        }
        if (a25) {
          *a25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 24);
        }
        if (a27) {
          *a27 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 25);
        }
        if (a28) {
          *a28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 26);
        }
      }
    }
  }
  else
  {
    int64_t v28 = IMLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A608(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }
}

void sub_1AFBCFEA8(uint64_t a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 48) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 80)) {
      **(void **)(a1 + 80) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 88)) {
      **(void **)(a1 + 88) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 96)) {
      **(void **)(a1 + 96) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 128)) {
      **(void **)(a1 + 128) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 136)) {
      **(void **)(a1 + 136) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 144)) {
      **(void **)(a1 + 144) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 152)) {
      **(void **)(a1 + 152) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 160)) {
      **(void **)(a1 + 160) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 168)) {
      **(void **)(a1 + 168) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 176)) {
      **(void **)(a1 + 176) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 184)) {
      **(void **)(a1 + 184) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 192)) {
      **(void **)(a1 + 192) = _IMDChatRecordGetDateProperty();
    }
    if (*(void *)(a1 + 200)) {
      **(void **)(a1 + 200) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 208)) {
      **(void **)(a1 + 208) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 216)) {
      **(void **)(a1 + 216) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 224)) {
      **(void **)(a1 + 224) = _IMDChatRecordGetDateProperty();
    }
    if (*(void *)(a1 + 232)) {
      **(void **)(a1 + 232) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 240)) {
      **(void **)(a1 + 240) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 248)) {
      **(void **)(a1 + 248) = (int)CSDBRecordGetProperty();
    }
    CFRelease(v3);
  }
}

CFTypeRef IMDChatRecordCopyCachedLastMessage(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const void **)(a1 + 48)) != 0) {
    return CFRetain(v1);
  }
  else {
    return 0;
  }
}

uint64_t IMDChatRecordCachedUnreadCount(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 40);
  }
  else {
    return -1;
  }
}

uint64_t IMDChatRecordLastMessageTimeStampOnLoad(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 56);
  }
  else {
    return -1;
  }
}

void _IMDChatRecordSetGUID(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_1AFBD039C;
      v20[3] = &unk_1E5F90128;
      v20[4] = a1;
      v20[5] = a2;
      _IMDPerformBlock((uint64_t)v20);
    }
    else
    {
      uint64_t v12 = IMLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6A6F8(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A680(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void sub_1AFBD039C(uint64_t a1)
{
  uint64_t v1 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsArchived(uint64_t a1, int64_t a2)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = sub_1AFBD04E4;
      v13[3] = &unk_1E5F90128;
      v13[4] = a1;
      v13[5] = a2;
      _IMDPerformBlock((uint64_t)v13);
    }
    else
    {
      int64_t v12 = *(void *)(a1 + 16);
      __syncXPCIMDChatRecordSetIsArchived_IPCAction(0, v12, a2);
    }
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A770(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void sub_1AFBD04E4(uint64_t a1)
{
  uint64_t v1 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsBlackholed(uint64_t a1, int64_t a2)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = sub_1AFBD062C;
      v13[3] = &unk_1E5F90128;
      v13[4] = a1;
      v13[5] = a2;
      _IMDPerformBlock((uint64_t)v13);
    }
    else
    {
      int64_t v12 = *(void *)(a1 + 16);
      __syncXPCIMDChatRecordSetIsBlackholed_IPCAction(0, v12, a2);
    }
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A7E8(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void sub_1AFBD062C(uint64_t a1)
{
  uint64_t v1 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsRecovered(uint64_t a1, int64_t a2)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = sub_1AFBD0774;
      v13[3] = &unk_1E5F90128;
      v13[4] = a1;
      v13[5] = a2;
      _IMDPerformBlock((uint64_t)v13);
    }
    else
    {
      int64_t v12 = *(void *)(a1 + 16);
      __syncXPCIMDChatRecordSetIsRecovered_IPCAction(0, v12, a2);
    }
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A860(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void sub_1AFBD0774(uint64_t a1)
{
  uint64_t v1 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsDeletingIncomingMessages(uint64_t a1, int64_t a2)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = sub_1AFBD08BC;
      v13[3] = &unk_1E5F90128;
      v13[4] = a1;
      v13[5] = a2;
      _IMDPerformBlock((uint64_t)v13);
    }
    else
    {
      int64_t v12 = *(void *)(a1 + 16);
      __syncXPCIMDChatRecordSetIsDeletingIncomingMessages_IPCAction(0, v12, a2);
    }
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6A8D8(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void sub_1AFBD08BC(uint64_t a1)
{
  uint64_t v1 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

uint64_t IMDChatRecordAddMessageIfNeededUnlocked(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t Identifier = IMDMessageRecordGetIdentifier(a2);
  uint64_t v5 = IMDChatRecordGetIdentifier(a1);
  uint64_t Date = IMDMessageRecordGetDate(a2, 0);
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint8_t buf = 134218240;
      uint64_t v11 = Identifier;
      __int16 v12 = 2048;
      uint64_t v13 = v5;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_DEBUG, "Trying to associate message [%lld] with chat [%lld]", buf, 0x16u);
    }
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFBD0A84;
  v9[3] = &unk_1E5F95C10;
  void v9[4] = v5;
  void v9[5] = Identifier;
  v9[6] = Date;
  return _IMDPerformLockedStatementBlockWithQuery(@"INSERT OR IGNORE INTO chat_message_join (chat_id, message_id, message_date) VALUES (?, ?, ?);",
           (uint64_t)v9);
}

void sub_1AFBD0A84()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  int v0 = CSDBSqliteStatementPerform();
  int v1 = v0;
  if (v0)
  {
    if (v0 != 101)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v2 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          int v4 = 67109120;
          int v5 = v1;
          _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "SQLite returned %d from IMDChatRecordAddMessageIfNeededUnlocked", (uint8_t *)&v4, 8u);
        }
      }
    }
  }
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 67109120;
      int v5 = v1;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordAddMessageIfNeeded", (uint8_t *)&v4, 8u);
    }
  }
}

uint64_t IMDChatRecordRemoveMessage(uint64_t a1, uint64_t a2)
{
  if (!a1 && (int v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6AA08();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  int v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6A950();
  }
LABEL_6:
  uint64_t Identifier = IMDMessageRecordGetIdentifier(a2);
  uint64_t v7 = IMDChatRecordGetIdentifier(a1);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFBD0CF8;
  v9[3] = &unk_1E5F95C30;
  void v9[4] = v7;
  void v9[5] = Identifier;
  v9[6] = a2;
  void v9[7] = a1;
  return _IMDPerformLockedStatementBlockWithQuery(@"DELETE FROM chat_message_join WHERE chat_id = ? AND message_id = ?;",
           (uint64_t)v9);
}

void sub_1AFBD0CF8(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  IMDCoreSpotlightScheduleUpdateForDeletedMessages(1005);
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v4 = *(void *)(a1 + 56);
      int v5 = 138412546;
      uint64_t v6 = v3;
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "Finished remove message [%@] from chat [%@], updating the spotlight index for this chat.", (uint8_t *)&v5, 0x16u);
    }
  }
}

void IMDChatRecordAddHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = IMDIsRunningInDatabaseServerProcess();
  int64_t Identifier = IMDHandleRecordGetIdentifier(a2);
  int64_t v6 = IMDChatRecordGetIdentifier(a1);
  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint8_t buf = 134218240;
        int64_t v10 = Identifier;
        __int16 v11 = 2048;
        int64_t v12 = v6;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_DEBUG, "Trying to associate handle [%lld] with chat [%lld]", buf, 0x16u);
      }
    }
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1AFBD0FD4;
    v8[3] = &unk_1E5F92998;
    void v8[4] = v6;
    void v8[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery(@"INSERT INTO chat_handle_join (chat_id, handle_id) VALUES (?, ?)", (uint64_t)v8);
  }
  else
  {
    __syncXPCIMDChatRecordAddHandle_IPCAction(0, v6, Identifier);
  }
}

void sub_1AFBD0FD4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  int v0 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    int v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      v2[0] = 67109120;
      v2[1] = v0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordAddHandle", (uint8_t *)v2, 8u);
    }
  }
}

void IMDChatRecordRemoveHandle(uint64_t a1, uint64_t a2)
{
  int v4 = IMDIsRunningInDatabaseServerProcess();
  int64_t Identifier = IMDHandleRecordGetIdentifier(a2);
  int64_t v6 = IMDChatRecordGetIdentifier(a1);
  if (v4)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1AFBD11D0;
    void v7[3] = &unk_1E5F92998;
    void v7[4] = v6;
    void v7[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery(@"DELETE FROM chat_handle_join WHERE chat_id = ? AND handle_id = ?", (uint64_t)v7);
  }
  else
  {
    __syncXPCIMDChatRecordRemoveHandle_IPCAction(0, v6, Identifier);
  }
}

void sub_1AFBD11D0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  int v0 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    int v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      v2[0] = 67109120;
      v2[1] = v0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordRemoveHandle", (uint8_t *)v2, 8u);
    }
  }
}

void IMDChatRecordBulkUpdate(uint64_t a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, int64_t a15, int64_t a16, uint64_t a17, uint64_t a18, int64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v36 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      uint64_t v47 = a1;
      _os_log_impl(&dword_1AFB53000, v36, OS_LOG_TYPE_DEBUG, "IMDChatRecordBulkUpdateChat %@", buf, 0xCu);
    }
  }
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = sub_1AFBD1538;
      v45[3] = &unk_1E5F95BF0;
      void v45[4] = a1;
      v45[5] = a3;
      v45[6] = a2;
      v45[7] = a14;
      v45[8] = a15;
      v45[9] = a24;
      v45[10] = a27;
      v45[11] = a28;
      v45[12] = a16;
      v45[13] = a4;
      v45[14] = a5;
      v45[15] = a6;
      v45[16] = a7;
      v45[17] = a11;
      v45[18] = a10;
      v45[19] = a8;
      v45[20] = a9;
      v45[21] = a12;
      v45[22] = a13;
      v45[23] = a17;
      v45[24] = a18;
      v45[25] = a19;
      v45[26] = a20;
      v45[27] = a21;
      v45[28] = a22;
      v45[29] = a23;
      v45[30] = a26;
      v45[31] = a25;
      _IMDPerformBlock((uint64_t)v45);
    }
    else
    {
      __syncXPCIMDChatRecordBulkUpdate_IPCAction(0, *(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a19,
        a20,
        a21,
        a22,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28);
    }
  }
  else
  {
    uint64_t v37 = IMLogHandleForCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6AAC0(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
}

void sub_1AFBD1538(void *a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(a1[4] + 16));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[13]) {
      CSDBRecordSetProperty();
    }
    if (a1[14]) {
      CSDBRecordSetProperty();
    }
    if (a1[15]) {
      CSDBRecordSetProperty();
    }
    if (a1[16]) {
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[19]) {
      CSDBRecordSetProperty();
    }
    if (a1[20]) {
      CSDBRecordSetProperty();
    }
    if (a1[21]) {
      CSDBRecordSetProperty();
    }
    if (a1[22]) {
      CSDBRecordSetProperty();
    }
    if (a1[23]) {
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[26]) {
      CSDBRecordSetProperty();
    }
    sub_1AFBD17E4((uint64_t)v3, 19, a1[27]);
    CSDBRecordSetProperty();
    if (a1[29]) {
      CSDBRecordSetProperty();
    }
    sub_1AFBD17E4((uint64_t)v3, 23, a1[30]);
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

void sub_1AFBD17E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CSDBRecordSetProperty();
    CFRelease(v4);
  }
}

void IMDChatRecordAnonymizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    long long v29 = xmmword_1E5F95C50;
    long long v30 = *(_OWORD *)off_1E5F95C60;
    uint64_t v31 = 1299;
    uint64_t v17 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"IMDIsRunningInDatabaseServerProcess()", "void IMDChatRecordAnonymizedUpdate(IMDChatRecordRef, CFDataRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef)", IMFileLocationTrimFileName(), 1299, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v18 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v18)
    {
      v18(v17);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v33 = v17;
        _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_1AFBD1A84;
    v28[3] = &unk_1E5F92A00;
    uint8_t v28[4] = a1;
    v28[5] = a2;
    v28[6] = a3;
    v28[7] = a6;
    v28[8] = a5;
    v28[9] = a4;
    v28[10] = a7;
    v28[11] = a8;
    v28[12] = a9;
    _IMDPerformBlock((uint64_t)v28);
  }
  else
  {
    uint64_t v20 = IMLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6AB38(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
}

void sub_1AFBD1A84(void *a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(a1[4] + 16));
  if (v2)
  {
    CFNumberRef v3 = (const void *)v2;
    if (a1[5]) {
      CSDBRecordSetProperty();
    }
    CFStringRef v4 = (const __CFString *)a1[6];
    if (v4 && CFStringGetLength(v4) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v5 = (const __CFString *)a1[7];
    if (v5 && CFStringGetLength(v5) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v6 = (const __CFString *)a1[8];
    if (v6 && CFStringGetLength(v6) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v7 = (const __CFString *)a1[9];
    if (v7 && CFStringGetLength(v7) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v8 = (const __CFString *)a1[10];
    if (v8 && CFStringGetLength(v8) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v9 = (const __CFString *)a1[11];
    if (v9 && CFStringGetLength(v9) >= 1) {
      CSDBRecordSetProperty();
    }
    CFStringRef v10 = (const __CFString *)a1[12];
    if (v10 && CFStringGetLength(v10) >= 1) {
      CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

BOOL IMDChatRecordIsFiltered()
{
  return CSDBRecordGetProperty() != 0;
}

_OWORD *_IMDCopyIMDChatRecordFromXPCObjectServer(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t int64 = xpc_dictionary_get_int64(a1, "recordIdentifier");
  if (int64 < 1) {
    return 0;
  }
  return sub_1AFBCE51C(0, int64, 0);
}

xpc_object_t _IMDCopyXPCObjectFromIMDChatRecordClient(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  CFIndex v3 = 0;
  CFStringRef v4 = &qword_1E5F95C80;
  do
  {
    CFStringRef v5 = (const char *)*(v4 - 1);
    uint64_t v6 = *v4;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3);
    CFNumberRef v8 = ValueAtIndex;
    switch(v6)
    {
      case 0:
        CFStringRef v9 = v2;
        CFStringRef v10 = v5;
        int64_t v11 = (int64_t)v8;
        goto LABEL_9;
      case 1:
        IMInsertNSStringsToXPCDictionary();
        break;
      case 2:
        IMInsertDatasToXPCDictionary();
        break;
      case 3:
        int64_t valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        int64_t v11 = valuePtr;
        CFStringRef v9 = v2;
        CFStringRef v10 = v5;
LABEL_9:
        xpc_dictionary_set_int64(v9, v10, v11);
        break;
      default:
        break;
    }
    v4 += 5;
    ++v3;
  }
  while (v3 != 27);
  int64_t v12 = *(void *)(a1 + 16);
  if (v12) {
    xpc_dictionary_set_int64(v2, "recordIdentifier", v12);
  }
  return v2;
}

void _IMDChatRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, char a3, char a4, char a5, int a6)
{
  if (a2)
  {
    if (a1)
    {
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = sub_1AFBD1EB4;
      v22[3] = &unk_1E5F960B8;
      uint8_t v22[4] = a2;
      v22[5] = a1;
      char v23 = a3;
      v22[6] = a1;
      char v24 = a5;
      char v25 = a4;
      if (a6) {
        _IMDPerformBlock((uint64_t)v22);
      }
      else {
        sub_1AFBD1EB4((uint64_t)v22);
      }
    }
    else
    {
      uint64_t v14 = IMLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6AC28(v14, v15, v16, v17, v18, v19, v20, v21);
      }
    }
  }
  else
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6ABB0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

void sub_1AFBD1EB4(uint64_t a1)
{
  uint64_t v2 = IMDChatRecordCopyChatRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFIndex v3 = (const void *)v2;
    uint64_t v4 = 0;
    CFStringRef v5 = &qword_1E5F95C80;
    do
    {
      uint64_t v6 = (const char *)*(v5 - 1);
      uint64_t v7 = *v5;
      CFNumberRef Property = (const __CFNumber *)CSDBRecordGetProperty();
      CFNumberRef v9 = Property;
      switch(v7)
      {
        case 0:
          uint64_t v10 = *(void **)(a1 + 32);
          uint64_t v11 = v6;
          int64_t v12 = (int64_t)v9;
          goto LABEL_11;
        case 1:
          CFNumberRef v31 = Property;
          uint64_t v32 = 0;
          IMInsertNSStringsToXPCDictionary();
          break;
        case 2:
          CFNumberRef v31 = Property;
          uint64_t v32 = 0;
          IMInsertDatasToXPCDictionary();
          break;
        case 3:
          valuePtr[0] = 0;
          if (Property)
          {
            CFNumberGetValue(Property, kCFNumberSInt64Type, valuePtr);
            int64_t v12 = valuePtr[0];
          }
          else
          {
            int64_t v12 = 0;
          }
          uint64_t v10 = *(void **)(a1 + 32);
          uint64_t v11 = v6;
LABEL_11:
          xpc_dictionary_set_int64(v10, v11, v12);
          break;
        default:
          break;
      }
      v5 += 5;
      v4 += 4;
    }
    while (v4 != 108);
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      if (v13)
      {
        uint64_t v34 = 0;
        uint64_t v35 = &v34;
        uint64_t v36 = 0x2020000000;
        uint64_t v37 = 0;
        uint64_t v14 = *(void *)(v13 + 16);
        valuePtr[0] = MEMORY[0x1E4F143A8];
        valuePtr[1] = 3221225472;
        valuePtr[2] = sub_1AFBD35D0;
        valuePtr[3] = &unk_1E5F900E0;
        valuePtr[4] = &v34;
        void valuePtr[5] = v14;
        _IMDPerformLockedStatementBlockWithQuery(@"SELECT handle_id FROM chat_handle_join WHERE chat_id = ?", (uint64_t)valuePtr);
        uint64_t v15 = (void *)v35[3];
        _Block_object_dispose(&v34, 8);
      }
      else
      {
        uint64_t v15 = 0;
      }
      xpc_object_t v16 = xpc_array_create(0, 0);
      if (v16)
      {
        uint64_t v17 = v16;
        int v18 = [v15 count];
        if (v18 >= 1)
        {
          uint64_t v19 = 0;
          uint64_t v20 = v18;
          do
          {
            uint64_t v21 = objc_msgSend(v15, "objectAtIndex:", v19, v31, v32);
            xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
            if (v22)
            {
              char v23 = v22;
              _IMDHandleRecordBulkCopyXPCDictionary(v21, (uint64_t)v22, 0);
              xpc_array_append_value(v17, v23);
              xpc_release(v23);
            }
            ++v19;
          }
          while (v20 != v19);
        }
        char v24 = *(void **)(a1 + 32);
        if (v24) {
          xpc_dictionary_set_value(v24, "handles_cache", v17);
        }
        xpc_release(v17);
      }
      if (v15) {
        CFRelease(v15);
      }
    }
    if (*(unsigned char *)(a1 + 57))
    {
      uint64_t Message = IMDChatRecordCopyLastMessage(*(void *)(a1 + 40));
      if (Message)
      {
        uint64_t v26 = (const void *)Message;
        xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
        if (v27)
        {
          int64_t v28 = v27;
          _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v26, (uint64_t)v27, 1, 1);
          long long v29 = *(void **)(a1 + 32);
          if (v29) {
            xpc_dictionary_set_value(v29, "last_message_cache", v28);
          }
          xpc_release(v28);
        }
        CFRelease(v26);
      }
    }
    if (*(unsigned char *)(a1 + 58)) {
      int64_t v30 = IMDMessageRecordCountAllUnreadMessagesForChatRowIDUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
    }
    else {
      int64_t v30 = -1;
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "unread_count_cache", v30);
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "recordIdentifier", *(void *)(*(void *)(a1 + 48) + 16));
    CFRelease(v3);
  }
}

void sub_1AFBD21E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBD2210(uint64_t a1, uint64_t a2, void *a3)
{
  CFStringRef v5 = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    uint64_t v7 = v6;
    [*(id *)(a1 + 32) addObject:v6];
    CFRelease(v7);
  }
  return 1;
}

uint64_t IMDMergeDuplicateChatsWithOperation(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  CFStringRef v5 = a2;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    *(_OWORD *)int v53 = xmmword_1E5F960D8;
    *(_OWORD *)&v53[16] = *(_OWORD *)off_1E5F960E8;
    uint64_t v54 = 1689;
    uint64_t v7 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"losingChatGUIDs", "BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation * _Nonnull, NSArray<NSString *> * _Nonnull, NSString * _Nonnull, NSString * _Nullable)", IMFileLocationTrimFileName(), 1689, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v8 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v8)
    {
      v8(v7);
      CFStringRef v5 = 0;
    }
    else
    {
      CFStringRef v5 = 0;
      if (IMOSLoggingEnabled())
      {
        CFNumberRef v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v52 = v7;
          _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }
      }
    }
  }
  if (!a1)
  {
    *(_OWORD *)int v53 = xmmword_1E5F96100;
    *(_OWORD *)&v53[16] = *(_OWORD *)off_1E5F96110;
    uint64_t v54 = 1690;
    uint64_t v10 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation * _Nonnull, NSArray<NSString *> * _Nonnull, NSString * _Nonnull, NSString * _Nullable)", IMFileLocationTrimFileName(), 1690, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v11 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
      CFStringRef v5 = a2;
    }
    else
    {
      CFStringRef v5 = a2;
      if (IMOSLoggingEnabled())
      {
        int64_t v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v52 = v10;
          _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }
      }
    }
  }
  if (!a3)
  {
    *(_OWORD *)int v53 = xmmword_1E5F96128;
    *(_OWORD *)&v53[16] = *(_OWORD *)off_1E5F96138;
    uint64_t v54 = 1691;
    uint64_t v18 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"winningChatGUID", "BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation * _Nonnull, NSArray<NSString *> * _Nonnull, NSString * _Nonnull, NSString * _Nullable)", IMFileLocationTrimFileName(), 1691, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v19 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v19)
    {
      v19(v18);
      return 0;
    }
    if (!IMOSLoggingEnabled()) {
      return 0;
    }
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)uint8_t buf = 138412290;
    uint64_t v52 = v18;
    xpc_object_t v16 = "ASSERTION FAILED: %@";
    uint64_t v17 = buf;
LABEL_25:
    _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, v16, v17, 0xCu);
    return 0;
  }
  uint64_t result = 0;
  if (a1 && v5)
  {
    IMDDropAllTriggersWithOperation(a1, 0);
    if (*(void *)(a1 + 168))
    {
      uint64_t result = IMOSLoggingEnabled();
      if (result)
      {
        uint64_t v14 = OSLogHandleForIMEventCategory();
        uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
        if (result)
        {
          uint64_t v15 = IMDSqlOperationErrorDescription(a1);
          *(_DWORD *)int v53 = 138412290;
          *(void *)&v53[4] = v15;
          xpc_object_t v16 = "failed dropping triggers: %@";
          uint64_t v17 = v53;
          goto LABEL_25;
        }
      }
      return result;
    }
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v20 = [a2 countByEnumeratingWithState:&v46 objects:v50 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v47;
      while (2)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v47 != v21) {
            objc_enumerationMutation(a2);
          }
          uint64_t v23 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          v45[0] = MEMORY[0x1E4F143A8];
          v45[1] = 3221225472;
          v45[2] = sub_1AFBD2B78;
          v45[3] = &unk_1E5F96158;
          v45[5] = v23;
          v45[6] = a1;
          void v45[4] = a3;
          _IMDSqlOperationRunQuery(a1, @"UPDATE chat_message_join SET chat_id = (SELECT ROWID FROM chat WHERE guid = ?) WHERE (chat_id = (SELECT ROWID FROM chat WHERE guid = ?) AND message_id NOT IN (SELECT message_id from chat_message_join WHERE chat_id =  (SELECT ROWID FROM chat WHERE guid = ?)));",
            (uint64_t)v45,
            0);
          if (*(void *)(a1 + 168))
          {
            if (IMOSLoggingEnabled())
            {
              char v24 = OSLogHandleForIMEventCategory();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
              {
                uint64_t v25 = IMDSqlOperationErrorDescription(a1);
                *(_DWORD *)int v53 = 138412546;
                *(void *)&v53[4] = v25;
                *(_WORD *)&v53[12] = 2112;
                *(void *)&v53[14] = v23;
                _os_log_impl(&dword_1AFB53000, v24, OS_LOG_TYPE_INFO, "failed updating chat_message_join table: %@ for unwanted chat: %@", v53, 0x16u);
              }
            }
            goto LABEL_39;
          }
        }
        uint64_t v20 = [a2 countByEnumeratingWithState:&v46 objects:v50 count:16];
        if (v20) {
          continue;
        }
        break;
      }
    }
LABEL_39:
    if (*(void *)(a1 + 168)) {
      goto LABEL_63;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v32 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        uint64_t v33 = [a2 count];
        uint64_t v34 = [a2 description];
        *(_DWORD *)int v53 = 134218242;
        *(void *)&v53[4] = v33;
        *(_WORD *)&v53[12] = 2112;
        *(void *)&v53[14] = v34;
        _os_log_impl(&dword_1AFB53000, v32, OS_LOG_TYPE_INFO, "Delete %lld rows from chat_handle_join: %@", v53, 0x16u);
      }
    }
    CFStringRef v35 = (const __CFString *)[NSString stringWithFormat:@"DELETE FROM chat_handle_join WHERE chat_id IN (SELECT ROWID FROM chat WHERE guid %@)", IMDGenerateInClauseForCount(objc_msgSend(a2, "count"))];
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3221225472;
    v44[2] = sub_1AFBD2BD0;
    v44[3] = &unk_1E5F8FF78;
    void v44[4] = a2;
    v44[5] = a1;
    _IMDSqlOperationRunQuery(a1, v35, (uint64_t)v44, 0);
    if (*(void *)(a1 + 168))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v36 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          uint64_t v37 = IMDSqlOperationErrorDescription(a1);
          uint64_t v38 = [a2 description];
          *(_DWORD *)int v53 = 138412546;
          *(void *)&v53[4] = v37;
          *(_WORD *)&v53[12] = 2112;
          *(void *)&v53[14] = v38;
          _os_log_impl(&dword_1AFB53000, v36, OS_LOG_TYPE_INFO, "failed deleting chat_handle_join rows failed (%@) - for unwanted chats: %@", v53, 0x16u);
        }
      }
      if (*(void *)(a1 + 168)) {
        goto LABEL_63;
      }
    }
    if ([a4 length]) {
      _IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(NSString, "stringWithFormat:", @"UPDATE chat SET display_name = '%@' WHERE guid = '%@';",
    }
                       a4,
                       a3),
        0,
        0);
    if (*(void *)(a1 + 168))
    {
LABEL_63:
      if (!IMOSLoggingEnabled()) {
        return *(void *)(a1 + 168) == 0;
      }
      uint64_t v26 = OSLogHandleForIMEventCategory();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        return *(void *)(a1 + 168) == 0;
      }
      uint64_t v27 = [a2 count];
      uint64_t v28 = [a2 description];
      *(_DWORD *)int v53 = 134218498;
      *(void *)&v53[4] = v27;
      *(_WORD *)&v53[12] = 2112;
      *(void *)&v53[14] = v28;
      *(_WORD *)&v53[22] = 2112;
      *(void *)&v53[24] = a3;
      long long v29 = "Finished merging %ld (%@) unwanted chats into %@ ";
      int64_t v30 = v26;
      uint32_t v31 = 32;
    }
    else
    {
      IMDCreateTriggersWithOperation(a1, 0);
      if (!*(void *)(a1 + 168)) {
        return *(void *)(a1 + 168) == 0;
      }
      if (!IMOSLoggingEnabled()) {
        return *(void *)(a1 + 168) == 0;
      }
      uint64_t v39 = OSLogHandleForIMEventCategory();
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_INFO)) {
        return *(void *)(a1 + 168) == 0;
      }
      uint64_t v40 = IMDSqlOperationErrorDescription(a1);
      uint64_t v41 = [a2 description];
      *(_DWORD *)int v53 = 138412546;
      *(void *)&v53[4] = v40;
      *(_WORD *)&v53[12] = 2112;
      *(void *)&v53[14] = v41;
      long long v29 = "failed recreating the triggers: (%@) - for unwanted chats: %@";
      int64_t v30 = v39;
      uint32_t v31 = 22;
    }
    _os_log_impl(&dword_1AFB53000, v30, OS_LOG_TYPE_INFO, v29, v53, v31);
    return *(void *)(a1 + 168) == 0;
  }
  return result;
}

void sub_1AFBD2AC4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBD280CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBD2B78(uint64_t *a1)
{
  IMDSqlStatementBindTextFromCFString(a1[6] + 32, a1[4]);
  IMDSqlStatementBindTextFromCFString(a1[6] + 32, a1[5]);
  uint64_t v2 = a1[6] + 32;
  uint64_t v3 = a1[4];
  IMDSqlStatementBindTextFromCFString(v2, v3);
}

uint64_t sub_1AFBD2BD0(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 40) + 32, *(void *)(*((void *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t IMDChatRecordRepairDuplicateChats(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  xpc_object_t v22 = &v21;
  uint64_t v23 = 0x2020000000;
  char v24 = 1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_1AFBD30A4;
    v20[3] = &unk_1E5F96180;
    v20[4] = a1;
    v20[5] = a2;
    void v20[6] = a3;
    void v20[7] = &v21;
    v20[8] = a4;
    IMDRunSqlOperation((uint64_t)v20);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      long long v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [a1 count];
        uint64_t v10 = [a1 description];
        *(_DWORD *)uint8_t buf = 134218498;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v10;
        *(_WORD *)&unsigned char buf[22] = 2112;
        uint64_t v28 = (void (*)(uint64_t, uint64_t))a2;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Being to merge %lld (%@) duplicate chats into winning chat %@", buf, 0x20u);
      }
    }
    *(void *)uint8_t buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3052000000;
    uint64_t v28 = sub_1AFBD3324;
    long long v29 = sub_1AFBD3334;
    uint64_t v30 = 0;
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    double v12 = v11;
    v19[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v19[1] = (void (*)(void))3221225472;
    v19[2] = (void (*)(void))sub_1AFBD3340;
    v19[3] = (void (*)(void))&unk_1E5F900B8;
    v19[4] = (void (*)(void))&v21;
    v19[5] = (void (*)(void))buf;
    __syncXPCIMDRepairDuplicateChats_IPCAction(v19, (uint64_t)a1, a2, a3);
    if (*((unsigned char *)v22 + 24))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v13 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
          *(_DWORD *)uint64_t v25 = 134217984;
          double v26 = v14 - v12;
          _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Finished merging duplicated chats in %f seconds", v25, 0xCu);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v15 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          double v16 = COERCE_DOUBLE([*(id *)(*(void *)&buf[8] + 40) localizedDescription]);
          *(_DWORD *)uint64_t v25 = 138412290;
          double v26 = v16;
          _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "IMDMergeDuplicateChatsWithOperation in agent failed with error: %@", v25, 0xCu);
        }
      }
      if (a4) {
        *a4 = *(id *)(*(void *)&buf[8] + 40);
      }
    }
    _Block_object_dispose(buf, 8);
  }
  uint64_t v17 = *((unsigned __int8 *)v22 + 24);
  _Block_object_dispose(&v21, 8);
  return v17;
}

void sub_1AFBD3014(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    if (!v25) {
      JUMPOUT(0x1AFBD2FA8);
    }
    JUMPOUT(0x1AFBD2F94);
  }
  _Block_object_dispose((const void *)(v26 - 144), 8);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1AFBD30A4(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 32) count];
      *(double *)&uint64_t v6 = COERCE_DOUBLE([*(id *)(a1 + 32) description]);
      uint64_t v7 = *(void *)(a1 + 40);
      int v15 = 134218498;
      uint64_t v16 = v5;
      __int16 v17 = 2112;
      double v18 = *(double *)&v6;
      __int16 v19 = 2112;
      uint64_t v20 = v7;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Being to merge %lld (%@) duplicate chats into winning chat %@", (uint8_t *)&v15, 0x20u);
    }
  }
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v9 = v8;
  IMDSqlOperationBeginTransaction((void *)a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = IMDMergeDuplicateChatsWithOperation(a2, *(void **)(a1 + 32), *(void *)(a1 + 40), *(void **)(a1 + 48));
  if (*(void *)(a2 + 168))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = IMDSqlOperationErrorDescription(a2);
        int v15 = 138412290;
        uint64_t v16 = v11;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "IMDMergeDuplicateChatsWithOperation failed in db with error: %@", (uint8_t *)&v15, 0xCu);
      }
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = *(id *)(a2 + 168);
    }
  }
  IMDSqlOperationCommitOrRevertTransaction((void *)a2);
  if (IMOSLoggingEnabled())
  {
    double v12 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = [*(id *)(a1 + 32) count];
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      int v15 = 134218240;
      uint64_t v16 = v13;
      __int16 v17 = 2048;
      double v18 = v14 - v9;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Finished repairing %lld duplicate chats in %f seconds", (uint8_t *)&v15, 0x16u);
    }
  }
}

void sub_1AFBD3324(uint64_t a1, uint64_t a2)
{
}

void sub_1AFBD3334(uint64_t a1)
{
}

uint64_t sub_1AFBD3340(uint64_t result, xpc_object_t xdict)
{
  if (xdict)
  {
    uint64_t v3 = result;
    uint64_t result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
    *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result;
    if (!*(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24))
    {
      uint64_t result = (uint64_t)xpc_dictionary_get_string(xdict, "error_domain");
      if (result)
      {
        uint64_t v4 = [NSString stringWithUTF8String:result];
        uuint64_t int64 = xpc_dictionary_get_uint64(xdict, "error_code");
        string = xpc_dictionary_get_string(xdict, "error_localized_description");
        if (string)
        {
          uint64_t v7 = (void *)MEMORY[0x1E4F1C9E8];
          uint64_t v8 = [NSString stringWithUTF8String:string];
          uint64_t v9 = [v7 dictionaryWithObject:v8 forKey:*MEMORY[0x1E4F28568]];
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t result = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:v4 code:uint64 userInfo:v9];
        *(void *)(*(void *)(*(void *)(v3 + 40) + 8) + 40) = result;
      }
    }
  }
  return result;
}

void *sub_1AFBD3458(void *result)
{
  result[4] = 0;
  result[5] = -1;
  result[2] = -1;
  result[3] = 0;
  result[6] = 0;
  result[7] = -1;
  return result;
}

void sub_1AFBD346C(uint64_t a1)
{
  *(void *)(a1 + 16) = -1;
  if (*(void *)(a1 + 24))
  {
    CFIndex v2 = 0;
    uint64_t v3 = &qword_1E5F95C88;
    do
    {
      uint64_t v4 = *v3;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
      {
        uint64_t v5 = *(void (**)(void))(v4 + 8);
        if (v5) {
          v5();
        }
      }
      ++v2;
      v3 += 5;
    }
    while (v2 != 27);
    uint64_t v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 24) = 0;
    }
  }
  uint64_t v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 32) = 0;
  }
}

BOOL sub_1AFBD3510(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_1AFBD3524(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFStringRef sub_1AFBD352C(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<IMDChatRecord %p [%p]>[%lld]{}", a1, v3, a1[2]);
}

uint64_t sub_1AFBD3584(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)_IMDCopyIMDHandleRecordFromXPCObjectClient(a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 32) + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1AFBD35D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt();
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      }
      int v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      uint64_t v10 = (const void *)IMDHandleRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

uint64_t _IMDSMSDatabaseMigrateData_24_25()
{
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (v0)
  {
    uint64_t v1 = v0;
    CFAllocatorRef v2 = *(sqlite3_stmt **)(v0 + 8);
    if (v2)
    {
      if (sqlite3_step(v2) == 100)
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v4 = *MEMORY[0x1E4F6C110];
        do
        {
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
          uint64_t v5 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v1 + 8), 1);
          unsigned int v6 = sqlite3_column_bytes(*(sqlite3_stmt **)(v1 + 8), 1);
          if (v5) {
            BOOL v7 = v6 == 0;
          }
          else {
            BOOL v7 = 1;
          }
          if (v7) {
            CFDataRef v8 = 0;
          }
          else {
            CFDataRef v8 = CFDataCreate(v3, v5, v6);
          }
          uint64_t v9 = objc_msgSend((id)objc_msgSend((id)JWDecodeCodableObjectWithStandardAllowlist(), "string"), "stringByRemovingCharactersFromSet:", objc_msgSend(MEMORY[0x1E4F28B88], "characterSetWithCharactersInString:", v4));
          uint64_t v10 = CSDBSqliteConnectionStatementForSQL();
          if (v10 && *(void *)(v10 + 8))
          {
            if (v9) {
              CSDBSqliteBindTextFromCFString();
            }
            else {
              CSDBSqliteBindNull();
            }
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100);
      }
    }
  }
  return 1;
}

void *IMDCreateCFErrorWithQueryErrorCode(int a1, sqlite3 *a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v5 = sqlite3_errmsg(a2);
    if (v5) {
      a3 = [NSString stringWithFormat:@"%@, error: %@", a3, objc_msgSend(NSString, "stringWithUTF8String:", v5)];
    }
  }
  id v6 = objc_alloc(MEMORY[0x1E4F28C58]);
  uint64_t v10 = *MEMORY[0x1E4F28568];
  v11[0] = a3;
  BOOL v7 = objc_msgSend(v6, "initWithDomain:code:userInfo:", @"SQL_ERROR", a1, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1));
  CFDataRef v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6ACA0(v7, v8);
  }
  return v7;
}

const void *sub_1AFBD3948()
{
  CFDictionaryRef v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  Value = CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E4F1CD10]);
  CFAllocatorRef v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

uint64_t sub_1AFBD39A4()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v0 = (uint64_t (*)(void))MEMORY[0x1B3E89B20]("DMIsMigrationNeeded", @"DataMigration");
  if (byte_1EB5AAAF0)
  {
    byte_1EB5AAAF0 = v0();
    if (IMOSLoggingEnabled())
    {
      CFDictionaryRef v1 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        if (byte_1EB5AAAF0) {
          CFAllocatorRef v2 = @"YES";
        }
        else {
          CFAllocatorRef v2 = @"NO";
        }
        int v11 = 138412290;
        double v12 = v2;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "system migration finished: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    if (byte_1EB5AAAF0)
    {
      if (!IMOSLoggingEnabled()) {
        return 1;
      }
      CFAllocatorRef v3 = OSLogHandleForIMEventCategory();
      uint64_t v4 = 1;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "system needs to finish migration still, not allowing indexing", (uint8_t *)&v11, 2u);
      }
      return v4;
    }
  }
  CFStringRef v5 = (const __CFString *)sub_1AFBD3948();
  if (v5)
  {
    CFPreferencesSynchronize(@"com.apple.imdsmsrecordstore", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    CFStringRef v6 = (const __CFString *)CFPreferencesCopyValue(@"kIMDPersistenceLastBuild", @"com.apple.imdsmsrecordstore", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    if (v6 && CFStringCompare(v5, v6, 1uLL) == kCFCompareEqualTo)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v11 = 138412546;
          double v12 = (__CFString *)v6;
          __int16 v13 = 2112;
          CFStringRef v14 = v5;
          _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Migration not needed, allowing indexing, lastBuild: %@ currentBuild: %@", (uint8_t *)&v11, 0x16u);
        }
      }
      uint64_t v4 = 0;
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        BOOL v7 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v11 = 138412546;
          double v12 = (__CFString *)v6;
          __int16 v13 = 2112;
          CFStringRef v14 = v5;
          _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Needs migration, not allowing indexing, lastBuild: %@, currentBuild: %@", (uint8_t *)&v11, 0x16u);
        }
      }
      uint64_t v4 = 1;
      if (!v6) {
        goto LABEL_29;
      }
    }
    CFRelease(v6);
LABEL_29:
    CFRelease(v5);
    return v4;
  }
  if (IMOSLoggingEnabled())
  {
    CFDataRef v8 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "No current build version, allowing indexing", (uint8_t *)&v11, 2u);
    }
  }
  return 0;
}

uint64_t IMDSystemMigrationOccurred()
{
  if (byte_1EB5ABB28) {
    return 1;
  }
  uint64_t result = sub_1AFBD39A4() ^ 1;
  byte_1EB5ABB28 = result;
  return result;
}

void IMDSystemMigrationSetHasMigrated(int a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  byte_1EB5ABB28 = a1;
  if (a1)
  {
    CFDictionaryRef v1 = sub_1AFBD3948();
    if (IMOSLoggingEnabled())
    {
      CFAllocatorRef v2 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        int v4 = 138412290;
        CFStringRef v5 = v1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "We have migrated, lastBuild: %@", (uint8_t *)&v4, 0xCu);
      }
    }
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFPreferencesSetValue(@"kIMDPersistenceLastBuild", v1, @"com.apple.imdsmsrecordstore", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    CFPreferencesSynchronize(@"com.apple.imdsmsrecordstore", @"mobile", v3);
    if (v1) {
      CFRelease(v1);
    }
  }
}

BOOL IMDSaveWallpaperForCNContact(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v28 = 0;
  long long v29 = &v28;
  uint64_t v30 = 0x2020000000;
  char v31 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      CFStringRef v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v33 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "handle to save wallpaper for: %@", buf, 0xCu);
      }
    }
    uint64_t v6 = [MEMORY[0x1E4F6E6D8] sharedInstance];
    BOOL v7 = [v6 fetchCNContactForHandleWithID:v3];

    CFDataRef v8 = [MEMORY[0x1E4F6E6D8] sharedInstance];
    uint64_t v9 = [MEMORY[0x1E4F6E6D8] keysForNicknameHandling];
    id v10 = [v8 completedContact:v7 withKeys:v9];

    if (v10)
    {
      int v11 = [v10 mutableCopy];
      if (!v4
        || ([MEMORY[0x1E4F1CB10] fileURLWithPath:v4],
            double v12 = objc_claimAutoreleasedReturnValue(),
            [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v12],
            __int16 v13 = objc_claimAutoreleasedReturnValue(),
            v12,
            !v13))
      {
        if (IMOSLoggingEnabled())
        {
          CFStringRef v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            id v33 = v3;
            _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "updated contact wallpaper with nil image from handle: %@", buf, 0xCu);
          }
        }
        __int16 v13 = 0;
      }
      uint64_t v15 = [MEMORY[0x1E4F6E6D8] sharedInstance];
      uint64_t v16 = [v15 getContactStore];

      id v17 = objc_alloc_init(MEMORY[0x1E4F1BAA8]);
      [v17 updateContact:v11];
      id v27 = 0;
      char v18 = [v16 executeSaveRequest:v17 error:&v27];
      id v19 = v27;
      *((unsigned char *)v29 + 24) = v18;
      if (v19) {
        char v20 = 0;
      }
      else {
        char v20 = v18;
      }
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = IMLogHandleForCategory();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6B048((uint64_t)v19, v21);
        }
      }
    }
    else
    {
      int v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6AFD0((uint64_t)v3, v11);
      }
    }
  }
  else
  {
    v24[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v24[1] = (void (*)(void))3221225472;
    v24[2] = (void (*)(void))sub_1AFBD5070;
    v24[3] = (void (*)(void))&unk_1E5F8FBC0;
    uint64_t v26 = &v28;
    id v25 = v3;
    __syncXPCIMDSaveWallpaperForCNContact_IPCAction(v24, (uint64_t)v25, (uint64_t)v4);
    id v10 = v25;
  }

  BOOL v22 = *((unsigned char *)v29 + 24) != 0;
  _Block_object_dispose(&v28, 8);

  return v22;
}

void sub_1AFBD5070(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_BOOL(v3, "BOOL_result");
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "successfully saved wallpaper for: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

id sub_1AFBD517C()
{
  if (qword_1E9AF7FC0 != -1) {
    dispatch_once(&qword_1E9AF7FC0, &unk_1F084CE80);
  }
  CFDictionaryRef v0 = (void *)qword_1E9AF7FD0;
  return v0;
}

void sub_1AFBD51D0()
{
  CFDictionaryRef v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_DEFAULT, 0);

  dispatch_queue_t v1 = dispatch_queue_create("IMDCoreSpotlightClientQueue", attr);
  CFAllocatorRef v2 = (void *)qword_1E9AF7FD0;
  qword_1E9AF7FD0 = (uint64_t)v1;

  dispatch_queue_set_specific((dispatch_queue_t)qword_1E9AF7FD0, "IMDCoreSpotlightClientRequestQueue", (void *)1, 0);
}

void sub_1AFBD526C()
{
  if (!dispatch_get_specific("IMDCoreSpotlightClientRequestQueue"))
  {
    if (IMOSLoggingEnabled())
    {
      CFDictionaryRef v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "**************************************************************************", buf, 2u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      dispatch_queue_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "********* Spotlight work done on wrong queue, please file a radar ********", v6, 2u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      CFAllocatorRef v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "**************************************************************************", v5, 2u);
      }
    }
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1AFC6B0C0();
    }

    id v4 = [MEMORY[0x1E4F6E890] sharedInstance];
    [v4 forceAutoBugCaptureWithSubType:@"Threading Issue" errorPayload:0 type:@"Spotlight" context:@"Spotlight work unexpectedly done off the Spotlight queue"];
  }
}

void sub_1AFBD5444(void *a1)
{
  id v1 = a1;
  CFAllocatorRef v2 = sub_1AFBD517C();
  dispatch_async(v2, v1);
}

void sub_1AFBD549C(void *a1)
{
  id v1 = a1;
  CFAllocatorRef v2 = sub_1AFBE3CA4();
  dispatch_async(v2, v1);
}

void IMDCoreSpotlightIndexSearchableItemsAsync(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (IMOSLoggingEnabled())
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 134218242;
      uint64_t v17 = [v7 count];
      __int16 v18 = 2112;
      id v19 = v9;
      _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Indexing %lu number of items with Index %@", buf, 0x16u);
    }
  }
  if ((sub_1AFBD56A0() & 1) == 0)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1AFBD5748;
    v11[3] = &unk_1E5F96248;
    id v12 = v9;
    id v13 = v7;
    id v14 = v8;
    uint64_t v15 = a3;
    sub_1AFBD5444(v11);
  }
}

uint64_t sub_1AFBD56A0()
{
  int v0 = [MEMORY[0x1E4F6E730] supportsSpotlight];
  if ((v0 & 1) == 0 && IMOSLoggingEnabled())
  {
    id v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Not donating to spotlight since it is not enabled", v3, 2u);
    }
  }
  return v0 ^ 1u;
}

BOOL sub_1AFBD5748(uint64_t a1)
{
  return sub_1AFBD57A4(*(void **)(a1 + 32), 0, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 56), 10000000000);
}

void sub_1AFBD5784(void *a1)
{
}

void sub_1AFBD5790(_Unwind_Exception *a1)
{
}

BOOL sub_1AFBD57A4(void *a1, void *a2, void *a3, void *a4, uint64_t a5, int64_t a6)
{
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id v14 = a1;
  dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_1AFBE3D7C;
  v20[3] = &unk_1E5F8E798;
  dispatch_semaphore_t v21 = v15;
  uint64_t v16 = v15;
  sub_1AFBE0070(v14, v13, v12, v11, a5, v20);

  dispatch_time_t v17 = dispatch_time(0, a6);
  BOOL v18 = dispatch_semaphore_wait(v16, v17) != 0;

  return v18;
}

id IMDDeriveObjectsForMessagesWithLastRowIDAndBatchSizeUsingBlock(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = a5;
  id v9 = [MEMORY[0x1E4F1CA48] array];
  if (!v7) {
    id v7 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
  }
  uint64_t v10 = [MEMORY[0x1E4F6E700] messageRecordBatchSize];
  id v11 = [[IMDMessageRecordBatchFetcher alloc] initWithAssociatedChatGUID:0 sortAscending:0];
  [(IMDRecordBatchFetcher *)v11 setLastRowID:*a1];
  [(IMDMessageRecordBatchFetcher *)v11 setParentedOnly:1];
  uint64_t v46 = 0;
  long long v47 = &v46;
  uint64_t v48 = 0x3032000000;
  long long v49 = sub_1AFBD5D3C;
  uint64_t v50 = sub_1AFBD5D4C;
  id v51 = 0;
  id v51 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v10];
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x2020000000;
  uint64_t v45 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1AFBD5D54;
  aBlock[3] = &unk_1E5F962C0;
  uint64_t v38 = &v46;
  uint64_t v39 = a3;
  uint64_t v37 = &v42;
  id v29 = v7;
  id v35 = v29;
  uint64_t v23 = v11;
  uint64_t v36 = v23;
  uint64_t v40 = v10;
  uint64_t v41 = a1;
  uint64_t v26 = (uint64_t (**)(void))_Block_copy(aBlock);
  do
  {
    context = (void *)MEMORY[0x1B3E8A120]();
    int v27 = v26[2]();
    [v29 startTimingForKey:@"indexCreation"];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v12 = (id)v47[5];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v30 objects:v58 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v31 != v14) {
            objc_enumerationMutation(v12);
          }
          uint64_t v16 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          dispatch_time_t v17 = objc_msgSend(v16, "objectAtIndexedSubscript:", 0, v23);
          BOOL v18 = [v16 objectAtIndexedSubscript:1];
          id v19 = v8[2](v8, v17, v18);

          if (v19) {
            [v9 addObjectsFromArray:v19];
          }
        }
        uint64_t v13 = [v12 countByEnumeratingWithState:&v30 objects:v58 count:16];
      }
      while (v13);
    }

    [v29 stopTimingForKey:@"indexCreation"];
  }
  while (v27);
  *a2 = v43[3];
  if (IMOSLoggingEnabled())
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = v43[3];
      *(_DWORD *)uint8_t buf = 134218498;
      uint64_t v53 = a3;
      __int16 v54 = 2112;
      id v55 = v29;
      __int16 v56 = 2048;
      uint64_t v57 = v21;
      _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Finished index creation with batch size %lu : %@ - processed %lu messages", buf, 0x20u);
    }
  }
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);

  return v9;
}

uint64_t sub_1AFBD5D3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBD5D4C(uint64_t a1)
{
}

BOOL sub_1AFBD5D54(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) >= *(void *)(a1 + 64))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) removeAllObjects];
    return 0;
  }
  else
  {
    uint64_t v14 = 0;
    dispatch_semaphore_t v15 = &v14;
    uint64_t v16 = 0x3032000000;
    dispatch_time_t v17 = sub_1AFBD5D3C;
    BOOL v18 = sub_1AFBD5D4C;
    id v19 = 0;
    [*(id *)(a1 + 32) startTimingForKey:@"sqlQuery"];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_1AFBD5F98;
    v9[3] = &unk_1E5F96270;
    id v11 = &v14;
    id v2 = *(id *)(a1 + 40);
    int8x16_t v13 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    uint64_t v3 = *(void *)(a1 + 48);
    id v10 = v2;
    uint64_t v12 = v3;
    IMDPersistencePerformBlock(v9, 1);
    id v4 = [(id)v15[5] lastObject];
    **(void **)(a1 + 80) = [v4 rowID];

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += [(id)v15[5] count];
    [*(id *)(a1 + 32) stopTimingForKey:@"sqlQuery"];
    [*(id *)(a1 + 32) startTimingForKey:@"dictionaryConversion"];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) removeAllObjects];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1AFBD6000;
    v8[3] = &unk_1E5F96298;
    uint64_t v5 = *(void *)(a1 + 56);
    void v8[4] = &v14;
    void v8[5] = v5;
    IMDPersistencePerformBlock(v8, 1);
    [*(id *)(a1 + 32) stopTimingForKey:@"dictionaryConversion"];
    BOOL v6 = [(id)v15[5] count] != 0;

    _Block_object_dispose(&v14, 8);
  }
  return v6;
}

void sub_1AFBD5F80(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBD5F98(void *a1)
{
  id v2 = (void *)a1[4];
  if (a1[7] >= a1[8] - *(void *)(*(void *)(a1[6] + 8) + 24)) {
    uint64_t v3 = a1[8] - *(void *)(*(void *)(a1[6] + 8) + 24);
  }
  else {
    uint64_t v3 = a1[7];
  }
  uint64_t v4 = [v2 nextBatchWithSize:v3];
  uint64_t v5 = *(void *)(a1[5] + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1AFBD6000(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        id v8 = objc_msgSend(v7, "chatRecord", (void)v13);
        if (v8)
        {
          id v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v10 = IMCopyIndexableItemDictionaryForRecord(v7);
          v17[0] = v10;
          id v11 = IMCopyIndexableChatDictionaryForRecord(v8, 0);
          v17[1] = v11;
          uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];
          [v9 addObject:v12];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v18 count:16];
    }
    while (v4);
  }
}

void IMDCoreSpotlightAddMessageGUID(void *a1, int64_t a2)
{
  uint64_t v3 = a1;
  if (v3 && (sub_1AFBD56A0() & 1) == 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v4 = (__CFString *)IMDMessageRecordCopyMessageForGUID(v3);
      uint64_t v5 = [(__CFString *)v4 chatRecord];
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      void v8[2] = sub_1AFBD6280;
      v8[3] = &unk_1E5F962E8;
      id v9 = v5;
      id v10 = v4;
      int64_t v11 = a2;
      BOOL v6 = v4;
      id v7 = v5;
      sub_1AFBD5444(v8);
    }
    else
    {
      __syncXPCIMDCoreSpotlightAddMessageGUID_IPCAction(0, (uint64_t)v3, a2);
    }
  }
}

void sub_1AFBD6280(uint64_t a1)
{
}

void IMDChatAddMessageToSpotlight(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  if ((sub_1AFBD56A0() & 1) == 0)
  {
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x3032000000;
    uint64_t v38 = sub_1AFBD5D3C;
    uint64_t v39 = sub_1AFBD5D4C;
    id v40 = 0;
    uint64_t v29 = 0;
    long long v30 = &v29;
    uint64_t v31 = 0x3032000000;
    long long v32 = sub_1AFBD5D3C;
    long long v33 = sub_1AFBD5D4C;
    id v34 = 0;
    uint64_t v21 = MEMORY[0x1E4F143A8];
    uint64_t v22 = 3221225472;
    uint64_t v23 = sub_1AFBD6E2C;
    char v24 = &unk_1E5F96358;
    int v27 = &v35;
    id v7 = v6;
    id v25 = v7;
    id v8 = v5;
    id v26 = v8;
    uint64_t v28 = &v29;
    IMDPersistencePerformBlock(&v21, 1);
    long long v13 = (void *)MEMORY[0x1B3E8A120](v9, v10, v11, v12);
    id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v15 = (void *)v36[5];
    long long v16 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a3 == 1000, v21, v22, v23, v24);
    [v15 setValue:v16 forKey:@"isIncomingMessage"];

    dispatch_time_t v17 = +[IMDCoreSpotlightManager sharedInstance];
    BOOL v18 = (void *)[v17 newSearchableItemsForMessageItemDictionary:v36[5] chatDictionary:v30[5] reindexing:0 rejectedItems:v14];

    if ([v18 count])
    {
      int v19 = [MEMORY[0x1E4F6E790] messageSummarizationEnabled] ^ 1;
      if (a3 != 1000) {
        LOBYTE(v19) = 1;
      }
      if (v19) {
        IMCoreSpotlightIndex();
      }
      else {
      uint64_t v20 = IMCoreSpotlightCriticalIndex();
      }
      IMDCoreSpotlightIndexSearchableItemsAsync(v18, v14, a3, v20);
    }
    sub_1AFBD6724(v8, v7);

    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&v35, 8);
  }
}

void sub_1AFBD6514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void IMDCoreSpotlightAddMessageGUIDs(void *a1, int64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ([v3 count] && (sub_1AFBD56A0() & 1) == 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v13 = v3;
      id v4 = v3;
      uint64_t v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v19;
        do
        {
          uint64_t v8 = 0;
          do
          {
            if (*(void *)v19 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = (__CFString *)IMDMessageRecordCopyMessageForGUID(*(const __CFString **)(*((void *)&v18 + 1) + 8 * v8));
            uint64_t v10 = [(__CFString *)v9 chatRecord];
            v14[0] = MEMORY[0x1E4F143A8];
            v14[1] = 3221225472;
            void v14[2] = sub_1AFBD6714;
            v14[3] = &unk_1E5F962E8;
            id v15 = v10;
            uint64_t v16 = v9;
            int64_t v17 = a2;
            uint64_t v11 = v9;
            id v12 = v10;
            sub_1AFBD5444(v14);

            ++v8;
          }
          while (v6 != v8);
          uint64_t v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v6);
      }

      id v3 = v13;
    }
    else
    {
      __syncXPCIMDCoreSpotlightAddMessageGUIDs_IPCAction(0, (uint64_t)v3, a2);
    }
  }
}

void sub_1AFBD6714(uint64_t a1)
{
}

void sub_1AFBD6724(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v16 = 0;
  uint64_t v17 = (uint64_t)&v16;
  uint64_t v18 = 0x2050000000;
  uint64_t v5 = (void *)qword_1EB5ABAB0;
  long long v19 = (uint64_t (*)(uint64_t, uint64_t))qword_1EB5ABAB0;
  if (!qword_1EB5ABAB0)
  {
    uint64_t v22 = MEMORY[0x1E4F143A8];
    uint64_t v23 = 3221225472;
    uint64_t v24 = (uint64_t)sub_1AFBE3D84;
    id v25 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5F8EB38;
    id v26 = (void (*)(uint64_t))&v16;
    sub_1AFBE3D84((uint64_t)&v22);
    uint64_t v5 = *(void **)(v17 + 24);
  }
  id v6 = v5;
  _Block_object_dispose(&v16, 8);
  uint64_t v7 = [v6 sharedManager];
  uint64_t v22 = 0;
  uint64_t v23 = (uint64_t)&v22;
  uint64_t v24 = 0x3032000000;
  id v25 = sub_1AFBD5D3C;
  id v26 = sub_1AFBD5D4C;
  id v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2050000000;
  uint64_t v8 = (void *)qword_1EB5ABAB8;
  uint64_t v31 = qword_1EB5ABAB8;
  if (!qword_1EB5ABAB8)
  {
    uint64_t v16 = MEMORY[0x1E4F143A8];
    uint64_t v17 = 3221225472;
    uint64_t v18 = (uint64_t)sub_1AFBE3F44;
    long long v19 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5F8EB38;
    long long v20 = (void (*)(uint64_t))&v28;
    sub_1AFBE3F44((uint64_t)&v16);
    uint64_t v8 = (void *)v29[3];
  }
  uint64_t v9 = v8;
  _Block_object_dispose(&v28, 8);
  id v27 = objc_alloc_init(v9);
  uint64_t v16 = 0;
  uint64_t v17 = (uint64_t)&v16;
  uint64_t v18 = 0x3032000000;
  long long v19 = sub_1AFBD5D3C;
  long long v20 = sub_1AFBD5D4C;
  id v21 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_1AFBD6A10;
  v12[3] = &unk_1E5F96310;
  id v10 = v4;
  id v13 = v10;
  uint64_t v14 = &v22;
  id v15 = &v16;
  IMDPersistencePerformBlock(v12, 1);
  uint64_t v11 = *(void *)(v17 + 40);
  if (v11) {
    [v7 suggestionsForRequest:v11 withCompletion:&unk_1F084C0E0];
  }

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);
}

void sub_1AFBD69D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBD6A10(uint64_t a1)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) text];

  if (v2)
  {
    id v3 = (void *)(a1 + 32);
    id v4 = [*(id *)(a1 + 32) text];
    uint64_t v5 = (void *)[v4 copy];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setTitle:v5];

    BOOL v6 = [*(id *)(a1 + 32) associatedMessageType] >= 2000
      && [*(id *)(a1 + 32) associatedMessageType] < 3000;
    BOOL v8 = [*(id *)(a1 + 32) associatedMessageType] >= 3000
      && [*(id *)(a1 + 32) associatedMessageType] < 4000;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setTapBack:v6 | v8];
    uint64_t v9 = [*(id *)(a1 + 32) dateRead];
    if (v9)
    {
      uint64_t v5 = [*(id *)(a1 + 32) dateRead];
      id v3 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:0.0];
      uint64_t v10 = [v5 isEqual:v3] ^ 1;
    }
    else
    {
      uint64_t v10 = 0;
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setRead:v10];
    if (v9)
    {
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setEmote:0];
    char v11 = [*(id *)(a1 + 32) isFromMe];
    if (v11)
    {
      id v12 = 0;
    }
    else
    {
      uint64_t v9 = [*(id *)(a1 + 32) handleRecord];
      id v3 = [v9 canonicalizedURIString];
      id v12 = (void *)[v3 copy];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setSenderIdentifier:v12];
    if ((v11 & 1) == 0)
    {
    }
    id v13 = [*(id *)(a1 + 32) text];
    uint64_t v14 = (void *)[v13 copy];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setSummary:v14];

    id v15 = [*(id *)(a1 + 32) date];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setDateSent:v15];

    v33[0] = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
    uint64_t v29 = 0;
    uint64_t v30 = &v29;
    uint64_t v31 = 0x2050000000;
    uint64_t v16 = (void *)qword_1EB5ABAC0;
    uint64_t v32 = qword_1EB5ABAC0;
    if (!qword_1EB5ABAC0)
    {
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = sub_1AFBE3F9C;
      v28[3] = &unk_1E5F8EB38;
      uint8_t v28[4] = &v29;
      sub_1AFBE3F9C((uint64_t)v28);
      uint64_t v16 = (void *)v30[3];
    }
    uint64_t v17 = v16;
    _Block_object_dispose(&v29, 8);
    id v18 = [v17 alloc];
    long long v19 = (id *)(a1 + 32);
    if ([*(id *)(a1 + 32) isFromMe]) {
      long long v20 = MEMORY[0x1E4F1CBF0];
    }
    else {
      long long v20 = v7;
    }
    uint64_t v21 = [v18 initWithType:0 receivedMessages:v20];
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v22 = a1 + 48;
    uint64_t v24 = *(void *)(v23 + 8);
    id v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v21;

    if ([*v19 isFromMe]) {
      id v26 = v7;
    }
    else {
      id v26 = 0;
    }
    [*(id *)(*(void *)(*(void *)v22 + 8) + 40) setSenderMessages:v26];
    [*(id *)(*(void *)(*(void *)v22 + 8) + 40) setIncludesDynamicSuggestions:1];
    id v27 = [*v19 date];
    [*(id *)(*(void *)(*(void *)v22 + 8) + 40) setRequestDate:v27];
  }
  else
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1AFC6B100();
    }
  }
}

void sub_1AFBD6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBD6E2C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = IMCopyIndexableItemDictionaryForRecord(*(void **)(a1 + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(id *)(a1 + 40);
  if (v5) {
    goto LABEL_7;
  }
  if (IMOSLoggingEnabled())
  {
    BOOL v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = [*(id *)(a1 + 32) rowID];
      int v11 = 134217984;
      uint64_t v12 = v7;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Getting chat for message id %lld", (uint8_t *)&v11, 0xCu);
    }
  }
  id v5 = [*(id *)(a1 + 32) chatRecord];
  if (v5)
  {
LABEL_7:
    uint64_t v8 = IMCopyIndexableChatDictionaryForRecord(v5, 0);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

void IMDCoreSpotlightDeleteMessageGUIDS(void *a1, int64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ([v3 count])
  {
    if (sub_1AFBD56A0())
    {
      if (IMOSLoggingEnabled())
      {
        id v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Spotlight is disabled. Bailing.", buf, 2u);
        }
LABEL_20:
      }
    }
    else
    {
      id v5 = IMCoreSpotlightIndex();

      if (v5)
      {
        BOOL v6 = [MEMORY[0x1E4F6EAB8] sharedInstance];
        int v7 = [v6 isUnderFirstDataProtectionLock];

        if (v7)
        {
          if (IMOSLoggingEnabled())
          {
            id v4 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
            }
            goto LABEL_20;
          }
        }
        else
        {
          int v8 = IMDIsRunningInDatabaseServerProcess();
          int v9 = IMOSLoggingEnabled();
          if (v8)
          {
            if (v9)
            {
              uint64_t v10 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                id v36 = v3;
                _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, " => Nuking messages: %@", buf, 0xCu);
              }
            }
            v28[0] = MEMORY[0x1E4F143A8];
            v28[1] = 3221225472;
            v28[2] = sub_1AFBD7510;
            v28[3] = &unk_1E5F940E8;
            id v11 = v3;
            id v29 = v11;
            int64_t v30 = a2;
            sub_1AFBD5444(v28);
            id v25 = v11;
            uint64_t v12 = objc_alloc_init(IMDMessageRecordBatchFetcher);
            uint64_t v13 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K = %@ AND %K IN %@", *MEMORY[0x1E4F6D5A8], MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F6D5A0], v25];
            [(IMDRecordBatchFetcher *)v12 setPredicate:v13];

            [(IMDRecordBatchFetcher *)v12 setBatchSize:50];
            uint64_t v14 = [MEMORY[0x1E4F1CA48] array];
            do
            {
              id v15 = (void *)MEMORY[0x1B3E8A120]();
              uint64_t v16 = [(IMDRecordBatchFetcher *)v12 nextBatch];
              unint64_t v17 = [v16 count];
              long long v34 = 0u;
              long long v32 = 0u;
              long long v33 = 0u;
              long long v31 = 0u;
              id v18 = v16;
              uint64_t v19 = [v18 countByEnumeratingWithState:&v31 objects:buf count:16];
              if (v19)
              {
                uint64_t v20 = *(void *)v32;
                do
                {
                  for (uint64_t i = 0; i != v19; ++i)
                  {
                    if (*(void *)v32 != v20) {
                      objc_enumerationMutation(v18);
                    }
                    uint64_t v22 = [*(id *)(*((void *)&v31 + 1) + 8 * i) guid];
                    [v14 addObject:v22];
                  }
                  uint64_t v19 = [v18 countByEnumeratingWithState:&v31 objects:buf count:16];
                }
                while (v19);
              }
            }
            while (v17 >= 0x32);
            uint64_t v23 = (void *)[v14 copy];

            if ([v23 count])
            {
              v26[0] = MEMORY[0x1E4F143A8];
              v26[1] = 3221225472;
              v26[2] = sub_1AFBD76AC;
              v26[3] = &unk_1E5F8E798;
              id v27 = v23;
              sub_1AFBD549C(v26);
            }
          }
          else
          {
            if (v9)
            {
              uint64_t v24 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)uint8_t buf = 0;
                _os_log_impl(&dword_1AFB53000, v24, OS_LOG_TYPE_INFO, "IMDCoreSpotlightDeleteMessageGUIDS called in a process that is not in IMDPersistenceAgent. Dispatching to IMDP via XPC to continue.", buf, 2u);
              }
            }
            __syncXPCIMDCoreSpotlightDeleteMessageGUIDs_IPCAction(0, (uint64_t)v3, a2);
          }
        }
      }
      else if (IMOSLoggingEnabled())
      {
        id v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "No Spotlight index available for this platform. Bailing.", buf, 2u);
        }
        goto LABEL_20;
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Attempted to delete messages without providing guids. Bailing.", buf, 2u);
    }
    goto LABEL_20;
  }
}

void sub_1AFBD7510(uint64_t a1)
{
  IMCoreSpotlightIndex();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1AFBD7560(v2, *(void **)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1AFBD7560(void *a1, void *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (IMOSLoggingEnabled())
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [v6 count];
      int v9 = NSStringFromIMCoreSpotlightIndexReason();
      int v11 = 134218242;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Deleting %ld messages from index due to %@", (uint8_t *)&v11, 0x16u);
    }
  }
  uint64_t v10 = IMCoreSpotlightIndex();
  [v10 deleteSearchableItemsWithIdentifiers:v6 reason:a3 completionHandler:&unk_1F084D598];
}

void sub_1AFBD76AC(uint64_t a1)
{
}

void IMDRemoveCoreRecentsRecordForMessageGUIDs(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v18 = a1;
  if ([v18 count])
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v30 = v18;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Attempting to remove messages from CoreRecents. guids={%@}", buf, 0xCu);
      }
    }
    id v2 = [MEMORY[0x1E4F1CA80] set];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v3 = v18;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v23 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v7 = *(void *)(*((void *)&v22 + 1) + 8 * i);
          uint64_t v8 = [MEMORY[0x1E4F6E6F0] referenceURLForMessageGUID:v7];
          int v9 = [MEMORY[0x1E4F6E6F0] deprecatedReferenceURLForMessageGUID:v7];
          v27[0] = v8;
          v27[1] = v9;
          uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:2];
          [v2 addObjectsFromArray:v10];
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }
      while (v4);
    }

    id v11 = objc_alloc_init(MEMORY[0x1E4F5CCF0]);
    uint64_t v26 = *MEMORY[0x1E4F5CCC0];
    uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v26 count:1];
    [v11 setDomains:v12];

    __int16 v13 = +[IMDCoreSpotlightDispatchObject sharedInstance];
    uint64_t v14 = [v13 recentsInstance];

    uint64_t v15 = sub_1AFBE3CA4();
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1AFBD8218;
    v19[3] = &unk_1E5F963A8;
    id v20 = v2;
    id v21 = v14;
    id v16 = v14;
    id v17 = v2;
    [v16 performRecentsSearch:v11 queue:v15 completion:v19];
  }
}

void IMDCoreSpotlightDeleteAttachmentGUIDs(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ((sub_1AFBD56A0() & 1) == 0)
  {
    uint64_t v4 = [MEMORY[0x1E4F6EAB8] sharedInstance];
    int v5 = [v4 isUnderFirstDataProtectionLock];

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        id v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
        }
      }
    }
    else
    {
      uint64_t v7 = IMCoreSpotlightIndex();

      if (v3 && v7)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v8 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            id v13 = v3;
            _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, " => Nuking attachment message parts: %@", buf, 0xCu);
          }
        }
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3221225472;
        v9[2] = sub_1AFBD7BB4;
        v9[3] = &unk_1E5F940E8;
        id v10 = v3;
        uint64_t v11 = a2;
        sub_1AFBD5444(v9);
      }
    }
  }
}

void sub_1AFBD7BB4(uint64_t a1)
{
  IMCoreSpotlightIndex();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1AFBD7560(v2, *(void **)(a1 + 32), *(void *)(a1 + 40));
}

void IMDCoreSpotlightDeleteCoreRecentsWithHandles(void *a1)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  _IMDCoreRecentsApiInit();
  id v2 = (void *)MEMORY[0x1B3E8A120]();
  id v3 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  int v4 = [v3 isUnderFirstDataProtectionLock];

  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, " => Deleting this chat", buf, 2u);
      }
LABEL_5:
    }
  }
  else
  {
    if (!v1 && IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDCoreSpotlightDeleteCoreRecentsWithHandles bailing because we were passed no handles.", buf, 2u);
      }
    }
    if ((unint64_t)[v1 count] >= 2)
    {
      if (!IMOSLoggingEnabled()) {
        goto LABEL_24;
      }
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "IMDCoreSpotlightDeleteCoreRecentsWithHandles bailing because this is a group chat.", buf, 2u);
      }
      goto LABEL_5;
    }
    uint64_t v7 = [v1 firstObject];
    uint64_t v8 = [v7 canonicalizedURIString];
    if ([v8 length])
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F5CCF0]);
      v24[0] = *MEMORY[0x1E4F5CCC8];
      id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:1];
      [v9 setDomains:v10];

      uint64_t v11 = (void *)MEMORY[0x1E4F5CCE8];
      long long v23 = v8;
      uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v23 count:1];
      id v13 = [v11 predicateForKey:*MEMORY[0x1E4F5CC88] inCollection:v12];

      [v9 setSearchPredicate:v13];
      if (v9)
      {
        uint64_t v14 = +[IMDCoreSpotlightDispatchObject sharedInstance];
        uint64_t v15 = [v14 recentsInstance];

        id v16 = dispatch_get_global_queue(0, 0);
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        v19[2] = sub_1AFBD7FF4;
        v19[3] = &unk_1E5F96380;
        id v20 = v15;
        id v17 = v15;
        [v17 performRecentsSearch:v9 queue:v16 completion:v19];
      }
    }
    else if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        long long v22 = v7;
        _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "performRecentsSearch: not performing recents SEARCH since a valid handleAlias was not found for handleRecord: gi%@", buf, 0xCu);
      }
    }
  }
LABEL_24:
}

void sub_1AFBD7FF4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      id v15 = v5;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "performRecentsSearch - recents = %@", buf, 0xCu);
    }
  }
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v15 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "performRecentsSearch: recents SEARCH failed with error %@", buf, 0xCu);
      }
    }
  }
  else
  {
    if (v5 && [v5 count])
    {
      id v9 = *(void **)(a1 + 32);
      id v13 = 0;
      char v10 = [v9 removeRecentContacts:v5 error:&v13];
      id v11 = v13;
      if ((v10 & 1) == 0 && IMOSLoggingEnabled())
      {
        uint64_t v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          id v15 = v11;
          _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Removing recents contacts failed with error %@", buf, 0xCu);
        }
      }
    }
    else
    {
      id v11 = 0;
    }
  }
}

void sub_1AFBD8218(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v20 = a3;
  id v6 = [MEMORY[0x1E4F1CA48] array];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v12 = [v11 metadata];
        id v13 = [v12 objectForKey:@"corerecents:reference-url"];

        if ([*(id *)(a1 + 32) containsObject:v13]) {
          [v6 addObject:v11];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v8);
  }

  if ([v6 count])
  {
    uint64_t v14 = *(void **)(a1 + 40);
    id v15 = (void *)[v6 copy];
    id v21 = 0;
    [v14 removeRecentContacts:v15 error:&v21];
    id v16 = v21;

    int v17 = IMOSLoggingEnabled();
    if (v16)
    {
      if (v17)
      {
        id v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v27 = (uint64_t)v16;
          _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "Recent messages remove failed with error %@.", buf, 0xCu);
        }
LABEL_19:
      }
    }
    else if (v17)
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = [v6 count];
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v27 = v19;
        _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "Successfully removed %ld messages from CoreRecents.", buf, 0xCu);
      }
      goto LABEL_19;
    }
  }
}

void sub_1AFBD84AC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBD845CLL);
  }
  _Unwind_Resume(a1);
}

void IMDCoreSpotlightDeleteChatGUID(void *a1, int64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ((sub_1AFBD56A0() & 1) == 0)
  {
    int v4 = [MEMORY[0x1E4F6EAB8] sharedInstance];
    int v5 = [v4 isUnderFirstDataProtectionLock];

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        id v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
        }
      }
    }
    else
    {
      id v7 = IMCoreSpotlightIndex();

      if (v3 && v7)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v8 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            id v14 = v3;
            _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, " => Nuking chat: %@", buf, 0xCu);
          }
        }
        if (IMDIsRunningInDatabaseServerProcess())
        {
          uint64_t v9 = +[IMDCoreSpotlightManager sharedInstance];
          [v9 deleteChatSearchableItemForChatGUID:v3 reason:a2];

          v10[0] = MEMORY[0x1E4F143A8];
          v10[1] = 3221225472;
          v10[2] = sub_1AFBD86FC;
          v10[3] = &unk_1E5F940E8;
          id v11 = v3;
          int64_t v12 = a2;
          sub_1AFBD5444(v10);
        }
        else
        {
          __syncXPCIMDCoreSpotlightDeleteChatGUID_IPCAction(0, (uint64_t)v3, a2);
        }
      }
    }
  }
}

void sub_1AFBD86FC(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = IMCoreSpotlightIndex();
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  char v10 = sub_1AFBD88B8;
  id v11 = &unk_1E5F8E8E8;
  id v12 = *(id *)(a1 + 32);
  id v3 = _Block_copy(&v8);
  if (IMOSLoggingEnabled())
  {
    int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = NSStringFromIMCoreSpotlightIndexReason();
      *(_DWORD *)uint8_t buf = 138412546;
      uint64_t v15 = v5;
      __int16 v16 = 2112;
      int v17 = v6;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Deleting %@ from index due to %@", buf, 0x16u);
    }
  }
  uint64_t v13 = *(void *)(a1 + 32);
  id v7 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v13, 1, v8, v9, v10, v11);
  [v2 deleteSearchableItemsWithDomainIdentifiers:v7 reason:IMCSIndexReasonFromIMIndexReason() completionHandler:v3];
}

void sub_1AFBD88B8(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlightDeleteChatGUID: Failed to delete items with domain identifier %@ with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void IMDCoreSpotlightAddChatGUID(void *a1, int64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ((sub_1AFBD56A0() & 1) == 0)
  {
    int v4 = [MEMORY[0x1E4F6EAB8] sharedInstance];
    int v5 = [v4 isUnderFirstDataProtectionLock];

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        int v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
        }
      }
    }
    else if (v3)
    {
      if (IMDIsRunningInDatabaseServerProcess())
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v7 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            id v12 = v3;
            _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, " => Indexing chat: %@", buf, 0xCu);
          }
        }
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 3221225472;
        void v8[2] = sub_1AFBD8BA4;
        v8[3] = &unk_1E5F940E8;
        id v9 = v3;
        int64_t v10 = a2;
        sub_1AFBD5444(v8);
      }
      else
      {
        __syncXPCIMDCoreSpotlightAddChatGUID_IPCAction(0, (uint64_t)v3, a2);
      }
    }
  }
}

void sub_1AFBD8BA4(uint64_t a1)
{
  id v2 = +[IMDCoreSpotlightManager sharedInstance];
  [v2 addChatSearchableItemForChatGUID:*(void *)(a1 + 32) reason:*(void *)(a1 + 40)];
}

void IMDCoreSpotlightAddChatGUIDs(void *a1, int64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = [v3 count];
  int v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      int v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v18 = [v3 count];
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Adding %lu chats to CoreSpotlight", buf, 0xCu);
      }
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v13;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v7);
          }
          IMDCoreSpotlightAddChatGUID(*(void **)(*((void *)&v12 + 1) + 8 * v10++), a2);
        }
        while (v8 != v10);
        uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }
  }
  else if (v5)
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "No chats to add", buf, 2u);
    }
  }
}

void IMDCoreSpotlightReIndexForHandles(void *a1)
{
  id v1 = a1;
  id v2 = [IMDCoreSpotlightReindexer alloc];
  id v3 = IMCoreSpotlightIndex();
  uint64_t v4 = [(IMDCoreSpotlightReindexer *)v2 initWithHandles:v1 batchDeferralTime:10 messageAge:v3 index:30.0];

  [(IMDCoreSpotlightReindexer *)v4 reindex];
}

void IMDCoreSpotlightReindexMessagesWhileBlocking(void *a1, int64_t a2, int a3, void *a4)
{
  id v7 = a1;
  uint64_t v8 = a4;
  uint64_t v9 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  int v10 = [v9 isUnderFirstDataProtectionLock];

  if (v10)
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_13;
    }
    id v11 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    *(_WORD *)uint8_t buf = 0;
    long long v12 = " => Before first unlock, skipping re-indexing of messages";
    goto LABEL_11;
  }
  if (![v7 count])
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_13;
    }
    id v11 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
LABEL_12:

LABEL_13:
      if (v8) {
        v8[2](v8);
      }
      goto LABEL_22;
    }
    *(_WORD *)uint8_t buf = 0;
    long long v12 = "Trying to reindex messages with an empty guids array";
LABEL_11:
    _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, v12, buf, 2u);
    goto LABEL_12;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1AFBD90E4;
    v16[3] = &unk_1E5F963F8;
    id v17 = v7;
    uint64_t v18 = v8;
    int64_t v19 = a2;
    sub_1AFBD5444(v16);
  }
  else
  {
    if (v8)
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      void v14[2] = sub_1AFBD946C;
      v14[3] = &unk_1E5F957D8;
      long long v15 = v8;
      long long v13 = (void (**)(void))_Block_copy(v14);
    }
    else
    {
      long long v13 = 0;
    }
    if (a3) {
      __syncXPCIMDCoreSpotlightReindexMessages_IPCAction(v13, v7, a2);
    }
    else {
      __asyncXPCIMDCoreSpotlightReindexMessages_IPCAction(v13, v7, a2);
    }
  }
LABEL_22:
}

void sub_1AFBD90E4(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = [*(id *)(a1 + 32) count];
      *(_DWORD *)uint8_t buf = 67109120;
      LODWORD(v23) = v3;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Request to re-index messages with messages count: %d", buf, 8u);
    }
  }
  uint64_t v4 = IMCoreSpotlightIndex();
  BOOL v5 = v4 == 0;

  if (v5)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17) {
      (*(void (**)(void))(v17 + 16))();
    }
  }
  else
  {
    id v6 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
    [v6 startTimingForKey:@"total time for indexing messages"];
    id v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v9 = *(void **)(a1 + 32);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1AFBD93AC;
    v18[3] = &unk_1E5F963D0;
    id v10 = v6;
    id v19 = v10;
    id v11 = v8;
    id v20 = v11;
    id v12 = v7;
    id v21 = v12;
    [v9 enumerateObjectsUsingBlock:v18];
    uint64_t v13 = *(void *)(a1 + 48);
    long long v14 = IMCoreSpotlightIndex();
    IMDCoreSpotlightIndexSearchableItemsAsync(v12, v11, v13, v14);

    [v10 stopTimingForKey:@"total time for indexing messages"];
    if (IMOSLoggingEnabled())
    {
      long long v15 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v23 = v10;
        _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Done re-indexing messages, time: %@", buf, 0xCu);
      }
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16) {
      (*(void (**)(void))(v16 + 16))();
    }
  }
}

void sub_1AFBD93AC(uint64_t a1, void *a2)
{
  id v6 = a2;
  int v3 = (void *)MEMORY[0x1B3E8A120]();
  [*(id *)(a1 + 32) startTimingForKey:@"generate indexable item"];
  uint64_t v4 = +[IMDCoreSpotlightManager sharedInstance];
  BOOL v5 = (void *)[v4 newSearchableItemsForMessageGUID:v6 reindexing:1 rejectedItems:*(void *)(a1 + 40)];

  [*(id *)(a1 + 48) addObjectsFromArray:v5];
  [*(id *)(a1 + 32) stopTimingForKey:@"generate indexable item"];
}

uint64_t sub_1AFBD946C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IMDCoreSpotlightReindexMessages(void *a1, int64_t a2, void *a3)
{
}

void IMDCoreSpotlightReindexAttachment(void *a1, int64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  int v3 = [a1 messageRecord];
  uint64_t v4 = [v3 guid];
  BOOL v5 = (void *)v4;
  if (v4)
  {
    v7[0] = v4;
    id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
    IMDCoreSpotlightReindexMessagesWhileBlocking(v6, a2, 1, 0);
  }
}

void IMDCoreSpotlightReindexMessagesWithCollaborationMetadata(void *a1, void *a2, int64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  int v8 = [v7 isUnderFirstDataProtectionLock];

  if (v8)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, " => Before first unlock, skipping re-indexing of messages", buf, 2u);
      }
LABEL_33:
    }
  }
  else if ([v5 count])
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (IMOSLoggingEnabled())
      {
        id v10 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 67109120;
          LODWORD(v39) = [v5 count];
          _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Request to re-index messages with messages count: %d", buf, 8u);
        }
      }
      id v11 = IMCoreSpotlightIndex();
      BOOL v12 = v11 == 0;

      if (v12)
      {
        uint64_t v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6B140();
        }
        goto LABEL_33;
      }
      if (!v6)
      {
        uint64_t v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6B178();
        }
        goto LABEL_33;
      }
      id v13 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
      [v13 startTimingForKey:@"total time for indexing messages"];
      long long v14 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 3221225472;
      v34[2] = sub_1AFBD9AB0;
      v34[3] = &unk_1E5F963D0;
      id v27 = v13;
      id v35 = v27;
      id v25 = v15;
      id v36 = v25;
      id v28 = v14;
      id v37 = v28;
      [v5 enumerateObjectsUsingBlock:v34];
      id v33 = 0;
      uint64_t v16 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v6 requiringSecureCoding:1 error:&v33];
      id v26 = v33;
      if (v16)
      {
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        uint64_t v17 = v28;
        uint64_t v18 = -[NSObject countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v29, v40, 16, v25, v26);
        if (v18)
        {
          uint64_t v19 = *(void *)v30;
          do
          {
            for (uint64_t i = 0; i != v18; ++i)
            {
              if (*(void *)v30 != v19) {
                objc_enumerationMutation(v17);
              }
              id v21 = [*(id *)(*((void *)&v29 + 1) + 8 * i) attributeSet];
              long long v22 = +[IMDSharedWithYouMetadataManager collaborationMetadataKey];
              [v21 setValue:v16 forCustomKey:v22];
            }
            uint64_t v18 = [v17 countByEnumeratingWithState:&v29 objects:v40 count:16];
          }
          while (v18);
        }
      }
      else
      {
        uint64_t v17 = IMLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6B1B0((uint64_t)v26, v17);
        }
      }

      id v23 = +[IMDCoreSpotlightManager sharedInstance];
      [v23 reIndexWithLocalProofOfInclusionForItemsAsync:v28];

      [v27 stopTimingForKey:@"total time for indexing messages"];
      if (IMOSLoggingEnabled())
      {
        uint64_t v24 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          id v39 = v27;
          _os_log_impl(&dword_1AFB53000, v24, OS_LOG_TYPE_INFO, "Done re-indexing messages, time: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      __syncXPCIMDCoreSpotlightReindexMessagesWithCollaborationMetadata_IPCAction(0, v5, (uint64_t)v6, a3);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Trying to reindex messages with an empty guids array", buf, 2u);
    }
    goto LABEL_33;
  }
}

void sub_1AFBD9AB0(uint64_t a1, void *a2)
{
  id v6 = a2;
  int v3 = (void *)MEMORY[0x1B3E8A120]();
  [*(id *)(a1 + 32) startTimingForKey:@"generate indexable item"];
  uint64_t v4 = +[IMDCoreSpotlightManager sharedInstance];
  id v5 = (void *)[v4 newSearchableItemsForMessageGUID:v6 reindexing:1 rejectedItems:*(void *)(a1 + 40)];

  [*(id *)(a1 + 48) addObjectsFromArray:v5];
  [*(id *)(a1 + 32) stopTimingForKey:@"generate indexable item"];
}

void IMDCoreSpotlightSetNeedsMessageReindexBlocking(int a1, int64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  int v7 = [v6 isUnderFirstDataProtectionLock];

  if (v7)
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 136315138;
        id v13 = "void IMDCoreSpotlightSetNeedsMessageReindexBlocking(BOOL, IMCoreSpotlightIndexReason, __strong dispatch_block_t)";
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, " => %s Before first unlock, skipping indexing", buf, 0xCu);
      }
    }
    if (v5) {
      v5[2](v5);
    }
  }
  else if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v9 = +[IMDCoreSpotlightManager sharedInstance];
    [v9 setNeedsMessageReindexingWithReason:a2 completion:v5];
  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1AFBD9D3C;
    v10[3] = (void (*)(void))&unk_1E5F957D8;
    id v11 = v5;
    __XPCIMDCoreSpotlightSetNeedsMessageReindex_IPCAction(v10, a1, a2);
  }
}

uint64_t sub_1AFBD9D3C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void IMDCoreSpotlightSetNeedsMessageReindex(int64_t a1, void *a2)
{
}

void IMDCoreSpotlightIndexNextMessageBatchIfNeeded(uint64_t a1, int64_t a2, void *a3)
{
}

void IMDCoreSpotlightIndexNextMessageBatchIfNeededBlocking(int a1, uint64_t a2, int64_t a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v7 = a4;
  int v8 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  int v9 = [v8 isUnderFirstDataProtectionLock];

  if (v9)
  {
    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 136315138;
        uint64_t v18 = "void IMDCoreSpotlightIndexNextMessageBatchIfNeededBlocking(BOOL, NSUInteger, IMCoreSpotlightIndexReason, _"
              "_strong dispatch_block_t)";
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, " => %s Before first unlock, skipping indexing", buf, 0xCu);
      }
    }
    if (v7) {
      v7[2](v7);
    }
  }
  else if (IMDIsRunningInDatabaseServerProcess())
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1AFBD9F88;
    v13[3] = &unk_1E5F96420;
    uint64_t v15 = a2;
    int64_t v16 = a3;
    uint64_t v14 = v7;
    sub_1AFBD5444(v13);
  }
  else
  {
    v11[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v11[1] = (void (*)(void))3221225472;
    void v11[2] = (void (*)(void))sub_1AFBDA058;
    v11[3] = (void (*)(void))&unk_1E5F957D8;
    BOOL v12 = v7;
    __XPCIMDCoreSpotlightIndexNextMessageBatchIfNeeded_IPCAction(v11, a1, a2, a3);
  }
}

void sub_1AFBD9F88(uint64_t a1)
{
  id v2 = +[IMDCoreSpotlightManager sharedInstance];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFBDA040;
  v5[3] = &unk_1E5F8FDF0;
  id v6 = *(id *)(a1 + 32);
  [v2 indexNextMessageBatchIfNeeded:v3 reason:v4 completion:v5];
}

uint64_t sub_1AFBDA040(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1AFBDA058(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1AFBDA070(int a1, int64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v12 = 0;
  BOOL v4 = IMDMessageRecordDeleteBatchOfDeletedMessageGuids(a1, &v12, a3);
  id v5 = v12;
  id v6 = v5;
  if (v4)
  {
    if (v5 && [v5 count])
    {
      if (IMOSLoggingEnabled())
      {
        int v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          uint64_t v8 = [v6 count];
          *(_DWORD *)uint8_t buf = 134217984;
          uint64_t v14 = v8;
          _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Found %ld messages guids to remove from spotlight", buf, 0xCu);
        }
      }
      IMDCoreSpotlightDeleteMessageGUIDS(v6, a2);
      uint64_t v9 = 1;
LABEL_15:

      goto LABEL_16;
    }
    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Found 0 messages guids to remove from spotlight", buf, 2u);
      }
    }
    uint64_t v9 = 0;
    if (v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_16:

  return v9;
}

void IMDCoreSpotlightScheduleUpdateForDeletedMessages(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1AFBDA2AC;
  aBlock[3] = &unk_1E5F8E728;
  void aBlock[4] = a1;
  id v1 = _Block_copy(aBlock);
  if ((IMIsRunningInUnitTesting() & 1) == 0) {
    _IMDPerformBlockWithDelay((uint64_t)v1);
  }
}

uint64_t sub_1AFBDA2AC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = 0;
  uint64_t result = sub_1AFBDA070(2000, v2, &v4);
  if (result) {
    return IMDCoreSpotlightScheduleUpdateForDeletedMessages(*(void *)(a1 + 32));
  }
  return result;
}

uint64_t IMDCoreSpotlightGetPerChatHistoryLimit()
{
  if (qword_1E9AF81E8 != -1) {
    dispatch_once(&qword_1E9AF81E8, &unk_1F084C788);
  }
  return dword_1E9AF81F0;
}

void sub_1AFBDA338()
{
  dword_1E9AF81F0 = 200;
  int v0 = [MEMORY[0x1E4F61740] sharedInstance];
  uint64_t v1 = [v0 performanceClass];

  if ((unint64_t)(v1 + 1) <= 3) {
    dword_1E9AF81F0 = dword_1AFC782B0[v1 + 1];
  }
}

uint64_t IMDCoreSpotlightMarkAttachment()
{
  return 0;
}

void sub_1AFBDA400()
{
  int v0 = objc_alloc_init(IMDCoreSpotlightManager);
  uint64_t v1 = (void *)qword_1EB5ABCF0;
  qword_1EB5ABCF0 = (uint64_t)v0;
}

void sub_1AFBDA6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBDA704(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1AFBDA7AC()
{
  dispatch_queue_t v0 = dispatch_queue_create(0, 0);
  uint64_t v1 = (void *)qword_1E9AF81F8;
  qword_1E9AF81F8 = (uint64_t)v0;

  int64_t v2 = qword_1E9AF81F8;
  uint64_t v3 = dispatch_get_global_queue(2, 0);
  dispatch_set_target_queue(v2, v3);
}

void sub_1AFBDA878()
{
  int64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E4F14430], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.imdpersistence.scrutinyMessagesQueue", v2);
  uint64_t v1 = (void *)qword_1EB5ABAA0;
  qword_1EB5ABAA0 = (uint64_t)v0;
}

uint64_t sub_1AFBDA934()
{
  uint64_t result = MEMORY[0x1B3E89B10](@"SLCollaborationHandshakeController", @"SocialLayer");
  qword_1E9AF8208 = result;
  return result;
}

void sub_1AFBDAA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBDAA80(uint64_t a1)
{
}

void sub_1AFBDAB84(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) array];
  IMSetDomainValueForKey();
}

void sub_1AFBDACE8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) array];
  unint64_t v3 = [v2 count];
  if (v3 < 0xC9)
  {
    id v6 = v2;
  }
  else
  {
    unint64_t v4 = v3;
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10[0] = 67109120;
        v10[1] = 200;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Blocklist size > %d on load, truncating", (uint8_t *)v10, 8u);
      }
    }
    id v6 = objc_msgSend(v2, "subarrayWithRange:", v4 - 200, 200);

    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1CA70]) initWithArray:v6];
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 16);
    *(void *)(v8 + 16) = v7;
  }
  IMSetDomainValueForKey();
}

void sub_1AFBDAF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBDAFA4(uint64_t a1)
{
  CFStringRef v2 = IMDMessageRecordCopyMessageForGUID(*(const __CFString **)(a1 + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1AFBDB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBDB194(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = IMCopyIndexableItemDictionaryForRecord(*(void **)(a1 + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = [*(id *)(a1 + 32) rowID];
      int v12 = 134217984;
      uint64_t v13 = v6;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Getting chat for message id %lld", (uint8_t *)&v12, 0xCu);
    }
  }
  uint64_t v7 = [*(id *)(a1 + 32) chatRecord];
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = IMCopyIndexableChatDictionaryForRecord(v7, 0);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
}

void sub_1AFBDC514(_Unwind_Exception *a1)
{
  _Block_object_dispose(&v3, 8);
  _Block_object_dispose(&v4, 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1AFBDC648()
{
  dispatch_queue_t v0 = dispatch_queue_create(0, 0);
  uint64_t v1 = (void *)qword_1E9AF8218;
  qword_1E9AF8218 = (uint64_t)v0;

  uint64_t v2 = qword_1E9AF8218;
  uint64_t v3 = dispatch_get_global_queue(2, 0);
  dispatch_set_target_queue(v2, v3);
}

void sub_1AFBDC6C0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        objc_msgSend(v6, "startTimingWithProfiler:", *(void *)(a1 + 40), (void)v8);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = [v6 cancelIndexingForItem:*(void *)(a1 + 48)];
        uint64_t v7 = [v6 auxiliaryItemsForPrimaryAttributes:*(void *)(a1 + 56) withItem:*(void *)(a1 + 48) chat:*(void *)(a1 + 64) isReindexing:*(unsigned __int8 *)(a1 + 136) timingProfiler:*(void *)(a1 + 40) rejectedItems:*(void *)(a1 + 72)];
        [*(id *)(a1 + 80) addObjectsFromArray:v7];
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
        {
          [*(id *)(a1 + 40) stopProfilingAfterIndexersBailed];

          goto LABEL_11;
        }
        [v6 indexItem:*(void *)(a1 + 48) withChat:*(void *)(a1 + 64) isReindexing:*(unsigned __int8 *)(a1 + 136) metadataToUpdate:*(void *)(a1 + 56) timingProfiler:*(void *)(a1 + 40)];
        [v6 stopTimingWithProfiler:*(void *)(a1 + 40)];
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)) {
    [*(id *)(a1 + 40) startTimingForKey:@"post-processor"];
  }
  objc_msgSend(*(id *)(a1 + 88), "_postProcessIndexingForItem:chatDictionary:isReindexing:", *(void *)(a1 + 48), *(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 136), (void)v8);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)) {
    [*(id *)(a1 + 40) stopTimingForKey:@"post-processor"];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
}

void sub_1AFBDC8A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(a1);
    [*(id *)(v17 + 40) abortCurrentTimers];
    *(unsigned char *)(*(void *)(*(void *)(v17 + 120) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(v17 + 128) + 8) + 24) = 1;
    if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)(v17 + 96);
        LODWORD(buf) = 138412546;
        *(void *)((char *)&buf + 4) = v20;
        WORD6(buf) = 2112;
        *(void *)((char *)&buf + 14) = v18;
        _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Indexing %@ threw exception %@", (uint8_t *)&buf, 0x16u);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1AFBDC864);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBDCC00()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_resolvedURL" searchable:1 searchableByDefault:0 unique:0 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8228;
  qword_1E9AF8228 = v0;
}

void sub_1AFBDCECC(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) uniqueIdentifier];
      int v6 = 136315650;
      uint64_t v7 = "-[IMDCoreSpotlightManager _updateItem:withResolvedURL:]_block_invoke";
      __int16 v8 = 2112;
      long long v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlight %s: indexing resolved url searchable item %@ failed with error %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_1AFBDD29C(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) uniqueIdentifier];
      int v6 = 136315650;
      uint64_t v7 = "-[IMDCoreSpotlightManager _updateItem:withFPProviderID:]_block_invoke";
      __int16 v8 = 2112;
      long long v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlight %s: Updating FileProviderID for searchable item %@ failed with error %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_1AFBDD88C(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) uniqueIdentifier];
      int v6 = 136315650;
      uint64_t v7 = "-[IMDCoreSpotlightManager _updateItem:withIdentityMap:localIdentity:localIdentityProof:]_block_invoke";
      __int16 v8 = 2112;
      long long v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlight %s: Updating Proof of inclusion for searchable item %@ failed with error %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_1AFBDDD70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFBDDE40;
  v9[3] = &unk_1E5F964E8;
  id v10 = v6;
  long long v11 = *(_OWORD *)(a1 + 32);
  id v12 = v5;
  id v7 = v5;
  id v8 = v6;
  dispatch_async(MEMORY[0x1E4F14428], v9);
}

void sub_1AFBDDE40(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 32;
  if (*(void *)(a1 + 32))
  {
    id v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6B55C(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        long long v11 = [*(id *)(a1 + 40) uniqueIdentifier];
        int v14 = 138412290;
        uint64_t v15 = v11;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Found resolved URL for item %@", (uint8_t *)&v14, 0xCu);
      }
    }
    uint64_t v13 = *(void *)(a1 + 40);
    id v12 = *(void **)(a1 + 48);
    id v2 = [*(id *)(a1 + 56) absoluteString];
    [v12 _updateItem:v13 withResolvedURL:v2];
  }
}

void *sub_1AFBDE2B0()
{
  uint64_t result = (void *)MEMORY[0x1B3E89B20]("FPProviderForShareURL", @"FileProvider");
  off_1E9AF8240 = result;
  return result;
}

void sub_1AFBDE2E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1AFBDE3D4;
  v9[3] = &unk_1E5F96538;
  id v10 = v5;
  id v11 = v6;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  long long v14 = *(_OWORD *)(a1 + 48);
  id v7 = v6;
  id v8 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v9);
}

void sub_1AFBDE3D4(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v2 = (__CFString *)*(id *)(a1 + 32);
  if (!*(void *)(a1 + 40)) {
    goto LABEL_23;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = [*(id *)(a1 + 40) description];
      int v22 = 138412546;
      id v23 = v2;
      __int16 v24 = 2112;
      id v25 = v4;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Failed to get FPProviderID:%@ for URL. Error: %@", (uint8_t *)&v22, 0x16u);
    }
  }
  if (qword_1E9AF8258 != -1) {
    dispatch_once(&qword_1E9AF8258, &unk_1F084BF60);
  }
  if (off_1E9AF8250)
  {
    id v5 = off_1E9AF8250();
    id v6 = [*(id *)(a1 + 48) host];
    int v7 = [v5 containsObject:v6];
    int v8 = IMOSLoggingEnabled();
    if (v7)
    {
      if (v8)
      {
        long long v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          LOWORD(v22) = 0;
          _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Setting default FileProviderID for URL", (uint8_t *)&v22, 2u);
        }
      }
      if (qword_1E9AF8268 != -1) {
        dispatch_once(&qword_1E9AF8268, &unk_1F084D100);
      }
      if (off_1E9AF8260 && (off_1E9AF8260(), (id v10 = (__CFString *)objc_claimAutoreleasedReturnValue()) != 0))
      {
        if (IMOSLoggingEnabled())
        {
          id v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            int v22 = 138412290;
            id v23 = v10;
            _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Found FileProviderID from FPCloudDocsProviderID(): %@", (uint8_t *)&v22, 0xCu);
          }
        }
        id v12 = v10;

        id v2 = v12;
      }
      else
      {
        id v12 = @"com.apple.CloudDocs.MobileDocumentsFileProvider";
        if (IMOSLoggingEnabled())
        {
          long long v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            int v22 = 138412290;
            id v23 = @"com.apple.CloudDocs.MobileDocumentsFileProvider";
            _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Did not find FileProviderID from FPCloudDocsProviderID(), falling back to default ID: %@", (uint8_t *)&v22, 0xCu);
          }
        }
      }
    }
    else
    {
      if (v8)
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          LOWORD(v22) = 0;
          _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Host for URL not in ValidSharingURLs so not defaulting FPProviderID", (uint8_t *)&v22, 2u);
        }
      }
      id v12 = v2;
    }
  }
  else
  {
LABEL_23:
    id v12 = v2;
  }
  uint64_t v15 = [*(id *)(a1 + 56) filename];
  BOOL v16 = [v15 length] == 0;

  if ([(__CFString *)v12 length]) {
    char v17 = v16;
  }
  else {
    char v17 = 1;
  }
  int v18 = IMOSLoggingEnabled();
  if (v17)
  {
    if (v18)
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = [*(id *)(a1 + 56) filename];
        int v22 = 138412546;
        id v23 = v12;
        __int16 v24 = 2112;
        id v25 = v20;
        _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Not setting FPProviderID: %@ for URL in CSSI. FileName: %@", (uint8_t *)&v22, 0x16u);
      }
    }
  }
  else
  {
    if (v18)
    {
      id v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        int v22 = 138412290;
        id v23 = v12;
        _os_log_impl(&dword_1AFB53000, v21, OS_LOG_TYPE_INFO, "Setting FPProviderID: %@ for URL in CSSI", (uint8_t *)&v22, 0xCu);
      }
    }
    [*(id *)(a1 + 64) _updateItem:*(void *)(a1 + 72) withFPProviderID:v12];
  }
}

void *sub_1AFBDE8D4()
{
  uint64_t result = (void *)MEMORY[0x1B3E89B20]("CKValidSharingURLHostnames", @"CloudKit");
  off_1E9AF8250 = result;
  return result;
}

void *sub_1AFBDE904()
{
  uint64_t result = (void *)MEMORY[0x1B3E89B20]("FPCloudDocsProviderID", @"FileProvider");
  off_1E9AF8260 = result;
  return result;
}

void sub_1AFBDF108(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFBDE9E4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1AFBDF128(_Unwind_Exception *a1)
{
}

void sub_1AFBDF160(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6B6D4(v6, v7);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v12 = 138412546;
        id v13 = v5;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Fetched localIdentityProof: %@ for localIdentity: %@", (uint8_t *)&v12, 0x16u);
      }
    }
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    int v7 = [*(id *)(a1 + 48) handleToIdentityMap];
    [v10 _updateItem:v11 withIdentityMap:v7 localIdentity:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) localIdentityProof:v5];
  }
}

void sub_1AFBDFA84()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_isChatAutoDonating" searchable:1 searchableByDefault:0 unique:0 multiValued:0];
  uint64_t v1 = (void *)qword_1EB5AB9F0;
  qword_1EB5AB9F0 = v0;
}

void sub_1AFBDFB30()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_chatAutoDonatingServerDate" searchable:1 searchableByDefault:0 unique:0 multiValued:0];
  uint64_t v1 = (void *)qword_1EB5ABAA8;
  qword_1EB5ABAA8 = v0;
}

void sub_1AFBDFBDC()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_chatStyle" searchable:1 searchableByDefault:0 unique:0 multiValued:0];
  uint64_t v1 = (void *)qword_1EB5ABB88;
  qword_1EB5ABB88 = v0;
}

void sub_1AFBDFC88()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_localIdentityProof" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8270;
  qword_1E9AF8270 = v0;
}

void sub_1AFBDFD34()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_localIdentity" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8280;
  qword_1E9AF8280 = v0;
}

void sub_1AFBDFDE0()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_handleToIdentityMap" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8290;
  qword_1E9AF8290 = v0;
}

void sub_1AFBDFE8C()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_threadIdentifier" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF7FB0;
  qword_1E9AF7FB0 = v0;
}

void sub_1AFBE0070(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v53 = a2;
  id v56 = a3;
  id v55 = a4;
  uint64_t v11 = a6;
  __int16 v54 = v10;
  if (sub_1AFBD56A0())
  {
    v11[2](v11);
    goto LABEL_54;
  }
  id v51 = v11;
  group = dispatch_group_create();
  [v10 beginIndexBatch];
  int v12 = [NSString stringGUID];
  dispatch_group_enter(group);
  v84[0] = MEMORY[0x1E4F143A8];
  v84[1] = 3221225472;
  v84[2] = sub_1AFBE40FC;
  v84[3] = &unk_1E5F8E8A0;
  id v59 = v12;
  id v85 = v59;
  id v86 = v10;
  id v49 = v86;
  [v86 indexSearchableItems:v56 completionHandler:v84];
  uint64_t v13 = [v55 count];
  if (a5 != 1000 && v13)
  {
    if ([MEMORY[0x1E4F6E700] withdrawDonationsForFailedPreviewGenerations])
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      id v15 = v55;
      uint64_t v16 = [v15 countByEnumeratingWithState:&v80 objects:v94 count:16];
      if (v16)
      {
        uint64_t v17 = *(void *)v81;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v81 != v17) {
              objc_enumerationMutation(v15);
            }
            uint64_t v19 = *(void **)(*((void *)&v80 + 1) + 8 * i);
            uint64_t v20 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", objc_msgSend(v19, "reason"));
            id v21 = [v14 objectForKeyedSubscript:v20];
            if (!v21)
            {
              id v21 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              [v14 setObject:v21 forKeyedSubscript:v20];
            }
            int v22 = [v19 proposedIdentifier];
            [v21 addObject:v22];
          }
          uint64_t v16 = [v15 countByEnumeratingWithState:&v80 objects:v94 count:16];
        }
        while (v16);
      }

      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 3221225472;
      v77[2] = sub_1AFBE41F8;
      v77[3] = &unk_1E5F96758;
      id v78 = v49;
      uint64_t v79 = a5;
      [v14 enumerateKeysAndObjectsUsingBlock:v77];
    }
    else if (IMOSLoggingEnabled())
    {
      id v23 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = [v55 count];
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v89 = v24;
        _os_log_impl(&dword_1AFB53000, v23, OS_LOG_TYPE_INFO, "not deleting %ld items from Spotlight due to override", buf, 0xCu);
      }
    }
  }
  id v25 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v26 = [v25 isSpotlightClientStateEnabled];

  if (!v26)
  {
    id v28 = [NSString stringGUID];
    uint64_t v50 = [v28 dataUsingEncoding:4];
LABEL_27:

    goto LABEL_29;
  }
  if (!v53)
  {
    uint64_t v50 = 0;
    goto LABEL_29;
  }
  id v76 = 0;
  uint64_t v50 = [v53 dataWithError:&v76];
  id v27 = v76;
  if (v27)
  {
    id v28 = v27;
    long long v29 = IMLogHandleForCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
      sub_1AFC6B924((uint64_t)v28);
    }

    goto LABEL_27;
  }
LABEL_29:
  if (IMOSLoggingEnabled())
  {
    long long v30 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = [v56 count];
      long long v32 = NSStringFromIMCoreSpotlightIndexReason();
      *(_DWORD *)uint8_t buf = 134218498;
      uint64_t v89 = v31;
      __int16 v90 = 2112;
      id v91 = v32;
      __int16 v92 = 2112;
      id v93 = v59;
      _os_log_impl(&dword_1AFB53000, v30, OS_LOG_TYPE_INFO, "Indexing %ld searchable items due to %@ - transaction %@", buf, 0x20u);
    }
  }
  if ([v56 count])
  {
    if (qword_1E9AF82C0 != -1) {
      dispatch_once(&qword_1E9AF82C0, &unk_1F084D5D8);
    }
    if (IMOSLoggingEnabled())
    {
      id v33 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = [v56 count];
        *(_DWORD *)uint8_t buf = 134218242;
        uint64_t v89 = v34;
        __int16 v90 = 2112;
        id v91 = v59;
        _os_log_impl(&dword_1AFB53000, v33, OS_LOG_TYPE_INFO, "Donating %ld items to Suggestions with transaction ID %@", buf, 0x16u);
      }
    }
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    obuint64_t j = v56;
    uint64_t v35 = [obj countByEnumeratingWithState:&v72 objects:v87 count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v73;
      do
      {
        for (uint64_t j = 0; j != v35; ++j)
        {
          if (*(void *)v73 != v36) {
            objc_enumerationMutation(obj);
          }
          uint64_t v38 = *(void **)(*((void *)&v72 + 1) + 8 * j);
          if ([MEMORY[0x1E4F6E700] verboseLoggingEnabled]
            && IMOSLoggingEnabled())
          {
            id v39 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              id v40 = [v38 uniqueIdentifier];
              uint64_t v41 = [v38 domainIdentifier];
              *(_DWORD *)uint8_t buf = 138412802;
              uint64_t v89 = (uint64_t)v40;
              __int16 v90 = 2112;
              id v91 = v41;
              __int16 v92 = 2112;
              id v93 = v59;
              _os_log_impl(&dword_1AFB53000, v39, OS_LOG_TYPE_INFO, "Donating item ID %@ domain %@ to Suggestions with transaction ID %@", buf, 0x20u);
            }
          }
          dispatch_group_enter(group);
          uint64_t v42 = (void *)qword_1E9AF82B8;
          v69[0] = MEMORY[0x1E4F143A8];
          v69[1] = 3221225472;
          v69[2] = sub_1AFBE44A8;
          v69[3] = &unk_1E5F96780;
          v69[4] = v38;
          id v70 = v59;
          uint64_t v71 = group;
          [v42 suggestionsFromMessage:v38 options:3 completionHandler:v69];
        }
        uint64_t v35 = [obj countByEnumeratingWithState:&v72 objects:v87 count:16];
      }
      while (v35);
    }
  }
  uint64_t v43 = IMCSIndexReasonFromIMIndexReason();
  v64[0] = MEMORY[0x1E4F143A8];
  v64[1] = 3221225472;
  v64[2] = sub_1AFBE4654;
  v64[3] = &unk_1E5F967A8;
  id v44 = v59;
  id v65 = v44;
  id v66 = v49;
  id v45 = v56;
  id v67 = v45;
  CFNumberRef v68 = group;
  uint64_t v46 = group;
  [v66 endIndexBatchWithExpectedClientState:0 newClientState:v50 reason:v43 completionHandler:v64];
  long long v47 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1AFBE47A0;
  block[3] = &unk_1E5F8FCB0;
  id v61 = v45;
  id v62 = v44;
  id v63 = v51;
  id v48 = v44;
  dispatch_group_notify(v46, v47, block);

  uint64_t v11 = (void (**)(void))v51;
LABEL_54:
}

void sub_1AFBE0BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE0BFC(uint64_t a1)
{
  id v5 = (__CFString *)IMDChatRecordCopyChatForGUID(*(CFStringRef *)(a1 + 32));
  uint64_t v2 = IMCopyIndexableChatDictionaryForRecord(v5, 1);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1AFBE1024(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v12 = 138412290;
        id v13 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Failed to check if we should sanitize indexes, suspending reindexing: %@", (uint8_t *)&v12, 0xCu);
      }
    }
    [*(id *)(a1 + 32) _suspendReindexingDueToError:v3];
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(void))(v6 + 16))();
    }
  }
  else
  {
    if (v4)
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "_sanitizeIndexesForCurrentVersionIfNeeded complete, kicking off standard indexes", (uint8_t *)&v12, 2u);
      }
    }
    [*(id *)(a1 + 32) _setNeedsIndexing:1];
    [*(id *)(a1 + 32) _setNeedsDeferredIndexing:0];
    int v8 = +[IMDSpotlightClientStateManager sharedManager];
    uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F6EA40]) initWithMaxRowID:*(void *)(a1 + 48) totalMessages:*(void *)(a1 + 56)];
    [v8 saveClientState:v9];

    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Beginning message reindexing", (uint8_t *)&v12, 2u);
      }
    }
    [*(id *)(a1 + 32) indexChatsWithReason:*(void *)(a1 + 64)];
    objc_msgSend(*(id *)(a1 + 32), "indexNextMessageBatchIfNeeded:reason:completion:", objc_msgSend(MEMORY[0x1E4F6E700], "reindexFirstBatchSize"), *(void *)(a1 + 64), *(void *)(a1 + 40));
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Finished message reindexing", (uint8_t *)&v12, 2u);
      }
    }
  }
}

uint64_t sub_1AFBE12F4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__sanitizeIndexesForCurrentVersionIfNeeded_);
}

void sub_1AFBE1760(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFBE16F0);
  }
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1AFBE17E8(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  [*(id *)(a1 + 32) stopTimingForKey:@"CSDeleteAllIndexes"];
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void **)(a1 + 32);
      int v8 = 138412290;
      id v9 = v6;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Index deletion complete - %@", (uint8_t *)&v8, 0xCu);
    }
  }
  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        id v9 = v4;
        _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Version mismatch failed to delete all indexes! %@", (uint8_t *)&v8, 0xCu);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1AFBE1978(uint64_t a1)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFBE1A04;
  v4[3] = &unk_1E5F96628;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = v2;
  uint64_t v6 = v3;
  sub_1AFBD5444(v4);
}

uint64_t sub_1AFBE1A04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

uint64_t sub_1AFBE1DB4(uint64_t a1)
{
  [*(id *)(a1 + 32) startTimingForKey:@"copyAllActiveChats"];
  uint64_t active = IMDChatRecordCopyAllActiveChats();
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = active;

  id v5 = *(void **)(a1 + 32);
  return [v5 stopTimingForKey:@"copyAllActiveChats"];
}

void sub_1AFBE2048(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v10 = 134217984;
        uint64_t v11 = [v3 count];
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Indexing %ld chat records", (uint8_t *)&v10, 0xCu);
      }
    }
    if (!IMSharedHelperSpotlightIndexingPreference())
    {
      int v7 = *(void **)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = [v7 searchableIndex];
      [v7 _indexSearchableChatItems:v3 withReason:v6 index:v8 blocking:1];
    }
  }
  else if (v4)
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Failed to get chats to index!", (uint8_t *)&v10, 2u);
    }
  }
}

void sub_1AFBE2540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE2558(uint64_t a1)
{
  uint64_t v2 = IMCopyIndexableChatDictionaryForRecord(*(void **)(a1 + 32), 1);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1AFBE2B5C(uint64_t a1, int *a2)
{
  *(void *)&v30[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *a2;
  unint64_t v6 = [MEMORY[0x1E4F6E700] messageSubBatchSize];
  int v7 = +[IMDSpotlightClientStateManager sharedManager];
  id v26 = 0;
  int v8 = [v7 currentClientStateWithError:&v26];
  id v9 = v26;

  if (v9)
  {
    int v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      sub_1AFC6B9A4();
    }

    [*(id *)(a1 + 32) _suspendReindexingDueToError:v9];
    BOOL v11 = 0;
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v25 = [v8 lastIndexedRowID];
    if (v4 - v5 >= v6) {
      unint64_t v12 = v6;
    }
    else {
      unint64_t v12 = v4 - v5;
    }
    uint64_t v23 = 0;
    id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v14 = (void *)[*(id *)(a1 + 32) _copyNewSearchableIndexesForMessagesWithLastRowID:&v25 messageRecordCount:&v24 messagesWithItemsGeneratedCount:&v23 batchSize:v12 timingCollection:*(void *)(a1 + 40) rejectedItems:v13];
    unint64_t v15 = v24;
    if (v24 < v12 && IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 134218240;
        uint64_t v28 = v24;
        __int16 v29 = 2048;
        *(void *)long long v30 = v12;
        _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "messageRecordCount (%lu) < current sub batch size (%lu). Reaching the end of indexing all message records.", buf, 0x16u);
      }
    }
    [*(id *)(a1 + 40) startTimingForKey:@"CSIngest"];
    LOBYTE(v22) = v15 < v12;
    [*(id *)(a1 + 32) _indexSearchableItems:v14 rejectedItems:v13 clientState:v8 lastIndexedRowID:v25 messagesInBatch:v24 messagesWithItemsGeneratedCount:v23 batchSize:v12 lastBatch:v22 withIndex:*(void *)(a1 + 48) reason:*(void *)(a1 + 64)];
    [*(id *)(a1 + 40) stopTimingForKey:@"CSIngest"];
    *a2 += v12;
    if (IMOSLoggingEnabled())
    {
      uint64_t v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = [v14 count];
        int v19 = *a2;
        int v20 = (*(_DWORD *)(a1 + 56) - v19) & ~((*(_DWORD *)(a1 + 56) - v19) >> 31);
        *(_DWORD *)uint8_t buf = 134218496;
        uint64_t v28 = v18;
        __int16 v29 = 1024;
        *(_DWORD *)long long v30 = v19;
        v30[2] = 1024;
        *(_DWORD *)&void v30[3] = v20;
        _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Indexed %lld items. Batch progress: %d/%d", buf, 0x18u);
      }
    }
    BOOL v11 = v15 >= v12;
  }
  return v11;
}

id sub_1AFBE2F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)[*(id *)(a1 + 32) newSearchableItemsForMessageItemDictionary:a2 chatDictionary:a3 reindexing:1 rejectedItems:*(void *)(a1 + 40)];
  if ([v4 count]) {
    ++**(void **)(a1 + 48);
  }
  return v4;
}

void sub_1AFBE3280(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 64);
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Indexing complete!", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) _setNeedsIndexing:0];
    uint64_t v5 = +[IMSpotlightEventNotifier sharedNotifier];
    [v5 reindexCompletedWithState:*(void *)(a1 + 40) reason:*(void *)(a1 + 48)];
  }
  else if (v3)
  {
    unint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v16 = v7;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "New lastIndexedRowID is %lu", buf, 0xCu);
    }
  }
  if (*(void *)(a1 + 40))
  {
    int v8 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    char v9 = [v8 isSpotlightClientStateEnabled];

    if ((v9 & 1) == 0)
    {
      int v10 = +[IMDSpotlightClientStateManager sharedManager];
      uint64_t v11 = *(void *)(a1 + 40);
      id v14 = 0;
      [v10 saveClientState:v11 withError:&v14];
      id v12 = v14;

      if (v12)
      {
        id v13 = IMLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6BA18();
        }

        [*(id *)(a1 + 32) _suspendReindexingDueToError:v12];
      }
    }
  }
}

void sub_1AFBE3898(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_1AFBE3924;
  v2[3] = &unk_1E5F8E660;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 deleteAllSearchableItemsWithReason:1009 completionHandler:v2];
}

void sub_1AFBE3924(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v15 = v3;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Failed to delete all searchable items upon app deletion with error %@. Defaults and client state will not be cleared.", buf, 0xCu);
      }
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
    }
  }
  else
  {
    unint64_t v6 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    [v6 removePersistentDomainForName:@"com.apple.IMCoreSpotlight"];

    id v7 = objc_alloc_init(MEMORY[0x1E4F6EA40]);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_1AFBE3AE0;
    v10[3] = &unk_1E5F966F0;
    id v11 = v7;
    id v8 = *(id *)(a1 + 32);
    id v12 = 0;
    id v13 = v8;
    id v9 = v7;
    sub_1AFBD5444(v10);
  }
}

uint64_t sub_1AFBE3AE0(uint64_t a1)
{
  int v2 = +[IMDSpotlightClientStateManager sharedManager];
  [v2 saveClientState:*(void *)(a1 + 32)];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

id sub_1AFBE3CA4()
{
  if (qword_1E9AF82A8 != -1) {
    dispatch_once(&qword_1E9AF82A8, &unk_1F084D578);
  }
  uint64_t v0 = (void *)qword_1E9AF82A0;
  return v0;
}

void sub_1AFBE3CF8()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_DEFAULT, 0);

  dispatch_queue_t v1 = dispatch_queue_create("IMDCoreRecentsClientQueue", attr);
  int v2 = (void *)qword_1E9AF82A0;
  qword_1E9AF82A0 = (uint64_t)v1;
}

intptr_t sub_1AFBE3D7C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

Class sub_1AFBE3D84(uint64_t a1)
{
  sub_1AFBE3DDC();
  Class result = objc_getClass("SROSmartRepliesManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6BAE8();
  }
  qword_1EB5ABAB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1AFBE3DDC()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!qword_1EB5ABA70)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = sub_1AFBE3ED0;
    v0[4] = &unk_1E5F8E728;
    v0[5] = v0;
    long long v1 = xmmword_1E5F96710;
    uint64_t v2 = 0;
    qword_1EB5ABA70 = _sl_dlopen();
  }
  if (!qword_1EB5ABA70) {
    sub_1AFC6BB64(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1AFBE3ED0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB5ABA70 = result;
  return result;
}

Class sub_1AFBE3F44(uint64_t a1)
{
  sub_1AFBE3DDC();
  Class result = objc_getClass("SROSmartRepliesMessage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6BBE4();
  }
  qword_1EB5ABAB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1AFBE3F9C(uint64_t a1)
{
  sub_1AFBE3DDC();
  Class result = objc_getClass("SROSmartRepliesSuggestionRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6BC60();
  }
  qword_1EB5ABAC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1AFBE3FF4(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2 && IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "_IMDCoreSpotlightDeleteSearchableItems: deleting for searchable items failed with error %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_1AFBE40CC()
{
  uint64_t result = MEMORY[0x1B3E89B10](@"NRURLResolutionManager", @"NewsURLResolution");
  qword_1E9AF8238 = result;
  return result;
}

void sub_1AFBE40FC(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412802;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      id v10 = v3;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlightIndexSearchableItems: indexing transaction %@ failed with error %@. Using Index %@", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_1AFBE41F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [a2 integerValue];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1AFBE42B8;
  v10[3] = &unk_1E5F96730;
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v5;
  uint64_t v12 = v8;
  id v9 = v5;
  [v6 deleteSearchableItemsWithIdentifiers:v9 reason:v7 completionHandler:v10];
}

void sub_1AFBE42B8(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = [*(id *)(a1 + 32) count];
        uint64_t v7 = NSStringFromIMCoreSpotlightIndexReason();
        int v10 = 134218498;
        uint64_t v11 = v6;
        __int16 v12 = 2112;
        uint64_t v13 = v7;
        __int16 v14 = 2112;
        id v15 = v3;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "IMDCoreSpotlightIndexSearchableItems: failed to delete %ld items for reason %@ due to %@", (uint8_t *)&v10, 0x20u);
      }
LABEL_9:
    }
  }
  else if (v4)
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 32) count];
      id v9 = NSStringFromIMCoreSpotlightIndexReason();
      int v10 = 134218242;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "deleted %ld items for reason %@", (uint8_t *)&v10, 0x16u);
    }
    goto LABEL_9;
  }
}

void sub_1AFBE4444(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBE4410);
  }
  _Unwind_Resume(a1);
}

void sub_1AFBE4468()
{
  uint64_t v0 = [MEMORY[0x1E4F5DB70] serviceForMessages];
  long long v1 = (void *)qword_1E9AF82B8;
  qword_1E9AF82B8 = v0;
}

void sub_1AFBE44A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if ([MEMORY[0x1E4F6E700] verboseLoggingEnabled] && IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = [*(id *)(a1 + 32) uniqueIdentifier];
      id v15 = [*(id *)(a1 + 32) domainIdentifier];
      uint64_t v16 = [v10 count];
      uint64_t v17 = [v11 count];
      uint64_t v18 = *(void *)(a1 + 40);
      int v19 = 138413314;
      int v20 = v14;
      __int16 v21 = 2112;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = v16;
      __int16 v25 = 2048;
      uint64_t v26 = v17;
      __int16 v27 = 2112;
      uint64_t v28 = v18;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Finished donating item ID %@ domain %@ to Suggestions with %ld pseudo-contacts %ld pseudo-events transaction ID %@", (uint8_t *)&v19, 0x34u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1AFBE4654(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    int v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6BCDC(a1);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = [*(id *)(a1 + 48) count];
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = 134218242;
        uint64_t v9 = v6;
        __int16 v10 = 2112;
        uint64_t v11 = v7;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "donation of %ld items to spotlight with transaction ID %@ completed", (uint8_t *)&v8, 0x16u);
      }
    }
    notify_post("com.apple.imdpersistenceagent.notification.spotlightclientstateupdated");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1AFBE47A0(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 32) count];
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = 134218242;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v4;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Finished donating %ld items to Spotlight and Suggestions with transaction ID %@", (uint8_t *)&v6, 0x16u);
    }
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1AFBE489C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t sub_1AFBE4F38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBE4F48(uint64_t a1)
{
}

void sub_1AFBE4F50(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  __int16 v8 = *(void **)(a1 + 32);
  uint64_t v9 = [v7 transferGUID];
  LODWORD(v_Block_object_dispose(&STACK[0x200], 8) = [v8 isEqualToString:v9];

  if (v8)
  {
    if (*(unsigned char *)(a1 + 56) && IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = 136315650;
        __int16 v14 = "+[IMDAttachmentSyndicationUtilities _attachmentGUIDIsSyndicatable:syndicationIdentifier:attachmentUTI:attr"
              "ibutedBody:encodedSyndicationRanges:isCMM:verbose:]_block_invoke";
        __int16 v15 = 2112;
        uint64_t v16 = v11;
        __int16 v17 = 2112;
        uint64_t v18 = v12;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "%s Found corresponding IMMessagePartDescriptor for attachment GUID %@ (syndicationIdentifier %@)", (uint8_t *)&v13, 0x20u);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
    *a4 = 1;
  }
}

id sub_1AFBE5AFC(uint64_t a1, int a2)
{
  if (a2) {
    id v2 = @"sms.db";
  }
  else {
    id v2 = @"sms-temp.db";
  }
  PathToFilename = (void *)IMDSMSRecordStoreCreatePathToFilename(v2);
  return PathToFilename;
}

uint64_t IMDSMSRecordStoreCreatePathToFilename(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x1B3E8A120]();
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [v3 addObject:@"/"];
  [v3 addObject:@"var"];
  [v3 addObject:@"mobile"];
  [v3 addObject:@"Library"];
  [v3 addObject:@"SMS"];
  [v3 addObject:v1];
  uint64_t v4 = [NSString pathWithComponents:v3];

  return v4;
}

uint64_t IMDSMSRecordStoreCreateSMSDBPath(int a1)
{
  return objc_claimAutoreleasedReturnValue();
}

void _IMDSetDatabasePathBlock(const void *a1)
{
  id v1 = _Block_copy(a1);
  id v2 = off_1E9AF77C8;
  off_1E9AF77C8 = v1;
}

void _IMDExecuteBlockForTesting(void *a1)
{
  id v1 = off_1E9AF77C8;
  id v2 = a1;
  aBlock = _Block_copy(v1);
  v2[2](v2);

  id v3 = _Block_copy(aBlock);
  uint64_t v4 = off_1E9AF77C8;
  off_1E9AF77C8 = v3;
}

void *IMDSMSRecordStoreIsDatabaseProtectedAtPath(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 hasSuffix:@"sms.db"];
  }
  return a1;
}

uint64_t IMDSMSRecordStoreCopySMSDBPathWithCreate(int a1)
{
  id v2 = (void *)MEMORY[0x1B3E8A120]();
  id v3 = (*((void (**)(void))off_1E9AF77C8 + 2))();
  uint64_t v4 = v3;
  if (a1)
  {
    [v3 fileSystemRepresentation];
    CSDBGetMobileUserUID();
    CSDBGetMobileUserGID();
    CSDBCreateDirectoriesToPath();
  }
  uint64_t v5 = [v4 stringByResolvingAndStandardizingPath];

  return v5;
}

void IMDSMSRecordStoreInvalidateCaches()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    _IMDPerformLockedMessageStoreBlockWithoutInitialize((uint64_t)&unk_1F084C2E0);
  }
}

uint64_t sub_1AFBE5DE4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return CSDBRecordStoreInvalidateCachesWithStore();
  }
  return result;
}

uint64_t IMDSMSRecordStoreGetSchemaVersion()
{
  uint64_t v7 = 0;
  __int16 v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    IMDSMSRecordStoreUseProtectedDatabase();
    uint64_t v0 = (void *)IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
    id v1 = v0;
    if (v0)
    {
      id v2 = (const char *)[v0 UTF8String];
      if (v2)
      {
        memset(&v6, 0, sizeof(v6));
        if (!stat(v2, &v6)) {
          *((_DWORD *)v8 + 6) = CSDBSqliteUtilitiesGetSchemaVersionAtPathWithProtection();
        }
      }
    }
  }
  else
  {
    v5[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v5[1] = (void (*)(void))3221225472;
    void v5[2] = (void (*)(void))sub_1AFBE5F50;
    v5[3] = (void (*)(void))&unk_1E5F8D580;
    void v5[4] = (void (*)(void))&v7;
    __syncXPCIMDMessageStoreSchemaVersion_IPCAction(v5);
  }
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1AFBE5F28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBE5F50(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = xpc_dictionary_get_uint64(xdict, "uint64_result");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

__CFString *IMDSMSRecordStoreGetSchema()
{
  uint64_t v5 = 0;
  stat v6 = &v5;
  uint64_t v7 = 0x3032000000;
  __int16 v8 = sub_1AFBE6114;
  uint64_t v9 = sub_1AFBE6124;
  id v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1AFBE612C;
    v4[3] = &unk_1E5F8FF50;
    void v4[4] = &v5;
    _IMDPerformLockedStatementBlockWithQuery(@"select type,name,tbl_name,sql from sqlite_master;",
      (uint64_t)v4);
  }
  else
  {
    v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v3[1] = (void (*)(void))3221225472;
    v3[2] = (void (*)(void))sub_1AFBE62F0;
    v3[3] = (void (*)(void))&unk_1E5F8D580;
    void v3[4] = (void (*)(void))&v5;
    __syncXPCIMDMessageStoreSchema_IPCAction(v3);
  }
  uint64_t v0 = (__CFString *)v6[5];
  if (!v0) {
    uint64_t v0 = &stru_1F084E970;
  }
  uint64_t v1 = v0;
  _Block_object_dispose(&v5, 8);

  return v1;
}

void sub_1AFBE60F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBE6114(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBE6124(uint64_t a1)
{
}

uint64_t sub_1AFBE612C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0))
      {
        __int16 v8 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0);
        uint64_t v9 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v8, 0x8000100u);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1))
      {
        id v10 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1);
        uint64_t v11 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v10, 0x8000100u);
      }
      else
      {
        uint64_t v11 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 2))
      {
        uint64_t v12 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 2);
        int v13 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v12, 0x8000100u);
      }
      else
      {
        int v13 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 3))
      {
        __int16 v14 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 3);
        __int16 v15 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v14, 0x8000100u);
      }
      else
      {
        __int16 v15 = 0;
      }
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
        uint64_t v16 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      }
      else {
        uint64_t v16 = &stru_1F084E970;
      }
      uint64_t v17 = [(__CFString *)v16 stringByAppendingFormat:@"<t:%@, n:%@, tn:%@, sql:%@>", v9, v11, v13, v15];
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = v17;

      uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while (result == 100);
  }
  return result;
}

void sub_1AFBE62F0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3 = NSString;
  string = xpc_dictionary_get_string(xdict, "schema");
  if (string) {
    uint64_t v5 = string;
  }
  else {
    uint64_t v5 = "";
  }
  uint64_t v6 = [v3 stringWithCString:v5 encoding:4];
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  __int16 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

uint64_t IMDSMSRecordStoreSetPageCacheSize(uint64_t a1)
{
  uint64_t result = IMDIsRunningInDatabaseServerProcess();
  if (result)
  {
    return MEMORY[0x1F4114DD8](a1);
  }
  return result;
}

uint64_t _IMDSMSRecordStoreSaveAndInvalidateCaches()
{
  return _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1F084C728);
}

uint64_t sub_1AFBE63C4()
{
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(const void *a1)
{
  _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1F084D5F8);
  CFRelease(a1);
}

uint64_t sub_1AFBE6444()
{
  return CSDBRecordSaveStore();
}

void IMDSMSRecordStoreRecordCommitChangesAndRelease(const void *a1)
{
  _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1F084D618);
  CFRelease(a1);
}

uint64_t sub_1AFBE6490()
{
  return CSDBRecordSaveStore();
}

uint64_t IMDSMSRecordStoreCopySMSDBPath()
{
  IMDSMSRecordStoreUseProtectedDatabase();
  return IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
}

uint64_t _IMDCreateDatabasePathIfNecessary()
{
  return IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
}

void IMDSMSRecordStoreSave()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1F084C808);
  }
  else
  {
    __syncXPCIMDMessageStoreSave_IPCAction(0);
  }
}

uint64_t sub_1AFBE6528()
{
  return CSDBRecordSaveStore();
}

uint64_t IMDSMSRecordIsFull()
{
  return 0;
}

uint64_t _IMDSMSRecordStoreCountersGetAllSent()
{
  return sub_1AFBE6540(0);
}

uint64_t sub_1AFBE6540(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2020000000;
  v8[3] = 0;
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBE75D0;
  v3[3] = &unk_1E5F968A0;
  void v3[5] = &v4;
  void v3[6] = a1;
  void v3[4] = v8;
  _IMDPerformLockedDatabaseBlock((uint64_t)v3);
  uint64_t v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  _Block_object_dispose(v8, 8);
  return v1;
}

void sub_1AFBE6608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _IMDSMSRecordStoreCountersGetAllReceived()
{
  return sub_1AFBE6540(1);
}

uint64_t _IMDSMSRecordStoreDataCountersGetLifetimeSent()
{
  return sub_1AFBE6540(2);
}

uint64_t _IMDSMSRecordStoreDataCountersGetLifetimeReceived()
{
  return sub_1AFBE6540(3);
}

uint64_t _IMDSMSRecordStoreCountersReset()
{
  return _IMDPerformLockedConnectionBlock((uint64_t)&unk_1F084D638);
}

void sub_1AFBE6654()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFStringRef v2 = CFStringCreateWithFormat(v0, 0, @"%f", *(void *)&Current);
  CSDBSqliteConnectionBeginTransactionType();
  CSDBSqliteConnectionSetValueForProperty();
  CSDBSqliteConnectionSetValueForProperty();
  CSDBSqliteConnectionSetValueForProperty();
  CSDBSqliteConnectionCommit();
  CFRelease(v2);
}

void _IMDSMSRecordStoreClean()
{
}

uint64_t sub_1AFBE672C()
{
  uint64_t v0 = CSDBSqliteDatabaseConnectionForReading();
  IMDSqliteDatabaseClean(v0);
  return CSDBSqliteDatabaseReleaseSqliteConnection();
}

void IMDSMSRecordStoreClean()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Beginning record store clean.", v1, 2u);
    }
  }
  _IMDPerformLockedDatabaseBlock((uint64_t)&unk_1F084C080);
}

double _IMDSMSRecordStoreCountersGetLastResetTime()
{
  uint64_t v3 = 0;
  uint64_t v4 = (double *)&v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_1AFBE68D4;
  v2[3] = &unk_1E5F96878;
  void v2[4] = &v3;
  _IMDPerformLockedDatabaseBlock((uint64_t)v2);
  double v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1AFBE68BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE68D4(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)CSDBSqliteDatabaseCopyValueForProperty();
  if (v2)
  {
    CFStringRef v3 = v2;
    *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFStringGetDoubleValue(v2);
    CFRelease(v3);
  }
}

BOOL _IMDSMSRecordStoreShouldDeleteStickerFromReferenceCount(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 == -1)
  {
    if (IMOSLoggingEnabled())
    {
      CFStringRef v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(v5) = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Sticker with path is not in use.", (uint8_t *)&v5, 2u);
      }
      goto LABEL_14;
    }
  }
  else
  {
    int v2 = IMOSLoggingEnabled();
    if (a1)
    {
      if (v2)
      {
        CFStringRef v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          int v5 = 134217984;
          uint64_t v6 = a1;
          _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Found %lld sticker(s), path is in use", (uint8_t *)&v5, 0xCu);
        }
LABEL_14:
      }
    }
    else if (v2)
    {
      CFStringRef v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(v5) = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "XPC connection failed, not deleting sticker", (uint8_t *)&v5, 2u);
      }
      goto LABEL_14;
    }
  }
  return a1 == -1;
}

void sub_1AFBE6AB0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFBE6A7CLL);
  }
  _Unwind_Resume(a1);
}

void IMDCleanseOrphanedStickerAttachments()
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    double v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Beginning sticker attachment cleanse.", buf, 2u);
    }
  }
  uint64_t v26 = IMStickerCacheDirectoryURL();
  __int16 v25 = [v26 path];
  id v1 = [v25 stringByResolvingAndStandardizingPath];
  int v2 = IMOSLoggingEnabled();
  if (v1)
  {
    if (v2)
    {
      CFStringRef v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        id v37 = v1;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Sticker cache path %@", buf, 0xCu);
      }
    }
    uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v33 = 0;
    __int16 v23 = [v4 contentsOfDirectoryAtPath:v1 error:&v33];
    id v24 = v33;

    if (v24)
    {
      if (IMOSLoggingEnabled())
      {
        int v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412546;
          id v37 = v1;
          __int16 v38 = 2112;
          id v39 = v24;
          _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Attachments. Error getting contents of directory %@ error %@", buf, 0x16u);
        }
      }
    }
    else
    {
      uint64_t v7 = [v1 lastPathComponent];
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      obuint64_t j = v23;
      uint64_t v8 = [obj countByEnumeratingWithState:&v29 objects:buf count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v30;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v30 != v9) {
              objc_enumerationMutation(obj);
            }
            uint64_t v11 = *(void *)(*((void *)&v29 + 1) + 8 * i);
            uint64_t v12 = objc_msgSend(v7, "stringByAppendingPathComponent:", v11, v23);
            int v13 = [v12 stringByAppendingString:@"%"];

            __int16 v14 = [@"%" stringByAppendingString:v13];

            if (IMOSLoggingEnabled())
            {
              __int16 v15 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint64_t v34 = 138412290;
                uint64_t v35 = v14;
                _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Searching db for filename: %@", v34, 0xCu);
              }
            }
            uint64_t HaveAttachments = IMDAttachmentRecordDoesStickerPathHaveAttachments(v14);
            uint64_t v17 = [v1 stringByAppendingPathComponent:v11];
            uint64_t v18 = [v17 stringByResolvingAndStandardizingPath];

            if (_IMDSMSRecordStoreShouldDeleteStickerFromReferenceCount(HaveAttachments))
            {
              if (IMOSLoggingEnabled())
              {
                uint64_t v19 = OSLogHandleForIMEventCategory();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v34 = 138412290;
                  uint64_t v35 = v18;
                  _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Will delete %@", v34, 0xCu);
                }
              }
              int v20 = [MEMORY[0x1E4F28CB8] defaultManager];
              id v28 = 0;
              [v20 removeItemAtPath:v18 error:&v28];
              id v21 = v28;

              if (v21 && IMOSLoggingEnabled())
              {
                uint64_t v22 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v34 = 138412290;
                  uint64_t v35 = v18;
                  _os_log_impl(&dword_1AFB53000, v22, OS_LOG_TYPE_INFO, "Attachments. Could not delete sticker at path %@", v34, 0xCu);
                }
              }
            }
          }
          uint64_t v8 = [obj countByEnumeratingWithState:&v29 objects:buf count:16];
        }
        while (v8);
      }
    }
  }
  else if (v2)
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Attachments _IMDCleanseOrpanedStickersInStickerCachePath nil stickerCachePath", buf, 2u);
    }
  }
}

void IMDCleanseBrowserSnapshots()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    double v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Beginning browser snapshot deletion", buf, 2u);
    }
  }
  id v1 = IMBrowserSnapshotCacheDirectoryURL();
  int v2 = [v1 path];

  CFStringRef v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v6 = 0;
  [v3 removeItemAtPath:v2 error:&v6];
  id v4 = v6;

  if (v4 && IMOSLoggingEnabled())
  {
    int v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      uint64_t v8 = v2;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Attachments. Could not delete browser snapshot cache at path %@", buf, 0xCu);
    }
  }
}

BOOL IMDPersistenceProtectionMerge_UnprotectedDatabaseExists()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  (*((void (**)(void))off_1E9AF77C8 + 2))();
  memset(&v6, 0, sizeof(v6));
  id v0 = objc_claimAutoreleasedReturnValue();
  int v1 = stat((const char *)objc_msgSend(v0, "UTF8String", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                         0,
                         0),
         &v6);
  if ((!v1 || *__error() != 2) && IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [v0 UTF8String];
      id v4 = "NO";
      *(_DWORD *)uint8_t buf = 136315650;
      uint64_t v8 = v3;
      if (!v1) {
        id v4 = "YES";
      }
      __int16 v9 = 2080;
      id v10 = v4;
      __int16 v11 = 1024;
      int v12 = v1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "ProtectionMerge: unprotected database: %s, found: %s, error: %d\n", buf, 0x1Cu);
    }
  }
  return v1 == 0;
}

BOOL IMDPersistenceProtectionMerge_DeleteUnprotectedDatabase()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v0 = (*((void (**)(void))off_1E9AF77C8 + 2))();
  int v1 = (void *)[[NSString alloc] initWithFormat:@"%@-shm", v0];
  int v2 = (void *)[[NSString alloc] initWithFormat:@"%@-wal", v0];
  id v3 = v1;
  id v4 = (const std::__fs::filesystem::path *)[v3 UTF8String];
  remove(v4, v5);
  id v6 = v2;
  uint64_t v7 = (const std::__fs::filesystem::path *)[v6 UTF8String];
  remove(v7, v8);
  id v9 = v0;
  id v10 = (const std::__fs::filesystem::path *)[v9 UTF8String];
  BOOL v12 = remove(v10, v11);
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = [v9 UTF8String];
      __int16 v15 = "NO";
      *(_DWORD *)uint8_t buf = 136315650;
      uint64_t v18 = v14;
      if (!v12) {
        __int16 v15 = "YES";
      }
      __int16 v19 = 2080;
      int v20 = v15;
      __int16 v21 = 1024;
      BOOL v22 = v12;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "ProtectionMerge: unprotected database: %s, deleted: %s, error: %d\n", buf, 0x1Cu);
    }
  }
  return !v12;
}

uint64_t IMDPersistenceProtectionMerge_CurrentlyUsingUnprotectedDatabase()
{
  id v0 = IMDSharedSqliteDatabasePath();
  int v1 = (*((void (**)(void))off_1E9AF77C8 + 2))();
  uint64_t v2 = [v0 isEqualToString:v1];

  return v2;
}

void sub_1AFBE75D0(void *a1)
{
  unint64_t v2 = a1[6];
  if (v2 <= 3) {
    *(void *)(*(void *)(a1[4] + 8) + 24) = off_1E5F968C0[v2];
  }
  CFStringRef v3 = (const __CFString *)CSDBSqliteDatabaseCopyValueForProperty();
  if (v3)
  {
    CFStringRef v4 = v3;
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) += CFStringGetIntValue(v3);
    CFRelease(v4);
  }
}

void sub_1AFBE76BC()
{
  id v0 = objc_alloc_init(IMDDonationManager);
  int v1 = (void *)qword_1EB5ABCF8;
  qword_1EB5ABCF8 = (uint64_t)v0;
}

uint64_t sub_1AFBE7C4C(uint64_t a1)
{
  return dword_1EB5ABC18[a1];
}

uint64_t IMDAttachmentRecordGetTypeID()
{
  return qword_1EB5ABC78;
}

uint64_t sub_1AFBE7C94()
{
  qword_1EB5ABC78 = _CFRuntimeRegisterClass();
  id v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  int v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5F96948, 23);
  uint64_t v2 = 0;
  CFStringRef v3 = &off_1E5F96948;
  do
  {
    v3 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed();
    dword_1EB5ABC18[v2++] = result;
  }
  while (v2 != 23);
  return result;
}

const void *IMDAttachmentRecordCreate(uint64_t a1, uint64_t a2, uint8_t *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    pthread_once(&stru_1EB5AAAF8, (void (*)(void))sub_1AFBE7C94);
    uint64_t Instance = _CFRuntimeCreateInstance();
    __int16 v25 = (const void *)Instance;
    if (Instance)
    {
      *(void *)(Instance + 16) = 0;
      uint64_t v34 = (void *)(Instance + 16);
      *(void *)(Instance + 24) = 0;
      uint64_t v26 = IMLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v26, OS_LOG_TYPE_INFO, "_IMDAttachmentRecordCreate()", buf, 2u);
      }
      IMDEnsureSharedRecordStoreInitialized();
      uint64_t v28 = a12;
      uint64_t v27 = a14;
      long long v29 = (const void *)CSDBRecordCreate();
      if (v29)
      {
        if (a12) {
          uint64_t v28 = JWEncodeDictionary();
        }
        if (a14) {
          uint64_t v27 = JWEncodeDictionary();
        }
        if (a15) {
          uint64_t v30 = JWEncodeDictionary();
        }
        else {
          uint64_t v30 = 0;
        }
        *(void *)uint8_t buf = a2;
        id v44 = a3;
        uint64_t v45 = a4;
        uint64_t v32 = 0;
        uint64_t v46 = [a6 stringByAbbreviatingWithTildeInPath];
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        uint64_t v49 = a9;
        uint64_t v50 = a10;
        uint64_t v51 = v28;
        uint64_t v52 = a5;
        uint64_t v53 = a11;
        uint64_t v54 = a13;
        uint64_t v55 = v27;
        uint64_t v56 = v30;
        uint64_t v57 = a16;
        uint64_t v58 = a17;
        uint64_t v59 = a18;
        uint64_t v60 = a19;
        uint64_t v61 = a20;
        int64_t v62 = a21;
        uint64_t v63 = a22;
        uint64_t v64 = a23;
        uint64_t v65 = a24;
        do
        {
          CSDBRecordSetProperty();
          v32 += 8;
        }
        while (v32 != 184);
        if (IMDAttachmentRecordAddAttachment((uint64_t)v29))
        {
          *uint64_t v34 = (int)CSDBRecordGetID();
        }
        else
        {
          CFRelease(v25);
          __int16 v25 = 0;
        }
        CFRelease(v29);
        IMDAttachmentRecordDoubleCheckSize(a6, a11);
      }
      else
      {
        long long v31 = IMLogHandleForCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6BE78(v31);
        }
        CFRelease(v25);
        return 0;
      }
    }
  }
  else
  {
    *(void *)uint8_t buf = 0;
    id v44 = buf;
    uint64_t v45 = 0x2020000000;
    uint64_t v46 = 0;
    v42[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v42[1] = (void (*)(void))3221225472;
    v42[2] = (void (*)(void))sub_1AFBE8148;
    v42[3] = (void (*)(void))&unk_1E5F8D580;
    v42[4] = (void (*)(void))buf;
    __syncXPCIMDAttachmentRecordCreate_IPCAction(v42, a2, (int)a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10 != 0, a11, a12, a13 != 0, a14, a15, a16 != 0, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24);
    __int16 v25 = (const void *)*((void *)v44 + 3);
    _Block_object_dispose(buf, 8);
  }
  return v25;
}

void sub_1AFBE8128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t sub_1AFBE8148(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDAttachmentRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDCopyIMDAttachmentRecordFromXPCObjectClient(void *a1)
{
  if (xpc_dictionary_get_count(a1) < 3) {
    return 0;
  }
  pthread_once(&stru_1EB5AAAF8, (void (*)(void))sub_1AFBE7C94);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v2 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    CFIndex v4 = 23;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 23, 0);
    do
    {
      CFArrayAppendValue(Mutable, 0);
      --v4;
    }
    while (v4);
    id v6 = &qword_1E5F96958;
    do
    {
      uint64_t v7 = *v6;
      switch(*(v6 - 1))
      {
        case 0:
        case 3:
          uint64_t v8 = IMGetXPCIntFromDictionary();
          goto LABEL_12;
        case 1:
          uint64_t v8 = IMGetXPCStringFromDictionary();
          goto LABEL_12;
        case 2:
          uint64_t v8 = IMGetXPCDataFromDictionary();
LABEL_12:
          id v9 = (const void *)v8;
          break;
        default:
          id v9 = 0;
          break;
      }
      if (CFArrayGetValueAtIndex(Mutable, v4))
      {
        if (v7)
        {
          id v10 = *(void (**)(void))(v7 + 8);
          if (v10) {
            v10();
          }
        }
      }
      if (v9 && v7 && *(void *)v7) {
        id v9 = (const void *)(*(uint64_t (**)(const void *))v7)(v9);
      }
      CFArraySetValueAtIndex(Mutable, v4++, v9);
      v6 += 5;
    }
    while (v4 != 23);
    *(void *)(v2 + 24) = Mutable;
    *(void *)(v2 + 16) = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

const void *IMDAttachmentRecordCreateFromRecordID(uint64_t a1, uint64_t a2)
{
  return sub_1AFBE8330(a1, a2, 1);
}

const void *sub_1AFBE8330(uint64_t a1, uint64_t a2, int a3)
{
  pthread_once(&stru_1EB5AAAF8, (void (*)(void))sub_1AFBE7C94);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 0;
  }
  id v6 = (const void *)Instance;
  *(void *)(Instance + 16) = a2;
  *(void *)(Instance + 24) = 0;
  if (a3) {
    uint64_t v7 = (const void *)IMDAttachmentRecordCopyAttachmentRecord(a2);
  }
  else {
    uint64_t v7 = (const void *)IMDAttachmentRecordCopyAttachmentRecordUnlocked(a2);
  }
  if (v7)
  {
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

const void *IMDAttachmentRecordCreateFromRecordIDUnlocked(uint64_t a1, uint64_t a2)
{
  return sub_1AFBE8330(a1, a2, 0);
}

uint64_t IMDAttachmentRecordIsSticker(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
      unsigned __int8 v2 = ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        return ((unsigned __int8 (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      char v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE8508;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      unsigned __int8 v2 = *((unsigned char *)v14 + 24);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    CFStringRef v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6BEBC(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE84F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE8508(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFStringRef v3 = (const void *)v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 16);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = 138412290;
      uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL attachment record: %@", (uint8_t *)&v3, 0xCu);
    }
  }
  return 0;
}

uint64_t IMDAttachmentRecordCopyGUID(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6BF34(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    char v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBE8784;
    v14[3] = &unk_1E5F90178;
    void v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBE876C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE8784(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetCreatedDate(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        LODWORD(ValueAtIndex) = ((uint64_t (*)(void))*MEMORY[0x1E4F5D038])();
      }
      return (int)ValueAtIndex;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      int v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE8918;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      uint64_t v2 = *((int *)v14 + 6);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6BFAC(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE8900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE8918(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetStartDate(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        LODWORD(ValueAtIndex) = ((uint64_t (*)(void))*MEMORY[0x1E4F5D038])();
      }
      return (int)ValueAtIndex;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      int v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE8AAC;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      uint64_t v2 = *((int *)v14 + 6);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C024(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE8A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE8AAC(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetIsOutgoing(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
      unsigned __int8 v2 = ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        return ((unsigned __int8 (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      char v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE8C48;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      unsigned __int8 v2 = *((unsigned char *)v14 + 24);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C09C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE8C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE8C48(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

id IMDAttachmentRecordCopyFilename(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2)
  {
    uint64_t v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C114(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  CFArrayRef v4 = *(const __CFArray **)(a2 + 24);
  if (!v4)
  {
    uint64_t v21 = 0;
    BOOL v22 = &v21;
    uint64_t v23 = 0x2020000000;
    uint64_t v24 = 0;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_1AFBE8E60;
    v20[3] = &unk_1E5F90178;
    void v20[4] = &v21;
    v20[5] = a2;
    _IMDPerformBlock((uint64_t)v20);
    uint64_t v17 = (void *)v22[3];
    if (v17)
    {
      uint64_t v18 = (void *)[v17 stringByResolvingAndStandardizingPath];
      __int16 v19 = (const void *)v22[3];
      if (v19)
      {
        CFRelease(v19);
        v22[3] = 0;
      }
      if (a3) {
        uint64_t v18 = objc_msgSend(v18, "__im_filePathWithVariant:", *MEMORY[0x1E4F6D4D0]);
      }
      id v16 = (id)objc_msgSend(v18, "__im_apfsCompatibleFilename");
      v22[3] = (uint64_t)v16;
    }
    else
    {
      id v16 = 0;
    }
    _Block_object_dispose(&v21, 8);
    return v16;
  }
  CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, 3);
  if (!ValueAtIndex) {
    return 0;
  }
  if (a3) {
    CFNumberRef ValueAtIndex = objc_msgSend(ValueAtIndex, "__im_filePathWithVariant:", *MEMORY[0x1E4F6D4D0]);
  }
  uint64_t v6 = objc_msgSend((id)objc_msgSend(ValueAtIndex, "stringByResolvingAndStandardizingPath"), "__im_apfsCompatibleFilename");
  return v6;
}

void sub_1AFBE8E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE8E60(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyTransferName(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C18C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBE900C;
    v14[3] = &unk_1E5F90178;
    void v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 9);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  CFArrayRef v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBE8FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE900C(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyUTIType(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C204(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBE91B8;
    v14[3] = &unk_1E5F90178;
    void v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFNumberRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 4);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  CFArrayRef v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBE91A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE91B8(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

CFDataRef IMDAttachmentRecordCopyAttributionInfo(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C27C(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1AFBE936C;
    v15[3] = &unk_1E5F90178;
    v15[4] = &v16;
    v15[5] = a2;
    _IMDPerformBlock((uint64_t)v15);
    CFDataRef v4 = (const __CFData *)v17[3];
    _Block_object_dispose(&v16, 8);
    return v4;
  }
  CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v2, 13);
  CFDataRef v4 = ValueAtIndex;
  if (!ValueAtIndex) {
    return v4;
  }
  if (CFDataGetLength(ValueAtIndex) < 1) {
    return 0;
  }
  uint64_t v5 = (const void *)JWDecodeDictionary();
  if (!v5) {
    return 0;
  }
  return (const __CFData *)CFRetain(v5);
}

void sub_1AFBE9354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE936C(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    CFDataRef v4 = (const __CFData *)CSDBRecordCopyProperty();
    if (v4)
    {
      CFDataRef v5 = v4;
      if (CFDataGetLength(v4) < 1)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = (const void *)JWDecodeDictionary();
        if (v6) {
          uint64_t v6 = CFRetain(v6);
        }
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
      CFRelease(v5);
    }
    else
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    CFRelease(v3);
  }
}

CFDataRef IMDAttachmentRecordCopyUserInfo(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C2F4(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1AFBE9570;
    v15[3] = &unk_1E5F90178;
    v15[4] = &v16;
    v15[5] = a2;
    _IMDPerformBlock((uint64_t)v15);
    CFDataRef v4 = (const __CFData *)v17[3];
    _Block_object_dispose(&v16, 8);
    return v4;
  }
  CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v2, 8);
  CFDataRef v4 = ValueAtIndex;
  if (!ValueAtIndex) {
    return v4;
  }
  if (CFDataGetLength(ValueAtIndex) < 1) {
    return 0;
  }
  CFDataRef v5 = (const void *)JWDecodeDictionary();
  if (!v5) {
    return 0;
  }
  return (const __CFData *)CFRetain(v5);
}

void sub_1AFBE9558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE9570(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    CFDataRef v4 = (const __CFData *)CSDBRecordCopyProperty();
    if (v4)
    {
      CFDataRef v5 = v4;
      if (CFDataGetLength(v4) < 1)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = (const void *)JWDecodeDictionary();
        if (v6) {
          uint64_t v6 = CFRetain(v6);
        }
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
      CFRelease(v5);
    }
    else
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyMIMEType(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C36C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBE976C;
    v14[3] = &unk_1E5F90178;
    void v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFDataRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 5);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  CFDataRef v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBE9754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE976C(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetTransferState(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 6);
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        LODWORD(ValueAtIndex) = ((uint64_t (*)(void))*MEMORY[0x1E4F5D038])();
      }
      return (int)ValueAtIndex;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      int v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE9900;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      uint64_t v2 = *((int *)v14 + 6);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C3E4(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE98E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE9900(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetTotalBytes(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
      uint64_t v2 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        return ((uint64_t (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      uint64_t v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE9A9C;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      uint64_t v2 = v14[3];
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C45C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE9A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE9A9C(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetCommSafetySensitive(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
      uint64_t v2 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E4F5D038]) {
        return ((uint64_t (*)(const void *))*MEMORY[0x1E4F5D038])(ValueAtIndex);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      uint64_t v16 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFBE9C38;
      v12[3] = &unk_1E5F90178;
      void v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      uint64_t v2 = v14[3];
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    int v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C4D4(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0;
  }
  return v2;
}

void sub_1AFBE9C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE9C38(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyEmojiImageContentIdentifier(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C54C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBE9DE4;
    v14[3] = &unk_1E5F90178;
    void v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFDataRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 20);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBE9DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE9DE4(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyEmojiImageShortDescription(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C5C4(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFBE9F90;
    v14[3] = &unk_1E5F90178;
    void v14[4] = &v15;
    v14[5] = a2;
    _IMDPerformBlock((uint64_t)v14);
    CFDataRef ValueAtIndex = (const void *)v16[3];
    _Block_object_dispose(&v15, 8);
    return (uint64_t)ValueAtIndex;
  }
  CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 21);
  if (!ValueAtIndex) {
    return (uint64_t)ValueAtIndex;
  }
  uint64_t v4 = (uint64_t (*)(void))*MEMORY[0x1E4F5D048];
  if (!*MEMORY[0x1E4F5D048]) {
    return (uint64_t)ValueAtIndex;
  }
  return v4();
}

void sub_1AFBE9F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBE9F90(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

void _IMDAttachmentRecordBulkCopy(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, unsigned char *a10, void *a11, void *a12, unsigned char *a13, void *a14, void *a15, unsigned char *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  if (a1)
  {
    __int16 v25 = a6;
    uint64_t v28 = a15;
    long long v29 = a12;
    CFArrayRef v30 = *(const __CFArray **)(a1 + 24);
    if (v30)
    {
      if (a2)
      {
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v30, 0);
        uint64_t v32 = ValueAtIndex;
        if (ValueAtIndex) {
          CFRetain(ValueAtIndex);
        }
        *a2 = v32;
        uint64_t v28 = a15;
        long long v29 = a12;
        __int16 v25 = a6;
      }
      if (a7)
      {
        id v33 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
        uint64_t v34 = v33;
        if (v33) {
          CFRetain(v33);
        }
        *a7 = v34;
      }
      if (a8)
      {
        uint64_t v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 5);
        uint64_t v36 = v35;
        if (v35) {
          CFRetain(v35);
        }
        *a8 = v36;
      }
      if (a5)
      {
        id v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 9);
        __int16 v38 = v37;
        if (v37) {
          CFRetain(v37);
        }
        *a5 = v38;
      }
      if (a3) {
        *a3 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
      }
      if (a4) {
        *a4 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
      }
      if (a9) {
        *a9 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 6);
      }
      if (a10) {
        *a10 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
      }
      if (a11) {
        *a11 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
      }
      if (a13) {
        *a13 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
      }
      if (a16) {
        *a16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 14);
      }
      if (a17) {
        *a17 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 15);
      }
      if (a18)
      {
        id v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 16);
        uint64_t v40 = v39;
        if (v39) {
          CFRetain(v39);
        }
        *a18 = v40;
      }
      if (a19)
      {
        uint64_t v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 17);
        uint64_t v42 = v41;
        if (v41) {
          CFRetain(v41);
        }
        *a19 = v42;
      }
      if (a20)
      {
        uint64_t v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 18);
        id v44 = v43;
        if (v43) {
          CFRetain(v43);
        }
        *a20 = v44;
      }
      if (a21) {
        *a21 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
      }
      if (a22)
      {
        uint64_t v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 20);
        uint64_t v46 = v45;
        if (v45) {
          CFRetain(v45);
        }
        *a22 = v46;
      }
      if (a23)
      {
        uint64_t v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 21);
        uint64_t v48 = v47;
        if (v47) {
          CFRetain(v47);
        }
        *a23 = v48;
      }
      if (v25)
      {
        id v49 = (id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 3);
        if (v49) {
          id v49 = (id)objc_msgSend((id)objc_msgSend(v49, "stringByExpandingTildeInPath"), "__im_apfsCompatibleFilename");
        }
        void *v25 = v49;
      }
      if (v29)
      {
        uint64_t v50 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 8);
        if (v50)
        {
          if (CFDataGetLength((CFDataRef)v50) < 1)
          {
            uint64_t v50 = 0;
          }
          else
          {
            uint64_t v50 = (const void *)JWDecodeDictionary();
            if (v50) {
              uint64_t v50 = CFRetain(v50);
            }
          }
        }
        *long long v29 = v50;
      }
      if (a14)
      {
        uint64_t v59 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 12);
        if (v59)
        {
          if (CFDataGetLength((CFDataRef)v59) < 1)
          {
            uint64_t v59 = 0;
          }
          else
          {
            uint64_t v59 = (const void *)JWDecodeDictionary();
            if (v59) {
              uint64_t v59 = CFRetain(v59);
            }
          }
        }
        *a14 = v59;
      }
      if (v28)
      {
        uint64_t v60 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 13);
        if (v60)
        {
          if (CFDataGetLength((CFDataRef)v60) < 1)
          {
            uint64_t v60 = 0;
          }
          else
          {
            uint64_t v60 = (const void *)JWDecodeDictionary();
            if (v60) {
              uint64_t v60 = CFRetain(v60);
            }
          }
        }
        *uint64_t v28 = v60;
      }
    }
    else
    {
      v65[0] = MEMORY[0x1E4F143A8];
      v65[1] = 3221225472;
      v65[2] = sub_1AFBEA4A4;
      v65[3] = &unk_1E5F968E0;
      v65[4] = a1;
      v65[5] = a2;
      v65[6] = a6;
      v65[7] = a7;
      v65[8] = a5;
      v65[9] = a8;
      v65[10] = a12;
      v65[11] = a14;
      v65[12] = a15;
      v65[13] = a3;
      v65[14] = a4;
      v65[15] = a9;
      v65[16] = a10;
      v65[17] = a13;
      v65[18] = a11;
      v65[19] = a16;
      v65[20] = a17;
      v65[21] = a18;
      v65[22] = a19;
      v65[23] = a20;
      v65[24] = a21;
      v65[25] = a22;
      v65[26] = a23;
      _IMDPerformBlock((uint64_t)v65);
    }
  }
  else
  {
    uint64_t v51 = IMLogHandleForCategory();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C63C(v51, v52, v53, v54, v55, v56, v57, v58);
    }
  }
}

void sub_1AFBEA4A4(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 48))
    {
      uint64_t v4 = (void *)CSDBRecordCopyProperty();
      if (v4)
      {
        uint64_t v5 = v4;
        id v6 = (id)objc_msgSend((id)objc_msgSend(v4, "stringByResolvingAndStandardizingPath"), "__im_apfsCompatibleFilename");
        CFRelease(v5);
      }
      else
      {
        id v6 = 0;
      }
      **(void **)(a1 + 4_Block_object_dispose(&STACK[0x200], 8) = v6;
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 64))
    {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty();
      if (!**(void **)(a1 + 64))
      {
        uint64_t v7 = (void *)CSDBRecordCopyProperty();
        if (v7)
        {
          uint64_t v8 = v7;
          **(void **)(a1 + 64) = (id)objc_msgSend((id)objc_msgSend(v7, "lastPathComponent"), "__im_apfsCompatibleFilename");
          CFRelease(v8);
        }
      }
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 80))
    {
      CFDataRef v9 = (const __CFData *)CSDBRecordCopyProperty();
      if (v9)
      {
        CFDataRef v10 = v9;
        if (CFDataGetLength(v9) < 1)
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = (const void *)JWDecodeDictionary();
          if (v11) {
            uint64_t v11 = CFRetain(v11);
          }
        }
        **(void **)(a1 + 80) = v11;
        CFRelease(v10);
      }
      else
      {
        **(void **)(a1 + 80) = 0;
      }
    }
    if (*(void *)(a1 + 88))
    {
      CFDataRef v12 = (const __CFData *)CSDBRecordCopyProperty();
      if (v12)
      {
        CFDataRef v13 = v12;
        if (CFDataGetLength(v12) < 1)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = (const void *)JWDecodeDictionary();
          if (v14) {
            uint64_t v14 = CFRetain(v14);
          }
        }
        **(void **)(a1 + 8_Block_object_dispose(&STACK[0x200], 8) = v14;
        CFRelease(v13);
      }
      else
      {
        **(void **)(a1 + 8_Block_object_dispose(&STACK[0x200], 8) = 0;
      }
    }
    if (*(void *)(a1 + 96))
    {
      CFDataRef v15 = (const __CFData *)CSDBRecordCopyProperty();
      if (v15)
      {
        CFDataRef v16 = v15;
        if (CFDataGetLength(v15) < 1)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = (const void *)JWDecodeDictionary();
          if (v17) {
            uint64_t v17 = CFRetain(v17);
          }
        }
        **(void **)(a1 + 96) = v17;
        CFRelease(v16);
      }
      else
      {
        **(void **)(a1 + 96) = 0;
      }
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = (int)CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 128)) {
      **(unsigned char **)(a1 + 12_Block_object_dispose(&STACK[0x200], 8) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 136)) {
      **(unsigned char **)(a1 + 136) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 144)) {
      **(void **)(a1 + 144) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 152)) {
      **(unsigned char **)(a1 + 152) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 160)) {
      **(void **)(a1 + 160) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 168)) {
      **(void **)(a1 + 16_Block_object_dispose(&STACK[0x200], 8) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 176)) {
      **(void **)(a1 + 176) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 184)) {
      **(void **)(a1 + 184) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 192)) {
      **(void **)(a1 + 192) = CSDBRecordGetProperty();
    }
    if (*(void *)(a1 + 200)) {
      **(void **)(a1 + 200) = CSDBRecordCopyProperty();
    }
    if (*(void *)(a1 + 208)) {
      **(void **)(a1 + 20_Block_object_dispose(&STACK[0x200], 8) = CSDBRecordCopyProperty();
    }
    CFRelease(v3);
  }
}

__n128 IMDAttachmentRecordBulkCopy(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, unsigned char *a10, void *a11, void *a12, unsigned char *a13, void *a14, void *a15, unsigned char *a16, void *a17, void *a18, void *a19, void *a20)
{
  _IMDAttachmentRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    0,
    0,
    0);
  return result;
}

__n128 IMDAttachmentRecordBulkCopyForPhotos(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, unsigned char *a10, void *a11, void *a12, unsigned char *a13, void *a14, void *a15, unsigned char *a16, void *a17, void *a18, void *a19, void *a20)
{
  _IMDAttachmentRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    0,
    0,
    0);
  return result;
}

void IMDAttachmentRecordBulkUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      __int16 v25 = a15;
      uint64_t v24 = a24;
      if (a24 == 3 || IMFileTransferAttributionInfoHasLegacyState())
      {
        uint64_t v26 = a7;
        uint64_t v24 = IMFileTransferPreviewGenerationStateWithStoredState();
        if (a15)
        {
          uint64_t v27 = (void *)[a15 mutableCopy];
          [v27 removeObjectForKey:*MEMORY[0x1E4F6D418]];
          if ([v27 count])
          {
            __int16 v25 = (const void *)[v27 copy];
            CFAutorelease(v25);
          }
          else
          {
            __int16 v25 = 0;
          }
          CFRelease(v27);
          uint64_t v36 = a6;
          uint64_t v50 = a8;
          uint64_t v38 = a17;
          uint64_t v37 = a5;
          uint64_t v41 = a20;
          int64_t v40 = a21;
          uint64_t v42 = a4;
          uint64_t v39 = a2;
          uint64_t v45 = a18;
          uint64_t v44 = a19;
          uint64_t v43 = a3;
          uint64_t v47 = a22;
          uint64_t v46 = a23;
          uint64_t v49 = a12;
          uint64_t v48 = a14;
          goto LABEL_18;
        }
        uint64_t v37 = a5;
        uint64_t v36 = a6;
        uint64_t v39 = a2;
        uint64_t v38 = a17;
        uint64_t v41 = a20;
        int64_t v40 = a21;
        uint64_t v43 = a3;
        uint64_t v42 = a4;
        uint64_t v45 = a18;
        uint64_t v44 = a19;
        uint64_t v47 = a22;
        uint64_t v46 = a23;
        uint64_t v48 = a14;
      }
      else
      {
        uint64_t v37 = a5;
        uint64_t v36 = a6;
        uint64_t v39 = a2;
        uint64_t v38 = a17;
        uint64_t v41 = a20;
        int64_t v40 = a21;
        uint64_t v43 = a3;
        uint64_t v42 = a4;
        uint64_t v45 = a18;
        uint64_t v44 = a19;
        uint64_t v47 = a22;
        uint64_t v46 = a23;
        uint64_t v48 = a14;
        uint64_t v26 = a7;
      }
      uint64_t v49 = a12;
      uint64_t v50 = a8;
LABEL_18:
      v59[0] = MEMORY[0x1E4F143A8];
      v59[1] = 3221225472;
      v59[2] = sub_1AFBEAC94;
      v59[3] = &unk_1E5F96900;
      v59[4] = a1;
      v59[5] = v43;
      v59[6] = v42;
      v59[7] = a9;
      char v60 = a10;
      char v61 = a13;
      char v62 = a16;
      v59[8] = a11;
      v59[9] = v24;
      v59[10] = v39;
      v59[11] = v36;
      v59[12] = v37;
      v59[13] = v26;
      v59[14] = v50;
      v59[15] = v49;
      v59[16] = v48;
      v59[17] = v25;
      v59[18] = v38;
      v59[19] = v45;
      v59[20] = v44;
      v59[21] = v41;
      v59[22] = v40;
      v59[23] = v47;
      v59[24] = v46;
      _IMDPerformBlock((uint64_t)v59);
      return;
    }
    __syncXPCIMDAttachmentRecordBulkUpdate_IPCAction(0, a2, a3, a4, a5, a6, a7, a8, a9, a10 != 0, a11, a12, a13 != 0, a14, (uint64_t)a15, a16 != 0, a17, a18, a19,
      a20,
      a21,
      a24);
  }
  else
  {
    uint64_t v28 = IMLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C6B4(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }
}

void sub_1AFBEAC94(void *a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(a1[4] + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[10]) {
      CSDBRecordSetProperty();
    }
    uint64_t v4 = (void *)a1[11];
    if (v4)
    {
      [v4 stringByAbbreviatingWithTildeInPath];
      CSDBRecordSetProperty();
    }
    uint64_t v5 = (void *)a1[12];
    if (v5)
    {
      [v5 lastPathComponent];
      CSDBRecordSetProperty();
    }
    if (a1[13]) {
      CSDBRecordSetProperty();
    }
    if (a1[14]) {
      CSDBRecordSetProperty();
    }
    if (a1[15])
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (a1[16])
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (a1[17])
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    if (a1[19]) {
      CSDBRecordSetProperty();
    }
    if (a1[20]) {
      CSDBRecordSetProperty();
    }
    if (a1[21]) {
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    if (a1[23]) {
      CSDBRecordSetProperty();
    }
    if (a1[24]) {
      CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
    id v6 = (void *)a1[11];
    uint64_t v7 = a1[8];
    IMDAttachmentRecordDoubleCheckSize(v6, v7);
  }
}

void IMDAttachmentRecordAnonymizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    long long v24 = xmmword_1E5F96920;
    long long v25 = *(_OWORD *)off_1E5F96930;
    uint64_t v26 = 1333;
    uint64_t v12 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"IMDIsRunningInDatabaseServerProcess()", "void IMDAttachmentRecordAnonymizedUpdate(IMDAttachmentRecordRef, CFStringRef, CFStringRef, CFDictionaryRef, CFDictionaryRef, CFDictionaryRef)", IMFileLocationTrimFileName(), 1333, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    CFDataRef v13 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v13)
    {
      v13(v12);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v28 = v12;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1AFBEB11C;
    v23[3] = &unk_1E5F93DC8;
    v23[4] = a1;
    void v23[5] = a2;
    void v23[6] = a3;
    v23[7] = a4;
    v23[8] = a5;
    v23[9] = a6;
    _IMDPerformBlock((uint64_t)v23);
  }
  else
  {
    CFDataRef v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C72C(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void sub_1AFBEB11C(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 32) + 16));
  if (v2)
  {
    int v3 = (const void *)v2;
    CFStringRef v4 = *(const __CFString **)(a1 + 40);
    if (v4 && CFStringGetLength(v4) >= 1)
    {
      [*(id *)(a1 + 40) stringByAbbreviatingWithTildeInPath];
      CSDBRecordSetProperty();
    }
    CFStringRef v5 = *(const __CFString **)(a1 + 48);
    if (v5 && CFStringGetLength(v5) >= 1) {
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 56))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 64))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (*(void *)(a1 + 72))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

const void *_IMDCopyIMDAttachmentRecordFromXPCObjectServer(void *a1)
{
  if (!a1) {
    return 0;
  }
  int64_t int64 = xpc_dictionary_get_int64(a1, "recordIdentifier");
  if (int64 < 1) {
    return 0;
  }
  return sub_1AFBE8330(0, int64, 1);
}

xpc_object_t _IMDCopyXPCObjectFromIMDAttachmentRecordClient(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  CFIndex v3 = 0;
  CFStringRef v4 = &qword_1E5F96950;
  do
  {
    CFStringRef v5 = (const char *)*(v4 - 1);
    uint64_t v6 = *v4;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3);
    CFNumberRef v8 = ValueAtIndex;
    switch(v6)
    {
      case 0:
        CFDataRef v9 = v2;
        CFDataRef v10 = v5;
        int64_t v11 = (int64_t)v8;
        goto LABEL_9;
      case 1:
        IMInsertNSStringsToXPCDictionary();
        break;
      case 2:
        IMInsertDatasToXPCDictionary();
        break;
      case 3:
        int64_t valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        int64_t v11 = valuePtr;
        CFDataRef v9 = v2;
        CFDataRef v10 = v5;
LABEL_9:
        xpc_dictionary_set_int64(v9, v10, v11);
        break;
      default:
        break;
    }
    v4 += 5;
    ++v3;
  }
  while (v3 != 23);
  int64_t v12 = *(void *)(a1 + 16);
  if (v12) {
    xpc_dictionary_set_int64(v2, "recordIdentifier", v12);
  }
  return v2;
}

void _IMDAttachmentRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a1)
    {
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_1AFBEB4A0;
      v19[3] = &unk_1E5F93EE0;
      void v19[4] = a2;
      v19[5] = a1;
      v19[6] = a1;
      if (a3) {
        _IMDPerformBlock((uint64_t)v19);
      }
      else {
        sub_1AFBEB4A0((uint64_t)v19);
      }
    }
    else
    {
      int64_t v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6C81C(v11, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
  else
  {
    CFIndex v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C7A4(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
}

void sub_1AFBEB4A0(uint64_t a1)
{
  uint64_t v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(void *)(*(void *)(a1 + 40) + 16));
  if (v2)
  {
    CFIndex v3 = (const void *)v2;
    uint64_t v4 = 0;
    uint64_t v5 = &qword_1E5F96950;
    do
    {
      uint64_t v6 = (const char *)*(v5 - 1);
      uint64_t v7 = *v5;
      CFNumberRef Property = (const __CFNumber *)CSDBRecordGetProperty();
      CFNumberRef v9 = Property;
      switch(v7)
      {
        case 0:
          uint64_t v10 = *(void **)(a1 + 32);
          int64_t v11 = v6;
          int64_t v12 = (int64_t)v9;
          goto LABEL_8;
        case 1:
          IMInsertNSStringsToXPCDictionary();
          break;
        case 2:
          IMInsertDatasToXPCDictionary();
          break;
        case 3:
          int64_t valuePtr = 0;
          CFNumberGetValue(Property, kCFNumberSInt64Type, &valuePtr);
          uint64_t v10 = *(void **)(a1 + 32);
          int64_t v12 = valuePtr;
          int64_t v11 = v6;
LABEL_8:
          xpc_dictionary_set_int64(v10, v11, v12);
          break;
        default:
          break;
      }
      v5 += 5;
      v4 += 4;
    }
    while (v4 != 92);
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "recordIdentifier", *(void *)(*(void *)(a1 + 48) + 16));
    CFRelease(v3);
  }
}

uint64_t sub_1AFBEB5E4(uint64_t result)
{
  *(void *)(result + 16) = -1;
  return result;
}

void sub_1AFBEB5F0(uint64_t a1)
{
  *(void *)(a1 + 16) = -1;
  if (*(void *)(a1 + 24))
  {
    CFIndex v2 = 0;
    CFIndex v3 = &qword_1E5F96958;
    do
    {
      uint64_t v4 = *v3;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
      {
        uint64_t v5 = *(void (**)(void))(v4 + 8);
        if (v5) {
          v5();
        }
      }
      ++v2;
      v3 += 5;
    }
    while (v2 != 23);
    uint64_t v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 24) = 0;
    }
  }
}

BOOL sub_1AFBEB674(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_1AFBEB688(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFStringRef sub_1AFBEB690(const void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = CFGetAllocator(a1);
    CFAllocatorRef v3 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v2, 0, @"<IMDAttachmentRecord %p [%p]>{}", a1, v3);
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6C894(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    return 0;
  }
}

void sub_1AFBEB968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    [v4 bindParametersToSqliteWithStatement:a4];
  }
  int v5 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "SQLite returned %d from deleteAttachmentsByPredicate", (uint8_t *)v7, 8u);
    }
  }
}

uint64_t sub_1AFBEC094(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBEC0A4(uint64_t a1)
{
}

void sub_1AFBEC0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(void **)(a1 + 32);
  if (v5) {
    [v5 bindParametersToSqliteWithStatement:a4];
  }
  id v9 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v6 = [*(id *)(a1 + 40) _copyAttachmentRecordsFromCoreSDBResults:v9];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1AFBEC628(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFBEC460);
  }
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1AFBEC6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(void **)(a1 + 32);
  if (v5) {
    [v5 bindParametersToSqliteWithStatement:a4];
  }
  CSDBSqliteBindInt64();
  id v9 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v6 = [*(id *)(a1 + 40) _copyAttachmentRecordsFromCoreSDBResults:v9];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1AFBED160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBED1C4(uint64_t a1, uint64_t a2)
{
}

void sub_1AFBED1D4(uint64_t a1)
{
}

uint64_t sub_1AFBED1E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED1F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED200(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED210(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED220(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED230(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED240(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED250(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED260(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED270(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1AFBED284(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

BOOL sub_1AFBED298()
{
  int v0 = CSDBSqliteConnectionPerformSQL();
  int v1 = v0;
  if (v0)
  {
    if (v0 != 101)
    {
      CFAllocatorRef v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6CAD0();
      }
    }
  }
  return !v1 || v1 == 101;
}

uint64_t sub_1AFBED314()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  uint64_t v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1AFBED370()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  uint64_t v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1AFBED3CC()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  uint64_t v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1AFBED428()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  uint64_t v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1AFBED49C()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindBlobFromCFData();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1AFBED590()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1AFBED60C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 134218240;
      uint64_t v7 = a1;
      __int16 v8 = 2048;
      uint64_t v9 = a2;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Adding handle %lld to chat %lld", (uint8_t *)&v6, 0x16u);
    }
  }
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  return CSDBSqliteStatementReset();
}

uint64_t sub_1AFBED724()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1AFBED848()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindBlobFromCFData();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1AFBEDAAC()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  return CSDBSqliteStatementReset();
}

uint64_t IMDMessageImportBeginWithDatabaseAndConnection(id *a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  qword_1E9AF82C8 = a2;
  CFAllocatorRef v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*a1, "stringByDeletingPathExtension"), "stringByAppendingPathExtension:", @"importbackup"), "stringByAppendingPathExtension:", @"db");
  qword_1E9AF82D0 = v2;
  CSDBSqliteBackupDatabase();
  if (IMOSLoggingEnabled())
  {
    CFAllocatorRef v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      sqlite3_int64 v35 = (sqlite3_int64)v2;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Backing up database to %@", buf, 0xCu);
    }
  }
  sub_1AFBED298();
  uint64_t v4 = sub_1AFBED298();
  uint64_t v5 = CSDBSqliteConnectionStatementForSQL();
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = *(sqlite3_stmt **)(v5 + 8);
    if (v7)
    {
      if (sqlite3_step(v7) == 100)
      {
        sqlite3_int64 v8 = 0;
        do
        {
          sqlite3_int64 v9 = sqlite3_column_int64(*(sqlite3_stmt **)(v6 + 8), 0);
          sqlite3_int64 v10 = sqlite3_column_int64(*(sqlite3_stmt **)(v6 + 8), 1);
          sqlite3_int64 v11 = v10;
          if (v8 <= v10)
          {
            sqlite3_int64 v8 = v10;
          }
          else
          {
            CSDBSqliteConnectionStatementForSQL();
            CSDBSqliteBindInt64();
            CSDBSqliteBindInt64();
            int v12 = CSDBSqliteStatementPerform();
            if (v12)
            {
              if (v12 != 101)
              {
                uint64_t v13 = IMLogHandleForCategory();
                if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)uint8_t buf = 134218240;
                  sqlite3_int64 v35 = v9;
                  __int16 v36 = 2048;
                  sqlite3_int64 v37 = v11;
                  _os_log_error_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_ERROR, "Couldn't update %lld with order date %lld", buf, 0x16u);
                }
              }
            }
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v6 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v14 = (void *)IMDDatabaseTriggers();
  uint64_t v15 = [v14 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v29 != v16) {
          objc_enumerationMutation(v14);
        }
        [NSString stringWithFormat:@"DROP TRIGGER IF EXISTS %@", *(void *)(*((void *)&v28 + 1) + 8 * i)];
        uint64_t v4 = v4 & sub_1AFBED298();
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v15);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v18 = (void *)IMDDatabaseIndexes();
  uint64_t v19 = [v18 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v25 != v20) {
          objc_enumerationMutation(v18);
        }
        [NSString stringWithFormat:@"DROP INDEX IF EXISTS %@", *(void *)(*((void *)&v24 + 1) + 8 * j)];
        uint64_t v4 = v4 & sub_1AFBED298();
      }
      uint64_t v19 = [v18 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v19);
  }
  byte_1E9AF82D8 = 1;
  if ((v4 & 1) == 0)
  {
    uint64_t v22 = IMLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6CB54(v22);
    }
    byte_1E9AF82D8 = 0;
  }
  return v4;
}

void IMDMessageImportEnd()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((byte_1E9AF82D8 & 1) == 0)
  {
    CFAllocatorRef v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6CB98(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    goto LABEL_30;
  }
  if (qword_1E9AF82C8)
  {
    if (sub_1AFBED298())
    {
      BOOL v0 = sub_1AFBED298();
      CSDBRecordStoreCreateTablesForClass();
      if (v0
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298()
        && sub_1AFBED298())
      {
        goto LABEL_19;
      }
    }
    else
    {
      CSDBRecordStoreCreateTablesForClass();
    }
LABEL_28:
    if (qword_1E9AF82D0)
    {
      CFRelease((CFTypeRef)qword_1E9AF82D0);
      qword_1E9AF82D0 = 0;
    }
    goto LABEL_30;
  }
LABEL_19:
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall")) {
    goto LABEL_28;
  }
  if (IMOSLoggingEnabled())
  {
    int v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      uint64_t v11 = qword_1E9AF82D0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Successful import! This is not an internal install so let's delete the backup database stored at %@", (uint8_t *)&v10, 0xCu);
    }
  }
  if (qword_1E9AF82D0)
  {
    CSDBSqliteDeleteDatabase();
    goto LABEL_28;
  }
LABEL_30:
  byte_1E9AF82D8 = 0;
  qword_1E9AF82C8 = 0;
}

uint64_t IMDCopyGUIDForImportedOneToOneChat()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = IMCopyGUIDForChat();
  if (byte_1E9AF82D8)
  {
    uint64_t v1 = sub_1AFBED314();
    int v2 = IMOSLoggingEnabled();
    if (v1 <= 0)
    {
      if (v2)
      {
        uint64_t v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          int v13 = 138412290;
          uint64_t v14 = v0;
          _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Creating chat for guid: %@", (uint8_t *)&v13, 0xCu);
        }
      }
      uint64_t v6 = sub_1AFBED49C();
      if (v6 < 1)
      {
        int v10 = IMLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6CC84();
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v7 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            int v13 = 134217984;
            uint64_t v14 = v6;
            _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Created new chat with row id: %lld", (uint8_t *)&v13, 0xCu);
          }
        }
        uint64_t v8 = sub_1AFBED428();
        if (v8 > 0) {
          goto LABEL_20;
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v9 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            int v13 = 134217984;
            uint64_t v14 = v8;
            _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Creating handle for: %lld", (uint8_t *)&v13, 0xCu);
          }
        }
        uint64_t v8 = sub_1AFBED590();
        if (v8 < 1)
        {
          uint64_t v12 = IMLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            sub_1AFC6CC10();
          }
        }
        else
        {
LABEL_20:
          sub_1AFBED60C(v8, v6);
        }
      }
    }
    else if (v2)
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v13 = 138412290;
        uint64_t v14 = v0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Already have chat for guid: %@", (uint8_t *)&v13, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6CCEC();
    }
  }
  return v0;
}

uint64_t IMDCopyGUIDForImportedChat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = IMCopyGUIDForChat();
  if (byte_1E9AF82D8)
  {
    uint64_t v8 = sub_1AFBED314();
    int v9 = IMOSLoggingEnabled();
    if (v8 <= 0)
    {
      if (v9)
      {
        uint64_t v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          uint64_t v31 = v25;
          _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Creating chat for guid: %@", buf, 0xCu);
        }
      }
      uint64_t v13 = sub_1AFBED49C();
      if (v13 < 1)
      {
        uint64_t v23 = IMLogHandleForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6CC84();
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 134217984;
            uint64_t v31 = v13;
            _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Created new chat: %lld", buf, 0xCu);
          }
        }
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        uint64_t v15 = [a7 countByEnumeratingWithState:&v26 objects:v34 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v27;
          do
          {
            uint64_t v17 = 0;
            do
            {
              if (*(void *)v27 != v16) {
                objc_enumerationMutation(a7);
              }
              uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8 * v17);
              uint64_t v19 = sub_1AFBED428();
              if (v19 > 0) {
                goto LABEL_25;
              }
              if (IMOSLoggingEnabled())
              {
                uint64_t v20 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint8_t buf = 138412290;
                  uint64_t v31 = v18;
                  _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Creating handle for: %@", buf, 0xCu);
                }
              }
              uint64_t v19 = sub_1AFBED590();
              if (v19 < 1)
              {
                uint64_t v21 = IMLogHandleForCategory();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)uint8_t buf = 134218240;
                  uint64_t v31 = v19;
                  __int16 v32 = 2048;
                  uint64_t v33 = v13;
                  _os_log_error_impl(&dword_1AFB53000, v21, OS_LOG_TYPE_ERROR, "Failed to add handle: %lld to chat: %lld", buf, 0x16u);
                }
              }
              else
              {
LABEL_25:
                sub_1AFBED60C(v19, v13);
              }
              ++v17;
            }
            while (v15 != v17);
            uint64_t v22 = [a7 countByEnumeratingWithState:&v26 objects:v34 count:16];
            uint64_t v15 = v22;
          }
          while (v22);
        }
      }
    }
    else if (v9)
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v31 = v25;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Already have chat for guid: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6CD6C();
    }
  }
  return v25;
}

void IMDImportAttachmentWithData(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = 138412290;
      uint64_t v17 = a1;
      _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Import attachment %@ with data", (uint8_t *)&v16, 0xCu);
    }
  }
  sub_1AFBEEAB4(a1, a2, 0, a8, a3, a4, a6, a9);
}

void sub_1AFBEEAB4(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (byte_1E9AF82D8)
  {
    if (a1)
    {
      if (sub_1AFBED3CC() > 0)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            *(void *)&uint8_t buf[4] = a1;
            _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Already have an attachment for guid %@", buf, 0xCu);
          }
        }
        return;
      }
      id v24 = IMDCopyAttachmentPersistentPath(a1, a8, a6, a5, 0, 0);
      id v25 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
      if ((objc_msgSend(v25, "makeDirectoriesInPath:mode:", objc_msgSend(v24, "stringByDeletingLastPathComponent"), 448) & 1) == 0)
      {
        long long v26 = IMLogHandleForCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_1AFC6CE98();
        }
      }

      if (a4)
      {
        if (([a4 writeToFile:v24 atomically:0] & 1) == 0)
        {
          long long v27 = IMLogHandleForCategory();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            sub_1AFC6CE30();
          }
        }
        [a4 length];
LABEL_33:
        uint64_t v31 = sub_1AFBED724();
        if (IMOSLoggingEnabled())
        {
          __int16 v32 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 134218498;
            *(void *)&uint8_t buf[4] = v31;
            __int16 v35 = 2112;
            id v36 = a3;
            __int16 v37 = 2112;
            uint64_t v38 = a1;
            _os_log_impl(&dword_1AFB53000, v32, OS_LOG_TYPE_INFO, "Created attachment id %lld with path %@ for guid %@", buf, 0x20u);
          }
        }
        if (v24) {
          CFRelease(v24);
        }
        return;
      }
      uint64_t v33 = 0;
      if (a3) {
        uint64_t v28 = [MEMORY[0x1E4F1CB10] fileURLWithPath:a3];
      }
      else {
        uint64_t v28 = 0;
      }
      if (v24)
      {
        uint64_t v29 = objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:");
        if (!v28) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v29 = 0;
        if (!v28) {
          goto LABEL_29;
        }
      }
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "linkItemAtURL:toURL:error:", v28, v29, &v33) & 1) != 0|| v29&& (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "copyItemAtURL:toURL:error:", v28, v29, &v33))
      {
LABEL_31:
        if ([a3 length])
        {
          *(void *)uint8_t buf = 0;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C348], "defaultHFSFileManager"), "attributesOfItemAtPath:error:", a3, buf), "fileSize");
        }
        goto LABEL_33;
      }
LABEL_29:
      long long v30 = IMLogHandleForCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint8_t buf = 138412802;
        *(void *)&uint8_t buf[4] = a3;
        __int16 v35 = 2112;
        id v36 = v24;
        __int16 v37 = 2112;
        uint64_t v38 = v33;
        _os_log_error_impl(&dword_1AFB53000, v30, OS_LOG_TYPE_ERROR, "MessageImport - couldn't link/copy attachment from %@ to %@ - %@", buf, 0x20u);
      }
      goto LABEL_31;
    }
    uint64_t v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6CDEC(v23);
    }
  }
  else
  {
    uint64_t v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6CF00(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void IMDImportAttachmentWithPath(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = 138412546;
      uint64_t v17 = a1;
      __int16 v18 = 2112;
      uint64_t v19 = a3;
      _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Import attachment %@ with filePath %@", (uint8_t *)&v16, 0x16u);
    }
  }
  sub_1AFBEEAB4(a1, a2, a3, 0, a4, a5, a7, a9);
}

void IMDImportMessage(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (byte_1E9AF82D8)
  {
    if (sub_1AFBED314() < 1)
    {
      __int16 v35 = IMLogHandleForCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6CFE0();
      }
    }
    else
    {
      uint64_t v21 = sub_1AFBED370();
      BOOL v22 = 0;
      if (v21 <= 0 && a17)
      {
        CSDBSqliteConnectionStatementForSQL();
        CSDBSqliteBindInt64();
        CSDBSqliteBindTextFromCFString();
        CSDBSqliteBindInt64();
        CSDBSqliteBindInt64();
        uint64_t v23 = CSDBSqliteStatementInteger64Result();
        BOOL v22 = v23 > 0;
        if (v23 >= 1)
        {
          if (IMOSLoggingEnabled())
          {
            char log = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412546;
              int64_t v40 = a3;
              __int16 v41 = 2048;
              uint64_t v42 = a11;
              _os_log_impl(&dword_1AFB53000, log, OS_LOG_TYPE_INFO, "Found duplicate for %@ at %lld", buf, 0x16u);
            }
          }
        }
        CSDBSqliteStatementReset();
      }
      if (v21 > 0 || v22)
      {
        if (IMOSLoggingEnabled())
        {
          id v36 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412546;
            int64_t v40 = a2;
            __int16 v41 = 2112;
            uint64_t v42 = a1;
            _os_log_impl(&dword_1AFB53000, v36, OS_LOG_TYPE_INFO, "Not inserting %@  already have message in chat: %@", buf, 0x16u);
          }
        }
      }
      else
      {
        if (![a2 length]) {
          a2 = (void *)[NSString stringGUID];
        }
        IMComponentsFromChatGUID();
        if (IMOSLoggingEnabled())
        {
          id v24 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            int64_t v40 = a1;
            _os_log_impl(&dword_1AFB53000, v24, OS_LOG_TYPE_INFO, "Found chat for guid: %@", buf, 0xCu);
          }
        }
        if (sub_1AFBED428() <= 0)
        {
          if (IMOSLoggingEnabled())
          {
            id v25 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              int64_t v40 = a4;
              _os_log_impl(&dword_1AFB53000, v25, OS_LOG_TYPE_INFO, "Creating handle for: %@", buf, 0xCu);
            }
          }
          sub_1AFBED590();
        }
        if (sub_1AFBED848() < 1)
        {
          __int16 v37 = IMLogHandleForCategory();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
            sub_1AFC6CF78();
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            long long v26 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint8_t buf = 138412546;
              int64_t v40 = a2;
              __int16 v41 = 2112;
              uint64_t v42 = a1;
              _os_log_impl(&dword_1AFB53000, v26, OS_LOG_TYPE_INFO, "Created message for guid: %@  associating with chat: %@", buf, 0x16u);
            }
          }
          sub_1AFBEDAAC();
        }
      }
    }
  }
  else
  {
    long long v27 = IMLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D048(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

uint64_t IMDBindAttachmentToMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412546;
      uint64_t v8 = a2;
      __int16 v9 = 2112;
      uint64_t v10 = a1;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Associated attachment GUID %@ with message GUID: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  uint64_t v5 = sub_1AFBED370();
  uint64_t result = sub_1AFBED3CC();
  if (v5 >= 1 && result >= 1)
  {
    CSDBSqliteConnectionStatementForSQL();
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    CSDBSqliteStatementPerform();
    return CSDBSqliteStatementReset();
  }
  return result;
}

_OWORD *IMDCreateIMDMessageRecordRefFromIMMessageItem(void *a1)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    switch([a1 type])
    {
      case 0:
        uint64_t v2 = [a1 guid];
        uint64_t v3 = (void *)[a1 time];
        CFStringRef v128 = (void *)[a1 timeRead];
        int v120 = (void *)[a1 timeDelivered];
        uint64_t v4 = (void *)[a1 timePlayed];
        uint64_t v105 = v2;
        if ([a1 body])
        {
          [a1 body];
          uint64_t v103 = JWEncodeCodableObject();
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v23 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
        uint64_t v24 = [a1 service];
        uint64_t v25 = [a1 account];
        uint64_t v26 = [a1 accountID];
        id v116 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(a1, "errorCode"));
        uint64_t v27 = objc_msgSend((id)objc_msgSend(a1, "roomName"), "length");
        uint64_t v28 = &unk_1F0864F38;
        if (!v27) {
          uint64_t v28 = &unk_1F0864F20;
        }
        int v113 = v28;
        uint64_t v97 = [a1 subject];
        uint64_t v29 = objc_msgSend((id)objc_msgSend(a1, "body"), "string");
        uint64_t v95 = [a1 partCount];
        int v102 = (void *)v23;
        uint64_t v101 = v24;
        uint64_t v100 = v25;
        uint64_t v99 = v26;
        uint64_t v98 = v29;
        if ([a1 isFromMe]) {
          uint64_t v30 = [a1 handle];
        }
        else {
          uint64_t v30 = [a1 sender];
        }
        uint64_t v96 = v30;
        uint64_t v94 = [a1 expireState];
        uint64_t v92 = [a1 destinationCallerID];
        uint64_t v93 = [a1 balloonBundleID];
        uint64_t v91 = [a1 payloadData];
        uint64_t v90 = [a1 expressiveSendStyleID];
        uint64_t v109 = (void *)[a1 timeExpressiveSendPlayed];
        uint64_t v31 = [a1 associatedMessageGUID];
        uint64_t v88 = [a1 associatedMessageType];
        uint64_t v32 = [a1 associatedMessageRange];
        uint64_t v86 = v33;
        uint64_t v87 = v32;
        uint64_t v85 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo"));
        uint64_t v89 = v31;
        if (v31)
        {
          uint64_t v138 = 0;
          uint64_t v139 = [a1 type];
          if (v139)
          {
            *(_OWORD *)uint8_t buf = xmmword_1E5F97820;
            *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)off_1E5F97830;
            *(void *)uint64_t v142 = 826;
            uint64_t v34 = [MEMORY[0x1E4F29238] value:&v139 withObjCType:"q"];
            uint64_t v35 = [MEMORY[0x1E4F29238] value:&v138 withObjCType:"q"];
            uint64_t v36 = [NSString stringWithFormat:@"Unexpected not equal '%@ (%@) != %@ (%@)' in %s at %s:%d. %@", @"[imMessageItem type]", v34, @"IMDMessageRecordItemTypeMessage", v35, "IMDMessageRecordRef IMDCreateIMDMessageRecordRefFromIMMessageItem(IMItem *)", IMFileLocationTrimFileName(), *(unsigned int *)v142, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
            __int16 v37 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
            if (v37)
            {
              v37(v36);
            }
            else if (IMOSLoggingEnabled())
            {
              char v60 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint32_t v140 = 138412290;
                *(void *)&v140[4] = v36;
                _os_log_impl(&dword_1AFB53000, v60, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v140, 0xCu);
              }
            }
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            *(_OWORD *)uint8_t buf = xmmword_1E5F97848;
            *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)off_1E5F97858;
            *(void *)uint64_t v142 = 827;
            uint64_t v61 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"[imMessageItem isKindOfClass:[IMAssociatedMessageItem class]]", "IMDMessageRecordRef IMDCreateIMDMessageRecordRefFromIMMessageItem(IMItem *)", IMFileLocationTrimFileName(), 827, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
            char v62 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
            if (v62)
            {
              v62(v61);
            }
            else if (IMOSLoggingEnabled())
            {
              uint64_t v63 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint32_t v140 = 138412290;
                *(void *)&v140[4] = v61;
                _os_log_impl(&dword_1AFB53000, v63, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v140, 0xCu);
              }
            }
          }
        }
        id v84 = IMDDataDectorDictionaryForMessageItem(a1);
        *(void *)uint8_t buf = 0;
        *(void *)uint32_t v140 = 0;
        [a1 threadIdentifier];
        IMMessageThreadIdentifierGetComponents();
        uint64_t v83 = objc_msgSend(MEMORY[0x1E4F6E880], "serializedStringFromArray:", objc_msgSend(a1, "syndicationRanges"));
        uint64_t v81 = objc_msgSend(MEMORY[0x1E4F6E880], "serializedStringFromArray:", objc_msgSend(a1, "syncedSyndicationRanges"));
        long long v82 = (void *)[a1 dateEdited];
        uint64_t v80 = [a1 biaReferenceID];
        uint64_t v79 = [a1 fallbackHash];
        uint64_t v78 = [a1 associatedMessageEmoji];
        uint64_t v77 = [a1 scheduleType];
        uint64_t v76 = [a1 scheduleState];
        uint64_t v75 = objc_msgSend(v3, "__im_nanosecondTimeInterval");
        uint64_t v137 = objc_msgSend(v128, "__im_nanosecondTimeInterval");
        uint64_t v127 = objc_msgSend(v120, "__im_nanosecondTimeInterval");
        uint64_t v74 = objc_msgSend(v4, "__im_nanosecondTimeInterval");
        int v119 = [v116 intValue];
        int v64 = [v113 intValue];
        uint64_t v115 = [a1 replaceID];
        uint64_t v73 = [a1 countryCode];
        uint64_t v72 = [a1 unformattedID];
        uint64_t v65 = objc_msgSend(v109, "__im_nanosecondTimeInterval");
        uint64_t v66 = [a1 cloudKitSyncState];
        uint64_t v67 = [a1 cloudKitRecordID];
        uint64_t v68 = [a1 cloudKitServerChangeTokenBlob];
        uint64_t v69 = [a1 cloudKitRecordChangeTag];
        uint64_t v70 = [a1 replyToGUID];
        uint64_t v71 = [a1 sortID];
        uint64_t result = IMDMessageRecordCreate(0, 0, v98, v75, v137, v127, v74, v119, v64, v115, v102, v105, v103, v101, v100, v99, v97, v96, v73,
                   v72,
                   0,
                   0,
                   0,
                   0,
                   0,
                   v94,
                   0,
                   v89,
                   v88,
                   v87,
                   v86,
                   v93,
                   v91,
                   v90,
                   v65,
                   v85,
                   v66,
                   v67,
                   v68,
                   v69,
                   (uint64_t)v84,
                   v92,
                   v70,
                   v71,
                   *(uint64_t *)buf,
                   *(uint64_t *)v140,
                   v83,
                   v81,
                   v95,
                   objc_msgSend(v82, "__im_nanosecondTimeInterval"),
                   v80,
                   v79,
                   v78,
                   v77,
                   v76);
        break;
      case 1:
        if ([a1 sender]) {
          uint64_t v133 = [a1 sender];
        }
        else {
          uint64_t v133 = [a1 handle];
        }
        uint64_t v117 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo"));
        uint64_t v122 = [a1 changeType];
        BOOL v48 = [a1 timeRead] != 0;
        if (IMOSLoggingEnabled())
        {
          uint64_t v49 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            uint64_t v50 = [a1 guid];
            uint64_t v51 = [a1 otherHandle];
            uint64_t v52 = @"remove";
            *(_DWORD *)uint8_t buf = 138413058;
            *(void *)&uint8_t buf[4] = v50;
            *(_WORD *)&unsigned char buf[12] = 2112;
            if (!v122) {
              uint64_t v52 = @"invite";
            }
            *(void *)&buf[14] = v52;
            *(_WORD *)&unsigned char buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v133;
            *(_WORD *)uint64_t v142 = 2112;
            *(void *)&v142[2] = v51;
            _os_log_impl(&dword_1AFB53000, v49, OS_LOG_TYPE_INFO, "Attempting to create participant change item with GUID: %@  %@  %@ => %@", buf, 0x2Au);
          }
        }
        uint64_t v114 = objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval");
        uint64_t v110 = objc_msgSend((id)objc_msgSend(a1, "timeRead"), "__im_nanosecondTimeInterval");
        unsigned int v106 = [a1 errorCode];
        uint64_t result = IMDMessageRecordCreate(0, 1, 0, v114, v110, 0, 0, v106, 0, 0, (void *)[MEMORY[0x1E4F28ED0] numberWithUnsignedLongLong:(unint64_t)v48 << 13], objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, v133, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   [a1 otherHandle],
                   0,
                   v122,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   v117,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 2:
        uint64_t v130 = [a1 guid];
        int v7 = (void *)[a1 time];
        uint64_t v8 = [a1 service];
        uint64_t v9 = [a1 account];
        uint64_t v10 = [a1 accountID];
        if ([a1 sender]) {
          uint64_t v11 = [a1 sender];
        }
        else {
          uint64_t v11 = [a1 handle];
        }
        uint64_t v56 = v11;
        uint64_t v104 = [a1 otherHandle];
        uint64_t v118 = v8;
        uint64_t v124 = [a1 title];
        if (IMOSLoggingEnabled())
        {
          uint64_t v57 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412546;
            *(void *)&uint8_t buf[4] = v130;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v124;
            _os_log_impl(&dword_1AFB53000, v57, OS_LOG_TYPE_INFO, "Attempting to create title item with GUID: %@   title: %@", buf, 0x16u);
          }
        }
        uint64_t result = IMDMessageRecordCreate(0, 2, 0, objc_msgSend(v7, "__im_nanosecondTimeInterval"), 0, 0, 0, objc_msgSend(a1, "errorCode"), 0, 0, 0, v130, 0, v118, v9, v10, 0, v56, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   v104,
                   v124,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 3:
        if ([a1 sender]) {
          uint64_t v131 = [a1 sender];
        }
        else {
          uint64_t v131 = [a1 handle];
        }
        uint64_t v121 = [a1 actionType];
        if (IMOSLoggingEnabled())
        {
          uint64_t v47 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412802;
            *(void *)&uint8_t buf[4] = [a1 guid];
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v131;
            *(_WORD *)&unsigned char buf[22] = 2112;
            *(void *)&unsigned char buf[24] = [a1 otherHandle];
            _os_log_impl(&dword_1AFB53000, v47, OS_LOG_TYPE_INFO, "Attempting to add group leave GUID: %@ %@ => %@", buf, 0x20u);
          }
        }
        uint64_t result = IMDMessageRecordCreate(0, 3, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, objc_msgSend(a1, "errorCode"), 0, 0, 0, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, v131, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   [a1 otherHandle],
                   0,
                   v121,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 4:
        if ([a1 sender]) {
          uint64_t v129 = [a1 sender];
        }
        else {
          uint64_t v129 = [a1 handle];
        }
        uint64_t v38 = [a1 status];
        if (v38 == 1) {
          uint64_t v39 = @"stop sharing";
        }
        else {
          uint64_t v39 = @"unknown";
        }
        uint64_t v40 = [a1 direction];
        if (v40) {
          __int16 v41 = @"unknown";
        }
        else {
          __int16 v41 = @"outgoing";
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v42 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            uint64_t v43 = [a1 guid];
            uint64_t v44 = [a1 otherHandle];
            uint64_t v45 = @"incoming";
            *(_DWORD *)uint8_t buf = 138413314;
            if (v40 != 1) {
              uint64_t v45 = v41;
            }
            *(void *)&uint8_t buf[4] = v43;
            *(_WORD *)&unsigned char buf[12] = 2112;
            uint64_t v46 = @"start sharing";
            if (v38) {
              uint64_t v46 = v39;
            }
            *(void *)&buf[14] = v46;
            *(_WORD *)&unsigned char buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v45;
            *(_WORD *)uint64_t v142 = 2112;
            *(void *)&v142[2] = v129;
            __int16 v143 = 2112;
            uint64_t v144 = v44;
            _os_log_impl(&dword_1AFB53000, v42, OS_LOG_TYPE_INFO, "Attempting location share update to chat guid GUID: %@  (%@:%@) %@ => %@", buf, 0x34u);
          }
        }
        uint64_t result = IMDMessageRecordCreate(0, 4, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, v129, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   [a1 otherHandle],
                   0,
                   0,
                   [a1 status],
                   [a1 direction],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 5:
        if ([a1 sender]) {
          uint64_t v134 = [a1 sender];
        }
        else {
          uint64_t v134 = [a1 handle];
        }
        unint64_t v53 = [a1 actionType];
        uint64_t v123 = v53;
        if (v53 >= 3) {
          uint64_t v54 = @"unknown";
        }
        else {
          uint64_t v54 = off_1E5F97870[v53];
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v55 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138413058;
            *(void *)&uint8_t buf[4] = [a1 guid];
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v54;
            *(_WORD *)&unsigned char buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v134;
            *(_WORD *)uint64_t v142 = 2112;
            *(void *)&v142[2] = [a1 otherHandle];
            _os_log_impl(&dword_1AFB53000, v55, OS_LOG_TYPE_INFO, "Attempting to add message action GUID: %@ (%@) %@ => %@", buf, 0x2Au);
          }
        }
        uint64_t result = IMDMessageRecordCreate(0, 5, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), objc_msgSend(a1, "originalMessageGUID"), v134, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   [a1 otherHandle],
                   0,
                   0,
                   0,
                   0,
                   0,
                   v123,
                   0,
                   0,
                   0,
                   0,
                   [a1 balloonBundleID],
                   0,
                   0,
                   0,
                   0,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 6:
        if (IMOSLoggingEnabled())
        {
          uint64_t v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412546;
            *(void *)&uint8_t buf[4] = [a1 guid];
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = [a1 conversationUUID];
            _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Attempting to create a TU Conversation item with guid %@ conversationUUID: %@", buf, 0x16u);
          }
        }
        uint64_t v135 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
        uint64_t result = IMDMessageRecordCreate(0, 6, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, v135, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, objc_msgSend(a1, "handle"), objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo")), objc_msgSend(a1, "cloudKitSyncState"), objc_msgSend(a1, "cloudKitRecordID"), objc_msgSend(a1, "cloudKitServerChangeTokenBlob"), objc_msgSend(a1, "cloudKitRecordChangeTag"), 0, objc_msgSend(a1, "destinationCallerID"), objc_msgSend(a1, "replyToGUID"), objc_msgSend(a1, "sortID"), 0, 0, 0, 0, 0, 0, 0, 0,
                   0,
                   0,
                   0);
        break;
      case 7:
        uint64_t v132 = [a1 guid];
        uint64_t v12 = (void *)[a1 time];
        uint64_t v13 = [a1 service];
        uint64_t v14 = [a1 account];
        uint64_t v15 = [a1 accountID];
        if ([a1 sender]) {
          uint64_t v16 = [a1 sender];
        }
        else {
          uint64_t v16 = [a1 handle];
        }
        uint64_t v111 = v16;
        uint64_t v125 = v13;
        uint64_t v107 = [a1 otherHandle];
        if (IMOSLoggingEnabled())
        {
          uint64_t v58 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            *(void *)&uint8_t buf[4] = v132;
            _os_log_impl(&dword_1AFB53000, v58, OS_LOG_TYPE_INFO, "Attempting to create transcript sharing item with GUID: %@", buf, 0xCu);
          }
        }
        uint64_t result = IMDMessageRecordCreate(0, 7, 0, objc_msgSend(v12, "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, v132, 0, v125, v14, v15, 0, v111, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   v107,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 8:
        uint64_t v136 = [a1 guid];
        __int16 v18 = (void *)[a1 time];
        uint64_t v19 = [a1 service];
        uint64_t v20 = [a1 account];
        uint64_t v21 = [a1 accountID];
        if ([a1 sender]) {
          uint64_t v22 = [a1 sender];
        }
        else {
          uint64_t v22 = [a1 handle];
        }
        uint64_t v112 = v22;
        uint64_t v126 = v19;
        uint64_t v108 = [a1 otherHandle];
        if (IMOSLoggingEnabled())
        {
          uint64_t v59 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            *(void *)&uint8_t buf[4] = v136;
            _os_log_impl(&dword_1AFB53000, v59, OS_LOG_TYPE_INFO, "Attempting to create location update item with GUID: %@", buf, 0xCu);
          }
        }
        uint64_t result = IMDMessageRecordCreate(0, 8, 0, objc_msgSend(v18, "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, v136, 0, v126, v20, v21, 0, v112, objc_msgSend(a1, "countryCode"),
                   [a1 unformattedID],
                   v108,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   [a1 cloudKitSyncState],
                   [a1 cloudKitRecordID],
                   [a1 cloudKitServerChangeTokenBlob],
                   [a1 cloudKitRecordChangeTag],
                   0,
                   [a1 destinationCallerID],
                   [a1 replyToGUID],
                   [a1 sortID],
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      default:
        return 0;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Attempted to create IMDMessageRecordRef from nil IMItem.", buf, 2u);
      }
    }
    return 0;
  }
  return result;
}

id IMDDataDectorDictionaryForMessageItem(void *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v3 = [a1 roomName];
  if (v3)
  {
    uint64_t v4 = [NSString stringWithFormat:@"msg-room-%@", v3];
  }
  else
  {
    uint64_t v5 = [a1 handle];
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v4 = [NSString stringWithFormat:@"msg-handle-%@", v5];
  }
  [v2 setObject:v4 forKeyedSubscript:*MEMORY[0x1E4F6C840]];
LABEL_6:
  uint64_t v6 = [a1 service];
  [v2 setObject:v6 forKeyedSubscript:*MEMORY[0x1E4F6C848]];
  int v7 = (void *)[v2 copy];

  return v7;
}

id IMDUpdateIMMessageItemWithIMMessageItemForceReplaceReplaceError(id a1, void *a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v398 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      a1 = (id)[objc_alloc(MEMORY[0x1E4F6E5E0]) initWithMessageItem:a1];
    }
  }
  context = (void *)MEMORY[0x1B3E8A120]();
  uint64_t v13 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:@"IMMessageItem: %@", objc_msgSend(a1, "guid")];
  uint64_t v14 = (void *)[a2 plainBody];
  if ((a3 & 1) == 0
    && ((uint64_t v16 = (void *)[a1 plainBody], v16 == v14)
     || (uint64_t v17 = v16, [v16 length])
     && [v14 length]
     && [v17 isEqualToString:v14]))
  {
    uint64_t v15 = [a2 bodyData];
  }
  else
  {
    [a1 setPlainBody:v14];
    uint64_t v15 = [a2 bodyData];
    if (a3) {
      goto LABEL_17;
    }
  }
  __int16 v18 = (void *)[a1 bodyData];
  if (v18 == (void *)v15 || v15 && v18 && [v18 isEqualToData:v15])
  {
    uint64_t v19 = (void *)[a2 body];
    goto LABEL_18;
  }
LABEL_17:
  [a1 setBodyData:v15];
  uint64_t v19 = (void *)[a2 body];
  if (a3)
  {
LABEL_22:
    [v13 appendString:@", body changed"];
    [a1 setBody:v19];
    goto LABEL_23;
  }
LABEL_18:
  uint64_t v20 = objc_msgSend((id)objc_msgSend(a1, "body"), "string");
  uint64_t v21 = [v19 string];
  if (v20 != (void *)v21)
  {
    uint64_t v22 = (void *)v21;
    if (![v20 length]
      || ![v22 length]
      || ([v20 isEqualToString:v22] & 1) == 0)
    {
      goto LABEL_22;
    }
  }
LABEL_23:
  objc_msgSend(a1, "setPartCount:", objc_msgSend(a2, "partCount"));
  uint64_t v23 = (void *)[a2 subject];
  if ((a3 & 1) != 0
    || (long long v82 = (void *)[a1 subject], v82 != v23)
    && ((uint64_t v83 = v82, ![v82 length])
     || ![v23 length]
     || ([v83 isEqualToString:v23] & 1) == 0))
  {
    [v13 appendString:@", subject changed"];
    [a1 setSubject:v23];
  }
  if (isKindOfClass)
  {
    uint64_t v24 = (void *)[a1 associatedMessageGUID];
    uint64_t v25 = [a2 associatedMessageGUID];
    if (v24 != (void *)v25)
    {
      uint64_t v26 = (void *)v25;
      if (![v24 length]
        || [v26 length] && (objc_msgSend(v24, "isEqualToString:", v26) & 1) == 0)
      {
        [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", associatedMessageGUID from %@ to %@", objc_msgSend(a1, "associatedMessageGUID"), objc_msgSend(a2, "associatedMessageGUID"))];
        objc_msgSend(a1, "setAssociatedMessageGUID:", objc_msgSend(a2, "associatedMessageGUID"));
      }
    }
    uint64_t v27 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "associatedMessageType"));
    uint64_t v28 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a2, "associatedMessageType"));
    if (v27 != (void *)v28 && (!v27 || (uint64_t v29 = v28) != 0 && ([v27 isEqualToNumber:v28] & 1) == 0))
    {
      uint64_t v30 = NSString;
      uint64_t v31 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "associatedMessageType"));
      [v13 appendString:objc_msgSend(v30, "stringWithFormat:", @", associatedMessageType from %@ to %@", v31, objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a2, "associatedMessageType")))];
      objc_msgSend(a1, "setAssociatedMessageType:", objc_msgSend(a2, "associatedMessageType"));
    }
    uint64_t v32 = objc_msgSend(a2, "associatedMessageRange", v29);
    uint64_t v34 = v33;
    uint64_t v35 = [a1 associatedMessageRange];
    BOOL v37 = v34 == v36 && v32 == v35;
    if (!v37 && v34) {
      objc_msgSend(a1, "setAssociatedMessageRange:", v32, v34);
    }
  }
  if ((a3 & 1) != 0 || [a2 payloadData] || objc_msgSend(a1, "payloadData"))
  {
    uint64_t v38 = (void *)[a1 payloadData];
    uint64_t v39 = [a2 payloadData];
    if (v38 != (void *)v39 && (!v38 || (uint64_t v40 = v39) == 0 || ([v38 isEqualToData:v39] & 1) == 0)) {
      objc_msgSend(a1, "setPayloadData:", objc_msgSend(a2, "payloadData", v40));
    }
    if (a3) {
      goto LABEL_55;
    }
  }
  if ([a2 messageSummaryInfo] || objc_msgSend(a1, "messageSummaryInfo"))
  {
LABEL_55:
    if ((objc_msgSend((id)objc_msgSend(a2, "messageSummaryInfo"), "isEqualToDictionary:", objc_msgSend(a1, "messageSummaryInfo")) & 1) == 0)objc_msgSend(a1, "setMessageSummaryInfo:", objc_msgSend(a2, "messageSummaryInfo")); {
    if (a3)
    }
      goto LABEL_58;
  }
  if ([a2 fileTransferGUIDs] || objc_msgSend(a1, "fileTransferGUIDs"))
  {
LABEL_58:
    if ((objc_msgSend((id)objc_msgSend(a2, "fileTransferGUIDs"), "isEqualToArray:", objc_msgSend(a1, "fileTransferGUIDs")) & 1) == 0)
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", fileTransferGUIDs from %@ to %@", objc_msgSend(a1, "fileTransferGUIDs"), objc_msgSend(a2, "fileTransferGUIDs"))];
      objc_msgSend(a1, "setFileTransferGUIDs:", objc_msgSend(a2, "fileTransferGUIDs"));
    }
  }
  uint64_t v41 = [a2 time];
  uint64_t v42 = (void *)v41;
  if ((a3 & 1) != 0 || v41)
  {
    uint64_t v43 = (void *)[a1 time];
    if (v43 != v42 && (!v43 || v42 && ([v43 isEqualToDate:v42] & 1) == 0))
    {
      if ((a3 & 1) != 0
        || (objc_msgSend((id)objc_msgSend(a1, "time"), "timeIntervalSinceReferenceDate"), v44 >= 0.00000011920929))
      {
        [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", time from %@ to %@", objc_msgSend(a1, "time"), v42)];
        [a1 setTime:v42];
      }
    }
  }
  uint64_t v45 = [a2 timeDelivered];
  if (v45 || a3)
  {
    uint64_t v46 = (void *)[a1 timeDelivered];
    if (v46 != (void *)v45 && (!v46 || v45 && ([v46 isEqualToDate:v45] & 1) == 0))
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", timeDelivered from %@ to %@", objc_msgSend(a1, "timeDelivered"), v45)];
      [a1 setTimeDelivered:v45];
    }
  }
  uint64_t v47 = [a2 timeRead];
  if (v47 || a3)
  {
    BOOL v48 = (void *)[a1 timeRead];
    if (v48 != (void *)v47 && (!v48 || v47 && ([v48 isEqualToDate:v47] & 1) == 0))
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", timeRead from %@ to %@", objc_msgSend(a1, "timeRead"), v47)];
      [a1 setTimeRead:v47];
    }
  }
  uint64_t v49 = [a2 timePlayed];
  if (v49 || a3)
  {
    uint64_t v50 = (void *)[a1 timePlayed];
    if (v50 != (void *)v49 && (!v50 || v49 && ([v50 isEqualToDate:v49] & 1) == 0))
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", timePlayed from %@ to %@", objc_msgSend(a1, "timePlayed"), v49)];
      [a1 setTimePlayed:v49];
    }
  }
  uint64_t v51 = [a2 dateEdited];
  if (v51 || a3)
  {
    uint64_t v52 = (void *)[a1 dateEdited];
    if (v52 != (void *)v51 && (!v52 || v51 && ([v52 isEqualToDate:v51] & 1) == 0))
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", dateEdited from %@ to %@", objc_msgSend(a1, "dateEdited"), v51)];
      [a1 setDateEdited:v51];
    }
  }
  unint64_t v53 = (void *)[a2 account];
  uint64_t v54 = (void *)[a1 account];
  if (v54 != v53)
  {
    uint64_t v55 = v54;
    if (![v54 length]
      || [v53 length] && (objc_msgSend(v55, "isEqualToString:", v53) & 1) == 0)
    {
      [a1 setAccount:v53];
    }
  }
  uint64_t v56 = (void *)[a2 accountID];
  uint64_t v57 = (void *)[a1 accountID];
  if (v57 != v56)
  {
    uint64_t v58 = v57;
    if (![v57 length]
      || [v56 length] && (objc_msgSend(v58, "isEqualToString:", v56) & 1) == 0)
    {
      [a1 setAccountID:v56];
    }
  }
  uint64_t v59 = (void *)[a2 service];
  char v60 = (void *)[a1 service];
  if (v60 != v59)
  {
    uint64_t v61 = v60;
    if (![v60 length]
      || [v59 length] && (objc_msgSend(v61, "isEqualToString:", v59) & 1) == 0)
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", service from %@ to %@", objc_msgSend(a1, "service"), v59)];
      [a1 setService:v59];
    }
  }
  char v62 = (void *)[a2 destinationCallerID];
  if (v62 || a3)
  {
    uint64_t v63 = (void *)[a1 destinationCallerID];
    if (v63 != v62)
    {
      int v64 = v63;
      if (![v63 length]
        || [v62 length] && (objc_msgSend(v64, "isEqualToString:", v62) & 1) == 0)
      {
        [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", destinationCallerID from %@ to %@", objc_msgSend(a1, "destinationCallerID"), v62)];
        [a1 setDestinationCallerID:v62];
      }
    }
  }
  if ((a3 & 1) != 0 || a4)
  {
    uint64_t v65 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(a2, "errorCode"));
    uint64_t v66 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(a1, "errorCode"));
    if (v66 != v65)
    {
      uint64_t v67 = v66;
      if (!v66 || v65 && ([v66 isEqualToNumber:v65] & 1) == 0)
      {
        [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", errorCode from %@ to %@", v67, v65)];
        objc_msgSend(a1, "setErrorCode:", objc_msgSend(v65, "unsignedIntValue"));
      }
    }
  }
  uint64_t v68 = [a2 expireState];
  if ((a3 & 1) != 0 || v68 > [a1 expireState])
  {
    [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", expireState from %lld to %lld", objc_msgSend(a1, "expireState"), v68)];
    [a1 setExpireState:v68];
  }
  uint64_t v69 = [a2 timeExpressiveSendPlayed];
  if (v69 || a3)
  {
    uint64_t v70 = (void *)[a1 timeExpressiveSendPlayed];
    if (v70 != (void *)v69 && (!v70 || v69 && ([v70 isEqualToDate:v69] & 1) == 0))
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", timeExpressiveSendPlayed from %@ to %@", objc_msgSend(a1, "timeExpressiveSendPlayed"), v69)];
      [a1 setTimeExpressiveSendPlayed:v69];
    }
  }
  if (a5)
  {
    uint64_t v71 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a2, "flags"));
    uint64_t v72 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
    if (v72 != (void *)v71)
    {
      uint64_t v73 = v72;
      if (!v72 || v71 && ([v72 isEqualToNumber:v71] & 1) == 0)
      {
        uint64_t v74 = [a1 flags];
        uint64_t v75 = [a2 flags];
        [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", flags from %@ to %@", v73, v71)];
        if (a6) {
          uint64_t v76 = -1;
        }
        else {
          uint64_t v76 = a7;
        }
        uint64_t v77 = v75 & v76;
        if ((a3 & 1) == 0 && (v74 & 8) == 0 && [a2 isEmpty]) {
          v77 &= ~8uLL;
        }
        uint64_t v78 = v77 | v74;
        if (((a7 & 0x2000) != 0 || a6)
          && [a1 isRead]
          && ![a2 isRead])
        {
          v78 &= ~0x2000uLL;
        }
        if (((a7 & 0x8000) != 0 || a6)
          && [a1 isSent]
          && ![a2 isSent])
        {
          v78 &= ~0x8000uLL;
        }
        if (((a7 & 0x1000) != 0 || a6)
          && [a1 isDelivered]
          && ![a2 isDelivered])
        {
          v78 &= ~0x1000uLL;
        }
        if (((a7 & 0x4000000) != 0 || a6)
          && [a1 isCorrupt]
          && ![a2 isCorrupt])
        {
          v78 &= ~0x4000000uLL;
        }
        if (((a7 & 0x8000000) != 0 || a6)
          && [a1 isSpam]
          && ![a2 isSpam])
        {
          v78 &= ~0x8000000uLL;
        }
        if (((a7 & 0x20000000000) != 0 || a6)
          && [a1 isPendingSatelliteSend]
          && ![a2 isPendingSatelliteSend])
        {
          v78 &= ~0x20000000000uLL;
        }
        if (((a7 & 0x40000000000) != 0 || a6)
          && [a1 needsRelay]
          && ![a2 needsRelay])
        {
          v78 &= ~0x40000000000uLL;
        }
        [a1 setFlags:v78];
      }
    }
  }
  if (a3)
  {
    uint64_t v79 = NSString;
    if ([a1 hasUnseenMention]) {
      uint64_t v80 = @"YES";
    }
    else {
      uint64_t v80 = @"NO";
    }
    if ([a2 hasUnseenMention]) {
      uint64_t v81 = @"YES";
    }
    else {
      uint64_t v81 = @"NO";
    }
    [v13 appendString:objc_msgSend(v79, "stringWithFormat:", @", hasUnseenMention from %@ to %@", v80, v81)];
    objc_msgSend(a1, "setHasUnseenMention:", objc_msgSend(a2, "hasUnseenMention"));
  }
  else
  {
    int v84 = [a1 hasUnseenMention];
    if (v84 != [a2 hasUnseenMention])
    {
      uint64_t v85 = NSString;
      if ([a1 hasUnseenMention]) {
        uint64_t v86 = @"YES";
      }
      else {
        uint64_t v86 = @"NO";
      }
      if ([a2 hasUnseenMention]) {
        uint64_t v87 = @"YES";
      }
      else {
        uint64_t v87 = @"NO";
      }
      [v13 appendString:objc_msgSend(v85, "stringWithFormat:", @", hasUnseenMention from %@ to %@", v86, v87)];
      objc_msgSend(a1, "setHasUnseenMention:", objc_msgSend(a2, "hasUnseenMention"));
    }
    uint64_t v88 = [a1 cloudKitSyncState];
    if (v88 == [a2 cloudKitSyncState])
    {
LABEL_208:
      uint64_t v89 = (void *)[a1 cloudKitRecordID];
      uint64_t v90 = [a2 cloudKitRecordID];
      if (v89 != (void *)v90)
      {
        uint64_t v91 = (void *)v90;
        if (![v89 length]
          || [v91 length] && (objc_msgSend(v89, "isEqualToString:", v91) & 1) == 0)
        {
          objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a2, "cloudKitRecordID"));
        }
      }
      uint64_t v92 = (void *)[a1 cloudKitRecordChangeTag];
      uint64_t v93 = [a2 cloudKitRecordChangeTag];
      if (v92 == (void *)v93) {
        goto LABEL_219;
      }
      uint64_t v94 = (void *)v93;
      if ([v92 length])
      {
        if (![v94 length] || (objc_msgSend(v92, "isEqualToString:", v94) & 1) != 0) {
          goto LABEL_219;
        }
      }
      goto LABEL_217;
    }
  }
  [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", cloudKitSyncState from %lld to %lld", objc_msgSend(a1, "cloudKitSyncState"), objc_msgSend(a2, "cloudKitSyncState"))];
  objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a2, "cloudKitSyncState"));
  if ((a3 & 1) == 0) {
    goto LABEL_208;
  }
  objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a2, "cloudKitRecordID"));
LABEL_217:
  objc_msgSend(a1, "setCloudKitRecordChangeTag:", objc_msgSend(a2, "cloudKitRecordChangeTag"));
  objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a2, "cloudKitServerChangeTokenBlob"));
  if (a3)
  {
    [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", replyToGUID from %@ to %@", objc_msgSend(a1, "replyToGUID"), objc_msgSend(a2, "replyToGUID"))];
    objc_msgSend(a1, "setReplyToGUID:", objc_msgSend(a2, "replyToGUID"));
    goto LABEL_228;
  }
LABEL_219:
  uint64_t v95 = (void *)[a1 replyToGUID];
  uint64_t v96 = [a2 replyToGUID];
  if (v95 != (void *)v96)
  {
    uint64_t v97 = (void *)v96;
    if (![v95 length]
      || [v97 length] && (objc_msgSend(v95, "isEqualToString:", v97) & 1) == 0)
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", replyToGUID from %@ to %@", objc_msgSend(a1, "replyToGUID"), objc_msgSend(a2, "replyToGUID"))];
      objc_msgSend(a1, "setReplyToGUID:", objc_msgSend(a2, "replyToGUID"));
    }
  }
  uint64_t v98 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
  uint64_t v99 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a2, "sortID"));
  if (v98 == (void *)v99 || v98 && ((uint64_t v100 = v99) == 0 || ([v98 isEqualToNumber:v99] & 1) != 0))
  {
LABEL_230:
    uint64_t v104 = objc_msgSend(a1, "threadIdentifier", v100);
    uint64_t v105 = [a2 threadIdentifier];
    if (v104 != (void *)v105)
    {
      unsigned int v106 = (void *)v105;
      if (![v104 length]
        || [v106 length] && (objc_msgSend(v104, "isEqualToString:", v106) & 1) == 0)
      {
        [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", threadIdentifier from %@ to %@", objc_msgSend(a1, "threadIdentifier"), objc_msgSend(a2, "threadIdentifier"))];
        objc_msgSend(a1, "setThreadIdentifier:", objc_msgSend(a2, "threadIdentifier"));
      }
    }
    uint64_t v107 = (void *)[a1 syndicationRanges];
    uint64_t v108 = [a2 syndicationRanges];
    if (v107 == (void *)v108) {
      goto LABEL_241;
    }
    if (v107)
    {
      uint64_t v103 = v108;
      if (v108)
      {
        if ([v107 isEqualToArray:v108]) {
          goto LABEL_241;
        }
      }
    }
    goto LABEL_239;
  }
LABEL_228:
  uint64_t v101 = NSString;
  uint64_t v102 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
  [v13 appendString:objc_msgSend(v101, "stringWithFormat:", @", sortID from %@ to %@", v102, objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a2, "sortID")))];
  objc_msgSend(a1, "setSortID:", objc_msgSend(a2, "sortID"));
  if ((a3 & 1) == 0) {
    goto LABEL_230;
  }
  [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", threadIdentifier from %@ to %@", objc_msgSend(a1, "threadIdentifier"), objc_msgSend(a2, "threadIdentifier"))];
  objc_msgSend(a1, "setThreadIdentifier:", objc_msgSend(a2, "threadIdentifier"));
LABEL_239:
  [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", syndicationRanges from %@ to %@", objc_msgSend(a1, "syndicationRanges", v103), objc_msgSend(a2, "syndicationRanges"))];
  objc_msgSend(a1, "setSyndicationRanges:", objc_msgSend(a2, "syndicationRanges"));
  if (a3)
  {
    [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", syncedSyndicationRanges from %@ to %@", objc_msgSend(a1, "syncedSyndicationRanges"), objc_msgSend(a2, "syncedSyndicationRanges"))];
    objc_msgSend(a1, "setSyncedSyndicationRanges:", objc_msgSend(a2, "syncedSyndicationRanges"));
    goto LABEL_250;
  }
LABEL_241:
  uint64_t v109 = (void *)[a1 syncedSyndicationRanges];
  uint64_t v110 = [a2 syncedSyndicationRanges];
  if (v109 != (void *)v110 && (!v109 || (uint64_t v111 = v110) == 0 || ([v109 isEqualToArray:v110] & 1) == 0))
  {
    [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", syncedSyndicationRanges from %@ to %@", objc_msgSend(a1, "syncedSyndicationRanges", v111), objc_msgSend(a2, "syncedSyndicationRanges"))];
    objc_msgSend(a1, "setSyncedSyndicationRanges:", objc_msgSend(a2, "syncedSyndicationRanges"));
  }
  uint64_t v112 = (void *)[a1 expressiveSendStyleID];
  uint64_t v113 = [a2 expressiveSendStyleID];
  if (v112 == (void *)v113
    || (uint64_t v114 = (void *)v113, [v112 length])
    && (![v114 length] || (objc_msgSend(v112, "isEqualToString:", v114) & 1) != 0))
  {
LABEL_252:
    uint64_t v115 = [a1 scheduleType];
    if (v115 != [a2 scheduleType])
    {
      [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", scheduleType from %lu to %lu", objc_msgSend(a1, "scheduleType"), objc_msgSend(a2, "scheduleType"))];
      objc_msgSend(a1, "setScheduleType:", objc_msgSend(a2, "scheduleType"));
    }
    uint64_t v116 = [a1 scheduleState];
    if (v116 == [a2 scheduleState]) {
      goto LABEL_256;
    }
    goto LABEL_255;
  }
LABEL_250:
  [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", expressiveSendStyleID from %@ to %@", objc_msgSend(a1, "expressiveSendStyleID"), objc_msgSend(a2, "expressiveSendStyleID"))];
  objc_msgSend(a1, "setExpressiveSendStyleID:", objc_msgSend(a2, "expressiveSendStyleID"));
  if ((a3 & 1) == 0) {
    goto LABEL_252;
  }
  [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", scheduleType from %lu to %lu", objc_msgSend(a1, "scheduleType"), objc_msgSend(a2, "scheduleType"))];
  objc_msgSend(a1, "setScheduleType:", objc_msgSend(a2, "scheduleType"));
LABEL_255:
  [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", scheduleState from %lu to %lu", objc_msgSend(a1, "scheduleState"), objc_msgSend(a2, "scheduleState"))];
  objc_msgSend(a1, "setScheduleState:", objc_msgSend(a2, "scheduleState"));
  if (a3)
  {
LABEL_257:
    [v13 appendString:objc_msgSend(NSString, "stringWithFormat:", @", fallbackHash from %@ to %@", objc_msgSend(a1, "fallbackHash"), objc_msgSend(a2, "fallbackHash"))];
    objc_msgSend(a1, "setFallbackHash:", objc_msgSend(a2, "fallbackHash"));
    goto LABEL_258;
  }
LABEL_256:
  uint64_t v117 = [a1 fallbackHash];
  if (v117 != [a2 fallbackHash]) {
    goto LABEL_257;
  }
LABEL_258:
  id v395 = 0;
  id v396 = 0;
  [a1 threadIdentifier];
  IMMessageThreadIdentifierGetComponents();
  if (IMOSLoggingEnabled())
  {
    uint64_t v118 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_1AFB53000, v118, OS_LOG_TYPE_INFO, "Updating %@", (uint8_t *)&buf, 0xCu);
    }
  }
  CFStringRef v119 = IMDMessageRecordCopyMessageForGUID((const __CFString *)[a1 guid]);
  CFStringRef v343 = v119;
  if (v119)
  {
    uint64_t v393 = 0;
    uint64_t v394 = 0;
    uint64_t v391 = 0;
    CFTypeRef v392 = 0;
    uint64_t v389 = 0;
    uint64_t v390 = 0;
    CFTypeRef v387 = 0;
    uint64_t v388 = 0;
    CFNumberRef v385 = 0;
    CFTypeRef v386 = 0;
    CFTypeRef v383 = 0;
    CFTypeRef v384 = 0;
    uint64_t v381 = 0;
    CFTypeRef v382 = 0;
    uint64_t v379 = 0;
    CFTypeRef v380 = 0;
    uint64_t v378 = 0;
    __int16 v377 = 0;
    CFTypeRef v376 = 0;
    uint64_t v375 = 0;
    uint64_t v374 = 0;
    CFTypeRef v373 = 0;
    uint64_t v372 = 0;
    uint64_t v371 = 0;
    uint64_t v370 = 0;
    uint64_t v369 = 0;
    uint64_t v368 = 0;
    CFTypeRef v367 = 0;
    uint64_t v366 = 0;
    long long buf = 0uLL;
    CFTypeRef v365 = 0;
    uint64_t v364 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v362 = 0;
    float v361 = 0;
    CFTypeRef v360 = 0;
    CFTypeRef v359 = 0;
    CFTypeRef v358 = 0;
    CFTypeRef v357 = 0;
    CFTypeRef v356 = 0;
    uint64_t v355 = 0;
    CFTypeRef v354 = 0;
    CFTypeRef v353 = 0;
    CFTypeRef v352 = 0;
    CFTypeRef v351 = 0;
    uint64_t v350 = 0;
    uint64_t v349 = 0;
    CFTypeRef v348 = 0;
    CFTypeRef v347 = 0;
    CFTypeRef v346 = 0;
    char v345 = 0;
    uint64_t v344 = 0;
    IMDMessageRecordBulkCopy((uint64_t)v119, &v374, &v394, &v393, &v392, &v391, &v390, &v389, &v388, &v387, &v386, &v385, &v384, &v383, &v382, &v381, &v380, &v379, &v378,
      (unsigned char *)&v377 + 1,
      &v377,
      &v376,
      &v372,
      &v373,
      &v369,
      &v370,
      &v371,
      &v375,
      &v368,
      &v367,
      &v366,
      &buf,
      0,
      &cf,
      &v365,
      &v364,
      &v362,
      &v361,
      &v360,
      (uint64_t)&v359,
      &v358,
      &v357,
      &v356,
      &v355,
      &v354,
      &v353,
      &v352,
      &v351,
      &v350,
      &v349,
      &v348,
      &v347,
      &v346,
      &v345,
      &v344);
    int v120 = (void *)[a1 time];
    uint64_t v121 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v391);
    uint64_t v122 = v121;
    if (v120 != (void *)v121)
    {
      if (!v120)
      {
        int v123 = 1;
        goto LABEL_268;
      }
      if (v121)
      {
        int v123 = [v120 isEqualToDate:v121] ^ 1;
LABEL_268:
        int v336 = v123;
LABEL_269:
        uint64_t v124 = objc_msgSend(a1, "timeRead", v122);
        uint64_t v125 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v390);
        uint64_t v126 = v125;
        if (v124 != (void *)v125)
        {
          if (!v124)
          {
            int v127 = 1;
            goto LABEL_275;
          }
          if (v125)
          {
            int v127 = [v124 isEqualToDate:v125] ^ 1;
LABEL_275:
            int v332 = v127;
LABEL_276:
            CFStringRef v128 = objc_msgSend(a1, "timeDelivered", v126);
            uint64_t v129 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v389);
            uint64_t v130 = v129;
            if (v128 != (void *)v129)
            {
              if (!v128)
              {
                int v131 = 1;
                goto LABEL_282;
              }
              if (v129)
              {
                int v131 = [v128 isEqualToDate:v129] ^ 1;
LABEL_282:
                int v330 = v131;
LABEL_283:
                uint64_t v132 = objc_msgSend(a1, "timePlayed", v130);
                uint64_t v133 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v388);
                uint64_t v134 = v133;
                if (v132 != (void *)v133)
                {
                  if (!v132)
                  {
                    int v135 = 1;
                    goto LABEL_289;
                  }
                  if (v133)
                  {
                    int v135 = [v132 isEqualToDate:v133] ^ 1;
LABEL_289:
                    int v328 = v135;
LABEL_290:
                    uint64_t v136 = objc_msgSend(a1, "plainBody", v134);
                    uint64_t v137 = v136;
                    uint64_t v138 = (void *)v387;
                    if (v136 == v387)
                    {
                      int v326 = 0;
                    }
                    else
                    {
                      if ([v136 length] && objc_msgSend(v138, "length")) {
                        int v139 = [v137 isEqualToString:v138] ^ 1;
                      }
                      else {
                        int v139 = 1;
                      }
                      int v326 = v139;
                    }
                    uint32_t v140 = (void *)[a1 bodyData];
                    if (v140 == v386)
                    {
                      int v141 = 0;
                    }
                    else
                    {
                      int v141 = 1;
                      if (v140 && v386) {
                        int v141 = objc_msgSend(v140, "isEqualToData:") ^ 1;
                      }
                    }
                    int v324 = v141;
                    CFNumberRef v142 = (CFNumberRef)objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
                    if (v142 != v385)
                    {
                      if (!v142)
                      {
                        int v143 = 1;
                        goto LABEL_308;
                      }
                      if (v385)
                      {
                        int v143 = -[__CFNumber isEqualToNumber:](v142, "isEqualToNumber:") ^ 1;
LABEL_308:
                        int v322 = v143;
LABEL_309:
                        uint64_t v144 = (void *)[a1 service];
                        uint64_t v145 = v144;
                        BOOL v146 = (void *)v384;
                        if (v144 != v384)
                        {
                          if (![v144 length])
                          {
                            int v147 = 1;
                            goto LABEL_315;
                          }
                          if ([v146 length])
                          {
                            int v147 = [v145 isEqualToString:v146] ^ 1;
LABEL_315:
                            int v320 = v147;
LABEL_316:
                            uint64_t v148 = (void *)[a1 destinationCallerID];
                            uint64_t v149 = v148;
                            uint64_t v150 = (void *)v357;
                            if (v148 != v357)
                            {
                              if (![v148 length])
                              {
                                int v151 = 1;
                                goto LABEL_322;
                              }
                              if ([v150 length])
                              {
                                int v151 = [v149 isEqualToString:v150] ^ 1;
LABEL_322:
                                int v318 = v151;
LABEL_323:
                                uint64_t v152 = (void *)[a1 roomName];
                                uint64_t v153 = v152;
                                uint64_t v154 = (void *)v376;
                                if (v152 != v376)
                                {
                                  if (![v152 length])
                                  {
                                    int v155 = 1;
                                    goto LABEL_329;
                                  }
                                  if ([v154 length])
                                  {
                                    int v155 = [v153 isEqualToString:v154] ^ 1;
LABEL_329:
                                    int v316 = v155;
LABEL_330:
                                    CFNumberRef v156 = (void *)[a1 account];
                                    int v157 = v156;
                                    int v158 = (void *)v383;
                                    if (v156 != v383)
                                    {
                                      if (![v156 length])
                                      {
                                        int v159 = 1;
                                        goto LABEL_336;
                                      }
                                      if ([v158 length])
                                      {
                                        int v159 = [v157 isEqualToString:v158] ^ 1;
LABEL_336:
                                        int v314 = v159;
LABEL_337:
                                        CFStringRef v160 = (void *)[a1 accountID];
                                        uint64_t v161 = v160;
                                        int8x16_t v162 = (void *)v382;
                                        if (v160 != v382)
                                        {
                                          if (![v160 length])
                                          {
                                            int v163 = 1;
                                            goto LABEL_343;
                                          }
                                          if ([v162 length])
                                          {
                                            int v163 = [v161 isEqualToString:v162] ^ 1;
LABEL_343:
                                            int v312 = v163;
LABEL_344:
                                            id v164 = (void *)[a1 subject];
                                            uint64_t v165 = v164;
                                            unsigned int v166 = (void *)v380;
                                            if (v164 == v380)
                                            {
                                              int v310 = 0;
                                            }
                                            else
                                            {
                                              if ([v164 length] && objc_msgSend(v166, "length")) {
                                                int v167 = [v165 isEqualToString:v166] ^ 1;
                                              }
                                              else {
                                                int v167 = 1;
                                              }
                                              int v310 = v167;
                                            }
                                            uint64_t v168 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(a1, "errorCode"));
                                            uint64_t v169 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:v379];
                                            uint64_t v170 = v169;
                                            if (v168 != (void *)v169)
                                            {
                                              if (!v168)
                                              {
                                                int v171 = 1;
                                                goto LABEL_357;
                                              }
                                              if (v169)
                                              {
                                                int v171 = [v168 isEqualToNumber:v169] ^ 1;
LABEL_357:
                                                int v308 = v171;
LABEL_358:
                                                uint64_t v172 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", objc_msgSend(a1, "expireState", v170));
                                                uint64_t v173 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v375];
                                                uint64_t v174 = v173;
                                                if (v172 != (void *)v173)
                                                {
                                                  if (!v172)
                                                  {
                                                    int v175 = 1;
                                                    goto LABEL_364;
                                                  }
                                                  if (v173)
                                                  {
                                                    int v175 = [v172 isEqualToNumber:v173] ^ 1;
LABEL_364:
                                                    int v306 = v175;
LABEL_365:
                                                    int v176 = objc_msgSend(a1, "payloadData", v174);
                                                    if (v176 == cf)
                                                    {
                                                      int v339 = 0;
                                                    }
                                                    else
                                                    {
                                                      int v339 = 1;
                                                      if (v176 && cf) {
                                                        int v339 = objc_msgSend(v176, "isEqualToData:") ^ 1;
                                                      }
                                                    }
                                                    uint64_t v177 = (void *)[a1 associatedMessageGUID];
                                                    uint64_t v178 = v177;
                                                    uint64_t v179 = (void *)v367;
                                                    if (v177 != v367)
                                                    {
                                                      if (![v177 length])
                                                      {
                                                        int v180 = 1;
                                                        goto LABEL_376;
                                                      }
                                                      if ([v179 length])
                                                      {
                                                        int v180 = [v178 isEqualToString:v179] ^ 1;
LABEL_376:
                                                        int v304 = v180;
LABEL_377:
                                                        int v181 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", objc_msgSend(a1, "associatedMessageType"));
                                                        uint64_t v182 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v366];
                                                        uint64_t v183 = v182;
                                                        if (v181 != (void *)v182)
                                                        {
                                                          if (!v181)
                                                          {
                                                            int v184 = 1;
                                                            goto LABEL_383;
                                                          }
                                                          if (v182)
                                                          {
                                                            int v184 = [v181 isEqualToNumber:v182] ^ 1;
LABEL_383:
                                                            int v302 = v184;
LABEL_384:
                                                            uint64_t v185 = objc_msgSend(a1, "expressiveSendStyleID", v183);
                                                            uint64_t v186 = v185;
                                                            int v187 = (void *)v365;
                                                            if (v185 != v365)
                                                            {
                                                              if (![v185 length])
                                                              {
                                                                int v188 = 1;
                                                                goto LABEL_390;
                                                              }
                                                              if ([v187 length])
                                                              {
                                                                int v188 = [v186 isEqualToString:v187] ^ 1;
LABEL_390:
                                                                int v300 = v188;
LABEL_391:
                                                                uint64_t v189 = (void *)[a1 timeExpressiveSendPlayed];
                                                                uint64_t v190 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v364);
                                                                uint64_t v191 = v190;
                                                                if (v189 != (void *)v190)
                                                                {
                                                                  if (!v189)
                                                                  {
                                                                    int v192 = 1;
                                                                    goto LABEL_397;
                                                                  }
                                                                  if (v190)
                                                                  {
                                                                    int v192 = [v189 isEqualToDate:v190] ^ 1;
LABEL_397:
                                                                    int v298 = v192;
LABEL_398:
                                                                    uint64_t v193 = objc_msgSend(a1, "associatedMessageRange", v191);
                                                                    uint64_t v195 = v194;
                                                                    CFStringRef v196 = (void *)[MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:v193];
                                                                    uint64_t v197 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:(void)buf];
                                                                    if (v196 != (void *)v197)
                                                                    {
                                                                      if (!v196)
                                                                      {
                                                                        int v198 = 1;
                                                                        goto LABEL_404;
                                                                      }
                                                                      if (v197)
                                                                      {
                                                                        int v198 = [v196 isEqualToNumber:v197] ^ 1;
LABEL_404:
                                                                        int v296 = v198;
LABEL_405:
                                                                        uint64_t v199 = (void *)[MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:v195];
                                                                        uint64_t v200 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:*((void *)&buf + 1)];
                                                                        uint64_t v201 = v200;
                                                                        if (v199 != (void *)v200)
                                                                        {
                                                                          if (!v199)
                                                                          {
                                                                            int v202 = 1;
                                                                            goto LABEL_411;
                                                                          }
                                                                          if (v200)
                                                                          {
                                                                            int v202 = [v199 isEqualToNumber:v200] ^ 1;
LABEL_411:
                                                                            int v294 = v202;
LABEL_412:
                                                                            BOOL v203 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo", v201));
                                                                            if (v203 == v362)
                                                                            {
                                                                              int v204 = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                              int v204 = 1;
                                                                              if (v203 && v362) {
                                                                                int v204 = objc_msgSend(v203, "isEqualToData:") ^ 1;
                                                                              }
                                                                            }
                                                                            int v292 = v204;
                                                                            uint64_t v205 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", objc_msgSend(a1, "cloudKitSyncState"));
                                                                            uint64_t v206 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v361];
                                                                            uint64_t v207 = v206;
                                                                            if (v205 != (void *)v206)
                                                                            {
                                                                              if (!v205)
                                                                              {
                                                                                int v208 = 1;
                                                                                goto LABEL_423;
                                                                              }
                                                                              if (v206)
                                                                              {
                                                                                int v208 = [v205 isEqualToNumber:v206] ^ 1;
LABEL_423:
                                                                                int v290 = v208;
LABEL_424:
                                                                                uint64_t v209 = objc_msgSend(a1, "cloudKitRecordID", v207);
                                                                                int v210 = v209;
                                                                                uint64_t v211 = (void *)v360;
                                                                                if (v209 != v360)
                                                                                {
                                                                                  if (![v209 length])
                                                                                  {
                                                                                    int v212 = 1;
                                                                                    goto LABEL_430;
                                                                                  }
                                                                                  if ([v211 length])
                                                                                  {
                                                                                    int v212 = [v210 isEqualToString:v211] ^ 1;
LABEL_430:
                                                                                    int v288 = v212;
LABEL_431:
                                                                                    BOOL v213 = (void *)[a1 cloudKitRecordChangeTag];
                                                                                    CFNumberRef v214 = v213;
                                                                                    uint64_t v215 = (void *)v358;
                                                                                    if (v213 != v358)
                                                                                    {
                                                                                      if (![v213 length])
                                                                                      {
                                                                                        int v216 = 1;
                                                                                        goto LABEL_437;
                                                                                      }
                                                                                      if ([v215 length])
                                                                                      {
                                                                                        int v216 = [v214 isEqualToString:v215] ^ 1;
LABEL_437:
                                                                                        int v286 = v216;
LABEL_438:
                                                                                        uint64_t v217 = (void *)[a1 replyToGUID];
                                                                                        uint64_t v218 = v217;
                                                                                        uint64_t v219 = (void *)v356;
                                                                                        if (v217 != v356)
                                                                                        {
                                                                                          if (![v217 length])
                                                                                          {
                                                                                            int v220 = 1;
                                                                                            goto LABEL_444;
                                                                                          }
                                                                                          if ([v219 length])
                                                                                          {
                                                                                            int v220 = [v218 isEqualToString:v219] ^ 1;
LABEL_444:
                                                                                            int v284 = v220;
LABEL_445:
                                                                                            int v221 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
                                                                                            uint64_t v222 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v355];
                                                                                            uint64_t v223 = v222;
                                                                                            if (v221 != (void *)v222)
                                                                                            {
                                                                                              if (!v221)
                                                                                              {
                                                                                                int v224 = 1;
                                                                                                goto LABEL_451;
                                                                                              }
                                                                                              if (v222)
                                                                                              {
                                                                                                int v224 = [v221 isEqualToNumber:v222] ^ 1;
LABEL_451:
                                                                                                int v282 = v224;
LABEL_452:
                                                                                                id v225 = v396;
                                                                                                uint64_t v226 = (void *)v354;
                                                                                                if (v396 != v354)
                                                                                                {
                                                                                                  if (!objc_msgSend(v396, "length", v223))
                                                                                                  {
                                                                                                    int v227 = 1;
                                                                                                    goto LABEL_458;
                                                                                                  }
                                                                                                  if ([v226 length])
                                                                                                  {
                                                                                                    int v227 = [v225 isEqualToString:v226] ^ 1;
LABEL_458:
                                                                                                    int v280 = v227;
LABEL_459:
                                                                                                    id v228 = v395;
                                                                                                    int v229 = (void *)v353;
                                                                                                    if (v395 != v353)
                                                                                                    {
                                                                                                      if (![v395 length])
                                                                                                      {
                                                                                                        int v230 = 1;
                                                                                                        goto LABEL_465;
                                                                                                      }
                                                                                                      if ([v229 length])
                                                                                                      {
                                                                                                        int v230 = [v228 isEqualToString:v229] ^ 1;
LABEL_465:
                                                                                                        int v278 = v230;
LABEL_466:
                                                                                                        int v231 = (void *)[a1 dateEdited];
                                                                                                        uint64_t v232 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v349);
                                                                                                        uint64_t v233 = v232;
                                                                                                        if (v231 != (void *)v232)
                                                                                                        {
                                                                                                          if (!v231)
                                                                                                          {
                                                                                                            int v234 = 1;
                                                                                                            goto LABEL_472;
                                                                                                          }
                                                                                                          if (v232)
                                                                                                          {
                                                                                                            int v234 = [v231 isEqualToDate:v232] ^ 1;
LABEL_472:
                                                                                                            int v277 = v234;
                                                                                                            goto LABEL_473;
                                                                                                          }
                                                                                                        }
                                                                                                        int v277 = 0;
LABEL_473:
                                                                                                        uint64_t v235 = objc_msgSend(a1, "biaReferenceID", v233);
                                                                                                        uint64_t v236 = v235;
                                                                                                        unint64_t v237 = (void *)v348;
                                                                                                        if (v235 == v348) {
                                                                                                          goto LABEL_477;
                                                                                                        }
                                                                                                        if (![v235 length])
                                                                                                        {
                                                                                                          int v238 = 1;
                                                                                                          goto LABEL_479;
                                                                                                        }
                                                                                                        if (![v237 length]) {
LABEL_477:
                                                                                                        }
                                                                                                          int v238 = 0;
                                                                                                        else {
                                                                                                          int v238 = [v236 isEqualToString:v237] ^ 1;
                                                                                                        }
LABEL_479:
                                                                                                        int v239 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "partCount"));
                                                                                                        uint64_t v240 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v350];
                                                                                                        if (v239 == (void *)v240) {
                                                                                                          goto LABEL_483;
                                                                                                        }
                                                                                                        if (!v239)
                                                                                                        {
                                                                                                          int v241 = 1;
                                                                                                          goto LABEL_485;
                                                                                                        }
                                                                                                        if (!v240) {
LABEL_483:
                                                                                                        }
                                                                                                          int v241 = 0;
                                                                                                        else {
                                                                                                          int v241 = [v239 isEqualToNumber:v240] ^ 1;
                                                                                                        }
LABEL_485:
                                                                                                        uint64_t v242 = (void *)[a1 fallbackHash];
                                                                                                        uint64_t v243 = v242;
                                                                                                        uint64_t v244 = (void *)v347;
                                                                                                        if (v242 == v347) {
                                                                                                          goto LABEL_489;
                                                                                                        }
                                                                                                        if (![v242 length])
                                                                                                        {
                                                                                                          int v245 = 1;
                                                                                                          goto LABEL_491;
                                                                                                        }
                                                                                                        if (![v244 length]) {
LABEL_489:
                                                                                                        }
                                                                                                          int v245 = 0;
                                                                                                        else {
                                                                                                          int v245 = [v243 isEqualToString:v244] ^ 1;
                                                                                                        }
LABEL_491:
                                                                                                        id v246 = (void *)[a1 associatedMessageEmoji];
                                                                                                        uint64_t v247 = v246;
                                                                                                        int v248 = (void *)v346;
                                                                                                        if (v246 == v346) {
                                                                                                          goto LABEL_495;
                                                                                                        }
                                                                                                        if (![v246 length])
                                                                                                        {
                                                                                                          int v249 = 1;
                                                                                                          goto LABEL_497;
                                                                                                        }
                                                                                                        if (![v248 length]) {
LABEL_495:
                                                                                                        }
                                                                                                          int v249 = 0;
                                                                                                        else {
                                                                                                          int v249 = [v247 isEqualToString:v248] ^ 1;
                                                                                                        }
LABEL_497:
                                                                                                        uint64_t v250 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "scheduleType"));
                                                                                                        uint64_t v251 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v345];
                                                                                                        if (v250 == (void *)v251) {
                                                                                                          goto LABEL_501;
                                                                                                        }
                                                                                                        if (!v250)
                                                                                                        {
                                                                                                          int v252 = 1;
                                                                                                          goto LABEL_503;
                                                                                                        }
                                                                                                        if (!v251) {
LABEL_501:
                                                                                                        }
                                                                                                          int v252 = 0;
                                                                                                        else {
                                                                                                          int v252 = [v250 isEqualToNumber:v251] ^ 1;
                                                                                                        }
LABEL_503:
                                                                                                        int v253 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "scheduleState"));
                                                                                                        uint64_t v254 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v344];
                                                                                                        if (v253 == (void *)v254) {
                                                                                                          goto LABEL_507;
                                                                                                        }
                                                                                                        if (!v253)
                                                                                                        {
                                                                                                          int v255 = 1;
                                                                                                          goto LABEL_509;
                                                                                                        }
                                                                                                        if (!v254) {
LABEL_507:
                                                                                                        }
                                                                                                          int v255 = 0;
                                                                                                        else {
                                                                                                          int v255 = [v253 isEqualToNumber:v254] ^ 1;
                                                                                                        }
LABEL_509:
                                                                                                        BOOL v256 = objc_msgSend((id)objc_msgSend(a1, "roomName"), "length") != 0;
                                                                                                        uint64_t v334 = (void *)[MEMORY[0x1E4F28ED0] numberWithInt:v256];
                                                                                                        uint64_t v257 = [MEMORY[0x1E4F28ED0] numberWithInt:v378];
                                                                                                        if (v334 == (void *)v257) {
                                                                                                          goto LABEL_513;
                                                                                                        }
                                                                                                        if (!v334)
                                                                                                        {
                                                                                                          int v258 = 1;
                                                                                                          goto LABEL_515;
                                                                                                        }
                                                                                                        if (!v257) {
LABEL_513:
                                                                                                        }
                                                                                                          int v258 = 0;
                                                                                                        else {
                                                                                                          int v258 = objc_msgSend(v334, "isEqualToNumber:") ^ 1;
                                                                                                        }
LABEL_515:
                                                                                                        uint64_t Identifier = (uint64_t)v381;
                                                                                                        if ([a1 isFromMe]) {
                                                                                                          uint64_t v259 = [a1 handle];
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v259 = [a1 sender];
                                                                                                        }
                                                                                                        CFStringRef v260 = (const __CFString *)v259;
                                                                                                        int v261 = v336 | v332 | v330 | v328 | v326 | v324 | v322 | v320 | v318 | v316 | v314 | v312 | v310 | v308 | v306 | v339 | v304 | v302 | v300 | v298 | v296 | v294 | v292 | v290 | v288 | v286 | v284 | v282 | v280 | v278 | v277 | v238 | v241 | v245 | v249 | v252 | v255 | v258;
                                                                                                        if (v259)
                                                                                                        {
                                                                                                          BOOL v262 = (__CFString *)[a1 service];
                                                                                                          if (v262)
                                                                                                          {
                                                                                                            uint64_t v263 = (const void *)IMDHandleRecordCopyHandleForIDOnService(v260, v262);
                                                                                                            if (v263 || (v264 = IMCountryCodeForIncomingTextMessage(), (uint64_t v263 = IMDHandleRecordCreate(*MEMORY[0x1E4F1CF80], (uint64_t)v260, v264, v262, 0, 0)) != 0))
                                                                                                            {
                                                                                                              uint64_t v265 = v381;
                                                                                                              if (v265 != (const void *)IMDHandleRecordGetIdentifier((uint64_t)v263)) {
                                                                                                                int v261 = 1;
                                                                                                              }
                                                                                                              uint64_t Identifier = IMDHandleRecordGetIdentifier((uint64_t)v263);
                                                                                                              CFRelease(v263);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        uint64_t v266 = objc_msgSend(MEMORY[0x1E4F6E880], "serializedStringFromArray:", objc_msgSend(a1, "syndicationRanges"));
                                                                                                        long long v340 = v266;
                                                                                                        uint64_t v267 = (void *)v352;
                                                                                                        if (v266 == v352) {
                                                                                                          goto LABEL_529;
                                                                                                        }
                                                                                                        if (![v266 length])
                                                                                                        {
                                                                                                          int v268 = 1;
                                                                                                          goto LABEL_531;
                                                                                                        }
                                                                                                        if (![v267 length]) {
LABEL_529:
                                                                                                        }
                                                                                                          int v268 = 0;
                                                                                                        else {
                                                                                                          int v268 = [v340 isEqualToString:v267] ^ 1;
                                                                                                        }
LABEL_531:
                                                                                                        uint64_t v269 = objc_msgSend(MEMORY[0x1E4F6E880], "serializedStringFromArray:", objc_msgSend(a1, "syncedSyndicationRanges"));
                                                                                                        uint64_t v337 = v269;
                                                                                                        int64_t v270 = (void *)v351;
                                                                                                        if (v269 == v351) {
                                                                                                          goto LABEL_535;
                                                                                                        }
                                                                                                        if (![v269 length])
                                                                                                        {
                                                                                                          int v271 = 1;
                                                                                                          goto LABEL_537;
                                                                                                        }
                                                                                                        if (![v270 length]) {
LABEL_535:
                                                                                                        }
                                                                                                          int v271 = 0;
                                                                                                        else {
                                                                                                          int v271 = [v337 isEqualToString:v270] ^ 1;
                                                                                                        }
LABEL_537:
                                                                                                        if (v392) {
                                                                                                          CFRelease(v392);
                                                                                                        }
                                                                                                        if (v387) {
                                                                                                          CFRelease(v387);
                                                                                                        }
                                                                                                        if (v386) {
                                                                                                          CFRelease(v386);
                                                                                                        }
                                                                                                        if (cf) {
                                                                                                          CFRelease(cf);
                                                                                                        }
                                                                                                        if (v385) {
                                                                                                          CFRelease(v385);
                                                                                                        }
                                                                                                        if (v384) {
                                                                                                          CFRelease(v384);
                                                                                                        }
                                                                                                        if (v383) {
                                                                                                          CFRelease(v383);
                                                                                                        }
                                                                                                        if (v382) {
                                                                                                          CFRelease(v382);
                                                                                                        }
                                                                                                        if (v380) {
                                                                                                          CFRelease(v380);
                                                                                                        }
                                                                                                        if (v376) {
                                                                                                          CFRelease(v376);
                                                                                                        }
                                                                                                        if (v373) {
                                                                                                          CFRelease(v373);
                                                                                                        }
                                                                                                        if (v367) {
                                                                                                          CFRelease(v367);
                                                                                                        }
                                                                                                        if (v365) {
                                                                                                          CFRelease(v365);
                                                                                                        }
                                                                                                        if (v362) {
                                                                                                          CFRelease(v362);
                                                                                                        }
                                                                                                        if (v360) {
                                                                                                          CFRelease(v360);
                                                                                                        }
                                                                                                        if (v358) {
                                                                                                          CFRelease(v358);
                                                                                                        }
                                                                                                        if (v359) {
                                                                                                          CFRelease(v359);
                                                                                                        }
                                                                                                        if (v357) {
                                                                                                          CFRelease(v357);
                                                                                                        }
                                                                                                        if (v356) {
                                                                                                          CFRelease(v356);
                                                                                                        }
                                                                                                        if (v354) {
                                                                                                          CFRelease(v354);
                                                                                                        }
                                                                                                        if (v353) {
                                                                                                          CFRelease(v353);
                                                                                                        }
                                                                                                        if (v352) {
                                                                                                          CFRelease(v352);
                                                                                                        }
                                                                                                        if (v351) {
                                                                                                          CFRelease(v351);
                                                                                                        }
                                                                                                        if (v348) {
                                                                                                          CFRelease(v348);
                                                                                                        }
                                                                                                        if (v347) {
                                                                                                          CFRelease(v347);
                                                                                                        }
                                                                                                        if (v346) {
                                                                                                          CFRelease(v346);
                                                                                                        }
                                                                                                        if ((v261 | v268 | v271 | a3) == 1)
                                                                                                        {
                                                                                                          int64_t v333 = [a1 replaceID];
                                                                                                          int64_t v331 = objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval");
                                                                                                          int64_t v329 = objc_msgSend((id)objc_msgSend(a1, "timeRead"), "__im_nanosecondTimeInterval");
                                                                                                          int64_t v327 = objc_msgSend((id)objc_msgSend(a1, "timeDelivered"), "__im_nanosecondTimeInterval");
                                                                                                          int64_t v325 = objc_msgSend((id)objc_msgSend(a1, "timePlayed"), "__im_nanosecondTimeInterval");
                                                                                                          uint64_t v323 = [a1 plainBody];
                                                                                                          uint64_t v321 = [a1 bodyData];
                                                                                                          uint64_t v319 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
                                                                                                          uint64_t v317 = [a1 service];
                                                                                                          uint64_t v315 = [a1 account];
                                                                                                          uint64_t v313 = [a1 accountID];
                                                                                                          uint64_t v311 = [a1 subject];
                                                                                                          unsigned int v309 = [a1 errorCode];
                                                                                                          int v335 = [v334 intValue];
                                                                                                          int64_t v307 = [a1 expireState];
                                                                                                          uint64_t v305 = [a1 associatedMessageGUID];
                                                                                                          int64_t v303 = [a1 associatedMessageType];
                                                                                                          uint64_t v272 = [a1 associatedMessageRange];
                                                                                                          int64_t v299 = v273;
                                                                                                          int64_t v301 = v272;
                                                                                                          uint64_t v297 = [a1 payloadData];
                                                                                                          uint64_t v295 = [a1 expressiveSendStyleID];
                                                                                                          int64_t v293 = objc_msgSend((id)objc_msgSend(a1, "timeExpressiveSendPlayed"), "__im_nanosecondTimeInterval");
                                                                                                          uint64_t v291 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo"));
                                                                                                          int64_t v289 = [a1 cloudKitSyncState];
                                                                                                          uint64_t v287 = [a1 cloudKitRecordID];
                                                                                                          uint64_t v285 = [a1 cloudKitServerChangeTokenBlob];
                                                                                                          uint64_t v283 = [a1 cloudKitRecordChangeTag];
                                                                                                          uint64_t v281 = [a1 destinationCallerID];
                                                                                                          uint64_t v279 = [a1 replyToGUID];
                                                                                                          int64_t v274 = [a1 sortID];
                                                                                                          IMDMessageRecordBulkUpdate((uint64_t)v343, v333, 0, v331, v329, v327, v325, v323, v321, v319, v317, v315, v313, Identifier, v311, v309, v335, 0, 0, 0, 0, 0, v307, 0, v305, v303, v301, v299, v297, v295, v293, v291, v289, v287, v285, v283, v281, v279, v274, (uint64_t)v396, (uint64_t)v395, (uint64_t)v340, (uint64_t)v337, [a1 partCount], objc_msgSend((id)objc_msgSend(a1, "dateEdited"), "__im_nanosecondTimeInterval"), objc_msgSend(a1, "biaReferenceID"), objc_msgSend(a1, "fallbackHash"), objc_msgSend(a1, "associatedMessageEmoji"), objc_msgSend(a1, "scheduleType"), objc_msgSend(a1, "scheduleState"));
                                                                                                        }
                                                                                                        CFRelease(v343);
                                                                                                        goto LABEL_592;
                                                                                                      }
                                                                                                    }
                                                                                                    int v278 = 0;
                                                                                                    goto LABEL_466;
                                                                                                  }
                                                                                                }
                                                                                                int v280 = 0;
                                                                                                goto LABEL_459;
                                                                                              }
                                                                                            }
                                                                                            int v282 = 0;
                                                                                            goto LABEL_452;
                                                                                          }
                                                                                        }
                                                                                        int v284 = 0;
                                                                                        goto LABEL_445;
                                                                                      }
                                                                                    }
                                                                                    int v286 = 0;
                                                                                    goto LABEL_438;
                                                                                  }
                                                                                }
                                                                                int v288 = 0;
                                                                                goto LABEL_431;
                                                                              }
                                                                            }
                                                                            int v290 = 0;
                                                                            goto LABEL_424;
                                                                          }
                                                                        }
                                                                        int v294 = 0;
                                                                        goto LABEL_412;
                                                                      }
                                                                    }
                                                                    int v296 = 0;
                                                                    goto LABEL_405;
                                                                  }
                                                                }
                                                                int v298 = 0;
                                                                goto LABEL_398;
                                                              }
                                                            }
                                                            int v300 = 0;
                                                            goto LABEL_391;
                                                          }
                                                        }
                                                        int v302 = 0;
                                                        goto LABEL_384;
                                                      }
                                                    }
                                                    int v304 = 0;
                                                    goto LABEL_377;
                                                  }
                                                }
                                                int v306 = 0;
                                                goto LABEL_365;
                                              }
                                            }
                                            int v308 = 0;
                                            goto LABEL_358;
                                          }
                                        }
                                        int v312 = 0;
                                        goto LABEL_344;
                                      }
                                    }
                                    int v314 = 0;
                                    goto LABEL_337;
                                  }
                                }
                                int v316 = 0;
                                goto LABEL_330;
                              }
                            }
                            int v318 = 0;
                            goto LABEL_323;
                          }
                        }
                        int v320 = 0;
                        goto LABEL_316;
                      }
                    }
                    int v322 = 0;
                    goto LABEL_309;
                  }
                }
                int v328 = 0;
                goto LABEL_290;
              }
            }
            int v330 = 0;
            goto LABEL_283;
          }
        }
        int v332 = 0;
        goto LABEL_276;
      }
    }
    int v336 = 0;
    goto LABEL_269;
  }
LABEL_592:
  return a1;
}

void *IMDUpdateIMItemWithIMItemForceReplace(void *a1, void *a2, int a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x1B3E8A120]();
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = a2;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Updating IMItem: %@ from IMItem: %@", buf, 0x16u);
    }
  }
  uint64_t v7 = [a2 time];
  uint64_t v8 = (void *)v7;
  if ((a3 & 1) != 0 || v7)
  {
    uint64_t v9 = (void *)[a1 time];
    if (v9 != v8 && (!v9 || v8 && ([v9 isEqualToDate:v8] & 1) == 0))
    {
      if ((a3 & 1) != 0
        || (objc_msgSend((id)objc_msgSend(a1, "time"), "timeIntervalSinceReferenceDate"), v10 >= 0.00000011920929))
      {
        [a1 setTime:v8];
      }
    }
  }
  uint64_t v11 = (void *)[a2 account];
  uint64_t v12 = (void *)[a1 account];
  uint64_t v13 = v12;
  if (v12 != v11
    && (![v12 length]
     || [v11 length] && (objc_msgSend(v13, "isEqualToString:", v11) & 1) == 0))
  {
    [a1 setAccount:v11];
  }
  uint64_t v14 = (void *)[a2 accountID];
  uint64_t v15 = (void *)[a1 accountID];
  uint64_t v16 = v15;
  if (v15 != v14
    && (![v15 length]
     || [v14 length] && (objc_msgSend(v16, "isEqualToString:", v14) & 1) == 0))
  {
    [a1 setAccountID:v14];
  }
  uint64_t v17 = (void *)[a2 service];
  __int16 v18 = (void *)[a1 service];
  uint64_t v19 = v18;
  if (v18 != v17
    && (![v18 length]
     || [v17 length] && (objc_msgSend(v19, "isEqualToString:", v17) & 1) == 0))
  {
    [a1 setService:v17];
  }
  uint64_t v20 = (void *)[a2 destinationCallerID];
  uint64_t v21 = (void *)[a1 destinationCallerID];
  uint64_t v22 = v21;
  if (v21 != v20
    && (![v21 length]
     || [v20 length] && (objc_msgSend(v22, "isEqualToString:", v20) & 1) == 0))
  {
    [a1 setDestinationCallerID:v20];
  }
  if ([a1 conformsToProtocol:&unk_1F087B280]
    && [a2 conformsToProtocol:&unk_1F087B280])
  {
    objc_msgSend(a1, "setErrorCode:", objc_msgSend(a2, "errorCode"));
  }
  if (a3)
  {
    objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a2, "cloudKitSyncState"));
  }
  else
  {
    uint64_t v23 = [a1 cloudKitSyncState];
    if (v23 != [a2 cloudKitSyncState]) {
      objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a2, "cloudKitSyncState"));
    }
    uint64_t v24 = (void *)[a1 cloudKitRecordID];
    uint64_t v25 = (void *)[a2 cloudKitRecordID];
    if (v24 == v25
      || [v24 length]
      && (![v25 length] || (objc_msgSend(v24, "isEqualToString:", v25) & 1) != 0))
    {
      goto LABEL_46;
    }
  }
  objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a2, "cloudKitRecordID"));
  if (a3)
  {
    objc_msgSend(a1, "setCloudKitRecordChangeTag:", objc_msgSend(a2, "cloudKitRecordChangeTag"));
    objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a2, "cloudKitServerChangeTokenBlob"));
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v26 = (void *)[a1 cloudKitRecordChangeTag];
  uint64_t v27 = (void *)[a2 cloudKitRecordChangeTag];
  if (v26 != v27
    && (![v26 length]
     || [v27 length] && (objc_msgSend(v26, "isEqualToString:", v27) & 1) == 0))
  {
    objc_msgSend(a1, "setCloudKitRecordChangeTag:", objc_msgSend(a2, "cloudKitRecordChangeTag"));
    objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a2, "cloudKitServerChangeTokenBlob"));
  }
  uint64_t v28 = (void *)[a1 replyToGUID];
  uint64_t v29 = (void *)[a2 replyToGUID];
  if (v28 == v29
    || [v28 length]
    && (![v29 length] || (objc_msgSend(v28, "isEqualToString:", v29) & 1) != 0))
  {
LABEL_56:
    uint64_t v30 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
    uint64_t v31 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a2, "sortID"));
    uint64_t v32 = v31;
    if (v30 == (void *)v31 || v30 && (!v31 || ([v30 isEqualToNumber:v31] & 1) != 0)) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_55:
  objc_msgSend(a1, "setReplyToGUID:", objc_msgSend(a2, "replyToGUID"));
  if ((a3 & 1) == 0) {
    goto LABEL_56;
  }
LABEL_60:
  objc_msgSend(a1, "setSortID:", objc_msgSend(a2, "sortID"));
LABEL_61:
  CFStringRef v33 = IMDMessageRecordCopyMessageForGUID((const __CFString *)objc_msgSend(a1, "guid", v32));
  CFStringRef v108 = v33;
  if (!v33) {
    goto LABEL_168;
  }
  CFTypeRef v129 = 0;
  uint64_t v130 = 0;
  CFTypeRef v127 = 0;
  uint64_t v128 = 0;
  CFTypeRef v125 = 0;
  CFTypeRef v126 = 0;
  CFTypeRef v123 = 0;
  uint64_t v124 = 0;
  int64_t v121 = 0;
  int64_t v122 = 0;
  int64_t v119 = 0;
  int64_t v120 = 0;
  int64_t v117 = 0;
  int64_t v118 = 0;
  *(_OWORD *)long long buf = 0u;
  CFTypeRef v115 = 0;
  uint64_t v116 = 0;
  CFTypeRef v113 = 0;
  CFTypeRef cf = 0;
  uint64_t v111 = 0;
  CFTypeRef v112 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  IMDMessageRecordBulkCopy((uint64_t)v33, 0, &v130, 0, &v129, &v128, 0, 0, 0, 0, 0, 0, &v127, &v126, &v125, &v124, 0, &v109, 0,
    0,
    0,
    &v123,
    &v122,
    0,
    &v119,
    &v120,
    &v121,
    0,
    &v118,
    0,
    &v117,
    buf,
    0,
    0,
    0,
    0,
    0,
    &v116,
    &v115,
    (uint64_t)&cf,
    &v113,
    &v112,
    &v111,
    &v110,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  uint64_t v34 = (void *)[a1 time];
  uint64_t v35 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v128);
  uint64_t v36 = v35;
  if (v34 == (void *)v35) {
    goto LABEL_66;
  }
  if (!v34)
  {
    int v37 = 1;
    goto LABEL_68;
  }
  if (!v35)
  {
LABEL_66:
    int v105 = 0;
    goto LABEL_69;
  }
  int v37 = [v34 isEqualToDate:v35] ^ 1;
LABEL_68:
  int v105 = v37;
LABEL_69:
  uint64_t v38 = objc_msgSend(a1, "service", v36);
  uint64_t v39 = v38;
  uint64_t v40 = (void *)v127;
  if (v38 != v127)
  {
    if (![v38 length])
    {
      int v41 = 1;
      goto LABEL_75;
    }
    if ([v40 length])
    {
      int v41 = [v39 isEqualToString:v40] ^ 1;
LABEL_75:
      int v103 = v41;
      goto LABEL_76;
    }
  }
  int v103 = 0;
LABEL_76:
  uint64_t v42 = (void *)[a1 destinationCallerID];
  uint64_t v43 = v42;
  double v44 = (void *)v112;
  if (v42 == v112) {
    goto LABEL_80;
  }
  if (![v42 length])
  {
    int v45 = 1;
    goto LABEL_82;
  }
  if (![v44 length])
  {
LABEL_80:
    int v101 = 0;
    goto LABEL_83;
  }
  int v45 = [v43 isEqualToString:v44] ^ 1;
LABEL_82:
  int v101 = v45;
LABEL_83:
  uint64_t v46 = (void *)[a1 roomName];
  uint64_t v47 = v46;
  BOOL v48 = (void *)v123;
  if (v46 == v123)
  {
LABEL_87:
    int v49 = 0;
    goto LABEL_89;
  }
  if ([v46 length])
  {
    if ([v48 length])
    {
      int v49 = [v47 isEqualToString:v48] ^ 1;
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  int v49 = 1;
LABEL_89:
  uint64_t v50 = (void *)[a1 account];
  uint64_t v51 = v50;
  uint64_t v52 = (void *)v126;
  if (v50 == v126)
  {
LABEL_93:
    int v53 = 0;
    goto LABEL_95;
  }
  if ([v50 length])
  {
    if ([v52 length])
    {
      int v53 = [v51 isEqualToString:v52] ^ 1;
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  int v53 = 1;
LABEL_95:
  uint64_t v54 = (void *)[a1 accountID];
  uint64_t v55 = v54;
  uint64_t v56 = (void *)v125;
  if (v54 == v125)
  {
LABEL_99:
    int v57 = 0;
    goto LABEL_101;
  }
  if ([v54 length])
  {
    if ([v56 length])
    {
      int v57 = [v55 isEqualToString:v56] ^ 1;
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  int v57 = 1;
LABEL_101:
  uint64_t v58 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", objc_msgSend(a1, "cloudKitSyncState"));
  uint64_t v59 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v116];
  if (v58 == (void *)v59)
  {
LABEL_105:
    int v60 = 0;
    goto LABEL_107;
  }
  if (v58)
  {
    if (v59)
    {
      int v60 = [v58 isEqualToNumber:v59] ^ 1;
      goto LABEL_107;
    }
    goto LABEL_105;
  }
  int v60 = 1;
LABEL_107:
  uint64_t v61 = (void *)[a1 cloudKitRecordID];
  char v62 = v61;
  uint64_t v63 = (void *)v115;
  if (v61 == v115)
  {
LABEL_111:
    int v64 = 0;
    goto LABEL_113;
  }
  if ([v61 length])
  {
    if ([v63 length])
    {
      int v64 = [v62 isEqualToString:v63] ^ 1;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  int v64 = 1;
LABEL_113:
  uint64_t v65 = (void *)[a1 cloudKitRecordChangeTag];
  uint64_t v66 = v65;
  uint64_t v67 = (void *)v113;
  if (v65 == v113)
  {
LABEL_117:
    int v68 = 0;
    goto LABEL_119;
  }
  if ([v65 length])
  {
    if ([v67 length])
    {
      int v68 = [v66 isEqualToString:v67] ^ 1;
      goto LABEL_119;
    }
    goto LABEL_117;
  }
  int v68 = 1;
LABEL_119:
  uint64_t v69 = (void *)[a1 replyToGUID];
  uint64_t v70 = v69;
  uint64_t v71 = v111;
  if (v69 == v111)
  {
LABEL_123:
    int v72 = 0;
    goto LABEL_125;
  }
  if ([v69 length])
  {
    if ([v71 length])
    {
      int v72 = [v70 isEqualToString:v71] ^ 1;
      goto LABEL_125;
    }
    goto LABEL_123;
  }
  int v72 = 1;
LABEL_125:
  uint64_t v73 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
  uint64_t v74 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v110];
  if (v73 == (void *)v74)
  {
LABEL_129:
    int v75 = 0;
    goto LABEL_131;
  }
  if (v73)
  {
    if (v74)
    {
      int v75 = [v73 isEqualToNumber:v74] ^ 1;
      goto LABEL_131;
    }
    goto LABEL_129;
  }
  int v75 = 1;
LABEL_131:
  int v76 = v105 | v103 | v101 | v49 | v53 | v57 | v60 | v64 | v68 | v72 | v75;
  if ([a1 conformsToProtocol:&unk_1F087B280])
  {
    uint64_t v77 = v109;
    if (v77 != [a1 errorCode]) {
      int v76 = 1;
    }
  }
  uint64_t Identifier = (uint64_t)v124;
  if ([a1 sender]) {
    uint64_t v78 = [a1 sender];
  }
  else {
    uint64_t v78 = [a1 handle];
  }
  CFStringRef v79 = (const __CFString *)v78;
  if (v78)
  {
    uint64_t v80 = (__CFString *)[a1 service];
    if (v80)
    {
      uint64_t v81 = (const void *)IMDHandleRecordCopyHandleForIDOnService(v79, v80);
      if (v81
        || (uint64_t v82 = IMCountryCodeForIncomingTextMessage(),
            (uint64_t v81 = IMDHandleRecordCreate(*MEMORY[0x1E4F1CF80], (uint64_t)v79, v82, v80, 0, 0)) != 0))
      {
        uint64_t v83 = v124;
        if (v83 != (const void *)IMDHandleRecordGetIdentifier((uint64_t)v81)) {
          int v76 = 1;
        }
        uint64_t Identifier = IMDHandleRecordGetIdentifier((uint64_t)v81);
        CFRelease(v81);
      }
    }
  }
  if ([a1 conformsToProtocol:&unk_1F087B280]) {
    int64_t v104 = [a1 errorCode];
  }
  else {
    int64_t v104 = 0;
  }
  if (v129) {
    CFRelease(v129);
  }
  if (v127) {
    CFRelease(v127);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (v125) {
    CFRelease(v125);
  }
  if (v123) {
    CFRelease(v123);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v113) {
    CFRelease(v113);
  }
  if (v115) {
    CFRelease(v115);
  }
  if (v112) {
    CFRelease(v112);
  }
  if ((v76 | a3) == 1)
  {
    int64_t v102 = objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval");
    uint64_t v100 = [a1 service];
    uint64_t v99 = [a1 account];
    uint64_t v98 = [a1 accountID];
    int64_t v84 = v121;
    int64_t v85 = v118;
    int64_t v96 = v119;
    int64_t v97 = v122;
    int64_t v95 = v120;
    int64_t v86 = v117;
    int64_t v87 = [a1 cloudKitSyncState];
    uint64_t v88 = [a1 cloudKitRecordID];
    uint64_t v89 = [a1 cloudKitServerChangeTokenBlob];
    uint64_t v90 = [a1 cloudKitRecordChangeTag];
    uint64_t v91 = [a1 destinationCallerID];
    uint64_t v92 = [a1 replyToGUID];
    int64_t v93 = [a1 sortID];
    IMDMessageRecordBulkUpdate((uint64_t)v108, 0, 0, v102, 0, 0, 0, 0, 0, 0, v100, v99, v98, Identifier, 0, v104, 0, v97, 0,
      v96,
      v95,
      v84,
      0,
      v85,
      0,
      v86,
      *(int64_t *)buf,
      *(int64_t *)&buf[8],
      0,
      0,
      0,
      0,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0);
  }
  CFRelease(v108);
LABEL_168:
  return a1;
}

uint64_t IMDSharedSqliteDatabasePath()
{
  if (!sub_1AFB58D60(1))
  {
    uint64_t v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D2FC();
    }
  }
  uint64_t v1 = CSDBSqliteDatabasePath();
  if (!v1)
  {
    id v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D254();
    }
  }
  return v1;
}

BOOL IMDSharedThreadedRecordStoreIsNull()
{
  return qword_1EB5ABC98 == 0;
}

void sub_1AFBF5950(uint64_t a1)
{
  CSDBSetCorruptedDatabaseHandler();
  if (!qword_1EB5ABC98)
  {
    qword_1EB5ABC98 = CSDBCreateThreadedRecordStore();
    if (!qword_1EB5ABC98)
    {
      id v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1AFC6D424();
      }
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t CSDBSharedRecordStore()
{
  if (!IMDSharedThreadedRecordStore())
  {
    uint64_t v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D574();
    }
  }
  uint64_t v1 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
  if (!v1)
  {
    id v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D4CC();
    }
  }
  return v1;
}

uint64_t _IMDSetSharedMessageRecordStore(uint64_t result)
{
  qword_1EB5ABC98 = result;
  return result;
}

uint64_t IMDRecordStoreInitializeCount()
{
  return 1;
}

void IMDRecordStoreIncrementInitializeCount()
{
}

uint64_t IMDCreateThreadedRecordStoreWithPath(uint64_t a1)
{
  uint64_t v2 = CSDBCreateThreadedRecordStore();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFBF5B3C;
  v4[3] = &unk_1E5F97890;
  void v4[4] = a1;
  _IMDInitializeMessagesRecordStoreWithVersion(v2, (uint64_t)v4, 0);
  return v2;
}

BOOL _IMDInitializeMessagesRecordStore(uint64_t a1, uint64_t a2, int a3)
{
  return _IMDInitializeMessagesRecordStoreWithVersion(a1, a2, a3);
}

id sub_1AFBF5B3C(uint64_t a1)
{
  uint64_t v1 = (void *)[*(id *)(a1 + 32) stringByResolvingAndStandardizingPath];
  return v1;
}

void IMDSMSRecordStoreClose()
{
  uint64_t v0 = IMLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Saving database.", buf, 2u);
  }
  _IMDSMSRecordStoreSaveAndInvalidateCaches();
  if (IMDSharedThreadedRecordStore())
  {
    uint64_t v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Destroying database.", v5, 2u);
    }
    uint64_t v2 = IMDSharedThreadedRecordStore();
    MEMORY[0x1B3E89350](v2);
    uint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Closed database.", v4, 2u);
    }
  }
}

BOOL sub_1AFBF5C6C(uint64_t a1, uint64_t a2)
{
  if (!a1 && (uint64_t v3 = IMLogHandleForCategory(), os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6D76C();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  uint64_t v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6D6C4();
  }
LABEL_6:
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Create tables...", (uint8_t *)v8, 2u);
  }
  CSDBSqliteConnectionCommit();
  long long v9 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t Database = CSDBRecordStoreGetDatabase();
  IMDSqlOperationInitWithCSDBConnection(a2, Database, (uint64_t)v8);
  IMDSqlOperationBeginTransaction(v8);
  if (*((void *)&v9 + 1)) {
    goto LABEL_13;
  }
  IMDCreateTablesWithOperation((uint64_t)v8, 1);
  if (*((void *)&v9 + 1)
    || (IMDCreateIndexesWithOperation((uint64_t)v8, 1), *((void *)&v9 + 1))
    || (IMDCreateTriggersWithOperation((uint64_t)v8, 1), *((void *)&v9 + 1))
    || (CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        *((void *)&v9 + 1)))
  {
LABEL_13:
    IMDSqlOperationRevertTransaction(v8);
  }
  else
  {
    IMDSqlOperationCommitTransaction(v8);
  }
  return IMDSqlOperationRelease((uint64_t)v8, 0);
}

void sub_1AFBF5E5C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Setting page size.", buf, 2u);
      }
      CSDBSqliteConnectionPerformSQL();
      uint64_t v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Enabling WAL journal mode.", v11, 2u);
      }
      CSDBSqliteConnectionPerformSQL();
      uint64_t v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)double v10 = 0;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Enabling Foreign Key support.", v10, 2u);
      }
      CSDBSqliteConnectionPerformSQL();
      if (*(void *)(a2 + 8))
      {
        uint64_t v6 = IMLogHandleForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long v9 = 0;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Registering external functions.", v9, 2u);
        }
        CSDBSqliteDatabaseRegisterFunctionForDB();
        CSDBSqliteDatabaseRegisterFunctionForDB();
        CSDBSqliteDatabaseRegisterFunctionForDB();
        CSDBSqliteDatabaseRegisterFunctionForDB();
      }
      return;
    }
    goto LABEL_16;
  }
  uint64_t v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6D8BC();
  }
  if (!a2)
  {
LABEL_16:
    uint64_t v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D814();
    }
  }
}

void IMDSqliteDatabaseClean(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 && *(void *)(a1 + 8))
  {
    uint64_t v2 = (void *)[MEMORY[0x1E4F1C9C8] date];
    uint64_t v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Performing a pre-checkpoint vacuum.", (uint8_t *)&v9, 2u);
    }
    sqlite3_exec(*(sqlite3 **)(a1 + 8), "vacuum;", 0, 0, 0);
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Performing Analyze to optimize the database", (uint8_t *)&v9, 2u);
    }
    sqlite3_exec(*(sqlite3 **)(a1 + 8), "ANALYZE;", 0, 0, 0);
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Performing a WAL checkpoint.", (uint8_t *)&v9, 2u);
    }
    sqlite3_exec(*(sqlite3 **)(a1 + 8), "PRAGMA wal_checkpoint(RESTART);", 0, 0, 0);
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      [v2 timeIntervalSinceNow];
      int v9 = 134217984;
      double v10 = -v7;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Database Clean up took: %f seconds", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    uint64_t v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6D964();
    }
  }
}

uint64_t sub_1AFBF62EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1 && (uint64_t v5 = IMLogHandleForCategory(), os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6DA98();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  uint64_t v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6D9F0();
  }
LABEL_6:
  uint64_t v8 = a3 > 1 && a3 < 18017;
  int v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = @"NO";
    int v14 = 67109634;
    int v15 = a3;
    if (v8) {
      uint64_t v12 = @"YES";
    }
    __int16 v16 = 1024;
    int v17 = 18017;
    __int16 v18 = 2112;
    uint64_t v19 = v12;
    _os_log_error_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_ERROR, "The current SMS database is v%d.  The current schema version is v%d. Can be migrated: %@", (uint8_t *)&v14, 0x18u);
  }
  if (a3 > 18017)
  {
    uint64_t v8 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall");
    double v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = @"NO";
      int v14 = 67109634;
      int v15 = a3;
      if (v8) {
        uint64_t v13 = @"YES";
      }
      __int16 v16 = 1024;
      int v17 = 18017;
      __int16 v18 = 2112;
      uint64_t v19 = v13;
      _os_log_error_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_ERROR, "The current SMS database has a NEWER version (%d) than expected (%d), internal build allows newer DB? %@", (uint8_t *)&v14, 0x18u);
    }
  }
  return v8;
}

uint64_t sub_1AFBF64E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 && (uint64_t v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6DE68();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  double v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6DDC0();
  }
LABEL_6:
  uint64_t v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6DD30(a3, v8);
  }
  CSDBSqliteConnectionCommit();
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v10 = v9;
  int v11 = sub_1AFBF6948(a1, a2);
  uint64_t v12 = IMLogHandleForCategory();
  uint64_t v13 = v12;
  if (!v11)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6DCFC();
    }
    return 2;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Initial Integrity checked success", buf, 2u);
  }
  id v22 = 0;
  int v21 = a3;
  if (!_IMDDatabasePerformMigrations(a1, a2, a3, &v21, &v22)) {
    goto LABEL_21;
  }
  CSDBSqliteConnectionPerformSQL();
  if (!sub_1AFBF6948(a1, a2))
  {
    int v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6DCC8();
    }
LABEL_21:
    char v15 = 1;
    uint64_t v16 = 3;
    goto LABEL_22;
  }
  IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.Migration.Migration_Successful");
  int v14 = IMLogHandleForCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6DC94();
  }
  if (!v22)
  {
    uint64_t v16 = 0;
    goto LABEL_27;
  }
  char v15 = 0;
  uint64_t v16 = 0;
LABEL_22:
  IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.Migration.Migration_Failure");
  __int16 v18 = IMLogHandleForCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6DBE4(&v21, &v22, v18);
  }
  if (v15) {
    return 2;
  }
LABEL_27:
  uint64_t v19 = IMLogHandleForCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6DB40(v19, v10);
  }
  return v16;
}

uint64_t sub_1AFBF6778(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  CSDBThreadedRecordStoreRegisterClass();
  CSDBThreadedRecordStoreRegisterClass();
  CSDBThreadedRecordStoreRegisterClass();
  return CSDBThreadedRecordStoreRegisterClass();
}

uint64_t sub_1AFBF67F4()
{
  return _IMDCreateDatabasePathIfNecessary();
}

uint64_t _IMDSMSRecordStoreUpdateLastDeleteSequenceNumberUnlocked()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = -1;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_1AFBF68C0;
  v2[3] = &unk_1E5F97900;
  void v2[4] = &v3;
  _IMDPerformLockedConnectionBlock((uint64_t)v2);
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1AFBF68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBF68C0(uint64_t a1)
{
  CSDBSqliteConnectionBeginTransactionType();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CSDBRecordStoreGetSequenceNumber();
  IMSetDomainIntForKey();
  return CSDBSqliteConnectionCommit();
}

uint64_t sub_1AFBF6948(uint64_t a1, uint64_t a2)
{
  if (!a1 && (uint64_t v3 = IMLogHandleForCategory(), os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6E0DC();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  uint64_t v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6E034();
  }
LABEL_6:
  if (sub_1AFBF6C80(a2))
  {
    uint64_t v5 = IMLogHandleForCategory();
    uint64_t v6 = 1;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Integrity checked success", v23, 2u);
    }
    double v7 = @"com.apple.MobileSMS.InitialIntegrityCheck_Success";
    goto LABEL_37;
  }
  IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.InitialIntegrityCheck_Failure");
  int v8 = CSDBSqliteConnectionPerformSQL();
  if (v8 != 101 && (int v9 = v8) != 0)
  {
    uint64_t v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6DFBC(v9, v12);
    }
    int v11 = @"com.apple.MobileSMS.Migration.Reindex_Failure";
  }
  else
  {
    double v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Reindexing the DB worked.", buf, 2u);
    }
    int v11 = @"com.apple.MobileSMS.Migration.Reindex_Success";
  }
  IMDPersistenceSubmitEvent(v11);
  if (sub_1AFBF6C80(a2)) {
    goto LABEL_31;
  }
  IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.PostReindex.IntegrityCheck_Failure");
  int v13 = CSDBSqliteDatabaseVacuum();
  if (v13 != 101 && (int v14 = v13) != 0)
  {
    int v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6DF44(v14, v17);
    }
    uint64_t v16 = @"com.apple.MobileSMS.Migration.Vacuum_Failure";
  }
  else
  {
    char v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1AFB53000, v15, OS_LOG_TYPE_INFO, "Vacuuming DB success", v26, 2u);
    }
    uint64_t v16 = @"com.apple.MobileSMS.Migration.Vacuum_Success";
  }
  IMDPersistenceSubmitEvent(v16);
  int v18 = sub_1AFBF6C80(a2);
  uint64_t v19 = IMLogHandleForCategory();
  uint64_t v20 = v19;
  if (v18)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Post Vacuuming integrity check success", v25, 2u);
    }
    IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.Migration.PostVacuum.IntegrityCheck_Success");
LABEL_31:
    int v21 = IMLogHandleForCategory();
    uint64_t v6 = 1;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1AFB53000, v21, OS_LOG_TYPE_INFO, "Integrity checked success", v24, 2u);
    }
    double v7 = @"com.apple.MobileSMS.PostReindex.IntegrityCheck_Success";
    goto LABEL_37;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6DF10();
  }
  uint64_t v6 = 0;
  double v7 = @"com.apple.MobileSMS.Migration.PostVacuum.IntegrityCheck_Failure";
LABEL_37:
  IMDPersistenceSubmitEvent(v7);
  return v6;
}

uint64_t sub_1AFBF6C80(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6E184();
    }
  }
  uint64_t v2 = CSDBSqliteDatabaseCheckIntegrity();
  if ((v2 & 1) == 0) {
    IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.Migration.IntegrityCheck_Failure");
  }
  return v2;
}

BOOL IMDSqlOperationIsQueryIndexed(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2) {
    *a2 = 0;
  }
  if (a1)
  {
    uint64_t v17 = 0;
    int v18 = &v17;
    uint64_t v19 = 0x2020000000;
    char v20 = 0;
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    while (IMDSqlOperationHasRows(a1))
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = sub_1AFBF6F5C;
      v16[3] = &unk_1E5F99250;
      void v16[4] = v4;
      v16[5] = &v17;
      IMDSqlOperationIterateRow(a1, (uint64_t)v16);
    }
    if (*((unsigned char *)v18 + 24)) {
      uint64_t v5 = @"YES";
    }
    else {
      uint64_t v5 = @"NO";
    }
    NSLog(&cfstr_QueryIsIndexed.isa, v5);
    NSLog(&cfstr_Query_0.isa, *(void *)(a1 + 48));
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v21 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          NSLog(&stru_1F08556D0.isa, *(void *)(*((void *)&v12 + 1) + 8 * i));
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v21 count:16];
      }
      while (v6);
    }
    if (a2) {
      *a2 = v4;
    }

    BOOL v9 = *((unsigned char *)v18 + 24) != 0;
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    double v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6E22C();
    }
    return 0;
  }
  return v9;
}

void sub_1AFBF6F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1AFBF6F5C(uint64_t a1, long long *a2, unsigned char *a3)
{
  uint64_t v6 = (const char *)*((void *)a2 + 1);
  if (!v6)
  {
    uint64_t v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((void *)a2 + 1) = v6;
  }
  if (!strncmp(v6, "detail", 0x100uLL))
  {
    long long v10 = *a2;
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v7 = IMDStringFromSqlColumn((uint64_t)&v10);
    if (v7)
    {
      int v8 = v7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFStringFind((CFStringRef)v7, @"SCAN TABLE", 1uLL).length == 0;
      BOOL v9 = *(void **)(a1 + 32);
      if (v9) {
        [v9 addObject:v8];
      }
      CFRelease(v8);
    }
    *a3 = 1;
  }
}

uint64_t IMDSqlOperationColumnExistsOnTableWithOperation(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  if (!a1 && (uint64_t v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6E424();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  uint64_t v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6E37C();
  }
LABEL_6:
  if (a3 || (int v8 = IMLogHandleForCategory(), !os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    if (a1) {
      goto LABEL_9;
    }
    return 0;
  }
  sub_1AFC6E2D4();
  if (!a1) {
    return 0;
  }
LABEL_9:
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"PRAGMA table_info(%@);", a2);
  _IMDSqlOperationBeginQuery(a1, v9);
  CFRelease(v9);
  char v10 = 0;
  while (IMDSqlOperationHasRows(a1))
  {
    if (IMDSqlOperationColumnCount(a1))
    {
      int v11 = 0;
      while (1)
      {
        long long v18 = 0uLL;
        *(void *)N = 0;
        IMDSqlOperationColumnByIndex(a1, v11, (uint64_t)&v18);
        long long v12 = (const char *)*((void *)&v18 + 1);
        if (!*((void *)&v18 + 1))
        {
          long long v12 = sqlite3_column_name(*(sqlite3_stmt **)v18, N[0]);
          *((void *)&v18 + 1) = v12;
        }
        if (!strncmp(v12, "name", 0x100uLL)) {
          break;
        }
        if (++v11 >= IMDSqlOperationColumnCount(a1)) {
          goto LABEL_17;
        }
      }
      long long v16 = v18;
      uint64_t v17 = *(void *)N;
      long long v13 = IMDStringFromSqlColumn((uint64_t)&v16);
      if (CFEqual((CFStringRef)v13, a3)) {
        char v10 = 1;
      }
      CFRelease(v13);
      if (v10)
      {
LABEL_22:
        uint64_t v14 = 1;
        goto LABEL_24;
      }
    }
    else
    {
LABEL_17:
      if (v10) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v14 = v10 & 1;
LABEL_24:
  IMDSqlOperationFinishQuery(a1);
  return v14;
}

BOOL IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(uint64_t a1, uint64_t a2, const __CFString *a3, __CFString *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2 && (int v8 = IMLogHandleForCategory(), os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6E61C();
    if (a3) {
      goto LABEL_6;
    }
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  CFStringRef v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6E574();
  }
LABEL_6:
  if (!a4)
  {
    char v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6E4CC();
    }
  }
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, a2, a3))
  {
    int v11 = IMLogHandleForCategory();
    BOOL v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v23 = a3;
      __int16 v24 = 2112;
      uint64_t v25 = a2;
      long long v13 = "Found column %@ on %@, no need to add it";
      uint64_t v14 = v11;
      uint32_t v15 = 22;
LABEL_18:
      _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, v13, buf, v15);
    }
  }
  else
  {
    long long v16 = &stru_1F084E970;
    if (a4) {
      long long v16 = a4;
    }
    CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"ALTER TABLE %@ ADD COLUMN %@ %@;", a2, a3, v16);
    _IMDSqlOperationBeginQuery(a1, v17);
    IMDSqlOperationFinishQuery(a1);
    CFRelease(v17);
    uint64_t v18 = *(void *)(a1 + 168);
    BOOL v12 = v18 == 0;
    uint64_t v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      char v20 = @"NO";
      *(_DWORD *)long long buf = 138412802;
      CFStringRef v23 = a3;
      __int16 v24 = 2112;
      if (!v18) {
        char v20 = @"YES";
      }
      uint64_t v25 = a2;
      __int16 v26 = 2112;
      uint64_t v27 = v20;
      long long v13 = "Adding column %@ to %@ succeeded: %@";
      uint64_t v14 = v19;
      uint32_t v15 = 32;
      goto LABEL_18;
    }
  }
  return v12;
}

BOOL IMDSqlOperationDropColumnIfExistsToTableWithOperation(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a2 && (uint64_t v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6E76C();
    if (a3) {
      goto LABEL_6;
    }
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  uint64_t v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6E6C4();
  }
LABEL_6:
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, a2, a3))
  {
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"ALTER TABLE %@ DROP COLUMN %@;", a2, a3);
    _IMDSqlOperationBeginQuery(a1, v8);
    IMDSqlOperationFinishQuery(a1);
    CFRelease(v8);
    uint64_t v9 = *(void *)(a1 + 168);
    BOOL v10 = v9 == 0;
    int v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      BOOL v12 = @"NO";
      *(_DWORD *)long long buf = 138412802;
      CFStringRef v16 = a3;
      __int16 v17 = 2112;
      if (!v9) {
        BOOL v12 = @"YES";
      }
      uint64_t v18 = a2;
      __int16 v19 = 2112;
      char v20 = v12;
      _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Dropping column %@ to %@ succeeded: %@", buf, 0x20u);
    }
  }
  else
  {
    long long v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v16 = a3;
      __int16 v17 = 2112;
      uint64_t v18 = a2;
      _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "No column %@ on %@, no need to drop it", buf, 0x16u);
    }
    return 0;
  }
  return v10;
}

BOOL IMDSqlOperationAddColumnIfNotExistsToTable(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  if (!a1 && (uint64_t v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6E964();
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  uint64_t v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6E8BC();
  }
LABEL_6:
  if (!a3)
  {
    CFStringRef v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6E814();
    }
  }
  memset(v11, 0, sizeof(v11));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v11);
  BOOL v9 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation((uint64_t)v11, a1, a2, a3);
  IMDSqlOperationRelease((uint64_t)v11, 0);
  return v9;
}

uint64_t IMDSqlOperationColumnExistsOnTable(uint64_t a1, const __CFString *a2)
{
  memset(v6, 0, sizeof(v6));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
  uint64_t v4 = IMDSqlOperationColumnExistsOnTableWithOperation((uint64_t)v6, a1, a2);
  IMDSqlOperationRelease((uint64_t)v6, 0);
  return v4;
}

id IMDSqlOperationReadTableInfo(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v4);
  id Rows = _IMDSqlOperationGetRows((uint64_t)v4, (const __CFString *)objc_msgSend(NSString, "stringWithFormat:", @"PRAGMA table_info(%@);",
                                 a1));
  IMDSqlOperationRelease((uint64_t)v4, 0);
  return Rows;
}

id IMDDatabaseReadTableInfo(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (const __CFString *)[NSString stringWithFormat:@"PRAGMA table_info(%@);", a2];
  return _IMDSqlOperationGetRows(a1, v3);
}

uint64_t IMDSqlOperationErrorDescription(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void **)(a1 + 168)) != 0) {
    return [v1 localizedDescription];
  }
  else {
    return 0;
  }
}

sqlite3_int64 IMDSqlOperationGetRowCountForTable(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6EA0C();
    }
  }
  memset(v6, 0, sizeof(v6));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
  _IMDSqlOperationBeginQuery((uint64_t)v6, (CFStringRef)[NSString stringWithFormat:@"SELECT count(*) from %@;", a1]);
  sqlite3_int64 v3 = 0;
  if (IMDSqlOperationHasRows((uint64_t)v6))
  {
    IMDSqlOperationColumnByIndex((uint64_t)v6, 0, (uint64_t)v5);
    sqlite3_int64 v3 = IMDInt64FromSqlColumn((uint64_t)v5);
  }
  IMDSqlOperationFinishQuery((uint64_t)v6);
  IMDSqlOperationRelease((uint64_t)v6, 0);
  return v3;
}

CFStringRef IMDSqlOperationGetDatabasePath(uint64_t a1)
{
  if (!a1 || (uint64_t v2 = *(void *)(a1 + 8)) == 0)
  {
    sqlite3_int64 v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_1AFC6EB5C();
      if (!a1) {
        return 0;
      }
    }
    else if (!a1)
    {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
    if (!v2) {
      return 0;
    }
  }
  uint64_t v4 = sqlite3_db_filename(*(sqlite3 **)(v2 + 8), "main");
  if (v4) {
    return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 0x8000100u);
  }
  uint64_t v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6EAB4();
  }
  return 0;
}

BOOL IMDDatabaseCopy(void *a1, void *a2, void *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v38 = xmmword_1E5F99270;
    long long v39 = *(_OWORD *)off_1E5F99280;
    uint64_t v8 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"fromPath", "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 259, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    BOOL v9 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v9)
    {
      v9(v8);
    }
    else if (IMOSLoggingEnabled())
    {
      BOOL v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    if (a2) {
      return 0;
    }
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    long long v38 = xmmword_1E5F99298;
    long long v39 = *(_OWORD *)off_1E5F992A8;
    uint64_t v11 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"toPath", "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 260, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    BOOL v12 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v12)
    {
      v12(v11);
    }
    else if (IMOSLoggingEnabled())
    {
      long long v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    return 0;
  }
  if ((objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", @"db") & 1) == 0)
  {
    long long v38 = xmmword_1E5F992C0;
    long long v39 = *(_OWORD *)off_1E5F992D0;
    uint64_t v40 = 266;
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"[[fromPath pathExtension] isEqualToString:@\"db\"]", "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 266, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    uint64_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if ((objc_msgSend((id)objc_msgSend(a2, "pathExtension"), "isEqualToString:", @"db") & 1) == 0)
  {
    long long v38 = xmmword_1E5F992E8;
    long long v39 = *(_OWORD *)off_1E5F992F8;
    uint64_t v40 = 267;
    uint64_t v15 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"[[toPath pathExtension] isEqualToString:@\"db\"]", "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 267, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    CFStringRef v16 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v16)
    {
      v16(v15);
    }
    else if (IMOSLoggingEnabled())
    {
      __int16 v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v18 = (void *)[a1 stringByExpandingTildeInPath];
  __int16 v19 = (void *)[a2 stringByExpandingTildeInPath];
  char v37 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", v18, &v37) & 1) == 0)
  {
    if (a3)
    {
      uint64_t v25 = (void *)MEMORY[0x1E4F28C58];
      __int16 v26 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v27 = [NSString stringWithFormat:@"Database not found at %@", v18];
      uint64_t v28 = [v26 dictionaryWithObject:v27 forKey:*MEMORY[0x1E4F28568]];
      id v29 = (id)[v25 errorWithDomain:*MEMORY[0x1E4F281F8] code:4 userInfo:v28];
      BOOL v30 = 0;
LABEL_57:
      *a3 = v29;
      return v30;
    }
    return 0;
  }
  *(void *)long long buf = 0;
  ppDb = 0;
  uint64_t v20 = sqlite3_open_v2((const char *)[v18 UTF8String], (sqlite3 **)buf, 1, 0);
  if ((v20 - 100) >= 2 && v20)
  {
    uint64_t v35 = IMDCreateCFErrorWithQueryErrorCode(v20, *(sqlite3 **)buf, [NSString stringWithFormat:@"Unable to open source database at %@ (%d)", v18, v20]);
    if (v35) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v21 = [v19 stringByDeletingLastPathComponent];
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", v21, &v37) & 1) != 0|| (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v21, 1, 0, &v35), !v35))
  {
    uint64_t v22 = sqlite3_open_v2((const char *)[v19 UTF8String], &ppDb, 6, 0);
    if ((v22 - 100) >= 2 && v22)
    {
      uint64_t v35 = IMDCreateCFErrorWithQueryErrorCode(v22, ppDb, [NSString stringWithFormat:@"Unable to open destination database at %@ (%d)", v19, v22]);
      if (v35) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    uint64_t v23 = sqlite3_file_control(ppDb, 0, 102, *(void **)buf);
    __int16 v24 = 0;
    if ((v23 - 100) >= 2 && v23) {
      __int16 v24 = IMDCreateCFErrorWithQueryErrorCode(v23, ppDb, [NSString stringWithFormat:@"Unable to replace database at %@ (%d)", v19, v23]);
    }
    uint64_t v35 = v24;
  }
LABEL_46:
  if (*(void *)buf)
  {
    sqlite3_close(*(sqlite3 **)buf);
    *(void *)long long buf = 0;
  }
  if (ppDb)
  {
    sqlite3_close(ppDb);
    ppDb = 0;
  }
  uint64_t v31 = v35;
  BOOL v30 = v35 == 0;
  if (a3 && v35)
  {
    if (*a3)
    {
      long long v38 = xmmword_1E5F99310;
      long long v39 = *(_OWORD *)off_1E5F99320;
      uint64_t v40 = 59;
      uint64_t v32 = [NSString stringWithFormat:@"Unexpected not nil '%@' in %s at %s:%d. %@", @"*outError", "BOOL IMDSetOutError(NSError **, NSError *)", IMFileLocationTrimFileName(), 59, objc_msgSend(NSString, "stringWithFormat:", @"outError is already pointing at an error, this could be a leak")];
      CFStringRef v33 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
      if (v33) {
        v33(v32);
      }
      else {
        _IMWarn();
      }
    }
    id v29 = v31;
    goto LABEL_57;
  }
  return v30;
}

BOOL IMDDatabaseDelete(uint64_t a1, uint64_t *a2)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  v24[0] = a1;
  v24[1] = [NSString stringWithFormat:@"%@-shm", a1];
  void v24[2] = [NSString stringWithFormat:@"%@-wal", a1];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:3];
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v6 = [v4 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v18;
    uint64_t v9 = *MEMORY[0x1E4F281F8];
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8 * v10);
        id v16 = 0;
        if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v11, &v16) & 1) == 0&& (!objc_msgSend((id)objc_msgSend(v16, "domain"), "isEqualToString:", v9)|| objc_msgSend(v16, "code") != 4))
        {
          [v5 addObject:v16];
        }
        ++v10;
      }
      while (v7 != v10);
      uint64_t v7 = [v4 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }
    while (v7);
  }
  uint64_t v12 = [v5 count];
  if (v12)
  {
    long long v13 = (void *)[v5 copy];
    uint64_t v21 = *MEMORY[0x1E4F28750];
    uint64_t v22 = v13;
    uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"domain", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
    if (a2) {
      *a2 = v14;
    }
  }
  return v12 == 0;
}

uint64_t IMDSqlOperationGetError(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = *(void **)(result + 168);
    if (v2)
    {
      if (a2) {
        *a2 = v2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationRunCountQuery(uint64_t a1, const __CFString *a2, sqlite3_int64 *a3)
{
  *a3 = 0;
  _IMDSqlOperationBeginQuery(a1, a2);
  if (IMDSqlOperationHasRows(a1))
  {
    IMDSqlOperationColumnByIndex(a1, 0, (uint64_t)v6);
    *a3 = IMDInt64FromSqlColumn((uint64_t)v6);
  }
  return IMDSqlOperationFinishQuery(a1);
}

uint64_t IMDDatabaseIndexes()
{
  if (qword_1E9AF82F0 != -1) {
    dispatch_once(&qword_1E9AF82F0, &unk_1F084CF20);
  }
  return qword_1E9AF82E8;
}

uint64_t sub_1AFBF8554()
{
  uint64_t v0 = 0;
  uint64_t v1 = @"chat_message_join_idx_message_id_only";
  qword_1E9AF82E8 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  do
  {
    uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"CREATE INDEX IF NOT EXISTS %@ ON %@;",
           v1,
           off_1E5F99338[v0 + 1]);
    uint64_t result = [(id)qword_1E9AF82E8 setObject:v2 forKey:v1];
    uint64_t v1 = off_1E5F99338[v0 + 2];
    v0 += 2;
  }
  while (v0 != 64);
  return result;
}

BOOL IMDCreateIndexesWithOperation(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *(_OWORD *)uint64_t v23 = xmmword_1E5F99548;
    *(_OWORD *)&uint8_t v23[16] = *(_OWORD *)off_1E5F99558;
    uint64_t v24 = 97;
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "BOOL IMDCreateIndexesWithOperation(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 97, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    id v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v22 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (qword_1E9AF82F0 != -1) {
    dispatch_once(&qword_1E9AF82F0, &unk_1F084CF20);
  }
  uint64_t v7 = (void *)qword_1E9AF82E8;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [(id)qword_1E9AF82E8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)[v7 objectForKey:v11], 0, 0))
        {
          uint64_t v14 = IMLogHandleForCategory();
          BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
          if (result)
          {
            uint64_t v15 = IMDSqlOperationErrorDescription(a1);
            *(_DWORD *)uint64_t v23 = 138412546;
            *(void *)&v23[4] = v11;
            *(_WORD *)&v23[12] = 2112;
            *(void *)&v23[14] = v15;
            _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Create index failed: %@: %@", v23, 0x16u);
            return 0;
          }
          return result;
        }
        if (a2)
        {
          uint64_t v12 = IMLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v23 = 138412290;
            *(void *)&v23[4] = v11;
            _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Created index ok: %@", v23, 0xCu);
          }
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
  return 1;
}

BOOL IMDCreateIndexes(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBF8994;
  v3[3] = &unk_1E5F95200;
  char v4 = a2;
  void v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1AFBF8994(uint64_t a1, uint64_t a2)
{
  IMDCreateIndexesWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  char v4 = *(void **)(a1 + 32);
  return IMDSqlOperationGetError(a2, v4);
}

BOOL IMDDropAllIndexesWithOperation(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = sub_1AFBF8C5C;
  v17[3] = &unk_1E5F8FF78;
  v17[4] = v4;
  v17[5] = a1;
  _IMDSqlOperationRunQuery(a1, @"SELECT name, sql FROM sqlite_master WHERE type = 'index'", 0, (uint64_t)v17);
  if (!*(void *)(a1 + 168))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v22 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)[NSString stringWithFormat:@"DROP INDEX %@", v9], 0, 0))
          {
            uint64_t v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              uint64_t v12 = IMDSqlOperationErrorDescription(a1);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v19 = v9;
              __int16 v20 = 2112;
              uint64_t v21 = v12;
              _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Dropped index failed: %@: %@", buf, 0x16u);
            }
            return *(void *)(a1 + 168) == 0;
          }
          if (a2)
          {
            uint64_t v10 = IMLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v19 = v9;
              _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Dropped index: %@", buf, 0xCu);
            }
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v22 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
  }
  return *(void *)(a1 + 168) == 0;
}

BOOL sub_1AFBF8C5C(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v16 = 0;
      long long v17 = &v16;
      uint64_t v18 = 0x3052000000;
      uint64_t v19 = sub_1AFBF8E48;
      __int16 v20 = sub_1AFBF8E58;
      uint64_t v21 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = &v10;
      uint64_t v12 = 0x3052000000;
      long long v13 = sub_1AFBF8E48;
      long long v14 = sub_1AFBF8E58;
      uint64_t v15 = 0;
      uint64_t v4 = *(void *)(a1 + 40);
      v9[0] = v3;
      v9[1] = 3221225472;
      v9[2] = sub_1AFBF8E64;
      v9[3] = &unk_1E5F90CA0;
      void v9[4] = &v16;
      void v9[5] = &v10;
      IMDSqlOperationIterateRow(v4, (uint64_t)v9);
      id v5 = (void *)v11[5];
      if (v5)
      {
        if ([v5 length])
        {
          [(id)v17[5] rangeOfString:@"sqlite_autoindex"];
          if (!v6) {
            [*(id *)(a1 + 32) addObject:v17[5]];
          }
        }
      }
      uint64_t v7 = (const void *)v17[5];
      if (v7)
      {
        CFRelease(v7);
        v17[5] = 0;
      }
      uint64_t v8 = (const void *)v11[5];
      if (v8)
      {
        CFRelease(v8);
        void v11[5] = 0;
      }
      _Block_object_dispose(&v10, 8);
      _Block_object_dispose(&v16, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBF8E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBF8E48(uint64_t a1, uint64_t a2)
{
}

void sub_1AFBF8E58(uint64_t a1)
{
}

void sub_1AFBF8E64(uint64_t a1, long long *a2)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v9);
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = (const char *)*((void *)a2 + 1);
    if (!v6)
    {
      uint64_t v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
      *((void *)a2 + 1) = v6;
    }
    if (!strncmp(v6, "name", 0x100uLL))
    {
      CFTypeRef v7 = CFRetain(v5);
      uint64_t v8 = *(void *)(a1 + 32);
    }
    else
    {
      if (!v6)
      {
        uint64_t v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
        *((void *)a2 + 1) = v6;
      }
      if (strncmp(v6, "sql", 0x100uLL)) {
        goto LABEL_11;
      }
      CFTypeRef v7 = CFRetain(v5);
      uint64_t v8 = *(void *)(a1 + 40);
    }
    *(void *)(*(void *)(v8 + 8) + 40) = v7;
LABEL_11:
    CFRelease(v5);
  }
}

BOOL IMDDropAllIndexes(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBF8FC0;
  v3[3] = &unk_1E5F95200;
  char v4 = a2;
  void v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1AFBF8FC0(uint64_t a1, uint64_t a2)
{
  IMDDropAllIndexesWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  char v4 = *(void **)(a1 + 32);
  return IMDSqlOperationGetError(a2, v4);
}

BOOL IMDDropUnknownIndexesWithOperation(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  char v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1AFBF92B8;
  v19[3] = &unk_1E5F8FF78;
  void v19[4] = v4;
  v19[5] = a1;
  _IMDSqlOperationRunQuery(a1, @"SELECT name FROM sqlite_master WHERE type = 'index';", 0, (uint64_t)v19);
  if (qword_1E9AF82F0 != -1) {
    dispatch_once(&qword_1E9AF82F0, &unk_1F084CF20);
  }
  id v5 = (void *)qword_1E9AF82E8;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        if (![v5 objectForKey:v10])
        {
          if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)[NSString stringWithFormat:@"DROP INDEX %@", v10], 0, 0))
          {
            uint64_t v12 = IMLogHandleForCategory();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              uint64_t v13 = IMDSqlOperationErrorDescription(a1);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v21 = v10;
              __int16 v22 = 2112;
              uint64_t v23 = v13;
              _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Dropping unknown index failed: %@: %@", buf, 0x16u);
            }
            return *(void *)(a1 + 168) == 0;
          }
          if (a2)
          {
            uint64_t v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v21 = v10;
              _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Dropped unknown index: %@", buf, 0xCu);
            }
          }
        }
      }
      uint64_t v7 = [v4 countByEnumeratingWithState:&v15 objects:v24 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  return *(void *)(a1 + 168) == 0;
}

BOOL sub_1AFBF92B8(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFBF9364;
      v5[3] = &unk_1E5F95228;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFBF9364(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v3 = (unsigned __int8 *)IMDStringFromSqlColumn((uint64_t)&v6);
  if (v3)
  {
    uint64_t v4 = v3;
    if ([v3 length])
    {
      [v4 rangeOfString:@"sqlite_autoindex"];
      if (!v5) {
        [*(id *)(a1 + 32) addObject:v4];
      }
    }
    CFRelease(v4);
  }
}

BOOL IMDDropUnknownIndexes(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFBF944C;
  v3[3] = &unk_1E5F95200;
  char v4 = a2;
  void v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1AFBF944C(uint64_t a1, uint64_t a2)
{
  IMDDropUnknownIndexesWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  char v4 = *(void **)(a1 + 32);
  return IMDSqlOperationGetError(a2, v4);
}

void *sub_1AFBF9494(void *a1)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", @"IF NOT EXISTS", &stru_1F084E970), "stringByReplacingOccurrencesOfString:withString:", @";",
                 &stru_1F084E970);
  [v1 rangeOfString:@"  "];
  if (v2)
  {
    do
    {
      uint64_t v1 = (void *)[v1 stringByReplacingOccurrencesOfString:@"  " withString:@" "];
      [v1 rangeOfString:@"  "];
    }
    while (v3);
  }
  return v1;
}

BOOL IMDConfirmIndexesCreatedAsExpected(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = sub_1AFBF9838;
  v32[3] = &unk_1E5F90CC8;
  v32[4] = v2;
  v32[5] = a1;
  IMDRunSqlOperation((uint64_t)v32);
  if (qword_1E9AF82F0 != -1) {
    dispatch_once(&qword_1E9AF82F0, &unk_1F084CF20);
  }
  uint64_t v3 = (void *)qword_1E9AF82E8;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v4 = [(id)qword_1E9AF82E8 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = 0;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v28 + 1) + 8 * i);
        uint64_t v10 = (void *)[v3 objectForKey:v9];
        if (v10) {
          uint64_t v11 = (__CFString *)sub_1AFBF9494(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (__CFString *)[v2 objectForKey:v9];
        if (v12) {
          uint64_t v12 = (__CFString *)sub_1AFBF9494(v12);
        }
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = @"NIL";
        }
        if (!v11) {
          uint64_t v11 = @"NIL";
        }
        if (([(__CFString *)v11 isEqualToString:v13] & 1) == 0)
        {
          NSLog(&cfstr_Expected_0.isa, v9, v11);
          NSLog(&cfstr_Actual_0.isa, v9, v13);
          char v6 = 1;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v5);
  }
  else
  {
    char v6 = 0;
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v14 = [v2 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v25 != v16) {
          objc_enumerationMutation(v2);
        }
        uint64_t v18 = *(void *)(*((void *)&v24 + 1) + 8 * j);
        uint64_t v19 = (void *)[v2 objectForKey:v18];
        if (v19) {
          __int16 v20 = (__CFString *)sub_1AFBF9494(v19);
        }
        else {
          __int16 v20 = 0;
        }
        uint64_t v21 = (__CFString *)[v3 objectForKey:v18];
        if (v21) {
          uint64_t v21 = (__CFString *)sub_1AFBF9494(v21);
        }
        if (!v20) {
          __int16 v20 = &stru_1F084E970;
        }
        if (v21) {
          __int16 v22 = v21;
        }
        else {
          __int16 v22 = &stru_1F084E970;
        }
        if (([(__CFString *)v22 isEqualToString:v20] & 1) == 0)
        {
          NSLog(&cfstr_Expected_0.isa, v18, v22);
          NSLog(&cfstr_Actual_0.isa, v18, v20);
          char v6 = 1;
        }
      }
      uint64_t v15 = [v2 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }
    while (v15);
  }
  return (v6 & 1) == 0;
}

BOOL sub_1AFBF9838(uint64_t a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFBF98C4;
  v4[3] = &unk_1E5F93EE0;
  uint64_t v2 = *(void *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  void v4[6] = v2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT name, sql FROM sqlite_master WHERE type = 'index';",
           0,
           (uint64_t)v4);
}

uint64_t sub_1AFBF98C4(uint64_t a1)
{
  if (IMDSqlOperationHasRows(*(void *)(a1 + 40)))
  {
    uint64_t v2 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x3052000000;
      long long v17 = sub_1AFBF8E48;
      uint64_t v18 = sub_1AFBF8E58;
      uint64_t v19 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = &v8;
      uint64_t v10 = 0x3052000000;
      uint64_t v11 = sub_1AFBF8E48;
      uint64_t v12 = sub_1AFBF8E58;
      uint64_t v13 = 0;
      uint64_t v3 = *(void *)(a1 + 40);
      v7[0] = v2;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_1AFBF9A94;
      void v7[3] = &unk_1E5F90CA0;
      void v7[4] = &v14;
      void v7[5] = &v8;
      IMDSqlOperationIterateRow(v3, (uint64_t)v7);
      [*(id *)(a1 + 32) setObject:v9[5] forKey:v15[5]];
      uint64_t v4 = (const void *)v15[5];
      if (v4)
      {
        CFRelease(v4);
        v15[5] = 0;
      }
      uint64_t v5 = (const void *)v9[5];
      if (v5)
      {
        CFRelease(v5);
        void v9[5] = 0;
      }
      _Block_object_dispose(&v8, 8);
      _Block_object_dispose(&v14, 8);
    }
    while (IMDSqlOperationHasRows(*(void *)(a1 + 40)));
  }
  return IMDSqlOperationGetError(*(void *)(a1 + 40), *(void **)(a1 + 48));
}

void sub_1AFBF9A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1AFBF9A94(uint64_t a1, long long *a2)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v4 = IMDStringFromSqlColumn((uint64_t)&v9);
  if (v4) {
    uint64_t v5 = (__CFString *)v4;
  }
  else {
    uint64_t v5 = &stru_1F084E970;
  }
  char v6 = (const char *)*((void *)a2 + 1);
  if (!v6)
  {
    char v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((void *)a2 + 1) = v6;
  }
  if (!strncmp(v6, "name", 0x100uLL))
  {
    CFTypeRef v7 = CFRetain(v5);
    uint64_t v8 = *(void *)(a1 + 32);
    goto LABEL_12;
  }
  if (!v6)
  {
    char v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((void *)a2 + 1) = v6;
  }
  if (!strncmp(v6, "sql", 0x100uLL))
  {
    CFTypeRef v7 = CFRetain(v5);
    uint64_t v8 = *(void *)(a1 + 40);
LABEL_12:
    *(void *)(*(void *)(v8 + 8) + 40) = v7;
  }
  CFRelease(v5);
}

uint64_t sub_1AFBF9B88()
{
  if (IMGetCachedDomainBoolForKeyWithDefaultValue()) {
    return 4;
  }
  if (IMGetCachedDomainBoolForKeyWithDefaultValue()) {
    return 3;
  }
  if (IMGetCachedDomainBoolForKeyWithDefaultValue()) {
    return 2;
  }
  return IMGetCachedDomainBoolForKeyWithDefaultValue();
}

uint64_t sub_1AFBF9C24()
{
  return IMGetDomainIntForKey();
}

uint64_t sub_1AFBF9C38(void *a1)
{
  uint64_t v2 = IMGetCachedDomainValueForKey();
  uint64_t v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 unsignedLongLongValue];
  }
  else {
    uint64_t v4 = [a1 _readInitialReindexRowID];
  }
  uint64_t v5 = v4;

  return v5;
}

uint64_t sub_1AFBF9C98()
{
  return IMGetDomainIntForKey();
}

uint64_t sub_1AFBF9CAC(void *a1)
{
  uint64_t v2 = IMGetCachedDomainValueForKey();
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 unsignedLongLongValue];
  }
  else
  {
    uint64_t v5 = [a1 _readInitialReindexRowID];
    uint64_t v4 = v5 - [a1 _readLastIndexedRowID];
  }

  return v4;
}

uint64_t sub_1AFBF9D24(void *a1)
{
  uint64_t v2 = IMGetCachedDomainValueForKey();
  uint64_t v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 unsignedLongLongValue];
  }
  else {
    uint64_t v4 = [a1 _readIndexedMessagesWithFallback];
  }
  uint64_t v5 = v4;

  return v5;
}

id sub_1AFBF9D84(void *a1)
{
  v4.receiver = a1;
  v4.super_class = (Class)&off_1F0873A18;
  id v1 = objc_msgSendSuper2(&v4, sel_init);
  if (v1)
  {
    objc_msgSend(v1, "setLastIndexedRowID:", objc_msgSend(MEMORY[0x1E4F6EA40], "_readLastIndexedRowID"));
    objc_msgSend(v1, "setInitialReindexRowID:", objc_msgSend(MEMORY[0x1E4F6EA40], "_readInitialReindexRowID"));
    [v1 setIndexRevision:IMGetDomainIntForKey()];
    objc_msgSend(v1, "setIndexVersion:", objc_msgSend(MEMORY[0x1E4F6EA40], "_readCurrentIndexVersionFromDefaults"));
    objc_msgSend(v1, "setInitialIndexedMessages:", objc_msgSend(MEMORY[0x1E4F6EA40], "_readIndexedMessagesWithFallback"));
    objc_msgSend(v1, "setInitialTotalMessages:", objc_msgSend(MEMORY[0x1E4F6EA40], "_readTotalMessagesWithFallback"));
    objc_msgSend(v1, "setProcessedMessageRecords:", objc_msgSend(MEMORY[0x1E4F6EA40], "_readProcessedMessageRecordsWithFallback"));
    uint64_t v2 = IMGetCachedDomainValueForKey();
    [v1 setIndexBeginDate:v2];
  }
  return v1;
}

void sub_1AFBF9EA0(void *a1)
{
  [a1 lastIndexedRowID];
  IMSetDomainIntForKey();
  [a1 initialReindexRowID];
  IMSetDomainIntForKey();
  [a1 indexRevision];
  IMSetDomainIntForKey();
  if ([a1 indexVersion] < 1) {
    objc_msgSend(NSString, "stringWithFormat:", @"IMCSBypassIndexVersionCheckV%lld", objc_msgSend(MEMORY[0x1E4F6EA40], "_latestIndexVersion"));
  }
  else {
  uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"IMCSBypassIndexVersionCheckV%lld", objc_msgSend(a1, "indexVersion"));
  }
  IMSetDomainBoolForKey();

  [a1 initialIndexedMessages];
  IMSetDomainIntForKey();
  [a1 initialTotalMessages];
  IMSetDomainIntForKey();
  [a1 processedMessageRecords];
  IMSetDomainIntForKey();
  id v3 = [a1 indexBeginDate];
  IMSetDomainValueForKey();
}

uint64_t sub_1AFBFA044()
{
  return MEMORY[0x1F41237A0](@"com.apple.IMCoreSpotlight", @"IMCSClientStateStorageMechanism", 0);
}

uint64_t sub_1AFBFA05C()
{
  uint64_t v0 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  unsigned int v1 = [v0 isSpotlightClientStateEnabled];

  return v1;
}

uint64_t sub_1AFBFA09C(void *a1)
{
  [a1 _currentClientStateStorageMechanism];
  return IMSetDomainIntForKey();
}

BOOL sub_1AFBFA0D8(void *a1)
{
  return [a1 _currentClientStateStorageMechanism] == 1
      && ![a1 _lastClientStateStorageMechanism]
      && [a1 _readCurrentIndexVersionFromDefaults] != 0;
}

BOOL sub_1AFBFA128(void *a1)
{
  return ![a1 _currentClientStateStorageMechanism]
      && [a1 _lastClientStateStorageMechanism] == 1;
}

void sub_1AFBFA410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFBFA438(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFBFA448(uint64_t a1)
{
}

void sub_1AFBFA450(uint64_t a1, void *a2)
{
}

xpc_object_t IMDSqlOperationGetXpcRows(uint64_t a1)
{
  if (!a1)
  {
    char v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6EC04();
    }
    return 0;
  }
  xpc_object_t v2 = xpc_array_create(0, 0);
  if (!v2)
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6ECAC();
    }
  }
  while (IMDSqlOperationHasRows(a1))
  {
    if (v2)
    {
      xpc_object_t XPCRow = IMDSqlStatementGetXPCRow((sqlite3_stmt **)(a1 + 32));
      if (XPCRow)
      {
        uint64_t v5 = XPCRow;
        xpc_array_append_value(v2, XPCRow);
        xpc_release(v5);
      }
    }
  }
  if (v2 && *(void *)(a1 + 168))
  {
    xpc_release(v2);
    return 0;
  }
  return v2;
}

xpc_object_t IMDSqlOperationGetXpcRowsForQuery(const __CFString *a1)
{
  if (a1)
  {
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v5);
    _IMDSqlOperationBeginQuery((uint64_t)v5, a1);
    Xpcid Rows = IMDSqlOperationGetXpcRows((uint64_t)v5);
    IMDSqlOperationFinishQuery((uint64_t)v5);
    if (*((void *)&v6 + 1) && XpcRows)
    {
      xpc_release(XpcRows);
      Xpcid Rows = 0;
    }
    IMDSqlOperationRelease((uint64_t)v5, 0);
  }
  else
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6ED54();
    }
    return 0;
  }
  return XpcRows;
}

void __syncXPCIMDMessageStoreSave_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 0);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageStoreIsFull_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 1);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageStoreSchemaVersion_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 2);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageStoreSchema_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 3);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCreate_IPCAction(void (**a1)(void), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, int64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
  if (v31)
  {
    uint64_t v32 = v31;
    xpc_dictionary_set_int64(v31, "__xpc__event_code__", 4);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      xpc_dictionary_set_int64(v32, "createdDate", a3);
    }
    if (a4) {
      xpc_dictionary_set_int64(v32, "startDate", a4);
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a6) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a7) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a8) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a9) {
      xpc_dictionary_set_int64(v32, "transferState", a9);
    }
    if (a10) {
      xpc_dictionary_set_BOOL(v32, "isOutgoing", 1);
    }
    if (a12) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a14) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a13) {
      xpc_dictionary_set_BOOL(v32, "isSticker", 1);
    }
    if (a15) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a16) {
      xpc_dictionary_set_BOOL(v32, "hideAttachment", 1);
    }
    if (a21) {
      xpc_dictionary_set_int64(v32, "isCommSafetySensitive", a21);
    }
    if (a22) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a23) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a24) {
      xpc_dictionary_set_int64(v32, "previewGenerationState", a9);
    }
    xpc_dictionary_set_int64(v32, "totalBytes", a11);
    xpc_dictionary_set_int64(v32, "cloudKitSyncState", a17);
    if (a18) {
      IMInsertDatasToXPCDictionary();
    }
    if (a19) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a20) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v32, a1, 0);
    xpc_release(v32);
  }
}

void __syncXPCIMDAttachmentRecordRIDForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 5);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 6);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    IMInsertBoolsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyStickerAttachmentForStickerCachePath_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 7);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDoesStickerPathHaveAttachments_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 11);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDeleteAttachmentForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 8);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDeleteAttachmentsOlderThanDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 9);
    xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 182);
    xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordFindLargestConversations_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 183);
    xpc_dictionary_set_int64(v5, "options", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordFindLargestAttachmentGUIDsWithLimitAndOffset_IPCAction(void (**a1)(void), void *a2, int64_t a3, int64_t a4, int64_t a5)
{
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    uint64_t v11 = v10;
    xpc_dictionary_set_int64(v10, "__xpc__event_code__", 184);
    if (a2)
    {
      uint64_t v12 = (const char *)[a2 cStringUsingEncoding:4];
      if (v12) {
        xpc_dictionary_set_string(v11, "attachmentClass", v12);
      }
    }
    xpc_dictionary_set_int64(v11, "options", a3);
    xpc_dictionary_set_int64(v11, "limit", a4);
    xpc_dictionary_set_int64(v11, "offset", a5);
    __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
    xpc_release(v11);
  }
}

void __syncXPCIMDAttachmentRecordSpaceTakenByAttachmentClass_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 185);
    xpc_dictionary_set_int64(v5, "options", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyRecentFilenames_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 12);
    if (a2) {
      xpc_dictionary_set_int64(v5, "numRecents", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordGetPurgeableDiskSpace_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 20);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 21);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 22);
    xpc_dictionary_set_int64(v5, "bytesToFreeUp", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 23);
    xpc_dictionary_set_int64(v7, "chatLimit", a2);
    xpc_dictionary_set_int64(v7, "attachmentLimit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 24);
    xpc_dictionary_set_int64(v5, "watermark", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction(void (**a1)(void), int64_t a2, int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 25);
    xpc_dictionary_set_int64(v7, "bytesToFreeUp", a2);
    xpc_dictionary_set_int64(v7, "startingOffset", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction(void (**a1)(void), int64_t a2, void *a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    long long v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 13);
    if (a2) {
      xpc_dictionary_set_int64(v9, "queryType", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v9, "afterRow", [a3 longLongValue]);
    }
    if (a4) {
      xpc_dictionary_set_int64(v9, "limit", a4);
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 14);
    xpc_dictionary_set_int64(v7, "rowid", a2);
    xpc_dictionary_set_int64(v7, "syncState", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 15);
    xpc_dictionary_set_int64(v5, "rowid", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 16);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 17);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 18);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 19);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordDeleteAttachmentPreviewsOlderThan_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 26);
    if (a2) {
      xpc_dictionary_set_int64(v5, "numRecents", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDDatabaseClean_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 208);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentGUIDsAndPathsForChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 27);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyPurgedAttachmentsForChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 28);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyPurgedAttachmentsCountForChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 29);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyStickers_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 30);
    if (a2) {
      xpc_dictionary_set_int64(v5, "numRecents", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDoesAttachmentWithGUIDExist_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 10);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordBulkUpdate_IPCAction(void (**a1)(void), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, int64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,int a22)
{
  xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
  if (v29)
  {
    long long v30 = v29;
    xpc_dictionary_set_int64(v29, "__xpc__event_code__", 31);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      xpc_dictionary_set_int64(v30, "createdDate", a3);
    }
    if (a4) {
      xpc_dictionary_set_int64(v30, "startDate", a4);
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a6) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a7) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a8) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a9) {
      xpc_dictionary_set_int64(v30, "transferState", a9);
    }
    if (a10) {
      xpc_dictionary_set_BOOL(v30, "isOutgoing", 1);
    }
    if (a12) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a11) {
      xpc_dictionary_set_int64(v30, "totalBytes", a11);
    }
    if (a13) {
      xpc_dictionary_set_BOOL(v30, "isSticker", 1);
    }
    if (a14) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a15) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a16) {
      xpc_dictionary_set_BOOL(v30, "hideAttachment", 1);
    }
    if (a21) {
      xpc_dictionary_set_int64(v30, "isCommSafetySensitive", a21);
    }
    if (a22) {
      xpc_dictionary_set_int64(v30, "previewGenerationState", a22);
    }
    xpc_dictionary_set_int64(v30, "cloudKitSyncState", a17);
    if (a18) {
      IMInsertDatasToXPCDictionary();
    }
    if (a19) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a20) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v30, a1, 0);
    xpc_release(v30);
  }
}

void __asyncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 36);
    if (a2) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a3) {
      IMInsertDatasToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 1);
    xpc_release(v7);
  }
}

void __syncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 35);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDCNRecordIDForAliases_IPAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 37);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDIsFavoritedContact_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 38);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDCNGivenNameAndBirthdayForHandleID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 243);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDCNFullNameAndOrganizationNameForHandleID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 244);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDSaveWallpaperForCNContact_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 242);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDHandleRecordCreate_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    xpc_dictionary_set_int64(v12, "__xpc__event_code__", 39);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a6) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v13, a1, 0);
    xpc_release(v13);
  }
}

void __syncXPCIMDHandleRecordBulkUpdate_IPCAction(void (**a1)(void), int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
  if (v14)
  {
    uint64_t v15 = v14;
    xpc_dictionary_set_int64(v14, "__xpc__event_code__", 40);
    if (a2) {
      xpc_dictionary_set_int64(v15, "handleID", a2);
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a6) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a7) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v15, a1, 0);
    xpc_release(v15);
  }
}

void __syncXPCIMDHandleRecordCopyHandleForIDOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 41);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 42);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 43);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 45);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesForGUIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 44);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 46);
    if (a2) {
      xpc_dictionary_set_int64(v7, "lowerRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "maxRowID", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessageForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 47);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 169);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessageForRowID_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 51);
    if (a2) {
      xpc_dictionary_set_int64(v5, "rowID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesForRowIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 52);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(void (**a1)(void), void *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 53);
    if ([a2 count]) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyLastReceivedMessage_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 49);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 50);
    if (a2) {
      xpc_dictionary_set_int64(v5, "limit", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 54);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 55);
    if (a2) {
      xpc_dictionary_set_int64(v5, "days", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    long long v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 56);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      xpc_dictionary_set_int64(v9, "limit", a4);
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6, int a7, int a8)
{
  xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
  if (v16)
  {
    long long v17 = v16;
    xpc_dictionary_set_int64(v16, "__xpc__event_code__", 57);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a6) {
      xpc_dictionary_set_int64(v17, "limit", a6);
    }
    if (a7) {
      xpc_dictionary_set_BOOL(v17, "only_messages", 1);
    }
    if (a8) {
      xpc_dictionary_set_BOOL(v17, "only_unread", 1);
    }
    __XPCIMDMessageStoreSendXPCMessage(v17, a1, 0);
    xpc_release(v17);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6, int64_t a7)
{
  xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
  if (v14)
  {
    uint64_t v15 = v14;
    xpc_dictionary_set_int64(v14, "__xpc__event_code__", 58);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if ((a6 & 0x8000000000000000) == 0) {
      xpc_dictionary_set_int64(v15, "numberOfMessagesBefore", a6);
    }
    if ((a7 & 0x8000000000000000) == 0) {
      xpc_dictionary_set_int64(v15, "numberOfMessagesAfter", a7);
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v15, a1, 0);
    xpc_release(v15);
  }
}

void __syncXPCIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    long long v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 61);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    if (a4) {
      xpc_dictionary_set_int64(v9, "limit", a4);
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 62);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 79);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 81);
    IMInsertNSStringsToXPCDictionary();
    IMInsertNSStringsToXPCDictionary();
    IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 80);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatGetChatsThatContainRecipient_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 64);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    long long v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 63);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    if (a4) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    long long v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 65);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      xpc_dictionary_set_int64(v9, "limit", a4);
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9)
{
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18)
  {
    uint64_t v19 = v18;
    xpc_dictionary_set_int64(v18, "__xpc__event_code__", 66);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      IMInsertArraysToXPCDictionary();
    }
    if (a5) {
      IMInsertArraysToXPCDictionary();
    }
    if (a9 != 0.0) {
      xpc_dictionary_set_double(v19, "searchAfter", a9);
    }
    if (a7) {
      IMInsertArraysToXPCDictionary();
    }
    if (a8) {
      IMInsertArraysToXPCDictionary();
    }
    if (a6) {
      xpc_dictionary_set_BOOL(v19, "includeFromMe", 1);
    }
    __XPCIMDMessageStoreSendXPCMessage(v19, a1, 0);
    xpc_release(v19);
  }
}

void __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    xpc_dictionary_set_int64(v12, "__xpc__event_code__", 67);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      IMInsertArraysToXPCDictionary();
    }
    if (a5) {
      IMInsertArraysToXPCDictionary();
    }
    if (a6 != 0.0) {
      xpc_dictionary_set_double(v13, "searchAfter", a6);
    }
    __XPCIMDMessageStoreSendXPCMessage(v13, a1, 0);
    xpc_release(v13);
  }
}

void __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7)
{
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  if (v13)
  {
    xpc_object_t v14 = v13;
    xpc_dictionary_set_int64(v13, "__xpc__event_code__", 68);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    IMInsertBoolsToXPCDictionary();
    if (a7) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5 != 0.0) {
      xpc_dictionary_set_double(v14, "searchAfter", a5);
    }
    __XPCIMDMessageStoreSendXPCMessage(v14, a1, 0);
    xpc_release(v14);
  }
}

void __syncXPCIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    long long v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 69);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      xpc_dictionary_set_int64(v9, "replaceID", a4);
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 75);
    if (a2) {
      xpc_dictionary_set_int64(v5, "afterRowID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 76);
    if (a2) {
      xpc_dictionary_set_int64(v5, "afterRowID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 77);
    if (a2) {
      xpc_dictionary_set_int64(v5, "afterRowID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 78);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCountAllUnreadMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 82);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 83);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 84);
    if (a2) {
      xpc_dictionary_set_int64(v5, "chatID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordLastFailedMessageRowID_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 86);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordLastSyncedMessageRowID_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 87);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordLastFailedMessageDate_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 88);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordGetMostRecentMessageDate_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 89);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 90);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 91);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 93);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordGetMessagesSequenceNumber_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 92);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 94);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordDeleteOrphanedMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 95);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    uint64_t v11 = v10;
    xpc_dictionary_set_int64(v10, "__xpc__event_code__", 96);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    if (a4) {
      IMInsertCodableObjectsToXPCDictionary();
    }
    if (a5) {
      xpc_dictionary_set_BOOL(v11, "fromMe", 1);
    }
    __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
    xpc_release(v11);
  }
}

void __syncXPCIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 97);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 98);
    if (a2) {
      xpc_dictionary_set_int64(v7, "limit", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "rowID", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(void (**a1)(void), int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    uint64_t v11 = v10;
    xpc_dictionary_set_int64(v10, "__xpc__event_code__", 70);
    if (a2) {
      xpc_dictionary_set_int64(v11, "limit", a2);
    }
    if (a3) {
      IMInsertArraysToXPCDictionary();
    }
    if (a4) {
      IMInsertArraysToXPCDictionary();
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
    xpc_release(v11);
  }
}

void __syncXPCIMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 99);
    if (a2) {
      xpc_dictionary_set_int64(v7, "limit", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "date", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 100);
    if (a2) {
      xpc_dictionary_set_int64(v7, "limit", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "rowID", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMostRecentUseageOfAddresses_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 101);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCreate_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int64_t a20,uint64_t a21,int64_t a22,int64_t a23,int64_t a24,uint64_t a25,int64_t a26,int64_t a27,uint64_t a28,int64_t a29,int64_t a30,int64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int64_t a35,uint64_t a36,int64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int64_t a49,int64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int64_t a54,int64_t a55)
{
  xpc_object_t v61 = xpc_dictionary_create(0, 0, 0);
  if (v61)
  {
    char v62 = v61;
    xpc_dictionary_set_int64(v61, "__xpc__event_code__", 102);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      xpc_dictionary_set_int64(v62, "date", a3);
    }
    if (a4) {
      xpc_dictionary_set_int64(v62, "dateRead", a4);
    }
    if (a5) {
      xpc_dictionary_set_int64(v62, "dateDelivered", a5);
    }
    if (a6) {
      xpc_dictionary_set_int64(v62, "datePlayed", a6);
    }
    if (a7) {
      xpc_dictionary_set_int64(v62, "error", a7);
    }
    if (a8) {
      xpc_dictionary_set_int64(v62, "type", a8);
    }
    if (a9) {
      xpc_dictionary_set_int64(v62, "replaceID", a9);
    }
    if (a10) {
      IMInsertCodableObjectsToXPCDictionary();
    }
    if (a11) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a12) {
      IMInsertDatasToXPCDictionary();
    }
    if (a13) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a14) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a15) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a16) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a17) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a19) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a18) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a20) {
      xpc_dictionary_set_int64(v62, "itemType", a20);
    }
    if (a21) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a22) {
      xpc_dictionary_set_int64(v62, "groupActionType", a22);
    }
    if (a23) {
      xpc_dictionary_set_int64(v62, "shareStatus", a23);
    }
    if (a24) {
      xpc_dictionary_set_int64(v62, "shareDirection", a24);
    }
    if (a25) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a26) {
      xpc_dictionary_set_int64(v62, "expireState", a26);
    }
    if (a27) {
      xpc_dictionary_set_int64(v62, "messageActionType", a27);
    }
    if (a28) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a29) {
      xpc_dictionary_set_int64(v62, "associatedMessageType", a29);
    }
    if (a31)
    {
      xpc_dictionary_set_int64(v62, "associatedMessageRangeLocation", a30);
      xpc_dictionary_set_int64(v62, "associatedMessageRangeLength", a31);
    }
    if (a32) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a33) {
      IMInsertDatasToXPCDictionary();
    }
    if (a34) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a35) {
      xpc_dictionary_set_int64(v62, "timeExpressiveSendPlayed", a35);
    }
    if (a36) {
      IMInsertDatasToXPCDictionary();
    }
    xpc_dictionary_set_int64(v62, "cloudKitSyncState", a37);
    if (a38) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a39) {
      IMInsertDatasToXPCDictionary();
    }
    if (a40) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a41) {
      IMInsertDictionariesToXPCDictionary();
    }
    if (a42) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a43) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a44) {
      xpc_dictionary_set_int64(v62, "sortID", a44);
    }
    if (a45) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a46) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a47) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a48) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v62, "partCount", a49);
    if (a50) {
      xpc_dictionary_set_int64(v62, "dateEdited", a50);
    }
    if (a51) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a52) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a53) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v62, "scheduleType", a54);
    xpc_dictionary_set_int64(v62, "scheduleState", a55);
    __XPCIMDMessageStoreSendXPCMessage(v62, a1, 0);
    xpc_release(v62);
  }
}

void __syncXPCIMDMessageRecordCopyChats_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 103);
    if (a2) {
      xpc_dictionary_set_int64(v5, "messageID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordChatForMessageGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 104);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyAttachments_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 105);
    if (a2) {
      xpc_dictionary_set_int64(v5, "messageID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordSetHandle_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 106);
    if (a2) {
      xpc_dictionary_set_int64(v7, "messageID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "handleID", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyHandle_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 107);
    if (a2) {
      xpc_dictionary_set_int64(v5, "messageID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyOtherHandle_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 108);
    if (a2) {
      xpc_dictionary_set_int64(v5, "messageID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordBulkUpdate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3, uint64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int64_t a15, uint64_t a16, int64_t a17, int64_t a18, int64_t a19, int64_t a20,int64_t a21,int64_t a22,uint64_t a23,int64_t a24,int64_t a25,uint64_t a26,int64_t a27,int64_t a28,int64_t a29,uint64_t a30,uint64_t a31,int64_t a32,uint64_t a33,int64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int64_t a45,int64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int64_t a50,int64_t a51)
{
  xpc_object_t v57 = xpc_dictionary_create(0, 0, 0);
  if (v57)
  {
    uint64_t v58 = v57;
    xpc_dictionary_set_int64(v57, "__xpc__event_code__", 109);
    if (a2) {
      xpc_dictionary_set_int64(v58, "messageID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v58, "replaceID", a3);
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5) {
      xpc_dictionary_set_int64(v58, "fzDate", a5);
    }
    if (a6) {
      xpc_dictionary_set_int64(v58, "fzDateRead", a6);
    }
    if (a7) {
      xpc_dictionary_set_int64(v58, "fzDateDelivered", a7);
    }
    if (a8) {
      xpc_dictionary_set_int64(v58, "fzDatePlayed", a8);
    }
    if (a9) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a10) {
      IMInsertDatasToXPCDictionary();
    }
    if (a11) {
      IMInsertCodableObjectsToXPCDictionary();
    }
    if (a12) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a13) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a14) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a15) {
      xpc_dictionary_set_int64(v58, "handleID", a15);
    }
    if (a16) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a17) {
      xpc_dictionary_set_int64(v58, "fzError", a17);
    }
    if (a18) {
      xpc_dictionary_set_int64(v58, "fzType", a18);
    }
    if (a19) {
      xpc_dictionary_set_int64(v58, "otherHandleID", a19);
    }
    if (a20) {
      xpc_dictionary_set_int64(v58, "groupActionType", a20);
    }
    if (a21) {
      xpc_dictionary_set_int64(v58, "shareStatus", a21);
    }
    if (a22) {
      xpc_dictionary_set_int64(v58, "shareDirection", a22);
    }
    if (a23) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a24) {
      xpc_dictionary_set_int64(v58, "expireState", a24);
    }
    if (a25) {
      xpc_dictionary_set_int64(v58, "messageActionType", a25);
    }
    if (a26) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a27) {
      xpc_dictionary_set_int64(v58, "associatedMessageType", a27);
    }
    if (a29)
    {
      xpc_dictionary_set_int64(v58, "associatedMessageRangeLocation", a28);
      xpc_dictionary_set_int64(v58, "associatedMessageRangeLength", a29);
    }
    if (a30) {
      IMInsertDatasToXPCDictionary();
    }
    if (a31) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a32) {
      xpc_dictionary_set_int64(v58, "timePlayedExpressiveSend", a32);
    }
    if (a33) {
      IMInsertDatasToXPCDictionary();
    }
    xpc_dictionary_set_int64(v58, "cloudKitSyncState", a34);
    if (a35) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a36) {
      IMInsertDatasToXPCDictionary();
    }
    if (a37) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a38) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a39) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a40) {
      xpc_dictionary_set_int64(v58, "sortID", a40);
    }
    if (a41) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a42) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a43) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a44) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v58, "partCount", a45);
    if (a46) {
      xpc_dictionary_set_int64(v58, "dateEdited", a46);
    }
    if (a47) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a48) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a49) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v58, "scheduleType", a50);
    xpc_dictionary_set_int64(v58, "scheduleState", a51);
    __XPCIMDMessageStoreSendXPCMessage(v58, a1, 0);
    xpc_release(v58);
  }
}

void __syncXPCIMDMessagePTaskInsertRow_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 110);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertIntsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessagePTaskSelectWithLimit_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 111);
    if (a2) {
      IMInsertIntsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessagePTaskUpdateTaskFlagsForGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 112);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertIntsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessagePTaskDeleteAllCompletedTask_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 113);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCreate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, int64_t a15, int64_t a16, uint64_t a17, uint64_t a18, int64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28)
{
  xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
  if (v35)
  {
    uint64_t v36 = v35;
    xpc_dictionary_set_int64(v35, "__xpc__event_code__", 114);
    if (a2) {
      xpc_dictionary_set_int64(v36, "style", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v36, "state", a3);
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5) {
      IMInsertDatasToXPCDictionary();
    }
    if (a6) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a7) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a8) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a9) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a10) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a11) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a12) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a13) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a14) {
      xpc_dictionary_set_int64(v36, "isArchived", a14);
    }
    if (a15) {
      xpc_dictionary_set_int64(v36, "isFiltered", a15);
    }
    if (a24) {
      xpc_dictionary_set_int64(v36, "isBlackholed", a24);
    }
    if (a16) {
      xpc_dictionary_set_int64(v36, "hasHadSuccessfulQuery", a16);
    }
    if (a17) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a18) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v36, "ckSyncState", a19);
    if (a20) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v36, "lastReadMessageTimeStamp", a21);
    if (a22) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a23) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v36, "syndicationType", a25);
    xpc_dictionary_set_int64(v36, "syndicationDate", a26);
    if (a27) {
      xpc_dictionary_set_int64(v36, "isRecovered", a27);
    }
    if (a28) {
      xpc_dictionary_set_int64(v36, "isDeletingIncomingMessages", a28);
    }
    __XPCIMDMessageStoreSendXPCMessage(v36, a1, 0);
    xpc_release(v36);
  }
}

void __syncXPCIMDChatRecordCopyHandles_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 115);
    if (a2) {
      xpc_dictionary_set_int64(v5, "chatRowID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyMessagesWithLimit_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 116);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "limit", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsArchived_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 117);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "isArchived", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsBlackholed_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 221);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "isBlackholed", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsRecovered_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 236);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "isRecovered", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsDeletingIncomingMessages_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 237);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "isDeletingIncomingMessages", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordAddHandle_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 118);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "handleID", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordRemoveHandle_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    CFTypeRef v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 119);
    if (a2) {
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v7, "handleID", a3);
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordBulkUpdate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int64_t a15, int64_t a16, int64_t a17, uint64_t a18, uint64_t a19, int64_t a20,uint64_t a21,int64_t a22,uint64_t a23,uint64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28,int64_t a29)
{
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  if (v36)
  {
    char v37 = v36;
    xpc_dictionary_set_int64(v36, "__xpc__event_code__", 120);
    if (a2) {
      xpc_dictionary_set_int64(v37, "identifier", a2);
    }
    if (a3) {
      xpc_dictionary_set_int64(v37, "style", a3);
    }
    if (a4) {
      xpc_dictionary_set_int64(v37, "state", a4);
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a6) {
      IMInsertDatasToXPCDictionary();
    }
    if (a7) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a8) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a9) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a10) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a11) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a12) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a13) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a14) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a15) {
      xpc_dictionary_set_int64(v37, "isArchived", a15);
    }
    if (a16) {
      xpc_dictionary_set_int64(v37, "isFiltered", a16);
    }
    if (a25) {
      xpc_dictionary_set_int64(v37, "isBlackholed", a25);
    }
    if (a17) {
      xpc_dictionary_set_int64(v37, "hasHadSuccessfulQuery", a17);
    }
    if (a18) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a19) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v37, "ckSyncState", a20);
    if (a21) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v37, "lastReadMessageTimeStamp", a22);
    if (a23) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a24) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v37, "syndicationType", a26);
    xpc_dictionary_set_int64(v37, "syndicationDate", a27);
    if (a28) {
      xpc_dictionary_set_int64(v37, "isRecovered", a28);
    }
    if (a29) {
      xpc_dictionary_set_int64(v37, "isDeletingIncomingMessages", a29);
    }
    __XPCIMDMessageStoreSendXPCMessage(v37, a1, 0);
    xpc_release(v37);
  }
}

void __syncXPCIMDChatRecordCopyAllChats_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 121);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyAllNamedChats_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 174);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyAllActiveChatsWithLimit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 122);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction(void (*a1)(void), int64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  if (v4)
  {
    uint64_t v5 = v4;
    double Current = CFAbsoluteTimeGetCurrent();
    v21[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v21[1] = (void (*)(void))3221225472;
    v21[2] = (void (*)(void))sub_1AFC01B08;
    v21[3] = (void (*)(void))&unk_1E5F99578;
    uint8_t v21[4] = a1;
    v21[5] = (void (*)(void))&v22;
    xpc_dictionary_set_int64(v5, "__xpc__event_code__", 123);
    xpc_dictionary_set_int64(v5, "request", (uint64_t)Current);
    xpc_dictionary_set_int64(v5, "limit", a2);
    uint64_t v7 = IMOSLoggingEnabled();
    if (v7)
    {
      xpc_object_t v14 = OSLogHandleForIMFoundationCategory();
      uint64_t v7 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Progressive copy of all chats started", buf, 2u);
      }
    }
    if (*((unsigned char *)v23 + 24))
    {
      unsigned int v15 = 0;
    }
    else
    {
      unsigned int v16 = 0;
      do
      {
        long long v17 = (void *)MEMORY[0x1B3E8A120](v7, v8, v9, v10, v11, v12, v13);
        __XPCIMDMessageStoreSendXPCMessage(v5, v21, 0);
        unsigned int v15 = v16 + 1;
        if (*((unsigned char *)v23 + 24)) {
          break;
        }
      }
      while (v16++ < 0x95);
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        if (*((unsigned char *)v23 + 24)) {
          __int16 v20 = @"completed";
        }
        else {
          __int16 v20 = @"stopped early";
        }
        *(_DWORD *)long long buf = 138412546;
        long long v27 = v20;
        __int16 v28 = 1024;
        unsigned int v29 = v15;
        _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Progressive copy of all chats %@ with %d messages", buf, 0x12u);
      }
    }
    xpc_release(v5);
  }
  _Block_object_dispose(&v22, 8);
}

BOOL sub_1AFC01B08(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t, xpc_object_t))(v4 + 16))(v4, xdict);
  }
  BOOL result = xpc_dictionary_get_BOOL(xdict, "complete");
  if (result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void __syncXPCIMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 124);
    xpc_dictionary_set_int64(v7, "knownSenderLimit", a2);
    xpc_dictionary_set_int64(v7, "otherFilterLimit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightAddMessageGUID_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 125);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightAddMessageGUIDs_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 126);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightDeleteMessageGUIDs_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 127);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightAddChatGUID_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 129);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightDeleteChatGUID_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 130);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __XPCIMDCoreSpotlightSetNeedsMessageReindex_IPCAction(void (**a1)(void), int a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 131);
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, a2 ^ 1);
    xpc_release(v7);
  }
}

void __XPCIMDCoreSpotlightIndexNextMessageBatchIfNeeded_IPCAction(void (**a1)(void), int a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    xpc_dictionary_set_int64(v7, "__xpc__event_code__", 132);
    IMInsertIntsToXPCDictionary();
    xpc_dictionary_set_int64(v8, "reason", a4);
    __XPCIMDMessageStoreSendXPCMessage(v8, a1, a2 ^ 1);
    xpc_release(v8);
  }
}

void __syncXPCIMDCoreSpotlightReindexMessages_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 133);
    if ([a2 count]) {
      IMInsertArraysToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __asyncXPCIMDCoreSpotlightReindexMessages_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 133);
    if ([a2 count]) {
      IMInsertArraysToXPCDictionary();
    }
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 1);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightReindexMessagesWithCollaborationMetadata_IPCAction(void (**a1)(void), void *a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 134);
    if ([a2 count]) {
      IMInsertArraysToXPCDictionary();
    }
    xpc_dictionary_set_int64(v9, "reason", a4);
    if ([MEMORY[0x1E4F28DB0] archivedDataWithRootObject:a3 requiringSecureCoding:1 error:0]) {
      IMInsertDatasToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDChatRecordCopyChatRecordForIdentifier_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 249);
    if (a2 != -1) {
      xpc_dictionary_set_int64(v5, "identifier", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyChatForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 140);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyChatForMessageID_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 141);
    if (a2) {
      xpc_dictionary_set_int64(v5, "messageID", a2);
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithHandleOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 142);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithHandlesOnServiceWithDisplayNameGroupIDStyle_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6)
{
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    xpc_dictionary_set_int64(v12, "__xpc__event_code__", 143);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a5) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v13, "style", a6);
    __XPCIMDMessageStoreSendXPCMessage(v13, a1, 0);
    xpc_release(v13);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithIdentifierOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 149);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithRoomnameOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 151);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithGroupID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 152);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyNewestChatForGroupIDOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 156);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    IMInsertBoolsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordDeleteChatForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 157);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 162);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 163);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 164);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyChatGUIDsWithUnreadMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    id v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 220);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordSetIsFiltered_IPCAction(void (**a1)(void), uint64_t a2)
{
  if (a2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    if (v3)
    {
      xpc_object_t v4 = v3;
      xpc_dictionary_set_int64(v3, "__xpc__event_code__", 165);
      IMInsertNSStringsToXPCDictionary();
      IMInsertIntsToXPCDictionary();
      __XPCIMDMessageStoreSendXPCMessage(v4, a1, 0);
      xpc_release(v4);
    }
  }
}

void __syncXPCIMDChatRecordDeleteEmptyChats_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 166);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyChatIdentitiesForMessageWithGUIDs_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 167);
    IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDRepairDuplicateChats_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, void *a4)
{
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    xpc_object_t v8 = v7;
    xpc_dictionary_set_int64(v7, "__xpc__event_code__", 170);
    IMInsertNSStringsToXPCDictionary();
    IMInsertArraysToXPCDictionary();
    if (objc_msgSend(a4, "length", a2, 0)) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v8, a1, 0);
    xpc_release(v8);
  }
}

void __syncXPCIMDSplitDatabaseByDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 171);
    IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDSplitDatabaseByRecentCount_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 172);
    IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v5, "message_count", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDSwitchToDatabase_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 173);
    IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 175);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightMarkAttachment_IPCAction(void (**a1)(void), void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (!v10) {
    return;
  }
  uint64_t v11 = v10;
  xpc_dictionary_set_int64(v10, "__xpc__event_code__", 139);
  if (a2)
  {
    IMInsertNSStringsToXPCDictionary();
    objc_msgSend(a2, "UTF8String", a2, 0);
    uint64_t v12 = sandbox_extension_issue_file();
    if (v12)
    {
      uint64_t v13 = (void *)v12;
      objc_msgSend((id)objc_msgSend(NSString, "stringWithCString:encoding:", v12, 4), "UTF8String");
      IMInsertStringsToXPCDictionary();
      free(v13);
      if (!a3) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (IMOSLoggingEnabled())
    {
      xpc_object_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = *__error();
        *(_DWORD *)long long buf = 138412546;
        xpc_object_t v18 = a2;
        __int16 v19 = 1024;
        int v20 = v15;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "Could not generate sandbox extension for path %@, errno %d", buf, 0x12u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      unsigned int v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        xpc_object_t v18 = a2;
        _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "Could not generate sandbox extension for path %@", buf, 0xCu);
      }
    }
  }
  if (a3) {
LABEL_13:
  }
    IMInsertNSStringsToXPCDictionary();
LABEL_14:
  if (a4) {
    IMInsertArraysToXPCDictionary();
  }
  if (a5) {
    IMInsertBoolsToXPCDictionary();
  }
  __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
  xpc_release(v11);
}

void __IMDDowngradeDatabaseToVersion_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 176);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesToUploadToCloudKit_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 177);
    xpc_dictionary_set_int64(v7, "limit", a2);
    xpc_dictionary_set_int64(v7, "filter", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 178);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 179);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 180);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 181);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesToDeleteFromCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 186);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit_IPCAction(void (**a1)(void), void *a2, void *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 187);
    if ([a2 length])
    {
      xpc_object_t v8 = a2;
      uint64_t v9 = 0;
      IMInsertNSStringsToXPCDictionary();
    }
    if (objc_msgSend(a3, "length", v8, v9)) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 188);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithReplyToGUIDs_IPCAction(void (**a1)(void), void *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 214);
    if ([a2 length]) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkDeletedTombStonedMessagesAsNeedingCloudKitSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 189);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordDeleteTombStonedMessagesForRecordIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 190);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCInsertIntoDeletedChatsTable_IPCAction(void (**a1)(void), void *a2, void *a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 191);
    if ([a2 length])
    {
      xpc_object_t v10 = a2;
      uint64_t v11 = 0;
      IMInsertNSStringsToXPCDictionary();
    }
    if (objc_msgSend(a3, "length", v10, v11)) {
      IMInsertNSStringsToXPCDictionary();
    }
    xpc_dictionary_set_int64(v9, "timeStamp", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDChatRecordCopyChatRecordIDsAndGUIDsToDeleteFromCloudKitWithLimit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 192);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatClearPendingDeleteChatsTable_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 193);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRemapMessagesWithErrorCodeToErrorCode_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3, int64_t a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 194);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    xpc_dictionary_set_int64(v9, "fromError", a3);
    xpc_dictionary_set_int64(v9, "toError", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCalculateLocalCloudKitStatistics_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 195);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCalculateTotalCounts_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 196);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 197);
    xpc_dictionary_set_int64(v5, "rowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 198);
    xpc_dictionary_set_int64(v5, "rowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordSetCloudKitSyncCounts_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 199);
    IMInsertDictionariesToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordMarkFailedAttachmentsAsNeedingSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 202);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsToDeleteFromCloudKit_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 203);
    if (a2) {
      xpc_dictionary_set_int64(v7, "afterRow", [a2 longLongValue]);
    }
    xpc_dictionary_set_int64(v7, "limit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentGUIDs_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 204);
    if (a2) {
      xpc_dictionary_set_int64(v7, "afterRow", [a2 longLongValue]);
    }
    xpc_dictionary_set_int64(v7, "limit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordDeleteTombStonedAttachmentsForRecordIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 205);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCMDAttachmentRecordDeleteTombStonedAttachmentsToDeleteFromCloudKit_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 206);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    xpc_object_t v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 209);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDKVValueForKey_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 210);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDKVPersistValueForKey_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 212);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertDatasToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __asyncXPCIMDNotificationsPostNotifications_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 213);
    if (a2) {
      IMInsertDictionariesToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __asyncXPCIMDNotificationsRetractNotificationsForReadMessages_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 215);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __asyncXPCIMDMessageRecordRetractNotificationsForChatGuids_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 239);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __asyncXPCIMDNotificationsRetractNotificationsFromFirstUnlock_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 216);
    if (a2) {
      IMInsertDictionariesToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __syncXPCIMDNotificationsPostUrgentNotificationsForMessages_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 217);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertDictionariesToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDNotificationsUpdatePostedNotificationsForMessages_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 218);
    if (a2) {
      IMInsertArraysToXPCDictionary();
    }
    if (a3) {
      IMInsertDictionariesToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDNotificationsPostFirstUnlockMessage_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    xpc_object_t v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 219);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordMarkMessageGUIDUnread_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 222);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int a4)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 223);
    if (a2) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a3) {
      IMInsertNSStringsToXPCDictionary();
    }
    if (a4) {
      xpc_dictionary_set_BOOL(v9, "fromMe", 1);
    }
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDChatRecordPurgeAttachments_IPCAction(void (**a1)(void), uint64_t a2)
{
  if (a2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    if (v3)
    {
      xpc_object_t v4 = v3;
      xpc_dictionary_set_int64(v3, "__xpc__event_code__", 224);
      IMInsertNSStringsToXPCDictionary();
      __XPCIMDMessageStoreSendXPCMessage(v4, a1, 0);
      xpc_release(v4);
    }
  }
}

uint64_t sub_1AFC05060(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    uint64_t v3 = [a2 object];
    xpc_object_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    return v4(v2, v3);
  }
  return result;
}

Class sub_1AFC06C40(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1E9AF8300)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = sub_1AFC06D6C;
    void v3[4] = &unk_1E5F8E728;
    void v3[5] = v3;
    long long v4 = xmmword_1E5F995C0;
    uint64_t v5 = 0;
    qword_1E9AF8300 = _sl_dlopen();
  }
  if (!qword_1E9AF8300) {
    sub_1AFC6EF98(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("FAFetchFamilyCircleRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC6F018();
  }
  qword_1E9AF82F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1AFC06D6C()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF8300 = result;
  return result;
}

void IMDDatabaseClean()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Cleaning Database", v1, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess()) {
    IMDSMSRecordStoreClean();
  }
  else {
    __syncXPCIMDDatabaseClean_IPCAction(0);
  }
}

void *IMDHandleCanonicalizedIDsBulkUpdateQuery(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && [v1 count])
  {
    uint64_t v3 = (void *)[@"UPDATE OR IGNORE handle SET id = CASE ROWID " mutableCopy];
    long long v4 = objc_msgSend(@"("), "mutableCopy";
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v13 = v2;
    id v5 = v2;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          uint64_t v11 = [v5 objectForKeyedSubscript:v10];
          [v3 appendFormat:@"WHEN %@ THEN '%@' ", v10, v11];

          [v4 appendFormat:@"%@, ", v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v7);
    }

    [v4 replaceCharactersInRange:objc_msgSend(v4, "length") - 2, 2, @"" withString]);
    [v3 appendFormat:@"END WHERE ROWID IN %@", v4];

    uint64_t v2 = v13;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t IMDHandleRecordCopyHandlesFilteredUsingPredicateQuery(void *a1)
{
  id v1 = (objc_class *)NSString;
  id v2 = a1;
  uint64_t v3 = [[v1 alloc] initWithFormat:@"%@ WHERE %@", @"SELECT ROWID, id, country, service, uncanonicalized_id, person_centric_id FROM handle ", v2];

  return v3;
}

uint64_t IMDHandleRecordCopySortedHandlesFilteredUsingPredicateWithLimitQuery(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = [NSString stringWithFormat:@"WHERE %@", v3];
  }
  else
  {
    id v5 = &stru_1F084E970;
  }
  if ([v4 count])
  {
    uint64_t v6 = [v4 componentsJoinedByString:@", "];
    uint64_t v7 = [NSString stringWithFormat:@"ORDER BY %@ ", v6];
  }
  else
  {
    uint64_t v7 = &stru_1F084E970;
  }
  uint64_t v8 = [[NSString alloc] initWithFormat:@"%@ %@ %@ LIMIT ?", @"SELECT ROWID, id, country, service, uncanonicalized_id, person_centric_id FROM handle ", v5, v7];

  return v8;
}

uint64_t sub_1AFC07868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFC07878(uint64_t a1)
{
}

void sub_1AFC07880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) bindParametersToSqliteWithStatement:a4];
  id v8 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v5 = [*(id *)(a1 + 40) _copyChatRecordsFromCoreSDBResults:v8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1AFC07DF8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFC07C30);
  }
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1AFC07E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5) {
    [v5 bindParametersToSqliteWithStatement:a4];
  }
  CSDBSqliteBindInt64();
  id v9 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v6 = [*(id *)(a1 + 40) _copyChatRecordsFromCoreSDBResults:v9];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1AFC08154(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  id v5 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v2 = [*(id *)(a1 + 40) _copyChatRecordsFromCoreSDBResults:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1AFC08674(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFC08608);
  }
  _Unwind_Resume(a1);
}

void sub_1AFC089F4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    if (!v23) {
      JUMPOUT(0x1AFC08990);
    }
    JUMPOUT(0x1AFC08978);
  }
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1AFC08A48(uint64_t a1)
{
  CSDBSqliteBindTextFromCFArrayOfCFStrings();
  CSDBSqliteBindTextFromCFString();
  if (*(unsigned char *)(a1 + 88)) {
    CSDBSqliteBindTextFromCFString();
  }
  if (*(unsigned char *)(a1 + 89)) {
    CSDBSqliteBindTextFromCFString();
  }
  CSDBSqliteBindInt64();
  if (!*(unsigned char *)(a1 + 91)) {
    CSDBSqliteBindInt64();
  }
  id v5 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v2 = [*(id *)(a1 + 64) _copyChatRecordsFromCoreSDBResults:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1AFC08CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC08CBC(uint64_t a1, void *a2)
{
}

void sub_1AFC09AD8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1AFC09A6CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1AFC09B38(uint64_t a1, long long *a2)
{
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Select guid default", (uint8_t *)&v7, 2u);
      }
    }
  }
  else
  {
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v4 = [MEMORY[0x1E4F28ED0] numberWithLongLong:IMDInt64FromSqlColumn((uint64_t)&v7)];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_1AFC09C34(uint64_t a1, void *a2)
{
}

void sub_1AFC0A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1AFC0A1E4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AFC0A29C(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t v12 = 138412290;
    *(void *)&void v12[4] = v5;
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Recently Deleted: message GUID in recovery for chat %@, iterating", v12, 0xCu);
  }

  if (*(_DWORD *)(a2 + 16))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)uint64_t v12 = 138412546;
        *(void *)&void v12[4] = v7;
        *(_WORD *)&v12[12] = 1024;
        *(_DWORD *)&v12[14] = v8;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Recently Deleted: Unexpected column in recoverable message in chat %@ with index %d", v12, 0x12u);
      }
    }
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
    *(void *)&v12[16] = *(void *)(a2 + 16);
    id v9 = IMDStringFromSqlColumn((uint64_t)v12);
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
}

void sub_1AFC0A768(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [*(id *)(a1 + 32) _restoredAttributedBodyForMessageGUID:v5 withRecoveredAttributedParts:a3];
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    long long v8 = *(_OWORD *)(a1 + 152);
    long long v9 = *(_OWORD *)(a1 + 184);
    v13[8] = *(_OWORD *)(a1 + 168);
    v13[9] = v9;
    v13[10] = *(_OWORD *)(a1 + 200);
    long long v10 = *(_OWORD *)(a1 + 88);
    long long v11 = *(_OWORD *)(a1 + 120);
    void v13[4] = *(_OWORD *)(a1 + 104);
    v13[5] = v11;
    void v13[6] = *(_OWORD *)(a1 + 136);
    void v13[7] = v8;
    long long v12 = *(_OWORD *)(a1 + 56);
    v13[0] = *(_OWORD *)(a1 + 40);
    v13[1] = v12;
    v13[2] = *(_OWORD *)(a1 + 72);
    v13[3] = v10;
    [v7 _updateMessageRecordForGUID:v5 withAttributedBody:v6 operation:v13];
  }
}

void sub_1AFC0B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC0B0EC(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC0B1DC;
  v5[3] = &unk_1E5F940E8;
  uint64_t v7 = a2;
  id v6 = *(id *)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC0B1E8;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 40);
  void v4[5] = a2;
  _IMDSqlOperationRunQuery(a2, @"SELECT attributedBody FROM message WHERE message.guid = ?;",
    (uint64_t)v5,
    (uint64_t)v4);
}

void sub_1AFC0B1DC(uint64_t a1)
{
}

BOOL sub_1AFC0B1E8(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v13 = 0;
      long long v14 = &v13;
      uint64_t v15 = 0x3032000000;
      long long v16 = sub_1AFC07868;
      long long v17 = sub_1AFC07878;
      id v18 = 0;
      uint64_t v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Recently Deleted: body will iterate", buf, 2u);
      }

      uint64_t v5 = *(void *)(a1 + 40);
      v12[0] = v3;
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFC0B49C;
      v12[3] = &unk_1E5F90980;
      void v12[4] = &v13;
      IMDSqlOperationIterateRow(v5, (uint64_t)v12);
      if (v14[5])
      {
        id v6 = IMLogHandleForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = v14[5];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v20 = v7;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Recently Deleted:Parts: Success in column values returned: %@", buf, 0xCu);
        }

        uint64_t v8 = JWDecodeCodableObjectWithStandardAllowlist();
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
        long long v10 = *(NSObject **)(v9 + 40);
        *(void *)(v9 + 40) = v8;
      }
      else
      {
        long long v10 = IMLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = v14[5];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v20 = v11;
          _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Recently Deleted:Parts: Error in column values returned: %@", buf, 0xCu);
        }
      }

      _Block_object_dispose(&v13, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFC0B470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC0B49C(uint64_t a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Recently Deleted: body iterating", (uint8_t *)&v10, 2u);
  }

  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v6 = *((_DWORD *)a2 + 4);
        LODWORD(v10) = 67109120;
        DWORD1(v10) = v6;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Recently Deleted: Unexpected column in recoverable message parts metadata query with index %d", (uint8_t *)&v10, 8u);
      }
    }
  }
  else
  {
    long long v10 = *a2;
    uint64_t v11 = *((void *)a2 + 2);
    CFDataRef v7 = IMDBlobFromSqlColumn((uint64_t)&v10);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_1AFC0B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC0B814(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC0B904;
  v5[3] = &unk_1E5F940E8;
  uint64_t v7 = a2;
  id v6 = *(id *)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC0B910;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 40);
  void v4[5] = a2;
  _IMDSqlOperationRunQuery(a2, @"SELECT m.guid, rmp.part_text FROM recoverable_message_part AS rmp JOIN chat AS c ON c.ROWint ID = rmp.chat_id AND c.guid = ? JOIN message AS m ON m.ROWint ID = rmp.message_id;",
    (uint64_t)v5,
    (uint64_t)v4);
}

void sub_1AFC0B904(uint64_t a1)
{
}

BOOL sub_1AFC0B910(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v13 = v22;
    uint64_t v3 = MEMORY[0x1E4F143A8];
    uint64_t v12 = &v25;
    do
    {
      uint64_t v21 = 0;
      v22[0] = &v21;
      v22[1] = 0x3032000000;
      v22[2] = sub_1AFC07868;
      v22[3] = sub_1AFC07878;
      id v23 = 0;
      uint64_t v15 = 0;
      long long v16 = &v15;
      uint64_t v17 = 0x3032000000;
      id v18 = sub_1AFC07868;
      uint64_t v19 = sub_1AFC07878;
      id v20 = 0;
      uint64_t v4 = *(void *)(a1 + 40);
      v14[0] = v3;
      v14[1] = 3221225472;
      void v14[2] = sub_1AFC0BC98;
      v14[3] = &unk_1E5F90CA0;
      void v14[4] = &v21;
      v14[5] = &v15;
      IMDSqlOperationIterateRow(v4, (uint64_t)v14);
      if (![*(id *)(v22[0] + 40) length] || !v16[5])
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v7 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            uint64_t v8 = *(void *)(v22[0] + 40);
            uint64_t v9 = v16[5];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v27 = v8;
            __int16 v28 = 2112;
            uint64_t v29 = v9;
            _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Parts: Error in column values returned: %@|%@", buf, 0x16u);
          }
        }
        goto LABEL_17;
      }
      uint64_t v5 = JWDecodeCodableObjectWithStandardAllowlist();
      id v6 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectForKeyedSubscript:*(void *)(v22[0] + 40)];
      if (v6)
      {
        if (!v5) {
          goto LABEL_13;
        }
      }
      else
      {
        id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v10 forKeyedSubscript:*(void *)(v22[0] + 40)];

        id v6 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectForKeyedSubscript:*(void *)(v22[0] + 40)];
        if (!v5)
        {
LABEL_13:
          uint64_t v11 = IMLogHandleForCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_1AFC6F794(v24, (uint64_t)v13, v12, v11);
          }

          goto LABEL_16;
        }
      }
      objc_msgSend(v6, "addObject:", v5, v12, v13);
LABEL_16:

LABEL_17:
      _Block_object_dispose(&v15, 8);

      _Block_object_dispose(&v21, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFC0BC60()
{
}

void sub_1AFC0BC98(uint64_t a1, long long *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 4);
  if (v4 == 1)
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    CFDataRef v8 = IMDBlobFromSqlColumn((uint64_t)&v13);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = *((_DWORD *)a2 + 4);
        LODWORD(v13) = 67109120;
        DWORD1(v13) = v12;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Unexpected column in recoverable message parts metadata query with index %d", (uint8_t *)&v13, 8u);
      }
    }
  }
  else
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    uint64_t v5 = IMDStringFromSqlColumn((uint64_t)&v13);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

void sub_1AFC0BE0C(void *a1, long long *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      long long v11 = *a2;
      uint64_t v12 = *((void *)a2 + 2);
      int v4 = IMDStringFromSqlColumn((uint64_t)&v11);
      uint64_t v5 = *(void *)(a1[4] + 8);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      return;
    case 1:
      long long v11 = *a2;
      uint64_t v12 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      uint64_t v10 = a1[5];
      goto LABEL_11;
    case 2:
      long long v11 = *a2;
      uint64_t v12 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      uint64_t v10 = a1[6];
      goto LABEL_11;
    case 3:
      long long v11 = *a2;
      uint64_t v12 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      uint64_t v10 = a1[7];
      goto LABEL_11;
    case 4:
      long long v11 = *a2;
      uint64_t v12 = *((void *)a2 + 2);
      sqlite3_int64 v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      uint64_t v10 = a1[8];
LABEL_11:
      *(void *)(*(void *)(v10 + 8) + 24) = v9;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        uint64_t v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = *((_DWORD *)a2 + 4);
          LODWORD(v11) = 67109120;
          DWORD1(v11) = v8;
          _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Unexpected column in recoverable message metadata query with index %d", (uint8_t *)&v11, 8u);
        }
      }
      break;
  }
}

void sub_1AFC0C1F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) + 32;
  sqlite3_int64 v2 = objc_msgSend(*(id *)(a1 + 32), "__im_nanosecondTimeInterval");
  IMDSqlStatementBindInt64(v1, v2);
}

BOOL sub_1AFC0C234(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFC0C2F8;
      v5[3] = &unk_1E5F950B0;
      uint64_t v4 = *(void *)(a1 + 40);
      id v6 = *(id *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);

      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFC0C2F8(uint64_t a1, long long *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)a2 + 4);
        LODWORD(v7) = 67109120;
        DWORD1(v7) = v4;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Unexpected column in affected chat query with index %d", (uint8_t *)&v7, 8u);
      }
    }
  }
  else
  {
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
    id v6 = (unsigned __int8 *)IMDStringFromSqlColumn((uint64_t)&v7);
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1AFC0C620(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) + 32;
  sqlite3_int64 v2 = objc_msgSend(*(id *)(a1 + 32), "__im_nanosecondTimeInterval");
  IMDSqlStatementBindInt64(v1, v2);
}

BOOL sub_1AFC0C660(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFC0C724;
      v5[3] = &unk_1E5F950B0;
      uint64_t v4 = *(void *)(a1 + 40);
      id v6 = *(id *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);

      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFC0C724(uint64_t a1, long long *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = *((_DWORD *)a2 + 4);
        LODWORD(v7) = 67109120;
        DWORD1(v7) = v4;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Unexpected column in affected chat query with index %d", (uint8_t *)&v7, 8u);
      }
    }
  }
  else
  {
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
    id v6 = (unsigned __int8 *)IMDStringFromSqlColumn((uint64_t)&v7);
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1AFC0CE4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  obuint64_t j = a3;
  uint64_t v5 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    uint64_t v8 = *MEMORY[0x1E4F6C188];
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v11 = [v10 length];
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        v13[2] = sub_1AFC0CFE4;
        v13[3] = &unk_1E5F959B0;
        id v14 = v4;
        objc_msgSend(v10, "enumerateAttribute:inRange:options:usingBlock:", v8, 0, v11, 0, v13);
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }
}

void sub_1AFC0CFE4(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Recently Deleted | Parts: Deleting transfer GUID: %@ for recoverable message part for messageGUID: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  IMDAttachmentRecordDeleteAttachmentForGUID(v3);
}

void sub_1AFC0D4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC0D4EC(uint64_t a1)
{
  CSDBSqliteBindInt64();
  id v5 = (id)CSDBRecordStoreProcessStatement();
  uint64_t v2 = [*(id *)(a1 + 32) _copyChatRecordsFromCoreSDBResults:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1AFC0DD74()
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F6CAB8];
  v4[0] = @"rowID";
  v4[1] = v0;
  v5[0] = @"ROWID";
  v5[1] = @"guid";
  uint64_t v1 = *MEMORY[0x1E4F6CAC0];
  v4[2] = *MEMORY[0x1E4F6CAB0];
  v4[3] = v1;
  void v5[2] = @"filename";
  v5[3] = @"original_guid";
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:4];
  uint64_t v3 = (void *)qword_1EB5ABA28;
  qword_1EB5ABA28 = v2;
}

id sub_1AFC0DE90(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = sub_1AFB59414(a1, *(void *)(*((void *)&v14 + 1) + 8 * i));
          [v4 addObject:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v7);
    }

    uint64_t v11 = NSString;
    uint64_t v12 = [v4 componentsJoinedByString:@", "];
    a1 = [v11 stringWithFormat:@"( %@)", v12];
  }
  return a1;
}

uint64_t _IMDSMSDatabaseMigrateData_34_35()
{
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = *(sqlite3_stmt **)(v0 + 8);
    if (v2)
    {
      if (sqlite3_step(v2) == 100)
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
          if (sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 1))
          {
            id v4 = sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 1);
            id v5 = (__CFString *)CFStringCreateWithCString(v3, (const char *)v4, 0x8000100u);
          }
          else
          {
            id v5 = 0;
          }
          IMComponentsFromChatGUID();
          uint64_t v6 = CSDBSqliteConnectionStatementForSQL();
          if (v6 && *(void *)(v6 + 8))
          {
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  return 1;
}

uint64_t IMDAttachmentRecordDeleteUsingPredicateQuery(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = [NSString stringWithFormat:@"WHERE %@", a1];
  }
  else
  {
    uint64_t v1 = &stru_1F084E970;
  }
  uint64_t v2 = [[NSString alloc] initWithFormat:@"%s%@", "DELETE FROM attachment ", v1];

  return v2;
}

uint64_t IMDAttachmentRecordCopyFilteredUsingPredicateWithLimitQuery(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = [NSString stringWithFormat:@"WHERE %@", a1];
  }
  else
  {
    uint64_t v1 = &stru_1F084E970;
  }
  uint64_t v2 = [[NSString alloc] initWithFormat:@"%s%@", "SELECT ROWID, guid, created_date, start_date, filename, uti, mime_type, transfer_state, is_outgoing, user_info, transfer_name, total_bytes, is_sticker, sticker_user_info, attribution_info, hide_attachment, ck_sync_state, ck_server_change_token_blob, ck_record_id, original_guid, is_commsafety_sensitive, emoji_image_content_identifier, emoji_image_short_description, preview_generation_state FROM attachment ", v1];

  return v2;
}

uint64_t IMDAttachmentRecordCopySortedAttachmentsFilteredUsingPredicateWithLimitQuery(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = [NSString stringWithFormat:@"WHERE %@", v3];
  }
  else
  {
    id v5 = &stru_1F084E970;
  }
  if ([v4 count])
  {
    uint64_t v6 = [v4 componentsJoinedByString:@", "];
    uint64_t v7 = [NSString stringWithFormat:@"ORDER BY %@ ", v6];
  }
  else
  {
    uint64_t v7 = &stru_1F084E970;
  }
  uint64_t v8 = [[NSString alloc] initWithFormat:@"%@ %@ %@ LIMIT ?", @"SELECT ROWID, guid, created_date, start_date, filename, uti, mime_type, transfer_state, is_outgoing, user_info, transfer_name, total_bytes, is_sticker, sticker_user_info, attribution_info, hide_attachment, ck_sync_state, ck_server_change_token_blob, ck_record_id, original_guid, is_commsafety_sensitive, emoji_image_content_identifier, emoji_image_short_description, preview_generation_state FROM attachment ", v5, v7];

  return v8;
}

void sub_1AFC0E380(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 1)
  {
    BOOL v4 = (sqlite3_value_int(*a3) & 0x403) != 0;
    sqlite3_result_int(a1, v4);
  }
  else
  {
    sqlite3_result_error(a1, "wrong number of arguments", -1);
  }
}

uint64_t sub_1AFC0E3FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ([a4 length])
  {
    int v7 = CSDBSqliteConnectionPerformSQL();
    if (v7) {
      BOOL v8 = v7 == 101;
    }
    else {
      BOOL v8 = 1;
    }
    uint64_t v9 = v8;
    if (v7 && (int v10 = v7, v7 != 101))
    {
      uint64_t v13 = IMLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
        int v16 = 138412802;
        uint64_t v17 = a2;
        __int16 v18 = 1024;
        int v19 = v10;
        __int16 v20 = 2080;
        uint64_t v21 = v15;
        _os_log_error_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_ERROR, "%@ SQLiteResult: %d SQLite Message: %s", (uint8_t *)&v16, 0x1Cu);
      }
    }
    else
    {
      uint64_t v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        uint64_t v17 = a3;
        _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6F908(v12);
    }
    return 1;
  }
  return v9;
}

uint64_t sub_1AFC0E5A0(uint64_t a1)
{
  uint64_t v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v10 = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Updating madrid indices.", v10, 2u);
  }
  int v3 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_handle_index.", @"Created index madrid_handle_index.", @"CREATE INDEX madrid_handle_index ON message(madrid_handle);");
  int v4 = v3 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_guid_index.", @"Created index madrid_guid_index.", @"CREATE INDEX madrid_guid_index ON message(madrid_guid);");
  int v5 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_roomname_index.", @"Created index madrid_roomname_index.", @"CREATE INDEX madrid_roomname_index ON message(madrid_roomname);");
  int v6 = v4 & v5 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_service_index.", @"Created index madrid_service_index.", @"CREATE INDEX madrid_service_index ON message(madrid_service);");
  int v7 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_account_index.", @"Created index madrid_account_index.", @"CREATE INDEX madrid_account_index ON message(madrid_account);");
  int v8 = v7 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_url_index.", @"Created index madrid_url_index.", @"CREATE INDEX madrid_url_index ON message(madrid_url);");
  return v6 & v8 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_flags_index.", @"Created index madrid_flags_index.", @"CREATE INDEX madrid_flags_index ON message(madrid_flags);");
}

uint64_t sub_1AFC0E718(uint64_t a1)
{
  uint64_t v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Nuking bogus madrid message indices.", v11, 2u);
  }
  int v3 = sub_1AFC0E3FC(a1, @"Failed to drop index madrid_handle_index.", @"Dropped index madrid_handle_index.", @"DROP INDEX madrid_handle_index;");
  int v4 = v3 & sub_1AFC0E3FC(a1, @"Failed to drop index madrid_roomname_index.", @"Dropped index madrid_roomname_index.", @"DROP INDEX madrid_roomname_index;");
  int v5 = sub_1AFC0E3FC(a1, @"Failed to drop index madrid_service_index.", @"Dropped index madrid_service_index.", @"DROP INDEX madrid_service_index;");
  int v6 = v4 & v5 & sub_1AFC0E3FC(a1, @"Failed to drop index madrid_account_index.", @"Dropped index madrid_account_index.", @"DROP INDEX madrid_account_index;");
  int v7 = sub_1AFC0E3FC(a1, @"Failed to drop index madrid_url_index.", @"Dropped index madrid_url_index.", @"DROP INDEX madrid_url_index;");
  int v8 = v7 & sub_1AFC0E3FC(a1, @"Failed to drop index madrid_flags_index.", @"Dropped index madrid_flags_index.", @"DROP INDEX madrid_flags_index;");
  int v9 = v6 & v8 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_roomname_service_index.", @"Created index madrid_roomname_service_index.", @"CREATE INDEX madrid_roomname_service_index ON message(madrid_roomname, madrid_service);");
  return v9 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_handle_service_index.", @"Created index madrid_handle_service_index.", @"CREATE INDEX madrid_handle_service_index ON message(madrid_handle, madrid_service);");
}

uint64_t sub_1AFC0E8B4(uint64_t a1)
{
  int v2 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_attachment_message_index.", @"Created index madrid_attachment_message_index.", @"CREATE INDEX IF NOT EXISTS madrid_attachment_message_index ON madrid_attachment(message_id);");
  int v3 = v2 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_attachment_guid_index.", @"Created index madrid_attachment_guid_index.", @"CREATE INDEX IF NOT EXISTS madrid_attachment_guid_index ON madrid_attachment(attachment_guid);");
  return v3 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_attachment_filename_index.", @"Created index madrid_attachment_filename_index.", @"CREATE INDEX IF NOT EXISTS madrid_attachment_filename_index ON madrid_attachment(filename);");
}

uint64_t sub_1AFC0E93C(uint64_t a1)
{
  int v2 = sub_1AFC0E3FC(a1, @"Failed to create madrid_attachment table", @"Created madrid_attachment table", @"CREATE TABLE IF NOT EXISTS madrid_attachment (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, attachment_guid TEXT, created_date INTEGER, start_date INTEGER, filename TEXT, uti_type TEXT, mime_type TEXT, transfer_state INTEGER, is_incoming INTEGER, message_id INTEGER)");
  return v2 & sub_1AFC0E8B4(a1);
}

uint64_t sub_1AFC0E988(uint64_t a1)
{
  int v2 = sub_1AFC0E3FC(a1, @"Failed to create madrid_chat table", @"Created madrid_chat table", @"CREATE TABLE madrid_chat (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, style INTEGER, state INTEGER, account_id TEXT, properties BLOB, chat_identifier TEXT, service_name TEXT, guid TEXT, room_name TEXT, account_login TEXT, participants BLOB)");
  int v3 = v2 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_style_index.", @"Created index madrid_chat_style_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_style_index ON madrid_chat(style)");
  int v4 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_state_index.", @"Created index madrid_chat_state_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_state_index ON madrid_chat(state)");
  int v5 = v3 & v4 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_account_id_index.", @"Created index madrid_chat_account_id_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_account_id_index ON madrid_chat(account_id)");
  int v6 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_chat_identifier_index.", @"Created index madrid_chat_chat_identifier_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_chat_identifier_index ON madrid_chat(chat_identifier)");
  int v7 = v6 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_service_name_index.", @"Created index madrid_chat_service_name_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_service_name_index ON madrid_chat(service_name)");
  int v8 = v5 & v7 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_guid_index.", @"Created index madrid_chat_guid_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_guid_index ON madrid_chat(guid)");
  int v9 = sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_room_name_index.", @"Created index madrid_chat_room_name_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_room_name_index ON madrid_chat(room_name)");
  return v8 & v9 & sub_1AFC0E3FC(a1, @"Failed to create index madrid_chat_account_login_index.", @"Created index madrid_chat_account_login_index.", @"CREATE INDEX IF NOT EXISTS madrid_chat_account_login_index ON madrid_chat(account_login)");
}

uint64_t sub_1AFC0EAFC(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)[[NSString alloc] initWithFormat:@"Failed to drop table: %@", a2];
  int v5 = (void *)[[NSString alloc] initWithFormat:@"Successfully dropped table: %@", a2];
  int v6 = (void *)[[NSString alloc] initWithFormat:@"DROP TABLE IF EXISTS %@;", a2];
  uint64_t v7 = sub_1AFC0E3FC(a1, (uint64_t)v4, (uint64_t)v5, v6);

  return v7;
}

uint64_t sub_1AFC0EBB8(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)[[NSString alloc] initWithFormat:@"Failed to drop index: %@", a2];
  int v5 = (void *)[[NSString alloc] initWithFormat:@"Successfully dropped index: %@", a2];
  int v6 = (void *)[[NSString alloc] initWithFormat:@"DROP INDEX IF EXISTS %@;", a2];
  uint64_t v7 = sub_1AFC0E3FC(a1, (uint64_t)v4, (uint64_t)v5, v6);

  return v7;
}

uint64_t sub_1AFC0EC74(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = sub_1AFC0EBB8(a1, a2);
  uint64_t v7 = (void *)[[NSString alloc] initWithFormat:@"Failed to create index: %@", a2];
  int v8 = (void *)[[NSString alloc] initWithFormat:@"Successfully created index: %@", a2];
  uint64_t v9 = v6 & sub_1AFC0E3FC(a1, (uint64_t)v7, (uint64_t)v8, a3);

  return v9;
}

uint64_t sub_1AFC0ED1C(uint64_t a1)
{
  int v2 = sub_1AFC0E3FC(a1, @"Failed to add column subject.", @"Added column subject.", @"ALTER TABLE message ADD COLUMN subject TEXT");
  int v3 = v2 & sub_1AFC0E3FC(a1, @"Failed to add column country.", @"Added column country.", @"ALTER TABLE message ADD COLUMN country TEXT");
  int v4 = sub_1AFC0E3FC(a1, @"Failed to add column headers.", @"Added column headers.", @"ALTER TABLE message ADD COLUMN headers BLOB");
  int v5 = v3 & v4 & sub_1AFC0E3FC(a1, @"Failed to add column recipients.", @"Added column recipients.", @"ALTER TABLE message ADD COLUMN recipients BLOB");
  int v6 = sub_1AFC0E3FC(a1, @"Failed to add column hash.", @"Added column hash.", @"ALTER TABLE msg_group ADD COLUMN hash INTEGER");
  int v7 = v6 & sub_1AFC0E3FC(a1, @"Failed to add index hash_index.", @"Added index hash_index.", @"CREATE INDEX hash_index ON msg_group(hash)");
  int v8 = v5 & v7 & sub_1AFC0E3FC(a1, @"Failed to add column country.", @"Added column country.", @"ALTER TABLE group_member ADD COLUMN country TEXT");
  int v9 = sub_1AFC0E3FC(a1, @"Failed to add column content_id.", @"Added column content_id.", @"ALTER TABLE msg_pieces ADD COLUMN content_id TEXT;");
  int v10 = v9 & sub_1AFC0E3FC(a1, @"Failed to add column content_loc.", @"Added column content_loc.", @"ALTER TABLE msg_pieces ADD COLUMN content_loc TEXT;");
  return v8 & v10 & sub_1AFC0E3FC(a1, @"Failed to add column headers.", @"Added column headers.", @"ALTER TABLE msg_pieces ADD COLUMN headers BLOB;");
}

uint64_t sub_1AFC0EEC4(uint64_t a1)
{
  int v2 = sub_1AFC0E3FC(a1, @"Failed to add column madrid_attributedBody.", @"Added column madrid_attributedBody.", @"ALTER TABLE message ADD COLUMN madrid_attributedBody BLOB");
  int v3 = v2 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_handle.", @"Added column madrid_handle.", @"ALTER TABLE message ADD COLUMN madrid_handle TEXT");
  int v4 = sub_1AFC0E3FC(a1, @"Failed to add column madrid_version.", @"Added column madrid_version.", @"ALTER TABLE message ADD COLUMN madrid_version INTEGER");
  int v5 = v3 & v4 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_guid.", @"Added column madrid_guid.", @"ALTER TABLE message ADD COLUMN madrid_guid TEXT");
  int v6 = sub_1AFC0E3FC(a1, @"Failed to add column madrid_type.", @"Added column madrid_type.", @"ALTER TABLE message ADD COLUMN madrid_type INTEGER");
  int v7 = v6 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_roomname.", @"Added column madrid_roomname.", @"ALTER TABLE message ADD COLUMN madrid_roomname TEXT");
  int v8 = v5 & v7 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_service.", @"Added column madrid_service.", @"ALTER TABLE message ADD COLUMN madrid_service TEXT");
  int v9 = sub_1AFC0E3FC(a1, @"Failed to add column madrid_account.", @"Added column madrid_account.", @"ALTER TABLE message ADD COLUMN madrid_account TEXT");
  int v10 = v9 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_flags.", @"Added column madrid_flags.", @"ALTER TABLE message ADD COLUMN madrid_flags INTEGER");
  int v11 = v10 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_attachmentInfo.", @"Added column madrid_attachmentInfo.", @"ALTER TABLE message ADD COLUMN madrid_attachmentInfo BLOB;");
  int v12 = v8 & v11 & sub_1AFC0E3FC(a1, @"Failed to add column madrid_url.", @"Added column madrid_url.", @"ALTER TABLE message ADD COLUMN madrid_url TEXT");
  int v13 = sub_1AFC0E3FC(a1, @"Failed to add column madrid_error.", @"Added column madrid_error.", @"ALTER TABLE message ADD COLUMN madrid_error INTEGER");
  return v12 & v13 & sub_1AFC0E3FC(a1, @"Failed to add column is_madrid.", @"Added column is_madrid.", @"ALTER TABLE message ADD COLUMN is_madrid INTEGER;");
}

uint64_t sub_1AFC0F0CC(uint64_t a1)
{
  int v2 = sub_1AFC0E3FC(a1, @"Failed to add column read.", @"Added column read.", @"ALTER TABLE message ADD COLUMN read INTEGER");
  int v3 = v2 & sub_1AFC0E3FC(a1, @"Failed to update flags.", @"Updated flags.", @"UPDATE message SET read = ((flags >> 1) & 1)");
  return v3 & sub_1AFC0E3FC(a1, @"Failed to create index update message_groupid_read_index.", @"Created index message_groupid_read_index.", @"CREATE INDEX message_groupid_read_index ON message(group_id, read)");
}

uint64_t sub_1AFC0F154()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = IMLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Create tables...", (uint8_t *)v9, 2u);
  }
  CSDBRecordStoreCreateTablesForClass();
  CSDBRecordStoreCreateTablesForClass();
  CSDBRecordStoreCreateTablesForClass();
  uint64_t v1 = CSDBSqliteConnectionStatementForSQL();
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      int v2 = CSDBSqliteStatementPerform();
      CSDBSqliteStatementReset();
      if (v2 != 101)
      {
        if (v2)
        {
          int v8 = IMLogHandleForCategory();
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
            goto LABEL_10;
          }
          v9[0] = 67109120;
          v9[1] = v2;
          int v4 = "Failed to create table for handle. SQLiteError: %d";
          int v5 = v8;
          uint32_t v6 = 8;
          goto LABEL_9;
        }
      }
    }
  }
  int v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(v9[0]) = 0;
    int v4 = "Table for handle was created successfully.";
    int v5 = v3;
    uint32_t v6 = 2;
LABEL_9:
    _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, v4, (uint8_t *)v9, v6);
  }
LABEL_10:
  sub_1AFC0F320();
  sub_1AFC0F440();
  sub_1AFC0F560();
  return 1;
}

void sub_1AFC0F320()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0 || !*(void *)(v0 + 8) || (int v1 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v1 == 101) || !v1)
  {
    int v2 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO)) {
      return;
    }
    LOWORD(v7[0]) = 0;
    int v3 = "Join table for Message <--> Attachment was created successfully.";
    int v4 = v2;
    uint32_t v5 = 2;
    goto LABEL_7;
  }
  uint32_t v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v1;
    int v3 = "Failed to create join table for Message <--> Attachment. SQLiteError: %d";
    int v4 = v6;
    uint32_t v5 = 8;
LABEL_7:
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)v7, v5);
  }
}

void sub_1AFC0F440()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0 || !*(void *)(v0 + 8) || (int v1 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v1 == 101) || !v1)
  {
    int v2 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO)) {
      return;
    }
    LOWORD(v7[0]) = 0;
    int v3 = "Join table for Chat <--> Handle was created successfully.";
    int v4 = v2;
    uint32_t v5 = 2;
    goto LABEL_7;
  }
  uint32_t v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v1;
    int v3 = "Failed to create join table for Chat <--> Handle. SQLiteError: %d";
    int v4 = v6;
    uint32_t v5 = 8;
LABEL_7:
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)v7, v5);
  }
}

void sub_1AFC0F560()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0 || !*(void *)(v0 + 8) || (int v1 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v1 == 101) || !v1)
  {
    int v2 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO)) {
      return;
    }
    LOWORD(v7[0]) = 0;
    int v3 = "Join table for Chat <--> Message was created successfully.";
    int v4 = v2;
    uint32_t v5 = 2;
    goto LABEL_7;
  }
  uint32_t v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v1;
    int v3 = "Failed to create join table for Chat <--> Message. SQLiteError: %d";
    int v4 = v6;
    uint32_t v5 = 8;
LABEL_7:
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)v7, v5);
  }
}

uint64_t IMDLegacyMigrator(uint64_t *a1, unsigned int a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FBA8();
    }
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (!v5 && (int v7 = IMLogHandleForCategory(), os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)))
  {
    sub_1AFC6FB00();
    if (v6) {
      goto LABEL_9;
    }
  }
  else if (v6)
  {
    goto LABEL_9;
  }
  uint64_t v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6FA58();
  }
LABEL_9:
  if (a2 - 2 <= 2)
  {
    CSDBSqliteConnectionBeginTransactionType();
    int v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6F9C8(a2, v9);
    }
    goto LABEL_12;
  }
  uint64_t result = 1;
  if ((int)a2 < 5 || (int)a2 > 18017) {
    return result;
  }
  CSDBSqliteDatabaseRegisterFunctionForDB();
  CSDBSqliteConnectionBeginTransactionType();
  if (a2 == 5)
  {
    CSDBSqliteDatabaseSetVersion();
    int v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Updating DB to sort by ROWID instead of date.", (uint8_t *)&v112, 2u);
    }
    int v13 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed while dropping message_group_index.", @"Successfully dropped index message_group_index.", @"DROP INDEX message_group_index;");
    int v14 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed while creating message_group_index.", @"Created index message_group_index", @"CREATE INDEX message_group_index ON message(group_id, ROWID);");
    if (!v13 || !v14) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_25;
  }
  if (a2 <= 6)
  {
LABEL_25:
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_26;
  }
  if (a2 == 7)
  {
LABEL_26:
    CSDBSqliteDatabaseSetVersion();
    int v15 = sub_1AFC0E3FC(v6, @"Failed to create table msg_pieces.", @"Created table msg_pieces.", @"CREATE TABLE IF NOT EXISTS msg_pieces (ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, message_id INTEGER, data BLOB, part_id INTEGER, preview_part INTEGER, content_type TEXT, height INTEGER, version INTEGER, flags INTEGER, content_id TEXT, content_loc TEXT, headers BLOB);");
    int v16 = sub_1AFC0E3FC(v6, @"Failed to create index pieces_message_index.", @"Created index pieces_message_index.", @"CREATE INDEX pieces_message_index ON msg_pieces(message_id);");
    if (!v15 || !v16) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_29;
  }
  if (a2 <= 8)
  {
LABEL_29:
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0ED1C(v6)) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_31;
  }
  if (a2 == 10)
  {
    CSDBSqliteDatabaseSetVersion();
    if ((sub_1AFC0F0CC(v6) & 1) == 0) {
      goto LABEL_12;
    }
LABEL_32:
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_33;
  }
  if (a2 == 9)
  {
LABEL_31:
    CSDBSqliteDatabaseSetVersion();
    if ((sub_1AFC0F0CC(v6) & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
  if (a2 < 0xC)
  {
LABEL_33:
    uint64_t v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Updating DB to support madrid.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    int v18 = sub_1AFC0EEC4(v6);
    char v19 = sub_1AFC0E5A0(v6);
    if (!v18 || (v19 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
  if (a2 == 12)
  {
    long long v39 = IMLogHandleForCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v39, OS_LOG_TYPE_INFO, "Updating DB from version 12 to current.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    int v40 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed adding madrid_error column to message table.", @"Added madrid_error column.", @"ALTER TABLE message ADD COLUMN madrid_error INTEGER;");
    int v41 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed adding is_madrid column to message table.", @"Added column is_madrid", @"ALTER TABLE message ADD COLUMN is_madrid INTEGER;");
    char v42 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed creating index madrid_flags_index.", @"Added index madrid_flags_index.", @"CREATE INDEX madrid_flags_index ON message(madrid_flags);");
    if (!v40 || !v41 || (v42 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_37:
    CSDBSqliteDatabaseSetVersion();
LABEL_38:
    CSDBSqliteDatabaseSetVersion();
    __int16 v20 = IMLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "Updating DB from version 13 to current.", (uint8_t *)&v112, 2u);
    }
    int v21 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed adding column madrid_date_read.", @"Added column madrid_date_read.", @"ALTER TABLE message ADD COLUMN madrid_date_read INTEGER;");
    int v22 = sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed adding column madrid_date_delivered.", @"Added column madrid_date_delivered.", @"ALTER TABLE message ADD COLUMN madrid_date_delivered INTEGER;");
    if (!v21 || !v22) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_43;
  }
  if (a2 < 0xE) {
    goto LABEL_38;
  }
  if (a2 == 14)
  {
LABEL_43:
    id v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v23, OS_LOG_TYPE_INFO, "Updating DB from version 14 to current.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E93C(v6)) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_47;
  }
  if (a2 <= 0xF)
  {
LABEL_47:
    CSDBSqliteDatabaseSetVersion();
LABEL_48:
    uint64_t v24 = IMLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v24, OS_LOG_TYPE_INFO, "Adding index for group_id on group_member", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed adding index group_id_index", @"Added index group_id_index", @"CREATE INDEX group_id_index ON group_member(group_id);")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_52;
  }
  if (a2 == 16) {
    goto LABEL_48;
  }
  if (a2 <= 0x11)
  {
LABEL_52:
    int v25 = IMLogHandleForCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v25, OS_LOG_TYPE_INFO, "Adding support for Chats and Participants.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E988(v6)) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_56;
  }
  if (a2 == 18)
  {
LABEL_56:
    long long v26 = IMLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v26, OS_LOG_TYPE_INFO, "Ensuring sanity of is_madrid column.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed updating the values for is_madrid.", @"Updated values for is_madrid.", @"UPDATE message SET is_madrid = 0 WHERE is_madrid IS NULL;")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_60;
  }
  if (a2 <= 0x13)
  {
LABEL_60:
    uint64_t v27 = IMLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v27, OS_LOG_TYPE_INFO, "Cleaning message indices for iMessage.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E718(v6)) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_64;
  }
  if (a2 == 20)
  {
LABEL_64:
    __int16 v28 = IMLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v28, OS_LOG_TYPE_INFO, "Adding column for iMessage Account GUID", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E3FC(v6, @"MobileSMS DB Migration failed adding column madrid_account_guid.", @"Added column madrid_account_guid.", @"ALTER TABLE message ADD COLUMN madrid_account_guid TEXT;")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_68;
  }
  if (a2 <= 0x15)
  {
LABEL_68:
    uint64_t v29 = IMLogHandleForCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v29, OS_LOG_TYPE_INFO, "Moving old tables to *_legacy and adding tables for the new schema.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    int v30 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to rename group_member table.", @"Renamed group_member table.", @"ALTER TABLE group_member RENAME TO group_member_legacy;");
    int v31 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to rename madrid_attachment table.", @"Renamed madrid_attachment table.", @"ALTER TABLE madrid_attachment RENAME TO madrid_attachment_legacy;");
    int v32 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to rename madrid_chat table.", @"Renamed madrid_chat table.", @"ALTER TABLE madrid_chat RENAME TO madrid_chat_legacy;");
    int v33 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to rename group_member table.", @"Renamed message table.", @"ALTER TABLE message RENAME TO message_legacy;");
    int v34 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to rename msg_group table.", @"Renamed msg_group table.", @"ALTER TABLE msg_group RENAME TO msg_group_legacy;");
    int v35 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to rename msg_pieces table.", @"Renamed msg_pieces table.", @"ALTER TABLE msg_pieces RENAME TO msg_pieces_legacy;");
    sub_1AFC0F154();
    char v36 = _IMDSMSDatabaseMigrateData_21_22(v5, v6);
    if (!v30 || !v31 || !v32 || !v33 || !v34 || !v35 || (v36 & 1) == 0) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_78;
  }
  if (a2 == 22)
  {
LABEL_78:
    CSDBSqliteDatabaseSetVersion();
    int v37 = CSDBSqliteConnectionPerformSQL();
    if ((v37 - 100) >= 2 && v37)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column is_archived to the chat table.", @"Added is_archived column to the chat table.", @"ALTER TABLE chat ADD COLUMN is_archived DEFAULT 0"))goto LABEL_12; {
    }
      }
    else
    {
      long long v38 = IMLogHandleForCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v38, OS_LOG_TYPE_INFO, "The is_archived column already exists on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_141;
  }
  if (a2 <= 0x17)
  {
LABEL_141:
    CSDBSqliteDatabaseSetVersion();
    int v43 = CSDBSqliteConnectionPerformSQL();
    double v44 = IMLogHandleForCategory();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      int v112 = 67109120;
      int v113 = v43;
      _os_log_impl(&dword_1AFB53000, v44, OS_LOG_TYPE_INFO, "SQLite result was %d", (uint8_t *)&v112, 8u);
    }
    if (v43 != 101 && v43) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_146;
  }
  if (a2 == 24)
  {
LABEL_146:
    CSDBSqliteDatabaseSetVersion();
    int v45 = IMLogHandleForCategory();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v45, OS_LOG_TYPE_INFO, "Fixing missing text in group field", (uint8_t *)&v112, 2u);
    }
    if ((_IMDSMSDatabaseMigrateData_24_25() & 1) == 0) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_150;
  }
  if (a2 <= 0x19)
  {
LABEL_150:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_151;
  }
  if (a2 == 26)
  {
LABEL_151:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
LABEL_152:
    CSDBSqliteDatabaseSetVersion();
    int v46 = CSDBSqliteConnectionPerformSQL();
    if ((v46 - 100) >= 2 && v46)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column was_data_detected to the message table.", @"Added was_data_detected column to the message table.", @"ALTER TABLE message ADD COLUMN was_data_detected INTEGER DEFAULT 0"))goto LABEL_12; {
    }
      }
    else
    {
      uint64_t v47 = IMLogHandleForCategory();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v47, OS_LOG_TYPE_INFO, "The was_data_detected column already exists on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_158;
  }
  if (a2 <= 0x1B) {
    goto LABEL_152;
  }
  if (a2 == 28)
  {
LABEL_158:
    CSDBSqliteDatabaseSetVersion();
    int v48 = CSDBSqliteConnectionPerformSQL();
    int v49 = IMLogHandleForCategory();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      int v112 = 67109120;
      int v113 = v48;
      _os_log_impl(&dword_1AFB53000, v49, OS_LOG_TYPE_INFO, "SQLite result was %d", (uint8_t *)&v112, 8u);
    }
    if ((v48 - 100) >= 2 && v48)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column last_addressed_handle to the chat table.", @"Added last_addressed_handle column to the chat table.", @"ALTER TABLE chat ADD COLUMN last_addressed_handle TEXT"))goto LABEL_12; {
    }
      }
    else
    {
      uint64_t v50 = IMLogHandleForCategory();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v50, OS_LOG_TYPE_INFO, "The last_addressed_handle column already exists on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_166;
  }
  if (a2 <= 0x1D)
  {
LABEL_166:
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to delete V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP.", @"Dropped unneeded V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP.", @"DROP TABLE IF EXISTS V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP"))goto LABEL_12; {
    CSDBSqliteDatabaseSetVersion();
    }
    goto LABEL_168;
  }
  if (a2 == 30)
  {
LABEL_168:
    CSDBSqliteDatabaseSetVersion();
    int v51 = CSDBSqliteConnectionPerformSQL();
    if ((v51 - 100) >= 2 && v51)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column was_deduplicated to the message table.", @"Added was_deduplicated column to the message table.", @"ALTER TABLE message ADD COLUMN was_deduplicated INTEGER DEFAULT 0"))goto LABEL_12; {
    }
      }
    else
    {
      uint64_t v52 = IMLogHandleForCategory();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v52, OS_LOG_TYPE_INFO, "The was_deduplicated column already exists on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_174;
  }
  if (a2 <= 0x1F)
  {
LABEL_174:
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1AFC0EC74(v6, @"message_idx_is_read", @"CREATE INDEX message_idx_is_read ON message(is_read, is_from_me, is_finished);")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_176;
  }
  if (a2 == 32)
  {
LABEL_176:
    CSDBSqliteDatabaseSetVersion();
    int v53 = sub_1AFC0EC74(v6, @"message_idx_failed", @"CREATE INDEX message_idx_failed ON message(is_finished, is_from_me, error)");
    int v54 = sub_1AFC0EC74(v6, @"message_idx_handle", @"CREATE INDEX IF NOT EXISTS message_idx_handle ON message(handle_id, date);");
    int v55 = sub_1AFC0EC74(v6, @"chat_idx_identifier", @"CREATE INDEX IF NOT EXISTS chat_idx_identifier ON chat(chat_identifier)");
    int v56 = sub_1AFC0EC74(v6, @"chat_idx_room_name", @"CREATE INDEX IF NOT EXISTS chat_idx_room_name ON chat(room_name)");
    int v57 = sub_1AFC0EC74(v6, @"message_idx_was_downgraded", @"CREATE INDEX IF NOT EXISTS message_idx_was_downgraded ON message(was_downgraded);");
    int v58 = sub_1AFC0EC74(v6, @"chat_message_join_idx_message_id", @"CREATE INDEX IF NOT EXISTS chat_message_join_idx_message_date_id_chat_id ON chat_message_join(chat_id, message_date, message_id)");
    if (!v53 || !v54 || !v55 || !v56 || !v57 || !v58) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_183;
  }
  if (a2 <= 0x21)
  {
LABEL_183:
    CSDBSqliteDatabaseSetVersion();
    int v59 = sub_1AFC0EAFC(v6, @"madrid_attachment_legacy");
    int v60 = sub_1AFC0EAFC(v6, @"group_member_legacy");
    int v61 = sub_1AFC0EAFC(v6, @"madrid_chat_legacy");
    int v62 = sub_1AFC0EAFC(v6, @"message_legacy");
    int v63 = sub_1AFC0EAFC(v6, @"msg_group_legacy");
    int v64 = sub_1AFC0EAFC(v6, @"msg_pieces_legacy");
    if (!v59 || !v60 || !v61 || !v62 || !v63 || !v64) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_190;
  }
  if (a2 == 34)
  {
LABEL_190:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v65 = IMLogHandleForCategory();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v65, OS_LOG_TYPE_INFO, "Fixing busted chat identifiers for group chats", (uint8_t *)&v112, 2u);
    }
    if ((_IMDSMSDatabaseMigrateData_34_35() & 1) == 0) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_194;
  }
  if (a2 <= 0x23)
  {
LABEL_194:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v66 = IMLogHandleForCategory();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v66, OS_LOG_TYPE_INFO, "Adding attachment is_outgoing column", (uint8_t *)&v112, 2u);
    }
    int v67 = CSDBSqliteConnectionPerformSQL();
    if ((v67 - 100) >= 2 && v67)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column is_outgoing to the attachment table.", @"Added is_outgoing column to the attachment table.", @"ALTER TABLE attachment ADD COLUMN is_outgoing INTEGER DEFAULT 0"))goto LABEL_12; {
    }
      }
    else
    {
      int v68 = IMLogHandleForCategory();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v68, OS_LOG_TYPE_INFO, "The is_outgoing column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_202;
  }
  if (a2 == 36)
  {
LABEL_202:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_203;
  }
  if (a2 <= 0x25)
  {
LABEL_203:
    uint64_t v69 = IMLogHandleForCategory();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v69, OS_LOG_TYPE_INFO, "Fixing up uncanonicalized identifiers that had previously been incorrectly treated as canonicalized.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_206;
  }
  if (a2 == 38)
  {
LABEL_206:
    uint64_t v70 = IMLogHandleForCategory();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v70, OS_LOG_TYPE_INFO, "Fixing up uncanonicalized handle identifiers that failed to migrate due to conflicts.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if ((_IMDSMSDatabaseMigrateData_38_6100() & 1) == 0) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_210;
  }
  if (a2 <= 0x17D4)
  {
LABEL_210:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v71 = IMLogHandleForCategory();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v71, OS_LOG_TYPE_INFO, "Adding attachment user_info column", (uint8_t *)&v112, 2u);
    }
    int v72 = CSDBSqliteConnectionPerformSQL();
    if ((v72 - 100) >= 2 && v72)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column user_info to the attachment table.", @"Added user_info column to the attachment table.", @"ALTER TABLE attachment ADD COLUMN user_info BLOB"))goto LABEL_12; {
    }
      }
    else
    {
      uint64_t v73 = IMLogHandleForCategory();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v73, OS_LOG_TYPE_INFO, "The user_info column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_218;
  }
  if (a2 <= 0x1B58)
  {
LABEL_218:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v74 = IMLogHandleForCategory();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v74, OS_LOG_TYPE_INFO, "Adding attachment transfer_name column", (uint8_t *)&v112, 2u);
    }
    int v75 = CSDBSqliteConnectionPerformSQL();
    if ((v75 - 100) >= 2 && v75)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column transfer_name to the attachment table.", @"Added transfer_name column to the attachment table.", @"ALTER TABLE attachment ADD COLUMN transfer_name TEXT"))goto LABEL_12; {
    }
      }
    else
    {
      int v76 = IMLogHandleForCategory();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v76, OS_LOG_TYPE_INFO, "The transfer_name column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_226;
  }
  if (a2 == 7001)
  {
LABEL_226:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v77 = IMLogHandleForCategory();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v77, OS_LOG_TYPE_INFO, "Adding chat display_name column", (uint8_t *)&v112, 2u);
    }
    int v78 = CSDBSqliteConnectionPerformSQL();
    if ((v78 - 100) >= 2 && v78)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column display_name to the display_name table.", @"Added display_name column to the display_name table.", @"ALTER TABLE chat ADD COLUMN display_name TEXT"))goto LABEL_12; {
    }
      }
    else
    {
      CFStringRef v79 = IMLogHandleForCategory();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v79, OS_LOG_TYPE_INFO, "The display_name column already exists on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_234;
  }
  if (a2 >> 2 <= 0x6D6)
  {
LABEL_234:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v80 = IMLogHandleForCategory();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v80, OS_LOG_TYPE_INFO, "Adding attachment total_bytes column", (uint8_t *)&v112, 2u);
    }
    int v81 = CSDBSqliteConnectionPerformSQL();
    if ((v81 - 100) >= 2 && v81)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column total_bytes to the attachment table.", @"Added total_bytes column to the attachment table.", @"ALTER TABLE attachment ADD COLUMN total_bytes INTEGER DEFAULT -1"))goto LABEL_12; {
    }
      }
    else
    {
      uint64_t v82 = IMLogHandleForCategory();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v82, OS_LOG_TYPE_INFO, "The transfer_name column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_242;
  }
  if (a2 == 7004)
  {
LABEL_242:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v83 = IMLogHandleForCategory();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v83, OS_LOG_TYPE_INFO, "Purging orphaned messages", (uint8_t *)&v112, 2u);
    }
    if (!sub_1AFC0E3FC(v6, @"Purged orphaned messages failed :-(."), (uint64_t)CFSTR("Purged orphaned messages."), CFSTR("DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWint ID = cmj.message_id LIMIT 1) IS NULL;")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_246;
  }
  if (a2 >> 1 <= 0xDAE)
  {
LABEL_246:
    CSDBSqliteDatabaseSetVersion();
    int64_t v84 = IMLogHandleForCategory();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v84, OS_LOG_TYPE_INFO, "Purging orphaned messages", (uint8_t *)&v112, 2u);
    }
    if (!sub_1AFC0E3FC(v6, @"Purged orphaned messages failed :-(."), (uint64_t)CFSTR("Purged orphaned messages."), CFSTR("DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWint ID = cmj.message_id LIMIT 1) IS NULL;")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_250;
  }
  if (a2 == 7006)
  {
LABEL_250:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_251;
  }
  if (a2 <= 0x1F40)
  {
LABEL_251:
    CSDBSqliteDatabaseSetVersion();
    int64_t v85 = IMLogHandleForCategory();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v85, OS_LOG_TYPE_INFO, "Adding message is_audio_message, is_played, and date_played column", (uint8_t *)&v112, 2u);
    }
    int v86 = CSDBSqliteConnectionPerformSQL();
    if ((v86 - 100) >= 2 && v86)
    {
      int v88 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column is_audio_message to the message table.", @"Added is_audio_message column to the message table.", @"ALTER TABLE message ADD COLUMN is_audio_message INTEGER DEFAULT 0");
      int v89 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column is_played to the message table.", @"Added is_played column to the message table.", @"ALTER TABLE message ADD COLUMN is_played INTEGER DEFAULT 0");
      int v90 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column date_played to the message table.", @"Added date_played column to the message table.", @"ALTER TABLE message ADD COLUMN date_played INTEGER");
      if (!v88 || !v89 || !v90) {
        goto LABEL_12;
      }
    }
    else
    {
      int64_t v87 = IMLogHandleForCategory();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v87, OS_LOG_TYPE_INFO, "The is_audio_message, is_played, and date_played columns already exist on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_261;
  }
  if (a2 == 8001)
  {
LABEL_261:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v91 = IMLogHandleForCategory();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v91, OS_LOG_TYPE_INFO, "Purging orphaned messages - again", (uint8_t *)&v112, 2u);
    }
    if (!sub_1AFC0E3FC(v6, @"Purged orphaned messages failed :-(."), (uint64_t)CFSTR("Purged orphaned messages."), CFSTR("DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWint ID = cmj.message_id LIMIT 1) IS NULL;")) {
      goto LABEL_12;
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_265;
  }
  if (a2 <= 0x1F42)
  {
LABEL_265:
    CSDBSqliteDatabaseSetVersion();
    uint64_t v92 = IMLogHandleForCategory();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v92, OS_LOG_TYPE_INFO, "Adding message item_type, other_handle, group_title, group_action_type, share_status, share_direction", (uint8_t *)&v112, 2u);
    }
    int v93 = CSDBSqliteConnectionPerformSQL();
    if ((v93 - 100) >= 2 && v93)
    {
      int v95 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column item_type to the message table.", @"Added item_type column to the message table.", @"ALTER TABLE message ADD COLUMN item_type INTEGER DEFAULT 0");
      int v96 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column other_handle to the message table.", @"Added other_handle column to the message table.", @"ALTER TABLE message ADD COLUMN other_handle INTEGER DEFAULT -1");
      int v97 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column group_title to the message table.", @"Added group_title column to the message table.", @"ALTER TABLE message ADD COLUMN group_title TEXT");
      int v98 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column group_action_type to the message table.", @"Added group_action_type column to the message table.", @"ALTER TABLE message ADD COLUMN group_action_type INTEGER DEFAULT 0");
      int v99 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column share_status to the message table.", @"Added share_status column to the message table.", @"ALTER TABLE message ADD COLUMN share_status INTEGER");
      int v100 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column share_direction to the message table.", @"Added share_direction column to the message table.", @"ALTER TABLE message ADD COLUMN share_direction INTEGER");
      if (!v95 || !v96 || !v97 || !v98 || !v99 || !v100) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v94 = IMLogHandleForCategory();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v94, OS_LOG_TYPE_INFO, "The item_type, other_handle, group_title, group_action_type, share_status, share_direction columns already exist on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    int v101 = CSDBSqliteConnectionPerformSQL();
    if ((v101 - 100) >= 2 && v101)
    {
      if (!sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column group_id to the chat table.", @"Added group_id column to the chat table.", @"ALTER TABLE chat ADD COLUMN group_id TEXT"))goto LABEL_12; {
    }
      }
    else
    {
      int64_t v102 = IMLogHandleForCategory();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v102, OS_LOG_TYPE_INFO, "The group_id columns already exist on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_283;
  }
  if (a2 >> 1 <= 0xFA2)
  {
LABEL_283:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_284;
  }
  if (a2 == 8006)
  {
LABEL_284:
    CSDBSqliteDatabaseSetVersion();
    int v103 = IMLogHandleForCategory();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v103, OS_LOG_TYPE_INFO, "Adding message is_expirable, expire_state, and message_action_type column", (uint8_t *)&v112, 2u);
    }
    int v104 = CSDBSqliteConnectionPerformSQL();
    if ((v104 - 100) >= 2 && v104)
    {
      int v106 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column is_expirable to the message table.", @"Added is_expirable column to the message table.", @"ALTER TABLE message ADD COLUMN is_expirable INTEGER DEFAULT 0");
      int v107 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column expire_state to the message table.", @"Added expire_state column to the message table.", @"ALTER TABLE message ADD COLUMN expire_state INTEGER DEFAULT 0");
      int v108 = sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column message_action_type to the message table.", @"Added message_action_type column to the message table.", @"ALTER TABLE message ADD COLUMN message_action_type INTEGER DEFAULT 0");
      if (!v106 || !v107 || !v108) {
        goto LABEL_12;
      }
    }
    else
    {
      int v105 = IMLogHandleForCategory();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1AFB53000, v105, OS_LOG_TYPE_INFO, "The is_expirable, expire_state, and message_action_type columns already exist on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_294;
  }
  if (a2 >> 3 > 0x3E8)
  {
    if (a2 != 8008) {
      return 1;
    }
    goto LABEL_302;
  }
LABEL_294:
  CSDBSqliteDatabaseSetVersion();
  uint64_t v109 = IMLogHandleForCategory();
  if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
  {
    LOWORD(v112) = 0;
    _os_log_impl(&dword_1AFB53000, v109, OS_LOG_TYPE_INFO, "Adding message message_source column", (uint8_t *)&v112, 2u);
  }
  int v110 = CSDBSqliteConnectionPerformSQL();
  if ((v110 - 100) < 2 || !v110)
  {
    uint64_t v111 = IMLogHandleForCategory();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1AFB53000, v111, OS_LOG_TYPE_INFO, "The message_source column already exists on message, skipping this step.", (uint8_t *)&v112, 2u);
    }
    goto LABEL_301;
  }
  if (sub_1AFC0E3FC(v6, @"MobileSMS DB migration failed to add column message_source to the message table.", @"Added message_source column to the message table.", @"ALTER TABLE message ADD COLUMN message_source INTEGER DEFAULT 0"))
  {
LABEL_301:
    CSDBSqliteDatabaseSetVersion();
LABEL_302:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    return 1;
  }
LABEL_12:
  uint64_t v10 = IMLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6F94C(v5, v10);
  }
  CSDBSqliteConnectionCommit();
  IMDPersistenceSubmitEvent(@"com.apple.MobileSMS.Migration.Migration_Failure");
  return 0;
}

BOOL IMDMigrateTo8200(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"is_filtered", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo9002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"successful_query", @"INTEGER DEFAULT 1");
}

BOOL IMDMigrateTo10000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"associated_message_guid", @"STRING DEFAULT NULL");
}

BOOL IMDMigrateTo10001(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"balloon_bundle_id", @"STRING DEFAULT NULL");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"payload_data", @"BLOB");
  }
  return result;
}

BOOL IMDMigrateTo10002(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"is_sticker", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"sticker_user_info", @"BLOB");
  }
  return result;
}

BOOL IMDMigrateTo10004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"associated_message_type", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo10005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"expressive_send_style_id", @"STRING DEFAULT NULL");
}

BOOL IMDMigrateTo10007(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"associated_message_range_location", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"associated_message_range_length", @"INTEGER DEFAULT 0");
  }
  return result;
}

BOOL IMDMigrateTo10008(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"time_expressive_send_played", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo10010(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"message_summary_info", @"BLOB DEFAULT NULL");
}

BOOL IMDMigrateTo10011(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"attribution_info", @"BLOB");
}

BOOL IMDMigrateTo10012(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"hide_attachment", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo10013(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE message SET message_summary_info = NULL WHERE message_summary_info IS NOT NULL;",
           0);
}

BOOL IMDMigrateTo11000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"engram_id", @"TEXT");
}

BOOL IMDMigrateTo11001(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"server_change_token", @"TEXT");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"ck_sync_state", @"INTEGER DEFAULT 0");
  }
  return result;
}

BOOL IMDMigrateTo11002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"last_read_message_timestamp", @"INTEGER DEFAULT 0");
}

uint64_t IMDMigrateTo11003()
{
  return 1;
}

uint64_t IMDMigrateTo11004()
{
  return 1;
}

BOOL IMDMigrateTo11005(uint64_t a1)
{
  if (!IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"ck_sync_state", @"INTEGER DEFAULT 0")|| !IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"ck_record_id", @"TEXT DEFAULT NULL"))
  {
    return 0;
  }
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"ck_record_change_tag", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo11006(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"ck_sync_state", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"ck_server_change_token_blob", @"BLOB DEFAULT NULL");
  }
  return result;
}

uint64_t IMDMigrateTo11007()
{
  return 1;
}

uint64_t IMDMigrateTo11008()
{
  return 1;
}

BOOL IMDMigrateTo11009(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"original_group_id", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo11010(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"ck_record_id", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo11011(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat_message_join", @"message_date", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat_message_join SET message_date = (select m.date from message m where m.ROWint ID = message_id);",
             0);
  }
  return result;
}

BOOL IMDMigrateTo11012(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"original_guid", @"TEXT");
  if (result)
  {
    return IMDSqlOperationExecuteQuery(a1, @"update attachment set original_guid=guid;", 0);
  }
  return result;
}

BOOL IMDMigrateTo11013(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"destination_caller_id", @"TEXT DEFAULT NULL");
}

uint64_t IMDMigrateTo11014()
{
  return 1;
}

uint64_t IMDMigrateTo11015()
{
  return 1;
}

BOOL IMDMigrateTo11016(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE message SET date = date * 1000000000.0 WHERE date < 1000000000.0 ;",
           0);
}

uint64_t IMDMigrateTo11017()
{
  return 1;
}

uint64_t IMDMigrateTo11018()
{
  return 1;
}

uint64_t IMDMigrateTo11019()
{
  return 1;
}

BOOL IMDMigrateTo11020(uint64_t a1)
{
  BOOL v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"sr_server_change_token", @"TEXT");
  if (v2) {
    IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"sr_ck_sync_state", @"INTEGER DEFAULT 0");
  }
  return v2;
}

BOOL IMDMigrateTo11021(uint64_t a1)
{
  if (!IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"sr_ck_sync_state", @"INTEGER DEFAULT 0")|| !IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"sr_ck_record_id", @"TEXT DEFAULT NULL"))
  {
    return 0;
  }
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"sr_ck_record_change_tag", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo11022(uint64_t a1)
{
  if (!IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"sr_ck_record_id", @"TEXT DEFAULT NULL")|| !IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"sr_ck_sync_state", @"INTEGER DEFAULT 0"))
  {
    return 0;
  }
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"sr_ck_server_change_token_blob", @"BLOB DEFAULT NULL");
}

BOOL IMDMigrateTo11023(uint64_t a1)
{
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall")) {
    return 1;
  }
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET room_name = chat_identifier WHERE style = 43 AND room_name is null;",
           0);
}

BOOL IMDMigrateTo11024(uint64_t a1)
{
  BOOL v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"cloudkit_record_id", @"TEXT DEFAULT NULL")&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"sr_cloudkit_record_id", @"TEXT DEFAULT NULL");
  int v3 = IMDSqlOperationColumnExistsOnTableWithOperation(a1, @"chat", @"ck_record_system_property_blob");
  int v4 = IMDSqlOperationColumnExistsOnTableWithOperation(a1, @"chat", @"sr_ck_record_system_property_blob");
  if (!v2) {
    return 0;
  }
  if ((v3 | v4) != 1) {
    return 1;
  }
  uint64_t v5 = @"UPDATE chat SET ck_record_system_property_blob = NULL;";
  if ((v3 & v4) != 0) {
    uint64_t v5 = @"UPDATE chat SET ck_record_system_property_blob = NULL, sr_ck_record_system_property_blob = NULL;";
  }
  if (v3) {
    CFStringRef v6 = v5;
  }
  else {
    CFStringRef v6 = @"UPDATE chat SET sr_ck_record_system_property_blob = NULL;";
  }
  return IMDSqlOperationExecuteQuery(a1, v6, 0);
}

uint64_t IMDMigrateTo11025()
{
  return 1;
}

uint64_t IMDMigrateTo11026()
{
  return 1;
}

uint64_t IMDMigrateTo11027()
{
  return 1;
}

BOOL IMDMigrateTo12000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"handle", @"person_centric_id", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo12001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"handle", @"person_centric_id", @"TEXT DEFAULT NULL");
}

uint64_t IMDMigrateTo12002()
{
  return 1;
}

uint64_t IMDMigrateTo12003()
{
  return 1;
}

BOOL IMDMigrateTo12004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_corrupt", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo12005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"last_addressed_sim_id", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo13000(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"reply_to_guid", @"TEXT DEFAULT NULL");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"sort_id", @"INTEGER DEFAULT 0");
  }
  return result;
}

BOOL IMDMigrateTo13001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_spam", @"INTEGER DEFAULT 0");
}

uint64_t IMDMigrateTo13002()
{
  return 1;
}

uint64_t IMDMigrateTo13003()
{
  return 1;
}

uint64_t IMDMigrateTo13004()
{
  return 1;
}

BOOL IMDMigrateTo13500(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"is_blackholed", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo14000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"has_unseen_mention", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo14001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"thread_originator_guid", @"TEXT DEFAULT NULL");
}

uint64_t IMDMigrateTo14002()
{
  return 1;
}

BOOL IMDMigrateTo14003(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"thread_originator_part", @"TEXT DEFAULT NULL");
}

uint64_t IMDMigrateTo14004(uint64_t a1)
{
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, @"chat", @"is_filtered")) {
    IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET is_filtered = 1 WHERE is_filtered = 0 AND service_name = 'SMS';",
  }
      0);
  return 1;
}

uint64_t IMDMigrateTo14005()
{
  return 1;
}

BOOL IMDMigrateTo14006(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE message SET ck_sync_state=8 WHERE thread_originator_guid is not null and ck_sync_state=1", 0);
}

BOOL IMDMigrateTo15000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"syndication_ranges", @"TEXT DEFAULT NULL");
}

uint64_t IMDMigrateTo15001()
{
  return 1;
}

BOOL IMDMigrateTo15002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"is_commsafety_sensitive", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo15003(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"was_delivered_quietly", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"did_notify_recipient", @"INTEGER DEFAULT 0");
  }
  return result;
}

BOOL IMDMigrateTo15004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"synced_syndication_ranges", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo15005(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"syndication_date", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"syndication_type", @"INTEGER DEFAULT 0");
  }
  return result;
}

uint64_t IMDMigrateTo15007(uint64_t a1)
{
  IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET syndication_type = 0", 0);
  IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET syndication_date = 0", 0);
  return 1;
}

uint64_t IMDMigrateTo15008()
{
  return 1;
}

uint64_t IMDMigrateTo15009(uint64_t a1)
{
  if (!IMDSqlOperationExecuteQuery(a1, @"INSERT OR REPLACE INTO kvtable (key, value) VALUES ('lastFailedMessageDate', COALESCE((SELECT m.date FROM message m WHERE m.error != 0 AND m.is_from_me == 1 AND m.is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT 1), 0)), ('lastFailedMessageRowID', COALESCE((SELECT m.ROWID FROM message m WHERE m.error != 0 AND m.is_from_me == 1 AND m.is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT 1), 0));",
          0))
  {
    BOOL v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Failed to assign lastFailedMessageDate with query, attempting to set to zero instead", v4, 2u);
    }
    IMDSqlOperationExecuteQuery(a1, @"INSERT OR REPLACE INTO kvtable (key, value) VALUES ('lastFailedMessageDate', 0), ('lastFailedMessageRowID', 0);",
      0);
  }
  return 1;
}

uint64_t IMDMigrateTo15010(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFC122E0;
  v3[3] = &unk_1E5F90178;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDSqlOperationRunQuery(a1, @"select name from sqlite_master where sql LIKE '%_legacy%' and type = 'index';",
    0,
    (uint64_t)v3);
  if (*((unsigned char *)v5 + 24)) {
    IMDDropAllIndexesWithOperation(a1, 1);
  }
  _Block_object_dispose(&v4, 8);
  return 1;
}

void sub_1AFC122C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC122E0(uint64_t a1)
{
  Hasid Rows = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  int v3 = IMLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (HasRows)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Found an index referencing *_legacy!", buf, 2u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else if (v4)
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Did not find index referencing *_legacy!", v5, 2u);
  }
}

uint64_t IMDMigrateTo15011(uint64_t a1)
{
  BOOL v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Attempting to re-add iOS 6, 7 and 8 column additions", buf, 2u);
  }
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"item_type", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"other_handle", @"INTEGER DEFAULT -1");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"group_title", @"TEXT");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"group_action_type", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"share_status", @"INTEGER");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"share_direction", @"INTEGER");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_audio_message", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_played", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"date_played", @"INTEGER");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_expirable", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"expire_state", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"message_action_type", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"message_source", @"INTEGER DEFAULT 0");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"group_id", @"TEXT");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"display_name", @"TEXT");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"user_info", @"BLOB");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"transfer_name", @"BLOB");
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"total_bytes", @"INTEGER DEFAULT -1");
  int v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Finished re-adding iOS 6, 7 and 8 column additions", v5, 2u);
  }
  return 1;
}

BOOL IMDMigrateTo16000(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"date_retracted", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"date_edited", @"INTEGER DEFAULT 0");
  }
  return result;
}

uint64_t IMDMigrateTo16001()
{
  return 1;
}

BOOL IMDMigrateTo16002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat_recoverable_message_join", @"ck_sync_state", @"INTEGER DEFAULT 0");
}

uint64_t IMDMigrateTo16003()
{
  return 1;
}

BOOL IMDMigrateTo16004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"unsynced_removed_recoverable_messages", @"part_index", @"INTEGER");
}

BOOL IMDMigrateTo16005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"was_detonated", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo16006(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"part_count", @"INTEGER");
}

BOOL IMDMigrateTo16007(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET os_activity_scope_state_s state = 3 WHERE os_activity_scope_state_s state = 4", 0);
}

BOOL IMDMigrateTo16008(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFC12834;
  v3[3] = &unk_1E5F90178;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDSqlOperationRunQuery(a1, @"select name from sqlite_master where sql LIKE '%_legacy%';", 0, (uint64_t)v3);
  BOOL v1 = *((unsigned char *)v5 + 24) == 0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFC1281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC12834(uint64_t a1)
{
  Hasid Rows = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  int v3 = IMLogHandleForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (HasRows)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Found table referencing *_legacy!", buf, 2u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else if (v4)
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Did not find any table referencing *_legacy!", v5, 2u);
  }
}

BOOL IMDMigrateTo16100(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_stewie", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo16101(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"is_recovered", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo16102(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat_message_join SET message_date = (select m.date from message m where m.ROWint ID = message_id) where message_date = 0;",
           0);
}

uint64_t IMDMigrateTo16200(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)int v16 = a1;
  id Rows = _IMDSqlOperationGetRows(a1, @"SELECT ROWID, id FROM handle");
  IMCountryCodeForIncomingTextMessage();
  id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v2 = [Rows countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v20;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v20 != v4) {
          objc_enumerationMutation(Rows);
        }
        uint64_t v6 = *(void **)(*((void *)&v19 + 1) + 8 * v5);
        uint64_t v7 = objc_msgSend(v6, "objectForKeyedSubscript:", @"id", *(void *)v16);
        if (v7)
        {
          uint64_t v8 = v7;
          if (MEMORY[0x1B3E89A10]())
          {
            if (!IMCountryCodeForNumber())
            {
              uint64_t v9 = [v6 objectForKeyedSubscript:@"ROWID"];
              uint64_t v10 = (void *)IMInternationalForPhoneNumberWithOptions();
              if (v10)
              {
                int v11 = v10;
                if (([v10 isEqualToString:v8] & 1) == 0) {
                  [v18 setObject:v11 forKeyedSubscript:v9];
                }
              }
            }
          }
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v12 = [Rows countByEnumeratingWithState:&v19 objects:v25 count:16];
      uint64_t v3 = v12;
    }
    while (v12);
  }
  if (objc_msgSend(v18, "count", *(void *)v16))
  {
    updated = (__CFString *)IMDHandleCanonicalizedIDsBulkUpdateQuery(v18);
    int v14 = IMLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v24 = updated;
      _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "IMDMigrateTo16200 canonicalize handles with query: %@", buf, 0xCu);
    }
    IMDSqlOperationExecuteQuery(v17, updated, 0);
    if (updated) {
  }
    }
  if (Rows) {

  }
  if (v18) {
  return 1;
  }
}

BOOL IMDMigrateTo16300(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_kt_verified", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo16301(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET os_activity_scope_state_s state = 3 WHERE os_activity_scope_state_s state = 4 AND (style = 43 OR is_filtered = 0)", 0);
}

BOOL IMDMigrateTo16302(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET os_activity_scope_state_s state = 3 WHERE os_activity_scope_state_s state = 4 AND (style = 43 OR is_filtered = 0)", 0);
}

uint64_t IMDMigrateTo17000(uint64_t a1)
{
  BOOL v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_sos", @"INTEGER DEFAULT 0");
  return v2 & IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_critical", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo17001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"bia_reference_id", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo17002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_kt_verified", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo17003(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET os_activity_scope_state_s state = 3 WHERE os_activity_scope_state_s state = 4 AND (style = 43 OR is_filtered = 0)", 0);
}

BOOL IMDMigrateTo17005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"chat", @"is_deleting_incoming_messages", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo17006(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"fallback_hash", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo17008(uint64_t a1)
{
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall")) {
    return 1;
  }
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_scheduled", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo17010(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET service_name = substr(guid,1,instr(guid,\";\")-1)  WHERE service_name IS NULL OR service_name == \"\";",
           0);
}

uint64_t IMDMigrateTo17011()
{
  return 1;
}

uint64_t IMDMigrateTo17012(uint64_t a1)
{
  IMDSqlOperationExecuteQuery(a1, @"INSERT INTO deleted_messages (guid) SELECT guid FROM message WHERE error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join);",
    0);
  IMDSqlOperationExecuteQuery(a1, @"INSERT INTO sync_deleted_messages (guid, recordID) SELECT guid, ck_record_id FROM message WHERE error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join);",
    0);
  IMDSqlOperationExecuteQuery(a1, @"DELETE FROM message WHERE associated_message_guid IS NOT NULL AND LENGTH(SUBSTR(associated_message_guid, -36)) = 36 AND SUBSTR(associated_message_guid, -36) IN (SELECT guid FROM message WHERE associated_message_guid IS NULL AND error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join))", 0);
  IMDSqlOperationExecuteQuery(a1, @"DELETE FROM message WHERE error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join);",
    0);
  return 1;
}

uint64_t IMDMigrateTo17013()
{
  return 1;
}

uint64_t IMDMigrateTo17014()
{
  return 1;
}

BOOL IMDMigrateTo18000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"associated_message_emoji", @"TEXT DEFAULT NULL");
}

BOOL IMDMigrateTo18001(uint64_t a1)
{
  BOOL result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"is_pending_satellite_send", @"INTEGER DEFAULT 0");
  if (result)
  {
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"needs_relay", @"INTEGER DEFAULT 0");
  }
  return result;
}

BOOL IMDMigrateTo18002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"schedule_type", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo18004(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET service_name = substr(guid,1,instr(guid,\";\")-1)  WHERE service_name IS NULL OR service_name == \"\";",
           0);
}

BOOL IMDMigrateTo18005(uint64_t a1)
{
  if (!IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"schedule_state", @"INTEGER DEFAULT 0")|| !IMDSqlOperationExecuteQuery(a1, @"UPDATE message SET schedule_os_activity_scope_state_s state = 2 WHERE schedule_type = 2;", 0))
  {
    return 0;
  }
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE message SET schedule_os_activity_scope_state_s state = 3, schedule_type = 2 WHERE schedule_type = 10;",
           0);
}

uint64_t IMDMigrateTo18006(uint64_t a1)
{
  BOOL v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"emoji_image_content_identifier", @"TEXT DEFAULT NULL");
  return v2 & IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"emoji_image_short_description", @"TEXT DEFAULT NULL");
}

uint64_t IMDMigrateTo18007()
{
  return 1;
}

uint64_t IMDMigrateTo18008()
{
  return 1;
}

uint64_t IMDMigrateTo18009()
{
  return 1;
}

BOOL IMDMigrateTo18010(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"message", @"sent_or_received_off_grid", @"INTEGER DEFAULT 0");
}

BOOL IMDMigrateTo18011(uint64_t a1)
{
  BOOL v2 = IMDSqlOperationExecuteQuery(a1, @"DROP INDEX IF EXISTS message_idx_undelivered_one_to_one_imessage;", 0);
  IMDCreateIndexesWithOperation(a1, 1);
  return v2;
}

uint64_t IMDMigrateTo18012(uint64_t a1)
{
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, @"chat", @"is_filtered")) {
    IMDSqlOperationExecuteQuery(a1, @"UPDATE chat SET is_filtered = 1 WHERE is_filtered = 0;", 0);
  }
  return 1;
}

BOOL IMDMigrateTo18013(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, @"UPDATE attachment SET ck_sync_os_activity_scope_state_s state = 0 WHERE ck_sync_os_activity_scope_state_s state = 64 OR ck_sync_os_activity_scope_state_s state = 2;",
           0);
}

uint64_t IMDMigrateTo18014()
{
  return 1;
}

BOOL IMDMigrateTo18015(uint64_t a1)
{
  id v2 = [NSString alloc];
  uint64_t v3 = (__CFString *)objc_msgSend(v2, "initWithFormat:", @"UPDATE message SET is_read = 1, date_read = %lld WHERE (is_read == 0 AND is_finished == 1 AND is_from_me == 0 AND item_type == 1 AND is_system_message == 0);",
                       objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "now"), "__im_nanosecondTimeInterval"));
  BOOL v4 = IMDSqlOperationExecuteQuery(a1, v3, 0);

  return v4;
}

uint64_t IMDMigrateTo18016()
{
  return 1;
}

BOOL IMDMigrateTo18017(uint64_t a1)
{
  BOOL v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, @"attachment", @"preview_generation_state", @"INTEGER DEFAULT 0");
  if (v2) {
    IMDSqlOperationExecuteQuery(a1, @"UPDATE attachment SET preview_generation_os_activity_scope_state_s state = 3;", 0);
  }
  return v2;
}

uint64_t sub_1AFC1311C()
{
  return MEMORY[0x1F4181798](&stru_1F084E970, sel_stringByPaddingToLength_withString_startingAtIndex_);
}

uint64_t IMDMessageRecordAddMessageRecord(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFC13204;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFC131EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC13204(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    CSDBRecordStoreAddRecord();
    BOOL result = CSDBRecordSaveStore();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDMessageRecordCopyMessageRecord(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFC1330C;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFC132F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1330C(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageRecordUnlocked(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1AFC13410;
  v3[3] = &unk_1E5F8FE88;
  void v3[4] = &v4;
  void v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFC133F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC13410(uint64_t a1)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v9 = a1;
      __int16 v10 = 2112;
      uint64_t v11 = a2;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@", buf, 0x16u);
    }
  }
  if (a1)
  {
    if (a2)
    {
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3221225472;
        _DWORD v7[2] = sub_1AFC13654;
        void v7[3] = &unk_1E5F92998;
        void v7[4] = a1;
        void v7[5] = a2;
        _IMDPerformLockedStatementBlockWithQuery(@"DELETE FROM message_attachment_join WHERE   ROWID IN(    SELECT       j.ROWID     FROM       message_attachment_join j     INNER JOIN message m ON j.message_id = m.ROWID     INNER JOIN attachment a ON j.attachment_id = a.ROWID     WHERE       m.guid = ?       AND a.guid = ?  ) ", (uint64_t)v7);
      }
      else
      {
        __syncXPCIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(0, a1, a2);
      }
      return;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v6 = "Cannot unassociate attachment with empty attachment GUID";
LABEL_15:
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, v6, buf, 2u);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v6 = "Cannot unassociate attachment from empty message GUID";
      goto LABEL_15;
    }
  }
}

void sub_1AFC13654()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  int v0 = CSDBSqliteStatementPerform();
  if (v0 != 101)
  {
    int v1 = v0;
    if (IMOSLoggingEnabled())
    {
      BOOL v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3[0] = 67109120;
        v3[1] = v1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordAddMessageIfNeeded", (uint8_t *)v3, 8u);
      }
    }
  }
}

void IMDMessageRecordDeleteOrphanedMessages()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    _IMDPerformLockedStatementBlockWithQuery(@"DELETE FROM message WHERE message.ROWID NOT IN (SELECT message_id from chat_message_join);",
      (uint64_t)&unk_1F084CF80);
    uint64_t v0 = IMDMessageRecordCountChangesUnlocked();
    if (IMOSLoggingEnabled())
    {
      int v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        int v3 = 134217984;
        uint64_t v4 = v0;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Deleted %llu orphaned messages", (uint8_t *)&v3, 0xCu);
      }
    }
    BOOL v2 = (void *)[MEMORY[0x1E4F6E890] sharedInstance];
    objc_msgSend(v2, "trackDeleteMessages:sourceType:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v0), 6);
  }
  else
  {
    __syncXPCIMDMessageRecordDeleteOrphanedMessages_IPCAction(0);
  }
}

void sub_1AFC138CC()
{
  uint64_t v0 = IMLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v1 = 0;
    _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Orphaned messages cleanup complete", v1, 2u);
  }
}

uint64_t IMDMessageRecordCountChangesUnlocked()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_1AFC1E3D4;
  v2[3] = &unk_1E5F8FF50;
  void v2[4] = &v3;
  _IMDPerformLockedStatementBlockWithQuery(@"SELECT changes();", (uint64_t)v2);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1AFC139E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFC13B7C;
    v5[3] = &unk_1E5F90128;
    void v5[4] = a2;
    void v5[5] = a1;
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v7 = a1;
        __int16 v8 = 2112;
        uint64_t v9 = a2;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@", buf, 0x16u);
      }
    }
    _IMDPerformBlock((uint64_t)v5);
  }
  else
  {
    __syncXPCIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(0, a1, a2);
  }
}

void sub_1AFC13B7C(uint64_t a1)
{
  CFStringRef v2 = *(const __CFString **)(a1 + 32);
  if (!v2 || !CFStringGetLength(v2))
  {
    if (!IMOSLoggingEnabled()) {
      return;
    }
    uint64_t v7 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      return;
    }
    __int16 v11 = 0;
    __int16 v8 = "Unable to associate message and attachment, empty attachment GUID.";
    uint64_t v9 = (uint8_t *)&v11;
LABEL_14:
    _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, v8, v9, 2u);
    return;
  }
  CFStringRef v3 = *(const __CFString **)(a1 + 40);
  if (!v3 || !CFStringGetLength(v3))
  {
    if (!IMOSLoggingEnabled()) {
      return;
    }
    uint64_t v7 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      return;
    }
    __int16 v10 = 0;
    __int16 v8 = "Unable to associate message and attachment, empty message GUID.";
    uint64_t v9 = (uint8_t *)&v10;
    goto LABEL_14;
  }
  CFStringRef v4 = IMDAttachmentRecordCopyAttachmentForGUIDUnlocked(*(CFStringRef *)(a1 + 32));
  CFStringRef v5 = IMDMessageRecordCopyMessageForGUIDUnlocked(*(const __CFString **)(a1 + 40));
  CFStringRef v6 = v5;
  if (v4 && v5)
  {
    IMDMessageRecordAddAttachmentIfNeededUnlocked((uint64_t)v5, (uint64_t)v4);
  }
  else if (!v5)
  {
    goto LABEL_17;
  }
  CFRelease(v6);
LABEL_17:
  if (v4)
  {
    CFRelease(v4);
  }
}

CFStringRef IMDMessageRecordCopyMessageForGUIDUnlocked(const __CFString *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageForGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v6 = 0x2020000000;
      uint64_t v7 = 0;
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      v4[2] = sub_1AFC168BC;
      v4[3] = &unk_1E5F900E0;
      void v4[4] = &buf;
      void v4[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE guid = ? ORDER BY message.ROWID ASC;",
        (uint64_t)v4);
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1AFC13E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef IMDMessageRecordCopyMessagesForAssociatedGUID(const __CFString *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesForAssociatedGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v7 = 0x2020000000;
      uint64_t v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        void v5[2] = sub_1AFC14078;
        v5[3] = &unk_1E5F900E0;
        void v5[4] = &buf;
        void v5[5] = a1;
        _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE associated_message_guid = ? ORDER BY message.ROWID ASC;",
          (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1AFC141B0;
        v4[3] = (void (*)(void))&unk_1E5F8D580;
        void v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1AFC14034(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC14078(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        CFArrayGetValueAtIndex(v3, v6);
        int ID = CSDBRecordGetID();
        __int16 v10 = IMDMessageRecordCreateFromRecordIDUnlocked((uint64_t)v7, ID);
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
        CFMutableArrayRef Mutable = *(CFMutableArrayRef *)(v11 + 24);
        if (!Mutable)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, v5, v8);
          uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
        }
        *(void *)(v11 + 24) = Mutable;
        if (v10)
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
          CFRelease(v10);
        }
        ++v6;
      }
      while (v5 != v6);
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC141B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC14244;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC14244(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFIndex v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    CFIndex v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

CFArrayRef IMDMessageRecordCopyMessagesForGUIDs(const __CFArray *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesForGUIDs [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFArrayGetCount(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v7 = 0x2020000000;
      uint64_t v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        void v5[2] = sub_1AFC144B8;
        v5[3] = &unk_1E5F9B800;
        void v5[4] = &buf;
        void v5[5] = a1;
        _IMDPerformLockedDatabaseBlock((uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1AFC14654;
        v4[3] = (void (*)(void))&unk_1E5F8D580;
        void v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyMessagesForGUIDs_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFArray **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1AFC144B8(uint64_t a1)
{
  int Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  CFArrayRef v3 = IMDMessageRecordCopyMessagesForGUIDsQuery(Count);
  if (!v3)
  {
    CFStringRef v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FC50();
    }
  }
  uint64_t v5 = CSDBSqliteDatabaseStatementForWriting();
  if (v5 && *(void *)(v5 + 8))
  {
    CSDBSqliteBindTextFromCFArrayOfCFStrings();
    CFArrayRef v6 = (const __CFArray *)CSDBRecordStoreProcessStatement();
    int v7 = CFArrayGetCount(v6);
    if (v7 >= 1)
    {
      CFIndex v8 = 0;
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex v10 = v7;
      uint64_t v11 = v7;
      uint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFArrayGetValueAtIndex(v6, v8);
        int ID = CSDBRecordGetID();
        int v14 = IMDMessageRecordCreateFromRecordIDUnlocked((uint64_t)v9, ID);
        int v15 = v14;
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          break;
        }
        if (v14) {
          goto LABEL_10;
        }
LABEL_11:
        if (v11 == ++v8) {
          goto LABEL_15;
        }
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(v9, v10, v12);
      if (!v15) {
        goto LABEL_11;
      }
LABEL_10:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v15);
      CFRelease(v15);
      goto LABEL_11;
    }
LABEL_15:
    CSDBSqliteStatementReset();
    if (v6) {
      CFRelease(v6);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC14654(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC146E8;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC146E8(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (void *)MEMORY[0x1B3E8A120]();
  CFArrayRef v6 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v6)
  {
    int v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

CFStringRef IMDMessageRecordCopyMessageForGUID(const __CFString *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageForGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v7 = 0x2020000000;
      uint64_t v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        void v5[2] = sub_1AFC14980;
        v5[3] = &unk_1E5F900E0;
        void v5[4] = &buf;
        void v5[5] = a1;
        _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE guid = ? ORDER BY message.ROWID ASC;",
          (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1AFC14A3C;
        v4[3] = (void (*)(void))&unk_1E5F8D580;
        void v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyMessageForGUID_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1AFC1493C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC14980(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1AFC14A3C(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyGUIDForMessage(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 138412290;
      uint64_t v5 = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyGUID [%@]", (uint8_t *)&v4, 0xCu);
    }
  }
  if (a1) {
    return IMDMessageRecordCopyGUID(*MEMORY[0x1E4F1CF80], a1);
  }
  else {
    return 0;
  }
}

CFStringRef IMDMessageRecordCopyLastReadMessageForChatIdentifier(const __CFString *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyLastReadMessageForChatGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v7 = 0x2020000000;
      uint64_t v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        void v5[2] = sub_1AFC14D50;
        v5[3] = &unk_1E5F900E0;
        void v5[4] = &buf;
        void v5[5] = a1;
        _IMDPerformLockedStatementBlockWithQuery(@"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join j ON m.ROWint ID = j.message_id INNER JOIN chat c ON c.ROWint ID = j.chat_id WHERE c.chat_identifier = ? AND m.is_read == 1 AND is_from_me == 0 AND is_finished == 1 ORDER BY m.date DESC LIMIT 1", (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1AFC14E0C;
        v4[3] = (void (*)(void))&unk_1E5F8D580;
        void v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1AFC14D0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC14D50(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1AFC14E0C(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyLastReceivedMessage()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1AFC14F70;
    v3[3] = &unk_1E5F8FF50;
    void v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message INNER JOIN chat_message_join AS cmj ON message.ROWint ID = cmj.message_id WHERE error == 0 AND is_from_me == 0 AND is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT 1;",
      (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v2[1] = (void (*)(void))3221225472;
    _DWORD v2[2] = (void (*)(void))sub_1AFC150AC;
    v2[3] = (void (*)(void))&unk_1E5F8D580;
    void v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordCopyLastReceivedMessage_IPCAction(v2);
  }
  uint64_t v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1AFC14F54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC14F70(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 138412290;
      CFArrayRef v6 = v2;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_DEBUG, "results from last received: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  if (v2)
  {
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v2, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v2);
  }
}

uint64_t sub_1AFC150AC(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyLastReceivedMessageLimit(int64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyLastReceivedMessageLimit with limit %lld", (uint8_t *)&buf, 0xCu);
  }
  if ((unint64_t)(a1 - 51) < 0xFFFFFFFFFFFFFFCELL) {
    return 0;
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v10 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1AFC1531C;
    v8[3] = &unk_1E5F900E0;
    void v8[4] = &buf;
    void v8[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message INNER JOIN chat_message_join AS cmj ON message.ROWint ID = cmj.message_id WHERE error == 0 AND is_from_me == 0 AND item_type == 0 AND is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT ?;",
      (uint64_t)v8);
  }
  else
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyLastReceivedMessageLimit syncXPC", v7, 2u);
    }
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC1541C;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&buf;
    __syncXPCIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(v6, a1);
  }
  uint64_t v3 = *(void *)(*((void *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v3;
}

void sub_1AFC152F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC1531C(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if ((int)CFArrayGetCount(v2) >= 1)
    {
      CFIndex v4 = 0;
      uint64_t v5 = *MEMORY[0x1E4F1CF80];
      do
      {
        CFArrayGetValueAtIndex(v3, v4);
        int ID = CSDBRecordGetID();
        uint64_t v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
        if (v7)
        {
          uint64_t v8 = v7;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
          CFRelease(v8);
        }
        ++v4;
      }
      while (v4 < (int)CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC1541C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC154B0;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC154B0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessageForRowID(int64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageForRowID [%lld]", (uint8_t *)&buf, 0xCu);
    }
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1AFC1570C;
    v6[3] = &unk_1E5F900E0;
    void v6[4] = &buf;
    void v6[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ROWint ID = ? ORDER BY message.ROWID ASC;",
      (uint64_t)v6);
  }
  else
  {
    v5[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v5[1] = (void (*)(void))3221225472;
    void v5[2] = (void (*)(void))sub_1AFC157C8;
    v5[3] = (void (*)(void))&unk_1E5F8D580;
    void v5[4] = (void (*)(void))&buf;
    __syncXPCIMDMessageRecordCopyMessageForRowID_IPCAction(v5, a1);
  }
  uint64_t v3 = *(void *)(*((void *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v3;
}

void sub_1AFC156D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC1570C(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1AFC157C8(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessagesForRowIDs(const __CFArray *a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1 && CFArrayGetCount(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      int Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v3 = 0;
        if (Count <= 1uLL) {
          uint64_t v4 = 1;
        }
        else {
          uint64_t v4 = Count;
        }
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v3);
          int64_t valuePtr = -1;
          if (ValueAtIndex)
          {
            CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr);
            if (valuePtr != -1)
            {
              CFArrayRef v6 = (const void *)IMDMessageRecordCopyMessageForRowID(valuePtr);
              if (v6)
              {
                CFArrayAppendValue((CFMutableArrayRef)v12[3], v6);
                CFRelease(v6);
              }
            }
          }
          ++v3;
        }
        while (v4 != v3);
      }
    }
    else
    {
      v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v9[1] = (void (*)(void))3221225472;
      _DWORD v9[2] = (void (*)(void))sub_1AFC159A0;
      v9[3] = (void (*)(void))&unk_1E5F8D580;
      void v9[4] = (void (*)(void))&v11;
      __syncXPCIMDMessageRecordCopyMessagesForRowIDs_IPCAction(v9, (uint64_t)a1);
    }
  }
  uint64_t v7 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1AFC15978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1AFC159A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC15A34;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC15A34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t IMDMessageRecordMaxMessageIDFromChatMessageJoin()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1AFC15BB4;
    v3[3] = &unk_1E5F8FF50;
    void v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT MAX(message_id) FROM chat_message_join", (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v2[1] = (void (*)(void))3221225472;
    _DWORD v2[2] = (void (*)(void))sub_1AFC15BF8;
    v2[3] = (void (*)(void))&unk_1E5F8D580;
    void v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(v2);
  }
  uint64_t v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1AFC15B98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC15BB4(uint64_t a1)
{
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1AFC15BF8(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessagesFromRowIDDescLimit(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1 && a2 && IMDIsRunningInDatabaseServerProcess())
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = sub_1AFC15D44;
    v6[3] = &unk_1E5F90108;
    void v6[5] = a1;
    void v6[6] = a2;
    void v6[4] = &v7;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ROWID IN (SELECT message_id FROM chat_message_join WHERE message_id < ?) AND item_type = 0 ORDER BY ROWID DESC LIMIT ?", (uint64_t)v6);
  }
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1AFC15D28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC15D44(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFArrayRef v3 = v2;
    if ((int)CFArrayGetCount(v2) >= 1)
    {
      CFIndex v4 = 0;
      uint64_t v5 = *MEMORY[0x1E4F1CF80];
      do
      {
        CFArrayGetValueAtIndex(v3, v4);
        int ID = CSDBRecordGetID();
        uint64_t v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
        if (v7)
        {
          uint64_t v8 = v7;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
          CFRelease(v8);
        }
        ++v4;
      }
      while (v4 < (int)CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

void _IMDMessageRecordComputeNewMessagesForKnownRowIDs(const __CFArray *a1, uint64_t a2, __CFDictionary *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFSetRef v8 = (const __CFSet *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithArray:a2];
  uint64_t v9 = CFSetCreateMutable(v6, 0, MEMORY[0x1E4F1D548]);
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count << 32 >= 1)
    {
      CFIndex v11 = 0;
      uint64_t v12 = (int)Count;
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v11);
        uint64_t valuePtr = 0;
        uint64_t valuePtr = IMDMessageRecordGetIdentifier((uint64_t)ValueAtIndex);
        CFSetAddValue(v9, (const void *)[MEMORY[0x1E4F28ED0] numberWithLongLong:valuePtr]);
        CFNumberRef v14 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        if (!v8 || !CFSetContainsValue(v8, v14)) {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
        if (v14) {
          CFRelease(v14);
        }
        ++v11;
      }
      while (v12 != v11);
    }
  }
  CFDictionarySetValue(a3, @"newMessages", Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8)
  {
    [(__CFSet *)v8 minusSet:v9];
    CFDictionarySetValue(a3, @"readMessageIDs", (const void *)[(__CFSet *)v8 allObjects]);
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t IMDMessageRecordCopyNewMessagesForKnownRowIDs(void *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  CFMutableDictionaryRef Mutable = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFArrayRef v2 = (const __CFArray *)IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID(-1, 0);
    _IMDMessageRecordComputeNewMessagesForKnownRowIDs(v2, (uint64_t)a1, (__CFDictionary *)v9[3]);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t valuePtr = IMDMessageRecordLastFailedMessageDate();
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (v3)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v9[3], @"lastFailedDate", v3);
      CFRelease(v3);
    }
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC16580;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(v6, a1);
  }
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1AFC16154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID(int64_t a1, int64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t MessagesSequenceNumber = IMDMessageRecordGetMessagesSequenceNumber();
    if ((a2 & ~(a2 >> 63)) <= MessagesSequenceNumber)
    {
      if (IMOSLoggingEnabled())
      {
        CFAllocatorRef v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134218240;
          uint64_t v21 = a1;
          __int16 v22 = 2048;
          uint64_t v23 = a2 & ~(a2 >> 63);
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID limit: %lld  rowID: %lld", buf, 0x16u);
        }
      }
      uint64_t v7 = @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.date DESC, m.ROWID DESC LIMIT ?;";
      v13[0] = MEMORY[0x1E4F143A8];
      if (a2 > 0) {
        uint64_t v7 = @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.ROWID > ?  AND m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.date DESC, m.ROWID DESC LIMIT ?;";
      }
      uint64_t v8 = @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.ROWID DESC;";
      v13[1] = 3221225472;
      v13[2] = sub_1AFC20E10;
      v13[3] = &unk_1E5F9BD20;
      BOOL v14 = a2 > 0;
      if (a2 > 0) {
        uint64_t v8 = @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.ROWID > ?  AND m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.ROWID DESC;";
      }
      if (a1 <= 0) {
        uint64_t v9 = (uint64_t)v8;
      }
      else {
        uint64_t v9 = (uint64_t)v7;
      }
      BOOL v15 = a1 > 0;
      v13[5] = a2 & ~(a2 >> 63);
      void v13[6] = a1;
      void v13[4] = &v16;
      _IMDPerformLockedStatementBlockWithQuery(v9, (uint64_t)v13);
    }
    else
    {
      uint64_t v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v21 = a2 & ~(a2 >> 63);
        __int16 v22 = 2048;
        uint64_t v23 = MessagesSequenceNumber;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "The RowID is out of bounds.  We were asked for rows after [%lld] which exceeds the current sequence number [%lld]", buf, 0x16u);
      }
    }
  }
  else
  {
    v12[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v12[1] = (void (*)(void))3221225472;
    _OWORD v12[2] = (void (*)(void))sub_1AFC2107C;
    v12[3] = (void (*)(void))&unk_1E5F8D580;
    void v12[4] = (void (*)(void))&v16;
    __syncXPCIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(v12, a1, a2);
  }
  uint64_t v10 = v17[3];
  _Block_object_dispose(&v16, 8);
  return v10;
}

uint64_t IMDMessageRecordLastFailedMessageDate()
{
  uint64_t v5 = 0;
  CFAllocatorRef v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v0 = +[IMDDatabase synchronousDatabase];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1AFC1F384;
    v4[3] = &unk_1E5F96448;
    void v4[4] = &v5;
    [(IMDRemoteDatabaseProtocol *)v0 fetchInteger64ForKey:@"lastFailedMessageDate" completionHandler:v4];
  }
  else
  {
    v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v3[1] = (void (*)(void))3221225472;
    _DWORD v3[2] = (void (*)(void))sub_1AFC1F394;
    v3[3] = (void (*)(void))&unk_1E5F8D580;
    void v3[4] = (void (*)(void))&v5;
    __syncXPCIMDMessageRecordLastFailedMessageDate_IPCAction(v3);
  }
  uint64_t v1 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_1AFC16568(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1AFC16580(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "dictionary_result");
  if (result)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFC16614;
    v5[3] = &unk_1E5F9B850;
    uint64_t v4 = *(void *)(a1 + 32);
    void v5[4] = result;
    void v5[5] = v4;
    return (xpc_object_t)xpc_dictionary_apply(result, v5);
  }
  return result;
}

uint64_t sub_1AFC16614(uint64_t a1, char *__s1, void *a3)
{
  if (!strcmp(__s1, "newMessages"))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC16808;
    applier[3] = &unk_1E5F93D30;
    applier[4] = Mutable;
    xpc_array_apply(a3, applier);
    uint64_t v10 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    CFIndex v11 = @"newMessages";
  }
  else
  {
    if (strcmp(__s1, "readMessageIDs"))
    {
      if (!strcmp(__s1, "lastFailedDate"))
      {
        int64_t int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), __s1);
        CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongLongType, &int64);
        if (v6)
        {
          CFNumberRef v7 = v6;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"lastFailedDate", v6);
          CFMutableArrayRef v8 = v7;
LABEL_10:
          CFRelease(v8);
          return 1;
        }
      }
      return 1;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFC16850;
    v14[3] = &unk_1E5F9B828;
    void v14[4] = a3;
    v14[5] = Mutable;
    xpc_array_apply(a3, v14);
    uint64_t v10 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    CFIndex v11 = @"readMessageIDs";
  }
  CFDictionarySetValue(v10, v11, Mutable);
  if (Mutable)
  {
    CFMutableArrayRef v8 = Mutable;
    goto LABEL_10;
  }
  return 1;
}

uint64_t sub_1AFC16808(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1AFC16850(uint64_t a1, size_t a2)
{
  int64_t valuePtr = xpc_array_get_int64(*(xpc_object_t *)(a1 + 32), a2);
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongLongType, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v3);
    CFRelease(v4);
  }
  return 1;
}

void sub_1AFC168BC(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      int ID = CSDBRecordGetID();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
    }
    CFRelease(v3);
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CFNumberRef v6 = 0;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessageForGUIDUnlocked failed to get results", v6, 2u);
    }
  }
}

BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1 <= 0)
  {
    long long v19 = xmmword_1E5F9B870;
    long long v20 = *(_OWORD *)off_1E5F9B880;
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"batchAmount > 0", "BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int, NSArray **, NSError **)", IMFileLocationTrimFileName(), 793, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    CFNumberRef v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      CFMutableArrayRef v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a2) {
    *a2 = 0;
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v19);
  IMDSqlOperationBeginTransaction(&v19);
  if (*((void *)&v29 + 1))
  {
    BOOL v9 = 0;
  }
  else
  {
    id v17 = 0;
    id v18 = 0;
    sub_1AFC16DBC((uint64_t)&v19, (uint64_t)&v18, (uint64_t)&v17, a1);
    BOOL v9 = 0;
    id v10 = v18;
    if (!*((void *)&v29 + 1) && v18)
    {
      if ([v18 count])
      {
        uint64_t v11 = [v17 count];
        if (v11 != [v18 count])
        {
          *(_OWORD *)long long buf = xmmword_1E5F9B898;
          long long v33 = *(_OWORD *)off_1E5F9B8A8;
          uint64_t v34 = 812;
          uint64_t v12 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"rowIDs.count == guids.count", "BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int, NSArray **, NSError **)", IMFileLocationTrimFileName(), 812, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
          uint64_t v13 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
          if (v13)
          {
            v13(v12);
          }
          else if (IMOSLoggingEnabled())
          {
            BOOL v14 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int v30 = 138412290;
              uint64_t v31 = v12;
              _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v30, 0xCu);
            }
          }
        }
        if ([v17 count])
        {
          unint64_t v15 = objc_msgSend((id)objc_msgSend(v17, "objectAtIndex:", 0), "unsignedLongLongValue");
          sub_1AFC16EF0((uint64_t)&v19, v15, objc_msgSend((id)objc_msgSend(v17, "objectAtIndex:", objc_msgSend(v17, "count") - 1), "unsignedLongLongValue"));
        }
        BOOL v9 = *((void *)&v29 + 1) == 0;
        if (a2 && !*((void *)&v29 + 1))
        {
          *a2 = v18;
          BOOL v9 = 1;
        }
      }
      else
      {
        BOOL v9 = 0;
      }
      id v10 = v18;
    }
    if (v10)
    {

      id v18 = 0;
    }
    if (v17) {
  }
    }
  IMDSqlOperationCommitOrRevertTransaction(&v19);
  IMDSqlOperationRelease((uint64_t)&v19, a3);
  return v9;
}

BOOL sub_1AFC16DBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a3)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (a2)
    {
LABEL_3:
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      goto LABEL_6;
    }
  }
  else
  {
    id v8 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  id v9 = 0;
LABEL_6:
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1AFC176E8;
  v13[3] = &unk_1E5F9B8E0;
  int v14 = a4;
  void v13[4] = a1;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_1AFC17700;
  v12[3] = &unk_1E5F9B930;
  if (a4) {
    CFStringRef v10 = @"SELECT * from deleted_messages ORDER BY ROWID ASC LIMIT ?;";
  }
  else {
    CFStringRef v10 = @"SELECT * from deleted_messages ORDER BY ROWID ASC;";
  }
  void v12[4] = v8;
  void v12[5] = v9;
  void v12[6] = a1;
  v12[7] = a2;
  v12[8] = a3;
  return _IMDSqlOperationRunQuery(a1, v10, (uint64_t)v13, (uint64_t)v12);
}

BOOL sub_1AFC16EF0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v15 = xmmword_1E5F9B950;
    long long v16 = *(_OWORD *)off_1E5F9B960;
    uint64_t v17 = 1021;
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"operation", "BOOL _IMDDeleteDeletedMessagesWithRangeOfRowIDs(IMDSqlOperation *, uint64_t, uint64_t)", IMFileLocationTrimFileName(), 1021, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    CFNumberRef v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v19 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a3 >= a2)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1AFC179D8;
    v14[3] = &unk_1E5F9B9A0;
    void v14[4] = a1;
    v14[5] = a2;
    void v14[6] = a3;
    BOOL v11 = _IMDSqlOperationRunQuery(a1, @"DELETE FROM deleted_messages where ROWID >= ? AND ROWID <= ?;",
            (uint64_t)v14,
            0);
    CFRelease(@"DELETE FROM deleted_messages where ROWID >= ? AND ROWID <= ?;");
  }
  else
  {
    long long v15 = xmmword_1E5F9B978;
    long long v16 = *(_OWORD *)off_1E5F9B988;
    uint64_t v9 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"lastRowID >= firstRowID", "BOOL _IMDDeleteDeletedMessagesWithRangeOfRowIDs(IMDSqlOperation *, uint64_t, uint64_t)", IMFileLocationTrimFileName(), 1022, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    CFStringRef v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v19 = v9;
        _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    return 0;
  }
  return v11;
}

void IMDMessageRecordDeleteMessagesForGUIDs(const __CFArray *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFNumberRef v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      CFArrayRef v10 = a1;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordDeleteMessagesForGUIDs %@", buf, 0xCu);
    }
  }
  if (a1 && CFArrayGetCount(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      CFIndex Count = CFArrayGetCount(a1);
      uint64_t v6 = IMDCreateQueryRemoveMessagesFromMessageTableWithMessageGuidCount(Count);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      void v8[2] = sub_1AFC173B0;
      v8[3] = &unk_1E5F9B8C0;
      void v8[4] = v6;
      void v8[5] = a1;
      void v8[6] = a2;
      IMDRunSqlOperation((uint64_t)v8);
      CFRelease(v6);
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
    }
    else
    {
      __syncXPCIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(0, (uint64_t)a1);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    CFNumberRef v7 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "IMDMessageRecordDeleteMessagesForGUIDs has no GUIDs to delete.", buf, 2u);
    }
  }
}

uint64_t sub_1AFC173B0(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1AFC17458;
  void v7[3] = &unk_1E5F90128;
  CFStringRef v4 = *(const __CFString **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  void v7[4] = a2;
  void v7[5] = v5;
  _IMDSqlOperationRunQuery(a2, v4, (uint64_t)v7, 0);
  if (!*(void *)(a2 + 168)) {
    IMDSqlOperationUpdateLastDeleteSequenceNumber(a2);
  }
  return IMDSqlOperationGetError(a2, *(void **)(a1 + 48));
}

void sub_1AFC17458(uint64_t a1)
{
}

void IMDSelectMessagesForDeletionAfterDaysWithQuery(uint64_t a1, const __CFString *a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_DEBUG, "IMDSelectMessagesForDeletionAfterDaysWithQuery %lld", buf, 0xCu);
    }
  }
  double v9 = sub_1AFC17644(a1);
  if (a3) {
    *a3 = 0;
  }
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)long long buf = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
  _IMDSqlOperationBeginQuery((uint64_t)buf, a2);
  IMDSqlStatementBindInt64((uint64_t)v15, (uint64_t)v9);
  id v10 = 0;
  while (IMDSqlOperationHasRows((uint64_t)buf))
  {
    IMDSqlOperationColumnByIndex((uint64_t)buf, 0, (uint64_t)v12);
    uint64_t v11 = IMDStringFromSqlColumn((uint64_t)v12);
    if (v11)
    {
      if (!v10) {
        id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      }
      [v10 addObject:v11];
      CFRelease(v11);
    }
  }
  IMDSqlOperationFinishQuery((uint64_t)buf);
  if (((a3 != 0) & IMDSqlOperationRelease((uint64_t)buf, a4)) == 1) {
    *a3 = v10;
  }
  if (v10) {
}
  }

double sub_1AFC17644(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v2 setDay:-a1];
  CFArrayRef v3 = (void *)[MEMORY[0x1E4F1C9A8] currentCalendar];
  CFStringRef v4 = objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v2, objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), 0);

  return (double)objc_msgSend(v4, "__im_nanosecondTimeInterval");
}

void IMDSelectAllMessagesForDeletionAfterDays(uint64_t a1, void *a2, void *a3)
{
  IMDSelectMessagesForDeletionAfterDaysWithQuery(a1, @"SELECT guid from message WHERE date >= 1000000000.0 AND date < ?;",
    a2,
    a3);
}

void IMDSelectMessagesForDeletionAfterDays(uint64_t a1, void *a2, void *a3)
{
  IMDSelectMessagesForDeletionAfterDaysWithQuery(a1, @"SELECT guid from message WHERE date >= 1000000000.0 AND date < ? LIMIT 100;",
    a2,
    a3);
}

void sub_1AFC176E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1) {
    IMDSqlStatementBindInt(*(void *)(a1 + 32) + 32, v1);
  }
}

void sub_1AFC17700(uint64_t a1)
{
  if (IMDSqlOperationHasRows(*(void *)(a1 + 48)))
  {
    uint64_t v2 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v14 = 0;
      long long v15 = &v14;
      uint64_t v16 = 0x2020000000;
      uint64_t v17 = -1;
      uint64_t v8 = 0;
      double v9 = &v8;
      uint64_t v10 = 0x3052000000;
      uint64_t v11 = sub_1AFC17920;
      uint64_t v12 = sub_1AFC17930;
      uint64_t v13 = 0;
      uint64_t v3 = *(void *)(a1 + 48);
      v4[0] = v2;
      v4[1] = 3221225472;
      v4[2] = sub_1AFC1793C;
      v4[3] = &unk_1E5F9B908;
      long long v5 = *(_OWORD *)(a1 + 32);
      uint64_t v6 = &v14;
      CFNumberRef v7 = &v8;
      IMDSqlOperationIterateRow(v3, (uint64_t)v4);
      if ([(id)v9[5] length] && (v15[3] & 0x8000000000000000) == 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:"));
        [*(id *)(a1 + 40) addObject:v9[5]];
      }
      _Block_object_dispose(&v8, 8);
      _Block_object_dispose(&v14, 8);
    }
    while (IMDSqlOperationHasRows(*(void *)(a1 + 48)));
  }
  if (!*(void *)(*(void *)(a1 + 48) + 168))
  {
    if (*(void *)(a1 + 56) && [*(id *)(a1 + 40) count]) {
      **(void **)(a1 + 56) = *(id *)(a1 + 40);
    }
    if (*(void *)(a1 + 64) && [*(id *)(a1 + 32) count]) {
      **(void **)(a1 + 64) = *(id *)(a1 + 32);
    }
  }
}

void sub_1AFC178FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC17920(uint64_t a1, uint64_t a2)
{
}

void sub_1AFC17930(uint64_t a1)
{
}

void *sub_1AFC1793C(void *result, long long *a2)
{
  uint64_t v2 = result;
  int v3 = *((_DWORD *)a2 + 4);
  if (v3 == 1)
  {
    if (result[5])
    {
      long long v5 = *a2;
      uint64_t v6 = *((void *)a2 + 2);
      CFStringRef v4 = IMDStringFromSqlColumn((uint64_t)&v5);
      xpc_object_t result = (id)CFMakeCollectable(v4);
      *(void *)(*(void *)(v2[7] + 8) + 40) = result;
    }
  }
  else if (!v3)
  {
    if (result[4])
    {
      long long v5 = *a2;
      uint64_t v6 = *((void *)a2 + 2);
      xpc_object_t result = (void *)IMDInt64FromSqlColumn((uint64_t)&v5);
      *(void *)(*(void *)(v2[6] + 8) + 24) = result;
    }
  }
  return result;
}

void sub_1AFC179D8(void *a1)
{
  IMDSqlStatementBindInt64(a1[4] + 32, a1[5]);
  uint64_t v2 = a1[4] + 32;
  sqlite3_int64 v3 = a1[6];
  IMDSqlStatementBindInt64(v2, v3);
}

BOOL IMDSelectDeletedMessages(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC17A94;
  v5[3] = &unk_1E5F9B9C0;
  void v5[4] = a1;
  void v5[5] = a2;
  int v6 = a3;
  void v5[6] = a4;
  return IMDRunSqlOperation((uint64_t)v5);
}

uint64_t sub_1AFC17A94(uint64_t a1, uint64_t a2)
{
  sub_1AFC16DBC(a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(_DWORD *)(a1 + 56));
  CFStringRef v4 = *(void **)(a1 + 48);
  return IMDSqlOperationGetError(a2, v4);
}

void IMDMessageRecordDeleteMessagesOlderThanDays(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(v10[0]) = 134217984;
    *(void *)((char *)v10 + 4) = a1;
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordDeleteMessagesOlderThanDays %lld", (uint8_t *)v10, 0xCu);
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    double v5 = sub_1AFC17644(a1);
    int v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v10[0]) = 134217984;
      *(double *)((char *)v10 + 4) = v5;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordDeleteMessagesOlderThanDays interval is %f", (uint8_t *)v10, 0xCu);
    }
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v10);
    _IMDSqlOperationBeginQuery((uint64_t)v10, @"DELETE from message WHERE date >= 1000000000.0  AND date < ?  AND NOT (group_action_type IN (1,3) AND (ROWID IN (SELECT message_id FROM message_attachment_join)))  AND NOT (ROWID IN (SELECT message_id FROM chat_recoverable_message_join));");
    IMDSqlStatementBindInt64((uint64_t)v11, (uint64_t)v5);
    if (IMDSqlOperationFinishQuery((uint64_t)v10))
    {
      uint64_t v7 = IMDMessageRecordCountChangesUnlocked();
      uint64_t v8 = (void *)[MEMORY[0x1E4F6E890] sharedInstance];
      uint64_t v9 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v7];
      objc_msgSend(v8, "trackDeleteMessages:sourceType:", v9, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E890], "sharedInstance"), "keepMessagesSourceTypeForDays:", a1));
      IMDSqlOperationUpdateLastDeleteSequenceNumber((uint64_t)v10);
    }
    if (IMDSqlOperationRelease((uint64_t)v10, a2)) {
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
    }
  }
  else
  {
    __syncXPCIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(0, a1);
  }
}

uint64_t IMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit(CFStringRef theString, const __CFString *a2, int64_t a3)
{
  if (theString)
  {
    BOOL v6 = CFStringGetLength(theString) == 0;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v6 = 1;
    if (!a2) {
      goto LABEL_7;
    }
  }
  if (!v6 || CFStringGetLength(a2))
  {
LABEL_7:
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    uint64_t v15 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1AFC17E90;
      v11[3] = &unk_1E5F9B9E8;
      v11[6] = a2;
      v11[7] = a3;
      void v11[4] = &v12;
      void v11[5] = theString;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join j ON   m.ROWint ID = j.message_id INNER JOIN chat c ON   c.ROWint ID = j.chat_id WHERE   c.room_name = ?   AND c.service_name = ? ORDER BY   m.ROWID DESC LIMIT ?", (uint64_t)v11);
    }
    else
    {
      v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v10[1] = (void (*)(void))3221225472;
      _OWORD v10[2] = (void (*)(void))sub_1AFC17FDC;
      v10[3] = (void (*)(void))&unk_1E5F8D580;
      void v10[4] = (void (*)(void))&v12;
      __syncXPCIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(v10, (uint64_t)theString, (uint64_t)a2, a3);
    }
    uint64_t v7 = v13[3];
    _Block_object_dispose(&v12, 8);
    return v7;
  }
  uint64_t v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1AFC6FCF8();
  }
  return 0;
}

void sub_1AFC17E74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC17E90(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  uint64_t v2 = CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = (const __CFArray *)v2;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && (int)CFArrayGetCount(v3) >= 1)
    {
      CFIndex v5 = 0;
      do
      {
        CFArrayGetValueAtIndex(v3, v5);
        int ID = CSDBRecordGetID();
        uint64_t v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v4, ID);
        if (v7)
        {
          uint64_t v8 = v7;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
          CFRelease(v8);
        }
        ++v5;
      }
      while (v5 < (int)CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC17FDC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC18070;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC18070(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFIndex v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    BOOL v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesWithHandleIDLimit(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  BOOL v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC181C0;
  v4[3] = &unk_1E5F90108;
  void v4[5] = a1;
  void v4[6] = a2;
  void v4[4] = &v5;
  _IMDPerformLockedStatementBlockWithQuery(@"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id INNER JOIN chat c ON   c.ROWint ID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWint ID = ch.chat_id WHERE   ch.handle_id = ?   AND c.room_name IS NULL ORDER BY m.ROWID DESC LIMIT ?", (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1AFC181A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC181C0(uint64_t a1)
{
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  uint64_t result = CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyNewParticipantChangeItems()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewParticipantChangeItems", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  uint64_t v5 = buf;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1AFC18360;
  v3[3] = &unk_1E5F8FF50;
  void v3[4] = buf;
  _IMDPerformLockedStatementBlockWithQuery(@"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWint ID = cm.chat_id  WHERE m.is_read == 0  AND m.is_from_me == 0  AND m.item_type == 1  ORDER BY m.date DESC;",
    (uint64_t)v3);
  uint64_t v1 = *((void *)v5 + 3);
  _Block_object_dispose(buf, 8);
  return v1;
}

void sub_1AFC18360(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      CFIndex v5 = (int)Count;
      if (IMOSLoggingEnabled())
      {
        uint64_t v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v13 = 134217984;
          CFIndex v14 = v5;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewParticipantChangeItems got back %ld rows", (uint8_t *)&v13, 0xCu);
        }
      }
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, ID);
          if (v12)
          {
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
          }
          ++v9;
        }
        while (v10 != v9);
        [(__CFArray *)Mutable sortUsingComparator:&unk_1F084D658];
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
      }
    }
    CFRelease(v3);
  }
}

uint64_t sub_1AFC18514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Date = IMDMessageRecordGetDate(a2, 0);
  uint64_t Identifier = IMDMessageRecordGetDate(a3, 0);
  if (!Date || !Identifier || Date == Identifier)
  {
    uint64_t Date = IMDMessageRecordGetIdentifier(a2);
    uint64_t Identifier = IMDMessageRecordGetIdentifier(a3);
  }
  if (Date > Identifier) {
    return 1;
  }
  else {
    return -1;
  }
}

uint64_t IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesLimit(void *a1, void *a2, int a3, int64_t a4)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(a1, a2, 0, 0, a3, 0, a4);
}

uint64_t IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(void *a1, void *a2, uint64_t a3, const __CFString *a4, int a5, int a6, int64_t a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a3 && !a5)
  {
    uint64_t v9 = [a1 count];
    uint64_t v10 = [a2 count];
    uint64_t v11 = v10;
    id v36 = 0;
    id v37 = 0;
    if (a4)
    {
      CFIndex Length = CFStringGetLength(a4);
      if (v9 && v11 && v9 == v11)
      {
        if (Length >= 1)
        {
          IMMessageThreadIdentifierGetComponents();
          if ([v37 length])
          {
            BOOL v24 = [v36 length] != 0;
LABEL_17:
            uint64_t v32 = 0;
            long long v33 = &v32;
            uint64_t v34 = 0x2020000000;
            uint64_t v35 = 0;
            if (IMDIsRunningInDatabaseServerProcess())
            {
              CFIndex v14 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:a7];
              if (!v14)
              {
                uint64_t v15 = IMLogHandleForCategory();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                  sub_1AFC6FD2C([NSString stringWithFormat:&stru_1F084E970], v44);
                }
              }
              id v16 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
              [v16 startTimingForKey:@"sqlite-timing"];
              for (CFIndex i = 0; i != v9; ++i)
              {
                CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
                uint64_t v19 = IMLogHandleForCategory();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 134218498;
                  CFIndex v39 = i;
                  __int16 v40 = 2048;
                  uint64_t v41 = v9;
                  __int16 v42 = 2112;
                  int v43 = ValueAtIndex;
                  _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "history query %lu / %lu - %@", buf, 0x20u);
                }
                v29[0] = MEMORY[0x1E4F143A8];
                v29[1] = 3221225472;
                v29[2] = sub_1AFC18D20;
                v29[3] = &unk_1E5F9BA60;
                v29[8] = i;
                _OWORD v29[9] = v9;
                BOOL v30 = v24;
                char v31 = a6;
                v29[10] = a7;
                v29[11] = a1;
                uint8_t v29[4] = ValueAtIndex;
                v29[5] = v37;
                v29[12] = a2;
                v29[13] = a4;
                v29[6] = v36;
                v29[7] = v14;
                IMDRunSqlOperation((uint64_t)v29);
              }
              [v16 stopTimingForKey:@"sqlite-timing"];
              uint64_t v20 = IMLogHandleForCategory();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138412290;
                CFIndex v39 = (CFIndex)v16;
                _os_log_impl(&dword_1AFB53000, v20, OS_LOG_TYPE_INFO, "sqlite query timing: %@", buf, 0xCu);
              }

              CFArrayRef MessagesInSet = IMDMessageRecordLoadMessagesInSet(v14, a7, 1);
              v33[3] = (uint64_t)MessagesInSet;
            }
            else
            {
              v28[0] = (void (*)(void))MEMORY[0x1E4F143A8];
              v28[1] = (void (*)(void))3221225472;
              v28[2] = (void (*)(void))sub_1AFC192F8;
              v28[3] = (void (*)(void))&unk_1E5F8D580;
              void v28[4] = (void (*)(void))&v32;
              __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v28, (uint64_t)a1, (uint64_t)a2, 0, (uint64_t)a4, a7, 0, a6 != 0);
            }
            uint64_t v23 = v33[3];
            _Block_object_dispose(&v32, 8);
            return v23;
          }
        }
LABEL_16:
        BOOL v24 = 0;
        goto LABEL_17;
      }
    }
    else if (v9 && v10 && v9 == v10)
    {
      goto LABEL_16;
    }
    long long v22 = IMLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FD88();
    }
    return 0;
  }
  return _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier_Original(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1AFC18A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOnlyUnreadAndLimit(void *a1, void *a2, int a3, int a4, int64_t a5)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(a1, a2, 0, 0, a3, a4, a5);
}

CFArrayRef IMDMessageRecordLoadMessagesInSet(void *a1, int64_t a2, char a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFArrayRef v5 = (const __CFArray *)objc_msgSend((id)objc_msgSend(a1, "allObjects"), "mutableCopy");
  CFArrayRef v6 = v5;
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    uint64_t v8 = Count << 32;
    if (Count << 32)
    {
      uint64_t v9 = (int)Count;
      if ((int)Count >= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = (int)Count;
      }
      if (a2) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = (int)Count;
      }
      uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:(int)Count];
      if (v8 >= 1)
      {
        CFIndex v13 = 0;
        uint64_t v14 = *MEMORY[0x1E4F1CF80];
        if (v9 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v9;
        }
        do
        {
          uint64_t v16 = objc_msgSend((id)CFArrayGetValueAtIndex(v6, v13), "integerValue");
          uint64_t v17 = IMDMessageRecordCreateFromRecordIDUnlocked(v14, v16);
          if (v17)
          {
            id v18 = v17;
            [v12 addObject:v17];
            CFRelease(v18);
          }
          ++v13;
        }
        while (v15 != v13);
      }
      if (a3) {
        uint64_t v19 = IMDCreateMessageSortComparatorDescending();
      }
      else {
        uint64_t v19 = IMDCreateMessageSortComparatorAscending();
      }
      uint64_t v20 = v19;
      CFRelease(v6);
      if (!v20)
      {
        uint64_t v21 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"comparator", "CFMutableArrayRef IMDMessageRecordLoadMessagesInSet(NSSet *, uint64_t, BOOL)", IMFileLocationTrimFileName(), 1308, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
        long long v22 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
        if (v22)
        {
          v22(v21);
        }
        else if (IMOSLoggingEnabled())
        {
          uint64_t v23 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v29 = v21;
            _os_log_impl(&dword_1AFB53000, v23, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
          }
        }
      }
      BOOL v24 = (void *)MEMORY[0x1B3E8A120]();
      long long v25 = (void *)[v12 sortedArrayUsingComparator:v20];
      if ([v12 count] < v11) {
        unint64_t v11 = [v12 count];
      }
      CFArrayRef v6 = (const __CFArray *)objc_msgSend((id)objc_msgSend(v25, "subarrayWithRange:", 0, v11), "mutableCopy");
      if ((a3 & 1) == 0)
      {
        uint64_t v26 = objc_msgSend((id)objc_msgSend((id)-[__CFArray reverseObjectEnumerator](v6, "reverseObjectEnumerator"), "allObjects"), "mutableCopy");

        CFArrayRef v6 = (const __CFArray *)v26;
      }

      _Block_release(v20);
    }
  }
  return v6;
}

void sub_1AFC18D20(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134218498;
    uint64_t v24 = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v6;
    __int16 v27 = 2112;
    uint64_t v28 = v7;
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "history query %lu / %lu - %@ - in operation", buf, 0x20u);
  }
  HistoryAllItemsWithOptionalThreadIdentifierQuery = IMDMessageRecordGetHistoryAllItemsWithOptionalThreadIdentifierQuery(*(unsigned __int8 *)(a1 + 112), *(void *)(a1 + 80), *(unsigned char *)(a1 + 113) != 0);
  if (!HistoryAllItemsWithOptionalThreadIdentifierQuery)
  {
    uint64_t v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FDBC();
    }
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1AFC18F2C;
  v13[3] = &unk_1E5F9BA38;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v18 = a2;
  long long v19 = *(_OWORD *)(a1 + 88);
  char v22 = *(unsigned char *)(a1 + 112);
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = v10;
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = v11;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_1AFC1908C;
  v12[3] = &unk_1E5F9B930;
  void v12[4] = v14;
  void v12[5] = *(void *)(a1 + 56);
  void v12[6] = v10;
  v12[7] = v17;
  v12[8] = a2;
  _IMDSqlOperationRunQuery(a2, HistoryAllItemsWithOptionalThreadIdentifierQuery, (uint64_t)v13, (uint64_t)v12);
  if (HistoryAllItemsWithOptionalThreadIdentifierQuery) {
    CFRelease(HistoryAllItemsWithOptionalThreadIdentifierQuery);
  }
}

void sub_1AFC18F2C(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = *(void *)(a1 + 32);
    int v12 = 134218498;
    uint64_t v13 = v3;
    __int16 v14 = 2048;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "history query %lu / %lu - %@ - in operation bind", (uint8_t *)&v12, 0x20u);
  }
  uint64_t v6 = *(void *)(a1 + 72) + 32;
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), *(void *)(a1 + 56));
  IMDSqlStatementBindTextFromCFString(v6, (uint64_t)ValueAtIndex);
  uint64_t v8 = *(void *)(a1 + 72) + 32;
  uint64_t v9 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), *(void *)(a1 + 56));
  IMDSqlStatementBindTextFromCFString(v8, (uint64_t)v9);
  if (*(unsigned char *)(a1 + 112))
  {
    IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 72) + 32, *(void *)(a1 + 40));
    IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 72) + 32, *(void *)(a1 + 48));
    AssociatedMessageGUIDFromThreaduint64_t Identifier = (void *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();
    IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 72) + 32, (uint64_t)AssociatedMessageGUIDFromThreadIdentifier);
  }
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11 >= 1) {
    IMDSqlStatementBindInt(*(void *)(a1 + 72) + 32, v11);
  }
}

void sub_1AFC1908C(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134218498;
    uint64_t v13 = v3;
    __int16 v14 = 2048;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "history query %lu / %lu - %@ - in operation results", buf, 0x20u);
  }
  if (!*(void *)(a1 + 40))
  {
    uint64_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FE64();
    }
  }
  if (IMDSqlOperationHasRows(*(void *)(a1 + 64)))
  {
    uint64_t v7 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v8 = *(void *)(a1 + 64);
      v11[0] = v7;
      v11[1] = 3221225472;
      void v11[2] = sub_1AFC19260;
      v11[3] = &unk_1E5F95228;
      void v11[4] = *(void *)(a1 + 40);
      IMDSqlOperationIterateRow(v8, (uint64_t)v11);
    }
    while (IMDSqlOperationHasRows(*(void *)(a1 + 64)));
  }
  uint64_t v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = [*(id *)(a1 + 40) count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v13 = v10;
    _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "history query got %lu rows", buf, 0xCu);
  }
}

uint64_t sub_1AFC19260(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  sqlite3_int64 v3 = IMDInt64FromSqlColumn((uint64_t)&v6);
  if (!v3)
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FF0C();
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v3));
}

void sub_1AFC192F8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v9 = 0x2020000000;
    char v10 = 0;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC19474;
    void v7[3] = &unk_1E5F9BA88;
    void v7[4] = *(void *)(a1 + 32);
    void v7[5] = &buf;
    xpc_array_apply(value, v7);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FFB4();
    }
    long long v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = xdict;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDP client got null array_result back: %@", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_1AFC19454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1AFC19474(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    long long v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      uint64_t v9 = v5;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "history query: IMDP client got at least one message: %@", (uint8_t *)&v8, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  if (v5)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v5);
  }
  return 1;
}

CFArrayRef IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier(a1, a2, a3, a4, a5, 0, 0, 0);
}

CFArrayRef IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString *a6, void (*a7)(void), void (*a8)(void))
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = [a1 count];
  uint64_t v14 = [a2 count];
  if (a6)
  {
    BOOL v15 = CFStringGetLength(a6) > 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    BOOL v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (v14 && v13 == v14)
  {
    __int16 v16 = IMLogHandleForCategory();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    if (!a3)
    {
      if (v17)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID We have a NULL messageGUID, early returning ****--We should have not gotten to this point if we had a null messageGUID, please file a radar--****", buf, 2u);
      }
      return 0;
    }
    if (v17)
    {
      *(_DWORD *)long long buf = 138413570;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = a2;
      *(_WORD *)&unsigned char buf[22] = 2112;
      id v57 = (id)a3;
      *(_WORD *)int v58 = 2048;
      *(void *)&v58[2] = a4;
      *(_WORD *)&v58[10] = 2048;
      *(void *)&v58[12] = a5;
      __int16 v59 = 2112;
      CFStringRef v60 = a6;
      _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID with ids: %@ services: %@ messageGUID: %@ numberOfMessagesBefore: %lld numberOfMessagesAfter: %lld threadIdentifier: %@", buf, 0x3Eu);
    }
    uint64_t v50 = 0;
    int v51 = &v50;
    uint64_t v52 = 0x2020000000;
    uint64_t v53 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (v15)
      {
        id v54 = 0;
        id v55 = 0;
        AssociatedMessageGUIDFromThreaduint64_t Identifier = (void *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();
        IMMessageThreadIdentifierGetComponents();
        if ([v55 length] && objc_msgSend(v54, "length"))
        {
          long long v19 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:a4];
          uint64_t v20 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:a5];
          id v21 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
          if (a4 >= 1) {
            sub_1AFC28644(@"SELECT   m.ROWID FROM   message m INDEXED BY   message_idx_thread_originator_guid INNER JOIN   chat_message_join cmj ON cmj.message_id = m.ROWID WHERE   m.thread_originator_guid = ? AND m.thread_originator_part = ?   AND m.date < (SELECT om.date FROM message om WHERE om.guid = ?) ORDER BY   m.date DESC LIMIT ?", a3, (uint64_t)v55, (uint64_t)v54, a4, (uint64_t)v19);
          }
          if (a5 >= 1) {
            sub_1AFC28644(@"SELECT   m.ROWID FROM   message m INDEXED BY   message_idx_thread_originator_guid INNER JOIN   chat_message_join cmj ON cmj.message_id = m.ROWID WHERE   m.thread_originator_guid = ? AND m.thread_originator_part = ?   AND m.date >= (SELECT om.date FROM message om WHERE om.guid = ?) ORDER BY   m.date ASC LIMIT ? + 1", a3, (uint64_t)v55, (uint64_t)v54, a5, (uint64_t)v20);
          }
          if ([AssociatedMessageGUIDFromThreadIdentifier length])
          {
            if (IMOSLoggingEnabled())
            {
              char v22 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138412290;
                *(void *)&uint8_t buf[4] = AssociatedMessageGUIDFromThreadIdentifier;
                _os_log_impl(&dword_1AFB53000, v22, OS_LOG_TYPE_INFO, "Performing threaded history query for thread originator associated messages without thread_originator_guid with associated message GUID: %@", buf, 0xCu);
              }
            }
            *(void *)long long buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&uint8_t buf[16] = sub_1AFC28A40;
            id v57 = &unk_1E5F90CC8;
            *(void *)int v58 = v21;
            *(void *)&v58[8] = AssociatedMessageGUIDFromThreadIdentifier;
            IMDRunSqlOperation((uint64_t)buf);
          }
          CFArrayRef MessagesInSet = IMDMessageRecordLoadMessagesInSet(v19, a4, 1);
          CFArrayRef v24 = IMDMessageRecordLoadMessagesInSet(v20, a5 + 1, 0);
          CFArrayRef v25 = IMDMessageRecordLoadMessagesInSet(v21, a5, 0);
          if (a4 >= 1 && a7 && [(__CFArray *)MessagesInSet count] < (unint64_t)a4) {
            *(unsigned char *)a7 = 0;
          }
          if (a5 >= 1 && a8 && [(__CFArray *)v24 count] < (unint64_t)(a5 + 1)) {
            *(unsigned char *)a8 = 0;
          }
          [(__CFArray *)v24 addObjectsFromArray:v25];
          [(__CFArray *)v24 addObjectsFromArray:MessagesInSet];

          if (IMOSLoggingEnabled())
          {
            uint64_t v26 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              uint64_t v27 = [(__CFArray *)v24 count];
              *(_DWORD *)long long buf = 134217984;
              *(void *)&uint8_t buf[4] = v27;
              _os_log_impl(&dword_1AFB53000, v26, OS_LOG_TYPE_INFO, "Threaded history query got %llu items", buf, 0xCu);
            }
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v32 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412802;
              *(void *)&uint8_t buf[4] = a6;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v55;
              *(_WORD *)&unsigned char buf[22] = 2112;
              id v57 = v54;
              _os_log_impl(&dword_1AFB53000, v32, OS_LOG_TYPE_INFO, "Bad thread identifier given to paged history query, identifier: %@ guid: %@ part: %@", buf, 0x20u);
            }
          }

          CFArrayRef v24 = 0;
        }
        goto LABEL_41;
      }
      BOOL v31 = a4 > 0 && a5 > 0;
      id v41 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      CFIndex v39 = (BOOL *)a8;
      if (v31) {
        __int16 v40 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:a5];
      }
      else {
        __int16 v40 = 0;
      }
      uint64_t v33 = 0;
      uint64_t v34 = MEMORY[0x1E4F143A8];
      do
      {
        while (1)
        {
          v48[0] = v34;
          v48[1] = 3221225472;
          v48[2] = sub_1AFC19E54;
          v48[3] = &unk_1E5F9BAF8;
          char v49 = 0;
          v48[6] = a5;
          v48[7] = a1;
          v48[8] = v33;
          v48[9] = a2;
          v48[10] = a3;
          void v48[4] = v41;
          v48[5] = a4;
          IMDRunSqlOperation((uint64_t)v48);
          if (v31) {
            break;
          }
          if (++v33 == v13)
          {
            if (a4 < 1)
            {
              if (v39) {
                BOOL *v39 = [v41 count] > (unint64_t)a5;
              }
              uint64_t v35 = a7;
              if (a7) {
LABEL_65:
              }
                *(unsigned char *)uint64_t v35 = 0;
            }
            else
            {
              uint64_t v35 = (void (*)(void))v39;
              if (a7) {
                *(unsigned char *)a7 = [v41 count] > (unint64_t)a4;
              }
              a5 = a4;
              if (v39) {
                goto LABEL_65;
              }
            }
            CFArrayRef v36 = IMDMessageRecordLoadMessagesInSet(v41, a5 + 1, a4 > 0);
            v51[3] = (uint64_t)v36;

            goto LABEL_40;
          }
        }
        v46[0] = MEMORY[0x1E4F143A8];
        v46[1] = 3221225472;
        v46[2] = sub_1AFC1A224;
        v46[3] = &unk_1E5F9BB20;
        char v47 = 0;
        v46[6] = a1;
        v46[7] = v33;
        v46[8] = a2;
        v46[9] = a3;
        v46[4] = v40;
        v46[5] = a5;
        IMDRunSqlOperation((uint64_t)v46);
        ++v33;
      }
      while (v33 != v13);
      CFArrayRef v37 = IMDMessageRecordLoadMessagesInSet(v41, a4, 1);
      CFArrayRef v38 = IMDMessageRecordLoadMessagesInSet(v40, a5 + 1, 0);
      if (a7) {
        *(unsigned char *)a7 = [(__CFArray *)v37 count] == a4;
      }
      if (v39) {
        BOOL *v39 = [(__CFArray *)v38 count] == a5 + 1;
      }
      [(__CFArray *)v38 addObjectsFromArray:v37];
      v51[3] = (uint64_t)v38;
    }
    else
    {
      v45[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v45[1] = (void (*)(void))3221225472;
      v45[2] = (void (*)(void))sub_1AFC1A5E8;
      v45[3] = (void (*)(void))&unk_1E5F9BB48;
      void v45[4] = (void (*)(void))&v50;
      v45[5] = a7;
      v45[6] = a8;
      __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(v45, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)a6, a4, a5);
    }
LABEL_40:
    CFArrayRef v24 = (const __CFArray *)v51[3];
LABEL_41:
    _Block_object_dispose(&v50, 8);
    return v24;
  }
LABEL_34:
  uint64_t v28 = IMLogHandleForCategory();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    sub_1AFC7005C();
  }
  return 0;
}

void sub_1AFC19DBC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFC19A7CLL);
  }
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Unwind_Resume(exc_buf);
}

void sub_1AFC19E54(uint64_t a1, uint64_t a2)
{
  MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery = IMDMessageRecordGetMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery(*(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 40), *(void *)(a1 + 48));
  if (!MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery)
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70090();
    }
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = sub_1AFC19F90;
  v10[3] = &unk_1E5F9BAA8;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  void v10[4] = a2;
  void v10[5] = v6;
  void v10[6] = v7;
  long long v11 = *(_OWORD *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = v8;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1AFC1A024;
  v9[3] = &unk_1E5F9BAD0;
  void v9[4] = *(void *)(a1 + 32);
  void v9[5] = v12;
  void v9[6] = v8;
  void v9[7] = a2;
  _IMDSqlOperationRunQuery(a2, MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery, (uint64_t)v10, (uint64_t)v9);
  if (MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery) {
    CFRelease(MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery);
  }
}

void sub_1AFC19F90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32) + 32;
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *(void *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v2, (uint64_t)ValueAtIndex);
  uint64_t v4 = *(void *)(a1 + 32) + 32;
  uint64_t v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), *(void *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v4, (uint64_t)v5);
  IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 32) + 32, *(void *)(a1 + 64));
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 <= 0) {
    uint64_t v6 = *(void *)(a1 + 80) & ~(*(uint64_t *)(a1 + 80) >> 63);
  }
  uint64_t v7 = *(void *)(a1 + 32) + 32;
  IMDSqlStatementBindInt(v7, v6);
}

void sub_1AFC1A024(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32))
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70138(a1, v2);
    }
  }
  if (IMDSqlOperationHasRows(*(void *)(a1 + 56)))
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v4 = *(void *)(a1 + 56);
      v7[0] = v3;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_1AFC1A18C;
      void v7[3] = &unk_1E5F95228;
      void v7[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v7);
    }
    while (IMDSqlOperationHasRows(*(void *)(a1 + 56)));
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = [*(id *)(a1 + 32) count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v9 = v6;
    _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Paged history query got %lu rows", buf, 0xCu);
  }
}

uint64_t sub_1AFC1A18C(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  sqlite3_int64 v3 = IMDInt64FromSqlColumn((uint64_t)&v6);
  if (!v3)
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70204();
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v3));
}

void sub_1AFC1A224(uint64_t a1, uint64_t a2)
{
  MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery = IMDMessageRecordGetMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery(*(unsigned __int8 *)(a1 + 80), 0, *(void *)(a1 + 40));
  if (!MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery)
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC702AC();
    }
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1AFC1A364;
  v9[3] = &unk_1E5F93DC8;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  void v9[4] = a2;
  void v9[5] = v6;
  void v9[6] = *(void *)(a1 + 56);
  long long v10 = *(_OWORD *)(a1 + 64);
  uint64_t v11 = v7;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFC1A3E8;
  v8[3] = &unk_1E5F93EE0;
  void v8[4] = *(void *)(a1 + 32);
  void v8[5] = v7;
  void v8[6] = a2;
  _IMDSqlOperationRunQuery(a2, MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery, (uint64_t)v9, (uint64_t)v8);
  if (MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery) {
    CFRelease(MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery);
  }
}

void sub_1AFC1A364(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32) + 32;
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *(void *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v2, (uint64_t)ValueAtIndex);
  uint64_t v4 = *(void *)(a1 + 32) + 32;
  uint64_t v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), *(void *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v4, (uint64_t)v5);
  IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 32) + 32, *(void *)(a1 + 64));
  uint64_t v6 = *(void *)(a1 + 32) + 32;
  int v7 = *(_DWORD *)(a1 + 72);
  IMDSqlStatementBindInt(v6, v7);
}

void sub_1AFC1A3E8(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32))
  {
    uint64_t v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70354(a1, v2);
    }
  }
  if (IMDSqlOperationHasRows(*(void *)(a1 + 48)))
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v4 = *(void *)(a1 + 48);
      v7[0] = v3;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_1AFC1A550;
      void v7[3] = &unk_1E5F95228;
      void v7[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v7);
    }
    while (IMDSqlOperationHasRows(*(void *)(a1 + 48)));
  }
  uint64_t v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = [*(id *)(a1 + 32) count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v9 = v6;
    _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Paged history query got %lu rows for second load", buf, 0xCu);
  }
}

uint64_t sub_1AFC1A550(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  sqlite3_int64 v3 = IMDInt64FromSqlColumn((uint64_t)&v6);
  if (!v3)
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70420();
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v3));
}

uint64_t sub_1AFC1A5E8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC1A77C;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    xpc_array_apply(value, applier);
  }
  else
  {
    uint64_t v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1AFC704C8();
    }
    long long v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      xpc_object_t v12 = xdict;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID IMDP client got null array_result back: %@", buf, 0xCu);
    }
  }
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "has_messages_before");
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "has_messages_after");
  uint64_t v9 = (void *)result;
  if (v7)
  {
    uint64_t result = xpc_BOOL_get_value(v7);
    **(unsigned char **)(a1 + 40) = result;
  }
  if (v9)
  {
    uint64_t result = xpc_BOOL_get_value(v9);
    **(unsigned char **)(a1 + 4_Block_object_dispose(&STACK[0x200], 8) = result;
  }
  return result;
}

uint64_t sub_1AFC1A77C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    long long v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesUpToLimit(void *a1, void *a2, int64_t a3)
{
  uint64_t v6 = [a1 count];
  uint64_t v7 = [a2 count];
  if (v6 && v7 && v6 == v7)
  {
    uint64_t v24 = 0;
    CFArrayRef v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F28BD0]) initWithCapacity:a3 + a3 * v6];
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = sub_1AFC1AAFC;
      v23[3] = &unk_1E5F9BB70;
      v23[4] = v8;
      void v23[5] = a3;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT count(*) as count, m.text as reply FROM(  SELECT text FROM message WHERE is_from_me == 1 AND text != '\uFFFC' ORDER BY ROWID DESC LIMIT 1000) m GROUP BY m.text ORDER BY count DESC LIMIT ?;",
        (uint64_t)v23);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = sub_1AFC1AC34;
      v22[3] = &unk_1E5F9BB98;
      v22[6] = a1;
      void v22[7] = a2;
      v22[8] = a3;
      void v22[4] = v8;
      v22[5] = v6;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT count(*) as count, m.text as reply FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id WHERE m.is_from_me == 1 AND text != '\uFFFC' AND   cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) GROUP BY m.text ORDER BY count DESC, m.date DESC LIMIT ?", (uint64_t)v22);
      uint64_t v9 = (void *)[v8 allObjects];
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = sub_1AFC1ADA0;
      v21[3] = &unk_1E5F9BBC0;
      uint8_t v21[4] = v8;
      uint64_t v10 = (void *)[v9 sortedArrayUsingComparator:v21];
      uint64_t v11 = [v10 count];
      if (a3 >= 1)
      {
        unint64_t v12 = v11;
        unint64_t v13 = 0;
        uint64_t v14 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        do
        {
          if (!v25[3])
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, v14);
            v25[3] = (uint64_t)Mutable;
          }
          if (v12 > v13)
          {
            __int16 v16 = (const void *)[v10 objectAtIndexedSubscript:v13];
            CFArrayAppendValue((CFMutableArrayRef)v25[3], v16);
          }
          ++v13;
        }
        while (a3 != v13);
      }
    }
    else
    {
      v20[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v20[1] = (void (*)(void))3221225472;
      v20[2] = (void (*)(void))sub_1AFC1ADF4;
      v20[3] = (void (*)(void))&unk_1E5F8D580;
      void v20[4] = (void (*)(void))&v24;
      __syncXPCIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(v20, (uint64_t)a1, (uint64_t)a2, a3);
    }
    uint64_t v18 = v25[3];
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    BOOL v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FD88();
    }
    return 0;
  }
  return v18;
}

void sub_1AFC1AAC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSDBSqliteBindInt64();
  if (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      int v7 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1))
      {
        uint64_t v8 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1);
        uint64_t v9 = (__CFString *)CFStringCreateWithCString(v6, (const char *)v8, 0x8000100u);
        uint64_t v10 = v9;
        if (v9) {
          BOOL v11 = v7 < 3;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          uint64_t v12 = objc_msgSend((id)-[__CFString stringByReplacingOccurrencesOfString:withString:](v9, "stringByReplacingOccurrencesOfString:withString:", @"\uFFFC", &stru_1F084E970), "stringByReplacingOccurrencesOfString:withString:", @"\uFFFD", &stru_1F084E970);
          do
          {
            [*(id *)(a1 + 32) addObject:v12];
            --v7;
          }
          while (v7);
        }
        if (v10) {
          CFRelease(v10);
        }
      }
    }
    while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100);
  }
  return CSDBSqliteStatementReset();
}

uint64_t sub_1AFC1AC34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(result + 40))
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 48), v6);
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 56), v6);
      CSDBSqliteBindTextFromCFString();
      CSDBSqliteBindInt64();
      while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100)
      {
        int v8 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
        if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1))
        {
          uint64_t v9 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1);
          uint64_t v10 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v9, 0x8000100u);
          BOOL v11 = v10;
          if (v10) {
            BOOL v12 = v8 < 3;
          }
          else {
            BOOL v12 = 1;
          }
          if (!v12)
          {
            uint64_t v13 = objc_msgSend((id)-[__CFString stringByReplacingOccurrencesOfString:withString:](v10, "stringByReplacingOccurrencesOfString:withString:", @"\uFFFC", &stru_1F084E970), "stringByReplacingOccurrencesOfString:withString:", @"\uFFFD", &stru_1F084E970);
            do
            {
              [*(id *)(v5 + 32) addObject:v13];
              --v8;
            }
            while (v8);
          }
          if (v11) {
            CFRelease(v11);
          }
        }
      }
      uint64_t result = CSDBSqliteStatementReset();
      ++v6;
    }
    while (v6 < *(void *)(v5 + 40));
  }
  return result;
}

uint64_t sub_1AFC1ADA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = [*(id *)(a1 + 32) countForObject:a2];
  unint64_t v6 = [*(id *)(a1 + 32) countForObject:a3];
  if (v5 == v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = -1;
  }
  if (v5 < v6) {
    return 1;
  }
  else {
    return v7;
  }
}

void sub_1AFC1ADF4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    uint64_t v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      size_t v7 = 0;
      int v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        }
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          uint64_t v10 = (const void *)[NSString stringWithUTF8String:string];
          if (v10) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices(void *a1, void *a2)
{
  uint64_t v4 = [a1 count];
  uint64_t v5 = [a2 count];
  if (v4 && v5 && v4 == v5)
  {
    uint64_t v11 = 0;
    BOOL v12 = &v11;
    uint64_t v13 = 0x2020000000;
    uint64_t v14 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      _OWORD v10[2] = sub_1AFC1B064;
      v10[3] = &unk_1E5F9B9E8;
      void v10[6] = a1;
      void v10[7] = a2;
      void v10[4] = &v11;
      void v10[5] = v4;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT m.guid FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)", (uint64_t)v10);
    }
    else
    {
      v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v9[1] = (void (*)(void))3221225472;
      _DWORD v9[2] = (void (*)(void))sub_1AFC1B190;
      v9[3] = (void (*)(void))&unk_1E5F8D580;
      void v9[4] = (void (*)(void))&v11;
      __syncXPCIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(v9, (uint64_t)a1, (uint64_t)a2);
    }
    uint64_t v7 = v12[3];
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    size_t v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FD88();
    }
    return 0;
  }
  return v7;
}

void sub_1AFC1B048(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1B064(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(result + 40))
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 48), v6);
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 56), v6);
      CSDBSqliteBindTextFromCFString();
      while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100)
      {
        if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0))
        {
          uint64_t v9 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0);
          CFStringRef v10 = CFStringCreateWithCString(v7, (const char *)v9, 0x8000100u);
          if (v10)
          {
            CFStringRef v11 = v10;
            BOOL v12 = *(__CFArray **)(*(void *)(*(void *)(v5 + 32) + 8) + 24);
            if (!v12)
            {
              *(void *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
              BOOL v12 = *(__CFArray **)(*(void *)(*(void *)(v5 + 32) + 8) + 24);
            }
            CFArrayAppendValue(v12, v11);
            CFRelease(v11);
          }
        }
      }
      uint64_t result = CSDBSqliteStatementReset();
      ++v6;
    }
    while (v6 < *(void *)(v5 + 40));
  }
  return result;
}

void sub_1AFC1B190(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    uint64_t v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      size_t v7 = 0;
      int v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        }
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          CFStringRef v10 = (const void *)[NSString stringWithUTF8String:string];
          if (v10) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices(void *a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [a2 count];
  uint64_t v7 = [a3 count];
  uint64_t v8 = [a1 count];
  if (v8 && v6 && v7 && v6 == v7)
  {
    uint64_t v9 = v8;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v11 = v10;
      memset(v22, 0, sizeof(v22));
      memset(v21, 0, sizeof(v21));
      IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v21);
      IMDSqlOperationBeginTransaction(v21);
      BOOL v12 = IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery1(v9);
      for (CFIndex i = 0; i != v6; ++i)
      {
        _IMDSqlOperationBeginQuery((uint64_t)v21, v12);
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        IMDSqlStatementBindTextFromCFString((uint64_t)v22, (uint64_t)ValueAtIndex);
        BOOL v15 = CFArrayGetValueAtIndex((CFArrayRef)a3, i);
        IMDSqlStatementBindTextFromCFString((uint64_t)v22, (uint64_t)v15);
        IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v22, (CFArrayRef)a1);
        IMDSqlOperationFinishQuery((uint64_t)v21);
      }
      IMDSqlOperationCommitOrRevertTransaction(v21);
      BOOL v16 = IMDSqlOperationRelease((uint64_t)v21, 0);
      CFRelease(v12);
      BOOL v17 = IMLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        *(_DWORD *)long long buf = 134218752;
        uint64_t v24 = v9;
        __int16 v25 = 2048;
        double v26 = v18 - v11;
        __int16 v27 = 2048;
        uint64_t v28 = v6;
        __int16 v29 = 2048;
        uint64_t v30 = v6;
        _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Deleted %ld messages in %f seconds on %ld chats and %ld services", buf, 0x2Au);
      }
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
    }
    else
    {
      __syncXPCIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(0, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
      return 1;
    }
  }
  else
  {
    long long v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70570();
    }
    return 0;
  }
  return v16;
}

void IMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe(const __CFString *a1, uint64_t a2, int a3)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v6 = IMDChatRecordCopyChatForGUID(a1);
    if (v6)
    {
      CFStringRef v7 = v6;
      uint64_t Identifier = IMDChatRecordGetIdentifier((uint64_t)v6);
      CFRelease(v7);
    }
    else
    {
      uint64_t Identifier = -1;
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_1AFC1B5D0;
    v9[3] = &unk_1E5F9BBE0;
    void v9[4] = Identifier;
    char v10 = a3;
    _IMDPerformLockedStatementBlockWithQuery(@"UPDATE   message SET   is_read = 0, date_read = 0 WHERE   rowid in(    select m.rowid from message m       INNER JOIN chat_message_join       cm ON m.ROWint ID = cm.message_id     WHERE       cm.chat_id = ?       AND m.item_type == 0       AND m.is_from_me == ?  )", (uint64_t)v9);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe_IPCAction(qword_1F084D678, (uint64_t)a1, a2, a3);
  }
}

void sub_1AFC1B5D0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  int v0 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2[0] = 67109120;
      v2[1] = v0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "SQLite returned %d from IMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe", (uint8_t *)v2, 8u);
    }
  }
}

void IMDMessageRecordMarkMessageGUIDUnread(uint64_t a1)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    _DWORD v2[2] = sub_1AFC1B7A8;
    v2[3] = &unk_1E5F8EC10;
    void v2[4] = a1;
    _IMDPerformLockedStatementBlockWithQuery(@"update message set is_read = 0 where guid = ?;",
      (uint64_t)v2);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessageGUIDUnread_IPCAction(qword_1F084D698, a1);
  }
}

void sub_1AFC1B7A8()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindTextFromCFString();
  int v0 = CSDBSqliteStatementPerform();
  if (v0 != 101)
  {
    int v1 = v0;
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v3[0] = 67109120;
        v3[1] = v1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "SQLite returned %d from IMDMessageRecordMarkMessageGUIDUnread", (uint8_t *)v3, 8u);
      }
    }
  }
}

uint64_t IMDMessageRecordCopyMessagesWithRoomNamesOnServicesUpToGUIDOrLimit(void *a1, void *a2, uint64_t a3, int64_t a4)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(a1, a2, a3, 0, 0, 0, a4);
}

uint64_t IMDMessageRecordCopyMessagesWithHandlesOnServicesLimit(void *a1, void *a2, int64_t a3)
{
  return _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier_Original(a1, a2, 0, 0, 1, 0, a3);
}

uint64_t IMDMessageRecordCopyMessagesWithHandleOnServiceLimit(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v14 = 0;
  BOOL v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  if ((a1 || CFStringGetLength(0)) && (a2 || CFStringGetLength(0)))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v6 = IMDHandleRecordCopyHandleForIDOnService(a1, a2);
      CFStringRef v7 = (const void *)v6;
      if (v6)
      {
        uint64_t Identifier = IMDHandleRecordGetIdentifier(v6);
        uint64_t v9 = IMDMessageRecordCopyMessagesWithHandleIDLimit(Identifier, a3);
        v15[3] = v9;
        CFRelease(v7);
      }
    }
    else
    {
      v13[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v13[1] = (void (*)(void))3221225472;
      v13[2] = (void (*)(void))sub_1AFC1BA64;
      v13[3] = (void (*)(void))&unk_1E5F8D580;
      void v13[4] = (void (*)(void))&v14;
      __syncXPCIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(v13, (uint64_t)a1, (uint64_t)a2, a3);
    }
    uint64_t v10 = v15[3];
  }
  else
  {
    double v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1AFC705A4();
    }
    uint64_t v10 = 0;
  }
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_1AFC1BA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1AFC1BA64(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC1BAF8;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC1BAF8(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs(const __CFString *a1, const __CFString *a2, const __CFArray *a3, const __CFArray *a4, int a5, const __CFArray *a6, const __CFArray *a7, double a8)
{
  uint64_t v8 = 0;
  if (!a1 || !a2) {
    return v8;
  }
  if (!CFStringGetLength(a1) || !CFStringGetLength(a2)) {
    return 0;
  }
  if (!a6)
  {
    uint64_t Count = 0;
    if (a7) {
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t Count = (int)CFArrayGetCount(a6);
  if (!a7) {
    return 0;
  }
LABEL_7:
  int v18 = CFArrayGetCount(a7);
  uint64_t v8 = 0;
  if (Count && v18)
  {
    uint64_t v23 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", a8), "__im_nanosecondTimeInterval");
    uint64_t v26 = 0;
    __int16 v27 = &v26;
    uint64_t v28 = 0x2020000000;
    uint64_t v29 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (a3) {
        uint64_t v19 = (int)CFArrayGetCount(a3);
      }
      else {
        uint64_t v19 = 0;
      }
      if (a4) {
        uint64_t v21 = (int)CFArrayGetCount(a4);
      }
      else {
        uint64_t v21 = 0;
      }
      CFTypeRef v22 = IMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDsQuery(v19, v21, a5);
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = sub_1AFC1BDF0;
      v25[3] = &unk_1E5F9BC08;
      v25[6] = a2;
      v25[7] = v19;
      v25[8] = a3;
      v25[9] = v23;
      unsigned char v25[10] = v21;
      v25[11] = a4;
      v25[12] = a1;
      v25[13] = a6;
      v25[14] = a7;
      uint8_t v25[4] = &v26;
      v25[5] = Count;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v22, (uint64_t)v25);
      if (v22) {
        CFRelease(v22);
      }
    }
    else
    {
      v24[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v24[1] = (void (*)(void))3221225472;
      void v24[2] = (void (*)(void))sub_1AFC1BF4C;
      v24[3] = (void (*)(void))&unk_1E5F8D580;
      uint8_t v24[4] = (void (*)(void))&v26;
      __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(v24, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
    }
    uint64_t v8 = v27[3];
    _Block_object_dispose(&v26, 8);
  }
  return v8;
}

void sub_1AFC1BDCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1BDF0(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      CSDBSqliteBindTextFromCFString();
      if (*(uint64_t *)(v1 + 56) >= 1)
      {
        CFIndex v4 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 64), v4);
          CSDBSqliteBindTextFromCFString();
          ++v4;
        }
        while (v4 < *(void *)(v1 + 56));
      }
      CSDBSqliteBindInt64();
      if (*(uint64_t *)(v1 + 80) >= 1)
      {
        CFIndex v5 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 88), v5);
          CSDBSqliteBindTextFromCFString();
          ++v5;
        }
        while (v5 < *(void *)(v1 + 80));
      }
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 104), v3);
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 112), v3);
      CSDBSqliteBindTextFromCFString();
      uint64_t v6 = CSDBSqliteStatementInteger64Result();
      if (v6 > v2) {
        uint64_t v2 = v6;
      }
      xpc_object_t result = CSDBSqliteStatementReset();
      ++v3;
    }
    while (v3 < *(void *)(v1 + 40));
    if (v2 > 0)
    {
      xpc_object_t result = (uint64_t)IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], v2);
      *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t sub_1AFC1BF4C(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs(const __CFString *a1, const __CFString *a2, const __CFArray *a3, const __CFArray *a4, double a5)
{
  uint64_t v5 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (CFStringGetLength(a1) && CFStringGetLength(a2))
    {
      uint64_t v20 = 0;
      uint64_t v21 = &v20;
      uint64_t v22 = 0x2020000000;
      uint64_t v23 = 0;
      uint64_t v11 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", a5), "__im_nanosecondTimeInterval");
      if (!IMDIsRunningInDatabaseServerProcess())
      {
        v18[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v18[1] = (void (*)(void))3221225472;
        v18[2] = (void (*)(void))sub_1AFC1C314;
        v18[3] = (void (*)(void))&unk_1E5F8D580;
        void v18[4] = (void (*)(void))&v20;
        __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(v18, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
LABEL_18:
        uint64_t v5 = v21[3];
        _Block_object_dispose(&v20, 8);
        return v5;
      }
      if (a3)
      {
        int Count = CFArrayGetCount(a3);
        if (a4)
        {
LABEL_8:
          int v13 = CFArrayGetCount(a4);
          goto LABEL_13;
        }
      }
      else
      {
        int Count = 0;
        if (a4) {
          goto LABEL_8;
        }
      }
      int v13 = 0;
LABEL_13:
      uint64_t v14 = Count;
      CFStringRef v15 = IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDsQuery(Count, v13);
      if (!v15)
      {
        uint64_t v16 = IMLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          sub_1AFC705D8([NSString stringWithFormat:&stru_1F084E970], v24);
        }
      }
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_1AFC1C220;
      v19[3] = &unk_1E5F9BC30;
      void v19[6] = v14;
      void v19[7] = a3;
      v19[8] = v11;
      _OWORD v19[9] = v13;
      v19[10] = a4;
      v19[11] = a1;
      void v19[4] = &v20;
      v19[5] = a2;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v15, (uint64_t)v19);
      if (v15) {
        CFRelease(v15);
      }
      goto LABEL_18;
    }
    return 0;
  }
  return v5;
}

void sub_1AFC1C1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1AFC1C220(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    CFIndex v2 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v2);
      CSDBSqliteBindTextFromCFString();
      ++v2;
    }
    while (v2 < *(void *)(a1 + 48));
  }
  CSDBSqliteBindInt64();
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v3);
      CSDBSqliteBindTextFromCFString();
      ++v3;
    }
    while (v3 < *(void *)(a1 + 72));
  }
  CSDBSqliteBindTextFromCFString();
  uint64_t result = CSDBSqliteStatementInteger64Result();
  if (result > 0)
  {
    uint64_t result = (uint64_t)IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1AFC1C314(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (CFStringGetLength(a1) && CFStringGetLength(a2))
    {
      uint64_t v20 = 0;
      uint64_t v21 = &v20;
      uint64_t v22 = 0x2020000000;
      uint64_t v23 = 0;
      uint64_t v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", a6), "__im_nanosecondTimeInterval");
      if (IMDIsRunningInDatabaseServerProcess())
      {
        CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT   MAX(m.ROWID) FROM   message m   INDEXED BY message_idx_handle WHERE   m.handle_id IN(   SELECT       h.rowid     FROM       handle h     WHERE       h.id = ?  )  AND m.date >= ?   AND m.is_from_me = 0   AND m.was_deduplicated = 0   AND m.cache_roomnames IS NULL   AND m.is_sos  = ?   AND m.service = ?   AND m.guid NOT IN (?)   AND m.text = ? ");
        if (!v14)
        {
          CFStringRef v15 = IMLogHandleForCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_1AFC70634([NSString stringWithFormat:&stru_1F084E970], v24);
          }
        }
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 3221225472;
        v18[2] = sub_1AFC1C5C0;
        v18[3] = &unk_1E5F9BC58;
        char v19 = a4;
        v18[6] = v13;
        void v18[7] = a3;
        void v18[8] = a5;
        v18[9] = a1;
        void v18[4] = &v20;
        void v18[5] = a2;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)v14, (uint64_t)v18);
        if (v14) {
          CFRelease(v14);
        }
      }
      else
      {
        v17[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v17[1] = (void (*)(void))3221225472;
        void v17[2] = (void (*)(void))sub_1AFC1C660;
        v17[3] = (void (*)(void))&unk_1E5F8D580;
        v17[4] = (void (*)(void))&v20;
        __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(v17, (uint64_t)a1, (uint64_t)a2, a3, a6, a4, a5);
      }
      uint64_t v6 = v21[3];
      _Block_object_dispose(&v20, 8);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_1AFC1C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

uint64_t sub_1AFC1C5C0(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  uint64_t result = CSDBSqliteStatementInteger64Result();
  if (result >= 1)
  {
    uint64_t result = (uint64_t)IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], result);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1AFC1C660(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID(const __CFString *a1, const __CFString *a2, int64_t a3)
{
  if ((a1 || CFStringGetLength(0)) && (a2 || CFStringGetLength(0)))
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      uint64_t v6 = IMDHandleRecordCopyHandleForIDOnService(a1, a2);
      CFStringRef v7 = (const void *)v6;
      if (v6)
      {
        uint64_t Identifier = IMDHandleRecordGetIdentifier(v6);
        uint64_t v21 = 0;
        uint64_t v22 = &v21;
        uint64_t v23 = 0x2020000000;
        uint64_t v24 = 0;
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = sub_1AFC28C24;
        v20[3] = &unk_1E5F9B9E8;
        void v20[6] = a3;
        void v20[7] = 1;
        void v20[4] = &v21;
        v20[5] = Identifier;
        _IMDPerformLockedStatementBlockWithQuery(@"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id INNER JOIN chat c ON   c.ROWint ID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWint ID = ch.chat_id WHERE   ch.handle_id = ?   AND c.room_name IS NULL   AND m.replace = ? ORDER BY m.ROWID DESC LIMIT ?", (uint64_t)v20);
        CFArrayRef v9 = (const __CFArray *)v22[3];
        _Block_object_dispose(&v21, 8);
        if (v9)
        {
          if (CFArrayGetCount(v9))
          {
            CFArrayGetValueAtIndex(v9, 0);
            int ID = CSDBRecordGetID();
            uint64_t v11 = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E4F1CF80], ID);
            v17[3] = (uint64_t)v11;
          }
          CFRelease(v9);
        }
        CFRelease(v7);
      }
    }
    else
    {
      v15[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v15[1] = (void (*)(void))3221225472;
      v15[2] = (void (*)(void))sub_1AFC1C8E8;
      v15[3] = (void (*)(void))&unk_1E5F8D580;
      v15[4] = (void (*)(void))&v16;
      __syncXPCIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(v15, (uint64_t)a1, (uint64_t)a2, a3);
    }
    uint64_t v12 = v17[3];
    _Block_object_dispose(&v16, 8);
  }
  else
  {
    uint64_t v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1AFC705A4();
    }
    return 0;
  }
  return v12;
}

void sub_1AFC1C8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1C8E8(uint64_t a1, void *a2)
{
  uint64_t result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyUndeliveredOneToOneiMessages(int64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFIndex v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyUndeliveredOneToOneMadridMessages", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  CFArrayRef v9 = buf;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INDEXED BY message_idx_undelivered_one_to_one_imessage WHERE   m.cache_roomnames IS NULL   AND m.service IN ('%@', '%@')   AND m.is_sent = 1   AND m.is_delivered = 0   AND m.was_downgraded = 0   AND m.item_type == 0   AND m.schedule_type == 0   AND m.ROWID > ? ORDER BY m.date ASC", @"iMessage", @"RCS");
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC1CAFC;
    void v7[3] = &unk_1E5F900E0;
    void v7[4] = buf;
    void v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v7);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC1CC3C;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(v6, a1);
  }
  uint64_t v4 = *((void *)v9 + 3);
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_1AFC1CAFC(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        if ((int)CFArrayGetCount(v3) >= 1)
        {
          CFIndex v4 = 0;
          uint64_t v5 = *MEMORY[0x1E4F1CF80];
          do
          {
            CFArrayGetValueAtIndex(v3, v4);
            int ID = CSDBRecordGetID();
            CFStringRef v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
            if (v7)
            {
              uint64_t v8 = v7;
              CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
              CFRelease(v8);
            }
            ++v4;
          }
          while (v4 < (int)CFArrayGetCount(v3));
        }
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC1CC3C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC1CCD0;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC1CCD0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyExpiringOrExpiredMessages(int64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyExpiredOrExpiringiMessages", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  CFArrayRef v9 = buf;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INDEXED BY message_idx_expire_state WHERE   (m.expire_state = %d OR m.expire_state = %d)  AND m.item_type == 0   AND m.schedule_type == 0   AND m.ROWID > ? ORDER BY m.date ASC", 1, 2);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC1CF24;
    void v7[3] = &unk_1E5F900E0;
    void v7[4] = buf;
    void v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v7);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC1D064;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(v6, a1);
  }
  uint64_t v4 = *((void *)v9 + 3);
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_1AFC1CF24(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        if ((int)CFArrayGetCount(v3) >= 1)
        {
          CFIndex v4 = 0;
          uint64_t v5 = *MEMORY[0x1E4F1CF80];
          do
          {
            CFArrayGetValueAtIndex(v3, v4);
            int ID = CSDBRecordGetID();
            CFStringRef v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
            if (v7)
            {
              uint64_t v8 = v7;
              CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
              CFRelease(v8);
            }
            ++v4;
          }
          while (v4 < (int)CFArrayGetCount(v3));
        }
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC1D064(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC1D0F8;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC1D0F8(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyUnsentUnfailedMessages(int64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyUnsentUnfailedMessages", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  CFArrayRef v9 = buf;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m WHERE   m.is_from_me = 1   AND m.is_sent = 0   AND m.error = 0   AND m.item_type = 0   AND m.schedule_type = 0   AND m.ROWID > ? ");
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC1D340;
    void v7[3] = &unk_1E5F900E0;
    void v7[4] = buf;
    void v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v7);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC1D480;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(v6, a1);
  }
  uint64_t v4 = *((void *)v9 + 3);
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_1AFC1D340(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        if ((int)CFArrayGetCount(v3) >= 1)
        {
          CFIndex v4 = 0;
          uint64_t v5 = *MEMORY[0x1E4F1CF80];
          do
          {
            CFArrayGetValueAtIndex(v3, v4);
            int ID = CSDBRecordGetID();
            CFStringRef v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
            if (v7)
            {
              uint64_t v8 = v7;
              CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
              CFRelease(v8);
            }
            ++v4;
          }
          while (v4 < (int)CFArrayGetCount(v3));
        }
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC1D480(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC1D514;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC1D514(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v7 = 0x2020000000;
    uint64_t v8 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      void v5[2] = sub_1AFC1D778;
      v5[3] = &unk_1E5F900E0;
      void v5[4] = &buf;
      void v5[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE subject = ?   AND item_type = ? ORDER BY message.ROWID ASC;",
        (uint64_t)v5);
    }
    else
    {
      v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v4[1] = (void (*)(void))3221225472;
      v4[2] = (void (*)(void))sub_1AFC1D8B8;
      v4[3] = (void (*)(void))&unk_1E5F8D580;
      void v4[4] = (void (*)(void))&buf;
      __syncXPCIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(v4, a1);
    }
    a1 = *(void *)(*((void *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  return a1;
}

void sub_1AFC1D73C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AFC1D778(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      uint64_t v5 = (int)Count;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v8 = Mutable;
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            uint64_t v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC1D8B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC1D94C;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC1D94C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCountAllUnreadMessages()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      int v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Counting all unread messages...", buf, 2u);
      }
    }
    id v1 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
    [v1 startTimingForKey:@"IMDMessageRecordCountAllUnreadMessages"];
    CFArrayRef v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithObjects:", &unk_1F0864F50, 0);
    if (+[IMDNotificationsController isSpamFilteringOn]) {
      uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"IncomingMessageAlertFiltrationUnknownSenders", @"IncomingMessageAlertFiltrationTransactions", @"IncomingMessageAlertFiltrationPromotions", 0);
    }
    else {
      uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"IncomingMessageAlertFiltrationUnknownSenders", 0);
    }
    CFIndex v4 = (void *)v3;
    if (v3)
    {
      for (unint64_t i = 0; [v4 count] > i; ++i)
      {
        uint64_t v6 = (void *)[v4 objectAtIndexedSubscript:i];
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E720], "sharedInstance"), "getBoolFromDomain:forKey:", @"com.apple.MobileSMS", v6))
        {
          char v7 = [v6 isEqualToString:@"IncomingMessageAlertFiltrationUnknownSenders"];
          uint64_t v8 = &unk_1F0864F68;
          if ((v7 & 1) != 0
            || (char v9 = [v6 isEqualToString:@"IncomingMessageAlertFiltrationTransactions"],
                uint64_t v8 = &unk_1F0864F80,
                (v9 & 1) != 0)
            || (int v10 = [v6 isEqualToString:@"IncomingMessageAlertFiltrationPromotions"],
                uint64_t v8 = &unk_1F0864F98,
                v10))
          {
            [v2 addObject:v8];
          }
        }
      }
    }
    uint64_t v11 = [v2 count];
    uint64_t v12 = IMDMessageRecordCountAllUnreadMessagesQuery(v11);
    if (IMOSLoggingEnabled())
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v24 = v2;
        _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Inboxes to exclude from unread messages count: %@", buf, 0xCu);
      }
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1AFC1DE54;
    v18[3] = &unk_1E5F9BC80;
    void v18[4] = v2;
    void v18[5] = &v19;
    v18[6] = v11;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v12, (uint64_t)v18);
    if (v12) {
      CFRelease(v12);
    }
    [v1 stopTimingForKey:@"IMDMessageRecordCountAllUnreadMessages"];
    if (IMOSLoggingEnabled())
    {
      CFStringRef v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v24 = v1;
        _os_log_impl(&dword_1AFB53000, v14, OS_LOG_TYPE_INFO, "IMDMessageRecordCountAllUnreadMessages timing: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    v17[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v17[1] = (void (*)(void))3221225472;
    void v17[2] = (void (*)(void))sub_1AFC1DEE4;
    v17[3] = (void (*)(void))&unk_1E5F8D580;
    v17[4] = (void (*)(void))&v19;
    __syncXPCIMDMessageRecordCountAllUnreadMessages_IPCAction(v17);
  }
  uint64_t v15 = v20[3];
  _Block_object_dispose(&v19, 8);
  return v15;
}

void sub_1AFC1DE54(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    unint64_t v2 = 0;
    do
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v2), "integerValue");
      CSDBSqliteBindInt();
      ++v2;
    }
    while (v2 < *(void *)(a1 + 48));
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CSDBSqliteStatementInteger64Result();
}

int64_t sub_1AFC1DEE4(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForChatGUID(const __CFString *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = -1;
  if (a1 && CFStringGetLength(a1) > 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      CFStringRef v2 = IMDChatRecordCopyChatForGUID(a1);
      CFStringRef v3 = v2;
      if (!v2 || (int64_t Identifier = IMDChatRecordGetIdentifier((uint64_t)v2), Identifier == -1))
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            CFStringRef v16 = a1;
            _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "** WARNING ** counting all unread messages for chat row id of -1 because no chat record for guid (%@) could be found!", buf, 0xCu);
          }
        }
        int64_t Identifier = -1;
      }
      uint64_t v6 = IMDMessageRecordCountAllUnreadMessagesForChatRowID(Identifier);
      v12[3] = v6;
      if (v3) {
        CFRelease(v3);
      }
    }
    else
    {
      v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v10[1] = (void (*)(void))3221225472;
      _OWORD v10[2] = (void (*)(void))sub_1AFC1E26C;
      v10[3] = (void (*)(void))&unk_1E5F8D580;
      void v10[4] = (void (*)(void))&v11;
      __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(v10, (uint64_t)a1);
    }
  }
  else
  {
    char v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1AFC70690();
    }
  }
  uint64_t v8 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForChatRowID(int64_t a1)
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = -1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      void v5[2] = sub_1AFC1E418;
      v5[3] = &unk_1E5F900E0;
      void v5[4] = &v6;
      void v5[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT   COUNT(m.ROWID) FROM   message m   INDEXED BY message_idx_isRead_isFromMe_itemType INNER JOIN chat_message_join   cm ON m.ROWint ID = cm.message_id WHERE   cm.chat_id = ?   AND m.item_type == 0   AND m.is_read == 0   AND m.is_from_me == 0 ", (uint64_t)v5);
    }
    else
    {
      v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v4[1] = (void (*)(void))3221225472;
      v4[2] = (void (*)(void))sub_1AFC1E470;
      v4[3] = (void (*)(void))&unk_1E5F8D580;
      void v4[4] = (void (*)(void))&v6;
      __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(v4, a1);
    }
  }
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1AFC1E250(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

int64_t sub_1AFC1E26C(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForChatRowIDUnlocked(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v1 = -1;
  uint64_t v7 = -1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1AFC1E37C;
    v3[3] = &unk_1E5F900E0;
    void v3[4] = &v4;
    void v3[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT   COUNT(m.ROWID) FROM   message m INNER JOIN chat_message_join   cm ON m.ROWint ID = cm.message_id WHERE   cm.chat_id = ?   AND m.item_type == 0   AND m.is_read == 0   AND m.is_from_me == 0 ", (uint64_t)v3);
    uint64_t v1 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AFC1E364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1E37C(uint64_t a1)
{
  CSDBSqliteBindInt64();
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1AFC1E3D4(uint64_t a1)
{
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1AFC1E418(uint64_t a1)
{
  CSDBSqliteBindInt64();
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1AFC1E470(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDMessageRecordCountAllUnreadMessagesForChatQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    long long v9 = xmmword_1E5F9BCA0;
    long long v10 = *(_OWORD *)off_1E5F9BCB0;
    uint64_t v11 = 2774;
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected false '%@' in %s at %s:%d. %@", @"IMDIsRunningInDatabaseServerProcess()", "void _IMDMessageRecordCountAllUnreadMessagesForChatQuery(CFStringRef, void (^)(int64_t, SInt64))", IMFileLocationTrimFileName(), 2774, objc_msgSend(NSString, "stringWithFormat:", @"_IMDMessageRecordCountAllUnreadMessagesForAllUnreadChats can only be called from IMDPersistenceAgent"];
    uint64_t v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v13 = v4;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  uint64_t result = IMDIsRunningInDatabaseServerProcess();
  if (result)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1AFC1E678;
    v8[3] = &unk_1E5F9BCD0;
    void v8[4] = a2;
    return _IMDPerformLockedStatementBlockWithQuery(a1, (uint64_t)v8);
  }
  return result;
}

uint64_t sub_1AFC1E678(uint64_t a1)
{
  uint64_t result = CSDBSqliteStep();
  if (result)
  {
    do
    {
      CSDBSqliteStatementInteger64ResultColumn();
      CSDBSqliteStatementInteger64ResultColumn();
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      uint64_t result = CSDBSqliteStep();
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t _IMDMessageRecordCountAllUnreadMessagesForAllUnreadChats(uint64_t a1)
{
  return _IMDMessageRecordCountAllUnreadMessagesForChatQuery(@"SELECT cm.chat_id, COUNT(1) FROM message m INNER JOIN chat_message_join cm ON m.ROWiD = cm.message_id WHERE m.item_type == 0 AND m.is_read == 0 AND m.is_from_me == 0 GROUP BY +cm.chat_id", a1);
}

CFStringRef IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts(const __CFString *a1)
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    *(void *)long long buf = 0;
    uint64_t v6 = buf;
    uint64_t v7 = 0x3052000000;
    uint64_t v8 = sub_1AFC17920;
    long long v9 = sub_1AFC17930;
    uint64_t v10 = 0;
    if (a1)
    {
      if (CFStringGetLength(a1))
      {
        v4[0] = MEMORY[0x1E4F143A8];
        v4[1] = 3221225472;
        v4[2] = sub_1AFC1E878;
        v4[3] = &unk_1E5F901A0;
        void v4[4] = buf;
        void v4[5] = a1;
        IMDRunSqlOperation((uint64_t)v4);
        a1 = (const __CFString *)*((void *)v6 + 5);
      }
      else
      {
        a1 = 0;
      }
    }
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts called by client", buf, 2u);
      }
    }
    return 0;
  }
  return a1;
}

BOOL sub_1AFC1E878(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC1E944;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC1E950;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT   m.thread_originator_part, SUM(IFNULL(part_count, 1)) FROM   message m INDEXED BY   message_idx_thread_originator_guid INNER JOIN   chat_message_join cmj ON cmj.message_id = m.ROWID WHERE   m.thread_originator_guid == ?   AND m.associated_message_guid IS NULL GROUP BY  m.thread_originator_part", (uint64_t)v5, (uint64_t)v4);
}

void sub_1AFC1E944(uint64_t a1)
{
}

BOOL sub_1AFC1E950(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    *(void *)&long long v3 = 138412546;
    long long v11 = v3;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = &v19;
      uint64_t v21 = 0x3052000000;
      uint64_t v22 = sub_1AFC17920;
      uint64_t v23 = sub_1AFC17930;
      uint64_t v24 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x3052000000;
      CFStringRef v16 = sub_1AFC17920;
      uint64_t v17 = sub_1AFC17930;
      uint64_t v18 = 0;
      uint64_t v5 = *(void *)(a1 + 40);
      v12[0] = v4;
      v12[1] = 3221225472;
      _OWORD v12[2] = sub_1AFC1EC18;
      v12[3] = &unk_1E5F90CA0;
      void v12[4] = &v19;
      void v12[5] = &v13;
      IMDSqlOperationIterateRow(v5, (uint64_t)v12);
      if ([(id)v20[5] length] && (uint64_t v6 = v14[5]) != 0)
      {
        uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        if (!v7)
        {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
          uint64_t v6 = v14[5];
        }
        objc_msgSend(v7, "setObject:forKey:", v6, v20[5], v11);
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          uint64_t v9 = v20[5];
          uint64_t v10 = v14[5];
          *(_DWORD *)long long buf = v11;
          uint64_t v26 = v9;
          __int16 v27 = 2112;
          uint64_t v28 = v10;
          _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Reply count query got invalid column data back: %@|%@", buf, 0x16u);
        }
      }
      _Block_object_dispose(&v13, 8);
      _Block_object_dispose(&v19, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1AFC1EBEC()
{
}

void sub_1AFC1EC18(uint64_t a1, long long *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 4);
  if (v4 == 1)
  {
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    uint64_t v5 = (const unsigned __int8 *)[MEMORY[0x1E4F28ED0] numberWithLongLong:IMDInt64FromSqlColumn((uint64_t)&v9)];
    uint64_t v6 = *(void *)(a1 + 40);
    goto LABEL_5;
  }
  if (!v4)
  {
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    uint64_t v5 = IMDStringFromSqlColumn((uint64_t)&v9);
    uint64_t v6 = *(void *)(a1 + 32);
LABEL_5:
    *(void *)(*(void *)(v6 + 8) + 40) = v5;
    return;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *((_DWORD *)a2 + 4);
      LODWORD(v9) = 67109120;
      DWORD1(v9) = v8;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Unexpected column in reply count query with index %d", (uint8_t *)&v9, 8u);
    }
  }
}

CFMutableArrayRef IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID(const __CFString *a1)
{
  if (a1 && CFStringGetLength(a1) > 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v2 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID", buf, 2u);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      uint64_t v8 = 3221225472;
      uint64_t v9 = (uint64_t)sub_1AFC28CA0;
      uint64_t v10 = &unk_1E5F9CC58;
      CFStringRef v11 = a1;
      CFMutableArrayRef v12 = Mutable;
      _IMDPerformLockedDatabaseBlock((uint64_t)buf);
    }
    else
    {
      *(void *)long long buf = 0;
      uint64_t v8 = (uint64_t)buf;
      uint64_t v9 = 0x2020000000;
      uint64_t v10 = 0;
      v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v6[1] = (void (*)(void))3221225472;
      void v6[2] = (void (*)(void))sub_1AFC1EF70;
      v6[3] = (void (*)(void))&unk_1E5F8D580;
      void v6[4] = (void (*)(void))buf;
      __syncXPCIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(v6, (uint64_t)a1);
      CFMutableArrayRef Mutable = *(CFMutableArrayRef *)(v8 + 24);
      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    int v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC706C4();
    }
    return 0;
  }
  return Mutable;
}

void sub_1AFC1EF70(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    int v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      size_t v7 = 0;
      uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        }
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          uint64_t v10 = (const void *)[NSString stringWithUTF8String:string];
          if (v10) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordLastFailedMessageRowID()
{
  uint64_t v5 = 0;
  size_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    int v0 = +[IMDDatabase synchronousDatabase];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1AFC1F17C;
    v4[3] = &unk_1E5F96448;
    void v4[4] = &v5;
    [(IMDRemoteDatabaseProtocol *)v0 fetchInteger64ForKey:@"lastFailedMessageRowID" completionHandler:v4];
  }
  else
  {
    v3[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v3[1] = (void (*)(void))3221225472;
    _DWORD v3[2] = (void (*)(void))sub_1AFC1F18C;
    v3[3] = (void (*)(void))&unk_1E5F8D580;
    void v3[4] = (void (*)(void))&v5;
    __syncXPCIMDMessageRecordLastFailedMessageRowID_IPCAction(v3);
  }
  uint64_t v1 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_1AFC1F164(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1F17C(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

int64_t sub_1AFC1F18C(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordLastSyncedMessageRowID()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1AFC1F300;
    v3[3] = &unk_1E5F8FF50;
    void v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery(@"select ROWID from message where LENGTH(ck_record_id) > 0 AND ck_sync_state=1 ORDER BY ROWID DESC limit 1;",
      (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v2[1] = (void (*)(void))3221225472;
    _DWORD v2[2] = (void (*)(void))sub_1AFC1F344;
    v2[3] = (void (*)(void))&unk_1E5F8D580;
    void v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordLastSyncedMessageRowID_IPCAction(v2);
  }
  uint64_t v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1AFC1F2E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC1F300(uint64_t a1)
{
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1AFC1F344(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1AFC1F384(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

int64_t sub_1AFC1F394(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordGetMostRecentMessageDate()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = sub_1AFC1F5C0;
    v5[3] = &unk_1E5F8FF50;
    void v5[4] = &v6;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT date FROM message ORDER BY date DESC, ROWID DESC LIMIT 1;",
      (uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1AFC1F604;
    v4[3] = (void (*)(void))&unk_1E5F8D580;
    void v4[4] = (void (*)(void))&v6;
    __syncXPCIMDMessageRecordGetMostRecentMessageDate_IPCAction(v4);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithLongLong:v7[3]];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v1;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Most recent date: %@", buf, 0xCu);
    }
  }
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1AFC1F584(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFC1F540);
  }
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1AFC1F5C0(uint64_t a1)
{
  uint64_t result = CSDBSqliteStatementInteger64Result();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1AFC1F604(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDMessageRecordMarkFailedAllUnsentUnfailedMessages()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_DEBUG, "Marking all unsent and failed messages as sent.", v1, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    _IMDPerformLockedStatementBlockWithQuery(@"UPDATE message SET error = ? WHERE (is_sent = 0 AND is_from_me = 1 AND error = 0)", (uint64_t)&unk_1F084D6B8);
    _IMDPerformLockedStatementBlockWithQuery(@"UPDATE message SET schedule_os_activity_scope_state_s state = 4 WHERE (is_sent = 0 AND is_from_me = 1 AND error = 39)", (uint64_t)&unk_1F084C220);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(0);
  }
}

uint64_t sub_1AFC1F710()
{
  CSDBSqliteBindInt();
  CSDBSqliteStatementPerform();
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

uint64_t sub_1AFC1F764()
{
  CSDBSqliteStatementPerform();
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

CFStringRef IMDMessageRecordGetIndentifierForMessageWithGUID(CFStringRef theString)
{
  CFStringRef v1 = theString;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      uint64_t v9 = 0;
      uint64_t v10 = &v9;
      uint64_t v11 = 0x2020000000;
      uint64_t v12 = -1;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        CFStringRef v2 = IMDMessageRecordCopyMessageForGUID(v1);
        CFStringRef v3 = v2;
        if (v2)
        {
          uint64_t Identifier = IMDMessageRecordGetIdentifier((uint64_t)v2);
          v10[3] = Identifier;
          if (IMOSLoggingEnabled())
          {
            uint64_t v5 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v6 = v10[3];
              *(_DWORD *)long long buf = 134218242;
              uint64_t v14 = v6;
              __int16 v15 = 2112;
              CFStringRef v16 = v1;
              _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_DEBUG, "Row ID is %lld for message with guid [%@]", buf, 0x16u);
            }
          }
          CFRelease(v3);
        }
      }
      else
      {
        v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
        v8[1] = (void (*)(void))3221225472;
        void v8[2] = (void (*)(void))sub_1AFC1F980;
        v8[3] = (void (*)(void))&unk_1E5F8D580;
        void v8[4] = (void (*)(void))&v9;
        __syncXPCIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(v8, (uint64_t)v1);
      }
      CFStringRef v1 = (const __CFString *)v10[3];
      _Block_object_dispose(&v9, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

int64_t sub_1AFC1F980(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDMessageRecordRetractNotificationsForMessagesMatchingChatGUIDs(const __CFArray *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordRetractNotificationsForMessagesMatchingChatGUIDs", buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    CFStringRef v3 = (void *)[MEMORY[0x1E4F1CA48] array];
    int Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      if (Count <= 1uLL) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = Count;
      }
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v5);
        CFStringRef v8 = IMDChatRecordCopyChatForGUID(ValueAtIndex);
        CFStringRef v9 = v8;
        if (v8)
        {
          objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", IMDChatRecordGetIdentifier((uint64_t)v8)));
          CFRelease(v9);
        }
        else
        {
          objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", -1));
        }
        ++v5;
      }
      while (v6 != v5);
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "_IMDMessageRecordCopyUnreadMessagesMatchingRecoverableChatIDs", buf, 2u);
      }
    }
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v12 = [v3 count];
    if (v12)
    {
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      uint64_t v25 = 3221225472;
      uint64_t v26 = sub_1AFC28DBC;
      __int16 v27 = &unk_1E5F9CC80;
      id v29 = v11;
      uint64_t v30 = v12;
      uint64_t v28 = v3;
      _IMDPerformLockedDatabaseBlock((uint64_t)buf);
    }
    else
    {

      id v11 = 0;
    }
    id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v14 = [v11 countByEnumeratingWithState:&v20 objects:v31 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v21;
      uint64_t v16 = *MEMORY[0x1E4F1CF80];
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v21 != v15) {
            objc_enumerationMutation(v11);
          }
          uint64_t v18 = IMDMessageRecordCreateFromRecordIDUnlocked(v16, [*(id *)(*((void *)&v20 + 1) + 8 * i) integerValue]);
          uint64_t v19 = (const void *)IMDMessageRecordCopyGUIDForMessage((uint64_t)v18);
          [v13 addObject:v19];
          if (v19) {
            CFRelease(v19);
          }
          if (v18) {
            CFRelease(v18);
          }
        }
        uint64_t v14 = [v11 countByEnumeratingWithState:&v20 objects:v31 count:16];
      }
      while (v14);
    }
    if ([v13 count]) {
      [+[IMDNotificationsController sharedInstance] retractNotificationsForReadMessages:v13];
    }
    if (v13) {
  }
    }
  else
  {
    __asyncXPCIMDMessageRecordRetractNotificationsForChatGuids_IPCAction(qword_1F084D6D8, (uint64_t)a1);
  }
}

CFArrayRef IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs(__CFString *a1, const __CFArray *a2, uint64_t a3, int a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  values = a1;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs", (uint8_t *)&buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
    CFStringRef v9 = IMDDatabaseTelemetryLogHandle();
    if (os_signpost_enabled(v9))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl(&dword_1AFB53000, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "MarkAsRead-Database", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
    }
    if (a1)
    {
      [v8 startTimingForKey:@"1. QueryHighestRowID"];
      IndentifierForMessageWithGUint ID = (uint64_t)IMDMessageRecordGetIndentifierForMessageWithGUID(a1);
      [v8 stopTimingForKey:@"1. QueryHighestRowID"];
      if (IndentifierForMessageWithGUID == -1)
      {

        return 0;
      }
    }
    else
    {
      IndentifierForMessageWithGUint ID = -1;
    }
    [v8 startTimingForKey:@"2. QueryChatRecordIDs"];
    uint64_t v12 = (__CFString *)[MEMORY[0x1E4F1CA48] array];
    int Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      CFIndex v14 = 0;
      if (Count <= 1uLL) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = Count;
      }
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v14);
        CFStringRef v17 = IMDChatRecordCopyChatForGUID(ValueAtIndex);
        CFStringRef v18 = v17;
        if (v17)
        {
          -[__CFString addObject:](v12, "addObject:", [MEMORY[0x1E4F28ED0] numberWithInteger:IMDChatRecordGetIdentifier((uint64_t)v17)]);
          CFRelease(v18);
        }
        else
        {
          -[__CFString addObject:](v12, "addObject:", [MEMORY[0x1E4F28ED0] numberWithInteger:-1]);
        }
        ++v14;
      }
      while (v15 != v14);
    }
    [v8 stopTimingForKey:@"2. QueryChatRecordIDs"];
    [v8 startTimingForKey:@"3. MarkAsRead"];
    if (a4)
    {
      *(void *)&long long v65 = 0;
      *((void *)&v65 + 1) = &v65;
      uint64_t v66 = 0x2020000000;
      char v67 = 0;
      uint64_t v19 = IMDGenerateInClauseForCount(1);
      CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE   message SET   is_read = 1,   date_read = ? WHERE rowid %@", v19);
      if (v20)
      {
        id v21 = objc_alloc_init(MEMORY[0x1E4F6C3F8]);
        CFStringRef v22 = IMDMessageRecordCopyMessageForGUIDUnlocked(a1);
        CFStringRef v23 = v22;
        if (v22)
        {
          uint64_t Identifier = IMDMessageRecordGetIdentifier((uint64_t)v22);
          [v21 startTimingForKey:@"Query2-Update"];
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 3221225472;
          uint64_t v54 = (uint64_t)sub_1AFC29380;
          id v55 = &unk_1E5F9CCD0;
          uint64_t v58 = a3;
          uint64_t v59 = Identifier;
          int v56 = &v65;
          CFStringRef v57 = v20;
          _IMDPerformLockedDatabaseBlock((uint64_t)&buf);
          CFRelease(v23);
        }
        else if (IMOSLoggingEnabled())
        {
          uint64_t v30 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = a1;
            _os_log_impl(&dword_1AFB53000, v30, OS_LOG_TYPE_INFO, "Unable to create message record for guid %@", (uint8_t *)&buf, 0xCu);
          }
        }
        CFRelease(v20);
        [v21 stopTimingForKey:@"Query2-Update"];
        if (IMOSLoggingEnabled())
        {
          uint64_t v31 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int v63 = 138412290;
            id v64 = v21;
            _os_log_impl(&dword_1AFB53000, v31, OS_LOG_TYPE_INFO, "Time to run db query for marking 1:1 as read when receiving remote read receipt: %@", v63, 0xCu);
          }
        }
      }
      int v32 = *(unsigned __int8 *)(*((void *)&v65 + 1) + 24);
      _Block_object_dispose(&v65, 8);
      [v8 stopTimingForKey:@"3. MarkAsRead"];
      uint64_t v33 = IMDDatabaseTelemetryLogHandle();
      if (os_signpost_enabled(v33))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1AFB53000, v33, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "MarkAsRead-Database", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
      }
      if (IMOSLoggingEnabled())
      {
        uint64_t v34 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v8;
          _os_log_impl(&dword_1AFB53000, v34, OS_LOG_TYPE_INFO, "Time to mark 1:1 as read when receiving read receipt from receiver: %@", (uint8_t *)&buf, 0xCu);
        }
      }

      if (!v32) {
        return 0;
      }
      return CFArrayCreate(0, (const void **)&values, 1, 0);
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v25 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1AFB53000, v25, OS_LOG_TYPE_INFO, "_IMDMessageRecordCopyAndMarkAsReadMessagesReceivedPriorToGuidMatchingChatGUIDs", (uint8_t *)&buf, 2u);
        }
      }
      uint64_t v26 = (long long *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v27 = [(__CFString *)v12 count];
      if (v27)
      {
        uint64_t v28 = (long long *)objc_alloc_init(MEMORY[0x1E4F6C3F8]);
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 3221225472;
        uint64_t v54 = (uint64_t)sub_1AFC28F8C;
        id v55 = &unk_1E5F9CCA8;
        BOOL v62 = IndentifierForMessageWithGUID != -1;
        int v56 = v28;
        CFStringRef v57 = v12;
        uint64_t v58 = (uint64_t)v26;
        uint64_t v59 = v27;
        uint64_t v60 = IndentifierForMessageWithGUID;
        uint64_t v61 = a3;
        _IMDPerformLockedDatabaseBlock((uint64_t)&buf);
        if (IMOSLoggingEnabled())
        {
          id v29 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            LODWORD(v65) = 138412290;
            *(void *)((char *)&v65 + 4) = v28;
            _os_log_impl(&dword_1AFB53000, v29, OS_LOG_TYPE_INFO, "Time to run db query for marking 1:1 as read when tapping/reflecting read receipt: %@", (uint8_t *)&v65, 0xCu);
          }
        }
      }
      else
      {
        uint64_t v28 = v26;
        uint64_t v26 = 0;
      }

      [v8 stopTimingForKey:@"3. MarkAsRead"];
      [v8 startTimingForKey:@"4. QueryMessageGUIDsFromRowIDs"];
      CFIndex v35 = [v26 count];
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, v35, MEMORY[0x1E4F1D510]);
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v36 = [v26 countByEnumeratingWithState:&v47 objects:v52 count:16];
      if (v36)
      {
        uint64_t v37 = *(void *)v48;
        uint64_t v38 = *MEMORY[0x1E4F1CF80];
        do
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v48 != v37) {
              objc_enumerationMutation(v26);
            }
            __int16 v40 = IMDMessageRecordCreateFromRecordIDUnlocked(v38, [*(id *)(*((void *)&v47 + 1) + 8 * i) integerValue]);
            id v41 = (const void *)IMDMessageRecordCopyGUIDForMessage((uint64_t)v40);
            CFArrayAppendValue(Mutable, v41);
            if (v41) {
              CFRelease(v41);
            }
            if (v40) {
              CFRelease(v40);
            }
          }
          uint64_t v36 = [v26 countByEnumeratingWithState:&v47 objects:v52 count:16];
        }
        while (v36);
      }
      [v8 stopTimingForKey:@"4. QueryMessageGUIDsFromRowIDs"];
      __int16 v42 = IMDDatabaseTelemetryLogHandle();
      if (os_signpost_enabled(v42))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1AFB53000, v42, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "MarkAsRead-Database", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
      }
      if (IMOSLoggingEnabled())
      {
        int v43 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v8;
          _os_log_impl(&dword_1AFB53000, v43, OS_LOG_TYPE_INFO, "Time to mark 1:1 as read when tapping/reflecting read receipt: %@", (uint8_t *)&buf, 0xCu);
        }
      }
    }
  }
  else
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v54 = 0x2020000000;
    id v55 = 0;
    v46[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v46[1] = (void (*)(void))3221225472;
    v46[2] = (void (*)(void))sub_1AFC206E4;
    v46[3] = (void (*)(void))&unk_1E5F8D580;
    v46[4] = (void (*)(void))&buf;
    __syncXPCIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(v46, (uint64_t)a1, (uint64_t)a2, a3, a4 != 0);
    CFMutableArrayRef Mutable = *(__CFArray **)(*((void *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  return Mutable;
}

void sub_1AFC206E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    uint64_t v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      size_t v7 = 0;
      id v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        }
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          uint64_t v10 = (const void *)[NSString stringWithUTF8String:string];
          if (v10) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordGetMessagesSequenceNumber()
{
  uint64_t v4 = 0;
  CFIndex v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1AFC208EC;
    v3[3] = &unk_1E5F8FF50;
    void v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery(@"SELECT seq FROM SQLITE_SEQUENCE WHERE name = 'message';",
      (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v2[1] = (void (*)(void))3221225472;
    _DWORD v2[2] = (void (*)(void))sub_1AFC20938;
    v2[3] = (void (*)(void))&unk_1E5F8D580;
    void v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordGetMessagesSequenceNumber_IPCAction(v2);
  }
  uint64_t v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1AFC208D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_1AFC208EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sqlite3_int64 result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if (result == 100)
  {
    sqlite3_int64 result = sqlite3_column_int64(*(sqlite3_stmt **)(a4 + 8), 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

int64_t sub_1AFC20938(uint64_t a1, xpc_object_t xdict)
{
  int64_t result = xpc_dictionary_get_int64(xdict, "int64_result");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessagesBetweenRowIDs(int64_t a1, int64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesBetweenRowIDs [%lld:%lld]", buf, 0x16u);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  uint64_t v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1AFC20B64;
    v8[3] = &unk_1E5F9BCF8;
    void v8[5] = a1;
    void v8[6] = a2;
    void v8[4] = buf;
    _IMDPerformLockedDatabaseBlock((uint64_t)v8);
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v7[1] = (void (*)(void))3221225472;
    _DWORD v7[2] = (void (*)(void))sub_1AFC20CDC;
    void v7[3] = (void (*)(void))&unk_1E5F8D580;
    void v7[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(v7, a1, a2);
  }
  uint64_t v5 = *(void *)(*(void *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v5;
}

void sub_1AFC20B64(uint64_t a1)
{
  uint64_t v2 = CSDBSqliteDatabaseStatementForWriting();
  if (v2 && *(void *)(v2 + 8))
  {
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    CFArrayRef v3 = (const __CFArray *)CSDBRecordStoreProcessStatement();
    int Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex v7 = Count;
      uint64_t v8 = Count;
      CFStringRef v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFArrayGetValueAtIndex(v3, v5);
        int ID = CSDBRecordGetID();
        uint64_t v11 = IMDMessageRecordCreateFromRecordIDUnlocked((uint64_t)v6, ID);
        uint64_t v12 = v11;
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          break;
        }
        if (v11) {
          goto LABEL_7;
        }
LABEL_8:
        if (v8 == ++v5) {
          goto LABEL_12;
        }
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(v6, v7, v9);
      if (!v12) {
        goto LABEL_8;
      }
LABEL_7:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v12);
      CFRelease(v12);
      goto LABEL_8;
    }
LABEL_12:
    CSDBSqliteStatementReset();
    if (v3) {
      CFRelease(v3);
    }
  }
  CFRelease(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE rowID >= ?   AND rowID <= ?   AND item_type == 0 ORDER BY message.ROWID ASC;");
}

xpc_object_t sub_1AFC20CDC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC20D70;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC20D70(uint64_t a1, uint64_t a2, void *a3)
{
  CFIndex v5 = (void *)MEMORY[0x1B3E8A120]();
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFAllocatorRef v6 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v6)
  {
    CFIndex v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  return 1;
}

void sub_1AFC20E10(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 56)) {
    CSDBSqliteBindInt();
  }
  CSDBSqliteBindInt64();
  if (*(unsigned char *)(a1 + 57)) {
    CSDBSqliteBindInt();
  }
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      CFIndex v5 = (int)Count;
      if (IMOSLoggingEnabled())
      {
        CFAllocatorRef v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v13 = 134217984;
          CFIndex v14 = v5;
          _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesAfterRowID got back %ld rows", (uint8_t *)&v13, 0xCu);
        }
      }
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, ID);
          if (v12)
          {
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
          }
          ++v9;
        }
        while (v10 != v9);
        if (!*(unsigned char *)(a1 + 57)) {
          [(__CFArray *)Mutable sortUsingComparator:&unk_1F084BF80];
        }
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
      }
    }
    CFRelease(v3);
  }
}

uint64_t sub_1AFC21004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Date = IMDMessageRecordGetDate(a2, 0);
  uint64_t Identifier = IMDMessageRecordGetDate(a3, 0);
  if (!Date || !Identifier || Date == Identifier)
  {
    uint64_t Date = IMDMessageRecordGetIdentifier(a2);
    uint64_t Identifier = IMDMessageRecordGetIdentifier(a3);
  }
  if (Date > Identifier) {
    return 1;
  }
  else {
    return -1;
  }
}

void sub_1AFC2107C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    uint64_t v4 = value;
    size_t count = xpc_array_get_count(value);
    if (IMOSLoggingEnabled())
    {
      CFAllocatorRef v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        size_t v12 = count;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %zu rows from XPC", buf, 0xCu);
      }
    }
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC21250;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    xpc_array_apply(v4, applier);
  }
  CFArrayRef v7 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v7) {
    int v8 = CFArrayGetCount(v7);
  }
  else {
    int v8 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    CFIndex v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v12) = v8;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %d rows after deserialization", buf, 8u);
    }
  }
}

uint64_t sub_1AFC21250(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFIndex v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    CFAllocatorRef v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID(void *a1, void *a2, int64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a4;
      _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Asked to load up to oldest unread or fallback message: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v9 = [a1 count];
  uint64_t v10 = [a2 count];
  if (v9 && v10 && v9 == v10)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_1AFC21528;
      v15[3] = &unk_1E5F9BD48;
      void v15[6] = a4;
      v15[7] = a1;
      v15[8] = a2;
      _OWORD v15[9] = a3;
      v15[4] = &buf;
      v15[5] = v9;
      _IMDPerformLockedDatabaseBlock((uint64_t)v15);
    }
    else
    {
      v14[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v14[1] = (void (*)(void))3221225472;
      void v14[2] = (void (*)(void))sub_1AFC219F4;
      v14[3] = (void (*)(void))&unk_1E5F8D580;
      void v14[4] = (void (*)(void))&buf;
      __syncXPCIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(v14, a3, (uint64_t)a1, (uint64_t)a2, a4);
    }
    uint64_t v12 = *(void *)(*((void *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1AFC6FD88();
    }
    return 0;
  }
  return v12;
}

uint64_t sub_1AFC21528(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t result = CSDBSqliteDatabaseConnectionForReading();
  if (result)
  {
    CSDBSqliteConnectionBeginTransactionType();
    uint64_t v3 = CSDBSqliteDatabaseStatementForWriting();
    if (v3 && *(void *)(v3 + 8) && *(void *)(a1 + 40))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        CSDBSqliteBindTextFromCFString();
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
        CSDBSqliteBindTextFromCFString();
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v5);
        CSDBSqliteBindTextFromCFString();
        uint64_t v6 = CSDBSqliteStatementInteger64Result();
        if (!v6)
        {
          if (IMOSLoggingEnabled())
          {
            CFArrayRef v7 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
            {
              uint64_t v8 = *(void *)(a1 + 48);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v29 = v8;
              __int16 v30 = 1024;
              int v31 = 0;
              _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Query failed to look up message for guid: %@ error: %d", buf, 0x12u);
            }
          }
        }
        if (!v4 || v6 >= 1 && v6 < v4) {
          uint64_t v4 = v6;
        }
        uint64_t v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134217984;
          uint64_t v29 = v4;
          _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Final adjusted row ID: %lld", buf, 0xCu);
        }
        CSDBSqliteStatementReset();
        ++v5;
      }
      while (v5 < *(void *)(a1 + 40));
    }
    CFRelease(@"SELECT * FROM( SELECT ROWID from(     SELECT m1.ROWID FROM message m1 WHERE m1.GUint ID = ?    UNION      SELECT m2.ROWID FROM message m2        INNER JOIN chat_message_join cm ON          m2.ROWint ID = cm.message_id        WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)        AND m2.is_read = 0        AND m2.item_type = 0        AND m2.is_from_me = 0 )) ORDER BY ROWID ASC LIMIT 1;");
    uint64_t v10 = CSDBSqliteDatabaseStatementForWriting();
    if (v10 && *(void *)(v10 + 8))
    {
      id v11 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      if (*(void *)(a1 + 40))
      {
        unint64_t v12 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v12);
          CSDBSqliteBindTextFromCFString();
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v12);
          CSDBSqliteBindTextFromCFString();
          CSDBSqliteBindInt();
          CSDBSqliteBindInt();
          CFArrayRef v13 = (const __CFArray *)CSDBRecordStoreProcessStatement();
          CFArrayRef v14 = v13;
          if (v13)
          {
            if (CFArrayGetCount(v13) && (int)CFArrayGetCount(v14) >= 1)
            {
              CFIndex v15 = 0;
              do
              {
                CFArrayGetValueAtIndex(v14, v15);
                uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInteger:(int)CSDBRecordGetID()];
                if (v16) {
                  [v11 addObject:v16];
                }

                ++v15;
              }
              while (v15 < (int)CFArrayGetCount(v14));
            }
            CFRelease(v14);
          }
          CSDBSqliteStatementReset();
          ++v12;
        }
        while (v12 < *(void *)(a1 + 40));
      }
      uint64_t v17 = (void *)MEMORY[0x1B3E8A120]();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (id)objc_msgSend((id)objc_msgSend(v11, "allObjects"), "sortedArrayUsingComparator:", &unk_1F084BFC0);

      CFArrayRef v18 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v18)
      {
        CFIndex Count = CFArrayGetCount(v18);
        uint64_t v20 = Count << 32;
        if (Count << 32)
        {
          uint64_t v21 = (int)Count;
          uint64_t v22 = *MEMORY[0x1E4F1CF80];
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
          if (v20 >= 1)
          {
            CFIndex v24 = 0;
            if (v21 <= 1) {
              uint64_t v25 = 1;
            }
            else {
              uint64_t v25 = v21;
            }
            do
            {
              if (*(void *)(a1 + 72) <= v24) {
                break;
              }
              uint64_t v26 = objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v24), "integerValue");
              uint64_t v27 = IMDMessageRecordCreateFromRecordIDUnlocked(v22, v26);
              if (v27)
              {
                CFArrayAppendValue(Mutable, v27);
                CFRelease(v27);
              }
              ++v24;
            }
            while (v25 != v24);
          }
          CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
        }
      }
    }
    CFRelease(@"SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND m.ROWID >= ? AND m.item_type == 0  AND m.is_read == 0 ORDER BY cm.chat_id, cm.message_id DESC LIMIT ?;");
    CSDBSqliteConnectionCommit();
    return CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

uint64_t sub_1AFC219E8(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 compare:a2];
}

xpc_object_t sub_1AFC219F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC21A88;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC21A88(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  unint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate(int64_t a1, int64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  CFArrayRef v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    MostRecentMessageuint64_t Date = IMDMessageRecordGetMostRecentMessageDate();
    uint64_t v5 = a2 & ~(a2 >> 63);
    if (v5 <= MostRecentMessageDate)
    {
      if (IMOSLoggingEnabled())
      {
        CFArrayRef v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134218240;
          uint64_t v17 = a1;
          __int16 v18 = 2048;
          uint64_t v19 = v5;
          _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate limit: %lld  date: %lld", buf, 0x16u);
        }
      }
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1AFC21D8C;
      v11[3] = &unk_1E5F90108;
      void v11[5] = v5;
      v11[6] = a1;
      void v11[4] = &v12;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE date > ?   AND item_type == 0   AND error != 0   AND is_from_me == 1   AND is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT ?;",
        (uint64_t)v11);
    }
    else
    {
      uint64_t v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v17 = a2 & ~(a2 >> 63);
        __int16 v18 = 2048;
        uint64_t v19 = MostRecentMessageDate;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "The date is out of bounds.  We were asked for rows after date: [%lld] which exceeds the most recent message [%lld]", buf, 0x16u);
      }
    }
  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v10[1] = (void (*)(void))3221225472;
    _OWORD v10[2] = (void (*)(void))sub_1AFC21ECC;
    v10[3] = (void (*)(void))&unk_1E5F8D580;
    void v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate_IPCAction(v10, a1, a2);
  }
  uint64_t v8 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1AFC21D8C(uint64_t a1)
{
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      uint64_t v5 = (int)Count;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v8 = Mutable;
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            CFArrayRef v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC21ECC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC21F60;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC21F60(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesDataDetectionResults(int64_t a1, int64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  CFArrayRef v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t MessagesSequenceNumber = IMDMessageRecordGetMessagesSequenceNumber();
    uint64_t v5 = a2 & ~(a2 >> 63);
    if (v5 <= MessagesSequenceNumber)
    {
      if (IMOSLoggingEnabled())
      {
        CFArrayRef v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134218240;
          uint64_t v17 = a1;
          __int16 v18 = 2048;
          uint64_t v19 = v5;
          _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesDataDetectionResults limit: %lld  rowID: %lld", buf, 0x16u);
        }
      }
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1AFC22264;
      v11[3] = &unk_1E5F90108;
      void v11[5] = v5;
      v11[6] = a1;
      void v11[4] = &v12;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ROWID > ?   AND item_type == 0   AND has_dd_results == 1 ORDER BY ROWID DESC LIMIT ?;",
        (uint64_t)v11);
    }
    else
    {
      uint64_t v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v17 = a2 & ~(a2 >> 63);
        __int16 v18 = 2048;
        uint64_t v19 = MessagesSequenceNumber;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "The RowID is out of bounds.  We were asked for rows after [%lld] which exceeds the current sequence number [%lld]", buf, 0x16u);
      }
    }
  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v10[1] = (void (*)(void))3221225472;
    _OWORD v10[2] = (void (*)(void))sub_1AFC223A4;
    v10[3] = (void (*)(void))&unk_1E5F8D580;
    void v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(v10, a1, a2);
  }
  uint64_t v8 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1AFC22264(uint64_t a1)
{
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      uint64_t v5 = (int)Count;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v8 = Mutable;
        CFIndex v9 = 0;
        if (v5 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v5;
        }
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          int ID = CSDBRecordGetID();
          uint64_t v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            CFArrayRef v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1AFC223A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC22438;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC22438(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMostRecentUseageOfAddresses(const __CFArray *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  CFArrayRef v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v10[1] = (void (*)(void))3221225472;
    _OWORD v10[2] = (void (*)(void))sub_1AFC22854;
    v10[3] = (void (*)(void))&unk_1E5F8D580;
    void v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyMostRecentUseageOfAddresses_IPCAction(v10, (uint64_t)a1);
    goto LABEL_14;
  }
  if (!a1)
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC706F8();
    }
    goto LABEL_9;
  }
  int Count = CFArrayGetCount(a1);
  if (Count > 0)
  {
    CFArrayRef v3 = IMDMessageRecordCopyMostRecentUseageOfAddressesQuery(Count);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1AFC22710;
    v11[3] = &unk_1E5F9BCF8;
    void v11[5] = v3;
    v11[6] = a1;
    void v11[4] = &v12;
    _IMDPerformLockedDatabaseBlock((uint64_t)v11);
    if (v3) {
      CFRelease(v3);
    }
LABEL_9:
    if (v13[3])
    {
      uint64_t v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = v13[3];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v6;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Matching addresses (in order) are %@", buf, 0xCu);
      }
    }
    goto LABEL_14;
  }
  CFArrayRef v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1AFC7072C();
  }
LABEL_14:
  uint64_t v8 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1AFC226DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC22710(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    xpc_object_t result = CSDBSqliteDatabaseConnectionForReading();
    if (result)
    {
      xpc_object_t result = CSDBSqliteConnectionStatementForSQL();
      if (result)
      {
        uint64_t v2 = result;
        if (*(void *)(result + 8))
        {
          CSDBSqliteBindTextFromCFArrayOfCFStrings();
          if (sqlite3_step(*(sqlite3_stmt **)(v2 + 8)) == 100)
          {
            CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            uint64_t v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
            do
            {
              if (sqlite3_column_text(*(sqlite3_stmt **)(v2 + 8), 1))
              {
                uint64_t v5 = sqlite3_column_text(*(sqlite3_stmt **)(v2 + 8), 1);
                CFStringRef v6 = CFStringCreateWithCString(v3, (const char *)v5, 0x8000100u);
                if (v6)
                {
                  CFStringRef v7 = v6;
                  uint64_t v8 = *(__CFArray **)(*(void *)(*(void *)(v1 + 32) + 8) + 24);
                  if (!v8)
                  {
                    *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = CFArrayCreateMutable(v3, 0, v4);
                    uint64_t v8 = *(__CFArray **)(*(void *)(*(void *)(v1 + 32) + 8) + 24);
                  }
                  CFArrayAppendValue(v8, v7);
                  CFRelease(v7);
                }
              }
            }
            while (sqlite3_step(*(sqlite3_stmt **)(v2 + 8)) == 100);
          }
          return CSDBSqliteStatementReset();
        }
      }
    }
  }
  return result;
}

void sub_1AFC22854(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    uint64_t v4 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v6 = count;
      size_t v7 = 0;
      uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        }
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          uint64_t v10 = (const void *)[NSString stringWithUTF8String:string];
          if (v10) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v10);
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    long long v21 = xmmword_1E5F9BD68;
    long long v22 = *(_OWORD *)off_1E5F9BD78;
    uint64_t v23 = 4018;
    uint64_t v6 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"messageGUID", "CFArrayRef IMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 4018, objc_msgSend(NSString, "stringWithFormat:", &stru_1F084E970)];
    size_t v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v25 = v6;
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(void *)&long long v21 = 0;
  *((void *)&v21 + 1) = &v21;
  long long v22 = 0x2020000000uLL;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (a2)
    {
      CFIndex v9 = v19;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_1AFC22C94;
      v19[3] = &unk_1E5F9BD98;
      void v19[4] = a1;
      v19[5] = a2;
      uint64_t v10 = (long long **)&v20;
      id v11 = @"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE (associated_message_guid = ?) AND (handle_id IN (SELECT ROWID FROM handle where id = ?));";
    }
    else
    {
      CFIndex v9 = v17;
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      void v17[2] = sub_1AFC22DE4;
      v17[3] = &unk_1E5F8EBC0;
      v17[4] = a1;
      uint64_t v10 = (long long **)&v18;
      id v11 = @"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ((associated_message_guid = ?) AND (is_from_me = 1));";
    }
    *uint64_t v10 = &v21;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v11, (uint64_t)v9);
  }
  else
  {
    v16[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v16[1] = (void (*)(void))3221225472;
    int v16[2] = (void (*)(void))sub_1AFC22E4C;
    v16[3] = (void (*)(void))&unk_1E5F95438;
    void v16[4] = (void (*)(void))&v21;
    v16[5] = a3;
    __syncXPCIMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender_IPCAction(v16, a1, a2);
  }
  uint64_t v12 = IMLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = [*(id *)(*((void *)&v21 + 1) + 24) count];
    *(_DWORD *)long long buf = 134218498;
    uint64_t v25 = v13;
    __int16 v26 = 2112;
    uint64_t v27 = a1;
    __int16 v28 = 2112;
    uint64_t v29 = a2;
    _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Found %ld associated messages for messageGUID: %@, forSender: %@", buf, 0x20u);
  }
  uint64_t v14 = *(void *)(*((void *)&v21 + 1) + 24);
  _Block_object_dispose(&v21, 8);
  return v14;
}

__CFArray *sub_1AFC22C94(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  xpc_object_t result = sub_1AFC22D08(v2);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

__CFArray *sub_1AFC22D08(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count << 32 < 1)
  {
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    uint64_t v3 = (int)Count;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (int)Count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFIndex v6 = 0;
      if (v3 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v3;
      }
      do
      {
        CFArrayGetValueAtIndex(a1, v6);
        int ID = CSDBRecordGetID();
        CFIndex v9 = IMDMessageRecordCreateFromRecordIDUnlocked(v4, ID);
        if (v9)
        {
          uint64_t v10 = v9;
          CFArrayAppendValue(Mutable, v9);
          CFRelease(v10);
        }
        ++v6;
      }
      while (v7 != v6);
    }
  }
  CFRelease(a1);
  return Mutable;
}

__CFArray *sub_1AFC22DE4(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  xpc_object_t result = sub_1AFC22D08(v2);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1AFC22E4C(uint64_t a1, xpc_object_t xdict)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    uint64_t v5 = (void *)result;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_1AFC23014;
    v12[3] = &unk_1E5F93D30;
    void v12[4] = Mutable;
    uint64_t result = xpc_array_apply(v5, v12);
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
  if (*(void *)(a1 + 40))
  {
    uint64_t result = xpc_dictionary_get_int64(xdict, "error_code");
    if (result)
    {
      uint64_t v7 = result;
      string = xpc_dictionary_get_string(xdict, "error_domain");
      uint64_t result = (uint64_t)xpc_dictionary_get_string(xdict, "error_description");
      if (string)
      {
        if (result) {
          CFIndex v9 = (const char *)result;
        }
        else {
          CFIndex v9 = "";
        }
        uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v11 = [NSString stringWithUTF8String:string];
        uint64_t v13 = *MEMORY[0x1E4F28568];
        v14[0] = [NSString stringWithUTF8String:v9];
        uint64_t result = objc_msgSend(v10, "errorWithDomain:code:userInfo:", v11, v7, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1));
        **(void **)(a1 + 40) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1AFC23014(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesToUploadToCloudKitWithLimit(int64_t a1, int64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        int64_t v16 = a1;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesToUploadToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    if (a2 == 4) {
      uint64_t v5 = @"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ck_sync_state == 0 AND TRIM(guid) <> '' AND (service in ('iMessage', 'SMS', 'RCS', 'SatelliteSMS', 'iMessageLite'))AND was_detonated == 0 AND schedule_type != 2 AND balloon_bundle_id == 'com.apple.messages.chatbot' ORDER BY date LIMIT ? ;";
    }
    else {
      uint64_t v5 = @"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ck_sync_state == 0 AND TRIM(guid) <> '' AND (service in ('iMessage', 'SMS', 'RCS', 'SatelliteSMS', 'iMessageLite'))AND was_detonated == 0 AND schedule_type != 2 AND (balloon_bundle_id IS NULL OR balloon_bundle_id != 'com.apple.messages.chatbot') ORDER BY date LIMIT ? ;";
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    _OWORD v10[2] = sub_1AFC232BC;
    v10[3] = &unk_1E5F900E0;
    void v10[4] = &v11;
    void v10[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v5, (uint64_t)v10);
  }
  else
  {
    v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v9[1] = (void (*)(void))3221225472;
    _DWORD v9[2] = (void (*)(void))sub_1AFC2346C;
    v9[3] = (void (*)(void))&unk_1E5F8D580;
    void v9[4] = (void (*)(void))&v11;
    __syncXPCIMDMessageRecordCopyMessagesToUploadToCloudKit_IPCAction(v9, a1, a2);
    if (IMOSLoggingEnabled())
    {
      CFIndex v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  uint64_t v7 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1AFC232BC(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CSDBSqliteBindInt64();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_1AFC22D08(v2);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
        int v11 = 134217984;
        CFIndex v12 = Count;
        uint64_t v7 = "Number of results %ld";
        uint64_t v8 = v5;
        uint32_t v9 = 12;
LABEL_8:
        _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v11, v9);
      }
    }
  }
  else if (v4)
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      uint64_t v7 = "Number of results 0";
      uint64_t v8 = v10;
      uint32_t v9 = 2;
      goto LABEL_8;
    }
  }
}

uint64_t sub_1AFC2346C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    int v4 = (void *)result;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC23538;
    applier[3] = &unk_1E5F93D30;
    applier[4] = Mutable;
    uint64_t result = xpc_array_apply(v4, applier);
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
  return result;
}

uint64_t sub_1AFC23538(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKitWithLimit(int64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint32_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      CFArrayRef v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        int64_t v13 = a1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC237B0;
    void v7[3] = &unk_1E5F901A0;
    void v7[4] = &v8;
    void v7[5] = a1;
    IMDRunSqlOperation((uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC23FC8;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

BOOL sub_1AFC237B0(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC2387C;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC23888;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT ROWID, guid, thread_originator_guid, thread_originator_part FROM message where ck_sync_state == 8 AND (service == 'iMessage' OR service == 'SMS') order by date limit ? ;",
           (uint64_t)v5,
           (uint64_t)v4);
}

void sub_1AFC2387C(uint64_t a1)
{
}

BOOL sub_1AFC23888(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  uint64_t v3 = 0;
  if (result)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v43 = 0;
      double v44 = &v43;
      uint64_t v45 = 0x2020000000;
      uint64_t v46 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = &v37;
      uint64_t v39 = 0x3052000000;
      __int16 v40 = sub_1AFC17920;
      id v41 = sub_1AFC17930;
      uint64_t v42 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = &v31;
      uint64_t v33 = 0x3052000000;
      uint64_t v34 = sub_1AFC17920;
      CFIndex v35 = sub_1AFC17930;
      uint64_t v36 = 0;
      uint64_t v25 = 0;
      __int16 v26 = &v25;
      uint64_t v27 = 0x3052000000;
      __int16 v28 = sub_1AFC17920;
      uint64_t v29 = sub_1AFC17930;
      uint64_t v30 = 0;
      uint64_t v5 = *(void *)(a1 + 40);
      v24[0] = v4;
      v24[1] = 3221225472;
      void v24[2] = sub_1AFC23E00;
      v24[3] = &unk_1E5F9BDC0;
      uint8_t v24[4] = &v43;
      v24[5] = &v37;
      void v24[6] = &v31;
      void v24[7] = &v25;
      IMDSqlOperationIterateRow(v5, (uint64_t)v24);
      if (!v44[3] || ![(id)v38[5] length] || !objc_msgSend((id)v32[5], "length")) {
        break;
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFNumberRef v7 = CFNumberCreate(allocator, kCFNumberLongLongType, v44 + 3);
        CFDictionarySetValue(Mutable, @"ROWID", v7);
        CFDictionarySetValue(Mutable, @"MID", (const void *)v38[5]);
        CFDictionarySetValue(Mutable, @"TOID", (const void *)v32[5]);
        if ([(id)v26[5] length]) {
          CFDictionarySetValue(Mutable, @"TOPart", (const void *)v26[5]);
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v8 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            uint64_t v9 = v44[3];
            uint64_t v10 = v38[5];
            uint64_t v11 = v32[5];
            uint64_t v12 = v26[5];
            *(_DWORD *)long long buf = 134218754;
            uint64_t v48 = v9;
            __int16 v49 = 2112;
            uint64_t v50 = v10;
            __int16 v51 = 2112;
            uint64_t v52 = v11;
            __int16 v53 = 2112;
            uint64_t v54 = v12;
            _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Found message %lld/%@ to update : originator GUID/part: %@/%@", buf, 0x2Au);
          }
        }
        int64_t v13 = v3;
        if (!v3) {
          int64_t v13 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        }
        uint64_t v3 = v13;
        CFArrayAppendValue(v13, Mutable);
        CFRelease(Mutable);
        if (v7) {
          CFRelease(v7);
        }
        goto LABEL_20;
      }
      if (IMOSLoggingEnabled())
      {
        long long v21 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          uint64_t v22 = v38[5];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v48 = v22;
          uint64_t v18 = v21;
          uint64_t v19 = "Message Update v1 Query - unable to create row dictionary for messageId: %@, skipping!";
          uint32_t v20 = 12;
LABEL_19:
          _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, v19, buf, v20);
        }
      }
LABEL_20:
      _Block_object_dispose(&v25, 8);
      _Block_object_dispose(&v31, 8);
      _Block_object_dispose(&v37, 8);
      _Block_object_dispose(&v43, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
      if (!result) {
        goto LABEL_25;
      }
    }
    if (!IMOSLoggingEnabled()) {
      goto LABEL_20;
    }
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_20;
    }
    uint64_t v15 = v44[3];
    uint64_t v16 = v38[5];
    uint64_t v17 = v32[5];
    *(_DWORD *)long long buf = 134218498;
    uint64_t v48 = v15;
    __int16 v49 = 2112;
    uint64_t v50 = v16;
    __int16 v51 = 2112;
    uint64_t v52 = v17;
    uint64_t v18 = v14;
    uint64_t v19 = "Message Update v1 query got invalid column data back: rowid %lld messageId:%@ threadOriginatorGUID:%@";
    uint32_t v20 = 32;
    goto LABEL_19;
  }
LABEL_25:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

void sub_1AFC23DB4()
{
}

void sub_1AFC23E00(void *a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      *(void *)(*(void *)(a1[4] + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v8);
      return;
    case 1:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      CFIndex v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v7 = a1[5];
      goto LABEL_9;
    case 2:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      CFIndex v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v7 = a1[6];
      goto LABEL_9;
    case 3:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      CFIndex v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v7 = a1[7];
LABEL_9:
      *(void *)(*(void *)(v7 + 8) + 40) = v6;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        uint64_t v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          int v5 = *((_DWORD *)a2 + 4);
          LODWORD(v_Block_object_dispose(&STACK[0x200], 8) = 67109120;
          DWORD1(v_Block_object_dispose(&STACK[0x200], 8) = v5;
          _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Unexpected column in Message Update v1 with index %d", (uint8_t *)&v8, 8u);
        }
      }
      break;
  }
}

uint64_t sub_1AFC23FC8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t result = xpc_array_get_count((xpc_object_t)result);
    if (result)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = sub_1AFC2408C;
      applier[3] = &unk_1E5F93EB8;
      applier[4] = v5;
      uint64_t result = xpc_array_apply(v4, applier);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
    }
  }
  return result;
}

uint64_t sub_1AFC2408C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:4];
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "ROWID")), @"ROWID");
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", xpc_dictionary_get_string(a3, "MID")), @"MID");
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", xpc_dictionary_get_string(a3, "TOID")), @"TOID");
  string = xpc_dictionary_get_string(a3, "TOPart");
  if (string) {
    objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", string), @"TOPart");
  }
  [*(id *)(a1 + 32) addObject:v5];

  return 1;
}

uint64_t IMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKitWithLimit(int64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        int64_t v13 = a1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC243F4;
    void v7[3] = &unk_1E5F901A0;
    void v7[4] = &v8;
    void v7[5] = a1;
    IMDRunSqlOperation((uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC24D1C;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

BOOL sub_1AFC243F4(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC244C0;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC244CC;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT ROWID, guid, syndication_ranges, synced_syndication_ranges FROM message where syndication_ranges is not null AND (synced_syndication_ranges is null or syndication_ranges != synced_syndication_ranges) AND (service == 'iMessage' OR service == 'SMS') order by date limit ? ;",
           (uint64_t)v5,
           (uint64_t)v4);
}

void sub_1AFC244C0(uint64_t a1)
{
}

BOOL sub_1AFC244CC(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  uint64_t v4 = 0;
  if (result)
  {
    uint64_t v5 = MEMORY[0x1E4F143A8];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    *(void *)&long long v3 = 138412290;
    long long v29 = v3;
    do
    {
      uint64_t v50 = 0;
      __int16 v51 = &v50;
      uint64_t v52 = 0x2020000000;
      uint64_t v53 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = &v44;
      uint64_t v46 = 0x3052000000;
      long long v47 = sub_1AFC17920;
      uint64_t v48 = sub_1AFC17930;
      uint64_t v49 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = &v38;
      uint64_t v40 = 0x3052000000;
      id v41 = sub_1AFC17920;
      uint64_t v42 = sub_1AFC17930;
      uint64_t v43 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = &v32;
      uint64_t v34 = 0x3052000000;
      CFIndex v35 = sub_1AFC17920;
      uint64_t v36 = sub_1AFC17930;
      uint64_t v37 = 0;
      uint64_t v6 = *(void *)(a1 + 40);
      v31[0] = v5;
      v31[1] = 3221225472;
      v31[2] = sub_1AFC24B54;
      void v31[3] = &unk_1E5F9BDC0;
      v31[4] = &v50;
      v31[5] = &v44;
      v31[6] = &v38;
      v31[7] = &v32;
      IMDSqlOperationIterateRow(v6, (uint64_t)v31);
      if (v51[3] && [(id)v45[5] length] && objc_msgSend((id)v39[5], "length"))
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, v51 + 3);
          CFDictionarySetValue(Mutable, @"ROWID", v8);
          CFDictionarySetValue(Mutable, @"MID", (const void *)v45[5]);
          if ([(id)v39[5] length]) {
            CFDictionarySetValue(Mutable, @"SR", (const void *)v39[5]);
          }
          if (objc_msgSend((id)v33[5], "length", v29)) {
            CFDictionarySetValue(Mutable, @"SSR", (const void *)v33[5]);
          }
          if (IMOSLoggingEnabled())
          {
            uint64_t v9 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              uint64_t v10 = v51[3];
              uint64_t v11 = v45[5];
              uint64_t v12 = v39[5];
              uint64_t v13 = v33[5];
              *(_DWORD *)long long buf = 134218754;
              uint64_t v55 = v10;
              __int16 v56 = 2112;
              uint64_t v57 = v11;
              __int16 v58 = 2112;
              uint64_t v59 = v12;
              __int16 v60 = 2112;
              uint64_t v61 = v13;
              _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Found message %lld/%@ to update : originator GUID/part: %@/%@", buf, 0x2Au);
            }
          }
          uint64_t v14 = v4;
          if (!v4) {
            uint64_t v14 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          }
          uint64_t v4 = v14;
          CFArrayAppendValue(v14, Mutable);
          CFRelease(Mutable);
          if (v8) {
            CFRelease(v8);
          }
          uint64_t v15 = (void *)v45[5];
          if (v15)
          {

            v45[5] = 0;
          }
          uint64_t v16 = (void *)v39[5];
          if (v16)
          {

            v39[5] = 0;
          }
          uint64_t v17 = (void *)v33[5];
          if (!v17) {
            goto LABEL_33;
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v25 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              uint64_t v26 = v45[5];
              *(_DWORD *)long long buf = v29;
              uint64_t v55 = v26;
              _os_log_impl(&dword_1AFB53000, v25, OS_LOG_TYPE_INFO, "Message Update v1 Query - unable to create row dictionary for messageId: %@, skipping!", buf, 0xCu);
            }
          }
          uint64_t v27 = (void *)v45[5];
          if (v27)
          {

            v45[5] = 0;
          }
          __int16 v28 = (void *)v39[5];
          if (v28)
          {

            v39[5] = 0;
          }
          uint64_t v17 = (void *)v33[5];
          if (!v17) {
            goto LABEL_33;
          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = v51[3];
            uint64_t v20 = v45[5];
            uint64_t v21 = v39[5];
            uint64_t v22 = v33[5];
            *(_DWORD *)long long buf = 134218754;
            uint64_t v55 = v19;
            __int16 v56 = 2112;
            uint64_t v57 = v20;
            __int16 v58 = 2112;
            uint64_t v59 = v21;
            __int16 v60 = 2112;
            uint64_t v61 = v22;
            _os_log_impl(&dword_1AFB53000, v18, OS_LOG_TYPE_INFO, "Message Update T2 query got invalid column data back: rowid %lld messageId:%@ syndicationRanges:%@ syncedSyndicationRanges:%@", buf, 0x2Au);
          }
        }
        uint64_t v23 = (void *)v45[5];
        if (v23)
        {

          v45[5] = 0;
        }
        CFIndex v24 = (void *)v39[5];
        if (v24)
        {

          v39[5] = 0;
        }
        uint64_t v17 = (void *)v33[5];
        if (!v17) {
          goto LABEL_33;
        }
      }

      v33[5] = 0;
LABEL_33:
      _Block_object_dispose(&v32, 8);
      _Block_object_dispose(&v38, 8);
      _Block_object_dispose(&v44, 8);
      _Block_object_dispose(&v50, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

void sub_1AFC24B08()
{
}

void sub_1AFC24B54(void *a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      *(void *)(*(void *)(a1[4] + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v8);
      return;
    case 1:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v7 = a1[5];
      goto LABEL_9;
    case 2:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v7 = a1[6];
      goto LABEL_9;
    case 3:
      long long v8 = *a2;
      uint64_t v9 = *((void *)a2 + 2);
      uint64_t v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      uint64_t v7 = a1[7];
LABEL_9:
      *(void *)(*(void *)(v7 + 8) + 40) = v6;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        uint64_t v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          int v5 = *((_DWORD *)a2 + 4);
          LODWORD(v_Block_object_dispose(&STACK[0x200], 8) = 67109120;
          DWORD1(v_Block_object_dispose(&STACK[0x200], 8) = v5;
          _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Unexpected column in Message Update v1 with index %d", (uint8_t *)&v8, 8u);
        }
      }
      break;
  }
}

uint64_t sub_1AFC24D1C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t result = xpc_array_get_count((xpc_object_t)result);
    if (result)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = sub_1AFC24DE0;
      applier[3] = &unk_1E5F93EB8;
      applier[4] = v5;
      uint64_t result = xpc_array_apply(v4, applier);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
    }
  }
  return result;
}

uint64_t sub_1AFC24DE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:4];
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "ROWID")), @"ROWID");
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", xpc_dictionary_get_string(a3, "MID")), @"MID");
  string = xpc_dictionary_get_string(a3, "SR");
  if (string) {
    objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", string), @"SR");
  }
  uint64_t v7 = xpc_dictionary_get_string(a3, "SSR");
  if (v7) {
    objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", v7), @"SSR");
  }
  [*(id *)(a1 + 32) addObject:v5];
  if (v5) {

  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKitWithLimit(int64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        int64_t v13 = a1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1AFC2514C;
    void v7[3] = &unk_1E5F901A0;
    void v7[4] = &v8;
    void v7[5] = a1;
    IMDRunSqlOperation((uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v6[1] = (void (*)(void))3221225472;
    void v6[2] = (void (*)(void))sub_1AFC25804;
    v6[3] = (void (*)(void))&unk_1E5F8D580;
    void v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      long long v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

BOOL sub_1AFC2514C(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC25218;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1AFC25224;
  v4[3] = &unk_1E5F90178;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT ROWID, guid FROM message where ck_sync_state == 9 AND (service in ('iMessage', 'SMS', 'RCS', 'SatelliteSMS', 'iMessageLite')) order by date limit ? ;",
           (uint64_t)v5,
           (uint64_t)v4);
}

void sub_1AFC25218(uint64_t a1)
{
}

BOOL sub_1AFC25224(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  long long v3 = 0;
  if (result)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v27 = 0;
      __int16 v28 = &v27;
      uint64_t v29 = 0x2020000000;
      uint64_t v30 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = &v21;
      uint64_t v23 = 0x3052000000;
      CFIndex v24 = sub_1AFC17920;
      uint64_t v25 = sub_1AFC17930;
      uint64_t v26 = 0;
      uint64_t v5 = *(void *)(a1 + 40);
      v20[0] = v4;
      v20[1] = 3221225472;
      v20[2] = sub_1AFC256A8;
      v20[3] = &unk_1E5F90CA0;
      void v20[4] = &v27;
      v20[5] = &v21;
      IMDSqlOperationIterateRow(v5, (uint64_t)v20);
      if (v28[3] && [(id)v22[5] length])
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFNumberRef v7 = CFNumberCreate(allocator, kCFNumberLongLongType, v28 + 3);
          CFDictionarySetValue(Mutable, @"ROWID", v7);
          CFDictionarySetValue(Mutable, @"MID", (const void *)v22[5]);
          if (IMOSLoggingEnabled())
          {
            uint64_t v8 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              uint64_t v9 = v28[3];
              uint64_t v10 = v22[5];
              *(_DWORD *)long long buf = 134218242;
              uint64_t v32 = v9;
              __int16 v33 = 2112;
              uint64_t v34 = v10;
              _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "Found message %lld/%@ to update", buf, 0x16u);
            }
          }
          uint64_t v11 = v3;
          if (!v3) {
            uint64_t v11 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          }
          long long v3 = v11;
          CFArrayAppendValue(v11, Mutable);
          uint64_t v12 = (const void *)v22[5];
          if (v12)
          {
            CFRelease(v12);
            v22[5] = 0;
          }
          CFRelease(Mutable);
          if (v7) {
            CFRelease(v7);
          }
          goto LABEL_20;
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            uint64_t v18 = v22[5];
            *(_DWORD *)long long buf = 138412290;
            uint64_t v32 = v18;
            _os_log_impl(&dword_1AFB53000, v17, OS_LOG_TYPE_INFO, "Message Update v3 Query - unable to create row dictionary for messageId: %@, skipping!", buf, 0xCu);
          }
        }
        uint64_t v16 = (const void *)v22[5];
        if (!v16) {
          goto LABEL_20;
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          int64_t v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = v28[3];
            uint64_t v15 = v22[5];
            *(_DWORD *)long long buf = 134218242;
            uint64_t v32 = v14;
            __int16 v33 = 2112;
            uint64_t v34 = v15;
            _os_log_impl(&dword_1AFB53000, v13, OS_LOG_TYPE_INFO, "Message Update v3 query got invalid column data back: rowid %lld messageId:%@", buf, 0x16u);
          }
        }
        uint64_t v16 = (const void *)v22[5];
        if (!v16) {
          goto LABEL_20;
        }
      }
      CFRelease(v16);
      v22[5] = 0;
LABEL_20:
      _Block_object_dispose(&v21, 8);
      _Block_object_dispose(&v27, 8);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

void sub_1AFC25674()
{
}

void sub_1AFC256A8(uint64_t a1, long long *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a2 + 4);
  if (v3 == 1)
  {
    long long v6 = *a2;
    uint64_t v7 = *((void *)a2 + 2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = IMDStringFromSqlColumn((uint64_t)&v6);
  }
  else if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *((_DWORD *)a2 + 4);
        LODWORD(v6) = 67109120;
        DWORD1(v6) = v5;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Unexpected column in Message Update v3 with index %d", (uint8_t *)&v6, 8u);
      }
    }
  }
  else
  {
    long long v6 = *a2;
    uint64_t v7 = *((void *)a2 + 2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v6);
  }
}

uint64_t sub_1AFC25804(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t result = xpc_array_get_count((xpc_object_t)result);
    if (result)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = sub_1AFC258C8;
      applier[3] = &unk_1E5F93EB8;
      applier[4] = v5;
      uint64_t result = xpc_array_apply(v4, applier);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
    }
  }
  return result;
}

uint64_t sub_1AFC258C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:4];
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "ROWID")), @"ROWID");
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSString, "stringWithUTF8String:", xpc_dictionary_get_string(a3, "MID")), @"MID");
  [*(id *)(a1 + 32) addObject:v5];

  return 1;
}

void IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync", (uint8_t *)v2, 2u);
      }
    }
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    IMDSqlOperationExecuteQuery((uint64_t)v2, @"update message set ck_sync_state=0,ck_record_id='',ck_record_change_tag='';update attachment set ck_sync_state=0, ck_server_change_token_blob='';update recoverable_message_part set ck_sync_state=0;",
      (uint64_t)&unk_1F084D6F8);
    IMDSqlOperationExecuteQuery((uint64_t)v2, @"update message set synced_syndication_ranges=NULL where synced_syndication_ranges is not null;",
      (uint64_t)&unk_1F084C260);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync(0);
    if (IMOSLoggingEnabled())
    {
      uint64_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Returned from DB call after marking all msgs as dirty.", (uint8_t *)v2, 2u);
      }
    }
  }
}

void sub_1AFC25B04()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync updated messages as dirty ", v1, 2u);
    }
  }
}

void sub_1AFC25BA4()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDMarkMessageForT2UpdateSync updated messages with syndicationRanges as dirty for T2 update", v1, 2u);
    }
  }
}

uint64_t IMDMessageRecordCopyRecordIDsAndGUIDsToDeleteWithLimit(sqlite3_int64 a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  int64_t v13 = &v12;
  uint64_t v14 = 0x3052000000;
  uint64_t v15 = sub_1AFC17920;
  uint64_t v16 = sub_1AFC17930;
  id v17 = 0;
  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyRecordIDsAndGUIDsToDeleteWithLimit is in IMDP with limit %lld", buf, 0xCu);
      }
    }
    long long v19 = 0u;
    memset(v20, 0, sizeof(v20));
    *(_OWORD *)long long buf = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, @" select * from sync_deleted_messages where LENGTH(recordID) > 0 limit ?;");
    IMDSqlStatementBindInt64((uint64_t)v20, a1);
    while (IMDSqlOperationHasRows((uint64_t)buf))
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v20);
      if (Row) {
        [(id)v13[5] addObject:Row];
      }
    }
    IMDSqlOperationFinishQuery((uint64_t)buf);
    uint64_t v11 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v11);
    if (v11)
    {
      uint64_t v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1AFC70760(&v11, v7);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyRecordIDsAndGUIDsToDeleteWithLimit is in imagent with limit %lld", buf, 0xCu);
      }
    }
    v10[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v10[1] = (void (*)(void))3221225472;
    _OWORD v10[2] = (void (*)(void))sub_1AFC25FD4;
    v10[3] = (void (*)(void))&unk_1E5F8D580;
    void v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyMessagesToDeleteFromCloudKit_IPCAction(v10, a1);
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = [(id)v13[5] count];
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Returned from DB call after loading messages to delete messages count %lu", buf, 0xCu);
      }
    }
  }
  uint64_t v8 = v13[5];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1AFC25F48(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1AFC25F00);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

xpc_object_t sub_1AFC25FD4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC26068;
    applier[3] = &unk_1E5F8D558;
    applier[4] = *(void *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1AFC26068(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v5 = objc_msgSend(NSString, "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "guid"), 4);
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v5, @"guid", objc_msgSend(NSString, "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "recordID"), 4), @"recordID", 0));
  return 1;
}

void IMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6[0] = 138412546;
      *(void *)&v6[1] = a1;
      LOWORD(v6[3]) = 2112;
      *(void *)((char *)&v6[3] + 2) = a2;
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Request to add message with guid (%@) and recordID (%@) to delete table", (uint8_t *)v6, 0x16u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v7, 0, sizeof(v7));
    memset(v6, 0, sizeof(v6));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
    _IMDSqlOperationBeginQuery((uint64_t)v6, @" INSERT INTO sync_deleted_messages (guid, recordID) VALUES (?, ?);");
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, (uint64_t)a1);
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, (uint64_t)a2);
    IMDSqlOperationFinishQuery((uint64_t)v6);
    IMDSqlOperationRelease((uint64_t)v6, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit_IPCAction(0, a1, a2);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6[0] = 138412546;
      *(void *)&v6[1] = a1;
      LOWORD(v6[3]) = 2112;
      *(void *)((char *)&v6[3] + 2) = a2;
      _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Finished adding message with guid (%@) and recordID (%@) to delete table", (uint8_t *)v6, 0x16u);
    }
  }
}

void IMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v2[0]) = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "Request to add incompatible group photo to delete table", (uint8_t *)v2, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    _IMDSqlOperationBeginQuery((uint64_t)v2, @" INSERT INTO sync_deleted_messages (guid, recordID) SELECT guid,ck_record_id FROM message WHERE item_type = 3 AND group_action_type != 0 AND length(ck_record_id) > 0;");
    IMDSqlOperationFinishQuery((uint64_t)v2);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit_IPCAction(0);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(v2[0]) = 0;
      _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Finished adding incompatible group photo to delete table", (uint8_t *)v2, 2u);
    }
  }
}

void IMDMessageRecordClearDeleteTombStones()
{
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordClearDeleteTombStones", (uint8_t *)v2, 2u);
      }
    }
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    IMDSqlOperationExecuteQuery((uint64_t)v2, @"delete from sync_deleted_messages;", (uint64_t)&unk_1F084D718);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkDeletedTombStonedMessagesAsNeedingCloudKitSync_IPCAction(0);
    if (IMOSLoggingEnabled())
    {
      uint64_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1AFB53000, v1, OS_LOG_TYPE_INFO, "Returned from DB call after marking clearing all tombstones", (uint8_t *)v2, 2u);
      }
    }
  }
}

void sub_1AFC265B0()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1AFB53000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync deleted pending sync table", v1, 2u);
    }
  }
}

void IMDMessageRecordDeleteTombStonedMessagesWithRecordIDs(const __CFArray *a1)
{
  if (a1 && CFArrayGetCount(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      CFIndex Count = CFArrayGetCount(a1);
      int v3 = IMDCreateQueryRemoveMessagesFromTombStoneTableQuery(Count);
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = sub_1AFC267C0;
      v6[3] = &unk_1E5F9BDE0;
      void v6[4] = v3;
      void v6[5] = a1;
      IMDRunSqlOperation((uint64_t)v6);
      CFRelease(v3);
      return;
    }
    __syncXPCIMDMessageRecordDeleteTombStonedMessagesForRecordIDs_IPCAction(0, (uint64_t)a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v5 = "Returned from DB call after deleting RecordIDs from Tombstone table";
        goto LABEL_11;
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v5 = "IMDMessageRecordDeleteTombStonedMessagesWithGUIDs has no GUIDs to delete.";
LABEL_11:
      _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
    }
  }
}

BOOL sub_1AFC267C0(uint64_t a1, uint64_t a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC26840;
  v6[3] = &unk_1E5F90128;
  CFStringRef v3 = *(const __CFString **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = a2;
  void v6[5] = v4;
  return _IMDSqlOperationRunQuery(a2, v3, (uint64_t)v6, 0);
}

void sub_1AFC26840(uint64_t a1)
{
}

void IMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit(sqlite3_int64 a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(void *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Request to mark message with ROWID %lld as ignore but needing sync", (uint8_t *)v4, 0xCu);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v4);
    _IMDSqlOperationBeginQuery((uint64_t)v4, @"update message set ck_sync_os_activity_scope_state_s state = 2 where rowid=?");
    IMDSqlStatementBindInt64((uint64_t)v5, a1);
    IMDSqlOperationFinishQuery((uint64_t)v4);
    IMDSqlOperationRelease((uint64_t)v4, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit_IPCAction(0, a1);
  }
  if (IMOSLoggingEnabled())
  {
    CFStringRef v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(void *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Finised marking message with ROWID %lld as ignore but needing sync", (uint8_t *)v4, 0xCu);
    }
  }
}

void IMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit(sqlite3_int64 a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(void *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Request to mark message with ROWID %lld as clean", (uint8_t *)v4, 0xCu);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v4);
    _IMDSqlOperationBeginQuery((uint64_t)v4, @"update message set ck_sync_os_activity_scope_state_s state = 1 where rowid=?");
    IMDSqlStatementBindInt64((uint64_t)v5, a1);
    IMDSqlOperationFinishQuery((uint64_t)v4);
    IMDSqlOperationRelease((uint64_t)v4, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit_IPCAction(0, a1);
  }
  if (IMOSLoggingEnabled())
  {
    CFStringRef v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(void *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Finised marking message with ROWID %lld as clean", (uint8_t *)v4, 0xCu);
    }
  }
}

sqlite3_int64 sub_1AFC26B94(uint64_t a1, const __CFString *a2)
{
  _IMDSqlOperationBeginQuery(a1, a2);
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  IMDSqlOperationColumnByIndex(a1, 0, (uint64_t)&v7);
  sqlite3_int64 v3 = 0;
  if (IMDSqlOperationHasRows(a1))
  {
    long long v5 = v7;
    uint64_t v6 = v8;
    sqlite3_int64 v3 = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
  IMDSqlOperationFinishQuery(a1);
  return v3;
}

id sub_1AFC26C14(uint64_t a1, const __CFString *a2)
{
  _IMDSqlOperationBeginQuery(a1, a2);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  IMDSqlOperationColumnByIndex(a1, 0, (uint64_t)&v13);
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  IMDSqlOperationColumnByIndex(a1, 1, (uint64_t)&v11);
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v4 = 0;
  if (IMDSqlOperationHasRows(a1))
  {
    uint64_t v4 = 0;
    do
    {
      long long v9 = v13;
      uint64_t v10 = v14;
      sqlite3_int64 v5 = IMDInt64FromSqlColumn((uint64_t)&v9);
      long long v9 = v11;
      uint64_t v10 = v12;
      sqlite3_int64 v6 = IMDInt64FromSqlColumn((uint64_t)&v9);
      uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"Status %ld", v5);
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v6), v7);
      v4 += v6;
    }
    while (IMDSqlOperationHasRows(a1));
  }
  objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", v4), @"total");
  IMDSqlOperationFinishQuery(a1);
  return v3;
}

uint64_t sub_1AFC26D68(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"Status 1", @"total", 0);
    id v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithArray:", objc_msgSend(a1, "allKeys"));
    [v3 minusSet:v2];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v16 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v3);
          }
          v6 += objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *(void *)(*((void *)&v11 + 1) + 8 * i)), "longLongValue");
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v16 count:16];
      }
      while (v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    long long v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "Expecting statistics dictionary to calculate unresolved counts, but found nil, returning 0", buf, 2u);
    }
    return 0;
  }
  return v6;
}

id IMDMessageRecordCalculateLocalCloudKitStatistics()
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  uint64_t v50 = 0;
  __int16 v51 = &v50;
  uint64_t v52 = 0x3052000000;
  uint64_t v53 = sub_1AFC17920;
  uint64_t v54 = sub_1AFC17930;
  uint64_t v55 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    double v1 = v0;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    *(_OWORD *)long long buf = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    IMDSqlOperationBeginTransaction(buf);
    id v2 = sub_1AFC26C14((uint64_t)buf, @"SELECT ck_sync_state, COUNT(*) FROM chat GROUP BY ck_sync_state;");
    id v3 = v2;
    if (v2)
    {
      uint64_t v39 = objc_msgSend((id)objc_msgSend(v2, "objectForKey:", @"total"), "longLongValue");
      uint64_t v47 = objc_msgSend((id)objc_msgSend(v3, "objectForKey:", @"Status 1"), "longLongValue");
      uint64_t v46 = sub_1AFC26D68(v3);
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    id v7 = sub_1AFC26C14((uint64_t)buf, @"SELECT ck_sync_state, COUNT(*) AS total_count FROM message GROUP BY ck_sync_state;");
    uint64_t v8 = v7;
    if (v7)
    {
      uint64_t v45 = objc_msgSend((id)objc_msgSend(v7, "objectForKey:", @"total"), "longLongValue");
      uint64_t v44 = objc_msgSend((id)objc_msgSend(v8, "objectForKey:", @"Status 1"), "longLongValue");
      uint64_t v43 = sub_1AFC26D68(v8);
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v43 = 0;
    }
    id v9 = sub_1AFC26C14((uint64_t)buf, @"SELECT ck_sync_state, COUNT(1) AS total_count FROM attachment GROUP BY ck_sync_state;");
    uint64_t v10 = v9;
    if (v9)
    {
      uint64_t v42 = objc_msgSend((id)objc_msgSend(v9, "objectForKey:", @"total"), "longLongValue");
      uint64_t v41 = objc_msgSend((id)objc_msgSend(v10, "objectForKey:", @"Status 1"), "longLongValue");
      uint64_t v40 = sub_1AFC26D68(v10);
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v40 = 0;
    }
    id v11 = sub_1AFC26C14((uint64_t)buf, @"SELECT ck_sync_state, COUNT(*) AS total_count FROM message WHERE ck_sync_state = 8 AND (service == 'iMessage' OR service == 'SMS') GROUP BY ck_sync_state;");
    if (v11) {
      uint64_t v38 = objc_msgSend((id)objc_msgSend(v11, "objectForKey:", @"total"), "longLongValue");
    }
    else {
      uint64_t v38 = 0;
    }
    id v12 = sub_1AFC26C14((uint64_t)buf, @"SELECT 0, COUNT(*) AS total_count FROM message WHERE syndication_ranges IS NOT NULL AND (synced_syndication_ranges IS NULL OR syndication_ranges != synced_syndication_ranges) AND (service = 'iMessage' OR service = 'SMS');");
    if (v12) {
      uint64_t v37 = objc_msgSend((id)objc_msgSend(v12, "objectForKey:", @"total"), "longLongValue");
    }
    else {
      uint64_t v37 = 0;
    }
    id v13 = sub_1AFC26C14((uint64_t)buf, @"SELECT ck_sync_state, SUM(total_count) AS total_count FROM(SELECT crmj.ck_sync_state, COUNT(*) AS total_count FROM chat_recoverable_message_join AS crmj JOIN chat AS c ON c.ROWID = crmj.chat_id JOIN message AS m ON m.ROWID = crmj.message_id GROUP BY crmj.ck_sync_state UNION ALL SELECT rmp.ck_sync_state, COUNT(1) AS total_count FROM recoverable_message_part AS rmp JOIN chat AS c ON c.ROWID = rmp.chat_id JOIN message AS m ON m.ROWID = rmp.message_id GROUP BY rmp.ck_sync_state);");
    long long v14 = v13;
    if (v13)
    {
      uint64_t v15 = objc_msgSend((id)objc_msgSend(v13, "objectForKey:", @"total"), "longLongValue");
      uint64_t v16 = objc_msgSend((id)objc_msgSend(v14, "objectForKey:", @"Status 1"), "longLongValue");
      uint64_t v17 = sub_1AFC26D68(v14);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    id v18 = sub_1AFC26C14((uint64_t)buf, @"SELECT 0, COUNT(*) AS total_count FROM sync_deleted_chats WHERE LENGTH(recordID) > 0;");
    if (v18) {
      uint64_t v19 = objc_msgSend((id)objc_msgSend(v18, "objectForKey:", @"total"), "longLongValue");
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = sub_1AFC26C14((uint64_t)buf, @"SELECT 0, COUNT(*) AS total_count FROM sync_deleted_messages WHERE LENGTH(recordID) > 0;");
    if (v20) {
      uint64_t v21 = objc_msgSend((id)objc_msgSend(v20, "objectForKey:", @"total"), "longLongValue");
    }
    else {
      uint64_t v21 = 0;
    }
    id v22 = sub_1AFC26C14((uint64_t)buf, @"SELECT 0, COUNT(1) AS total_count FROM sync_deleted_attachments WHERE LENGTH(recordID) > 0;");
    if (v22) {
      uint64_t v23 = objc_msgSend((id)objc_msgSend(v22, "objectForKey:", @"total"), "longLongValue");
    }
    else {
      uint64_t v23 = 0;
    }
    id v24 = sub_1AFC26C14((uint64_t)buf, @"SELECT 0, COUNT(*) AS total_count FROM unsynced_removed_recoverable_messages;");
    if (v24) {
      uint64_t v25 = objc_msgSend((id)objc_msgSend(v24, "objectForKey:", @"total"), "longLongValue");
    }
    else {
      uint64_t v25 = 0;
    }
    IMDSqlOperationCommitOrRevertTransaction(buf);
    id v49 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v49);
    if (v49)
    {
      uint64_t v26 = IMLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(double *)&uint64_t v27 = COERCE_DOUBLE([v49 localizedDescription]);
        *(_DWORD *)__int16 v56 = 138412290;
        double v57 = *(double *)&v27;
        _os_log_impl(&dword_1AFB53000, v26, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateLocalCloudKitStatistics failed with error: %@", v56, 0xCu);
      }
      id v6 = 0;
      goto LABEL_40;
    }
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    double v30 = v29;
    v90[0] = @"chatStats";
    v90[1] = @"msgStats";
    v91[0] = v3;
    v91[1] = v8;
    v91[2] = v10;
    uint64_t v31 = *MEMORY[0x1E4F6D270];
    v90[2] = @"attStats";
    v90[3] = v31;
    v91[3] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v39];
    v90[4] = *MEMORY[0x1E4F6D250];
    uint8_t v91[4] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v47];
    v90[5] = *MEMORY[0x1E4F6D220];
    v91[5] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v19];
    v90[6] = *MEMORY[0x1E4F6D298];
    v91[6] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v46];
    v90[7] = *MEMORY[0x1E4F6D280];
    v91[7] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v45];
    v90[8] = *MEMORY[0x1E4F6D258];
    v91[8] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v44];
    v90[9] = *MEMORY[0x1E4F6D228];
    v91[9] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v21];
    v90[10] = *MEMORY[0x1E4F6D2A8];
    v91[10] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v43];
    v90[11] = *MEMORY[0x1E4F6D268];
    v91[11] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v42];
    v90[12] = *MEMORY[0x1E4F6D248];
    v91[12] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v41];
    v90[13] = *MEMORY[0x1E4F6D218];
    v91[13] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v23];
    v90[14] = *MEMORY[0x1E4F6D290];
    v91[14] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v40];
    v90[15] = *MEMORY[0x1E4F6D288];
    v91[15] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v15];
    v90[16] = *MEMORY[0x1E4F6D260];
    v91[16] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v16];
    v90[17] = *MEMORY[0x1E4F6D230];
    v91[17] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v25];
    v90[18] = *MEMORY[0x1E4F6D2B0];
    v91[18] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v17];
    v90[19] = *MEMORY[0x1E4F6D238];
    v91[19] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v38];
    v90[20] = *MEMORY[0x1E4F6D240];
    uint64_t v32 = v44 + v47 + v41 + v16;
    v91[20] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v37];
    v90[21] = *MEMORY[0x1E4F6D210];
    uint64_t v33 = v45 + v39 + v42 + v15;
    v91[21] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v32];
    v90[22] = *MEMORY[0x1E4F6D278];
    v91[22] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v33];
    v90[23] = *MEMORY[0x1E4F6D2A0];
    v91[23] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v43 + v46 + v40 + v17];
    uint64_t v34 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v91 forKeys:v90 count:24];
    void v51[5] = (uint64_t)v34;
    id v35 = v34;
    uint64_t v36 = IMLogHandleForCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int16 v56 = 134222080;
      double v57 = v30 - v1;
      __int16 v58 = 2048;
      uint64_t v59 = v32;
      __int16 v60 = 2048;
      uint64_t v61 = v33;
      __int16 v62 = 2048;
      uint64_t v63 = v33 - v32;
      __int16 v64 = 2048;
      uint64_t v65 = v43 + v46 + v40 + v17;
      __int16 v66 = 2048;
      uint64_t v67 = v44;
      __int16 v68 = 2048;
      uint64_t v69 = v45;
      __int16 v70 = 2048;
      uint64_t v71 = v45 - v44;
      __int16 v72 = 2048;
      uint64_t v73 = v43;
      __int16 v74 = 2048;
      uint64_t v75 = v47;
      __int16 v76 = 2048;
      uint64_t v77 = v39;
      __int16 v78 = 2048;
      uint64_t v79 = v39 - v47;
      __int16 v80 = 2048;
      uint64_t v81 = v46;
      __int16 v82 = 2048;
      uint64_t v83 = v41;
      __int16 v84 = 2048;
      uint64_t v85 = v42;
      __int16 v86 = 2048;
      uint64_t v87 = v42 - v41;
      __int16 v88 = 2048;
      uint64_t v89 = v40;
      _os_log_impl(&dword_1AFB53000, v36, OS_LOG_TYPE_INFO, "Calculated sync stats in %f seconds. All Records: %lld of %lld, %lld remaining, %lld unresolved. Messages : %lld of %lld, %lld remaining, %lld unresolved. Chats : %lld of %lld, %lld remaining, %lld unresolved. Attachments : %lld of %lld, %lld remaining, %lld unresolved.", v56, 0xACu);
    }
  }
  else
  {
    v48[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v48[1] = (void (*)(void))3221225472;
    v48[2] = (void (*)(void))sub_1AFC278DC;
    v48[3] = (void (*)(void))&unk_1E5F8D580;
    void v48[4] = (void (*)(void))&v50;
    __syncXPCIMDMessageRecordCalculateLocalCloudKitStatistics_IPCAction(v48);
  }
  uint64_t v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend((id)v51[5], "description"), "stringByReplacingOccurrencesOfString:withString:", @"\n", &stru_1F084E970);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateLocalCloudKitStatistics loaded stats: %@", buf, 0xCu);
  }
  id v6 = (id)v51[5];
LABEL_40:
  _Block_object_dispose(&v50, 8);
  return v6;
}

void sub_1AFC27874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1AFC278DC(uint64_t a1, xpc_object_t xdict)
{
  if (xpc_dictionary_get_value(xdict, "dictionary_result")) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = IMCreateDictionaryFromXPCObjectWithStandardAllowlist();
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Expected dictionary of cloudkit stats is nil 2", v4, 2u);
    }
  }
}

id IMDMessageRecordCalculateTotalCounts()
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x3052000000;
  id v22 = sub_1AFC17920;
  uint64_t v23 = sub_1AFC17930;
  uint64_t v24 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    double v1 = v0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    *(_OWORD *)uint64_t v39 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v39);
    IMDSqlOperationBeginTransaction(v39);
    sqlite3_int64 v2 = sub_1AFC26B94((uint64_t)v39, @"SELECT COUNT(*) FROM chat;");
    sqlite3_int64 v3 = sub_1AFC26B94((uint64_t)v39, @"SELECT COUNT(*) FROM message;");
    sqlite3_int64 v4 = sub_1AFC26B94((uint64_t)v39, @"SELECT COUNT(*) FROM attachment;");
    sqlite3_int64 v5 = sub_1AFC26B94((uint64_t)v39, @"SELECT SUM(total_count) AS total_count FROM(SELECT COUNT(*) AS total_count FROM chat_recoverable_message_join AS crmj JOIN chat AS c ON c.ROWID = crmj.chat_id JOIN message AS m ON m.ROWID = crmj.message_id UNION ALL SELECT COUNT(1) AS total_count FROM recoverable_message_part AS rmp JOIN chat AS c ON c.ROWID = rmp.chat_id JOIN message AS m ON m.ROWID = rmp.message_id);");
    IMDSqlOperationCommitOrRevertTransaction(v39);
    id v18 = 0;
    IMDSqlOperationRelease((uint64_t)v39, &v18);
    if (v18)
    {
      id v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(double *)&uint64_t v7 = COERCE_DOUBLE([v18 localizedDescription]);
        *(_DWORD *)long long buf = 138412290;
        double v26 = *(double *)&v7;
        _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateLocalCloudKitStatistics failed with error: %@", buf, 0xCu);
      }
      id v8 = 0;
      goto LABEL_10;
    }
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    double v13 = v12;
    v37[0] = *MEMORY[0x1E4F6D270];
    v38[0] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v2];
    v37[1] = *MEMORY[0x1E4F6D280];
    v38[1] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v3];
    v37[2] = *MEMORY[0x1E4F6D268];
    v38[2] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v4];
    v37[3] = *MEMORY[0x1E4F6D288];
    v38[3] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v5];
    v37[4] = *MEMORY[0x1E4F6D278];
    v38[4] = [MEMORY[0x1E4F28ED0] numberWithLongLong:v3 + v2 + v4 + v5];
    long long v14 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:5];
    v20[5] = (uint64_t)v14;
    id v15 = v14;
    uint64_t v16 = IMLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134219264;
      double v26 = v13 - v1;
      __int16 v27 = 2048;
      sqlite3_int64 v28 = v3 + v2 + v4 + v5;
      __int16 v29 = 2048;
      sqlite3_int64 v30 = v3;
      __int16 v31 = 2048;
      sqlite3_int64 v32 = v2;
      __int16 v33 = 2048;
      sqlite3_int64 v34 = v4;
      __int16 v35 = 2048;
      sqlite3_int64 v36 = v5;
      _os_log_impl(&dword_1AFB53000, v16, OS_LOG_TYPE_INFO, "Calculated total counts in %f seconds. All Records: %lld, Messages: %lld, Chats: %lld, Attachments: %lld, RecoverableMessages: %lld", buf, 0x3Eu);
    }
  }
  else
  {
    v17[0] = (void (*)(void))MEMORY[0x1E4F143A8];
    v17[1] = (void (*)(void))3221225472;
    void v17[2] = (void (*)(void))sub_1AFC27DDC;
    v17[3] = (void (*)(void))&unk_1E5F8D580;
    v17[4] = (void (*)(void))&v19;
    __syncXPCIMDMessageRecordCalculateTotalCounts_IPCAction(v17);
  }
  id v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = objc_msgSend((id)objc_msgSend((id)v20[5], "description"), "stringByReplacingOccurrencesOfString:withString:", @"\n", &stru_1F084E970);
    *(_DWORD *)uint64_t v39 = 138412290;
    *(void *)&v39[4] = v10;
    _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateTotalCounts loaded totals: %@", v39, 0xCu);
  }
  id v8 = (id)v20[5];
LABEL_10:
  _Block_object_dispose(&v19, 8);
  return v8;
}

void sub_1AFC27D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AFC27DDC(uint64_t a1, xpc_object_t xdict)
{
  if (xpc_dictionary_get_value(xdict, "dictionary_result")) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = IMCreateDictionaryFromXPCObjectWithStandardAllowlist();
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    sqlite3_int64 v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)sqlite3_int64 v4 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Expected dictionary of record totals is nil", v4, 2u);
    }
  }
}

uint64_t sub_1AFC27E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!IMDSqlOperationExecuteQuery(a1, (CFStringRef)objc_msgSend(NSString, "stringWithFormat:", @"UPDATE %@ SET ck_sync_os_activity_scope_state_s state = 0;",
                         a2),
          0))
    return 0;
  uint64_t v19 = 0;
  id RowsForQuery = _IMDSqlOperationGetRowsForQuery((const __CFString *)[NSString stringWithFormat:@"SELECT ROWID from %@ LIMIT %lld", a2, a3], &v19);
  uint64_t v7 = RowsForQuery;
  if (v19)
  {
    id v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v22 = v19;
      _os_log_impl(&dword_1AFB53000, v8, OS_LOG_TYPE_INFO, "_IMDMessageRecordSetSyncCountOnTable got error: %@", buf, 0xCu);
    }

    return 0;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v11 = [RowsForQuery countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v16;
LABEL_10:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v16 != v13) {
        objc_enumerationMutation(v7);
      }
      BOOL v9 = IMDSqlOperationExecuteQuery(a1, (CFStringRef)objc_msgSend(NSString, "stringWithFormat:", @"UPDATE %@ SET ck_sync_state = 1 WHERE ROWID = %lld;",
                            a2,
                            objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * v14), "objectForKey:", @"ROWID"), "longLongValue")), 0);
      if (!v9) {
        break;
      }
      if (v12 == ++v14)
      {
        uint64_t v12 = [v7 countByEnumeratingWithState:&v15 objects:v20 count:16];
        if (v12) {
          goto LABEL_10;
        }
        break;
      }
    }
  }
  else
  {

    return 1;
  }
  return v9;
}

void _IMDMessageRecordSetCloudKitSyncCounts(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  sqlite3_int64 v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 138412290;
    *(void *)((char *)buf + 4) = objc_msgSend((id)objc_msgSend(a1, "description"), "stringByReplacingOccurrencesOfString:withString:", @"\n", &stru_1F084E970);
    _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Write cloudkit sync counts: %@", (uint8_t *)buf, 0xCu);
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *MEMORY[0x1E4F6D258]), "longLongValue");
    uint64_t v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *MEMORY[0x1E4F6D250]), "longLongValue");
    uint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *MEMORY[0x1E4F6D248]), "longLongValue");
    id v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134218496;
      *(void *)((char *)buf + 4) = v3;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = v4;
      WORD3(buf[1]) = 2048;
      *((void *)&buf[1] + 1) = v5;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "setting new stats: messageSyncCount: %lld, chatSyncCount: %lld, attachmentCount: %lld", (uint8_t *)buf, 0x20u);
    }
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    IMDSqlOperationBeginTransaction(buf);
    sub_1AFC27E80((uint64_t)buf, @"message", v3);
    sub_1AFC27E80((uint64_t)buf, @"chat", v4);
    sub_1AFC27E80((uint64_t)buf, @"attachment", v5);
    IMDSqlOperationCommitOrRevertTransaction(buf);
    id v11 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v11);
    if (v11)
    {
      uint64_t v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1AFC707DC(&v11, v7);
      }
    }
    id v8 = IMDMessageRecordCalculateLocalCloudKitStatistics();
    BOOL v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = objc_msgSend((id)objc_msgSend(v8, "description"), "stringByReplacingOccurrencesOfString:withString:", @"\n", &stru_1F084E970);
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl(&dword_1AFB53000, v9, OS_LOG_TYPE_INFO, "new stats: %@", v12, 0xCu);
    }
  }
  else
  {
    __syncXPCIMDMessageRecordSetCloudKitSyncCounts_IPCAction(0);
  }
}

uint64_t IMDMessageRecordCopyMessagesWithReplyToGUIDs(void *a1)
{
  if ([a1 length])
  {
    uint64_t v7 = 0;
    id v8 = &v7;
    uint64_t v9 = 0x2020000000;
    uint64_t v10 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = sub_1AFC284C8;
      v6[3] = &unk_1E5F8EBC0;
      void v6[4] = a1;
      void v6[5] = &v7;
      _IMDPerformLockedStatementBlockWithQuery(@"SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE reply_to_guid = ?;",
        (uint64_t)v6);
    }
    else
    {
      v5[0] = (void (*)(void))MEMORY[0x1E4F143A8];
      v5[1] = (void (*)(void))3221225472;
      void v5[2] = (void (*)(void))sub_1AFC28530;
      v5[3] = (void (*)(void))&unk_1E5F8D580;
      void v5[4] = (void (*)(void))&v7;
      __syncXPCIMDMessageRecordCopyMessagesWithReplyToGUIDs_IPCAction(v5, a1);
    }
    uint64_t v3 = v8[3];
    _Block_object_dispose(&v7, 8);
  }
  else
  {
    sqlite3_int64 v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1AFC7086C();
    }
    return 0;
  }
  return v3;
}

void sub_1AFC284AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__CFArray *sub_1AFC284C8(uint64_t a1)
{
  CSDBSqliteBindTextFromCFString();
  CFArrayRef v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  xpc_object_t result = sub_1AFC22D08(v2);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1AFC28530(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    uint64_t v4 = (void *)result;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = sub_1AFC285FC;
    applier[3] = &unk_1E5F93D30;
    applier[4] = Mutable;
    uint64_t result = xpc_array_apply(v4, applier);
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
  return result;
}

uint64_t sub_1AFC285FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

BOOL sub_1AFC28644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138413314;
      uint64_t v16 = a2;
      __int16 v17 = 2112;
      uint64_t v18 = a3;
      __int16 v19 = 2112;
      uint64_t v20 = a4;
      __int16 v21 = 2048;
      uint64_t v22 = a5;
      __int16 v23 = 2112;
      uint64_t v24 = a6;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Performing threaded history query ref msg: %@ originator guid: %@ part: %@ limit: %llu results: %@", buf, 0x34u);
    }
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = sub_1AFC287B4;
  v14[3] = &unk_1E5F9CC38;
  void v14[6] = a3;
  void v14[7] = a4;
  v14[8] = a2;
  v14[9] = a5;
  void v14[4] = a6;
  v14[5] = a1;
  return IMDRunSqlOperation((uint64_t)v14);
}

BOOL sub_1AFC287B4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 40))
  {
    uint64_t v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1AFC708A0();
    }
  }
  CFStringRef v5 = *(const __CFString **)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1AFC288CC;
  v9[3] = &unk_1E5F9CC10;
  void v9[4] = a2;
  long long v10 = *(_OWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = v6;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFC28934;
  v8[3] = &unk_1E5F8FF78;
  void v8[4] = *(void *)(a1 + 32);
  void v8[5] = a2;
  return _IMDSqlOperationRunQuery(a2, v5, (uint64_t)v9, (uint64_t)v8);
}

void sub_1AFC288CC(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 32) + 32, *(void *)(a1 + 40));
  IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 32) + 32, *(void *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(*(void *)(a1 + 32) + 32, *(void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32) + 32;
  int v3 = *(_DWORD *)(a1 + 64);
  IMDSqlStatementBindInt(v2, v3);
}

BOOL sub_1AFC28934(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFC289E0;
      v5[3] = &unk_1E5F95228;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

uint64_t sub_1AFC289E0(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v3)));
}

BOOL sub_1AFC28A40(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC28B0C;
  v5[3] = &unk_1E5F90128;
  uint64_t v2 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = sub_1AFC28B18;
  v4[3] = &unk_1E5F8FF78;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = a2;
  return _IMDSqlOperationRunQuery(a2, @"SELECT   m.ROWID FROM   message m WHERE   m.associated_message_guid = ?  AND m.thread_originator_guid IS NULL", (uint64_t)v5, (uint64_t)v4);
}

void sub_1AFC28B0C(uint64_t a1)
{
}

BOOL sub_1AFC28B18(uint64_t a1)
{
  BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
  if (result)
  {
    uint64_t v3 = MEMORY[0x1E4F143A8];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      void v5[2] = sub_1AFC28BC4;
      v5[3] = &unk_1E5F95228;
      uint64_t v4 = *(void *)(a1 + 40);
      void v5[4] = *(void *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      BOOL result = IMDSqlOperationHasRows(*(void *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

uint64_t sub_1AFC28BC4(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v3)));
}

uint64_t sub_1AFC28C24(uint64_t a1)
{
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  uint64_t result = CSDBRecordStoreProcessStatement();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1AFC28CA0(uint64_t a1)
{
  if (CSDBSqliteDatabaseConnectionForReading())
  {
    uint64_t v2 = CSDBSqliteConnectionStatementForSQL();
    if (v2)
    {
      uint64_t v3 = v2;
      if (*(void *)(v2 + 8))
      {
        CSDBSqliteBindTextFromCFString();
        if (sqlite3_step(*(sqlite3_stmt **)(v3 + 8)) == 100)
        {
          CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          do
          {
            if (sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0))
            {
              CFStringRef v5 = sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0);
              CFStringRef v6 = CFStringCreateWithCString(v4, (const char *)v5, 0x8000100u);
              if (v6)
              {
                CFStringRef v7 = v6;
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v6);
                CFRelease(v7);
              }
            }
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v3 + 8)) == 100);
        }
        CSDBSqliteStatementReset();
      }
    }
    CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  CFRelease(@"SELECT   m.guid FROM   message m INNER JOIN chat_message_join cm ON   m.ROWint ID = cm.message_id INNER JOIN chat c ON   c.ROWint ID = cm.chat_id WHERE   m.is_from_me = 0   AND m.is_played = 0   AND m.is_audio_message = 1   AND c.guid = ? ORDER BY m.ROWID ASC");
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void sub_1AFC28DBC(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = IMDGenerateInClauseForCount(*(_DWORD *)(a1 + 48));
  CFStringRef v4 = CFStringCreateWithFormat(v2, 0, @"SELECT   message_id FROM chat_recoverable_message_join WHERE message_id in (SELECT rowid FROM message INDEXED BY message_idx_isRead_isFromMe_itemType  WHERE (is_read == 0     AND is_finished == 1     AND is_from_me == 0     AND item_type == 0     AND is_system_message == 0)) AND chat_id %@", v3);
  if (v4)
  {
    CFStringRef v5 = v4;
    if (CSDBSqliteDatabaseConnectionForReading())
    {
      uint64_t v6 = CSDBSqliteConnectionStatementForSQL();
      if (v6)
      {
        uint64_t v7 = v6;
        if (*(void *)(v6 + 8))
        {
          long long v16 = 0u;
          long long v17 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          id v8 = *(void **)(a1 + 32);
          uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v15;
            do
            {
              for (uint64_t i = 0; i != v10; ++i)
              {
                if (*(void *)v15 != v11) {
                  objc_enumerationMutation(v8);
                }
                [*(id *)(*((void *)&v14 + 1) + 8 * i) integerValue];
                CSDBSqliteBindInt64();
              }
              uint64_t v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
            }
            while (v10);
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v7 + 8)) == 100)
          {
            sqlite3_int64 v13 = sqlite3_column_int64(*(sqlite3_stmt **)(v7 + 8), 0);
            if (v13 != -1) {
              objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", v13));
            }
          }
          CSDBSqliteStatementReset();
        }
      }
      CSDBSqliteDatabaseReleaseSqliteConnection();
    }
    CFRelease(v5);
  }
}

uint64_t sub_1AFC28F8C(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(a1 + 80)) {
    uint64_t v3 = " AND rowid <= ?";
  }
  else {
    uint64_t v3 = "";
  }
  CFStringRef v4 = IMDGenerateInClauseForCount(*(_DWORD *)(a1 + 56));
  CFStringRef v5 = CFStringCreateWithFormat(v2, 0, @"SELECT   message_id FROM chat_message_join WHERE message_id in (SELECT rowid FROM message INDEXED BY message_idx_isRead_isFromMe_itemType  WHERE (is_read == 0     AND is_finished == 1     AND is_from_me == 0     AND (item_type == 0         OR item_type == 1)     AND is_system_message == 0     %s)) AND chat_id %@", v3, v4);
  if (v5)
  {
    CFStringRef v6 = v5;
    [*(id *)(a1 + 32) startTimingForKey:@"Query1"];
    if (CSDBSqliteDatabaseConnectionForReading())
    {
      uint64_t v7 = CSDBSqliteConnectionStatementForSQL();
      if (v7)
      {
        uint64_t v8 = v7;
        if (*(void *)(v7 + 8))
        {
          if (*(unsigned char *)(a1 + 80)) {
            CSDBSqliteBindInt64();
          }
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          uint64_t v9 = *(void **)(a1 + 40);
          uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v37 count:16];
          if (v10)
          {
            uint64_t v11 = *(void *)v31;
            do
            {
              for (uint64_t i = 0; i != v10; ++i)
              {
                if (*(void *)v31 != v11) {
                  objc_enumerationMutation(v9);
                }
                [*(id *)(*((void *)&v30 + 1) + 8 * i) integerValue];
                CSDBSqliteBindInt64();
              }
              uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v37 count:16];
            }
            while (v10);
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100)
          {
            sqlite3_int64 v13 = sqlite3_column_int64(*(sqlite3_stmt **)(v8 + 8), 0);
            if (v13 != -1) {
              objc_msgSend(*(id *)(a1 + 48), "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", v13));
            }
          }
          CSDBSqliteStatementReset();
        }
      }
      CSDBSqliteDatabaseReleaseSqliteConnection();
    }
    CFRelease(v6);
    [*(id *)(a1 + 32) stopTimingForKey:@"Query1"];
  }
  uint64_t v14 = [*(id *)(a1 + 48) count];
  if (v14 < 1)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v35 = v20;
        _os_log_impl(&dword_1AFB53000, v19, OS_LOG_TYPE_INFO, "Query results were null or empty bulk reading messages for %@", buf, 0xCu);
      }
    }
  }
  else
  {
    long long v15 = IMDGenerateInClauseForCount(v14);
    CFStringRef v16 = CFStringCreateWithFormat(v2, 0, @"UPDATE   message SET   is_read = 1,   date_read = ? WHERE rowid %@", v15);
    if (v16)
    {
      [*(id *)(a1 + 32) startTimingForKey:@"Query2-Update"];
      uint64_t v17 = CSDBSqliteDatabaseStatementForWriting();
      if (v17 && *(void *)(v17 + 8))
      {
        uint64_t v18 = *(void **)(a1 + 72);
        if (v18) {
          objc_msgSend(v18, "__im_nanosecondTimeInterval");
        }
        else {
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), "__im_nanosecondTimeInterval");
        }
        CSDBSqliteBindInt64();
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        __int16 v21 = *(void **)(a1 + 48);
        uint64_t v22 = [v21 countByEnumeratingWithState:&v26 objects:v36 count:16];
        if (v22)
        {
          uint64_t v23 = *(void *)v27;
          do
          {
            for (uint64_t j = 0; j != v22; ++j)
            {
              if (*(void *)v27 != v23) {
                objc_enumerationMutation(v21);
              }
              [*(id *)(*((void *)&v26 + 1) + 8 * j) integerValue];
              CSDBSqliteBindInt64();
            }
            uint64_t v22 = [v21 countByEnumeratingWithState:&v26 objects:v36 count:16];
          }
          while (v22);
        }
        CSDBSqliteStatementPerform();
        CSDBSqliteStatementReset();
      }
      CFRelease(v16);
      [*(id *)(a1 + 32) stopTimingForKey:@"Query2-Update"];
    }
  }
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

uint64_t sub_1AFC29380(uint64_t a1)
{
  uint64_t v2 = CSDBSqliteDatabaseStatementForWriting();
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = *(void **)(a1 + 48);
    if (!v3) {
      uint64_t v3 = (void *)[MEMORY[0x1E4F1C9C8] date];
    }
    objc_msgSend(v3, "__im_nanosecondTimeInterval");
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    CSDBSqliteStatementPerform();
    CSDBSqliteStatementReset();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void sub_1AFC29434(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

uint64_t sub_1AFC2944C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  *(_DWORD *)(a2 + 24) = a3;
  *(_WORD *)(a2 + 2_Block_object_dispose(&STACK[0x200], 8) = 2112;
  *(void *)(a2 + 30) = result;
  return result;
}

void sub_1AFC29460(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 1024;
}

void sub_1AFC29470(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
}

void sub_1AFC295D8(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_createDataProviders", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v9 = [v8 typeIdentifier];
        [v2 setObject:v8 forKeyedSubscript:v9];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  uint64_t v10 = [v2 copy];
  uint64_t v11 = (void *)qword_1E9AF8308;
  qword_1E9AF8308 = v10;
}

void *IMDCreateIMItemFromIMDMessageRecordRefWithAccountLookup(const __CFArray **a1, void *a2, char a3, uint64_t a4)
{
  return IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(a1, a2, a3, 1, a4);
}

void *IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(const __CFArray **a1, void *a2, char a3, int a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  uint64_t v166 = 0;
  uint64_t v167 = 0;
  uint64_t v164 = 0;
  uint64_t v165 = 0;
  __int16 v163 = 0;
  id v161 = 0;
  id v162 = 0;
  id v159 = 0;
  id v160 = 0;
  CFNumberRef v158 = 0;
  id v157 = 0;
  id v156 = 0;
  id v155 = 0;
  id v154 = 0;
  id v153 = 0;
  id v152 = 0;
  uint64_t v151 = 0;
  uint64_t v150 = 0;
  uint64_t v149 = 0;
  id v148 = 0;
  id v147 = 0;
  id v146 = 0;
  uint64_t v145 = 0;
  id v144 = 0;
  int v143 = 0;
  id v142 = 0;
  id v141 = 0;
  id v140 = 0;
  id v139 = 0;
  id v138 = 0;
  uint64_t v137 = 0;
  id v136 = 0;
  id v135 = 0;
  id v134 = 0;
  id v133 = 0;
  uint64_t v132 = 0;
  uint64_t v131 = 0;
  id v130 = 0;
  id v129 = 0;
  id v128 = 0;
  CFTypeRef v127 = 0;
  CFTypeRef v126 = 0;
  IMDMessageRecordBulkCopy((uint64_t)a1, &v170, &v175, &v174, &v161, &v178, &v179, &v177, &v176, &v160, &v159, &v158, &v157, &v156, &v155, (const void **)&v171, &v154, &v172, &v173,
    (unsigned char *)&v163 + 1,
    &v163,
    &v162,
    &v169,
    &v153,
    &v168,
    &v167,
    &v166,
    &v165,
    &v164,
    &v152,
    &v151,
    &v149,
    &v148,
    &v147,
    &v146,
    &v145,
    &v144,
    &v143,
    &v142,
    (uint64_t)&v141,
    &v140,
    &v139,
    &v138,
    &v137,
    &v136,
    &v135,
    &v134,
    &v133,
    &v132,
    &v131,
    &v130,
    &v129,
    &v128,
    &v127,
    &v126);
  id v116 = (id)[MEMORY[0x1E4F28ED0] numberWithLongLong:v175];
  id v115 = (id)[MEMORY[0x1E4F28ED0] numberWithLongLong:v174];
  id v106 = (id)[MEMORY[0x1E4F28ED0] numberWithInt:v173];
  id v114 = (id)[MEMORY[0x1E4F28ED0] numberWithInt:v172];
  ThreadIdentifierWithComponents = 0;
  uint64_t v105 = v137;
  if (v136 && v135) {
    ThreadIdentifierWithComponents = (void *)IMMessageCreateThreadIdentifierWithComponents();
  }
  if (v178) {
    id v108 = (id)objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v178);
  }
  else {
    id v108 = 0;
  }
  if (v179) {
    id v10 = (id)objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v179);
  }
  else {
    id v10 = 0;
  }
  if (v177) {
    id v113 = (id)objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v177);
  }
  else {
    id v113 = 0;
  }
  if (v176) {
    id v112 = (id)objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v176);
  }
  else {
    id v112 = 0;
  }
  if (v145) {
    id v111 = (id)objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v145);
  }
  else {
    id v111 = 0;
  }
  if (v131)
  {
    id v107 = (id)objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v131);
    if (a2)
    {
LABEL_22:
      id v11 = a2;
      goto LABEL_28;
    }
  }
  else
  {
    id v107 = 0;
    if (a2) {
      goto LABEL_22;
    }
  }
  if (v171 >= 1)
  {
    long long v12 = IMDMessageRecordCopyHandle(a1);
    if (v12)
    {
      uint64_t v13 = *MEMORY[0x1E4F1CF80];
      id v11 = (id)IMDHandleRecordCopyID(*MEMORY[0x1E4F1CF80], (uint64_t)v12);
      int64_t v118 = (void *)IMDHandleRecordCopyUncanonicalizedID(v13, (uint64_t)v12);
      uint64_t v14 = IMDHandleRecordCopyCountry(v13, (uint64_t)v12);
      CFRelease(v12);
      goto LABEL_29;
    }
  }
  id v11 = 0;
LABEL_28:
  int64_t v118 = 0;
  uint64_t v14 = 0;
LABEL_29:
  if (v169 >= 1 && (long long v15 = IMDMessageRecordCopyOtherHandle(a1)) != 0)
  {
    uint64_t v16 = *MEMORY[0x1E4F1CF80];
    uint64_t v104 = IMDHandleRecordCopyID(*MEMORY[0x1E4F1CF80], (uint64_t)v15);
    uint64_t v103 = IMDHandleRecordCopyUncanonicalizedID(v16, (uint64_t)v15);
    uint64_t v102 = IMDHandleRecordCopyCountry(v16, (uint64_t)v15);
    CFRelease(v15);
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
  }
  if (v173 == 1
    && (uint64_t v17 = (void *)[v162 componentsSeparatedByString:@","], objc_msgSend(v17, "count")))
  {
    id v110 = (id)[v17 objectAtIndex:0];
  }
  else
  {
    id v110 = 0;
  }
  if (v162)
  {
    CFRelease(v162);
    id v162 = 0;
  }
  if (a4
    && (HIBYTE(v163) || (a3 & 1) == 0)
    && (CFArrayRef v18 = (const __CFArray *)IMDMessageRecordCopyAttachments((uint64_t)a1), (v19 = v18) != 0))
  {
    if ((int)CFArrayGetCount(v18) < 1)
    {
      id v20 = 0;
    }
    else
    {
      id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CFIndex v21 = 0;
      uint64_t v22 = *MEMORY[0x1E4F1CF80];
      while (v21 < (int)CFArrayGetCount(v19))
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v19, v21);
        uint64_t v24 = (const void *)IMDAttachmentRecordCopyGUID(v22, (uint64_t)ValueAtIndex);
        if (v24)
        {
          [v20 addObject:v24];
          CFRelease(v24);
        }
        ++v21;
      }
    }
    CFRelease(v19);
  }
  else
  {
    id v20 = 0;
  }
  id v25 = v157;
  if (a5)
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t, id, id, id))(a5 + 16))(a5, v155, v156, v157);
    if (v26)
    {
      long long v27 = (void *)v26;

      id v156 = (id)[v27 loginID];
      id v155 = (id)[v27 accountID];
    }
  }
  uint64_t v109 = v10;
  long long v101 = v20;
  switch(v170)
  {
    case 0:
      uint64_t v28 = MEMORY[0x1B3E8A120]();
      char v29 = [(__CFNumber *)v158 unsignedLongLongValue];
      uint64_t v30 = 0;
      if ((v29 & 4) == 0 && v11) {
        uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v11 forKey:*MEMORY[0x1E4F6C5C8]];
      }
      uint64_t v97 = v30;
      if (v144) {
        uint64_t v96 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithMessageSummaryInfoData:");
      }
      else {
        uint64_t v96 = 0;
      }
      long long v95 = (void *)v28;
      long long v98 = (void *)v14;
      id v100 = v11;
      if (v152)
      {
        id v92 = objc_alloc(MEMORY[0x1E4F6E5E0]);
        id v90 = v159;
        uint64_t v55 = [(__CFNumber *)v158 unsignedLongLongValue];
        id v86 = v161;
        uint64_t v88 = v55;
        uint64_t v56 = [v116 longLongValue];
        id v57 = v156;
        id v58 = v155;
        uint64_t v59 = v165;
        id v60 = v148;
        id v61 = v147;
        id v62 = v146;
        LODWORD(v79) = [v114 unsignedIntValue];
        id v78 = v61;
        long long v33 = v108;
        sqlite3_int64 v34 = objc_msgSend(v92, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:errorType:associatedMessageGUID:associatedMessageType:associatedMessageRange:associatedMessageEmoji:bizIntent:locale:biaReferenceID:messageSummaryInfo:partCount:threadIdentifier:scheduleType:scheduleState:", v97, 0, v90, 0, v20, v88, v86, v56, v57, v58, v25, v100, v110,
                        v118,
                        v98,
                        v59,
                        v60,
                        v78,
                        v62,
                        v111,
                        v79,
                        v152,
                        v151,
                        v149,
                        v150,
                        v128,
                        0,
                        0,
                        v130,
                        v96,
                        v132,
                        ThreadIdentifierWithComponents,
                        v127,
                        v126);
      }
      else
      {
        id v93 = objc_alloc(MEMORY[0x1E4F6E850]);
        id v94 = v154;
        id v91 = v159;
        uint64_t v64 = [(__CFNumber *)v158 unsignedLongLongValue];
        id v87 = v161;
        uint64_t v89 = v64;
        uint64_t v65 = [v116 longLongValue];
        id v84 = v156;
        uint64_t v85 = v65;
        uint64_t v82 = v165;
        id v83 = v155;
        id v81 = v148;
        id v66 = v147;
        id v67 = v146;
        id v68 = v130;
        int v69 = [v114 unsignedIntValue];
        uint64_t v70 = [MEMORY[0x1E4F6E880] rangesFromSerializedString:v134];
        uint64_t v71 = [MEMORY[0x1E4F6E880] rangesFromSerializedString:v133];
        LODWORD(v80) = v69;
        sqlite3_int64 v34 = objc_msgSend(v93, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:biaReferenceID:errorType:threadIdentifier:syndicationRanges:syncedSyndicationRanges:partCount:dateEdited:scheduleType:scheduleState:", v97, v108, v109, v113, v112, v94, 0, v91, 0, v20, v89, v87, v85,
                        v84,
                        v83,
                        v25,
                        v100,
                        v110,
                        v118,
                        v98,
                        v82,
                        v81,
                        v66,
                        v67,
                        v111,
                        0,
                        0,
                        v68,
                        v80,
                        ThreadIdentifierWithComponents,
                        v70,
                        v71,
                        v132,
                        v107,
                        v127,
                        v126);
        if ([v34 isReply])
        {
          uint64_t v120 = 0;
          int64_t v121 = &v120;
          uint64_t v122 = 0x3052000000;
          CFTypeRef v123 = sub_1AFC2AAB8;
          uint64_t v124 = sub_1AFC2AAC8;
          uint64_t v125 = 0;
          __int16 v72 = +[IMDDatabase synchronousDatabase];
          v119[0] = MEMORY[0x1E4F143A8];
          v119[1] = 3221225472;
          v119[2] = sub_1AFC2AAD4;
          v119[3] = &unk_1E5F95320;
          v119[4] = &v120;
          [(IMDRemoteDatabaseProtocol *)v72 fetchMessageRecordWithGUID:v136 excludeRecoverableMessages:1 completionHandler:v119];
          uint64_t v73 = v121[5];
          if (v73)
          {
            __int16 v74 = (void *)IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(v73, 0, 1, 1, a5);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              [v34 setThreadOriginator:v74];
            }
          }
          _Block_object_dispose(&v120, 8);
        }
        if (v96) {
          objc_msgSend(v34, "setMessageSummaryInfo:");
        }
        long long v33 = v108;
      }
      [v34 setDestinationCallerID:v139];
      [v34 setThreadIdentifier:ThreadIdentifierWithComponents];
      objc_msgSend(v34, "setReplaceID:", objc_msgSend(v115, "longLongValue"));
      [v34 setFallbackHash:v129];
      CFStringRef v75 = IMDMessageRecordCopyThreadCountsByPart((uint64_t)a1);
      if (v75)
      {
        __int16 v76 = (__CFString *)v75;
        [v34 setReplyCountsByPart:v75];
      }
      long long v42 = v106;
      long long v41 = v114;
      uint64_t v39 = v105;
      if (![v20 count]
        && [v160 length]
        && ([v34 hasDataDetectorResults] & 1) == 0)
      {
        [v34 setPlainBody:v160];
      }
      if (([v34 flags] & 4) == 0 && !objc_msgSend(v34, "sender")
        || ([v34 isFromMe] & 1) == 0 && !objc_msgSend(v34, "sender")
        || !objc_msgSend((id)objc_msgSend(v34, "guid"), "length"))
      {

        sqlite3_int64 v34 = 0;
      }
      long long v32 = v98;
      long long v40 = v100;
      goto LABEL_102;
    case 1:
      id v51 = v10;
      long long v32 = (void *)v14;
      id v99 = v11;
      long long v33 = v108;
      sqlite3_int64 v34 = objc_msgSend(objc_alloc(MEMORY[0x1E4F6E8E0]), "initWithSender:time:guid:type:", v11);
      if (v144) {
        uint64_t v52 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithMessageSummaryInfoData:");
      }
      else {
        uint64_t v52 = 0;
      }
      long long v41 = v114;
      [v34 setChangeType:v168];
      [v34 setUnformattedID:v118];
      [v34 setCountryCode:v32];
      sqlite3_int64 v36 = (void *)v104;
      [v34 setOtherHandle:v104];
      uint64_t v37 = (void *)v103;
      [v34 setOtherUnformattedID:v103];
      uint64_t v38 = (void *)v102;
      [v34 setOtherCountryCode:v102];
      [v34 setService:v25];
      [v34 setAccount:v156];
      [v34 setAccountID:v155];
      [v34 _setMessageID:v175];
      [v34 setDestinationCallerID:v139];
      [v34 setReplyToGUID:v138];
      uint64_t v39 = v105;
      [v34 setSortID:v105];
      objc_msgSend(v34, "setErrorCode:", objc_msgSend(v114, "unsignedIntValue"));
      [v34 setMessageSummaryInfo:v52];
      [v34 setTimeRead:v51];
      long long v42 = v106;
      long long v40 = v99;
      break;
    case 2:
      id v31 = objc_alloc(MEMORY[0x1E4F6E7A8]);
      long long v32 = (void *)v14;
      long long v33 = v108;
      sqlite3_int64 v34 = (void *)[v31 initWithSender:v11 time:v108 guid:v161 type:2];
      [v34 setTitle:v153];
      goto LABEL_61;
    case 3:
      id v35 = objc_alloc(MEMORY[0x1E4F6E798]);
      long long v32 = (void *)v14;
      long long v33 = v108;
      sqlite3_int64 v34 = (void *)[v35 initWithSender:v11 time:v108 guid:v161 type:3];
      [v34 setActionType:v168];
LABEL_61:
      [v34 setUnformattedID:v118];
      [v34 setCountryCode:v32];
      sqlite3_int64 v36 = (void *)v104;
      [v34 setOtherHandle:v104];
      uint64_t v37 = (void *)v103;
      [v34 setOtherUnformattedID:v103];
      uint64_t v38 = (void *)v102;
      [v34 setOtherCountryCode:v102];
      [v34 setService:v25];
      [v34 setAccount:v156];
      [v34 setAccountID:v155];
      [v34 _setMessageID:v175];
      [v34 setDestinationCallerID:v139];
      [v34 setReplyToGUID:v138];
      uint64_t v39 = v105;
      [v34 setSortID:v105];
      long long v40 = v11;
      long long v41 = v114;
      objc_msgSend(v34, "setErrorCode:", objc_msgSend(v114, "unsignedIntValue"));
      long long v42 = v106;
      break;
    case 4:
      id v43 = objc_alloc(MEMORY[0x1E4F6E800]);
      long long v32 = (void *)v14;
      long long v33 = v108;
      sqlite3_int64 v34 = (void *)[v43 initWithSender:v11 time:v108 guid:v161 type:4];
      [v34 setStatus:v167];
      [v34 setDirection:v166];
      long long v44 = v34;
      goto LABEL_72;
    case 5:
      id v53 = objc_alloc(MEMORY[0x1E4F6E828]);
      long long v32 = (void *)v14;
      long long v33 = v108;
      sqlite3_int64 v34 = (void *)[v53 initWithSender:v11 time:v108 guid:v161 type:5];
      [v34 setActionType:v164];
      [v34 setUnformattedID:v118];
      [v34 setCountryCode:v32];
      sqlite3_int64 v36 = (void *)v104;
      [v34 setOtherHandle:v104];
      uint64_t v37 = (void *)v103;
      [v34 setOtherUnformattedID:v103];
      uint64_t v38 = (void *)v102;
      [v34 setOtherCountryCode:v102];
      [v34 setOriginalMessageGUID:v154];
      [v34 setService:v25];
      [v34 setAccount:v156];
      [v34 setAccountID:v155];
      [v34 _setMessageID:v175];
      [v34 setBalloonBundleID:v148];
      goto LABEL_73;
    case 6:
      long long v32 = (void *)v14;
      if (v144) {
        uint64_t v54 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithMessageSummaryInfoData:");
      }
      else {
        uint64_t v54 = MEMORY[0x1E4F1CC08];
      }
      long long v33 = v108;
      id v63 = objc_alloc(MEMORY[0x1E4F6EA78]);
      sqlite3_int64 v34 = (void *)[v63 initWithSender:v11 time:v108 guid:v161 messageSummaryInfo:v54];
      [v34 setService:v25];
      [v34 setAccount:v156];
      [v34 setAccountID:v155];
      [v34 _setMessageID:v175];
      [v34 setUnformattedID:v118];
      [v34 setCountryCode:v32];
      [v34 setDestinationCallerID:v139];
      objc_msgSend(v34, "setFlags:", -[__CFNumber unsignedLongLongValue](v158, "unsignedLongLongValue"));
      [v34 setReplyToGUID:v138];
      uint64_t v39 = v105;
      [v34 setSortID:v105];
      long long v42 = v106;
      long long v40 = v11;
      long long v41 = v114;
      goto LABEL_102;
    case 7:
      id v45 = objc_alloc(MEMORY[0x1E4F6EAA0]);
      id v46 = v161;
      id v47 = v11;
      long long v32 = (void *)v14;
      long long v33 = v108;
      id v48 = v108;
      uint64_t v49 = 7;
      goto LABEL_71;
    case 8:
      id v45 = objc_alloc(MEMORY[0x1E4F6E808]);
      id v46 = v161;
      id v47 = v11;
      long long v32 = (void *)v14;
      long long v33 = v108;
      id v48 = v108;
      uint64_t v49 = 8;
LABEL_71:
      long long v44 = (void *)[v45 initWithSender:v47 time:v48 guid:v46 type:v49];
      sqlite3_int64 v34 = v44;
LABEL_72:
      [v44 setUnformattedID:v118];
      [v34 setCountryCode:v32];
      sqlite3_int64 v36 = (void *)v104;
      [v34 setOtherHandle:v104];
      uint64_t v37 = (void *)v103;
      [v34 setOtherUnformattedID:v103];
      uint64_t v38 = (void *)v102;
      [v34 setOtherCountryCode:v102];
      [v34 setService:v25];
      [v34 setAccount:v156];
      [v34 setAccountID:v155];
      [v34 _setMessageID:v175];
LABEL_73:
      [v34 setDestinationCallerID:v139];
      [v34 setReplyToGUID:v138];
      uint64_t v39 = v105;
      [v34 setSortID:v105];
      long long v42 = v106;
      long long v40 = v11;
      long long v41 = v114;
      break;
    default:
      sqlite3_int64 v34 = 0;
      long long v42 = v106;
      long long v40 = v11;
      long long v41 = v114;
      uint64_t v50 = (void *)v14;
      long long v33 = v108;
      uint64_t v39 = v105;
      long long v32 = v50;
LABEL_102:
      sqlite3_int64 v36 = (void *)v104;
      uint64_t v38 = (void *)v102;
      uint64_t v37 = (void *)v103;
      break;
  }
  [v34 setCloudKitSyncState:v143];
  [v34 setCloudKitRecordID:v142];
  [v34 setCloudKitServerChangeTokenBlob:v141];
  [v34 setCloudKitRecordChangeTag:v140];
  [v34 setReplyToGUID:v138];
  [v34 setSortID:v39];

  return v34;
}

void sub_1AFC2AAB8(uint64_t a1, uint64_t a2)
{
}

void sub_1AFC2AAC8(uint64_t a1)
{
}

id sub_1AFC2AAD4(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1AFC2ACC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1AFC2ACE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateClientState];
}

uint64_t sub_1AFC2AD20(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateClientState];
}

void sub_1AFC2AF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AFC2AF20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1AFC2AF30(uint64_t a1)
{
}

void sub_1AFC2AF38(uint64_t a1, void *a2)
{
}

uint64_t sub_1AFC2AF48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40) + 16))();
}

uint64_t sub_1AFC2B0A8()
{
  uint64_t result = MEMORY[0x1B3E89B10](@"LPSharedObjectMetadata", @"LinkPresentation");
  qword_1E9AF8318 = result;
  return result;
}

uint64_t sub_1AFC2B12C()
{
  uint64_t result = MEMORY[0x1B3E89B10](@"LPSpecializationMetadata", @"LinkPresentation");
  qword_1E9AF8328 = result;
  return result;
}

void sub_1AFC2D2A4(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4FADA90] sharedInstance];
  uint64_t v3 = [*(id *)(a1 + 32) groupUUID];
  uint64_t v4 = [v2 callForConversationWithGroupUUID:v3];

  uint64_t v5 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"md"];
  if (v4)
  {
    uint64_t v6 = [v4 dateConnected];
    uint64_t v7 = v6;
    if (v6 && v5)
    {
      uint64_t v8 = [v4 dateConnected];
      uint64_t v9 = [v8 compare:v5];

      if (v9 != 1)
      {
        if (IMOSLoggingEnabled())
        {
          id v10 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            id v11 = [v4 dateConnected];
            int v15 = 138412546;
            uint64_t v16 = v11;
            __int16 v17 = 2112;
            CFArrayRef v18 = v5;
            _os_log_impl(&dword_1AFB53000, v10, OS_LOG_TYPE_INFO, "Updating conversation with highlight dictionary since call start date %@ is before message date %@", (uint8_t *)&v15, 0x16u);
          }
        }
        [*(id *)(a1 + 48) addCollaborationDictionary:*(void *)(a1 + 40) forConversation:*(void *)(a1 + 32) fromMe:*(unsigned __int8 *)(a1 + 56)];
        goto LABEL_15;
      }
    }
    else
    {
    }
  }
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = [v4 dateConnected];
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412802;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      CFArrayRef v18 = v5;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_impl(&dword_1AFB53000, v12, OS_LOG_TYPE_INFO, "Message was not sent after call start time %@ message send time: %@, so not updating conversation with highlight dictionary %@", (uint8_t *)&v15, 0x20u);
    }
  }
LABEL_15:
}

void sub_1AFC2E430()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_highlightedContentServerDate" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1EB5ABA88;
  qword_1EB5ABA88 = v0;
}

void sub_1AFC2E4DC()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_syndicationContentType" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8338;
  qword_1E9AF8338 = v0;
}

void sub_1AFC2E588()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_collaborationIdentifier" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8348;
  qword_1E9AF8348 = v0;
}

void sub_1AFC2E634()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_ckBundleIDs" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8358;
  qword_1E9AF8358 = v0;
}

void sub_1AFC2E6E0()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_lpTitle" searchable:1 searchableByDefault:0 unique:0 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8368;
  qword_1E9AF8368 = v0;
}

void sub_1AFC2E78C()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_collaborationMetadata" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8378;
  qword_1E9AF8378 = v0;
}

void sub_1AFC2E838()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F237C0]) initWithKeyName:@"com_apple_mobilesms_dataDetectedLink" searchable:0 searchableByDefault:0 unique:1 multiValued:0];
  uint64_t v1 = (void *)qword_1E9AF8388;
  qword_1E9AF8388 = v0;
}

Class sub_1AFC2E890(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1E9AF83A0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    _DWORD v3[2] = (void *)3221225472;
    v3[3] = sub_1AFC2E9BC;
    void v3[4] = &unk_1E5F8E728;
    void v3[5] = v3;
    long long v4 = xmmword_1E5F9CD68;
    uint64_t v5 = 0;
    qword_1E9AF83A0 = _sl_dlopen();
  }
  if (!qword_1E9AF83A0) {
    sub_1AFC70AC4(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("LPLinkMetadataSharedWithYouTransformer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1AFC70B44();
  }
  qword_1E9AF8398 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1AFC2E9BC()
{
  uint64_t result = _sl_dlopen();
  qword_1E9AF83A0 = result;
  return result;
}

void __XPCServerIMDMessageStoreSave_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC2EAA8;
  v5[3] = &unk_1E5F922D0;
  void v5[4] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC2EAA8(uint64_t a1)
{
  IMDSMSRecordStoreSave();
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

BOOL sub_1AFC2EAF8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  BOOL v2 = a1 != 0;
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6C360], "sharedInstance"), "isInternalInstall"))
  {
    if (qword_1EB5AB9C8 != -1) {
      dispatch_once(&qword_1EB5AB9C8, &unk_1F084D738);
    }
    if (byte_1E9AF7F58)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          BOOL v4 = @"NO";
          if (a1) {
            BOOL v4 = @"YES";
          }
          int v6 = 138412290;
          uint64_t v7 = v4;
          _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Database client wants response: %@, but DisablePriorityInversionFixIMDP is YES", (uint8_t *)&v6, 0xCu);
        }
      }
      return 0;
    }
  }
  return v2;
}

void __XPCServerIMDMessageStoreIsFull_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC2ECA4;
  v5[3] = &unk_1E5F9CD88;
  void v5[4] = a3;
  void v5[5] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC2ECA4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int IsFull = IMDSMSRecordIsFull();
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      BOOL v4 = @"NO";
      if (IsFull) {
        BOOL v4 = @"YES";
      }
      int v7 = 138412290;
      uint64_t v8 = v4;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Is database full? %@", (uint8_t *)&v7, 0xCu);
    }
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5) {
    xpc_dictionary_set_BOOL(v5, "BOOL_result", IsFull != 0);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDMessageStoreSchemaVersion_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1AFC2EE38;
  v5[3] = &unk_1E5F9CD88;
  void v5[4] = a3;
  void v5[5] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC2EE38(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int SchemaVersion = IMDSMSRecordStoreGetSchemaVersion();
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = SchemaVersion;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Database schema version? %u", (uint8_t *)v5, 8u);
    }
  }
  if (SchemaVersion) {
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), "uint64_result", SchemaVersion);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDMessageStoreSchema_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1AFC2EFB4;
  v5[3] = &unk_1E5F9CD88;
  void v5[4] = a3;
  void v5[5] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC2EFB4(uint64_t a1)
{
  Schema = IMDSMSRecordStoreGetSchema();
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Fetched Database schema", v5, 2u);
    }
  }
  if (Schema) {
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 32), "schema", (const char *)[(__CFString *)Schema UTF8String]);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCreate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, long long a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, long long a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1AFC2F190;
  v26[3] = &unk_1E5F9CDB0;
  int v40 = a6;
  int v41 = a7;
  void v26[4] = a5;
  v26[5] = a8;
  long long v27 = a9;
  char v45 = a12;
  uint64_t v28 = a10;
  uint64_t v29 = a14;
  char v46 = a15;
  uint64_t v30 = a16;
  uint64_t v31 = a17;
  char v47 = a18;
  int v42 = a11;
  int v43 = a19;
  long long v32 = a20;
  uint64_t v38 = a13;
  uint64_t v39 = a22;
  uint64_t v33 = a21;
  uint64_t v34 = a23;
  int v44 = a25;
  uint64_t v35 = a24;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  BOOL v25 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v26, v25);
}

void sub_1AFC2F190(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  BOOL v2 = IMDAttachmentRecordCreate(0, *(void *)(a1 + 32), (uint8_t *)*(int *)(a1 + 168), *(int *)(a1 + 172), *(void *)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(int *)(a1 + 176), *(unsigned char *)(a1 + 188), *(void *)(a1 + 152), *(void *)(a1 + 72), *(unsigned char *)(a1 + 189), *(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 190), *(int *)(a1 + 180), *(void *)(a1 + 96), *(void *)(a1 + 104),
         *(void *)(a1 + 112),
         *(void *)(a1 + 160),
         *(void *)(a1 + 120),
         *(void *)(a1 + 128),
         *(int *)(a1 + 184));
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v11 = v5;
        __int16 v12 = 2112;
        uint64_t v13 = v6;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Created attachment record for guid: %@ with filename %@", buf, 0x16u);
      }
    }
    _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)v2, *(void *)(a1 + 136), 1);
  }
  else if (v3)
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v8;
      _os_log_impl(&dword_1AFB53000, v7, OS_LOG_TYPE_INFO, "Failed to create attachment record for guid: %@", buf, 0xCu);
    }
  }
  uint64_t v9 = *(void *)(a1 + 144);
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
  if (v2) {
    CFRelease(v2);
  }
}

void __XPCServerIMDAttachmentRecordRIDForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC2F400;
  v6[3] = &unk_1E5F9CDD8;
  void v6[4] = a5;
  void v6[5] = a3;
  void v6[6] = a4;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC2F400(uint64_t a1)
{
  int64_t v2 = IMDAttachmentRecordRowIDForGUID(*(const __CFString **)(a1 + 32));
  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "rrid", v2);
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    BOOL v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1AFC2F4E8;
  void v7[3] = &unk_1E5F9CE00;
  char v8 = a6;
  void v7[4] = a5;
  void v7[5] = a3;
  void v7[6] = a4;
  BOOL v6 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v7, v6);
}

void sub_1AFC2F4E8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = IMDAttachmentRecordCopyAttachmentForGUIDIsLegacyGUID(*(CFStringRef *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v5;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Copied attachment record for guid: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)v2, *(void *)(a1 + 40), 1);
  }
  else if (v3)
  {
    BOOL v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "No attachment record found for guid: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
  if (v2) {
    CFRelease(v2);
  }
}

void __XPCServerIMDAttachmentRecordCopyStickerAttachmentForStickerCachePath_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC2F6E8;
  v6[3] = &unk_1E5F9CDD8;
  void v6[4] = a5;
  void v6[5] = a3;
  void v6[6] = a4;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1AFC2F6E8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = IMDAttachmentCopyAttachmentWithStickerPath(*(CFStringRef *)(a1 + 32));
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v5;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Copied attachment record for path: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)v2, *(void *)(a1 + 40), 1);
  }
  else if (v3)
  {
    BOOL v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "No attachment record found for path: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
  if (v2) {
    CFRelease(v2);
  }
}

void __XPCServerIMDAttachmentRecordDeleteAttachmentForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC2F8E0;
  v6[3] = &unk_1E5F9CD88;
  void v6[4] = a5;
  void v6[5] = a4;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC2F8E0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Delete attachment for guid: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  IMDAttachmentRecordDeleteAttachmentForGUID(*(CFStringRef *)(a1 + 32));
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordDeleteAttachmentsOlderThanDays_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC2FA3C;
  v6[3] = &unk_1E5F9CE28;
  void v6[4] = a4;
  void v6[5] = a5;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC2FA3C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v5 = 134217984;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Deleting attachments older than %lld days", (uint8_t *)&v5, 0xCu);
    }
  }
  IMDAttachmentRecordDeleteAttachmentsOlderThanDays(*(void *)(a1 + 40));
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC2FB9C;
  v6[3] = &unk_1E5F9CE50;
  void v6[5] = a4;
  void v6[6] = a5;
  void v6[4] = a3;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC2FB9C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      int v6 = 134217984;
      uint64_t v7 = v3;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Query space saved by deleting attachments older than %lld days", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t v4 = IMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays(*(void *)(a1 + 48));
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), "bytes", v4);
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDDatabaseClean_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1AFC2FD0C;
  v5[3] = &unk_1E5F922D0;
  void v5[4] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC2FD0C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v4 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Clean database", v4, 2u);
    }
  }
  IMDDatabaseClean();
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordFindLargestConversations_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC2FE2C;
  v6[3] = &unk_1E5F9CE50;
  void v6[5] = a4;
  void v6[6] = a5;
  void v6[4] = a3;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC2FE2C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Query largest conversations", v6, 2u);
    }
  }
  if (IMDAttachmentFindLargestConversations(*(void *)(a1 + 48)))
  {
    uint64_t v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v3)
    {
      BOOL v4 = v3;
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "result", v3);
      xpc_release(v4);
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordFindLargestAttachmentGUIDsWithLimitAndOffset_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFC2FF80;
  v8[3] = &unk_1E5F9CE78;
  v8[8] = a6;
  v8[9] = a7;
  void v8[4] = a2;
  void v8[5] = a3;
  void v8[6] = a4;
  void v8[7] = a5;
  BOOL v7 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1AFC2FF80(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Query largest attachment GUIDs", v7, 2u);
    }
  }
  string = (char *)xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), "attachmentClass");
  if (string) {
    string = (char *)[NSString stringWithUTF8String:string];
  }
  if (IMDAttachmentFindLargestAttachmentGUIDsForAttachmentClassWithLimitAndOffset(string, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72)))
  {
    BOOL v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v4)
    {
      BOOL v5 = v4;
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), "result", v4);
      xpc_release(v5);
    }
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordSpaceTakenByAttachmentClass_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC300F8;
  v6[3] = &unk_1E5F9CE50;
  void v6[5] = a4;
  void v6[6] = a5;
  void v6[4] = a3;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC300F8(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    CFStringRef v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_1AFB53000, v2, OS_LOG_TYPE_INFO, "Query space taken by attachment class", v6, 2u);
    }
  }
  if (IMDAttachmentSpaceTakenByAttachmentClass(*(void *)(a1 + 48)))
  {
    uint64_t v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v3)
    {
      BOOL v4 = v3;
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "result", v3);
      xpc_release(v4);
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordDoesAttachmentWithGUIDExist_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC30248;
  v6[3] = &unk_1E5F9CDD8;
  void v6[4] = a5;
  void v6[5] = a3;
  void v6[6] = a4;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC30248(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int DoesAttachmentWithGUIDExist = IMDAttachmentRecordDoesAttachmentWithGUIDExist(*(const __CFString **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      BOOL v4 = @"NO";
      uint64_t v5 = *(void *)(a1 + 32);
      if (DoesAttachmentWithGUIDExist) {
        BOOL v4 = @"YES";
      }
      int v8 = 138412546;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Does attachment exist for guid: %@? %@", (uint8_t *)&v8, 0x16u);
    }
  }
  int v6 = *(void **)(a1 + 40);
  if (v6) {
    xpc_dictionary_set_BOOL(v6, "BOOL_result", DoesAttachmentWithGUIDExist != 0);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordDoesStickerPathHaveAttachments_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC303F4;
  v6[3] = &unk_1E5F9CDD8;
  void v6[4] = a5;
  void v6[5] = a3;
  void v6[6] = a4;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC303F4(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t HaveAttachments = IMDAttachmentRecordDoesStickerPathHaveAttachments(*(CFStringRef *)(a1 + 32));
  if (*(void *)(a1 + 40))
  {
    int64_t v3 = HaveAttachments;
    if (IMOSLoggingEnabled())
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v7 = 138412546;
        uint64_t v8 = v5;
        __int16 v9 = 2048;
        int64_t v10 = v3;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Attachment count at sticker: %@ is %lld", (uint8_t *)&v7, 0x16u);
      }
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "int64_result", v3);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyRecentFilenames_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC30588;
  v6[3] = &unk_1E5F9CE50;
  void v6[5] = a4;
  void v6[6] = a5;
  void v6[4] = a3;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC30588(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = (void *)IMDAttachmentRecordCopyRecentFilenames(a1[6]);
  if (IMOSLoggingEnabled())
  {
    int64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = a1[6];
      int v12 = 134218240;
      uint64_t v13 = v4;
      __int16 v14 = 2048;
      uint64_t v15 = [v2 count];
      _os_log_impl(&dword_1AFB53000, v3, OS_LOG_TYPE_INFO, "Copying filenames for most recent %lld attachments (Results: %ld)", (uint8_t *)&v12, 0x16u);
    }
  }
  xpc_object_t v5 = xpc_array_create(0, 0);
  if (v5)
  {
    uint64_t v6 = [v2 count];
    if (v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = (void *)[v2 objectAtIndex:v7];
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, (const char *)[v8 UTF8String]);
          xpc_release(v9);
        }
        ++v7;
      }
      while (v6 != v7);
    }
    int64_t v10 = (void *)a1[4];
    if (v10) {
      xpc_dictionary_set_value(v10, "array_result", v5);
    }
    xpc_release(v5);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1AFC307C8;
  v8[3] = &unk_1E5F9CEA0;
  void v8[7] = a5;
  v8[8] = a7;
  void v8[4] = a6;
  void v8[5] = a3;
  void v8[6] = a4;
  BOOL v7 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1AFC307C8(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = IMDAttachmentRecordCopyAttachmentsForQueryWithLimit(*(void *)(a1 + 56), *(void **)(a1 + 32), *(void *)(a1 + 64));
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      xpc_object_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 56);
        uint64_t v6 = *(void *)(a1 + 64);
        int v13 = 134218496;
        uint64_t v14 = v6;
        __int16 v15 = 2048;
        uint64_t v16 = v7;
        __int16 v17 = 2048;
        CFIndex v18 = Count;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Copying most recent %lld attachments for queryType: %lld (Results: %ld)", (uint8_t *)&v13, 0x20u);
      }
    }
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v10, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v10);
          xpc_release(v10);
        }
      }
    }
    uint64_t v11 = *(void **)(a1 + 40);
    if (v11) {
      xpc_dictionary_set_value(v11, "array_result", v3);
    }
  }
  if (v3) {
    xpc_release(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1AFC30A1C;
  void v7[3] = &unk_1E5F9CEC8;
  void v7[5] = a5;
  void v7[6] = a6;
  void v7[4] = a4;
  BOOL v6 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1AFC30A1C(void *a1)
{
  IMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState(a1[5], a1[6]);
  uint64_t result = a1[4];
  if (result)
  {
    xpc_object_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC30AEC;
  v6[3] = &unk_1E5F9CE28;
  void v6[4] = a4;
  void v6[5] = a5;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC30AEC(uint64_t a1)
{
  IMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit(*(void *)(a1 + 40));
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    xpc_object_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1AFC30BB8;
  v5[3] = &unk_1E5F922D0;
  void v5[4] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC30BB8(uint64_t a1)
{
  IMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync();
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    xpc_object_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void __XPCServerIMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1AFC30C80;
  v5[3] = &unk_1E5F922D0;
  void v5[4] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC30C80(uint64_t a1)
{
  IMDAttachmentResetAllAttachmentsInFailedCloudDownloadState();
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    xpc_object_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC30D4C;
  v6[3] = &unk_1E5F9CDD8;
  void v6[4] = a5;
  void v6[5] = a3;
  void v6[6] = a4;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1AFC30D4C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = (const void *)IMDAttachmentRecordCopyMessageForAttachmentGUID(*(const __CFString **)(a1 + 32));
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v5;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Getting message record for attachment GUID %@", (uint8_t *)&v9, 0xCu);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(void *)(a1 + 40), 1, 0);
  }
  else if (v3)
  {
    BOOL v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1AFB53000, v6, OS_LOG_TYPE_INFO, "Failed to copy message for attachment GUID %@", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
  if (v2) {
    CFRelease(v2);
  }
}

void __XPCServerIMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1AFC30F50;
  void v7[3] = &unk_1E5F9CEF0;
  void v7[4] = a5;
  void v7[5] = a6;
  void v7[6] = a3;
  void v7[7] = a4;
  BOOL v6 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1AFC30F50(uint64_t *a1)
{
  int updated = IMDAttachmentRecordUpdateAttachmentGUIDWithGUID(a1[4], a1[5]);
  int v3 = (void *)a1[6];
  if (v3) {
    xpc_dictionary_set_BOOL(v3, "BOOL_result", updated != 0);
  }
  uint64_t result = a1[7];
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordGetPurgeableDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1AFC31040;
  v5[3] = &unk_1E5F9CD88;
  void v5[4] = a3;
  void v5[5] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC31040(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t PurgeableDiskSpace = IMDAttachmentRecordGetPurgeableDiskSpace();
  if (*(void *)(a1 + 32))
  {
    int64_t v3 = PurgeableDiskSpace;
    if (IMOSLoggingEnabled())
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v6 = 134217984;
        int64_t v7 = v3;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Purgeable disk space is %lld", (uint8_t *)&v6, 0xCu);
      }
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "purgeableDiskSpace", v3);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1AFC311BC;
  v5[3] = &unk_1E5F9CD88;
  void v5[4] = a3;
  void v5[5] = a4;
  BOOL v4 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1AFC311BC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t NonSyncedAttachmentDiskSpace = IMDAttachmentRecordGetNonSyncedAttachmentDiskSpace();
  if (*(void *)(a1 + 32))
  {
    int64_t v3 = NonSyncedAttachmentDiskSpace;
    if (IMOSLoggingEnabled())
    {
      BOOL v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v6 = 134217984;
        int64_t v7 = v3;
        _os_log_impl(&dword_1AFB53000, v4, OS_LOG_TYPE_INFO, "Non synced attachment disk space is %lld", (uint8_t *)&v6, 0xCu);
      }
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "diskSpace", v3);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1AFC3133C;
  v6[3] = &unk_1E5F9CE50;
  void v6[5] = a4;
  void v6[6] = a5;
  void v6[4] = a3;
  BOOL v5 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1AFC3133C(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (const __CFArray *)IMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace(a1[6]);
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      BOOL v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = a1[6];
        int v12 = 134218240;
        uint64_t v13 = v6;
        __int16 v14 = 2048;
        CFIndex v15 = Count;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Copying oldest attachments to delete to free up: %lld bytes (Results: %ld)", (uint8_t *)&v12, 0x16u);
      }
    }
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v9, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v9);
          xpc_release(v9);
        }
      }
    }
    uint64_t v10 = (void *)a1[4];
    if (v10) {
      xpc_dictionary_set_value(v10, "array_result", v3);
    }
  }
  if (v3) {
    xpc_release(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1AFC31580;
  void v7[3] = &unk_1E5F9CF18;
  void v7[6] = a5;
  void v7[7] = a6;
  void v7[4] = a3;
  void v7[5] = a4;
  BOOL v6 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1AFC31580(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = IMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChatsTest(a1[6], a1[7]);
  uint64_t v21 = [(__CFDictionary *)v1 allValues];
  CFTypeRef cf = v1;
  CFArrayRef v2 = (void *)[(__CFDictionary *)v1 allKeys];
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if ([v2 count])
  {
    unint64_t v5 = 0;
    *(void *)&long long v4 = 134218496;
    long long v19 = v4;
    do
    {
      BOOL v6 = (void *)[v2 objectAtIndexedSubscript:v5];
      int64_t v7 = (void *)[(__CFDictionary *)cf valueForKey:v6];
      xpc_object_t v8 = xpc_array_create(0, 0);
      if (v8) {
        BOOL v9 = v21 != 0;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        uint64_t v10 = [v7 count];
        if (IMOSLoggingEnabled())
        {
          uint64_t v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = a1[6];
            uint64_t v12 = a1[7];
            *(_DWORD *)long long buf = v19;
            uint64_t v24 = v12;
            __int16 v25 = 2048;
            uint64_t v26 = v13;
            __int16 v27 = 2048;
            uint64_t v28 = v10;
            _os_log_impl(&dword_1AFB53000, v11, OS_LOG_TYPE_INFO, "Copying most recent attachments %ld from %ld most recent chats: (Results: %ld)", buf, 0x20u);
          }
        }
        if (v10)
        {
          for (CFIndex i = 0; i != v10; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, i);
            xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
            if (v16)
            {
              _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v16, 1);
              xpc_array_set_value(v8, 0xFFFFFFFFFFFFFFFFLL, v16);
              xpc_release(v16);
            }
          }
        }
      }
      xpc_dictionary_set_value(v3, (const char *)[v6 cStringUsingEncoding:1], v8);
      if (v8) {
        xpc_release(v8);
      }
      ++v5;
    }
    while (objc_msgSend(v2, "count", v19) > v5);
  }
  __int16 v17 = (void *)a1[4];
  if (v17) {
    xpc_dictionary_set_value(v17, "dictionary_result", v3);
  }
  if (v3) {
    xpc_release(v3);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1AFC318A8;
  void v7[3] = &unk_1E5F9CF40;
  void v7[5] = a4;
  void v7[6] = a5;
  int v8 = a6;
  void v7[4] = a3;
  BOOL v6 = sub_1AFC2EAF8(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1AFC318A8(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (const __CFArray *)IMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace(*(void *)(a1 + 48), *(_DWORD *)(a1 + 56));
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      unint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        int v7 = *(_DWORD *)(a1 + 56);
        int v13 = 134218496;
        uint64_t v14 = v6;
        __int16 v15 = 1024;
        int v16 = v7;
        __int16 v17 = 2048;
        CFIndex v18 = Count;
        _os_log_impl(&dword_1AFB53000, v5, OS_LOG_TYPE_INFO, "Copying oldest attachments to delete to free up: %lld bytes starting offset: %d (Results: %ld)", (uint8_t *)&v13, 0x1Cu);
      }
    }
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v10, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v10);
          xpc_release(v10);
        }
      }
    }
    uint64_t v11 = *(void **)(a1 + 32);
    if (v11) {
      xpc_dictionary_set_value(v11, "array_result", v3);
    }
  }
  if (v3) {
    xpc_release(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}