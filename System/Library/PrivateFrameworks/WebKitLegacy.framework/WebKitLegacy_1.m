void sub_1E140E634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  atomic_uint *v30;
  void *v31;

  *v31 = 0;
  if (atomic_fetch_add(v30 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v30 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v30 + 16))(v30);
  _Unwind_Resume(exception_object);
}

void sub_1E140E908(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((unsigned int *)&a19, a2);
  v29 = a28;
  a28 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  JUMPOUT(0x1E140E99CLL);
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::retrieveRecords@<X0>(uint64_t *a1@<X8>)
{
  v99[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  long long v85 = 0uLL;
  *(void *)&long long v86 = "retrieveRecords";
  *((void *)&v86 + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v2 + 8) = 1;
  *(void *)uint64_t v2 = &unk_1F3C7B060;
  long long v3 = v86;
  *(_OWORD *)(v2 + 16) = v85;
  *(_OWORD *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 48) = 0;
  uint64_t v4 = v2 + 56;
  *(_DWORD *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = v2 + 104;
  *(void *)(v2 + 96) = 1;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 128) = 0;
  v5 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    goto LABEL_72;
  }
  WTF::String::String((WTF::String *)&v94, "creating ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v93, v2);
  v7 = v93;
  if (v94)
  {
    int v8 = *((_DWORD *)v94 + 1);
    if (v93) {
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = 0;
    if (v93)
    {
LABEL_5:
      int v9 = *((_DWORD *)v93 + 1);
      if ((v9 | v8) < 0) {
        goto LABEL_179;
      }
      goto LABEL_9;
    }
  }
  int v9 = 0;
  if (v8 < 0)
  {
LABEL_179:
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x1E140F4CCLL);
  }
LABEL_9:
  unint64_t v10 = (v8 + v9);
  if (__OFADD__(v8, v9)) {
    goto LABEL_179;
  }
  if (!v94)
  {
    if (!v93)
    {
      int v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v12 = (*((unsigned __int8 *)v93 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v11 = *((_DWORD *)v94 + 4);
  int v12 = (v11 >> 2) & 1;
  if (v93 && (v11 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v94, (uint64_t)v93, &buf);
  v87 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_179;
  }
  v93 = 0;
  if (!v7) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_21:
    v14 = v94;
    v94 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v7, v13);
  v14 = v94;
  v94 = 0;
  if (!v14) {
    goto LABEL_26;
  }
LABEL_24:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v13);
    v82 = a1;
    v15 = *((void *)v6 + 4);
    v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v16) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  *(_DWORD *)v14 -= 2;
LABEL_26:
  v82 = a1;
  v15 = *((void *)v6 + 4);
  v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_29:
  WTF::String::utf8();
  if (v89) {
    v18 = (char *)v89 + 16;
  }
  else {
    v18 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v18;
  _os_log_impl(&dword_1E1345000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v16 = v89;
  v89 = 0;
  if (!v16)
  {
LABEL_35:
    if (*v6) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_35;
  }
  v16 = (WTF *)WTF::fastFree(v16, v17);
  if (*v6)
  {
LABEL_36:
    if (v6[16] >= 4u)
    {
      v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v20 = *v19;
        if (v20) {
          goto LABEL_68;
        }
        int v21 = *v19;
        atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v21 != v20);
      uint64_t v22 = WTF::Logger::observers(v16);
      uint64_t v23 = *(unsigned int *)(v22 + 12);
      if (v23)
      {
        v24 = *(uint64_t **)v22;
        uint64_t v25 = *(void *)v22 + 8 * v23;
        while (1)
        {
          uint64_t v26 = *v24;
          LODWORD(buf) = 0;
          WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
          int v96 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v2);
          v89 = 0;
          uint64_t v90 = 0;
          v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
          LODWORD(v90) = 2;
          v89 = v27;
          uint64_t v28 = HIDWORD(v90);
          *((_DWORD *)v27 + 4 * HIDWORD(v90)) = buf;
          uint64_t v29 = *((void *)&buf + 1);
          if (*((void *)&buf + 1)) {
            **((_DWORD **)&buf + 1) += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v96;
          v30 = v97;
          if (v97) {
            *(_DWORD *)v97 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          HIDWORD(v90) = v28 + 2;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, v6, 4, &v89);
          v31 = v89;
          if (HIDWORD(v90))
          {
            uint64_t v32 = 16 * HIDWORD(v90);
            v33 = (WTF::StringImpl **)((char *)v89 + 8);
            do
            {
              v34 = *v33;
              *v33 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2) {
                  WTF::StringImpl::destroy(v34, v17);
                }
                else {
                  *(_DWORD *)v34 -= 2;
                }
              }
              v33 += 2;
              v32 -= 16;
            }
            while (v32);
            v31 = v89;
          }
          if (v31)
          {
            v89 = 0;
            LODWORD(v90) = 0;
            WTF::fastFree(v31, v17);
          }
          v35 = v97;
          v97 = 0;
          if (!v35) {
            goto LABEL_61;
          }
          if (*(_DWORD *)v35 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v35, v17);
          v36 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v36)
          {
LABEL_64:
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v17);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
LABEL_43:
          if (++v24 == (uint64_t *)v25) {
            goto LABEL_66;
          }
        }
        *(_DWORD *)v35 -= 2;
LABEL_61:
        v36 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v36) {
          goto LABEL_64;
        }
        goto LABEL_43;
      }
LABEL_66:
      int v37 = 1;
      atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      uint64_t v4 = v2 + 56;
      if (v37 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_68:
  v5 = (unsigned __int8 *)v87;
  v87 = 0;
  a1 = v82;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      v5 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v17);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
LABEL_72:
  char v38 = 0;
  *a1 = v2;
  v87 = (WTF::StringImpl *)(v2 + 48);
  char v88 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v38, 1u, memory_order_acquire, memory_order_acquire);
  if (v38) {
    v5 = (unsigned __int8 *)MEMORY[0x1E4E44220](v2 + 48);
  }
  v39 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  v40 = v39;
  if (!*v39 || v39[16] < 4u)
  {
LABEL_168:
    uint64_t v79 = *(unsigned int *)(v2 + 80);
    if (v79 == -1) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v93, (WTF::Logger::LogSiteIdentifier *)&v85);
  WTF::String::String((WTF::String *)&v92, " rejecting ");
  uint64_t v83 = v4;
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v91, v2);
  v41 = (WTF::StringImpl *)v91;
  if (v93)
  {
    int v42 = *((_DWORD *)v93 + 1);
    if (v92) {
      goto LABEL_78;
    }
  }
  else
  {
    int v42 = 0;
    if (v92)
    {
LABEL_78:
      int v43 = *((_DWORD *)v92 + 1);
      if (v91) {
        goto LABEL_79;
      }
      goto LABEL_83;
    }
  }
  int v43 = 0;
  if (v91)
  {
LABEL_79:
    int v44 = *(_DWORD *)(v91 + 4);
    if ((v44 | v43) < 0) {
      goto LABEL_178;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v44 = 0;
  if (v43 < 0)
  {
LABEL_178:
    __break(0xC471u);
    goto LABEL_180;
  }
LABEL_84:
  BOOL v45 = __OFADD__(v43, v44);
  int v46 = v43 + v44;
  char v47 = v45;
  if (v42 < 0) {
    goto LABEL_178;
  }
  if (v47) {
    goto LABEL_178;
  }
  unsigned int v48 = v42 + v46;
  if (__OFADD__(v42, v46)) {
    goto LABEL_178;
  }
  if (v93 && (*((unsigned char *)v93 + 16) & 4) == 0)
  {
    int v49 = 0;
    goto LABEL_102;
  }
  if (!v92)
  {
    if (!v91)
    {
      int v49 = 1;
      goto LABEL_102;
    }
LABEL_98:
    int v49 = (*(unsigned __int8 *)(v91 + 16) >> 2) & 1;
    goto LABEL_102;
  }
  unsigned int v50 = *((_DWORD *)v92 + 4);
  int v49 = (v50 >> 2) & 1;
  if (v91 && (v50 & 4) != 0) {
    goto LABEL_98;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v48, v49, (uint64_t)v93, (uint64_t)v92, v91);
  v94 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_178;
  }
  uint64_t v91 = 0;
  if (!v41) {
    goto LABEL_106;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
LABEL_106:
    v52 = v92;
    v92 = 0;
    uint64_t v4 = v83;
    if (!v52) {
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v41, v51);
  v52 = v92;
  v92 = 0;
  uint64_t v4 = v83;
  if (!v52) {
    goto LABEL_111;
  }
LABEL_109:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::destroy(v52, v51);
    v53 = v93;
    v93 = 0;
    if (!v53) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  *(_DWORD *)v52 -= 2;
LABEL_111:
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_116:
    v54 = *((void *)v40 + 4);
    v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    if (!v55) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_114:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v53, v51);
  v54 = *((void *)v40 + 4);
  v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
  if (!v55) {
    goto LABEL_125;
  }
LABEL_119:
  WTF::String::utf8();
  if (v89) {
    v57 = (char *)v89 + 16;
  }
  else {
    v57 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v57;
  _os_log_impl(&dword_1E1345000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v55 = v89;
  v89 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      v55 = (WTF *)WTF::fastFree(v55, v56);
      if (!*v40) {
        goto LABEL_165;
      }
      goto LABEL_126;
    }
    --*(_DWORD *)v55;
  }
LABEL_125:
  if (!*v40) {
    goto LABEL_165;
  }
LABEL_126:
  if (v40[16] >= 4u)
  {
    v58 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v59 = *v58;
      if (v59) {
        goto LABEL_165;
      }
      int v60 = *v58;
      atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v60, v59 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v60 != v59);
    uint64_t v61 = WTF::Logger::observers(v55);
    uint64_t v62 = *(unsigned int *)(v61 + 12);
    if (v62)
    {
      v63 = *(uint64_t **)v61;
      uint64_t v84 = *(void *)v61 + 8 * v62;
      while (1)
      {
        uint64_t v64 = *v63;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v85);
        int v96 = 0;
        WTF::String::String((WTF::String *)&v97, " rejecting ");
        int v98 = 0;
        WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v99, v2);
        v89 = 0;
        uint64_t v90 = 0;
        v65 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v90) = 3;
        v89 = v65;
        uint64_t v66 = HIDWORD(v90);
        *((_DWORD *)v65 + 4 * HIDWORD(v90)) = buf;
        uint64_t v67 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v65 + 2 * v66 + 1) = v67;
        *((_DWORD *)v65 + 4 * (v66 + 1)) = v96;
        v68 = v97;
        if (v97) {
          *(_DWORD *)v97 += 2;
        }
        *((void *)v65 + 2 * (v66 + 1) + 1) = v68;
        *((_DWORD *)v65 + 4 * (v66 + 2)) = v98;
        v69 = v99[0];
        if (v99[0]) {
          *(_DWORD *)v99[0] += 2;
        }
        *((void *)v65 + 2 * (v66 + 2) + 1) = v69;
        HIDWORD(v90) = v66 + 3;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v64 + 16))(v64, v40, 4, &v89);
        v70 = v89;
        if (HIDWORD(v90))
        {
          uint64_t v71 = 16 * HIDWORD(v90);
          v72 = (WTF::StringImpl **)((char *)v89 + 8);
          do
          {
            v73 = *v72;
            *v72 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2) {
                WTF::StringImpl::destroy(v73, v56);
              }
              else {
                *(_DWORD *)v73 -= 2;
              }
            }
            v72 += 2;
            v71 -= 16;
          }
          while (v71);
          v70 = v89;
        }
        if (v70)
        {
          v89 = 0;
          LODWORD(v90) = 0;
          WTF::fastFree(v70, v56);
        }
        v74 = v99[0];
        v99[0] = 0;
        if (!v74) {
          goto LABEL_153;
        }
        if (*(_DWORD *)v74 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v74, v56);
        v75 = v97;
        v97 = 0;
        if (!v75) {
          goto LABEL_158;
        }
LABEL_156:
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
LABEL_158:
          v76 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v76) {
            goto LABEL_161;
          }
          goto LABEL_133;
        }
        WTF::StringImpl::destroy(v75, v56);
        v76 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v76)
        {
LABEL_161:
          if (*(_DWORD *)v76 == 2) {
            WTF::StringImpl::destroy(v76, v56);
          }
          else {
            *(_DWORD *)v76 -= 2;
          }
        }
LABEL_133:
        if (++v63 == (uint64_t *)v84) {
          goto LABEL_163;
        }
      }
      *(_DWORD *)v74 -= 2;
LABEL_153:
      v75 = v97;
      v97 = 0;
      if (!v75) {
        goto LABEL_158;
      }
      goto LABEL_156;
    }
LABEL_163:
    int v77 = 1;
    atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v77, 0, memory_order_release, memory_order_relaxed);
    uint64_t v4 = v83;
    if (v77 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_165:
  v78 = v94;
  v94 = 0;
  if (!v78) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
    goto LABEL_168;
  }
  WTF::StringImpl::destroy(v78, v56);
  uint64_t v79 = *(unsigned int *)(v2 + 80);
  if (v79 != -1) {
LABEL_169:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7B078[v79])(&buf, v4);
LABEL_170:
  *(unsigned char *)(v2 + 56) = 5;
  *(_DWORD *)(v2 + 72) = 1;
  *(_DWORD *)(v2 + 80) = 1;
  result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (atomic_uchar *volatile *)&v87);
  if (v88)
  {
    result = v87;
    int v81 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v87, (unsigned __int8 *)&v81, 0, memory_order_release, memory_order_relaxed);
    if (v81 != 1) {
      return (WTF *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void sub_1E140F4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  void *v31 = 0;
  if (atomic_fetch_add(v30 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v30 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v30 + 16))(v30);
  _Unwind_Resume(exception_object);
}

void sub_1E140F7AC(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((unsigned int *)&a19, a2);
  uint64_t v29 = a28;
  a28 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  JUMPOUT(0x1E140F840);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::batchDeleteOperation@<X0>(uint64_t *a1@<X8>)
{
  char v7 = 5;
  long long v4 = 0uLL;
  v5 = "batchDeleteOperation";
  uint64_t v6 = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x88);
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v2, &v4);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)&v4);
}

void sub_1E140F944(_Unwind_Exception *exception_object)
{
  *uint64_t v2 = 0;
  if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v1 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1E140F99C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::batchPutOperation@<X0>(uint64_t *a1@<X8>)
{
  char v7 = 5;
  long long v4 = 0uLL;
  v5 = "batchPutOperation";
  uint64_t v6 = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x88);
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v2, &v4);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)&v4);
}

void sub_1E140FA20(_Unwind_Exception *exception_object)
{
  *uint64_t v2 = 0;
  if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v1 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1E140FA78(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WebCore::CacheStorageConnection::clearMemoryRepresentation@<X0>(uint64_t *a1@<X8>)
{
  v99[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  long long v85 = 0uLL;
  *(void *)&long long v86 = "clearMemoryRepresentation";
  *((void *)&v86 + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v2 + 8) = 1;
  *(void *)uint64_t v2 = &unk_1F3C7B1F8;
  long long v3 = v86;
  *(_OWORD *)(v2 + 16) = v85;
  *(_OWORD *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 48) = 0;
  uint64_t v4 = v2 + 56;
  *(_DWORD *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = v2 + 88;
  *(void *)(v2 + 80) = 1;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = 0;
  *(_WORD *)(v2 + 112) = 0;
  v5 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  uint64_t v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    goto LABEL_72;
  }
  WTF::String::String((WTF::String *)&v94, "creating ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v93, v2);
  char v7 = v93;
  if (v94)
  {
    int v8 = *((_DWORD *)v94 + 1);
    if (v93) {
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = 0;
    if (v93)
    {
LABEL_5:
      int v9 = *((_DWORD *)v93 + 1);
      if ((v9 | v8) < 0) {
        goto LABEL_179;
      }
      goto LABEL_9;
    }
  }
  int v9 = 0;
  if (v8 < 0)
  {
LABEL_179:
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x1E1410534);
  }
LABEL_9:
  unint64_t v10 = (v8 + v9);
  if (__OFADD__(v8, v9)) {
    goto LABEL_179;
  }
  if (!v94)
  {
    if (!v93)
    {
      int v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v12 = (*((unsigned __int8 *)v93 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v11 = *((_DWORD *)v94 + 4);
  int v12 = (v11 >> 2) & 1;
  if (v93 && (v11 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v94, (uint64_t)v93, &buf);
  v87 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_179;
  }
  v93 = 0;
  if (!v7) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_21:
    v14 = v94;
    v94 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v7, v13);
  v14 = v94;
  v94 = 0;
  if (!v14) {
    goto LABEL_26;
  }
LABEL_24:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v13);
    v82 = a1;
    v15 = *((void *)v6 + 4);
    v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v16) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  *(_DWORD *)v14 -= 2;
LABEL_26:
  v82 = a1;
  v15 = *((void *)v6 + 4);
  v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_29:
  WTF::String::utf8();
  if (v89) {
    v18 = (char *)v89 + 16;
  }
  else {
    v18 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v18;
  _os_log_impl(&dword_1E1345000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v16 = v89;
  v89 = 0;
  if (!v16)
  {
LABEL_35:
    if (*v6) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_35;
  }
  v16 = (WTF *)WTF::fastFree(v16, v17);
  if (*v6)
  {
LABEL_36:
    if (v6[16] >= 4u)
    {
      v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v20 = *v19;
        if (v20) {
          goto LABEL_68;
        }
        int v21 = *v19;
        atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v21 != v20);
      uint64_t v22 = WTF::Logger::observers(v16);
      uint64_t v23 = *(unsigned int *)(v22 + 12);
      if (v23)
      {
        v24 = *(uint64_t **)v22;
        uint64_t v25 = *(void *)v22 + 8 * v23;
        while (1)
        {
          uint64_t v26 = *v24;
          LODWORD(buf) = 0;
          WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
          int v96 = 0;
          WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v2);
          v89 = 0;
          uint64_t v90 = 0;
          v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
          LODWORD(v90) = 2;
          v89 = v27;
          uint64_t v28 = HIDWORD(v90);
          *((_DWORD *)v27 + 4 * HIDWORD(v90)) = buf;
          uint64_t v29 = *((void *)&buf + 1);
          if (*((void *)&buf + 1)) {
            **((_DWORD **)&buf + 1) += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v96;
          v30 = v97;
          if (v97) {
            *(_DWORD *)v97 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          HIDWORD(v90) = v28 + 2;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, v6, 4, &v89);
          v31 = v89;
          if (HIDWORD(v90))
          {
            uint64_t v32 = 16 * HIDWORD(v90);
            v33 = (WTF::StringImpl **)((char *)v89 + 8);
            do
            {
              v34 = *v33;
              *v33 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2) {
                  WTF::StringImpl::destroy(v34, v17);
                }
                else {
                  *(_DWORD *)v34 -= 2;
                }
              }
              v33 += 2;
              v32 -= 16;
            }
            while (v32);
            v31 = v89;
          }
          if (v31)
          {
            v89 = 0;
            LODWORD(v90) = 0;
            WTF::fastFree(v31, v17);
          }
          v35 = v97;
          v97 = 0;
          if (!v35) {
            goto LABEL_61;
          }
          if (*(_DWORD *)v35 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v35, v17);
          v36 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v36)
          {
LABEL_64:
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v17);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
LABEL_43:
          if (++v24 == (uint64_t *)v25) {
            goto LABEL_66;
          }
        }
        *(_DWORD *)v35 -= 2;
LABEL_61:
        v36 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v36) {
          goto LABEL_64;
        }
        goto LABEL_43;
      }
LABEL_66:
      int v37 = 1;
      atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      uint64_t v4 = v2 + 56;
      if (v37 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_68:
  v5 = (unsigned __int8 *)v87;
  v87 = 0;
  a1 = v82;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      v5 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v17);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
LABEL_72:
  char v38 = 0;
  *a1 = v2;
  v87 = (WTF::StringImpl *)(v2 + 48);
  char v88 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v38, 1u, memory_order_acquire, memory_order_acquire);
  if (v38) {
    v5 = (unsigned __int8 *)MEMORY[0x1E4E44220](v2 + 48);
  }
  v39 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  v40 = v39;
  if (!*v39 || v39[16] < 4u)
  {
LABEL_168:
    uint64_t v79 = *(unsigned int *)(v2 + 64);
    if (v79 == -1) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v93, (WTF::Logger::LogSiteIdentifier *)&v85);
  WTF::String::String((WTF::String *)&v92, " rejecting ");
  uint64_t v83 = v4;
  WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v91, v2);
  v41 = (WTF::StringImpl *)v91;
  if (v93)
  {
    int v42 = *((_DWORD *)v93 + 1);
    if (v92) {
      goto LABEL_78;
    }
  }
  else
  {
    int v42 = 0;
    if (v92)
    {
LABEL_78:
      int v43 = *((_DWORD *)v92 + 1);
      if (v91) {
        goto LABEL_79;
      }
      goto LABEL_83;
    }
  }
  int v43 = 0;
  if (v91)
  {
LABEL_79:
    int v44 = *(_DWORD *)(v91 + 4);
    if ((v44 | v43) < 0) {
      goto LABEL_178;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v44 = 0;
  if (v43 < 0)
  {
LABEL_178:
    __break(0xC471u);
    goto LABEL_180;
  }
LABEL_84:
  BOOL v45 = __OFADD__(v43, v44);
  int v46 = v43 + v44;
  char v47 = v45;
  if (v42 < 0) {
    goto LABEL_178;
  }
  if (v47) {
    goto LABEL_178;
  }
  unsigned int v48 = v42 + v46;
  if (__OFADD__(v42, v46)) {
    goto LABEL_178;
  }
  if (v93 && (*((unsigned char *)v93 + 16) & 4) == 0)
  {
    int v49 = 0;
    goto LABEL_102;
  }
  if (!v92)
  {
    if (!v91)
    {
      int v49 = 1;
      goto LABEL_102;
    }
LABEL_98:
    int v49 = (*(unsigned __int8 *)(v91 + 16) >> 2) & 1;
    goto LABEL_102;
  }
  unsigned int v50 = *((_DWORD *)v92 + 4);
  int v49 = (v50 >> 2) & 1;
  if (v91 && (v50 & 4) != 0) {
    goto LABEL_98;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v48, v49, (uint64_t)v93, (uint64_t)v92, v91);
  v94 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_178;
  }
  uint64_t v91 = 0;
  if (!v41) {
    goto LABEL_106;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
LABEL_106:
    v52 = v92;
    v92 = 0;
    uint64_t v4 = v83;
    if (!v52) {
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v41, v51);
  v52 = v92;
  v92 = 0;
  uint64_t v4 = v83;
  if (!v52) {
    goto LABEL_111;
  }
LABEL_109:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::destroy(v52, v51);
    v53 = v93;
    v93 = 0;
    if (!v53) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  *(_DWORD *)v52 -= 2;
LABEL_111:
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_116:
    v54 = *((void *)v40 + 4);
    v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    if (!v55) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_114:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v53, v51);
  v54 = *((void *)v40 + 4);
  v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
  if (!v55) {
    goto LABEL_125;
  }
LABEL_119:
  WTF::String::utf8();
  if (v89) {
    v57 = (char *)v89 + 16;
  }
  else {
    v57 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v57;
  _os_log_impl(&dword_1E1345000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v55 = v89;
  v89 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      v55 = (WTF *)WTF::fastFree(v55, v56);
      if (!*v40) {
        goto LABEL_165;
      }
      goto LABEL_126;
    }
    --*(_DWORD *)v55;
  }
LABEL_125:
  if (!*v40) {
    goto LABEL_165;
  }
LABEL_126:
  if (v40[16] >= 4u)
  {
    v58 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v59 = *v58;
      if (v59) {
        goto LABEL_165;
      }
      int v60 = *v58;
      atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v60, v59 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v60 != v59);
    uint64_t v61 = WTF::Logger::observers(v55);
    uint64_t v62 = *(unsigned int *)(v61 + 12);
    if (v62)
    {
      v63 = *(uint64_t **)v61;
      uint64_t v84 = *(void *)v61 + 8 * v62;
      while (1)
      {
        uint64_t v64 = *v63;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v85);
        int v96 = 0;
        WTF::String::String((WTF::String *)&v97, " rejecting ");
        int v98 = 0;
        WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(v99, v2);
        v89 = 0;
        uint64_t v90 = 0;
        v65 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v90) = 3;
        v89 = v65;
        uint64_t v66 = HIDWORD(v90);
        *((_DWORD *)v65 + 4 * HIDWORD(v90)) = buf;
        uint64_t v67 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v65 + 2 * v66 + 1) = v67;
        *((_DWORD *)v65 + 4 * (v66 + 1)) = v96;
        v68 = v97;
        if (v97) {
          *(_DWORD *)v97 += 2;
        }
        *((void *)v65 + 2 * (v66 + 1) + 1) = v68;
        *((_DWORD *)v65 + 4 * (v66 + 2)) = v98;
        v69 = v99[0];
        if (v99[0]) {
          *(_DWORD *)v99[0] += 2;
        }
        *((void *)v65 + 2 * (v66 + 2) + 1) = v69;
        HIDWORD(v90) = v66 + 3;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v64 + 16))(v64, v40, 4, &v89);
        v70 = v89;
        if (HIDWORD(v90))
        {
          uint64_t v71 = 16 * HIDWORD(v90);
          v72 = (WTF::StringImpl **)((char *)v89 + 8);
          do
          {
            v73 = *v72;
            *v72 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2) {
                WTF::StringImpl::destroy(v73, v56);
              }
              else {
                *(_DWORD *)v73 -= 2;
              }
            }
            v72 += 2;
            v71 -= 16;
          }
          while (v71);
          v70 = v89;
        }
        if (v70)
        {
          v89 = 0;
          LODWORD(v90) = 0;
          WTF::fastFree(v70, v56);
        }
        v74 = v99[0];
        v99[0] = 0;
        if (!v74) {
          goto LABEL_153;
        }
        if (*(_DWORD *)v74 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v74, v56);
        v75 = v97;
        v97 = 0;
        if (!v75) {
          goto LABEL_158;
        }
LABEL_156:
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
LABEL_158:
          v76 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v76) {
            goto LABEL_161;
          }
          goto LABEL_133;
        }
        WTF::StringImpl::destroy(v75, v56);
        v76 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v76)
        {
LABEL_161:
          if (*(_DWORD *)v76 == 2) {
            WTF::StringImpl::destroy(v76, v56);
          }
          else {
            *(_DWORD *)v76 -= 2;
          }
        }
LABEL_133:
        if (++v63 == (uint64_t *)v84) {
          goto LABEL_163;
        }
      }
      *(_DWORD *)v74 -= 2;
LABEL_153:
      v75 = v97;
      v97 = 0;
      if (!v75) {
        goto LABEL_158;
      }
      goto LABEL_156;
    }
LABEL_163:
    int v77 = 1;
    atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v77, 0, memory_order_release, memory_order_relaxed);
    uint64_t v4 = v83;
    if (v77 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_165:
  v78 = v94;
  v94 = 0;
  if (!v78) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
    goto LABEL_168;
  }
  WTF::StringImpl::destroy(v78, v56);
  uint64_t v79 = *(unsigned int *)(v2 + 64);
  if (v79 != -1) {
LABEL_169:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7B210[v79])(&buf, v4);
LABEL_170:
  *(_WORD *)(v2 + 56) = 256;
  *(_DWORD *)(v2 + 64) = 1;
  result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (atomic_uchar *volatile *)&v87);
  if (v88)
  {
    result = v87;
    int v81 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v87, (unsigned __int8 *)&v81, 0, memory_order_release, memory_order_relaxed);
    if (v81 != 1) {
      return (WTF *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void sub_1E1410540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  void *v31 = 0;
  if (atomic_fetch_add(v30 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v30 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v30 + 16))(v30);
  _Unwind_Resume(exception_object);
}

void sub_1E1410814(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((unsigned int *)&a19, a2);
  uint64_t v29 = a28;
  a28 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  JUMPOUT(0x1E14108A8);
}

WTF *WebCore::CacheStorageConnection::engineRepresentation@<X0>(uint64_t *a1@<X8>)
{
  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  long long v86 = 0uLL;
  *(void *)&long long v87 = "engineRepresentation";
  *((void *)&v87 + 1) = 0;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v3 + 8) = 1;
  *(void *)uint64_t v3 = &unk_1F3C7B278;
  long long v4 = v87;
  *(_OWORD *)(v3 + 16) = v86;
  *(_OWORD *)(v3 + 32) = v4;
  *(unsigned char *)(v3 + 48) = 0;
  uint64_t v5 = v3 + 56;
  *(_DWORD *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = v3 + 96;
  *(void *)(v3 + 88) = 1;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(_WORD *)(v3 + 120) = 0;
  uint64_t v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
  char v7 = v6;
  if (!*v6 || v6[16] < 4u) {
    goto LABEL_72;
  }
  WTF::String::String((WTF::String *)&v95, "creating ");
  WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v94, v3);
  int v8 = v94;
  if (v95)
  {
    int v9 = *((_DWORD *)v95 + 1);
    if (v94) {
      goto LABEL_5;
    }
  }
  else
  {
    int v9 = 0;
    if (v94)
    {
LABEL_5:
      int v10 = *((_DWORD *)v94 + 1);
      if ((v10 | v9) < 0) {
        goto LABEL_179;
      }
      goto LABEL_9;
    }
  }
  int v10 = 0;
  if (v9 < 0)
  {
LABEL_179:
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x1E14113D4);
  }
LABEL_9:
  unint64_t v11 = (v9 + v10);
  if (__OFADD__(v9, v10)) {
    goto LABEL_179;
  }
  if (!v95)
  {
    if (!v94)
    {
      int v13 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v13 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v12 = *((_DWORD *)v95 + 4);
  int v13 = (v12 >> 2) & 1;
  if (v94 && (v12 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v95, (uint64_t)v94, &buf);
  char v88 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_179;
  }
  v94 = 0;
  if (!v8) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_21:
    v15 = v95;
    v95 = 0;
    if (!v15) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v8, v14);
  v15 = v95;
  v95 = 0;
  if (!v15) {
    goto LABEL_26;
  }
LABEL_24:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v14);
    uint64_t v83 = a1;
    v16 = *((void *)v7 + 4);
    v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  *(_DWORD *)v15 -= 2;
LABEL_26:
  uint64_t v83 = a1;
  v16 = *((void *)v7 + 4);
  v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_35;
  }
LABEL_29:
  WTF::String::utf8();
  if (v90) {
    v19 = (char *)v90 + 16;
  }
  else {
    v19 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v17 = v90;
  uint64_t v90 = 0;
  if (!v17)
  {
LABEL_35:
    if (*v7) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_35;
  }
  v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*v7)
  {
LABEL_36:
    if (v7[16] >= 4u)
    {
      int v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_68;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        uint64_t v25 = *(uint64_t **)v23;
        uint64_t v26 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v27 = *v25;
          LODWORD(buf) = 0;
          WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
          int v97 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v98, v3);
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          uint64_t v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
          LODWORD(v91) = 2;
          uint64_t v90 = v28;
          uint64_t v29 = HIDWORD(v91);
          *((_DWORD *)v28 + 4 * HIDWORD(v91)) = buf;
          uint64_t v30 = *((void *)&buf + 1);
          if (*((void *)&buf + 1)) {
            **((_DWORD **)&buf + 1) += 2;
          }
          *((void *)v28 + 2 * v29 + 1) = v30;
          *((_DWORD *)v28 + 4 * (v29 + 1)) = v97;
          v31 = v98;
          if (v98) {
            *(_DWORD *)v98 += 2;
          }
          *((void *)v28 + 2 * (v29 + 1) + 1) = v31;
          HIDWORD(v91) = v29 + 2;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(void *)v27 + 16))(v27, v7, 4, &v90);
          uint64_t v32 = v90;
          if (HIDWORD(v91))
          {
            uint64_t v33 = 16 * HIDWORD(v91);
            v34 = (WTF::StringImpl **)((char *)v90 + 8);
            do
            {
              v35 = *v34;
              WTF::StringImpl *v34 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2) {
                  WTF::StringImpl::destroy(v35, v18);
                }
                else {
                  *(_DWORD *)v35 -= 2;
                }
              }
              v34 += 2;
              v33 -= 16;
            }
            while (v33);
            uint64_t v32 = v90;
          }
          if (v32)
          {
            uint64_t v90 = 0;
            LODWORD(v91) = 0;
            WTF::fastFree(v32, v18);
          }
          v36 = v98;
          int v98 = 0;
          if (!v36) {
            goto LABEL_61;
          }
          if (*(_DWORD *)v36 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v36, v18);
          int v37 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v37)
          {
LABEL_64:
            if (*(_DWORD *)v37 == 2) {
              WTF::StringImpl::destroy(v37, v18);
            }
            else {
              *(_DWORD *)v37 -= 2;
            }
          }
LABEL_43:
          if (++v25 == (uint64_t *)v26) {
            goto LABEL_66;
          }
        }
        *(_DWORD *)v36 -= 2;
LABEL_61:
        int v37 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v37) {
          goto LABEL_64;
        }
        goto LABEL_43;
      }
LABEL_66:
      int v38 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
      uint64_t v5 = v3 + 56;
      if (v38 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_68:
  uint64_t v6 = (unsigned __int8 *)v88;
  char v88 = 0;
  a1 = v83;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      uint64_t v6 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, v18);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
LABEL_72:
  char v39 = 0;
  *a1 = v3;
  char v88 = (WTF::StringImpl *)(v3 + 48);
  char v89 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v39, 1u, memory_order_acquire, memory_order_acquire);
  if (v39) {
    uint64_t v6 = (unsigned __int8 *)MEMORY[0x1E4E44220](v3 + 48);
  }
  v40 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  v41 = v40;
  if (!*v40 || v40[16] < 4u)
  {
LABEL_168:
    uint64_t v80 = *(unsigned int *)(v3 + 72);
    if (v80 == -1) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v94, (WTF::Logger::LogSiteIdentifier *)&v86);
  WTF::String::String((WTF::String *)&v93, " rejecting ");
  uint64_t v84 = v5;
  WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v92, v3);
  int v42 = (WTF::StringImpl *)v92;
  if (v94)
  {
    int v43 = *((_DWORD *)v94 + 1);
    if (v93) {
      goto LABEL_78;
    }
  }
  else
  {
    int v43 = 0;
    if (v93)
    {
LABEL_78:
      int v44 = *((_DWORD *)v93 + 1);
      if (v92) {
        goto LABEL_79;
      }
      goto LABEL_83;
    }
  }
  int v44 = 0;
  if (v92)
  {
LABEL_79:
    int v45 = *(_DWORD *)(v92 + 4);
    if ((v45 | v44) < 0) {
      goto LABEL_178;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v45 = 0;
  if (v44 < 0)
  {
LABEL_178:
    __break(0xC471u);
    goto LABEL_180;
  }
LABEL_84:
  BOOL v46 = __OFADD__(v44, v45);
  int v47 = v44 + v45;
  char v48 = v46;
  if (v43 < 0) {
    goto LABEL_178;
  }
  if (v48) {
    goto LABEL_178;
  }
  unsigned int v49 = v43 + v47;
  if (__OFADD__(v43, v47)) {
    goto LABEL_178;
  }
  if (v94 && (*((unsigned char *)v94 + 16) & 4) == 0)
  {
    int v50 = 0;
    goto LABEL_102;
  }
  if (!v93)
  {
    if (!v92)
    {
      int v50 = 1;
      goto LABEL_102;
    }
LABEL_98:
    int v50 = (*(unsigned __int8 *)(v92 + 16) >> 2) & 1;
    goto LABEL_102;
  }
  unsigned int v51 = *((_DWORD *)v93 + 4);
  int v50 = (v51 >> 2) & 1;
  if (v92 && (v51 & 4) != 0) {
    goto LABEL_98;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v49, v50, (uint64_t)v94, (uint64_t)v93, v92);
  v95 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_178;
  }
  uint64_t v92 = 0;
  if (!v42) {
    goto LABEL_106;
  }
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
LABEL_106:
    v53 = v93;
    v93 = 0;
    uint64_t v5 = v84;
    if (!v53) {
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v42, v52);
  v53 = v93;
  v93 = 0;
  uint64_t v5 = v84;
  if (!v53) {
    goto LABEL_111;
  }
LABEL_109:
  if (*(_DWORD *)v53 == 2)
  {
    WTF::StringImpl::destroy(v53, v52);
    v54 = v94;
    v94 = 0;
    if (!v54) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  *(_DWORD *)v53 -= 2;
LABEL_111:
  v54 = v94;
  v94 = 0;
  if (!v54)
  {
LABEL_116:
    v55 = *((void *)v41 + 4);
    v56 = (WTF *)os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (!v56) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_114:
  if (*(_DWORD *)v54 != 2)
  {
    *(_DWORD *)v54 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v54, v52);
  v55 = *((void *)v41 + 4);
  v56 = (WTF *)os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
  if (!v56) {
    goto LABEL_125;
  }
LABEL_119:
  WTF::String::utf8();
  if (v90) {
    v58 = (char *)v90 + 16;
  }
  else {
    v58 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v58;
  _os_log_impl(&dword_1E1345000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v56 = v90;
  uint64_t v90 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 1)
    {
      v56 = (WTF *)WTF::fastFree(v56, v57);
      if (!*v41) {
        goto LABEL_165;
      }
      goto LABEL_126;
    }
    --*(_DWORD *)v56;
  }
LABEL_125:
  if (!*v41) {
    goto LABEL_165;
  }
LABEL_126:
  if (v41[16] >= 4u)
  {
    int v59 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v60 = *v59;
      if (v60) {
        goto LABEL_165;
      }
      int v61 = *v59;
      atomic_compare_exchange_strong_explicit(v59, (unsigned __int8 *)&v61, v60 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v61 != v60);
    uint64_t v62 = WTF::Logger::observers(v56);
    uint64_t v63 = *(unsigned int *)(v62 + 12);
    if (v63)
    {
      uint64_t v64 = *(uint64_t **)v62;
      uint64_t v85 = *(void *)v62 + 8 * v63;
      while (1)
      {
        uint64_t v65 = *v64;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v86);
        int v97 = 0;
        WTF::String::String((WTF::String *)&v98, " rejecting ");
        int v99 = 0;
        WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(v100, v3);
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        uint64_t v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v91) = 3;
        uint64_t v90 = v66;
        uint64_t v67 = HIDWORD(v91);
        *((_DWORD *)v66 + 4 * HIDWORD(v91)) = buf;
        uint64_t v68 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v66 + 2 * v67 + 1) = v68;
        *((_DWORD *)v66 + 4 * (v67 + 1)) = v97;
        v69 = v98;
        if (v98) {
          *(_DWORD *)v98 += 2;
        }
        *((void *)v66 + 2 * (v67 + 1) + 1) = v69;
        *((_DWORD *)v66 + 4 * (v67 + 2)) = v99;
        v70 = v100[0];
        if (v100[0]) {
          *(_DWORD *)v100[0] += 2;
        }
        *((void *)v66 + 2 * (v67 + 2) + 1) = v70;
        HIDWORD(v91) = v67 + 3;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v65 + 16))(v65, v41, 4, &v90);
        uint64_t v71 = v90;
        if (HIDWORD(v91))
        {
          uint64_t v72 = 16 * HIDWORD(v91);
          v73 = (WTF::StringImpl **)((char *)v90 + 8);
          do
          {
            v74 = *v73;
            WTF::StringImpl *v73 = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 2) {
                WTF::StringImpl::destroy(v74, v57);
              }
              else {
                *(_DWORD *)v74 -= 2;
              }
            }
            v73 += 2;
            v72 -= 16;
          }
          while (v72);
          uint64_t v71 = v90;
        }
        if (v71)
        {
          uint64_t v90 = 0;
          LODWORD(v91) = 0;
          WTF::fastFree(v71, v57);
        }
        v75 = v100[0];
        v100[0] = 0;
        if (!v75) {
          goto LABEL_153;
        }
        if (*(_DWORD *)v75 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v75, v57);
        v76 = v98;
        int v98 = 0;
        if (!v76) {
          goto LABEL_158;
        }
LABEL_156:
        if (*(_DWORD *)v76 != 2)
        {
          *(_DWORD *)v76 -= 2;
LABEL_158:
          int v77 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v77) {
            goto LABEL_161;
          }
          goto LABEL_133;
        }
        WTF::StringImpl::destroy(v76, v57);
        int v77 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v77)
        {
LABEL_161:
          if (*(_DWORD *)v77 == 2) {
            WTF::StringImpl::destroy(v77, v57);
          }
          else {
            *(_DWORD *)v77 -= 2;
          }
        }
LABEL_133:
        if (++v64 == (uint64_t *)v85) {
          goto LABEL_163;
        }
      }
      *(_DWORD *)v75 -= 2;
LABEL_153:
      v76 = v98;
      int v98 = 0;
      if (!v76) {
        goto LABEL_158;
      }
      goto LABEL_156;
    }
LABEL_163:
    int v78 = 1;
    atomic_compare_exchange_strong_explicit(v59, (unsigned __int8 *)&v78, 0, memory_order_release, memory_order_relaxed);
    uint64_t v5 = v84;
    if (v78 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_165:
  uint64_t v79 = v95;
  v95 = 0;
  if (!v79) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v79 != 2)
  {
    *(_DWORD *)v79 -= 2;
    goto LABEL_168;
  }
  WTF::StringImpl::destroy(v79, v57);
  uint64_t v80 = *(unsigned int *)(v3 + 72);
  if (v80 != -1) {
LABEL_169:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7B290[v80])(&buf, v5);
LABEL_170:
  *(unsigned char *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 64) = 1;
  *(_DWORD *)(v3 + 72) = 1;
  result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v3, (atomic_uchar *volatile *)&v88);
  if (v89)
  {
    result = v88;
    int v82 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v88, (unsigned __int8 *)&v82, 0, memory_order_release, memory_order_relaxed);
    if (v82 != 1) {
      return (WTF *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void sub_1E14113E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  void *v31 = 0;
  if (atomic_fetch_add(v30 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v30 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v30 + 16))(v30);
  _Unwind_Resume(exception_object);
}

void sub_1E14116B4(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((unsigned int *)&a19, a2);
  uint64_t v29 = a28;
  a28 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  JUMPOUT(0x1E1411748);
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    long long v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *long long v4 = 0;
      if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  char v7 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v7 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 132);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 132);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(uint64_t **)(v1 + 120);
  uint64_t v6 = 40 * v4;
  do
  {
    result = *v5;
    if (*v5) {
      result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E1411964(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  v15 = v16;
  v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v17;
      v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v17;
  v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E1411AFC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WTF::JSONLogValue::~JSONLogValue(WTF::JSONLogValue *this, StringImpl *a2)
{
  int v3 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v8 = (void *)result;
  if (!a3)
  {
    if (!a2) {
      goto LABEL_14;
    }
    if (a2 > 0x7FFFFFEF) {
      goto LABEL_13;
    }
    result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    uint64_t v9 = v124;
    if (!v124) {
      goto LABEL_105;
    }
    *(_DWORD *)uint64_t v124 = 2;
    *(_DWORD *)(v124 + 4) = a2;
    *(_OWORD *)(v124 + 20) = xmmword_1E149DDB0;
    *(void *)(v124 + 8) = v124 + 20;
    *(_DWORD *)(v124 + 16) = 0;
    *(void *)(v124 + 36) = 0x730069006D006FLL;
    *(_WORD *)(v124 + 44) = 101;
    v17 = (_WORD *)(v124 + 46);
    if (!a4)
    {
      uint64_t v23 = 0;
      _WORD *v17 = 60;
      uint64_t v24 = (_WORD *)(v124 + 48);
      if (a5) {
        goto LABEL_86;
      }
      goto LABEL_27;
    }
    uint64_t v18 = *(int8x16_t **)(a4 + 8);
    uint64_t v19 = *(unsigned int *)(a4 + 4);
    if ((*(unsigned char *)(a4 + 16) & 4) == 0)
    {
      if (v19)
      {
        if (v19 == 1) {
          _WORD *v17 = v18->i16[0];
        }
        else {
          result = (uint64_t)memcpy((void *)(v124 + 46), v18, 2 * v19);
        }
      }
LABEL_85:
      uint64_t v23 = *(unsigned int *)(a4 + 4);
      uint64_t v63 = &v17[v23];
      _WORD *v63 = 60;
      uint64_t v24 = v63 + 1;
      if (a5)
      {
LABEL_86:
        uint64_t v64 = *(int8x16_t **)(a5 + 8);
        uint64_t v65 = *(unsigned int *)(a5 + 4);
        if ((*(unsigned char *)(a5 + 16) & 4) == 0)
        {
          if (v65)
          {
            if (v65 == 1) {
              _WORD *v24 = v64->i16[0];
            }
            else {
              result = (uint64_t)memcpy(v24, v64, 2 * v65);
            }
          }
          goto LABEL_103;
        }
        uint64_t v66 = &v24[v65];
        if (v65 < 0x40)
        {
          unint64_t v67 = (unint64_t)v24;
        }
        else
        {
          unint64_t v67 = (unint64_t)&v24[v65 & 0xFFFFFFC0];
          long long v68 = 0uLL;
          v69 = (char *)v24;
          do
          {
            v126.val[0] = *v64;
            int8x16_t v70 = v64[1];
            v128.val[0] = v64[2];
            int8x16_t v71 = v64[3];
            v64 += 4;
            int8x16_t v72 = v71;
            v128.val[1] = 0uLL;
            v130.val[0] = v70;
            v126.val[1] = 0uLL;
            v73 = v69;
            vst2q_s8(v73, v126);
            v73 += 32;
            v130.val[1] = 0uLL;
            vst2q_s8(v73, v130);
            v74 = v69 + 64;
            vst2q_s8(v74, v128);
            v75 = v69 + 96;
            vst2q_s8(v75, *(int8x16x2_t *)(&v68 - 1));
            v69 += 128;
          }
          while (v69 != (char *)v67);
        }
        if ((_WORD *)v67 == v66)
        {
LABEL_103:
          uint64_t v25 = *(unsigned int *)(a5 + 4);
          goto LABEL_104;
        }
        unint64_t v76 = v124 + 2 * (v23 + v65) - v67 + 46;
        if (v76 < 0xE
          || v67 < (unint64_t)v64->u64 + (v76 >> 1) + 1
          && (unint64_t)v64 < (v76 & 0xFFFFFFFFFFFFFFFELL) + v67 + 2)
        {
          int v77 = (_WORD *)v67;
          int v78 = v64;
          goto LABEL_100;
        }
        uint64_t v80 = (v76 >> 1) + 1;
        if (v76 >= 0x3E)
        {
          unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFE0;
          v114 = (uint8x8_t *)&v64[1];
          v115 = (uint16x8_t *)(v67 + 32);
          unint64_t v116 = v80 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v117 = *(uint8x16_t *)v114[-2].i8;
            uint16x8_t v118 = vmovl_u8(*v114);
            uint16x8_t v119 = vmovl_high_u8(*(uint8x16_t *)v114->i8);
            v115[-2] = vmovl_u8(*(uint8x8_t *)v117.i8);
            v115[-1] = vmovl_high_u8(v117);
            uint16x8_t *v115 = v118;
            v115[1] = v119;
            v115 += 4;
            v114 += 4;
            v116 -= 32;
          }
          while (v116);
          if (v80 == v81) {
            goto LABEL_103;
          }
          if ((v80 & 0x18) == 0)
          {
            int v78 = (int8x16_t *)((char *)v64 + v81);
            int v77 = (_WORD *)(v67 + 2 * v81);
            do
            {
LABEL_100:
              __int16 v79 = v78->u8[0];
              int v78 = (int8x16_t *)((char *)v78 + 1);
              *v77++ = v79;
            }
            while (v77 != v66);
            goto LABEL_103;
          }
        }
        else
        {
          unint64_t v81 = 0;
        }
        int v77 = (_WORD *)(v67 + 2 * (v80 & 0xFFFFFFFFFFFFFFF8));
        int v78 = (int8x16_t *)((char *)v64 + (v80 & 0xFFFFFFFFFFFFFFF8));
        v120 = (uint8x8_t *)&v64->i8[v81];
        v121 = (uint16x8_t *)(v67 + 2 * v81);
        unint64_t v122 = v81 - (v80 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v123 = *v120++;
          *v121++ = vmovl_u8(v123);
          v122 += 8;
        }
        while (v122);
        if (v80 == (v80 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_103;
        }
        goto LABEL_100;
      }
LABEL_27:
      uint64_t v25 = 0;
LABEL_104:
      v24[v25] = 62;
      goto LABEL_105;
    }
    uint64_t v26 = &v17[v19];
    if (v19 < 0x40)
    {
      unint64_t v27 = v124 + 46;
    }
    else
    {
      unint64_t v27 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      long long v28 = 0uLL;
      uint64_t v29 = (char *)(v124 + 46);
      do
      {
        v125.val[0] = *v18;
        int8x16_t v30 = v18[1];
        v127.val[0] = v18[2];
        int8x16_t v31 = v18[3];
        v18 += 4;
        int8x16_t v32 = v31;
        v127.val[1] = 0uLL;
        v129.val[0] = v30;
        v125.val[1] = 0uLL;
        uint64_t v33 = v29;
        vst2q_s8(v33, v125);
        v33 += 32;
        v129.val[1] = 0uLL;
        vst2q_s8(v33, v129);
        v34 = v29 + 64;
        vst2q_s8(v34, v127);
        v35 = v29 + 96;
        vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
        v29 += 128;
      }
      while (v29 != (char *)v27);
    }
    if ((_WORD *)v27 == v26) {
      goto LABEL_85;
    }
    unint64_t v43 = v124 + 2 * v19 - v27 + 44;
    if (v43 < 0xE
      || (v27 < (unint64_t)v18->u64 + (v43 >> 1) + 1
        ? (BOOL v44 = (unint64_t)v18 >= (v43 & 0xFFFFFFFFFFFFFFFELL) + v27 + 2)
        : (BOOL v44 = 1),
          !v44))
    {
      int v47 = (_WORD *)v27;
      char v48 = v18;
      goto LABEL_56;
    }
    uint64_t v45 = (v43 >> 1) + 1;
    if (v43 >= 0x3E)
    {
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFE0;
      v104 = (uint8x8_t *)&v18[1];
      v105 = (uint16x8_t *)(v27 + 32);
      unint64_t v106 = v45 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v107 = *(uint8x16_t *)v104[-2].i8;
        uint16x8_t v108 = vmovl_u8(*v104);
        uint16x8_t v109 = vmovl_high_u8(*(uint8x16_t *)v104->i8);
        v105[-2] = vmovl_u8(*(uint8x8_t *)v107.i8);
        v105[-1] = vmovl_high_u8(v107);
        uint16x8_t *v105 = v108;
        v105[1] = v109;
        v105 += 4;
        v104 += 4;
        v106 -= 32;
      }
      while (v106);
      if (v45 == v46) {
        goto LABEL_85;
      }
      if ((v45 & 0x18) == 0)
      {
        char v48 = (int8x16_t *)((char *)v18 + v46);
        int v47 = (_WORD *)(v27 + 2 * v46);
        goto LABEL_56;
      }
    }
    else
    {
      unint64_t v46 = 0;
    }
    int v47 = (_WORD *)(v27 + 2 * (v45 & 0xFFFFFFFFFFFFFFF8));
    char v48 = (int8x16_t *)((char *)v18 + (v45 & 0xFFFFFFFFFFFFFFF8));
    v110 = (uint8x8_t *)&v18->i8[v46];
    v111 = (uint16x8_t *)(v27 + 2 * v46);
    unint64_t v112 = v46 - (v45 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v113 = *v110++;
      *v111++ = vmovl_u8(v113);
      v112 += 8;
    }
    while (v112);
    if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_85;
    }
    do
    {
LABEL_56:
      __int16 v49 = v48->u8[0];
      char v48 = (int8x16_t *)((char *)v48 + 1);
      *v47++ = v49;
    }
    while (v47 != v26);
    goto LABEL_85;
  }
  if (!a2)
  {
LABEL_14:
    uint64_t v9 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_105;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_13:
    uint64_t v9 = 0;
    goto LABEL_105;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v9 = v124;
  if (v124)
  {
    *(_DWORD *)uint64_t v124 = 2;
    *(_DWORD *)(v124 + 4) = a2;
    qmemcpy((void *)(v124 + 20), "NativePromise", 13);
    *(void *)(v124 + 8) = v124 + 20;
    *(_DWORD *)(v124 + 16) = 4;
    char v10 = (unsigned char *)(v124 + 33);
    if (!a4)
    {
      uint64_t v20 = 0;
      *char v10 = 60;
      int v21 = (unsigned char *)(v124 + 34);
      if (a5) {
        goto LABEL_60;
      }
      goto LABEL_22;
    }
    int v11 = *(int8x16_t **)(a4 + 8);
    size_t v12 = *(unsigned int *)(a4 + 4);
    if ((*(unsigned char *)(a4 + 16) & 4) != 0)
    {
      if (v12)
      {
        if (v12 == 1) {
          *char v10 = v11->i8[0];
        }
        else {
          result = (uint64_t)memcpy((void *)(v124 + 33), v11, v12);
        }
      }
    }
    else
    {
      int v13 = &v10[v12];
      if (v12 < 0x10)
      {
        unint64_t v14 = v124 + 33;
      }
      else
      {
        unint64_t v14 = (unint64_t)&v10[v12 & 0xFFFFFFF0];
        v15 = (unsigned long long *)(v124 + 33);
        do
        {
          unsigned long long v16 = (unsigned __int128)vld2q_s8(v11->i8);
          v11 += 2;
          *v15++ = v16;
        }
        while (v15 != (unsigned long long *)v14);
      }
      if ((unsigned char *)v14 != v13)
      {
        size_t v36 = v124 + v12;
        unint64_t v37 = v124 + v12 - v14 + 33;
        if (v37 < 8
          || (v14 < (unint64_t)v11[4].u64 + 2 * v36 + -2 * v14 + 2
            ? (BOOL v38 = (unint64_t)v11 >= v36 + 33)
            : (BOOL v38 = 1),
              !v38))
        {
          v40 = (unsigned char *)v14;
          v41 = v11;
          goto LABEL_43;
        }
        if (v37 >= 0x20)
        {
          unint64_t v39 = v37 & 0xFFFFFFFFFFFFFFE0;
          int v82 = v11 + 2;
          uint64_t v83 = (int8x16_t *)(v14 + 16);
          unint64_t v84 = v37 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v86 = v82[-2];
            int8x16_t v85 = v82[-1];
            int8x16_t v88 = *v82;
            int8x16_t v87 = v82[1];
            v82 += 4;
            v83[-1] = vuzp1q_s8(v86, v85);
            *uint64_t v83 = vuzp1q_s8(v88, v87);
            v83 += 2;
            v84 -= 32;
          }
          while (v84);
          if (v37 == v39) {
            goto LABEL_59;
          }
          if ((v37 & 0x18) == 0)
          {
            v41 = (int8x16_t *)((char *)v11 + 2 * v39);
            v40 = (unsigned char *)(v14 + v39);
            do
            {
LABEL_43:
              char v42 = v41->i8[0];
              v41 = (int8x16_t *)((char *)v41 + 2);
              *v40++ = v42;
            }
            while (v40 != v13);
            goto LABEL_59;
          }
        }
        else
        {
          unint64_t v39 = 0;
        }
        v40 = (unsigned char *)(v14 + (v37 & 0xFFFFFFFFFFFFFFF8));
        v41 = (int8x16_t *)((char *)v11 + 2 * (v37 & 0xFFFFFFFFFFFFFFF8));
        char v89 = (int16x8_t *)((char *)v11 + 2 * v39);
        uint64_t v90 = (int8x8_t *)(v14 + v39);
        unint64_t v91 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v92 = *v89++;
          *v90++ = vmovn_s16(v92);
          v91 += 8;
        }
        while (v91);
        if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_43;
        }
      }
    }
LABEL_59:
    uint64_t v20 = *(unsigned int *)(a4 + 4);
    v10[v20] = 60;
    int v21 = &v10[v20 + 1];
    if (a5)
    {
LABEL_60:
      int v50 = *(int8x16_t **)(a5 + 8);
      size_t v51 = *(unsigned int *)(a5 + 4);
      if ((*(unsigned char *)(a5 + 16) & 4) != 0)
      {
        if (v51)
        {
          if (v51 == 1) {
            *int v21 = v50->i8[0];
          }
          else {
            result = (uint64_t)memcpy(v21, v50, v51);
          }
        }
        goto LABEL_82;
      }
      v52 = &v21[v51];
      if (v51 < 0x10)
      {
        unint64_t v53 = (unint64_t)v21;
      }
      else
      {
        unint64_t v53 = (unint64_t)&v21[v51 & 0xFFFFFFF0];
        v54 = (unsigned long long *)v21;
        do
        {
          unsigned long long v55 = (unsigned __int128)vld2q_s8(v50->i8);
          v50 += 2;
          *v54++ = v55;
        }
        while (v54 != (unsigned long long *)v53);
      }
      if ((unsigned char *)v53 == v52)
      {
LABEL_82:
        uint64_t v22 = *(unsigned int *)(a5 + 4);
        goto LABEL_83;
      }
      size_t v56 = v20 + v124 + v51;
      unint64_t v57 = v56 - v53 + 34;
      if (v57 < 8
        || (v53 < (unint64_t)v50[4].u64 + 2 * v56 + -2 * v53 + 4
          ? (BOOL v58 = (unint64_t)v50 >= v56 + 34)
          : (BOOL v58 = 1),
            !v58))
      {
        int v60 = (unsigned char *)v53;
        int v61 = v50;
        goto LABEL_79;
      }
      if (v57 >= 0x20)
      {
        unint64_t v59 = v57 & 0xFFFFFFFFFFFFFFE0;
        v93 = v50 + 2;
        v94 = (int8x16_t *)(v53 + 16);
        unint64_t v95 = v57 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v97 = v93[-2];
          int8x16_t v96 = v93[-1];
          int8x16_t v99 = *v93;
          int8x16_t v98 = v93[1];
          v93 += 4;
          v94[-1] = vuzp1q_s8(v97, v96);
          int8x16_t *v94 = vuzp1q_s8(v99, v98);
          v94 += 2;
          v95 -= 32;
        }
        while (v95);
        if (v57 == v59) {
          goto LABEL_82;
        }
        if ((v57 & 0x18) == 0)
        {
          int v61 = (int8x16_t *)((char *)v50 + 2 * v59);
          int v60 = (unsigned char *)(v53 + v59);
          do
          {
LABEL_79:
            char v62 = v61->i8[0];
            int v61 = (int8x16_t *)((char *)v61 + 2);
            *v60++ = v62;
          }
          while (v60 != v52);
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v59 = 0;
      }
      int v60 = (unsigned char *)(v53 + (v57 & 0xFFFFFFFFFFFFFFF8));
      int v61 = (int8x16_t *)((char *)v50 + 2 * (v57 & 0xFFFFFFFFFFFFFFF8));
      v100 = (int16x8_t *)((char *)v50 + 2 * v59);
      v101 = (int8x8_t *)(v53 + v59);
      unint64_t v102 = v59 - (v57 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v103 = *v100++;
        *v101++ = vmovn_s16(v103);
        v102 += 8;
      }
      while (v102);
      if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_82;
      }
      goto LABEL_79;
    }
LABEL_22:
    uint64_t v22 = 0;
LABEL_83:
    v21[v22] = 62;
  }
LABEL_105:
  *int v8 = v9;
  return result;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E14123E8(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E14124FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    uint64_t v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        __int16 v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              char v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                size_t v12 = *(NSObject **)(v2 + 32);
                int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  v15 = (char *)v45 + 16;
                }
                else {
                  v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                int v13 = v45;
                uint64_t v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    int v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  unsigned long long v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    int v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      uint64_t v45 = 0;
                      uint64_t v46 = 0;
                      uint64_t v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      uint64_t v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      unint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      long long v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        int8x16_t v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          int8x16_t v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        long long v28 = v45;
                      }
                      if (v28)
                      {
                        uint64_t v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      int8x16_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      uint64_t v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    uint64_t v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                v35 = v49;
                __int16 v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              size_t v12 = *(NSObject **)(v2 + 32);
              int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          char v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 120, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 108);
  if (v38)
  {
    unint64_t v39 = *(unsigned int ***)(a1 + 96);
    uint64_t v40 = 8 * v38;
    do
    {
      v41 = *v39;
      unsigned char *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  char v42 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v42 && v42 != 0)
  {
    *(void *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 88);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7AE78[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

void sub_1E1412AC4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 120, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 88);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7AE78[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 88) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10 = (void *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        unint64_t result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        uint64_t v11 = v12;
        if (v12)
        {
          *(_DWORD *)uint64_t v12 = 2;
          *(_DWORD *)(v12 + 4) = a2;
          *(void *)(v12 + 8) = v12 + 20;
          *(_DWORD *)(v12 + 16) = 4;
          unint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((int8x16_t *)(v12 + 20), a4, a5, a6);
        }
        goto LABEL_12;
      }
LABEL_8:
      uint64_t v11 = 0;
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v11 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if (!a2) {
    goto LABEL_9;
  }
  if (a2 > 0x7FFFFFEF) {
    goto LABEL_8;
  }
  unint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  uint64_t v11 = v12;
  if (v12)
  {
    *(_DWORD *)uint64_t v12 = 2;
    *(_DWORD *)(v12 + 4) = a2;
    *(void *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 0;
    unint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint16x8_t *)(v12 + 20), a4, a5, a6);
  }
LABEL_12:
  *char v10 = v11;
  return result;
}

void sub_1E1412D5C(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

int8x16_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(int8x16_t *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = __dst;
  if (!a2)
  {
    uint64_t v14 = 0;
    v15 = (char *)__dst;
    if (a3) {
      goto LABEL_28;
    }
LABEL_9:
    uint64_t v16 = 0;
    if (!a4) {
      return __dst;
    }
    goto LABEL_51;
  }
  unsigned int v8 = *(const char **)(a2 + 8);
  size_t v9 = *(unsigned int *)(a2 + 4);
  if ((*(unsigned char *)(a2 + 16) & 4) == 0)
  {
    char v10 = (int8x16_t *)((char *)__dst + v9);
    if (v9 < 0x10)
    {
      uint64_t v11 = __dst;
      if (__dst == v10) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v11 = (int8x16_t *)((char *)__dst + (v9 & 0xFFFFFFF0));
      uint64_t v12 = (unsigned long long *)__dst;
      do
      {
        unsigned long long v13 = (unsigned __int128)vld2q_s8(v8);
        v8 += 32;
        *v12++ = v13;
      }
      while (v12 != (unsigned long long *)v11);
      if (v11 == v10) {
        goto LABEL_27;
      }
    }
    unint64_t v17 = &__dst->i8[v9] - (__int8 *)v11;
    if (v17 < 8 || (v11 < (int8x16_t *)&v8[2 * v17] ? (BOOL v18 = v8 >= &__dst->i8[v9]) : (BOOL v18 = 1), !v18))
    {
      uint64_t v20 = v11;
      int v21 = v8;
      goto LABEL_24;
    }
    if (v17 >= 0x20)
    {
      unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFE0;
      char v48 = (int8x16_t *)(v8 + 32);
      __int16 v49 = v11 + 1;
      unint64_t v50 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v52 = v48[-2];
        int8x16_t v51 = v48[-1];
        int8x16_t v54 = *v48;
        int8x16_t v53 = v48[1];
        v48 += 4;
        v49[-1] = vuzp1q_s8(v52, v51);
        *__int16 v49 = vuzp1q_s8(v54, v53);
        v49 += 2;
        v50 -= 32;
      }
      while (v50);
      if (v17 == v19) {
        goto LABEL_27;
      }
      if ((v17 & 0x18) == 0)
      {
        int v21 = &v8[2 * v19];
        uint64_t v20 = (int8x16_t *)((char *)v11 + v19);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    uint64_t v20 = (int8x16_t *)((char *)v11 + (v17 & 0xFFFFFFFFFFFFFFF8));
    int v21 = &v8[2 * (v17 & 0xFFFFFFFFFFFFFFF8)];
    unsigned long long v55 = (int16x8_t *)&v8[2 * v19];
    size_t v56 = (int8x8_t *)&v11->i8[v19];
    unint64_t v57 = v19 - (v17 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v58 = *v55++;
      *v56++ = vmovn_s16(v58);
      v57 += 8;
    }
    while (v57);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_27;
    }
    do
    {
LABEL_24:
      char v22 = *v21;
      v21 += 2;
      v20->i8[0] = v22;
      uint64_t v20 = (int8x16_t *)((char *)v20 + 1);
    }
    while (v20 != v10);
    goto LABEL_27;
  }
  if (v9)
  {
    if (v9 == 1) {
      __dst->i8[0] = *v8;
    }
    else {
      __dst = (int8x16_t *)memcpy(__dst, v8, v9);
    }
  }
LABEL_27:
  uint64_t v14 = *(unsigned int *)(a2 + 4);
  v15 = &v6->i8[v14];
  if (!a3) {
    goto LABEL_9;
  }
LABEL_28:
  uint64_t v23 = *(const char **)(a3 + 8);
  size_t v24 = *(unsigned int *)(a3 + 4);
  if ((*(unsigned char *)(a3 + 16) & 4) == 0)
  {
    uint64_t v25 = &v15[v24];
    if (v24 < 0x10)
    {
      unint64_t v26 = (unint64_t)v15;
      if (v15 == v25) {
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v26 = (unint64_t)&v15[v24 & 0xFFFFFFF0];
      unint64_t v27 = (unsigned long long *)v15;
      do
      {
        unsigned long long v28 = (unsigned __int128)vld2q_s8(v23);
        v23 += 32;
        *v27++ = v28;
      }
      while (v27 != (unsigned long long *)v26);
      if ((char *)v26 == v25) {
        goto LABEL_50;
      }
    }
    uint64_t v29 = &v6->i8[v14 + v24];
    unint64_t v30 = (unint64_t)&v29[-v26];
    if ((unint64_t)&v29[-v26] < 8
      || (v26 < (unint64_t)&v23[2 * v30] ? (BOOL v31 = v23 >= v29) : (BOOL v31 = 1), !v31))
    {
      uint64_t v33 = (char *)v26;
      int v34 = v23;
      goto LABEL_47;
    }
    if (v30 >= 0x20)
    {
      unint64_t v32 = v30 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v59 = (int8x16_t *)(v23 + 32);
      int v60 = (int8x16_t *)(v26 + 16);
      unint64_t v61 = v30 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v63 = v59[-2];
        int8x16_t v62 = v59[-1];
        int8x16_t v65 = *v59;
        int8x16_t v64 = v59[1];
        v59 += 4;
        v60[-1] = vuzp1q_s8(v63, v62);
        *int v60 = vuzp1q_s8(v65, v64);
        v60 += 2;
        v61 -= 32;
      }
      while (v61);
      if (v30 == v32) {
        goto LABEL_50;
      }
      if ((v30 & 0x18) == 0)
      {
        int v34 = &v23[2 * v32];
        uint64_t v33 = (char *)(v26 + v32);
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v32 = 0;
    }
    uint64_t v33 = (char *)(v26 + (v30 & 0xFFFFFFFFFFFFFFF8));
    int v34 = &v23[2 * (v30 & 0xFFFFFFFFFFFFFFF8)];
    uint64_t v66 = (int16x8_t *)&v23[2 * v32];
    unint64_t v67 = (int8x8_t *)(v26 + v32);
    unint64_t v68 = v32 - (v30 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v69 = *v66++;
      *v67++ = vmovn_s16(v69);
      v68 += 8;
    }
    while (v68);
    if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_50;
    }
    do
    {
LABEL_47:
      char v35 = *v34;
      v34 += 2;
      *v33++ = v35;
    }
    while (v33 != v25);
    goto LABEL_50;
  }
  if (v24)
  {
    if (v24 == 1) {
      char *v15 = *v23;
    }
    else {
      __dst = (int8x16_t *)memcpy(v15, v23, v24);
    }
  }
LABEL_50:
  uint64_t v16 = *(unsigned int *)(a3 + 4);
  if (!a4) {
    return __dst;
  }
LABEL_51:
  __dst = (int8x16_t *)&v15[v16];
  size_t v36 = *(int8x16_t **)(a4 + 8);
  size_t v37 = *(unsigned int *)(a4 + 4);
  if ((*(unsigned char *)(a4 + 16) & 4) != 0)
  {
    if (v37)
    {
      if (v37 == 1)
      {
        __dst->i8[0] = v36->i8[0];
      }
      else
      {
        return (int8x16_t *)memcpy(__dst, v36, v37);
      }
    }
  }
  else
  {
    uint64_t v38 = (int8x16_t *)((char *)__dst + v37);
    if (v37 >= 0x10)
    {
      unint64_t v39 = (int8x16_t *)((char *)__dst + (v37 & 0xFFFFFFF0));
      do
      {
        unsigned long long v40 = (unsigned __int128)vld2q_s8(v36->i8);
        v36 += 2;
        *__dst++ = (int8x16_t)v40;
      }
      while (__dst != v39);
      __dst = v39;
    }
    if (__dst != v38)
    {
      unint64_t v41 = &v6->i8[v37 + v14 + v16] - (__int8 *)__dst;
      if (v41 < 8
        || ((char v42 = (int8x16_t *)((char *)v6 + v37 + v16 + v14),
             __dst < (int8x16_t *)((char *)v36 + 2 * ((char *)v42 - (char *)__dst)))
          ? (BOOL v43 = v36 >= v42)
          : (BOOL v43 = 1),
            !v43))
      {
        uint64_t v45 = __dst;
        uint64_t v46 = v36;
        goto LABEL_69;
      }
      if (v41 >= 0x20)
      {
        unint64_t v44 = v41 & 0xFFFFFFFFFFFFFFE0;
        int8x16_t v70 = v36 + 2;
        int8x16_t v71 = __dst + 1;
        unint64_t v72 = v41 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v74 = v70[-2];
          int8x16_t v73 = v70[-1];
          int8x16_t v76 = *v70;
          int8x16_t v75 = v70[1];
          v70 += 4;
          v71[-1] = vuzp1q_s8(v74, v73);
          *int8x16_t v71 = vuzp1q_s8(v76, v75);
          v71 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v41 == v44) {
          return __dst;
        }
        if ((v41 & 0x18) == 0)
        {
          uint64_t v46 = (int8x16_t *)((char *)v36 + 2 * v44);
          uint64_t v45 = (int8x16_t *)((char *)__dst + v44);
          do
          {
LABEL_69:
            __int8 v47 = v46->i8[0];
            uint64_t v46 = (int8x16_t *)((char *)v46 + 2);
            v45->i8[0] = v47;
            uint64_t v45 = (int8x16_t *)((char *)v45 + 1);
          }
          while (v45 != v38);
          return __dst;
        }
      }
      else
      {
        unint64_t v44 = 0;
      }
      uint64_t v45 = (int8x16_t *)((char *)__dst + (v41 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v46 = (int8x16_t *)((char *)v36 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
      int v77 = (int16x8_t *)((char *)v36 + 2 * v44);
      int v78 = (int8x8_t *)&__dst->i8[v44];
      unint64_t v79 = v44 - (v41 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v80 = *v77++;
        *v78++ = vmovn_s16(v80);
        v79 += 8;
      }
      while (v79);
      if (v41 != (v41 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_69;
      }
    }
  }
  return __dst;
}

uint16x8_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint16x8_t *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = __dst;
  if (!a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (char *)__dst;
    if (a3) {
      goto LABEL_28;
    }
LABEL_7:
    uint64_t v12 = 0;
    if (!a4) {
      return __dst;
    }
    goto LABEL_46;
  }
  unsigned int v8 = *(int8x16_t **)(a2 + 8);
  uint64_t v9 = *(unsigned int *)(a2 + 4);
  if ((*(unsigned char *)(a2 + 16) & 4) != 0)
  {
    unsigned long long v13 = (uint16x8_t *)((char *)__dst + 2 * v9);
    if (v9 < 0x40)
    {
      uint64_t v14 = __dst;
      if (__dst == v13) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v14 = (uint16x8_t *)((char *)__dst + 2 * (v9 & 0xFFFFFFC0));
      long long v15 = 0uLL;
      uint64_t v16 = (char *)__dst;
      do
      {
        v97.val[0] = *v8;
        int8x16_t v17 = v8[1];
        v100.val[0] = v8[2];
        int8x16_t v18 = v8[3];
        v8 += 4;
        int8x16_t v19 = v18;
        v100.val[1] = 0uLL;
        v103.val[0] = v17;
        v97.val[1] = 0uLL;
        uint64_t v20 = v16;
        vst2q_s8(v20, v97);
        v20 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v20, v103);
        int v21 = v16 + 64;
        vst2q_s8(v21, v100);
        char v22 = v16 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
        v16 += 128;
      }
      while (v16 != (char *)v14);
      if (v14 == v13) {
        goto LABEL_27;
      }
    }
    unint64_t v23 = (char *)__dst + 2 * v9 - (char *)v14 - 2;
    if (v23 < 0xE
      || (v14 < (uint16x8_t *)&v8->i8[(v23 >> 1) + 1]
        ? (BOOL v24 = v8 >= (int8x16_t *)((char *)&v14->i16[1] + (v23 & 0xFFFFFFFFFFFFFFFELL)))
        : (BOOL v24 = 1),
          !v24))
    {
      unint64_t v27 = v14;
      unsigned long long v28 = v8;
      goto LABEL_24;
    }
    uint64_t v25 = (v23 >> 1) + 1;
    if (v23 >= 0x3E)
    {
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v66 = (uint8x8_t *)&v8[1];
      unint64_t v67 = v14 + 2;
      unint64_t v68 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v69 = *(uint8x16_t *)v66[-2].i8;
        uint16x8_t v70 = vmovl_u8(*v66);
        uint16x8_t v71 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
        v67[-2] = vmovl_u8(*(uint8x8_t *)v69.i8);
        v67[-1] = vmovl_high_u8(v69);
        *unint64_t v67 = v70;
        v67[1] = v71;
        v67 += 4;
        v66 += 4;
        v68 -= 32;
      }
      while (v68);
      if (v25 == v26) {
        goto LABEL_27;
      }
      if ((v25 & 0x18) == 0)
      {
        unsigned long long v28 = (int8x16_t *)((char *)v8 + v26);
        unint64_t v27 = (uint16x8_t *)((char *)v14 + 2 * v26);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v26 = 0;
    }
    unint64_t v27 = (uint16x8_t *)((char *)v14 + 2 * (v25 & 0xFFFFFFFFFFFFFFF8));
    unsigned long long v28 = (int8x16_t *)((char *)v8 + (v25 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v72 = (uint8x8_t *)&v8->i8[v26];
    int8x16_t v73 = (uint16x8_t *)((char *)v14 + 2 * v26);
    unint64_t v74 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v75 = *v72++;
      *v73++ = vmovl_u8(v75);
      v74 += 8;
    }
    while (v74);
    if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_27;
    }
    do
    {
LABEL_24:
      __int16 v29 = v28->u8[0];
      unsigned long long v28 = (int8x16_t *)((char *)v28 + 1);
      v27->i16[0] = v29;
      unint64_t v27 = (uint16x8_t *)((char *)v27 + 2);
    }
    while (v27 != v13);
    goto LABEL_27;
  }
  if (v9)
  {
    if (v9 == 1) {
      __dst->i16[0] = v8->i16[0];
    }
    else {
      __dst = (uint16x8_t *)memcpy(__dst, v8, 2 * v9);
    }
  }
LABEL_27:
  uint64_t v10 = *(unsigned int *)(a2 + 4);
  uint64_t v11 = &v6->i8[2 * v10];
  if (!a3) {
    goto LABEL_7;
  }
LABEL_28:
  unint64_t v30 = *(int8x16_t **)(a3 + 8);
  uint64_t v31 = *(unsigned int *)(a3 + 4);
  if ((*(unsigned char *)(a3 + 16) & 4) != 0)
  {
    unint64_t v32 = &v11[2 * v31];
    if (v31 < 0x40)
    {
      unint64_t v33 = (unint64_t)v11;
      if (v11 == v32) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v33 = (unint64_t)&v11[2 * (v31 & 0xFFFFFFC0)];
      long long v34 = 0uLL;
      char v35 = v11;
      do
      {
        v98.val[0] = *v30;
        int8x16_t v36 = v30[1];
        v101.val[0] = v30[2];
        int8x16_t v37 = v30[3];
        v30 += 4;
        int8x16_t v38 = v37;
        v101.val[1] = 0uLL;
        v104.val[0] = v36;
        v98.val[1] = 0uLL;
        unint64_t v39 = v35;
        vst2q_s8(v39, v98);
        v39 += 32;
        v104.val[1] = 0uLL;
        vst2q_s8(v39, v104);
        unsigned long long v40 = v35 + 64;
        vst2q_s8(v40, v101);
        unint64_t v41 = v35 + 96;
        vst2q_s8(v41, *(int8x16x2_t *)(&v34 - 1));
        v35 += 128;
      }
      while (v35 != (char *)v33);
      if ((char *)v33 == v32) {
        goto LABEL_45;
      }
    }
    unint64_t v42 = (unint64_t)v6->u64 + 2 * v10 + 2 * v31 - v33 - 2;
    if (v42 < 0xE
      || v33 < (unint64_t)v30->u64 + (v42 >> 1) + 1
      && (unint64_t)v30 < (v42 & 0xFFFFFFFFFFFFFFFELL) + v33 + 2)
    {
      BOOL v43 = (char *)v33;
      unint64_t v44 = v30;
      goto LABEL_42;
    }
    uint64_t v64 = (v42 >> 1) + 1;
    if (v42 >= 0x3E)
    {
      unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v86 = (uint8x8_t *)&v30[1];
      int8x16_t v87 = (uint16x8_t *)(v33 + 32);
      unint64_t v88 = v64 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v89 = *(uint8x16_t *)v86[-2].i8;
        uint16x8_t v90 = vmovl_u8(*v86);
        uint16x8_t v91 = vmovl_high_u8(*(uint8x16_t *)v86->i8);
        v87[-2] = vmovl_u8(*(uint8x8_t *)v89.i8);
        v87[-1] = vmovl_high_u8(v89);
        uint16x8_t *v87 = v90;
        v87[1] = v91;
        v87 += 4;
        v86 += 4;
        v88 -= 32;
      }
      while (v88);
      if (v64 == v65) {
        goto LABEL_45;
      }
      if ((v64 & 0x18) == 0)
      {
        unint64_t v44 = (int8x16_t *)((char *)v30 + v65);
        BOOL v43 = (char *)(v33 + 2 * v65);
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v65 = 0;
    }
    BOOL v43 = (char *)(v33 + 2 * (v64 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v44 = (int8x16_t *)((char *)v30 + (v64 & 0xFFFFFFFFFFFFFFF8));
    int16x8_t v92 = (uint8x8_t *)&v30->i8[v65];
    v93 = (uint16x8_t *)(v33 + 2 * v65);
    unint64_t v94 = v65 - (v64 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v95 = *v92++;
      *v93++ = vmovl_u8(v95);
      v94 += 8;
    }
    while (v94);
    if (v64 == (v64 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_45;
    }
    do
    {
LABEL_42:
      __int16 v45 = v44->u8[0];
      unint64_t v44 = (int8x16_t *)((char *)v44 + 1);
      *(_WORD *)BOOL v43 = v45;
      v43 += 2;
    }
    while (v43 != v32);
    goto LABEL_45;
  }
  if (v31)
  {
    if (v31 == 1) {
      *(_WORD *)uint64_t v11 = v30->i16[0];
    }
    else {
      __dst = (uint16x8_t *)memcpy(v11, v30, 2 * v31);
    }
  }
LABEL_45:
  uint64_t v12 = *(unsigned int *)(a3 + 4);
  if (!a4) {
    return __dst;
  }
LABEL_46:
  __dst = (uint16x8_t *)&v11[2 * v12];
  uint64_t v46 = *(int8x16_t **)(a4 + 8);
  uint64_t v47 = *(unsigned int *)(a4 + 4);
  if ((*(unsigned char *)(a4 + 16) & 4) == 0)
  {
    if (v47)
    {
      if (v47 == 1)
      {
        __dst->i16[0] = v46->i16[0];
      }
      else
      {
        return (uint16x8_t *)memcpy(__dst, v46, 2 * v47);
      }
    }
    return __dst;
  }
  char v48 = (uint16x8_t *)((char *)__dst + 2 * v47);
  if (v47 >= 0x40)
  {
    __int16 v49 = (uint16x8_t *)((char *)__dst + 2 * (v47 & 0xFFFFFFC0));
    long long v50 = 0uLL;
    do
    {
      v99.val[0] = *v46;
      int8x16_t v51 = v46[1];
      v102.val[0] = v46[2];
      int8x16_t v52 = v46[3];
      v46 += 4;
      int8x16_t v53 = v52;
      v102.val[1] = 0uLL;
      v105.val[0] = v51;
      v99.val[1] = 0uLL;
      int8x16_t v54 = (char *)__dst;
      vst2q_s8(v54, v99);
      v54 += 32;
      v105.val[1] = 0uLL;
      vst2q_s8(v54, v105);
      i8 = __dst[4].i8;
      vst2q_s8(i8, v102);
      size_t v56 = __dst[6].i8;
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      __dst += 8;
    }
    while (__dst != v49);
    __dst = v49;
  }
  if (__dst != v48)
  {
    unint64_t v57 = (char *)v6 + 2 * v10 + 2 * v12 + 2 * v47 - (char *)__dst - 2;
    if (v57 < 0xE
      || (__dst < (uint16x8_t *)&v46->i8[(v57 >> 1) + 1]
        ? (BOOL v58 = v46 >= (int8x16_t *)((char *)&__dst->i16[1] + (v57 & 0xFFFFFFFFFFFFFFFELL)))
        : (BOOL v58 = 1),
          !v58))
    {
      unint64_t v61 = __dst;
      int8x16_t v62 = v46;
      goto LABEL_64;
    }
    uint64_t v59 = (v57 >> 1) + 1;
    if (v57 >= 0x3E)
    {
      unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v76 = (uint8x8_t *)&v46[1];
      int v77 = __dst + 2;
      unint64_t v78 = v59 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v79 = *(uint8x16_t *)v76[-2].i8;
        uint16x8_t v80 = vmovl_u8(*v76);
        uint16x8_t v81 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
        v77[-2] = vmovl_u8(*(uint8x8_t *)v79.i8);
        v77[-1] = vmovl_high_u8(v79);
        *int v77 = v80;
        v77[1] = v81;
        v77 += 4;
        v76 += 4;
        v78 -= 32;
      }
      while (v78);
      if (v59 == v60) {
        return __dst;
      }
      if ((v59 & 0x18) == 0)
      {
        int8x16_t v62 = (int8x16_t *)((char *)v46 + v60);
        unint64_t v61 = (uint16x8_t *)((char *)__dst + 2 * v60);
        goto LABEL_64;
      }
    }
    else
    {
      unint64_t v60 = 0;
    }
    unint64_t v61 = (uint16x8_t *)((char *)__dst + 2 * (v59 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v62 = (int8x16_t *)((char *)v46 + (v59 & 0xFFFFFFFFFFFFFFF8));
    int v82 = (uint8x8_t *)&v46->i8[v60];
    uint64_t v83 = (uint16x8_t *)((char *)__dst + 2 * v60);
    unint64_t v84 = v60 - (v59 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v85 = *v82++;
      *v83++ = vmovl_u8(v85);
      v84 += 8;
    }
    while (v84);
    if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8)) {
      return __dst;
    }
    do
    {
LABEL_64:
      __int16 v63 = v62->u8[0];
      int8x16_t v62 = (int8x16_t *)((char *)v62 + 1);
      v61->i16[0] = v63;
      unint64_t v61 = (uint16x8_t *)((char *)v61 + 2);
    }
    while (v61 != v48);
  }
  return __dst;
}

WTF *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  int8x16_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  BOOL v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 108);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 96) = a1 + 112;
    int8x16_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 104);
    LODWORD(v6) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 104) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 104) = 1;
  int v7 = *(_DWORD *)(a1 + 128);
  unsigned int v8 = *(_DWORD *)(a1 + 132);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 120) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 128) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    uint64_t v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 137)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v90, a1);
            uint64_t v20 = v90;
            (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v90 + 16))(&buf, v90);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7AEA0;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int8x16_t v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      uint64_t v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    unint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      unint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        unint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      unsigned long long v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      __int16 v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_120;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_33;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_33:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_34;
          }
          goto LABEL_38;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_34:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_149;
        }
        goto LABEL_39;
      }
LABEL_38:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_149;
      }
LABEL_39:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_149:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_55;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_53:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_53;
        }
        int v40 = 1;
      }
LABEL_55:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      int8x16x2_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_149;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_59;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_59:
        BOOL v43 = v98;
        int8x16x2_t v98 = 0;
        if (!v43) {
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      BOOL v43 = v98;
      int8x16x2_t v98 = 0;
      if (!v43) {
        goto LABEL_64;
      }
LABEL_62:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_64:
        unint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }
      WTF::StringImpl::destroy(v43, v42);
      unint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_69;
      }
LABEL_67:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_69:
        __int16 v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_78;
        }
        goto LABEL_72;
      }
      WTF::StringImpl::destroy(v44, v42);
      __int16 v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_78;
      }
LABEL_72:
      WTF::String::utf8();
      if (v95) {
        char v48 = (char *)v95 + 16;
      }
      else {
        char v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      uint8x8_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_117;
          }
          goto LABEL_79;
        }
        --*(_DWORD *)v46;
      }
LABEL_78:
      if (!*v29) {
        goto LABEL_117;
      }
LABEL_79:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_117;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          int8x16_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            uint8x8_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            uint8x8_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            uint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            unint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              __int16 v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                uint64_t v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              unint64_t v61 = v95;
            }
            if (v61)
            {
              uint8x8_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            unint64_t v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_105;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            uint64_t v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_110;
            }
LABEL_108:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_110:
              unint64_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_113;
              }
              goto LABEL_85;
            }
            WTF::StringImpl::destroy(v66, v47);
            unint64_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_113:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_85:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_115;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_105:
          uint64_t v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_110;
          }
          goto LABEL_108;
        }
LABEL_115:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_117:
      uint8x16_t v69 = v100;
      int8x16x2_t v100 = 0;
      if (!v69) {
        goto LABEL_120;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_120:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 88);
        uint64_t v72 = *(unsigned int *)(a1 + 88);
        if (v71 != -1) {
          goto LABEL_121;
        }
        goto LABEL_124;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 88);
      uint64_t v72 = *(unsigned int *)(a1 + 88);
      if (v71 != -1)
      {
LABEL_121:
        if (v72 != -1) {
          goto LABEL_125;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7AE78[v71])(&buf, v70);
        *(_DWORD *)(v24 + 88) = -1;
        goto LABEL_126;
      }
LABEL_124:
      if (v72 != -1)
      {
LABEL_125:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7AEB8[v72])(&buf);
      }
LABEL_126:
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (int8x16_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        uint8x8_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_129:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_130;
          }
          goto LABEL_24;
        }
      }
      else
      {
        uint8x8_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_129;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_130:
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_24:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    unint64_t v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      uint16x8_t v80 = *(unsigned int **)v78;
      *(void *)unint64_t v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      unint64_t v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    int8x16_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E1414240(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  char v14 = 0;
  atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v15);
  _Unwind_Resume(a1);
}

void sub_1E14142B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

BOOL WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  BOOL v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](a1 + 48);
    int v5 = *(_DWORD *)(a1 + 88);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 88);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v5 == 2;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 88) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 88) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E1414784(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  int v3 = (_OWORD *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 88) == 1)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 72);
      *int v3 = *(_OWORD *)(a2 + 56);
      v3[1] = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 88) == 1)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E1414860(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::~Locker(uint64_t a1)
{
  char v2 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    int v3 = *(atomic_uint **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    int v3 = *(atomic_uint **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      uint64_t v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  uint64_t v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    char v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  char v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    uint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  uint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int8x16_t v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int8x16_t v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)__int16 v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int8x16_t v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int8x16_t v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          unint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          unint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          int v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              char *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          BOOL v43 = v73;
          int8x16_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            unint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          unint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            __int16 v45 = v69;
            uint8x16_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          __int16 v45 = v69;
          uint8x16_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            unint64_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          unint64_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            unint64_t v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          unint64_t v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            char v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          char v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        BOOL v43 = v73;
        int8x16_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  unint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E141511C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E141546C()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E1415448);
  }
  JUMPOUT(0x1E14153ACLL);
}

void *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = result;
  if (a2)
  {
    int v14 = *(_DWORD *)(a2 + 4);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    int v14 = 0;
    if (a3)
    {
LABEL_3:
      int v15 = *(_DWORD *)(a3 + 4);
      if (a4) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  int v15 = 0;
  if (a4)
  {
LABEL_4:
    int v16 = *(_DWORD *)(a4 + 4);
    if (a5) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  int v16 = 0;
  if (a5)
  {
LABEL_5:
    int v17 = *(_DWORD *)(a5 + 4);
    if (a6) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  int v17 = 0;
  if (a6)
  {
LABEL_6:
    int v18 = *(_DWORD *)(a6 + 4);
    if (a7) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v18 = 0;
  if (a7)
  {
LABEL_7:
    int v19 = *(_DWORD *)(a7 + 4);
    if (a8) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v19 = 0;
  if (a8)
  {
LABEL_8:
    int v20 = *(_DWORD *)(a8 + 4);
    if ((v20 | v19) < 0) {
      goto LABEL_44;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v20 = 0;
  if (v19 < 0)
  {
LABEL_44:
    WTF::StringImpl *result = 0;
    return result;
  }
LABEL_17:
  BOOL v21 = __OFADD__(v19, v20);
  int v22 = v19 + v20;
  char v23 = v21;
  if (v18 < 0 || (v23 & 1) != 0) {
    goto LABEL_44;
  }
  BOOL v21 = __OFADD__(v18, v22);
  int v24 = v18 + v22;
  BOOL v25 = v21;
  if (v17 < 0 || v25) {
    goto LABEL_44;
  }
  BOOL v21 = __OFADD__(v17, v24);
  int v26 = v17 + v24;
  BOOL v27 = v21;
  if (v16 < 0 || v27) {
    goto LABEL_44;
  }
  BOOL v21 = __OFADD__(v16, v26);
  int v28 = v16 + v26;
  BOOL v29 = v21;
  if (v15 < 0 || v29) {
    goto LABEL_44;
  }
  BOOL v21 = __OFADD__(v15, v28);
  int v30 = v15 + v28;
  BOOL v31 = v21;
  if (v14 < 0) {
    goto LABEL_44;
  }
  if (v31) {
    goto LABEL_44;
  }
  unsigned int v32 = v14 + v30;
  if (__OFADD__(v14, v30)) {
    goto LABEL_44;
  }
  if ((!a2 || (*(unsigned char *)(a2 + 16) & 4) != 0)
    && (!a3 || (*(unsigned char *)(a3 + 16) & 4) != 0)
    && (!a4 || (*(unsigned char *)(a4 + 16) & 4) != 0)
    && (!a5 || (*(unsigned char *)(a5 + 16) & 4) != 0)
    && (!a6 || (*(unsigned char *)(a6 + 16) & 4) != 0))
  {
    if (a7)
    {
      unsigned int v34 = *(_DWORD *)(a7 + 16);
      int v33 = (v34 >> 2) & 1;
      if (!a8 || (v34 & 4) == 0) {
        goto LABEL_56;
      }
    }
    else if (!a8)
    {
      int v33 = 1;
      goto LABEL_56;
    }
    int v33 = (*(unsigned __int8 *)(a8 + 16) >> 2) & 1;
  }
  else
  {
    int v33 = 0;
  }
LABEL_56:
  unint64_t result = (void *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v35, v32, v33, a2, a3, a4, a5, a6, a7, a8);
  void *v13 = v35;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v16 = (void *)result;
  if (!a3)
  {
    if (!a2) {
      goto LABEL_14;
    }
    if (a2 > 0x7FFFFFEF) {
      goto LABEL_13;
    }
    unint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    uint64_t v17 = v248;
    if (!v248) {
      goto LABEL_201;
    }
    uint64_t v247 = a8;
    BOOL v25 = (_WORD *)(v248 + 20);
    *(_DWORD *)uint64_t v248 = 2;
    *(_DWORD *)(v248 + 4) = a2;
    *(void *)(v248 + 8) = v248 + 20;
    *(_DWORD *)(v248 + 16) = 0;
    if (!a4)
    {
      uint64_t v35 = 0;
      BOOL v36 = (_WORD *)(v248 + 20);
      if (a5) {
        goto LABEL_136;
      }
      goto LABEL_29;
    }
    int v26 = *(int8x16_t **)(a4 + 8);
    uint64_t v27 = *(unsigned int *)(a4 + 4);
    if ((*(unsigned char *)(a4 + 16) & 4) == 0)
    {
      if (v27)
      {
        if (v27 == 1) {
          *BOOL v25 = v26->i16[0];
        }
        else {
          memcpy((void *)(v248 + 20), v26, 2 * v27);
        }
      }
LABEL_135:
      uint64_t v35 = *(unsigned int *)(a4 + 4);
      BOOL v36 = &v25[v35];
      if (a5)
      {
LABEL_136:
        unint64_t v106 = *(int8x16_t **)(a5 + 8);
        uint64_t v107 = *(unsigned int *)(a5 + 4);
        if ((*(unsigned char *)(a5 + 16) & 4) == 0)
        {
          if (v107)
          {
            if (v107 == 1) {
              _WORD *v36 = v106->i16[0];
            }
            else {
              memcpy(v36, v106, 2 * v107);
            }
          }
LABEL_153:
          uint64_t v37 = *(unsigned int *)(a5 + 4);
          uint64_t v38 = &v36[v37];
          if (a6)
          {
LABEL_154:
            unint64_t v122 = *(int8x16_t **)(a6 + 8);
            uint64_t v123 = *(unsigned int *)(a6 + 4);
            if ((*(unsigned char *)(a6 + 16) & 4) == 0)
            {
              if (v123)
              {
                if (v123 == 1) {
                  *uint64_t v38 = v122->i16[0];
                }
                else {
                  memcpy(v38, v122, 2 * v123);
                }
              }
LABEL_176:
              uint64_t v39 = *(unsigned int *)(a6 + 4);
              int v40 = &v38[v39];
              if (a7)
              {
LABEL_177:
                v141 = *(int8x16_t **)(a7 + 8);
                uint64_t v142 = *(unsigned int *)(a7 + 4);
                if ((*(unsigned char *)(a7 + 16) & 4) == 0)
                {
                  if (v142)
                  {
                    if (v142 == 1) {
                      _WORD *v40 = v141->i16[0];
                    }
                    else {
                      memcpy(v40, v141, 2 * v142);
                    }
                  }
                  goto LABEL_199;
                }
                v143 = &v40[v142];
                if (v142 < 0x40)
                {
                  unint64_t v144 = (unint64_t)v40;
                }
                else
                {
                  unint64_t v144 = (unint64_t)&v40[v142 & 0xFFFFFFC0];
                  long long v145 = 0uLL;
                  v146 = (char *)v40;
                  do
                  {
                    v252.val[0] = *v141;
                    int8x16_t v147 = v141[1];
                    v256.val[0] = v141[2];
                    int8x16_t v148 = v141[3];
                    v141 += 4;
                    int8x16_t v149 = v148;
                    v256.val[1] = 0uLL;
                    v260.val[0] = v147;
                    v252.val[1] = 0uLL;
                    v150 = v146;
                    vst2q_s8(v150, v252);
                    v150 += 32;
                    v260.val[1] = 0uLL;
                    vst2q_s8(v150, v260);
                    v151 = v146 + 64;
                    vst2q_s8(v151, v256);
                    v152 = v146 + 96;
                    vst2q_s8(v152, *(int8x16x2_t *)(&v145 - 1));
                    v146 += 128;
                  }
                  while (v146 != (char *)v144);
                }
                if ((_WORD *)v144 == v143)
                {
LABEL_199:
                  uint64_t v41 = *(unsigned int *)(a7 + 4);
                  goto LABEL_200;
                }
                unint64_t v153 = v248 + 2 * (v35 + v37 + v39 + v142) - v144 + 18;
                if (v153 < 0xE
                  || (v144 < (unint64_t)v141->u64 + (v153 >> 1) + 1
                    ? (BOOL v154 = (unint64_t)v141 >= (v153 & 0xFFFFFFFFFFFFFFFELL) + v144 + 2)
                    : (BOOL v154 = 1),
                      !v154))
                {
                  v157 = (_WORD *)v144;
                  v158 = v141;
                  goto LABEL_196;
                }
                uint64_t v155 = (v153 >> 1) + 1;
                if (v153 >= 0x3E)
                {
                  unint64_t v156 = v155 & 0xFFFFFFFFFFFFFFE0;
                  v236 = (uint8x8_t *)&v141[1];
                  v237 = (uint16x8_t *)(v144 + 32);
                  unint64_t v238 = v155 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    uint8x16_t v239 = *(uint8x16_t *)v236[-2].i8;
                    uint16x8_t v240 = vmovl_u8(*v236);
                    uint16x8_t v241 = vmovl_high_u8(*(uint8x16_t *)v236->i8);
                    v237[-2] = vmovl_u8(*(uint8x8_t *)v239.i8);
                    v237[-1] = vmovl_high_u8(v239);
                    uint16x8_t *v237 = v240;
                    v237[1] = v241;
                    v237 += 4;
                    v236 += 4;
                    v238 -= 32;
                  }
                  while (v238);
                  if (v155 == v156) {
                    goto LABEL_199;
                  }
                  if ((v155 & 0x18) == 0)
                  {
                    v158 = (int8x16_t *)((char *)v141 + v156);
                    v157 = (_WORD *)(v144 + 2 * v156);
                    do
                    {
LABEL_196:
                      __int16 v159 = v158->u8[0];
                      v158 = (int8x16_t *)((char *)v158 + 1);
                      *v157++ = v159;
                    }
                    while (v157 != v143);
                    goto LABEL_199;
                  }
                }
                else
                {
                  unint64_t v156 = 0;
                }
                v157 = (_WORD *)(v144 + 2 * (v155 & 0xFFFFFFFFFFFFFFF8));
                v158 = (int8x16_t *)((char *)v141 + (v155 & 0xFFFFFFFFFFFFFFF8));
                v242 = (uint8x8_t *)&v141->i8[v156];
                v243 = (uint16x8_t *)(v144 + 2 * v156);
                unint64_t v244 = v156 - (v155 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint8x8_t v245 = *v242++;
                  *v243++ = vmovl_u8(v245);
                  v244 += 8;
                }
                while (v244);
                if (v155 == (v155 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_199;
                }
                goto LABEL_196;
              }
LABEL_31:
              uint64_t v41 = 0;
LABEL_200:
              unint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint16x8_t *)&v40[v41], v247, a9, a10);
              goto LABEL_201;
            }
            uint64_t v124 = &v38[v123];
            if (v123 < 0x40)
            {
              unint64_t v125 = (unint64_t)v38;
            }
            else
            {
              unint64_t v125 = (unint64_t)&v38[v123 & 0xFFFFFFC0];
              long long v126 = 0uLL;
              int8x16x2_t v127 = (char *)v38;
              do
              {
                v251.val[0] = *v122;
                int8x16_t v128 = v122[1];
                v255.val[0] = v122[2];
                int8x16_t v129 = v122[3];
                v122 += 4;
                int8x16_t v130 = v129;
                v255.val[1] = 0uLL;
                v259.val[0] = v128;
                v251.val[1] = 0uLL;
                v131 = v127;
                vst2q_s8(v131, v251);
                v131 += 32;
                v259.val[1] = 0uLL;
                vst2q_s8(v131, v259);
                v132 = v127 + 64;
                vst2q_s8(v132, v255);
                v133 = v127 + 96;
                vst2q_s8(v133, *(int8x16x2_t *)(&v126 - 1));
                v127 += 128;
              }
              while (v127 != (char *)v125);
            }
            if ((_WORD *)v125 == v124) {
              goto LABEL_176;
            }
            unint64_t v134 = v248 + 2 * (v35 + v37 + v123) - v125 + 18;
            if (v134 < 0xE
              || (v125 < (unint64_t)v122->u64 + (v134 >> 1) + 1
                ? (BOOL v135 = (unint64_t)v122 >= (v134 & 0xFFFFFFFFFFFFFFFELL) + v125 + 2)
                : (BOOL v135 = 1),
                  !v135))
            {
              v138 = (_WORD *)v125;
              v139 = v122;
              goto LABEL_173;
            }
            uint64_t v136 = (v134 >> 1) + 1;
            if (v134 >= 0x3E)
            {
              unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFE0;
              v226 = (uint8x8_t *)&v122[1];
              v227 = (uint16x8_t *)(v125 + 32);
              unint64_t v228 = v136 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v229 = *(uint8x16_t *)v226[-2].i8;
                uint16x8_t v230 = vmovl_u8(*v226);
                uint16x8_t v231 = vmovl_high_u8(*(uint8x16_t *)v226->i8);
                v227[-2] = vmovl_u8(*(uint8x8_t *)v229.i8);
                v227[-1] = vmovl_high_u8(v229);
                uint16x8_t *v227 = v230;
                v227[1] = v231;
                v227 += 4;
                v226 += 4;
                v228 -= 32;
              }
              while (v228);
              if (v136 == v137) {
                goto LABEL_176;
              }
              if ((v136 & 0x18) == 0)
              {
                v139 = (int8x16_t *)((char *)v122 + v137);
                v138 = (_WORD *)(v125 + 2 * v137);
                goto LABEL_173;
              }
            }
            else
            {
              unint64_t v137 = 0;
            }
            v138 = (_WORD *)(v125 + 2 * (v136 & 0xFFFFFFFFFFFFFFF8));
            v139 = (int8x16_t *)((char *)v122 + (v136 & 0xFFFFFFFFFFFFFFF8));
            v232 = (uint8x8_t *)&v122->i8[v137];
            v233 = (uint16x8_t *)(v125 + 2 * v137);
            unint64_t v234 = v137 - (v136 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v235 = *v232++;
              *v233++ = vmovl_u8(v235);
              v234 += 8;
            }
            while (v234);
            if (v136 == (v136 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_176;
            }
            do
            {
LABEL_173:
              __int16 v140 = v139->u8[0];
              v139 = (int8x16_t *)((char *)v139 + 1);
              *v138++ = v140;
            }
            while (v138 != v124);
            goto LABEL_176;
          }
LABEL_30:
          uint64_t v39 = 0;
          int v40 = v38;
          if (a7) {
            goto LABEL_177;
          }
          goto LABEL_31;
        }
        uint16x8_t v108 = &v36[v107];
        if (v107 < 0x40)
        {
          unint64_t v109 = (unint64_t)v36;
        }
        else
        {
          unint64_t v109 = (unint64_t)&v36[v107 & 0xFFFFFFC0];
          long long v110 = 0uLL;
          v111 = (char *)v36;
          do
          {
            v250.val[0] = *v106;
            int8x16_t v112 = v106[1];
            v254.val[0] = v106[2];
            int8x16_t v113 = v106[3];
            v106 += 4;
            int8x16_t v114 = v113;
            v254.val[1] = 0uLL;
            v258.val[0] = v112;
            v250.val[1] = 0uLL;
            v115 = v111;
            vst2q_s8(v115, v250);
            v115 += 32;
            v258.val[1] = 0uLL;
            vst2q_s8(v115, v258);
            unint64_t v116 = v111 + 64;
            vst2q_s8(v116, v254);
            uint8x16_t v117 = v111 + 96;
            vst2q_s8(v117, *(int8x16x2_t *)(&v110 - 1));
            v111 += 128;
          }
          while (v111 != (char *)v109);
        }
        if ((_WORD *)v109 == v108) {
          goto LABEL_153;
        }
        unint64_t v118 = v248 + 2 * (v35 + v107) - v109 + 18;
        if (v118 < 0xE
          || v109 < (unint64_t)v106->u64 + (v118 >> 1) + 1
          && (unint64_t)v106 < (v118 & 0xFFFFFFFFFFFFFFFELL) + v109 + 2)
        {
          uint16x8_t v119 = (_WORD *)v109;
          v120 = v106;
          goto LABEL_150;
        }
        uint64_t v160 = (v118 >> 1) + 1;
        if (v118 >= 0x3E)
        {
          unint64_t v161 = v160 & 0xFFFFFFFFFFFFFFE0;
          v206 = (uint8x8_t *)&v106[1];
          v207 = (uint16x8_t *)(v109 + 32);
          unint64_t v208 = v160 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v209 = *(uint8x16_t *)v206[-2].i8;
            uint16x8_t v210 = vmovl_u8(*v206);
            uint16x8_t v211 = vmovl_high_u8(*(uint8x16_t *)v206->i8);
            v207[-2] = vmovl_u8(*(uint8x8_t *)v209.i8);
            v207[-1] = vmovl_high_u8(v209);
            uint16x8_t *v207 = v210;
            v207[1] = v211;
            v207 += 4;
            v206 += 4;
            v208 -= 32;
          }
          while (v208);
          if (v160 == v161) {
            goto LABEL_153;
          }
          if ((v160 & 0x18) == 0)
          {
            v120 = (int8x16_t *)((char *)v106 + v161);
            uint16x8_t v119 = (_WORD *)(v109 + 2 * v161);
            goto LABEL_150;
          }
        }
        else
        {
          unint64_t v161 = 0;
        }
        uint16x8_t v119 = (_WORD *)(v109 + 2 * (v160 & 0xFFFFFFFFFFFFFFF8));
        v120 = (int8x16_t *)((char *)v106 + (v160 & 0xFFFFFFFFFFFFFFF8));
        v212 = (uint8x8_t *)&v106->i8[v161];
        v213 = (uint16x8_t *)(v109 + 2 * v161);
        unint64_t v214 = v161 - (v160 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v215 = *v212++;
          *v213++ = vmovl_u8(v215);
          v214 += 8;
        }
        while (v214);
        if (v160 == (v160 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_153;
        }
        do
        {
LABEL_150:
          __int16 v121 = v120->u8[0];
          v120 = (int8x16_t *)((char *)v120 + 1);
          *v119++ = v121;
        }
        while (v119 != v108);
        goto LABEL_153;
      }
LABEL_29:
      uint64_t v37 = 0;
      uint64_t v38 = v36;
      if (a6) {
        goto LABEL_154;
      }
      goto LABEL_30;
    }
    unint64_t v42 = &v25[v27];
    if (v27 < 0x40)
    {
      unint64_t v43 = v248 + 20;
    }
    else
    {
      unint64_t v43 = (unint64_t)&v25[v27 & 0xFFFFFFC0];
      long long v44 = 0uLL;
      __int16 v45 = (char *)(v248 + 20);
      do
      {
        v249.val[0] = *v26;
        int8x16_t v46 = v26[1];
        v253.val[0] = v26[2];
        int8x16_t v47 = v26[3];
        v26 += 4;
        int8x16_t v48 = v47;
        v253.val[1] = 0uLL;
        v257.val[0] = v46;
        v249.val[1] = 0uLL;
        int v49 = v45;
        vst2q_s8(v49, v249);
        v49 += 32;
        v257.val[1] = 0uLL;
        vst2q_s8(v49, v257);
        uint64_t v50 = v45 + 64;
        vst2q_s8(v50, v253);
        uint64_t v51 = v45 + 96;
        vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
        v45 += 128;
      }
      while (v45 != (char *)v43);
    }
    if ((_WORD *)v43 == v42) {
      goto LABEL_135;
    }
    unint64_t v59 = v248 + 2 * v27 - v43 + 18;
    if (v59 < 0xE
      || (v43 < (unint64_t)v26->u64 + (v59 >> 1) + 1
        ? (BOOL v60 = (unint64_t)v26 >= (v59 & 0xFFFFFFFFFFFFFFFELL) + v43 + 2)
        : (BOOL v60 = 1),
          !v60))
    {
      __int16 v63 = (_WORD *)v43;
      int v64 = v26;
      goto LABEL_60;
    }
    uint64_t v61 = (v59 >> 1) + 1;
    if (v59 >= 0x3E)
    {
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFE0;
      v216 = (uint8x8_t *)&v26[1];
      v217 = (uint16x8_t *)(v43 + 32);
      unint64_t v218 = v61 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v219 = *(uint8x16_t *)v216[-2].i8;
        uint16x8_t v220 = vmovl_u8(*v216);
        uint16x8_t v221 = vmovl_high_u8(*(uint8x16_t *)v216->i8);
        v217[-2] = vmovl_u8(*(uint8x8_t *)v219.i8);
        v217[-1] = vmovl_high_u8(v219);
        uint16x8_t *v217 = v220;
        v217[1] = v221;
        v217 += 4;
        v216 += 4;
        v218 -= 32;
      }
      while (v218);
      if (v61 == v62) {
        goto LABEL_135;
      }
      if ((v61 & 0x18) == 0)
      {
        int v64 = (int8x16_t *)((char *)v26 + v62);
        __int16 v63 = (_WORD *)(v43 + 2 * v62);
        goto LABEL_60;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    __int16 v63 = (_WORD *)(v43 + 2 * (v61 & 0xFFFFFFFFFFFFFFF8));
    int v64 = (int8x16_t *)((char *)v26 + (v61 & 0xFFFFFFFFFFFFFFF8));
    v222 = (uint8x8_t *)&v26->i8[v62];
    v223 = (uint16x8_t *)(v43 + 2 * v62);
    unint64_t v224 = v62 - (v61 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v225 = *v222++;
      *v223++ = vmovl_u8(v225);
      v224 += 8;
    }
    while (v224);
    if (v61 == (v61 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_135;
    }
    do
    {
LABEL_60:
      __int16 v65 = v64->u8[0];
      int v64 = (int8x16_t *)((char *)v64 + 1);
      *v63++ = v65;
    }
    while (v63 != v42);
    goto LABEL_135;
  }
  if (!a2)
  {
LABEL_14:
    uint64_t v17 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_201;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_13:
    uint64_t v17 = 0;
    goto LABEL_201;
  }
  unint64_t result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v17 = v248;
  if (v248)
  {
    uint64_t v246 = a8;
    int v18 = (unsigned char *)(v248 + 20);
    *(_DWORD *)uint64_t v248 = 2;
    *(_DWORD *)(v248 + 4) = a2;
    *(void *)(v248 + 8) = v248 + 20;
    *(_DWORD *)(v248 + 16) = 4;
    if (!a4)
    {
      uint64_t v28 = 0;
      BOOL v29 = (unsigned char *)(v248 + 20);
      if (a5) {
        goto LABEL_64;
      }
      goto LABEL_22;
    }
    int v19 = *(int8x16_t **)(a4 + 8);
    size_t v20 = *(unsigned int *)(a4 + 4);
    if ((*(unsigned char *)(a4 + 16) & 4) != 0)
    {
      if (v20)
      {
        if (v20 == 1) {
          unsigned char *v18 = v19->i8[0];
        }
        else {
          memcpy((void *)(v248 + 20), v19, v20);
        }
      }
    }
    else
    {
      BOOL v21 = &v18[v20];
      if (v20 < 0x10)
      {
        unint64_t v22 = v248 + 20;
      }
      else
      {
        unint64_t v22 = (unint64_t)&v18[v20 & 0xFFFFFFF0];
        char v23 = (unsigned long long *)(v248 + 20);
        do
        {
          unsigned long long v24 = (unsigned __int128)vld2q_s8(v19->i8);
          v19 += 2;
          *v23++ = v24;
        }
        while (v23 != (unsigned long long *)v22);
      }
      if ((unsigned char *)v22 != v21)
      {
        size_t v52 = v248 + v20;
        unint64_t v53 = v248 + v20 - v22 + 20;
        if (v53 < 8
          || (v22 < (unint64_t)&v19[2].u64[1] + 2 * v52 + -2 * v22
            ? (BOOL v54 = (unint64_t)v19 >= v52 + 20)
            : (BOOL v54 = 1),
              !v54))
        {
          size_t v56 = (unsigned char *)v22;
          uint64_t v57 = v19;
          goto LABEL_47;
        }
        if (v53 >= 0x20)
        {
          unint64_t v55 = v53 & 0xFFFFFFFFFFFFFFE0;
          v162 = v19 + 2;
          v163 = (int8x16_t *)(v22 + 16);
          unint64_t v164 = v53 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v166 = v162[-2];
            int8x16_t v165 = v162[-1];
            int8x16_t v168 = *v162;
            int8x16_t v167 = v162[1];
            v162 += 4;
            v163[-1] = vuzp1q_s8(v166, v165);
            int8x16_t *v163 = vuzp1q_s8(v168, v167);
            v163 += 2;
            v164 -= 32;
          }
          while (v164);
          if (v53 == v55) {
            goto LABEL_63;
          }
          if ((v53 & 0x18) == 0)
          {
            uint64_t v57 = (int8x16_t *)((char *)v19 + 2 * v55);
            size_t v56 = (unsigned char *)(v22 + v55);
            do
            {
LABEL_47:
              char v58 = v57->i8[0];
              uint64_t v57 = (int8x16_t *)((char *)v57 + 2);
              *v56++ = v58;
            }
            while (v56 != v21);
            goto LABEL_63;
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        size_t v56 = (unsigned char *)(v22 + (v53 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v57 = (int8x16_t *)((char *)v19 + 2 * (v53 & 0xFFFFFFFFFFFFFFF8));
        v169 = (int16x8_t *)((char *)v19 + 2 * v55);
        v170 = (int8x8_t *)(v22 + v55);
        unint64_t v171 = v55 - (v53 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v172 = *v169++;
          *v170++ = vmovn_s16(v172);
          v171 += 8;
        }
        while (v171);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
LABEL_63:
    uint64_t v28 = *(unsigned int *)(a4 + 4);
    BOOL v29 = &v18[v28];
    if (a5)
    {
LABEL_64:
      int v66 = *(int8x16_t **)(a5 + 8);
      size_t v67 = *(unsigned int *)(a5 + 4);
      if ((*(unsigned char *)(a5 + 16) & 4) != 0)
      {
        if (v67)
        {
          if (v67 == 1) {
            unsigned char *v29 = v66->i8[0];
          }
          else {
            memcpy(v29, v66, v67);
          }
        }
      }
      else
      {
        int v68 = &v29[v67];
        if (v67 < 0x10)
        {
          unint64_t v69 = (unint64_t)v29;
        }
        else
        {
          unint64_t v69 = (unint64_t)&v29[v67 & 0xFFFFFFF0];
          int v70 = (unsigned long long *)v29;
          do
          {
            unsigned long long v71 = (unsigned __int128)vld2q_s8(v66->i8);
            v66 += 2;
            *v70++ = v71;
          }
          while (v70 != (unsigned long long *)v69);
        }
        if ((unsigned char *)v69 != v68)
        {
          size_t v72 = v28 + v248 + v67;
          unint64_t v73 = v72 - v69 + 20;
          if (v73 < 8
            || (v69 < (unint64_t)&v66[2].u64[1] + 2 * v72 + -2 * v69
              ? (BOOL v74 = (unint64_t)v66 >= v72 + 20)
              : (BOOL v74 = 1),
                !v74))
          {
            int8x16_t v76 = (unsigned char *)v69;
            int v77 = v66;
            goto LABEL_83;
          }
          if (v73 >= 0x20)
          {
            unint64_t v75 = v73 & 0xFFFFFFFFFFFFFFE0;
            v173 = v66 + 2;
            v174 = (int8x16_t *)(v69 + 16);
            unint64_t v175 = v73 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v177 = v173[-2];
              int8x16_t v176 = v173[-1];
              int8x16_t v179 = *v173;
              int8x16_t v178 = v173[1];
              v173 += 4;
              v174[-1] = vuzp1q_s8(v177, v176);
              int8x16_t *v174 = vuzp1q_s8(v179, v178);
              v174 += 2;
              v175 -= 32;
            }
            while (v175);
            if (v73 == v75) {
              goto LABEL_86;
            }
            if ((v73 & 0x18) == 0)
            {
              int v77 = (int8x16_t *)((char *)v66 + 2 * v75);
              int8x16_t v76 = (unsigned char *)(v69 + v75);
              do
              {
LABEL_83:
                char v78 = v77->i8[0];
                int v77 = (int8x16_t *)((char *)v77 + 2);
                *v76++ = v78;
              }
              while (v76 != v68);
              goto LABEL_86;
            }
          }
          else
          {
            unint64_t v75 = 0;
          }
          int8x16_t v76 = (unsigned char *)(v69 + (v73 & 0xFFFFFFFFFFFFFFF8));
          int v77 = (int8x16_t *)((char *)v66 + 2 * (v73 & 0xFFFFFFFFFFFFFFF8));
          v180 = (int16x8_t *)((char *)v66 + 2 * v75);
          v181 = (int8x8_t *)(v69 + v75);
          unint64_t v182 = v75 - (v73 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v183 = *v180++;
            *v181++ = vmovn_s16(v183);
            v182 += 8;
          }
          while (v182);
          if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_83;
          }
        }
      }
LABEL_86:
      uint64_t v30 = *(unsigned int *)(a5 + 4);
      BOOL v31 = &v29[v30];
      if (a6)
      {
LABEL_87:
        uint64_t v79 = *(int8x16_t **)(a6 + 8);
        size_t v80 = *(unsigned int *)(a6 + 4);
        if ((*(unsigned char *)(a6 + 16) & 4) != 0)
        {
          if (v80)
          {
            if (v80 == 1) {
              unsigned char *v31 = v79->i8[0];
            }
            else {
              memcpy(v31, v79, v80);
            }
          }
        }
        else
        {
          uint16x8_t v81 = &v31[v80];
          if (v80 < 0x10)
          {
            unint64_t v82 = (unint64_t)v31;
          }
          else
          {
            unint64_t v82 = (unint64_t)&v31[v80 & 0xFFFFFFF0];
            uint64_t v83 = (unsigned long long *)v31;
            do
            {
              unsigned long long v84 = (unsigned __int128)vld2q_s8(v79->i8);
              v79 += 2;
              *v83++ = v84;
            }
            while (v83 != (unsigned long long *)v82);
          }
          if ((unsigned char *)v82 != v81)
          {
            unint64_t v85 = v28 + v30 + v248 + v80 - v82 + 20;
            if (v85 < 8
              || ((size_t v86 = v30 + v28 + v248 + v80, v82 < (unint64_t)&v79[2].u64[1] + 2 * v86 + -2 * v82)
                ? (BOOL v87 = (unint64_t)v79 >= v86 + 20)
                : (BOOL v87 = 1),
                  !v87))
            {
              uint8x16_t v89 = (unsigned char *)v82;
              uint16x8_t v90 = v79;
              goto LABEL_106;
            }
            if (v85 >= 0x20)
            {
              unint64_t v88 = v85 & 0xFFFFFFFFFFFFFFE0;
              v184 = v79 + 2;
              v185 = (int8x16_t *)(v82 + 16);
              unint64_t v186 = v85 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v188 = v184[-2];
                int8x16_t v187 = v184[-1];
                int8x16_t v190 = *v184;
                int8x16_t v189 = v184[1];
                v184 += 4;
                v185[-1] = vuzp1q_s8(v188, v187);
                int8x16_t *v185 = vuzp1q_s8(v190, v189);
                v185 += 2;
                v186 -= 32;
              }
              while (v186);
              if (v85 == v88) {
                goto LABEL_109;
              }
              if ((v85 & 0x18) == 0)
              {
                uint16x8_t v90 = (int8x16_t *)((char *)v79 + 2 * v88);
                uint8x16_t v89 = (unsigned char *)(v82 + v88);
                do
                {
LABEL_106:
                  char v91 = v90->i8[0];
                  uint16x8_t v90 = (int8x16_t *)((char *)v90 + 2);
                  *v89++ = v91;
                }
                while (v89 != v81);
                goto LABEL_109;
              }
            }
            else
            {
              unint64_t v88 = 0;
            }
            uint8x16_t v89 = (unsigned char *)(v82 + (v85 & 0xFFFFFFFFFFFFFFF8));
            uint16x8_t v90 = (int8x16_t *)((char *)v79 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
            v191 = (int16x8_t *)((char *)v79 + 2 * v88);
            v192 = (int8x8_t *)(v82 + v88);
            unint64_t v193 = v88 - (v85 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v194 = *v191++;
              *v192++ = vmovn_s16(v194);
              v193 += 8;
            }
            while (v193);
            if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_106;
            }
          }
        }
LABEL_109:
        uint64_t v32 = *(unsigned int *)(a6 + 4);
        int v33 = &v31[v32];
        if (a7)
        {
LABEL_110:
          long long v92 = *(int8x16_t **)(a7 + 8);
          size_t v93 = *(unsigned int *)(a7 + 4);
          if ((*(unsigned char *)(a7 + 16) & 4) != 0)
          {
            if (v93)
            {
              if (v93 == 1) {
                *int v33 = v92->i8[0];
              }
              else {
                memcpy(v33, v92, v93);
              }
            }
            goto LABEL_132;
          }
          char v94 = &v33[v93];
          if (v93 < 0x10)
          {
            unint64_t v95 = (unint64_t)v33;
          }
          else
          {
            unint64_t v95 = (unint64_t)&v33[v93 & 0xFFFFFFF0];
            uint64_t v96 = (unsigned long long *)v33;
            do
            {
              unsigned long long v97 = (unsigned __int128)vld2q_s8(v92->i8);
              v92 += 2;
              *v96++ = v97;
            }
            while (v96 != (unsigned long long *)v95);
          }
          if ((unsigned char *)v95 == v94)
          {
LABEL_132:
            uint64_t v34 = *(unsigned int *)(a7 + 4);
            goto LABEL_133;
          }
          size_t v98 = v28 + v30 + v32 + v248 + v93;
          unint64_t v99 = v98 - v95 + 20;
          if (v99 < 8
            || ((unint64_t v100 = v32 + v30 + v28 + v248 + v93 + 20, v95 < (unint64_t)&v92[2].u64[1] + 2 * v98 + -2 * v95)
              ? (BOOL v101 = (unint64_t)v92 >= v100)
              : (BOOL v101 = 1),
                !v101))
          {
            int8x16x2_t v103 = (unsigned char *)v95;
            int v104 = v92;
            goto LABEL_129;
          }
          if (v99 >= 0x20)
          {
            unint64_t v102 = v99 & 0xFFFFFFFFFFFFFFE0;
            v195 = v92 + 2;
            v196 = (int8x16_t *)(v95 + 16);
            unint64_t v197 = v99 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v199 = v195[-2];
              int8x16_t v198 = v195[-1];
              int8x16_t v201 = *v195;
              int8x16_t v200 = v195[1];
              v195 += 4;
              v196[-1] = vuzp1q_s8(v199, v198);
              int8x16_t *v196 = vuzp1q_s8(v201, v200);
              v196 += 2;
              v197 -= 32;
            }
            while (v197);
            if (v99 == v102) {
              goto LABEL_132;
            }
            if ((v99 & 0x18) == 0)
            {
              int v104 = (int8x16_t *)((char *)v92 + 2 * v102);
              int8x16x2_t v103 = (unsigned char *)(v95 + v102);
              do
              {
LABEL_129:
                char v105 = v104->i8[0];
                int v104 = (int8x16_t *)((char *)v104 + 2);
                *v103++ = v105;
              }
              while (v103 != v94);
              goto LABEL_132;
            }
          }
          else
          {
            unint64_t v102 = 0;
          }
          int8x16x2_t v103 = (unsigned char *)(v95 + (v99 & 0xFFFFFFFFFFFFFFF8));
          int v104 = (int8x16_t *)((char *)v92 + 2 * (v99 & 0xFFFFFFFFFFFFFFF8));
          v202 = (int16x8_t *)((char *)v92 + 2 * v102);
          v203 = (int8x8_t *)(v95 + v102);
          unint64_t v204 = v102 - (v99 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v205 = *v202++;
            *v203++ = vmovn_s16(v205);
            v204 += 8;
          }
          while (v204);
          if (v99 == (v99 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_132;
          }
          goto LABEL_129;
        }
LABEL_24:
        uint64_t v34 = 0;
LABEL_133:
        unint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((int8x16_t *)&v33[v34], v246, a9, a10);
        goto LABEL_201;
      }
LABEL_23:
      uint64_t v32 = 0;
      int v33 = v31;
      if (a7) {
        goto LABEL_110;
      }
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v30 = 0;
    BOOL v31 = v29;
    if (a6) {
      goto LABEL_87;
    }
    goto LABEL_23;
  }
LABEL_201:
  void *v16 = v17;
  return result;
}

void sub_1E14163DC(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7AEA0;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    int v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    int v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7AEA0;
  int v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    *(void *)&v17[0] = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)v17, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    int v9 = *(_DWORD *)(v3 + 88);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_10:
      uint64_t v10 = *((void *)a1 + 3);
      uint64_t v11 = (atomic_uchar *)(v10 + 48);
      if (v9 == 2) {
        goto LABEL_11;
      }
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v3 + 88);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 48));
  uint64_t v10 = *((void *)a1 + 3);
  uint64_t v11 = (atomic_uchar *)(v10 + 48);
  if (v9 == 2)
  {
LABEL_11:
    char v12 = 0;
    atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12)
    {
      MEMORY[0x1E4E44220](v11);
      if (*(_DWORD *)(v10 + 88) == 2)
      {
LABEL_13:
        int v7 = *(atomic_uchar **)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v13 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
        if (v13 == 1)
        {
LABEL_14:
          (*(void (**)(_OWORD *__return_ptr, atomic_uchar *))(*(void *)v7 + 16))(v17, v7);
          (*(void (**)(unsigned __int8 *, uint64_t, _OWORD *))(*(void *)v1 + 24))(v1, v10, v17);
          return (WTF::StringImpl *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v7 + 8))(v7);
        }
LABEL_26:
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        goto LABEL_14;
      }
    }
    else if (*(_DWORD *)(v10 + 88) == 2)
    {
      goto LABEL_13;
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_26;
  }
LABEL_17:
  char v14 = 0;
  atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14)
  {
    MEMORY[0x1E4E44220](v11);
    if (*(_DWORD *)(v10 + 88) != 1) {
      goto LABEL_25;
    }
  }
  else if (*(_DWORD *)(v10 + 88) != 1)
  {
    goto LABEL_25;
  }
  long long v15 = *(_OWORD *)(v10 + 72);
  v17[0] = *(_OWORD *)(v10 + 56);
  v17[1] = v15;
  int v16 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  return (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, _OWORD *))(*(void *)v1 + 24))(v1, v10, v17);
}

void sub_1E1416890(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

void sub_1E14168C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AE78[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, long long *a2, _OWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_16;
  }
  if (v5 != 1)
  {
    unint64_t result = ((uint64_t (*)(long long *, uint64_t))off_1F3C7AE78[v5])(&v23, v4);
LABEL_16:
    *(_DWORD *)(v4 + 32) = -1;
    long long v12 = a3[1];
    *(_OWORD *)uint64_t v4 = *a3;
    *(_OWORD *)(v4 + 16) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  long long v6 = a3[1];
  long long v21 = *a3;
  long long v22 = v6;
  int v7 = (_DWORD *)a2 + 6;
  uint64_t v8 = *((unsigned int *)a2 + 6);
  if (DWORD2(v6) != -1 || v8 != -1)
  {
    BOOL v10 = DWORD2(v6) == -1;
    if (DWORD2(v6) == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = DWORD2(v6);
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      return ((uint64_t (*)(long long *, long long *, long long *))off_1F3C7AED0[v11])(&v23, &v21, a2);
    }
    else
    {
      BOOL v14 = (DWORD2(v6) - 2) < 0xFFFFFFFD || (v8 + 1) < 3;
      if (v14) {
        long long v15 = &v21;
      }
      else {
        long long v15 = a2;
      }
      if (!v14) {
        a2 = &v21;
      }
      long long v16 = a2[1];
      long long v23 = *a2;
      long long v24 = v16;
      if (v14) {
        uint64_t v17 = v7;
      }
      else {
        uint64_t v17 = (_DWORD *)&v22 + 2;
      }
      *((_DWORD *)a2 + 6) = -1;
      if (v14) {
        int v18 = (_DWORD *)&v22 + 2;
      }
      else {
        int v18 = v7;
      }
      uint64_t v19 = *((unsigned int *)v15 + 6);
      if (v19 != -1)
      {
        unint64_t result = ((uint64_t (*)(char *))off_1F3C7AEE0[v19])(&v25);
        _DWORD *v17 = v19;
      }
      _DWORD *v18 = -1;
      int v20 = DWORD2(v24);
      if (DWORD2(v24) != -1)
      {
        unint64_t result = ((uint64_t (*)(char *, long long *, long long *))off_1F3C7AEE0[DWORD2(v24)])(&v25, v15, &v23);
        _DWORD *v18 = v20;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AE78[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a2;
  unint64_t v4 = a2[1].n128_u64[0];
  unsigned __int8 v5 = a3[1].n128_u8[0];
  *a2 = *a3;
  a2[1].n128_u8[0] = v5;
  a3[1].n128_u8[0] = v4;
  *a3 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  char v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    __n128 result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 108);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 108);
    if (!v4) {
      goto LABEL_8;
    }
  }
  unsigned __int8 v5 = *(uint64_t **)(v1 + 96);
  uint64_t v6 = 40 * v4;
  do
  {
    __n128 result = *v5;
    if (*v5) {
      __n128 result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E1416CD4(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  __n128 result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  __n128 result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  long long v15 = v16;
  long long v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      __n128 result = v17;
      uint64_t v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  __n128 result = v17;
  uint64_t v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E1416E6C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E1416F98(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E14170AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    uint64_t v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        int v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              int8x16_t v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                BOOL v12 = *(NSObject **)(v2 + 32);
                int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  long long v15 = (char *)v45 + 16;
                }
                else {
                  long long v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                int v13 = v45;
                __int16 v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    int v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  long long v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    long long v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      __int16 v45 = 0;
                      uint64_t v46 = 0;
                      long long v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      __int16 v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      uint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      uint64_t v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        uint64_t v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          BOOL v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        uint64_t v28 = v45;
                      }
                      if (v28)
                      {
                        __int16 v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      uint64_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      int v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    int v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                uint64_t v35 = v49;
                int v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              BOOL v12 = *(NSObject **)(v2 + 32);
              int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          int8x16_t v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 84);
  if (v38)
  {
    uint64_t v39 = *(unsigned int ***)(a1 + 72);
    uint64_t v40 = 8 * v38;
    do
    {
      uint64_t v41 = *v39;
      void *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  unint64_t v42 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v42 && v42 != 0)
  {
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 64);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7AF18[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

void sub_1E1417674(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 72, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 64);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7AF18[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 64) = -1;
  _Unwind_Resume(a1);
}

WTF *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  size_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  BOOL v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 72) = a1 + 88;
    size_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 80) = 1;
  int v7 = *(_DWORD *)(a1 + 104);
  unsigned int v8 = *(_DWORD *)(a1 + 108);
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 96) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    int v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 113)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v90, a1);
            uint64_t v20 = v90;
            (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v90 + 16))(&buf, v90);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7AF40;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      int v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      uint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      size_t v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        uint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      uint64_t v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      uint64_t v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_120;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_33;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_33:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_34;
          }
          goto LABEL_38;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_34:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_149;
        }
        goto LABEL_39;
      }
LABEL_38:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_149;
      }
LABEL_39:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_149:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_55;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_53:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_53;
        }
        int v40 = 1;
      }
LABEL_55:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      unint64_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_149;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_59;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_59:
        unint64_t v43 = v98;
        size_t v98 = 0;
        if (!v43) {
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      unint64_t v43 = v98;
      size_t v98 = 0;
      if (!v43) {
        goto LABEL_64;
      }
LABEL_62:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_64:
        uint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }
      WTF::StringImpl::destroy(v43, v42);
      uint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_69;
      }
LABEL_67:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_69:
        __int16 v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_78;
        }
        goto LABEL_72;
      }
      WTF::StringImpl::destroy(v44, v42);
      __int16 v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_78;
      }
LABEL_72:
      WTF::String::utf8();
      if (v95) {
        int8x16_t v48 = (char *)v95 + 16;
      }
      else {
        int8x16_t v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      unint64_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_117;
          }
          goto LABEL_79;
        }
        --*(_DWORD *)v46;
      }
LABEL_78:
      if (!*v29) {
        goto LABEL_117;
      }
LABEL_79:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_117;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          unint64_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            unint64_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            unint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            uint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              __int16 v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                int v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              uint64_t v61 = v95;
            }
            if (v61)
            {
              unint64_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            __int16 v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_105;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            int v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_110;
            }
LABEL_108:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_110:
              size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_113;
              }
              goto LABEL_85;
            }
            WTF::StringImpl::destroy(v66, v47);
            size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_113:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_85:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_115;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_105:
          int v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_110;
          }
          goto LABEL_108;
        }
LABEL_115:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_117:
      unint64_t v69 = v100;
      unint64_t v100 = 0;
      if (!v69) {
        goto LABEL_120;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_120:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 64);
        uint64_t v72 = *(unsigned int *)(a1 + 64);
        if (v71 != -1) {
          goto LABEL_121;
        }
        goto LABEL_124;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 64);
      uint64_t v72 = *(unsigned int *)(a1 + 64);
      if (v71 != -1)
      {
LABEL_121:
        if (v72 != -1) {
          goto LABEL_125;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7AF18[v71])(&buf, v70);
        *(_DWORD *)(v24 + 64) = -1;
        goto LABEL_126;
      }
LABEL_124:
      if (v72 != -1)
      {
LABEL_125:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7AF58[v72])(&buf);
      }
LABEL_126:
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (unint64_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_129:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_130;
          }
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_129;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_130:
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_24:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    char v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      size_t v80 = *(unsigned int **)v78;
      *(void *)char v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      char v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    size_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E14182EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  char v14 = 0;
  atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v15);
  _Unwind_Resume(a1);
}

void sub_1E1418360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

BOOL WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  BOOL v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](a1 + 48);
    int v5 = *(_DWORD *)(a1 + 64);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 64);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v5 == 2;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 64) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 64) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E1418830(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  int v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 64) == 1)
    {
LABEL_3:
      *int v3 = *(void *)(a2 + 56);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 64) == 1)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E1418908(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  char v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      int v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  int v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    char v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  char v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    unint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  unint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)__int16 v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          uint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          int v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              _WORD *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          unint64_t v43 = v73;
          unint64_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            uint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          uint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            __int16 v45 = v69;
            unint64_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          __int16 v45 = v69;
          unint64_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            size_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          size_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            __int16 v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          __int16 v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            int8x16_t v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          int8x16_t v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        unint64_t v43 = v73;
        unint64_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  uint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E14190F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E1419440()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E141941CLL);
  }
  JUMPOUT(0x1E1419380);
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7AF40;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    int v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    int v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7AF40;
  int v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v15 = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)&v15, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v6 = a1;
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    int v9 = *(_DWORD *)(v3 + 64);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_10:
      uint64_t v10 = *((void *)v6 + 3);
      if (v9 == 2) {
        goto LABEL_11;
      }
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v3 + 64);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 48));
  uint64_t v10 = *((void *)v6 + 3);
  if (v9 == 2)
  {
LABEL_11:
    char v11 = 0;
    int v7 = (atomic_uchar *)(v10 + 48);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 48);
      if (*(_DWORD *)(v10 + 64) == 2)
      {
LABEL_13:
        int v6 = *(WTF::NativePromiseBase **)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 == 1)
        {
LABEL_14:
          (*(void (**)(uint64_t *__return_ptr, WTF::NativePromiseBase *))(*(void *)v6 + 16))(&v15, v6);
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v10, &v15);
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v6 + 8))(v6);
        }
LABEL_26:
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        goto LABEL_14;
      }
    }
    else if (*(_DWORD *)(v10 + 64) == 2)
    {
      goto LABEL_13;
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_26;
  }
LABEL_17:
  char v13 = 0;
  int v6 = (WTF::NativePromiseBase *)(v10 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13)
  {
    MEMORY[0x1E4E44220](v10 + 48);
    if (*(_DWORD *)(v10 + 64) != 1) {
      goto LABEL_25;
    }
  }
  else if (*(_DWORD *)(v10 + 64) != 1)
  {
    goto LABEL_25;
  }
  uint64_t v15 = *(void *)(v10 + 56);
  int v14 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  }
  return (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v10, &v15);
}

void sub_1E14198DC(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E141992C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AF18[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    unint64_t result = ((uint64_t (*)(unint64_t *, uint64_t))off_1F3C7AF18[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(void *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  unint64_t v20 = *a3;
  int v6 = (_DWORD *)a2 + 1;
  uint64_t v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || v7 != -1)
  {
    BOOL v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = HIDWORD(v20);
    }
    if (v7 != -1) {
      BOOL v9 = v10 == v7;
    }
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1F3C7AF70[v10])(&v21, &v20, a2);
    }
    else
    {
      BOOL v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      BOOL v13 = !v12;
      if (v12) {
        int v14 = &v20;
      }
      else {
        int v14 = a2;
      }
      if (!v12) {
        a2 = &v20;
      }
      unint64_t v15 = *a2;
      unint64_t v21 = *a2;
      if (v13) {
        uint64_t v16 = (_DWORD *)&v20 + 1;
      }
      else {
        uint64_t v16 = v6;
      }
      *((_DWORD *)a2 + 1) = -1;
      if (v13) {
        int v17 = v6;
      }
      else {
        int v17 = (_DWORD *)&v20 + 1;
      }
      uint64_t v18 = *((unsigned int *)v14 + 1);
      unint64_t v19 = HIDWORD(v15);
      if (v18 != -1)
      {
        unint64_t result = ((uint64_t (*)(char *))off_1F3C7AF80[v18])(&v22);
        _DWORD *v16 = v18;
      }
      _DWORD *v17 = -1;
      if (v19 != -1)
      {
        unint64_t result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1F3C7AF80[v19])(&v22, v14, &v21);
        _DWORD *v17 = v19;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AF18[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  char v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    unint64_t result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 132);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 132);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(uint64_t **)(v1 + 120);
  uint64_t v6 = 40 * v4;
  do
  {
    unint64_t result = *v5;
    if (*v5) {
      unint64_t result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E1419D00(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  unint64_t result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  unint64_t v15 = v16;
  uint64_t v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      unint64_t result = v17;
      int v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  unint64_t result = v17;
  int v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E1419E98(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E1419FC4(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E141A0D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AFD0[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = a2[3];
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    char v5 = (WTF::StringImpl **)(*(void *)a2 + 16);
    do
    {
      int v6 = *v5;
      uint64_t *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, (StringImpl *)a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  uint64_t result = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    char v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        int v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              int8x16_t v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                BOOL v12 = *(NSObject **)(v2 + 32);
                BOOL v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  unint64_t v15 = (char *)v45 + 16;
                }
                else {
                  unint64_t v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                BOOL v13 = v45;
                __int16 v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    BOOL v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    unint64_t v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      __int16 v45 = 0;
                      uint64_t v46 = 0;
                      uint64_t v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      __int16 v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      uint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      uint64_t v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        uint64_t v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          int v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        uint64_t v28 = v45;
                      }
                      if (v28)
                      {
                        __int16 v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      uint64_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      int v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    int v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                int v35 = v49;
                int v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              BOOL v12 = *(NSObject **)(v2 + 32);
              BOOL v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          int8x16_t v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 120, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 108);
  if (v38)
  {
    uint64_t v39 = *(unsigned int ***)(a1 + 96);
    uint64_t v40 = 8 * v38;
    do
    {
      unsigned int v41 = *v39;
      void *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  unint64_t v42 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v42 && v42 != 0)
  {
    *(void *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 88);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7AFB8[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

void sub_1E141A798(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 120, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 88);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7AFB8[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 88) = -1;
  _Unwind_Resume(a1);
}

WTF *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  size_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 108);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 96) = a1 + 112;
    size_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 104);
    LODWORD(v6) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 104) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 104) = 1;
  int v7 = *(_DWORD *)(a1 + 128);
  unsigned int v8 = *(_DWORD *)(a1 + 132);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 120) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 128) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    int v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 137)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v90, a1);
            uint64_t v20 = v90;
            (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v90 + 16))(&buf, v90);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (v103 != -1) {
              ((void (*)(void *, long long *))off_1F3C7AFD0[v103])(v89, &buf);
            }
            LODWORD(v103) = -1;
            (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, (unsigned int *)a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (v103 != -1) {
              ((void (*)(unsigned int **, long long *))off_1F3C7AFD0[v103])(&v90, &buf);
            }
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7B000;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      int v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      uint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      size_t v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        uint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      uint64_t v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      uint64_t v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_123;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_36;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_36:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_37;
          }
          goto LABEL_41;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_37:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_152;
        }
        goto LABEL_42;
      }
LABEL_41:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_152;
      }
LABEL_42:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_152:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_58;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_56:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_56;
        }
        int v40 = 1;
      }
LABEL_58:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      unint64_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_152;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_62;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_62:
        unint64_t v43 = v98;
        size_t v98 = 0;
        if (!v43) {
          goto LABEL_67;
        }
        goto LABEL_65;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      unint64_t v43 = v98;
      size_t v98 = 0;
      if (!v43) {
        goto LABEL_67;
      }
LABEL_65:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_67:
        uint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_72;
        }
        goto LABEL_70;
      }
      WTF::StringImpl::destroy(v43, v42);
      uint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_72;
      }
LABEL_70:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_72:
        __int16 v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_81;
        }
        goto LABEL_75;
      }
      WTF::StringImpl::destroy(v44, v42);
      __int16 v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_81;
      }
LABEL_75:
      WTF::String::utf8();
      if (v95) {
        int8x16_t v48 = (char *)v95 + 16;
      }
      else {
        int8x16_t v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      unint64_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_120;
          }
          goto LABEL_82;
        }
        --*(_DWORD *)v46;
      }
LABEL_81:
      if (!*v29) {
        goto LABEL_120;
      }
LABEL_82:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_120;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          uint64_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            unint64_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            unint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            uint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              __int16 v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                int v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              uint64_t v61 = v95;
            }
            if (v61)
            {
              unint64_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            __int16 v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_108;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            int v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_113;
            }
LABEL_111:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_113:
              size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_116;
              }
              goto LABEL_88;
            }
            WTF::StringImpl::destroy(v66, v47);
            size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_116:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_88:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_118;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_108:
          int v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_113;
          }
          goto LABEL_111;
        }
LABEL_118:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_120:
      unint64_t v69 = v100;
      unint64_t v100 = 0;
      if (!v69) {
        goto LABEL_123;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_123:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 88);
        uint64_t v72 = *(unsigned int *)(a1 + 88);
        if (v71 != -1) {
          goto LABEL_124;
        }
        goto LABEL_127;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 88);
      uint64_t v72 = *(unsigned int *)(a1 + 88);
      if (v71 != -1)
      {
LABEL_124:
        if (v72 != -1) {
          goto LABEL_128;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7AFB8[v71])(&buf, v70);
        *(_DWORD *)(v24 + 88) = -1;
        goto LABEL_129;
      }
LABEL_127:
      if (v72 != -1)
      {
LABEL_128:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7B018[v72])(&buf);
      }
LABEL_129:
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (unint64_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_132:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_133;
          }
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_132;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_133:
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_27:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    char v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      size_t v80 = *(unsigned int **)v78;
      *(void *)char v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      char v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    size_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E141B458(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v32 = *(unsigned int *)(v30 - 136);
  if (v32 != -1) {
    (*(void (**)(char *, uint64_t))(v29 + 8 * v32))(&a28, v30 - 160);
  }
  char v33 = 0;
  atomic_compare_exchange_strong_explicit(*v28, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v34);
  _Unwind_Resume(a1);
}

void sub_1E141B51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 88) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 88) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E141B95C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 12);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a2 + 48, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (!v4)
  {
    if (a2[22] == 1) {
      goto LABEL_3;
    }
LABEL_8:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return WTF::Lock::unlockSlow(v5);
  }
  unint64_t result = MEMORY[0x1E4E44220](a2 + 12);
  if (a2[22] != 1) {
    goto LABEL_8;
  }
LABEL_3:
  *(unsigned char *)uint64_t v3 = 0;
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v6 = a2[20];
  if (v6 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, unsigned int *))off_1F3C7AFE0[v6])(v8, v3, a2 + 14);
    *(_DWORD *)(v3 + 24) = v6;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    return WTF::Lock::unlockSlow(v5);
  }
  return result;
}

void sub_1E141BA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v14 + 24);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7AFD0[v16])(&a13, v14);
  }
  *(_DWORD *)(v14 + 24) = -1;
  int v17 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  char v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      int v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  int v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    uint64_t v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  uint64_t v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    unint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  unint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)__int16 v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          uint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          char v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              _WORD *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          unint64_t v43 = v73;
          unint64_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            uint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          uint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            __int16 v45 = v69;
            unint64_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          __int16 v45 = v69;
          unint64_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            size_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          size_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            __int16 v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          __int16 v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            int8x16_t v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          int8x16_t v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        unint64_t v43 = v73;
        unint64_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  uint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E141C27C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E141C5CC()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E141C5A8);
  }
  JUMPOUT(0x1E141C50CLL);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(void *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7B000;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7B000;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    v13[0] = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)v13, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    uint64_t v9 = *(unsigned int *)(v3 + 88);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_11:
      uint64_t v10 = *((void *)a1 + 3);
      if (v9 == 2) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 88);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_11;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  uint64_t v10 = *((void *)a1 + 3);
  if (v9 == 2)
  {
LABEL_12:
    char v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 48);
      if (*(_DWORD *)(v10 + 88) == 2)
      {
LABEL_14:
        uint64_t v9 = *(void *)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 == 1)
        {
LABEL_15:
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v13, v9);
          (*(void (**)(unsigned __int8 *, uint64_t, void *))(*(void *)v1 + 24))(v1, v10, v13);
          if (v14 != -1) {
            ((void (*)(char *, void *))off_1F3C7AFD0[v14])(&v15, v13);
          }
          int v14 = -1;
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
LABEL_24:
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        goto LABEL_15;
      }
    }
    else if (*(_DWORD *)(v10 + 88) == 2)
    {
      goto LABEL_14;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_24;
  }
LABEL_20:
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v13, (unsigned int *)v10);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, void *))(*(void *)v1 + 24))(v1, v10, v13);
  if (v14 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, void *))off_1F3C7AFD0[v14])(&v15, v13);
  }
  return result;
}

void sub_1E141CA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1) {
    ((void (*)(char *, char *))off_1F3C7AFD0[a13])(&a18, &a10);
  }
  a13 = -1;
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void sub_1E141CB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  int v20 = 1;
  atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AFB8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = (unsigned char *)a2;
      v19[0] = 0;
      int v20 = -1;
      uint64_t v7 = *(unsigned int *)(a3 + 24);
      if (v7 == -1)
      {
        int v8 = *(_DWORD *)(a2 + 24);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1) {
            return ((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C7AFD0[v20])(v21, v19);
          }
          return result;
        }
      }
      else
      {
        unint64_t result = ((uint64_t (*)(char *, unsigned char *, uint64_t))off_1F3C7AFE0[v7])(&v24, v19, a3);
        int v20 = v7;
        int v8 = *((_DWORD *)v6 + 6);
        if (v8 != -1 && v7 == v8)
        {
          unint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, unsigned char *))off_1F3C7B030[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if (v7 != 1)
        {
          int v14 = v19;
          v21[0] = 0;
          int v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 6) = -1;
            uint64_t v16 = *((unsigned int *)v14 + 6);
            if (v16 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B040[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 6) = v16;
              uint64_t v17 = *((unsigned int *)v14 + 6);
              if (v17 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7AFD0[v17])(&v24, v14);
              }
            }
            *((_DWORD *)v14 + 6) = -1;
            int v18 = v22;
            if (v22 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B040[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 6) = v18;
              if (v22 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7AFD0[v22])(&v24, v21);
              }
            }
            goto LABEL_42;
          }
LABEL_34:
          unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7AFE0[v8])(&v23, v21, v6);
          int v22 = v8;
          uint64_t v15 = *((unsigned int *)v6 + 6);
          if (v15 != -1) {
            unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7AFD0[v15])(&v24, v6);
          }
          goto LABEL_36;
        }
      }
      uint64_t v10 = v19;
      if (v8 == 1) {
        int v11 = 1;
      }
      else {
        int v11 = v7;
      }
      if (v8 == 1) {
        int v12 = v19;
      }
      else {
        int v12 = v6;
      }
      if (v8 == 1) {
        uint64_t v10 = v6;
      }
      BOOL v13 = v8 == -1;
      if (v8 == -1) {
        int v8 = -1;
      }
      else {
        int v8 = v11;
      }
      if (v13) {
        int v14 = v19;
      }
      else {
        int v14 = v12;
      }
      if (!v13) {
        uint64_t v6 = v10;
      }
      v21[0] = 0;
      int v22 = -1;
      if (v8 == -1) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))off_1F3C7AFB8[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  uint64_t v9 = *(unsigned int *)(a3 + 24);
  if (v9 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7AFE0[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 24) = v9;
  }
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

void sub_1E141CE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a18 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7AFD0[a18])(v18 - 33, &a15);
  }
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7AFD0[a13])(v18 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E141CEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v16 = *(unsigned int *)(v14 + 24);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7AFD0[v16])(&a14, v14);
  }
  *(_DWORD *)(v14 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7AFB8[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  int v5 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = a2[2];
  uint64_t v8 = a3[2];
  int v9 = *((_DWORD *)a3 + 2);
  uint64_t v10 = *a3;
  *a3 = 0;
  *a2 = v10;
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v9;
  int v11 = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v11;
  a2[2] = v8;
  uint64_t v12 = *((unsigned int *)a3 + 3);
  if (v12)
  {
    uint64_t v13 = 24 * v12;
    uint64_t v14 = (WTF::StringImpl **)(*a3 + 16);
    do
    {
      uint64_t v15 = *v14;
      unsigned char *v14 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (StringImpl *)a2);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      v14 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  unint64_t result = (WTF *)*a3;
  if (*a3)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    unint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  *a3 = v4;
  *((_DWORD *)a3 + 2) = v6;
  *((_DWORD *)a3 + 3) = v5;
  a3[2] = v7;
  return result;
}

void sub_1E141D0C4(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (v3)
  {
    uint64_t v5 = 24 * v3;
    int v6 = (WTF::StringImpl **)((char *)v2 + 16);
    do
    {
      uint64_t v7 = *v6;
      unsigned char *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(void *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    unint64_t result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 124);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 124);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(uint64_t **)(v1 + 112);
  uint64_t v6 = 40 * v4;
  do
  {
    unint64_t result = *v5;
    if (*v5) {
      unint64_t result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E141D22C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  unint64_t result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  uint64_t v15 = v16;
  uint64_t v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      unint64_t result = v17;
      uint64_t v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  unint64_t result = v17;
  uint64_t v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E141D3C4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E141D4F0(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E141D604(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B090[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 3);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = 592 * v3;
    do
    {
      uint64_t v7 = v5 + v4;
      uint64_t v8 = *(unsigned int *)(v5 + v4 + 576);
      if (v8 != -1) {
        ((void (*)(char *, uint64_t))off_1F3C7B0A0[v8])(&v25, v7 + 568);
      }
      *(_DWORD *)(v7 + 576) = -1;
      if (*(unsigned char *)(v7 + 560))
      {
        int v9 = *(const void **)(v5 + v4 + 552);
        *(void *)(v5 + v4 + 552) = 0;
        if (v9) {
          CFRelease(v9);
        }
      }
      char v10 = (void *)(v5 + v4);
      if (*(unsigned char *)(v5 + v4 + 536))
      {
        int v11 = (_DWORD *)v10[66];
        v10[66] = 0;
        if (v11) {
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v11, (StringImpl *)a2);
        }
        BOOL v12 = *(WTF::StringImpl **)(v5 + v4 + 496);
        *(void *)(v5 + v4 + 496) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, (StringImpl *)a2);
            WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v10 + 47), v23);
            uint64_t v14 = (WTF::StringImpl *)v10[46];
            v10[46] = 0;
            if (!v14) {
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          *(_DWORD *)v12 -= 2;
        }
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v10 + 47), (StringImpl *)a2);
      uint64_t v14 = (WTF::StringImpl *)v10[46];
      v10[46] = 0;
      if (!v14) {
        goto LABEL_20;
      }
LABEL_17:
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
LABEL_20:
      uint64_t v15 = v5 + v4;
      uint64_t v16 = *(WTF::StringImpl **)(v5 + v4 + 360);
      *(void *)(v5 + v4 + 360) = 0;
      if (!v16) {
        goto LABEL_23;
      }
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
LABEL_23:
        uint64_t v17 = *(WTF::StringImpl **)(v15 + 344);
        *(void *)(v15 + 344) = 0;
        if (!v17) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      WTF::StringImpl::destroy(v16, v13);
      uint64_t v17 = *(WTF::StringImpl **)(v15 + 344);
      *(void *)(v15 + 344) = 0;
      if (!v17) {
        goto LABEL_28;
      }
LABEL_26:
      if (*(_DWORD *)v17 != 2)
      {
        *(_DWORD *)v17 -= 2;
LABEL_28:
        uint64_t v18 = *(WTF::StringImpl **)(v5 + v4 + 328);
        *(void *)(v5 + v4 + 328) = 0;
        if (!v18) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      WTF::StringImpl::destroy(v17, v13);
      uint64_t v18 = *(WTF::StringImpl **)(v5 + v4 + 328);
      *(void *)(v5 + v4 + 328) = 0;
      if (!v18) {
        goto LABEL_33;
      }
LABEL_31:
      if (*(_DWORD *)v18 != 2)
      {
        *(_DWORD *)v18 -= 2;
LABEL_33:
        int v19 = *(WTF::StringImpl **)(v7 + 288);
        *(void *)(v7 + 288) = 0;
        if (!v19) {
          goto LABEL_38;
        }
        goto LABEL_36;
      }
      WTF::StringImpl::destroy(v18, v13);
      int v19 = *(WTF::StringImpl **)(v7 + 288);
      *(void *)(v7 + 288) = 0;
      if (!v19) {
        goto LABEL_38;
      }
LABEL_36:
      if (*(_DWORD *)v19 != 2)
      {
        *(_DWORD *)v19 -= 2;
LABEL_38:
        uint64_t v20 = v5 + v4;
        int v21 = *(WTF::StringImpl **)(v5 + v4 + 272);
        *(void *)(v5 + v4 + 272) = 0;
        if (!v21) {
          goto LABEL_43;
        }
        goto LABEL_41;
      }
      WTF::StringImpl::destroy(v19, v13);
      uint64_t v20 = v5 + v4;
      int v21 = *(WTF::StringImpl **)(v5 + v4 + 272);
      *(void *)(v5 + v4 + 272) = 0;
      if (!v21) {
        goto LABEL_43;
      }
LABEL_41:
      if (*(_DWORD *)v21 != 2)
      {
        *(_DWORD *)v21 -= 2;
LABEL_43:
        int v22 = *(WTF::StringImpl **)(v20 + 232);
        *(void *)(v20 + 232) = 0;
        if (v22) {
          goto LABEL_46;
        }
        goto LABEL_4;
      }
      WTF::StringImpl::destroy(v21, v13);
      int v22 = *(WTF::StringImpl **)(v20 + 232);
      *(void *)(v20 + 232) = 0;
      if (v22)
      {
LABEL_46:
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v13);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
LABEL_4:
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v5 + v4 + 24), v13);
      v4 += 592;
    }
    while (v6 != v4);
  }
  uint64_t result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
    {
      MEMORY[0x1E4E48940]();
      JUMPOUT(0x1E4E48950);
    }
    --*result;
  }
  return result;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a2, a2);
}

unint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    uint64_t v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        int v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              int8x16_t v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                BOOL v12 = *(NSObject **)(v2 + 32);
                uint64_t v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  uint64_t v15 = (char *)v45 + 16;
                }
                else {
                  uint64_t v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                uint64_t v13 = v45;
                __int16 v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    uint64_t v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    int v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      __int16 v45 = 0;
                      uint64_t v46 = 0;
                      char v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      __int16 v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      uint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      uint64_t v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        uint64_t v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          int v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        uint64_t v28 = v45;
                      }
                      if (v28)
                      {
                        __int16 v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      uint64_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      char v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    char v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                int v35 = v49;
                int v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              BOOL v12 = *(NSObject **)(v2 + 32);
              uint64_t v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          int8x16_t v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 100);
  if (v38)
  {
    uint64_t v39 = *(unsigned int ***)(a1 + 88);
    uint64_t v40 = 8 * v38;
    do
    {
      unsigned int v41 = *v39;
      void *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  unint64_t v42 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v42 && v42 != 0)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 80);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7B078[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1E141DF20(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 112, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 88, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 80);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7B078[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 80) = -1;
  _Unwind_Resume(a1);
}

WTF *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  size_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 100);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 88) = a1 + 104;
    size_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 96);
    LODWORD(v6) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 96) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 96) = 1;
  int v7 = *(_DWORD *)(a1 + 120);
  unsigned int v8 = *(_DWORD *)(a1 + 124);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 112) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    int v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 129)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v90, a1);
            uint64_t v20 = v90;
            (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v90 + 16))(&buf, v90);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (v102 != -1) {
              ((void (*)(void *, long long *))off_1F3C7B090[v102])(v89, &buf);
            }
            LODWORD(v102) = -1;
            (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, (unsigned int *)a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (v102 != -1) {
              ((void (*)(unsigned int **, long long *))off_1F3C7B090[v102])(&v90, &buf);
            }
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7B0D8;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      int v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      uint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      size_t v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        uint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      uint64_t v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      uint64_t v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_123;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_36;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_36:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_37;
          }
          goto LABEL_41;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_37:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_152;
        }
        goto LABEL_42;
      }
LABEL_41:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_152;
      }
LABEL_42:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_152:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_58;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_56:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_56;
        }
        int v40 = 1;
      }
LABEL_58:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      unint64_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_152;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_62;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_62:
        unint64_t v43 = v98;
        size_t v98 = 0;
        if (!v43) {
          goto LABEL_67;
        }
        goto LABEL_65;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      unint64_t v43 = v98;
      size_t v98 = 0;
      if (!v43) {
        goto LABEL_67;
      }
LABEL_65:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_67:
        uint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_72;
        }
        goto LABEL_70;
      }
      WTF::StringImpl::destroy(v43, v42);
      uint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_72;
      }
LABEL_70:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_72:
        __int16 v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_81;
        }
        goto LABEL_75;
      }
      WTF::StringImpl::destroy(v44, v42);
      __int16 v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_81;
      }
LABEL_75:
      WTF::String::utf8();
      if (v95) {
        int8x16_t v48 = (char *)v95 + 16;
      }
      else {
        int8x16_t v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      unint64_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_120;
          }
          goto LABEL_82;
        }
        --*(_DWORD *)v46;
      }
LABEL_81:
      if (!*v29) {
        goto LABEL_120;
      }
LABEL_82:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_120;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          uint64_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            unint64_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            unint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            uint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              __int16 v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                int v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              uint64_t v61 = v95;
            }
            if (v61)
            {
              unint64_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            __int16 v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_108;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            int v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_113;
            }
LABEL_111:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_113:
              size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_116;
              }
              goto LABEL_88;
            }
            WTF::StringImpl::destroy(v66, v47);
            size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_116:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_88:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_118;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_108:
          int v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_113;
          }
          goto LABEL_111;
        }
LABEL_118:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_120:
      unint64_t v69 = v100;
      unint64_t v100 = 0;
      if (!v69) {
        goto LABEL_123;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_123:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 80);
        uint64_t v72 = *(unsigned int *)(a1 + 80);
        if (v71 != -1) {
          goto LABEL_124;
        }
        goto LABEL_127;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 80);
      uint64_t v72 = *(unsigned int *)(a1 + 80);
      if (v71 != -1)
      {
LABEL_124:
        if (v72 != -1) {
          goto LABEL_128;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7B078[v71])(&buf, v70);
        *(_DWORD *)(v24 + 80) = -1;
        goto LABEL_129;
      }
LABEL_127:
      if (v72 != -1)
      {
LABEL_128:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7B0F0[v72])(&buf);
      }
LABEL_129:
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (unint64_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_132:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_133;
          }
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_132;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_133:
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_27:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    char v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      size_t v80 = *(unsigned int **)v78;
      *(void *)char v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      char v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    size_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E141EBE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v32 = *(unsigned int *)(v30 - 144);
  if (v32 != -1) {
    (*(void (**)(char *, uint64_t))(v29 + 8 * v32))(&a28, v30 - 160);
  }
  char v33 = 0;
  atomic_compare_exchange_strong_explicit(*v28, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v34);
  _Unwind_Resume(a1);
}

void sub_1E141ECA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

BOOL WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  BOOL v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](a1 + 48);
    int v5 = *(_DWORD *)(a1 + 80);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 80);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v5 == 2;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 80) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 80) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E141F174(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 12);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a2 + 48, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (!v4)
  {
    if (a2[20] == 1) {
      goto LABEL_3;
    }
LABEL_8:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return WTF::Lock::unlockSlow(v5);
  }
  unint64_t result = MEMORY[0x1E4E44220](a2 + 12);
  if (a2[20] != 1) {
    goto LABEL_8;
  }
LABEL_3:
  *(unsigned char *)uint64_t v3 = 0;
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v6 = a2[18];
  if (v6 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, unsigned int *))off_1F3C7B0B8[v6])(v8, v3, a2 + 14);
    *(_DWORD *)(v3 + 16) = v6;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    return WTF::Lock::unlockSlow(v5);
  }
  return result;
}

void sub_1E141F278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v14 + 16);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7B090[v16])(&a13, v14);
  }
  *(_DWORD *)(v14 + 16) = -1;
  int v17 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  char v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      int v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  int v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    uint64_t v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  uint64_t v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    unint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  unint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)__int16 v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          uint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          char v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              _WORD *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          unint64_t v43 = v73;
          unint64_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            uint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          uint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            __int16 v45 = v69;
            unint64_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          __int16 v45 = v69;
          unint64_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            size_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          size_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            __int16 v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          __int16 v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            int8x16_t v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          int8x16_t v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        unint64_t v43 = v73;
        unint64_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  uint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E141FA94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E141FDE4()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E141FDC0);
  }
  JUMPOUT(0x1E141FD24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7B0D8;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7B0D8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    v13[0] = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)v13, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    uint64_t v9 = *(unsigned int *)(v3 + 80);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_11:
      uint64_t v10 = *((void *)a1 + 3);
      if (v9 == 2) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 80);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_11;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  uint64_t v10 = *((void *)a1 + 3);
  if (v9 == 2)
  {
LABEL_12:
    char v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 48);
      if (*(_DWORD *)(v10 + 80) == 2)
      {
LABEL_14:
        uint64_t v9 = *(void *)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 == 1)
        {
LABEL_15:
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v13, v9);
          (*(void (**)(unsigned __int8 *, uint64_t, void *))(*(void *)v1 + 24))(v1, v10, v13);
          if (v14 != -1) {
            ((void (*)(char *, void *))off_1F3C7B090[v14])(&v15, v13);
          }
          int v14 = -1;
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
LABEL_24:
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        goto LABEL_15;
      }
    }
    else if (*(_DWORD *)(v10 + 80) == 2)
    {
      goto LABEL_14;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_24;
  }
LABEL_20:
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v13, (unsigned int *)v10);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, void *))(*(void *)v1 + 24))(v1, v10, v13);
  if (v14 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, void *))off_1F3C7B090[v14])(&v15, v13);
  }
  return result;
}

void sub_1E14202AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  if (a11 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C7B090[a11])(&a16, &a9);
  }
  a11 = -1;
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void sub_1E1420314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B078[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = (unsigned char *)a2;
      v19[0] = 0;
      int v20 = -1;
      uint64_t v7 = *(unsigned int *)(a3 + 16);
      if (v7 == -1)
      {
        int v8 = *(_DWORD *)(a2 + 16);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1) {
            return ((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C7B090[v20])(v21, v19);
          }
          return result;
        }
      }
      else
      {
        unint64_t result = ((uint64_t (*)(char *, unsigned char *, uint64_t))off_1F3C7B0B8[v7])(&v24, v19, a3);
        int v20 = v7;
        int v8 = *((_DWORD *)v6 + 4);
        if (v8 != -1 && v7 == v8)
        {
          unint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, unsigned char *))off_1F3C7B108[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if (v7 != 1)
        {
          int v14 = v19;
          v21[0] = 0;
          int v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 4) = -1;
            uint64_t v16 = *((unsigned int *)v14 + 4);
            if (v16 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B118[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 4) = v16;
              uint64_t v17 = *((unsigned int *)v14 + 4);
              if (v17 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B090[v17])(&v24, v14);
              }
            }
            *((_DWORD *)v14 + 4) = -1;
            int v18 = v22;
            if (v22 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B118[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 4) = v18;
              if (v22 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B090[v22])(&v24, v21);
              }
            }
            goto LABEL_42;
          }
LABEL_34:
          unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B0B8[v8])(&v23, v21, v6);
          int v22 = v8;
          uint64_t v15 = *((unsigned int *)v6 + 4);
          if (v15 != -1) {
            unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B090[v15])(&v24, v6);
          }
          goto LABEL_36;
        }
      }
      uint64_t v10 = v19;
      if (v8 == 1) {
        int v11 = 1;
      }
      else {
        int v11 = v7;
      }
      if (v8 == 1) {
        int v12 = v19;
      }
      else {
        int v12 = v6;
      }
      if (v8 == 1) {
        uint64_t v10 = v6;
      }
      BOOL v13 = v8 == -1;
      if (v8 == -1) {
        int v8 = -1;
      }
      else {
        int v8 = v11;
      }
      if (v13) {
        int v14 = v19;
      }
      else {
        int v14 = v12;
      }
      if (!v13) {
        uint64_t v6 = v10;
      }
      v21[0] = 0;
      int v22 = -1;
      if (v8 == -1) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))off_1F3C7B078[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if (v9 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7B0B8[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 16) = v9;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

void sub_1E1420678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7B090[a16])(v16 - 33, &a14);
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7B090[a12])(v16 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14206FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7B090[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B078[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, unsigned char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v5 = 0;
  v66[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v6 = (WTF::Lock *)(a1 + 48);
  uint64_t v54 = v6;
  char v55 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    uint64_t v6 = (WTF::Lock *)MEMORY[0x1E4E44220]();
  }
  uint64_t v7 = WTF::NativePromiseBase::logChannel(v6);
  if (*(unsigned char *)v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 4u;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
LABEL_98:
    char v48 = *a2;
    uint64_t v49 = *(unsigned int *)(a1 + 80);
    if (v49 == -1) {
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v60, a3);
  WTF::String::String((WTF::String *)&v59, " rejecting ");
  unint64_t result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a1);
  uint64_t v10 = (WTF::StringImpl *)v58;
  if (v60)
  {
    int v11 = *((_DWORD *)v60 + 1);
    if (v59) {
      goto LABEL_10;
    }
  }
  else
  {
    int v11 = 0;
    if (v59)
    {
LABEL_10:
      int v12 = *((_DWORD *)v59 + 1);
      if (v58) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  int v12 = 0;
  if (v58)
  {
LABEL_11:
    int v13 = *(_DWORD *)(v58 + 4);
    if ((v13 | v12) < 0) {
      goto LABEL_108;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v13 = 0;
  if (v12 < 0)
  {
LABEL_108:
    __break(0xC471u);
    return result;
  }
LABEL_16:
  BOOL v14 = __OFADD__(v12, v13);
  int v15 = v12 + v13;
  char v16 = v14;
  if (v11 < 0) {
    goto LABEL_108;
  }
  if (v16) {
    goto LABEL_108;
  }
  unsigned int v17 = v11 + v15;
  if (__OFADD__(v11, v15)) {
    goto LABEL_108;
  }
  if (v60 && (*((unsigned char *)v60 + 16) & 4) == 0)
  {
    int v18 = 0;
    goto LABEL_32;
  }
  if (!v59)
  {
    if (!v58)
    {
      int v18 = 1;
      goto LABEL_32;
    }
LABEL_30:
    int v18 = (*(unsigned __int8 *)(v58 + 16) >> 2) & 1;
    goto LABEL_32;
  }
  unsigned int v19 = *((_DWORD *)v59 + 4);
  int v18 = (v19 >> 2) & 1;
  if (v58 && (v19 & 4) != 0) {
    goto LABEL_30;
  }
LABEL_32:
  unint64_t result = (WTF::Lock *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v17, v18, (uint64_t)v60, (uint64_t)v59, v58);
  uint64_t v61 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_108;
  }
  uint64_t v58 = 0;
  if (!v10) {
    goto LABEL_36;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_36:
    int v21 = v59;
    unint64_t v59 = 0;
    if (!v21) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  WTF::StringImpl::destroy(v10, v20);
  int v21 = v59;
  unint64_t v59 = 0;
  if (!v21) {
    goto LABEL_41;
  }
LABEL_39:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::destroy(v21, v20);
    int v22 = v60;
    uint64_t v60 = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_44;
  }
  *(_DWORD *)v21 -= 2;
LABEL_41:
  int v22 = v60;
  uint64_t v60 = 0;
  if (!v22)
  {
LABEL_46:
    char v23 = *(NSObject **)(v7 + 32);
    char v24 = (WTF *)os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (!v24) {
      goto LABEL_55;
    }
    goto LABEL_49;
  }
LABEL_44:
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v22, v20);
  char v23 = *(NSObject **)(v7 + 32);
  char v24 = (WTF *)os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (!v24) {
    goto LABEL_55;
  }
LABEL_49:
  WTF::String::utf8();
  if (v56) {
    uint64_t v26 = (char *)v56 + 16;
  }
  else {
    uint64_t v26 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v26;
  _os_log_impl(&dword_1E1345000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  char v24 = v56;
  size_t v56 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      char v24 = (WTF *)WTF::fastFree(v24, v25);
      if (!*(unsigned char *)v7) {
        goto LABEL_95;
      }
      goto LABEL_56;
    }
    --*(_DWORD *)v24;
  }
LABEL_55:
  if (!*(unsigned char *)v7) {
    goto LABEL_95;
  }
LABEL_56:
  if (*(unsigned __int8 *)(v7 + 16) >= 4u)
  {
    uint64_t v27 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v28 = *v27;
      if (v28) {
        goto LABEL_95;
      }
      int v29 = *v27;
      atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v29, v28 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v29 != v28);
    uint64_t v51 = a2;
    uint64_t v30 = WTF::Logger::observers(v24);
    uint64_t v31 = *(unsigned int *)(v30 + 12);
    if (v31)
    {
      uint64_t v32 = *(uint64_t **)v30;
      uint64_t v52 = *(void *)v30 + 8 * v31;
      while (1)
      {
        uint64_t v33 = *v32;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, a3);
        int v63 = 0;
        WTF::String::String((WTF::String *)&v64, " rejecting ");
        int v65 = 0;
        WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v66, a1);
        size_t v56 = 0;
        uint64_t v57 = 0;
        uint64_t v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v57) = 3;
        size_t v56 = v34;
        uint64_t v35 = HIDWORD(v57);
        *((_DWORD *)v34 + 4 * HIDWORD(v57)) = buf;
        uint64_t v36 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v34 + 2 * v35 + 1) = v36;
        *((_DWORD *)v34 + 4 * (v35 + 1)) = v63;
        uint64_t v37 = v64;
        if (v64) {
          *(_DWORD *)v64 += 2;
        }
        *((void *)v34 + 2 * (v35 + 1) + 1) = v37;
        *((_DWORD *)v34 + 4 * (v35 + 2)) = v65;
        uint64_t v38 = v66[0];
        if (v66[0]) {
          *(_DWORD *)v66[0] += 2;
        }
        *((void *)v34 + 2 * (v35 + 2) + 1) = v38;
        HIDWORD(v57) = v35 + 3;
        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v33 + 16))(v33, v7, 4, &v56);
        uint64_t v39 = v56;
        if (HIDWORD(v57))
        {
          uint64_t v40 = 16 * HIDWORD(v57);
          unsigned int v41 = (WTF::StringImpl **)((char *)v56 + 8);
          do
          {
            unint64_t v42 = *v41;
            WTF::StringImpl *v41 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2) {
                WTF::StringImpl::destroy(v42, v25);
              }
              else {
                *(_DWORD *)v42 -= 2;
              }
            }
            v41 += 2;
            v40 -= 16;
          }
          while (v40);
          uint64_t v39 = v56;
        }
        if (v39)
        {
          size_t v56 = 0;
          LODWORD(v57) = 0;
          WTF::fastFree(v39, v25);
        }
        unint64_t v43 = v66[0];
        v66[0] = 0;
        if (!v43) {
          goto LABEL_83;
        }
        if (*(_DWORD *)v43 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v43, v25);
        uint64_t v44 = v64;
        int v64 = 0;
        if (!v44) {
          goto LABEL_88;
        }
LABEL_86:
        if (*(_DWORD *)v44 != 2)
        {
          *(_DWORD *)v44 -= 2;
LABEL_88:
          __int16 v45 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v45) {
            goto LABEL_91;
          }
          goto LABEL_63;
        }
        WTF::StringImpl::destroy(v44, v25);
        __int16 v45 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v45)
        {
LABEL_91:
          if (*(_DWORD *)v45 == 2) {
            WTF::StringImpl::destroy(v45, v25);
          }
          else {
            *(_DWORD *)v45 -= 2;
          }
        }
LABEL_63:
        if (++v32 == (uint64_t *)v52) {
          goto LABEL_93;
        }
      }
      *(_DWORD *)v43 -= 2;
LABEL_83:
      uint64_t v44 = v64;
      int v64 = 0;
      if (!v44) {
        goto LABEL_88;
      }
      goto LABEL_86;
    }
LABEL_93:
    int v46 = 1;
    atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
    a2 = v51;
    if (v46 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_95:
  uint64_t v47 = v61;
  uint64_t v61 = 0;
  if (!v47) {
    goto LABEL_98;
  }
  if (*(_DWORD *)v47 != 2)
  {
    *(_DWORD *)v47 -= 2;
    goto LABEL_98;
  }
  WTF::StringImpl::destroy(v47, v25);
  char v48 = *a2;
  uint64_t v49 = *(unsigned int *)(a1 + 80);
  if (v49 != -1) {
LABEL_99:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7B150[v49])(&buf, a1 + 56);
LABEL_100:
  *(unsigned char *)(a1 + 56) = v48;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  unint64_t result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (atomic_uchar *volatile *)&v54);
  if (v55)
  {
    unint64_t result = v54;
    int v50 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v54, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
    if (v50 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void sub_1E1420E90(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::Lock *a13, char a14, WTF *a15, int a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26)
{
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 == 1)
  {
    int v29 = a20;
    if (!a20) {
      goto LABEL_7;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    int v29 = a20;
    if (!a20) {
      goto LABEL_7;
    }
  }
  if (*(_DWORD *)v29 == 2) {
    WTF::StringImpl::destroy(v29, a2);
  }
  else {
    *(_DWORD *)v29 -= 2;
  }
LABEL_7:
  if (a14)
  {
    int v30 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a13, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
    if (v30 != 1)
    {
      WTF::Lock::unlockSlow(a13);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromise(uint64_t a1, long long *a2)
{
  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3C7B138;
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 88) = a1 + 104;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  char v5 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  uint64_t v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    return a1;
  }
  WTF::String::String((WTF::String *)&v42, "creating ");
  unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v41, a1);
  BOOL v8 = (WTF::StringImpl *)v41;
  if (v42)
  {
    int v9 = *((_DWORD *)v42 + 1);
    if (v41) {
      goto LABEL_5;
    }
  }
  else
  {
    int v9 = 0;
    if (v41)
    {
LABEL_5:
      int v10 = *(_DWORD *)(v41 + 4);
      if ((v10 | v9) < 0) {
        goto LABEL_75;
      }
      goto LABEL_9;
    }
  }
  int v10 = 0;
  if (v9 < 0) {
    goto LABEL_75;
  }
LABEL_9:
  unint64_t result = (v9 + v10);
  if (__OFADD__(v9, v10)) {
    goto LABEL_75;
  }
  if (!v42)
  {
    if (!v41)
    {
      int v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v12 = (*(unsigned __int8 *)(v41 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v11 = *((_DWORD *)v42 + 4);
  int v12 = (v11 >> 2) & 1;
  if (v41 && (v11 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v42, v41, &buf);
  unint64_t v43 = (WTF::StringImpl *)buf;
  if ((void)buf)
  {
    uint64_t v41 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v13);
        BOOL v14 = v42;
        unint64_t v42 = 0;
        if (!v14) {
          goto LABEL_26;
        }
LABEL_24:
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v13);
          int v15 = *((void *)v6 + 4);
          char v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          if (!v16) {
            goto LABEL_35;
          }
LABEL_29:
          WTF::String::utf8();
          if (v39) {
            int v18 = (char *)v39 + 16;
          }
          else {
            int v18 = 0;
          }
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v18;
          _os_log_impl(&dword_1E1345000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          char v16 = v39;
          uint64_t v39 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
            {
              char v16 = (WTF *)WTF::fastFree(v16, v17);
              if (*v6)
              {
LABEL_36:
                if (v6[16] >= 4u)
                {
                  unsigned int v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v20 = *v19;
                    if (v20) {
                      goto LABEL_68;
                    }
                    int v21 = *v19;
                    atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v21 != v20);
                  uint64_t v22 = WTF::Logger::observers(v16);
                  uint64_t v23 = *(unsigned int *)(v22 + 12);
                  if (v23)
                  {
                    char v24 = *(uint64_t **)v22;
                    uint64_t v25 = *(void *)v22 + 8 * v23;
                    while (1)
                    {
                      uint64_t v26 = *v24;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
                      int v45 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v46, a1);
                      uint64_t v39 = 0;
                      uint64_t v40 = 0;
                      uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v40) = 2;
                      uint64_t v39 = v27;
                      uint64_t v28 = HIDWORD(v40);
                      *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
                      uint64_t v29 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v27 + 2 * v28 + 1) = v29;
                      *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
                      int v30 = v46[0];
                      if (v46[0]) {
                        *(_DWORD *)v46[0] += 2;
                      }
                      *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
                      HIDWORD(v40) = v28 + 2;
                      (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, v6, 4, &v39);
                      uint64_t v31 = v39;
                      if (HIDWORD(v40))
                      {
                        uint64_t v32 = 16 * HIDWORD(v40);
                        uint64_t v33 = (WTF::StringImpl **)((char *)v39 + 8);
                        do
                        {
                          uint64_t v34 = *v33;
                          *uint64_t v33 = 0;
                          if (v34)
                          {
                            if (*(_DWORD *)v34 == 2) {
                              WTF::StringImpl::destroy(v34, v17);
                            }
                            else {
                              *(_DWORD *)v34 -= 2;
                            }
                          }
                          v33 += 2;
                          v32 -= 16;
                        }
                        while (v32);
                        uint64_t v31 = v39;
                      }
                      if (v31)
                      {
                        uint64_t v39 = 0;
                        LODWORD(v40) = 0;
                        WTF::fastFree(v31, v17);
                      }
                      uint64_t v35 = v46[0];
                      v46[0] = 0;
                      if (!v35) {
                        goto LABEL_61;
                      }
                      if (*(_DWORD *)v35 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v35, v17);
                      uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v36)
                      {
LABEL_64:
                        if (*(_DWORD *)v36 == 2) {
                          WTF::StringImpl::destroy(v36, v17);
                        }
                        else {
                          *(_DWORD *)v36 -= 2;
                        }
                      }
LABEL_43:
                      if (++v24 == (uint64_t *)v25) {
                        goto LABEL_66;
                      }
                    }
                    *(_DWORD *)v35 -= 2;
LABEL_61:
                    uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v36) {
                      goto LABEL_64;
                    }
                    goto LABEL_43;
                  }
LABEL_66:
                  int v37 = 1;
                  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
                  if (v37 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
              }
LABEL_68:
              uint64_t v38 = v43;
              unint64_t v43 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2) {
                  WTF::StringImpl::destroy(v38, v17);
                }
                else {
                  *(_DWORD *)v38 -= 2;
                }
              }
              return a1;
            }
            --*(_DWORD *)v16;
          }
LABEL_35:
          if (*v6) {
            goto LABEL_36;
          }
          goto LABEL_68;
        }
        *(_DWORD *)v14 -= 2;
LABEL_26:
        int v15 = *((void *)v6 + 4);
        char v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        if (!v16) {
          goto LABEL_35;
        }
        goto LABEL_29;
      }
      *(_DWORD *)v8 -= 2;
    }
    BOOL v14 = v42;
    unint64_t v42 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
LABEL_75:
  __break(0xC471u);
  return result;
}

void sub_1E1421548(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 == 1)
  {
    uint64_t v23 = a14;
    a14 = 0;
    if (v23) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v23 = a14;
    a14 = 0;
    if (v23)
    {
LABEL_5:
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, a2);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a9, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19, v24);
  uint64_t v25 = *(unsigned int *)(v18 + 80);
  if (v25 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7B150[v25])(&a10, v19 - 32);
  }
  *(_DWORD *)(v18 + 80) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    unint64_t result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 124);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 124);
    if (!v4) {
      goto LABEL_8;
    }
  }
  char v5 = *(uint64_t **)(v1 + 112);
  uint64_t v6 = 40 * v4;
  do
  {
    unint64_t result = *v5;
    if (*v5) {
      unint64_t result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E142179C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  unint64_t result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  int v15 = v16;
  char v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      unint64_t result = v17;
      unsigned int v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  unint64_t result = v17;
  unsigned int v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E1421934(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E1421A60(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E1421B74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B168[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    char v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        uint64_t v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              char v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                BOOL v12 = *(NSObject **)(v2 + 32);
                int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  int v15 = (char *)v45 + 16;
                }
                else {
                  int v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                int v13 = v45;
                int v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    int v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  char v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    int v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      int v45 = 0;
                      uint64_t v46 = 0;
                      char v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      int v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      uint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      uint64_t v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        int v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          uint64_t v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        uint64_t v28 = v45;
                      }
                      if (v28)
                      {
                        int v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      uint64_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      uint64_t v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    uint64_t v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                uint64_t v35 = v49;
                uint64_t v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              BOOL v12 = *(NSObject **)(v2 + 32);
              int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          char v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 100);
  if (v38)
  {
    uint64_t v39 = *(unsigned int ***)(a1 + 88);
    uint64_t v40 = 8 * v38;
    do
    {
      uint64_t v41 = *v39;
      WTF::Logger *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  unint64_t v42 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v42 && v42 != 0)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 80);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7B150[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1E14221A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 112, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 88, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 80);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7B150[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 80) = -1;
  _Unwind_Resume(a1);
}

WTF *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  size_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  BOOL v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 100);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 88) = a1 + 104;
    size_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 96);
    LODWORD(v6) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 96) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 96) = 1;
  int v7 = *(_DWORD *)(a1 + 120);
  unsigned int v8 = *(_DWORD *)(a1 + 124);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 112) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    int v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 129)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v90, a1);
            uint64_t v20 = v90;
            (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v90 + 16))(&buf, v90);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (v102 != -1) {
              ((void (*)(void *, long long *))off_1F3C7B168[v102])(v89, &buf);
            }
            LODWORD(v102) = -1;
            (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, (unsigned int *)a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (v102 != -1) {
              ((void (*)(unsigned int **, long long *))off_1F3C7B168[v102])(&v90, &buf);
            }
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7B198;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      int v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      uint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      size_t v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        uint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      uint64_t v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      uint64_t v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_123;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_36;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_36:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_37;
          }
          goto LABEL_41;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_37:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_152;
        }
        goto LABEL_42;
      }
LABEL_41:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_152;
      }
LABEL_42:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_152:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_58;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_56:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_56;
        }
        int v40 = 1;
      }
LABEL_58:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      unint64_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_152;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_62;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_62:
        unint64_t v43 = v98;
        size_t v98 = 0;
        if (!v43) {
          goto LABEL_67;
        }
        goto LABEL_65;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      unint64_t v43 = v98;
      size_t v98 = 0;
      if (!v43) {
        goto LABEL_67;
      }
LABEL_65:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_67:
        uint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_72;
        }
        goto LABEL_70;
      }
      WTF::StringImpl::destroy(v43, v42);
      uint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_72;
      }
LABEL_70:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_72:
        int v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_81;
        }
        goto LABEL_75;
      }
      WTF::StringImpl::destroy(v44, v42);
      int v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_81;
      }
LABEL_75:
      WTF::String::utf8();
      if (v95) {
        char v48 = (char *)v95 + 16;
      }
      else {
        char v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      unint64_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_120;
          }
          goto LABEL_82;
        }
        --*(_DWORD *)v46;
      }
LABEL_81:
      if (!*v29) {
        goto LABEL_120;
      }
LABEL_82:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_120;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          uint64_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            unint64_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            unint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            uint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              int v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                int v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              uint64_t v61 = v95;
            }
            if (v61)
            {
              unint64_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            int v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_108;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            int v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_113;
            }
LABEL_111:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_113:
              size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_116;
              }
              goto LABEL_88;
            }
            WTF::StringImpl::destroy(v66, v47);
            size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_116:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_88:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_118;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_108:
          int v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_113;
          }
          goto LABEL_111;
        }
LABEL_118:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_120:
      unint64_t v69 = v100;
      unint64_t v100 = 0;
      if (!v69) {
        goto LABEL_123;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_123:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 80);
        uint64_t v72 = *(unsigned int *)(a1 + 80);
        if (v71 != -1) {
          goto LABEL_124;
        }
        goto LABEL_127;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 80);
      uint64_t v72 = *(unsigned int *)(a1 + 80);
      if (v71 != -1)
      {
LABEL_124:
        if (v72 != -1) {
          goto LABEL_128;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7B150[v71])(&buf, v70);
        *(_DWORD *)(v24 + 80) = -1;
        goto LABEL_129;
      }
LABEL_127:
      if (v72 != -1)
      {
LABEL_128:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7B1B0[v72])(&buf);
      }
LABEL_129:
      WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (unint64_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_132:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_133;
          }
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_132;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_133:
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_27:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    char v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      size_t v80 = *(unsigned int **)v78;
      *(void *)char v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      char v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    size_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E1422E68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v32 = *(unsigned int *)(v30 - 144);
  if (v32 != -1) {
    (*(void (**)(char *, uint64_t))(v29 + 8 * v32))(&a28, v30 - 160);
  }
  char v33 = 0;
  atomic_compare_exchange_strong_explicit(*v28, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v34);
  _Unwind_Resume(a1);
}

void sub_1E1422F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 80) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 80) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E142336C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 12);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a2 + 48, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (!v4)
  {
    if (a2[20] == 1) {
      goto LABEL_3;
    }
LABEL_8:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return WTF::Lock::unlockSlow(v5);
  }
  unint64_t result = MEMORY[0x1E4E44220](a2 + 12);
  if (a2[20] != 1) {
    goto LABEL_8;
  }
LABEL_3:
  *(unsigned char *)uint64_t v3 = 0;
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v6 = a2[18];
  if (v6 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, unsigned int *))off_1F3C7B178[v6])(v8, v3, a2 + 14);
    *(_DWORD *)(v3 + 16) = v6;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    return WTF::Lock::unlockSlow(v5);
  }
  return result;
}

void sub_1E1423470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v14 + 16);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7B168[v16])(&a13, v14);
  }
  *(_DWORD *)(v14 + 16) = -1;
  int v17 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  char v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      int v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  int v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    uint64_t v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  uint64_t v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    unint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  unint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)int v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          uint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          char v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              _WORD *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          unint64_t v43 = v73;
          unint64_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            uint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          uint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            int v45 = v69;
            unint64_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          int v45 = v69;
          unint64_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            size_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          size_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            int v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          int v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            char v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          char v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        unint64_t v43 = v73;
        unint64_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  uint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E1423C8C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E1423FDC()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E1423FB8);
  }
  JUMPOUT(0x1E1423F1CLL);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7B198;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7B198;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    v13[0] = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)v13, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    uint64_t v9 = *(unsigned int *)(v3 + 80);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_11:
      uint64_t v10 = *((void *)a1 + 3);
      if (v9 == 2) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 80);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_11;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  uint64_t v10 = *((void *)a1 + 3);
  if (v9 == 2)
  {
LABEL_12:
    char v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 48);
      if (*(_DWORD *)(v10 + 80) == 2)
      {
LABEL_14:
        uint64_t v9 = *(void *)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 == 1)
        {
LABEL_15:
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v13, v9);
          (*(void (**)(unsigned __int8 *, uint64_t, void *))(*(void *)v1 + 24))(v1, v10, v13);
          if (v14 != -1) {
            ((void (*)(char *, void *))off_1F3C7B168[v14])(&v15, v13);
          }
          int v14 = -1;
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
LABEL_24:
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        goto LABEL_15;
      }
    }
    else if (*(_DWORD *)(v10 + 80) == 2)
    {
      goto LABEL_14;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_24;
  }
LABEL_20:
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v13, (unsigned int *)v10);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, void *))(*(void *)v1 + 24))(v1, v10, v13);
  if (v14 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, void *))off_1F3C7B168[v14])(&v15, v13);
  }
  return result;
}

void sub_1E14244A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  if (a11 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C7B168[a11])(&a16, &a9);
  }
  a11 = -1;
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void sub_1E142450C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B150[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = (unsigned char *)a2;
      v19[0] = 0;
      int v20 = -1;
      uint64_t v7 = *(unsigned int *)(a3 + 16);
      if (v7 == -1)
      {
        int v8 = *(_DWORD *)(a2 + 16);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1) {
            return ((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C7B168[v20])(v21, v19);
          }
          return result;
        }
      }
      else
      {
        unint64_t result = ((uint64_t (*)(char *, unsigned char *, uint64_t))off_1F3C7B178[v7])(&v24, v19, a3);
        int v20 = v7;
        int v8 = *((_DWORD *)v6 + 4);
        if (v8 != -1 && v7 == v8)
        {
          unint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, unsigned char *))off_1F3C7B1C8[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if (v7 != 1)
        {
          int v14 = v19;
          v21[0] = 0;
          int v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 4) = -1;
            uint64_t v16 = *((unsigned int *)v14 + 4);
            if (v16 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B1D8[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 4) = v16;
              uint64_t v17 = *((unsigned int *)v14 + 4);
              if (v17 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B168[v17])(&v24, v14);
              }
            }
            *((_DWORD *)v14 + 4) = -1;
            int v18 = v22;
            if (v22 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B1D8[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 4) = v18;
              if (v22 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B168[v22])(&v24, v21);
              }
            }
            goto LABEL_42;
          }
LABEL_34:
          unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B178[v8])(&v23, v21, v6);
          int v22 = v8;
          uint64_t v15 = *((unsigned int *)v6 + 4);
          if (v15 != -1) {
            unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B168[v15])(&v24, v6);
          }
          goto LABEL_36;
        }
      }
      uint64_t v10 = v19;
      if (v8 == 1) {
        int v11 = 1;
      }
      else {
        int v11 = v7;
      }
      if (v8 == 1) {
        int v12 = v19;
      }
      else {
        int v12 = v6;
      }
      if (v8 == 1) {
        uint64_t v10 = v6;
      }
      BOOL v13 = v8 == -1;
      if (v8 == -1) {
        int v8 = -1;
      }
      else {
        int v8 = v11;
      }
      if (v13) {
        int v14 = v19;
      }
      else {
        int v14 = v12;
      }
      if (!v13) {
        uint64_t v6 = v10;
      }
      v21[0] = 0;
      int v22 = -1;
      if (v8 == -1) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))off_1F3C7B150[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if (v9 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7B178[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 16) = v9;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

void sub_1E1424870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7B168[a16])(v16 - 33, &a14);
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7B168[a12])(v16 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14248F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7B168[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B150[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    unint64_t result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 108);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 108);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(uint64_t **)(v1 + 96);
  uint64_t v6 = 40 * v4;
  do
  {
    unint64_t result = *v5;
    if (*v5) {
      unint64_t result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E1424B24(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  unint64_t result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  uint64_t v15 = v16;
  uint64_t v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      unint64_t result = v17;
      uint64_t v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  unint64_t result = v17;
  uint64_t v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E1424CBC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E1424DE8(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E1424EFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    uint64_t v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        int v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              char v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                BOOL v12 = *(NSObject **)(v2 + 32);
                uint64_t v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  uint64_t v15 = (char *)v45 + 16;
                }
                else {
                  uint64_t v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                uint64_t v13 = v45;
                int v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    uint64_t v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    int v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      int v45 = 0;
                      uint64_t v46 = 0;
                      char v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      int v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      uint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      uint64_t v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        uint64_t v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          int v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        uint64_t v28 = v45;
                      }
                      if (v28)
                      {
                        int v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      uint64_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      char v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    char v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                int v35 = v49;
                int v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              BOOL v12 = *(NSObject **)(v2 + 32);
              uint64_t v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          char v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 84);
  if (v38)
  {
    uint64_t v39 = *(unsigned int ***)(a1 + 72);
    uint64_t v40 = 8 * v38;
    do
    {
      unsigned int v41 = *v39;
      void *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  unint64_t v42 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v42 && v42 != 0)
  {
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 64);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7B210[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

void sub_1E14254C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 72, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 64);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7B210[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 64) = -1;
  _Unwind_Resume(a1);
}

WTF *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  size_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  BOOL v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 72) = a1 + 88;
    size_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 80) = 1;
  int v7 = *(_DWORD *)(a1 + 104);
  unsigned int v8 = *(_DWORD *)(a1 + 108);
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 96) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    int v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 113)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&buf, a1);
            uint64_t v20 = buf;
            (*(void (**)(unsigned int **__return_ptr, void))(*(void *)buf + 16))(&v90, buf);
            (*(void (**)(uint64_t, uint64_t, unsigned int **))(*(void *)v13 + 24))(v13, a1, &v90);
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7B238;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      int v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      uint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      size_t v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        uint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      uint64_t v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      uint64_t v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_120;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_33;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_33:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_34;
          }
          goto LABEL_38;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_34:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_149;
        }
        goto LABEL_39;
      }
LABEL_38:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_149;
      }
LABEL_39:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_149:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_55;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_53:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_53;
        }
        int v40 = 1;
      }
LABEL_55:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      unint64_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_149;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_59;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_59:
        unint64_t v43 = v98;
        size_t v98 = 0;
        if (!v43) {
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      unint64_t v43 = v98;
      size_t v98 = 0;
      if (!v43) {
        goto LABEL_64;
      }
LABEL_62:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_64:
        uint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }
      WTF::StringImpl::destroy(v43, v42);
      uint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_69;
      }
LABEL_67:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_69:
        int v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_78;
        }
        goto LABEL_72;
      }
      WTF::StringImpl::destroy(v44, v42);
      int v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_78;
      }
LABEL_72:
      WTF::String::utf8();
      if (v95) {
        char v48 = (char *)v95 + 16;
      }
      else {
        char v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      unint64_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_117;
          }
          goto LABEL_79;
        }
        --*(_DWORD *)v46;
      }
LABEL_78:
      if (!*v29) {
        goto LABEL_117;
      }
LABEL_79:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_117;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          uint64_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            unint64_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            unint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            uint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              int v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                int v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              uint64_t v61 = v95;
            }
            if (v61)
            {
              unint64_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            int v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_105;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            int v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_110;
            }
LABEL_108:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_110:
              size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_113;
              }
              goto LABEL_85;
            }
            WTF::StringImpl::destroy(v66, v47);
            size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_113:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_85:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_115;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_105:
          int v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_110;
          }
          goto LABEL_108;
        }
LABEL_115:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_117:
      unint64_t v69 = v100;
      unint64_t v100 = 0;
      if (!v69) {
        goto LABEL_120;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_120:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 64);
        uint64_t v72 = *(unsigned int *)(a1 + 64);
        if (v71 != -1) {
          goto LABEL_121;
        }
        goto LABEL_124;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 64);
      uint64_t v72 = *(unsigned int *)(a1 + 64);
      if (v71 != -1)
      {
LABEL_121:
        if (v72 != -1) {
          goto LABEL_125;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7B210[v71])(&buf, v70);
        *(_DWORD *)(v24 + 64) = -1;
        goto LABEL_126;
      }
LABEL_124:
      if (v72 != -1)
      {
LABEL_125:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7B250[v72])(&buf);
      }
LABEL_126:
      WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (unint64_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_129:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_130;
          }
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_129;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_130:
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_24:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    char v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      size_t v80 = *(unsigned int **)v78;
      *(void *)char v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      char v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    size_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E142613C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  char v14 = 0;
  atomic_compare_exchange_strong_explicit(*v12, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v15);
  _Unwind_Resume(a1);
}

void sub_1E14261B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 64) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 64) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E14265F0(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  int v3 = (_WORD *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 64) == 1)
    {
LABEL_3:
      *int v3 = *(_WORD *)(a2 + 56);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 64) == 1)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E14266C8(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  char v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      int v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  int v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    char v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  char v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    unint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  unint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)int v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          uint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          int v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              _WORD *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          unint64_t v43 = v73;
          unint64_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            uint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          uint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            int v45 = v69;
            unint64_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          int v45 = v69;
          unint64_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            size_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          size_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            int v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          int v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            char v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          char v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        unint64_t v43 = v73;
        unint64_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  uint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E1426EB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E1427200()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E14271DCLL);
  }
  JUMPOUT(0x1E1427140);
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7B238;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    int v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    int v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7B238;
  int v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v17 = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)&v17, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v6 = a1;
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    int v9 = *(_DWORD *)(v3 + 64);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_10:
      uint64_t v10 = *((void *)v6 + 3);
      if (v9 == 2) {
        goto LABEL_11;
      }
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v3 + 64);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 48));
  uint64_t v10 = *((void *)v6 + 3);
  if (v9 == 2)
  {
LABEL_11:
    char v11 = 0;
    int v7 = (atomic_uchar *)(v10 + 48);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 48);
      if (*(_DWORD *)(v10 + 64) == 2)
      {
LABEL_13:
        int v6 = *(WTF::NativePromiseBase **)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 == 1)
        {
LABEL_14:
          (*(void (**)(unsigned char *__return_ptr, WTF::NativePromiseBase *))(*(void *)v6 + 16))(v16, v6);
          (*(void (**)(unsigned __int8 *, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v10, v16);
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v6 + 8))(v6);
        }
LABEL_26:
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        goto LABEL_14;
      }
    }
    else if (*(_DWORD *)(v10 + 64) == 2)
    {
      goto LABEL_13;
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_26;
  }
LABEL_17:
  char v13 = 0;
  int v6 = (WTF::NativePromiseBase *)(v10 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13)
  {
    MEMORY[0x1E4E44220](v10 + 48);
    if (*(_DWORD *)(v10 + 64) != 1) {
      goto LABEL_25;
    }
  }
  else if (*(_DWORD *)(v10 + 64) != 1)
  {
    goto LABEL_25;
  }
  __int16 v15 = *(_WORD *)(v10 + 56);
  int v14 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  }
  return (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, __int16 *))(*(void *)v1 + 24))(v1, v10, &v15);
}

void sub_1E142769C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14276EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B210[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, unsigned char *a2, _WORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B210[v5])(&v8, v4);
LABEL_8:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  unsigned int v6 = (unsigned __int16)*a3;
  char v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1]) {
        a2[1] = 0;
      }
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B210[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    char v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  char v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    unint64_t result = MEMORY[0x1E4E44220](result + 48);
    uint64_t v4 = *(unsigned int *)(v1 + 116);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 116);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(uint64_t **)(v1 + 104);
  uint64_t v6 = 40 * v4;
  do
  {
    unint64_t result = *v5;
    if (*v5) {
      unint64_t result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
    }
    v5 += 5;
    v6 -= 40;
  }
  while (v6);
LABEL_8:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

void sub_1E14279E4(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  unint64_t result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v16, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v17)
  {
    int v6 = *((_DWORD *)v17 + 1);
    if (v16)
    {
LABEL_3:
      int v7 = *((_DWORD *)v16 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        BOOL v4 = __OFADD__(v7, 1);
        int v8 = v7 + 1;
        if (!v4) {
          goto LABEL_9;
        }
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    int v6 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  int v8 = 1;
  if (v4) {
    goto LABEL_33;
  }
LABEL_9:
  BOOL v4 = __OFADD__(v8, 1);
  int v9 = v8 + 1;
  char v10 = v4;
  if (v6 < 0) {
    goto LABEL_33;
  }
  if (v10) {
    goto LABEL_33;
  }
  BOOL v4 = __OFADD__(v6, v9);
  int v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13)) {
    goto LABEL_33;
  }
  BOOL v12 = (!v17 || (*((unsigned char *)v17 + 16) & 4) != 0) && (!v16 || (*((unsigned char *)v16 + 16) & 4) != 0);
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v18, v11 + 13, v12, (uint64_t)v17, (uint64_t)v16);
  uint64_t v14 = v18;
  *a1 = v18;
  if (!v14) {
    goto LABEL_34;
  }
  __int16 v15 = v16;
  uint64_t v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      unint64_t result = v17;
      uint64_t v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  unint64_t result = v17;
  uint64_t v17 = 0;
  if (!result) {
    return result;
  }
LABEL_29:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E1427B7C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    BOOL v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        int v6 = (unsigned int *)*v4;
        *BOOL v4 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
        }
      }
      else
      {
        *BOOL v4 = 0;
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E1427CA8(_Unwind_Exception *exception_object, void *a2)
{
  BOOL v4 = v3;
  int v6 = *v4;
  *BOOL v4 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v7 = *(WTF **)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v7, a2);
  goto LABEL_5;
}

uint64_t *WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1E1427DBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  WTF *v1 = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B2A8[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SC_EEEEEEDcSG_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  v52[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    WTF::String::String((WTF::String *)&v48, "destroying ");
    unint64_t result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v47, a1);
    char v5 = (WTF::StringImpl *)v47;
    if (v48)
    {
      int v6 = *((_DWORD *)v48 + 1);
      if (v47) {
        goto LABEL_8;
      }
    }
    else
    {
      int v6 = 0;
      if (v47)
      {
LABEL_8:
        int v7 = *(_DWORD *)(v47 + 4);
        if ((v7 | v6) < 0) {
          goto LABEL_91;
        }
        goto LABEL_12;
      }
    }
    int v7 = 0;
    if (v6 < 0) {
      goto LABEL_91;
    }
LABEL_12:
    unint64_t result = (v6 + v7);
    if (__OFADD__(v6, v7)) {
      goto LABEL_91;
    }
    if (v48)
    {
      unsigned int v8 = *((_DWORD *)v48 + 4);
      int v9 = (v8 >> 2) & 1;
      if (!v47 || (v8 & 4) == 0)
      {
LABEL_20:
        unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v48, v47, &buf);
        int v49 = (WTF::StringImpl *)buf;
        if ((void)buf)
        {
          uint64_t v47 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              int v11 = v48;
              char v48 = 0;
              if (!v11) {
                goto LABEL_29;
              }
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                BOOL v12 = *(NSObject **)(v2 + 32);
                char v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!v13) {
                  goto LABEL_38;
                }
LABEL_32:
                WTF::String::utf8();
                if (v45) {
                  __int16 v15 = (char *)v45 + 16;
                }
                else {
                  __int16 v15 = 0;
                }
                LODWORD(buf) = 136446210;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1E1345000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                char v13 = v45;
                int v45 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    char v13 = (WTF *)WTF::fastFree(v13, v14);
                    if (!*(unsigned char *)v2) {
                      goto LABEL_71;
                    }
                    goto LABEL_39;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(unsigned char *)v2) {
                  goto LABEL_71;
                }
LABEL_39:
                if (*(unsigned __int8 *)(v2 + 16) >= 4u)
                {
                  uint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
                  do
                  {
                    int v17 = *v16;
                    if (v17) {
                      goto LABEL_71;
                    }
                    int v18 = *v16;
                    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
                  }
                  while (v18 != v17);
                  uint64_t v19 = WTF::Logger::observers(v13);
                  uint64_t v20 = *(unsigned int *)(v19 + 12);
                  if (v20)
                  {
                    int v21 = *(uint64_t **)v19;
                    uint64_t v22 = *(void *)v19 + 8 * v20;
                    while (1)
                    {
                      uint64_t v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      int v51 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(v52, a1);
                      int v45 = 0;
                      uint64_t v46 = 0;
                      uint64_t v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v46) = 2;
                      int v45 = v24;
                      uint64_t v25 = HIDWORD(v46);
                      *((_DWORD *)v24 + 4 * HIDWORD(v46)) = buf;
                      uint64_t v26 = *((void *)&buf + 1);
                      if (*((void *)&buf + 1)) {
                        **((_DWORD **)&buf + 1) += 2;
                      }
                      *((void *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v51;
                      uint64_t v27 = v52[0];
                      if (v52[0]) {
                        *(_DWORD *)v52[0] += 2;
                      }
                      *((void *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v46) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v23 + 16))(v23, v2, 4, &v45);
                      uint64_t v28 = v45;
                      if (HIDWORD(v46))
                      {
                        uint64_t v29 = 16 * HIDWORD(v46);
                        uint64_t v30 = (WTF::StringImpl **)((char *)v45 + 8);
                        do
                        {
                          int v31 = *v30;
                          WTF::StringImpl *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2) {
                              WTF::StringImpl::destroy(v31, v14);
                            }
                            else {
                              *(_DWORD *)v31 -= 2;
                            }
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        uint64_t v28 = v45;
                      }
                      if (v28)
                      {
                        int v45 = 0;
                        LODWORD(v46) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      uint64_t v32 = v52[0];
                      v52[0] = 0;
                      if (!v32) {
                        goto LABEL_64;
                      }
                      if (*(_DWORD *)v32 != 2) {
                        break;
                      }
                      WTF::StringImpl::destroy(v32, v14);
                      int v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                      *((void *)&buf + 1) = 0;
                      if (v33)
                      {
LABEL_67:
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v14);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
LABEL_46:
                      if (++v21 == (uint64_t *)v22) {
                        goto LABEL_69;
                      }
                    }
                    *(_DWORD *)v32 -= 2;
LABEL_64:
                    int v33 = (WTF::StringImpl *)*((void *)&buf + 1);
                    *((void *)&buf + 1) = 0;
                    if (v33) {
                      goto LABEL_67;
                    }
                    goto LABEL_46;
                  }
LABEL_69:
                  int v34 = 1;
                  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
                  if (v34 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                }
LABEL_71:
                int v35 = v49;
                int v49 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v14);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                goto LABEL_75;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              BOOL v12 = *(NSObject **)(v2 + 32);
              char v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!v13) {
                goto LABEL_38;
              }
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          int v11 = v48;
          char v48 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_91:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v47)
    {
      int v9 = 1;
      goto LABEL_20;
    }
    int v9 = (*(unsigned __int8 *)(v47 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_75:
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, v36);
  uint64_t v38 = *(unsigned int *)(a1 + 92);
  if (v38)
  {
    uint64_t v39 = *(unsigned int ***)(a1 + 80);
    uint64_t v40 = 8 * v38;
    do
    {
      unsigned int v41 = *v39;
      void *v39 = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  unint64_t v42 = *(WTF **)(a1 + 80);
  if ((WTF *)(a1 + 96) != v42 && v42 != 0)
  {
    *(void *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v42, v37);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 72);
  if (v44 != -1) {
    ((void (*)(long long *, uint64_t))off_1F3C7B290[v44])(&buf, a1 + 56);
  }
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

void sub_1E14283FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    uint64_t v22 = a14;
    a14 = 0;
    if (v22) {
      goto LABEL_5;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v22 = a14;
    a14 = 0;
    if (v22)
    {
LABEL_5:
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 104, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 80, v23);
  uint64_t v24 = *(unsigned int *)(v18 + 72);
  if (v24 != -1) {
    ((void (*)(WTF **, uint64_t))off_1F3C7B290[v24])(&a10, v18 + 56);
  }
  *(_DWORD *)(v18 + 72) = -1;
  _Unwind_Resume(a1);
}

WTF *WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = &v102;
  *((void *)&buf + 1) = 1;
  size_t v86 = (WTF *)&v88;
  uint64_t v87 = 1;
  BOOL v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 96))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 92);
    memcpy(&v88, v4, 8 * v6);
  }
  else
  {
    *(void *)(a1 + 80) = a1 + 96;
    size_t v86 = (WTF *)v4;
    int v5 = *(_DWORD *)(a1 + 88);
    LODWORD(v6) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a1 + 88) = 1;
    LODWORD(v87) = v5;
  }
  HIDWORD(v87) = v6;
  *(void *)(a1 + 88) = 1;
  int v7 = *(_DWORD *)(a1 + 112);
  unsigned int v8 = *(_DWORD *)(a1 + 116);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v83 = v9;
  int v84 = v7;
  unsigned int v85 = v8;
  *(void *)&long long buf = 0;
  *(void *)(a1 + 104) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(a1 + 112) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v87))
  {
    int v11 = v86;
    uint64_t v12 = 8 * HIDWORD(v87);
    do
    {
      uint64_t v13 = *(void *)v11;
      if (!*(void *)(*(void *)v11 + 16)
        || (int v14 = atomic_load((unsigned __int8 *)(a1 + 121)), v14 == 1)
        && (*(unsigned int (**)(void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16)))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          *(void *)&long long buf = v13;
          WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v13 + 24));
        }
        else
        {
          atomic_uchar *volatile v18 = *a2;
          int v19 = 1;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
          }
          if (WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
          {
            WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v90, a1);
            uint64_t v20 = v90;
            (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)v90 + 16))(&buf, v90);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (DWORD2(buf) != -1) {
              ((void (*)(void *, long long *))off_1F3C7B2A8[DWORD2(buf)])(v89, &buf);
            }
            DWORD2(buf) = -1;
            (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
          }
          else
          {
            WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, (unsigned int *)a1);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 24))(v13, a1, &buf);
            if (DWORD2(buf) != -1) {
              ((void (*)(unsigned int **, long long *))off_1F3C7B2A8[DWORD2(buf)])(&v90, &buf);
            }
          }
          char v21 = 0;
          atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (v21) {
            MEMORY[0x1E4E44220]();
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
        *(void *)&long long buf = v13;
        *((void *)&buf + 1) = v13;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
        uint64_t v102 = a1;
        uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v16 = &unk_1F3C7B2D8;
        *(_OWORD *)(v16 + 8) = buf;
        *(void *)(v16 + 24) = a1;
        *((void *)&buf + 1) = 0;
        uint64_t v102 = 0;
        uint16x8_t v90 = (unsigned int *)v16;
        (*(void (**)(uint64_t, unsigned int **))(*(void *)v15 + 16))(v15, &v90);
        int v17 = v90;
        uint16x8_t v90 = 0;
        if (v17) {
          (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
        }
      }
      int v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    uint64_t v9 = v83;
    unsigned int v8 = v85;
  }
  if (v8)
  {
    uint64_t v22 = v9 + 40 * v8;
    uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
    uint64_t v82 = v22;
    do
    {
      uint64_t v24 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint16x8_t v90 = (unsigned int *)v24;
      long long v25 = *(_OWORD *)(v9 + 24);
      long long v91 = *(_OWORD *)(v9 + 8);
      long long v92 = v25;
      if (v24) {
        atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
      }
      char v26 = 0;
      v89[0] = 0;
      v89[1] = 0;
      v89[2] = "<chained promise>";
      v89[3] = 0;
      uint64_t v27 = (WTF::NativePromiseBase *)(v24 + 48);
      size_t v93 = (WTF::Lock *)(v24 + 48);
      char v94 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
      if (v26) {
        uint64_t v27 = (WTF::NativePromiseBase *)MEMORY[0x1E4E44220](v27);
      }
      uint64_t v28 = (unsigned char *)WTF::NativePromiseBase::logChannel(v27);
      uint64_t v29 = v28;
      if (!*v28 || v28[16] < 4u) {
        goto LABEL_123;
      }
      WTF::Logger::LogSiteIdentifier::toString(&v99, (WTF::Logger::LogSiteIdentifier *)v89);
      WTF::String::String((WTF::String *)&v98, " settling chained promise ");
      unint64_t result = WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v24);
      if (v99)
      {
        int v31 = *(_DWORD *)(v99 + 4);
        uint64_t v32 = (uint64_t)v98;
        if (v98) {
          goto LABEL_36;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (uint64_t)v98;
        if (v98)
        {
LABEL_36:
          int v33 = *(_DWORD *)(v32 + 4);
          uint64_t v34 = v97;
          if (v97) {
            goto LABEL_37;
          }
          goto LABEL_41;
        }
      }
      int v33 = 0;
      uint64_t v34 = v97;
      if (v97)
      {
LABEL_37:
        int v35 = *(_DWORD *)(v34 + 4);
        if ((v35 | v33) < 0) {
          goto LABEL_152;
        }
        goto LABEL_42;
      }
LABEL_41:
      int v35 = 0;
      if (v33 < 0) {
        goto LABEL_152;
      }
LABEL_42:
      BOOL v36 = __OFADD__(v33, v35);
      int v37 = v33 + v35;
      char v38 = v36;
      if (v31 < 0 || (v38 & 1) != 0 || (unsigned int v39 = v31 + v37, __OFADD__(v31, v37)))
      {
LABEL_152:
        __break(0xC471u);
        return result;
      }
      if (v99 && (*(unsigned char *)(v99 + 16) & 4) == 0)
      {
        int v40 = 0;
        goto LABEL_58;
      }
      if (v32)
      {
        unsigned int v41 = *(_DWORD *)(v32 + 16);
        int v40 = (v41 >> 2) & 1;
        if (v34 && (v41 & 4) != 0) {
LABEL_56:
        }
          int v40 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
      }
      else
      {
        if (v34) {
          goto LABEL_56;
        }
        int v40 = 1;
      }
LABEL_58:
      unint64_t result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v39, v40, v99, v32, v34);
      unint64_t v100 = (WTF::StringImpl *)buf;
      if (!(void)buf) {
        goto LABEL_152;
      }
      uint64_t v97 = 0;
      if (!v34) {
        goto LABEL_62;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_62:
        unint64_t v43 = v98;
        size_t v98 = 0;
        if (!v43) {
          goto LABEL_67;
        }
        goto LABEL_65;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v42);
      unint64_t v43 = v98;
      size_t v98 = 0;
      if (!v43) {
        goto LABEL_67;
      }
LABEL_65:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_67:
        uint64_t v44 = (WTF::StringImpl *)v99;
        uint64_t v99 = 0;
        if (!v44) {
          goto LABEL_72;
        }
        goto LABEL_70;
      }
      WTF::StringImpl::destroy(v43, v42);
      uint64_t v44 = (WTF::StringImpl *)v99;
      uint64_t v99 = 0;
      if (!v44) {
        goto LABEL_72;
      }
LABEL_70:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_72:
        int v45 = *((void *)v29 + 4);
        uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        if (!v46) {
          goto LABEL_81;
        }
        goto LABEL_75;
      }
      WTF::StringImpl::destroy(v44, v42);
      int v45 = *((void *)v29 + 4);
      uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (!v46) {
        goto LABEL_81;
      }
LABEL_75:
      WTF::String::utf8();
      if (v95) {
        char v48 = (char *)v95 + 16;
      }
      else {
        char v48 = 0;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl(&dword_1E1345000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v46 = v95;
      unint64_t v95 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
          if (!*v29) {
            goto LABEL_120;
          }
          goto LABEL_82;
        }
        --*(_DWORD *)v46;
      }
LABEL_81:
      if (!*v29) {
        goto LABEL_120;
      }
LABEL_82:
      if (v29[16] >= 4u)
      {
        do
        {
          int v49 = *v23;
          if (v49) {
            goto LABEL_120;
          }
          int v50 = *v23;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        }
        while (v50 != v49);
        uint64_t v51 = WTF::Logger::observers(v46);
        uint64_t v52 = *(unsigned int *)(v51 + 12);
        if (v52)
        {
          uint64_t v53 = *(uint64_t **)v51;
          uint64_t v54 = *(void *)v51 + 8 * v52;
          while (1)
          {
            uint64_t v55 = *v53;
            LODWORD(buf) = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v89);
            LODWORD(v102) = 0;
            WTF::String::String((WTF::String *)&v103, " settling chained promise ");
            int v104 = 0;
            WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(v105, v24);
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            size_t v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
            LODWORD(v96) = 3;
            unint64_t v95 = v56;
            uint64_t v57 = HIDWORD(v96);
            *((_DWORD *)v56 + 4 * HIDWORD(v96)) = buf;
            uint64_t v58 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              **((_DWORD **)&buf + 1) += 2;
            }
            *((void *)v56 + 2 * v57 + 1) = v58;
            *((_DWORD *)v56 + 4 * (v57 + 1)) = v102;
            unint64_t v59 = v103;
            if (v103) {
              *(_DWORD *)v103 += 2;
            }
            *((void *)v56 + 2 * (v57 + 1) + 1) = v59;
            *((_DWORD *)v56 + 4 * (v57 + 2)) = v104;
            uint64_t v60 = v105[0];
            if (v105[0]) {
              *(_DWORD *)v105[0] += 2;
            }
            *((void *)v56 + 2 * (v57 + 2) + 1) = v60;
            HIDWORD(v96) = v57 + 3;
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v55 + 16))(v55, v29, 4, &v95);
            uint64_t v61 = v95;
            if (HIDWORD(v96))
            {
              uint64_t v62 = 16 * HIDWORD(v96);
              int v63 = (WTF::StringImpl **)((char *)v95 + 8);
              do
              {
                int v64 = *v63;
                _WORD *v63 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v47);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                v63 += 2;
                v62 -= 16;
              }
              while (v62);
              uint64_t v61 = v95;
            }
            if (v61)
            {
              unint64_t v95 = 0;
              LODWORD(v96) = 0;
              WTF::fastFree(v61, v47);
            }
            int v65 = (WTF::StringImpl *)v105[0];
            v105[0] = 0;
            if (!v65) {
              goto LABEL_108;
            }
            if (*(_DWORD *)v65 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v65, v47);
            int v66 = v103;
            int8x16x2_t v103 = 0;
            if (!v66) {
              goto LABEL_113;
            }
LABEL_111:
            if (*(_DWORD *)v66 != 2)
            {
              *(_DWORD *)v66 -= 2;
LABEL_113:
              size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v67) {
                goto LABEL_116;
              }
              goto LABEL_88;
            }
            WTF::StringImpl::destroy(v66, v47);
            size_t v67 = (WTF::StringImpl *)*((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v67)
            {
LABEL_116:
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v47);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
LABEL_88:
            if (++v53 == (uint64_t *)v54) {
              goto LABEL_118;
            }
          }
          *(_DWORD *)v65 -= 2;
LABEL_108:
          int v66 = v103;
          int8x16x2_t v103 = 0;
          if (!v66) {
            goto LABEL_113;
          }
          goto LABEL_111;
        }
LABEL_118:
        int v68 = 1;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
        uint64_t v22 = v82;
        if (v68 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
        }
      }
LABEL_120:
      unint64_t v69 = v100;
      unint64_t v100 = 0;
      if (!v69) {
        goto LABEL_123;
      }
      if (*(_DWORD *)v69 != 2)
      {
        *(_DWORD *)v69 -= 2;
LABEL_123:
        uint64_t v70 = v24 + 56;
        uint64_t v71 = *(unsigned int *)(v24 + 72);
        uint64_t v72 = *(unsigned int *)(a1 + 72);
        if (v71 != -1) {
          goto LABEL_124;
        }
        goto LABEL_127;
      }
      WTF::StringImpl::destroy(v69, v47);
      uint64_t v70 = v24 + 56;
      uint64_t v71 = *(unsigned int *)(v24 + 72);
      uint64_t v72 = *(unsigned int *)(a1 + 72);
      if (v71 != -1)
      {
LABEL_124:
        if (v72 != -1) {
          goto LABEL_128;
        }
        ((void (*)(long long *, uint64_t))off_1F3C7B290[v71])(&buf, v70);
        *(_DWORD *)(v24 + 72) = -1;
        goto LABEL_129;
      }
LABEL_127:
      if (v72 != -1)
      {
LABEL_128:
        *(void *)&long long buf = v70;
        ((void (*)(long long *))off_1F3C7B2F0[v72])(&buf);
      }
LABEL_129:
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v24, &v93);
      if (v94
        && (unint64_t v73 = v93,
            int v74 = 1,
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v93, (unsigned __int8 *)&v74, 0, memory_order_release, memory_order_relaxed), v74 != 1))
      {
        WTF::Lock::unlockSlow(v73);
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1)
        {
LABEL_132:
          int8x16_t v76 = v90;
          if (v90) {
            goto LABEL_133;
          }
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v75 = (unsigned int *)(v24 + 8);
        if (atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_132;
        }
      }
      atomic_store(1u, v75);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      int8x16_t v76 = v90;
      if (v90)
      {
LABEL_133:
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v76);
        uint16x8_t v90 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v76 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v76 + 2);
          (*(void (**)(unsigned int *))(*(void *)v76 + 16))(v76);
        }
      }
LABEL_27:
      v9 += 40;
    }
    while (v9 != v22);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v10);
  if (HIDWORD(v87))
  {
    char v78 = v86;
    uint64_t v79 = 8 * HIDWORD(v87);
    do
    {
      size_t v80 = *(unsigned int **)v78;
      *(void *)char v78 = 0;
      if (v80 && atomic_fetch_add((atomic_uint *volatile)v80 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v80 + 2);
        (*(void (**)(unsigned int *))(*(void *)v80 + 8))(v80);
      }
      char v78 = (WTF *)((char *)v78 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  unint64_t result = v86;
  if (&v88 != (uint64_t *)v86 && v86 != 0)
  {
    size_t v86 = 0;
    LODWORD(v87) = 0;
    return (WTF *)WTF::fastFree(result, v77);
  }
  return result;
}

void sub_1E14290BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v32 = *(unsigned int *)(v30 - 152);
  if (v32 != -1) {
    (*(void (**)(char *, uint64_t))(v29 + 8 * v32))(&a28, v30 - 160);
  }
  char v33 = 0;
  atomic_compare_exchange_strong_explicit(*v28, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
  if (v33) {
    MEMORY[0x1E4E44220]();
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v34);
  _Unwind_Resume(a1);
}

void sub_1E1429180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::Lock *a33,char a34,WTF *a35,int a36)
{
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(void *)v36 + 16))(v36);
    }
  }
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a28);
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v38);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v39);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  }
  return result;
}

BOOL WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  BOOL v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](a1 + 48);
    int v5 = *(_DWORD *)(a1 + 72);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 72);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return v5 == 2;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v5 == 2;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  BOOL v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    unint64_t result = MEMORY[0x1E4E44220](a2 + 48);
    if (*(_DWORD *)(a2 + 72) == 2)
    {
LABEL_3:
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *BOOL v3 = v6;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a2 + 72) == 2)
  {
    goto LABEL_3;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_7:
  return WTF::Lock::unlockSlow(v5);
}

void sub_1E1429650(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 12);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a2 + 48, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (!v4)
  {
    if (a2[18] == 1) {
      goto LABEL_3;
    }
LABEL_8:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return WTF::Lock::unlockSlow(v5);
  }
  unint64_t result = MEMORY[0x1E4E44220](a2 + 12);
  if (a2[18] != 1) {
    goto LABEL_8;
  }
LABEL_3:
  *(unsigned char *)uint64_t v3 = 0;
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v6 = a2[16];
  if (v6 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, unsigned int *))off_1F3C7B2B8[v6])(v8, v3, a2 + 14);
    *(_DWORD *)(v3 + 8) = v6;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    return WTF::Lock::unlockSlow(v5);
  }
  return result;
}

void sub_1E1429754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v14 + 8);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7B2A8[v16])(&a13, v14);
  }
  *(_DWORD *)(v14 + 8) = -1;
  int v17 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v60, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v59, a2);
  WTF::String::String((WTF::String *)&v58, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v56, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, a4);
  WTF::String::String((WTF::String *)&v54, "]");
  int v7 = v59;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v61, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54);
  if (!v61)
  {
    __break(0xC471u);
    return result;
  }
  char v10 = v54;
  uint64_t v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      int v11 = v55;
      uint64_t v55 = 0;
      if (!v11) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  int v11 = v55;
  uint64_t v55 = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v56;
    size_t v56 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v56;
  size_t v56 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t v13 = v57;
    uint64_t v57 = 0;
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t v13 = v57;
  uint64_t v57 = 0;
  if (!v13)
  {
LABEL_20:
    uint64_t v14 = v58;
    uint64_t v58 = 0;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  uint64_t v14 = v58;
  uint64_t v58 = 0;
  if (!v14) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    unint64_t v59 = 0;
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  unint64_t v59 = 0;
  if (!v7)
  {
LABEL_30:
    uint64_t v15 = v60;
    uint64_t v60 = 0;
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  uint64_t v15 = v60;
  uint64_t v60 = 0;
  if (!v15) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v17) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  uint64_t v16 = *(NSObject **)(a1 + 32);
  int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!v17) {
    goto LABEL_44;
  }
LABEL_38:
  WTF::String::utf8();
  if (v52) {
    int v19 = (char *)v52 + 16;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)long long buf = 136446210;
  *(void *)int v63 = v19;
  _os_log_impl(&dword_1E1345000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  int v17 = v52;
  uint64_t v52 = 0;
  if (!v17)
  {
LABEL_44:
    if (*(unsigned char *)a1) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  int v17 = (WTF *)WTF::fastFree(v17, v18);
  if (*(unsigned char *)a1)
  {
LABEL_45:
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v21 = *v20;
        if (v21) {
          goto LABEL_112;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v22 != v21);
      uint64_t v23 = WTF::Logger::observers(v17);
      uint64_t v24 = *(unsigned int *)(v23 + 12);
      if (v24)
      {
        long long v25 = *(uint64_t **)v23;
        uint64_t v50 = *(void *)v23 + 8 * v24;
        while (1)
        {
          uint64_t v26 = *v25;
          *(_DWORD *)long long buf = 0;
          WTF::String::String((WTF::String *)&v63[4], "ThenCallback disconnected from ");
          int v64 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v65, a2);
          int v66 = 0;
          WTF::String::String((WTF::String *)&v67, " aborting [callback:");
          int v68 = 0;
          WTF::LogArgument<void const*>::toString();
          int v70 = 0;
          WTF::String::String((WTF::String *)&v71, " callSite:");
          int v72 = 0;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v73, a4);
          int v74 = 0;
          WTF::String::String((WTF::String *)v75, "]");
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
          LODWORD(v53) = 7;
          uint64_t v52 = v27;
          uint64_t v28 = HIDWORD(v53);
          *((_DWORD *)v27 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
          uint64_t v29 = *(void *)&v63[4];
          if (*(void *)&v63[4]) {
            **(_DWORD **)&v63[4] += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v64;
          uint64_t v30 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          *((_DWORD *)v27 + 4 * (v28 + 2)) = v66;
          int v31 = v67;
          if (v67) {
            *(_DWORD *)v67 += 2;
          }
          *((void *)v27 + 2 * (v28 + 2) + 1) = v31;
          *((_DWORD *)v27 + 4 * (v28 + 3)) = v68;
          uint64_t v32 = v69;
          if (v69) {
            *(_DWORD *)v69 += 2;
          }
          *((void *)v27 + 2 * (v28 + 3) + 1) = v32;
          *((_DWORD *)v27 + 4 * (v28 + 4)) = v70;
          char v33 = v71;
          if (v71) {
            *(_DWORD *)v71 += 2;
          }
          *((void *)v27 + 2 * (v28 + 4) + 1) = v33;
          *((_DWORD *)v27 + 4 * (v28 + 5)) = v72;
          uint64_t v34 = v73;
          if (v73) {
            *(_DWORD *)v73 += 2;
          }
          *((void *)v27 + 2 * (v28 + 5) + 1) = v34;
          *((_DWORD *)v27 + 4 * (v28 + 6)) = v74;
          int v35 = v75[0];
          if (v75[0]) {
            *(_DWORD *)v75[0] += 2;
          }
          *((void *)v27 + 2 * (v28 + 6) + 1) = v35;
          HIDWORD(v53) = v28 + 7;
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, a1, 4, &v52);
          BOOL v36 = v52;
          if (HIDWORD(v53))
          {
            uint64_t v37 = a2;
            uint64_t v38 = a3;
            uint64_t v39 = 16 * HIDWORD(v53);
            int v40 = (WTF::StringImpl **)((char *)v52 + 8);
            do
            {
              unsigned int v41 = *v40;
              _WORD *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2) {
                  WTF::StringImpl::destroy(v41, v18);
                }
                else {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v40 += 2;
              v39 -= 16;
            }
            while (v39);
            BOOL v36 = v52;
            a3 = v38;
            a2 = v37;
          }
          if (v36)
          {
            uint64_t v52 = 0;
            LODWORD(v53) = 0;
            WTF::fastFree(v36, v18);
          }
          unint64_t v42 = v75[0];
          v75[0] = 0;
          if (!v42) {
            goto LABEL_80;
          }
          if (*(_DWORD *)v42 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v42, v18);
          unint64_t v43 = v73;
          unint64_t v73 = 0;
          if (!v43) {
            goto LABEL_85;
          }
LABEL_83:
          if (*(_DWORD *)v43 != 2)
          {
            *(_DWORD *)v43 -= 2;
LABEL_85:
            uint64_t v44 = v71;
            uint64_t v71 = 0;
            if (!v44) {
              goto LABEL_90;
            }
            goto LABEL_88;
          }
          WTF::StringImpl::destroy(v43, v18);
          uint64_t v44 = v71;
          uint64_t v71 = 0;
          if (!v44) {
            goto LABEL_90;
          }
LABEL_88:
          if (*(_DWORD *)v44 != 2)
          {
            *(_DWORD *)v44 -= 2;
LABEL_90:
            int v45 = v69;
            unint64_t v69 = 0;
            if (!v45) {
              goto LABEL_95;
            }
            goto LABEL_93;
          }
          WTF::StringImpl::destroy(v44, v18);
          int v45 = v69;
          unint64_t v69 = 0;
          if (!v45) {
            goto LABEL_95;
          }
LABEL_93:
          if (*(_DWORD *)v45 != 2)
          {
            *(_DWORD *)v45 -= 2;
LABEL_95:
            uint64_t v46 = v67;
            size_t v67 = 0;
            if (!v46) {
              goto LABEL_100;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v45, v18);
          uint64_t v46 = v67;
          size_t v67 = 0;
          if (!v46) {
            goto LABEL_100;
          }
LABEL_98:
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_100:
            uint64_t v47 = v65;
            int v65 = 0;
            if (!v47) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          WTF::StringImpl::destroy(v46, v18);
          uint64_t v47 = v65;
          int v65 = 0;
          if (!v47) {
            goto LABEL_105;
          }
LABEL_103:
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
LABEL_105:
            char v48 = *(WTF::StringImpl **)&v63[4];
            *(void *)&v63[4] = 0;
            if (v48) {
              goto LABEL_108;
            }
            goto LABEL_52;
          }
          WTF::StringImpl::destroy(v47, v18);
          char v48 = *(WTF::StringImpl **)&v63[4];
          *(void *)&v63[4] = 0;
          if (v48)
          {
LABEL_108:
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v18);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_52:
          if (++v25 == (uint64_t *)v50) {
            goto LABEL_110;
          }
        }
        *(_DWORD *)v42 -= 2;
LABEL_80:
        unint64_t v43 = v73;
        unint64_t v73 = 0;
        if (!v43) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
LABEL_110:
      int v49 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
      if (v49 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_112:
  unint64_t result = v61;
  uint64_t v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E1429F70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  int v46 = 1;
  atomic_compare_exchange_strong_explicit(v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    uint64_t v47 = a30;
    if (!a30) {
      goto LABEL_4;
    }
  }
  else
  {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    uint64_t v47 = a30;
    if (!a30) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy(v47, a2);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v47 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E142A2C0()
{
  int v1 = 1;
  atomic_compare_exchange_strong_explicit(v0, (unsigned __int8 *)&v1, 0, memory_order_release, memory_order_relaxed);
  if (v1 == 1) {
    JUMPOUT(0x1E142A29CLL);
  }
  JUMPOUT(0x1E142A200);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7B2D8;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (atomic_uint *)a1[2];
    a1[2] = 0;
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7B2D8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4)
    {
LABEL_5:
      int v5 = this;
      return WTF::fastFree(v5, a2);
    }
  }
  else
  {
    char v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  int v1 = (unsigned __int8 *)*((void *)a1 + 1);
  int v2 = v1[56];
  uint64_t v3 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v13 = *((void *)a1 + 1);
    unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v5 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v3, (uint64_t)&v13, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
    return result;
  }
  int v7 = (atomic_uchar *)(v3 + 48);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3 + 48);
    uint64_t v9 = *(unsigned int *)(v3 + 72);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
LABEL_11:
      uint64_t v10 = *((void *)a1 + 3);
      if (v9 == 2) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(v3 + 72);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_11;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  uint64_t v10 = *((void *)a1 + 3);
  if (v9 == 2)
  {
LABEL_12:
    char v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 48);
      if (*(_DWORD *)(v10 + 72) == 2)
      {
LABEL_14:
        uint64_t v9 = *(void *)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 == 1)
        {
LABEL_15:
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 16))(&v13, v9);
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v10, &v13);
          if (v14 != -1) {
            ((void (*)(char *, uint64_t *))off_1F3C7B2A8[v14])(&v15, &v13);
          }
          int v14 = -1;
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
LABEL_24:
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        goto LABEL_15;
      }
    }
    else if (*(_DWORD *)(v10 + 72) == 2)
    {
      goto LABEL_14;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    goto LABEL_24;
  }
LABEL_20:
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v13, (unsigned int *)v10);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v10, &v13);
  if (v14 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1F3C7B2A8[v14])(&v15, &v13);
  }
  return result;
}

void sub_1E142A76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1F3C7B2A8[a12])(&a17, &a10);
  }
  a12 = -1;
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void sub_1E142A7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  int v19 = 1;
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 16);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B290[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = (unsigned char *)a2;
      v19[0] = 0;
      int v20 = -1;
      uint64_t v7 = *(unsigned int *)(a3 + 8);
      if (v7 == -1)
      {
        int v8 = *(_DWORD *)(a2 + 8);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1) {
            return ((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C7B2A8[v20])(v21, v19);
          }
          return result;
        }
      }
      else
      {
        unint64_t result = ((uint64_t (*)(char *, unsigned char *, uint64_t))off_1F3C7B2B8[v7])(&v24, v19, a3);
        int v20 = v7;
        int v8 = *((_DWORD *)v6 + 2);
        if (v8 != -1 && v7 == v8)
        {
          unint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, unsigned char *))off_1F3C7B308[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if (v7 != 1)
        {
          int v14 = v19;
          v21[0] = 0;
          int v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 2) = -1;
            uint64_t v16 = *((unsigned int *)v14 + 2);
            if (v16 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B318[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 2) = v16;
              uint64_t v17 = *((unsigned int *)v14 + 2);
              if (v17 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B2A8[v17])(&v24, v14);
              }
            }
            *((_DWORD *)v14 + 2) = -1;
            int v18 = v22;
            if (v22 != -1)
            {
              unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B318[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 2) = v18;
              if (v22 != -1) {
                unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B2A8[v22])(&v24, v21);
              }
            }
            goto LABEL_42;
          }
LABEL_34:
          unint64_t result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1F3C7B2B8[v8])(&v23, v21, v6);
          int v22 = v8;
          uint64_t v15 = *((unsigned int *)v6 + 2);
          if (v15 != -1) {
            unint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1F3C7B2A8[v15])(&v24, v6);
          }
          goto LABEL_36;
        }
      }
      uint64_t v10 = v19;
      if (v8 == 1) {
        int v11 = 1;
      }
      else {
        int v11 = v7;
      }
      if (v8 == 1) {
        int v12 = v19;
      }
      else {
        int v12 = v6;
      }
      if (v8 == 1) {
        uint64_t v10 = v6;
      }
      BOOL v13 = v8 == -1;
      if (v8 == -1) {
        int v8 = -1;
      }
      else {
        int v8 = v11;
      }
      if (v13) {
        int v14 = v19;
      }
      else {
        int v14 = v12;
      }
      if (!v13) {
        uint64_t v6 = v10;
      }
      v21[0] = 0;
      int v22 = -1;
      if (v8 == -1) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))off_1F3C7B290[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  if (v9 != -1)
  {
    unint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7B2B8[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 8) = v9;
  }
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

void sub_1E142AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7B2A8[a16])(v16 - 33, &a14);
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7B2A8[a12])(v16 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E142ABBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7B2A8[v14])(&a12, v12);
  }
  *(_DWORD *)(v12 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7B290[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  unint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void WebCore::DummyStorageProvider::~DummyStorageProvider(WebCore::DummyStorageProvider *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (unsigned int *)*((void *)this + 1);
      *((void *)this + 1) = 0;
      if (!v4) {
        return;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4) {
    return;
  }
LABEL_7:
  if (atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
}

{
  WTF::StringImpl *v3;
  atomic_uint *v4;
  WTF *v5;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (atomic_uint *)*((void *)this + 1);
      *((void *)this + 1) = 0;
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4)
  {
LABEL_8:
    uint64_t v5 = this;
    goto LABEL_10;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    goto LABEL_8;
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  uint64_t v5 = this;
LABEL_10:
  WTF::fastFree(v5, a2);
}

void WebCore::DummySpeechRecognitionProvider::~DummySpeechRecognitionProvider(WebCore::DummySpeechRecognitionProvider *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::create(WebCore::ApplicationCacheStorage *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  uint64_t result = MEMORY[0x1E4E47340](v4, MEMORY[0x1E4F30980], MEMORY[0x1E4F30980]);
  *(void *)this = v4;
  return result;
}

void sub_1E142AED0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ApplicationCacheStorage **WTF::Ref<WebCore::ApplicationCacheStorage,WTF::RawPtrTraits<WebCore::ApplicationCacheStorage>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheStorage>>::~Ref(WebCore::ApplicationCacheStorage **a1, StringImpl *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<webApplicationCacheStorage(void)::$_0 &&>>()
{
  v0 = NSString;
  uint64_t v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
  if (!v1) {
    uint64_t v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName");
  }
  MEMORY[0x1E4E442D0](&v10, objc_msgSend(v0, "_webkit_localCacheDirectoryWithBundleIdentifier:", v1));
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebCore::SQLiteFileSystem::deleteDatabaseFile((WebCore::SQLiteFileSystem *)&v9, v2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v8, v3);
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (!v5)
  {
LABEL_6:
    uint64_t v6 = v9;
    char v9 = 0;
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v5, v4);
  uint64_t v6 = v9;
  char v9 = 0;
  if (!v6) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v4);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_14;
  }
  *(_DWORD *)v6 -= 2;
LABEL_11:
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (!result) {
    return result;
  }
LABEL_14:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E142B0CC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 16);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (WTF::StringImpl **)*((void *)this + 16);
      do
      {
        uint64_t v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          WTF::StringImpl *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, a2);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 15);
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  WebCore::SQLiteDatabase::~SQLiteDatabase((WebCore::ApplicationCacheStorage *)((char *)this + 56));
  char v9 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v9)
  {
LABEL_16:
    uint64_t v10 = (WTF::StringImpl *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v9, v8);
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v10) {
    goto LABEL_21;
  }
LABEL_19:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v8);
    int v11 = (WTF::StringImpl *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v11) {
      return;
    }
    goto LABEL_24;
  }
  *(_DWORD *)v10 -= 2;
LABEL_21:
  int v11 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v11) {
    return;
  }
LABEL_24:
  if (*(_DWORD *)v11 == 2) {
    WTF::StringImpl::destroy(v11, v8);
  }
  else {
    *(_DWORD *)v11 -= 2;
  }
}

uint64_t WebCore::TextIndicatorData::TextIndicatorData(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(result + 16) = a2[1];
  *(_OWORD *)(result + 32) = v5;
  *(_OWORD *)uint64_t result = v4;
  uint64_t v6 = *((unsigned int *)a2 + 15);
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 60) = v6;
  if (v6)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v3 + 56) = v6;
    *(void *)(v3 + 48) = v7;
    uint64_t v8 = *((unsigned int *)a2 + 15);
    if (v8)
    {
      char v9 = (long long *)*((void *)a2 + 6);
      uint64_t v10 = 16 * v8;
      do
      {
        long long v11 = *v9++;
        *v7++ = v11;
        v10 -= 16;
      }
      while (v10);
    }
  }
  *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
  uint64_t v12 = *((void *)a2 + 9);
  if (v12) {
    ++*(_DWORD *)(v12 + 8);
  }
  *(void *)(v3 + 72) = v12;
  uint64_t v13 = *((void *)a2 + 10);
  if (v13) {
    ++*(_DWORD *)(v13 + 8);
  }
  *(void *)(v3 + 80) = v13;
  uint64_t v14 = *((void *)a2 + 11);
  if (v14) {
    ++*(_DWORD *)(v14 + 8);
  }
  *(void *)(v3 + 88) = v14;
  WebCore::Color::Color();
  *(_DWORD *)(v3 + 104) = *((_DWORD *)a2 + 26);
  return v3;
}

void sub_1E142B384(_Unwind_Exception *exception_object, void *a2)
{
  long long v5 = *(_DWORD **)(v2 + 88);
  *(void *)(v2 + 88) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = *(_DWORD **)(v2 + 80);
  *(void *)(v2 + 80) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t v7 = *(_DWORD **)(v2 + 72);
  *(void *)(v2 + 72) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_optional_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  WebCore::TextIndicatorData::~TextIndicatorData(v0);
}

void WebCore::TextIndicatorData::~TextIndicatorData(WebCore::TextIndicatorData *this, void *a2)
{
  uint64_t v3 = *((void *)this + 12);
  if ((v3 & 0x8000000000000) != 0
    && (long long v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL),
        atomic_fetch_add((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
    long long v5 = (_DWORD *)*((void *)this + 11);
    *((void *)this + 11) = 0;
    if (!v5) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v5 = (_DWORD *)*((void *)this + 11);
    *((void *)this + 11) = 0;
    if (!v5) {
      goto LABEL_7;
    }
  }
  if (v5[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  }
  else {
    --v5[2];
  }
LABEL_7:
  uint64_t v6 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v6)
  {
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      uint64_t v7 = (_DWORD *)*((void *)this + 9);
      *((void *)this + 9) = 0;
      if (!v7) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    --v6[2];
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (!v7)
  {
LABEL_15:
    uint64_t v8 = (WTF *)*((void *)this + 6);
    if (!v8) {
      return;
    }
    goto LABEL_16;
  }
LABEL_13:
  if (v7[2] != 1)
  {
    --v7[2];
    goto LABEL_15;
  }
  (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  uint64_t v8 = (WTF *)*((void *)this + 6);
  if (v8)
  {
LABEL_16:
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, a2);
  }
}

double WebViewRenderingUpdateScheduler::operator delete(WTF *this, void *a2)
{
  uint64_t v3 = (WebCore::RunLoopObserver *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v3);
    WTF::fastFree(v4, v5);
  }
  uint64_t v6 = (WebCore::RunLoopObserver *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v6);
    WTF::fastFree(v7, v8);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    char v9 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  else
  {
    *(void *)this = 0;
  }
  if (*((_DWORD *)this + 2))
  {
    double result = 0.0;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
  return result;
}

uint64_t PAL::TextEncoding::encodeForURLParsing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4173D08](a1, a2, a3, 1, 0);
}

void PAL::TextEncoding::~TextEncoding(PAL::TextEncoding *this)
{
}

void WebCore::FontAttributes::~FontAttributes(WebCore::FontAttributes *this, StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 17);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    long long v5 = (WTF::StringImpl **)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v6 = *v5;
      void *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  uint64_t v7 = (WTF *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 0x8000000000000) != 0
    && (char v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL),
        atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
    uint64_t v10 = *((void *)this + 2);
    if ((v10 & 0x8000000000000) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 2);
    if ((v10 & 0x8000000000000) == 0) {
      goto LABEL_15;
    }
  }
  long long v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, a2);
  }
LABEL_15:
  uint64_t v12 = *((void *)this + 1);
  if ((v12 & 0x8000000000000) != 0
    && (uint64_t v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL),
        atomic_fetch_add((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, a2);
    uint64_t v14 = *(_DWORD **)this;
    *(void *)this = 0;
    if (!v14) {
      return;
    }
  }
  else
  {
    uint64_t v14 = *(_DWORD **)this;
    *(void *)this = 0;
    if (!v14) {
      return;
    }
  }
  if (*v14 == 1)
  {
    uint64_t v15 = (WTF *)MEMORY[0x1E4E479D0]();
    WTF::fastFree(v15, v16);
  }
  else
  {
    --*v14;
  }
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(const char **a1, const char **a2)
{
  if (!a1) {
    return 0;
  }
  unsigned int v3 = *((_DWORD *)a1 - 2);
  uint64_t v4 = (unsigned __int8 *)a2[1];
  if (!v4)
  {
    unsigned int v15 = 0;
    uint64_t v16 = a1;
    uint64_t v17 = *a1;
    if (*a1) {
      goto LABEL_15;
    }
    return 0;
  }
  unsigned int v5 = -1640531527;
  unsigned int v6 = v4 - 1;
  if (v4 == 1) {
    goto LABEL_10;
  }
  uint64_t v7 = *a2;
  if (v6 == 1) {
    goto LABEL_9;
  }
  unsigned int v8 = v6 >> 1;
  char v9 = *a2;
  do
  {
    unsigned int v10 = v5 + *(unsigned __int8 *)v9;
    int v11 = (v10 << 16) ^ (*((unsigned __int8 *)v9 + 1) << 11);
    unsigned int v5 = (v11 ^ v10) + ((v11 ^ v10) >> 11);
    v9 += 2;
    --v8;
  }
  while (v8);
  if (v6)
  {
    v7 += 2 * (v6 >> 1);
LABEL_9:
    unsigned int v5 = ((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11))
       + (((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11)) >> 17);
  }
LABEL_10:
  unsigned int v12 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  unsigned int v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  int v14 = v13 ^ (v13 << 10);
  if (!v14) {
    int v14 = 0x800000;
  }
  unsigned int v15 = v14 & v3;
  uint64_t v16 = &a1[3 * (v14 & v3)];
  uint64_t v17 = *v16;
  if (!*v16) {
    return 0;
  }
LABEL_15:
  int v18 = *a2;
  if (*a2)
  {
    int v19 = 1;
    while (v17 == (const char *)-1 || strcmp(v17, v18))
    {
      unsigned int v15 = (v15 + v19) & v3;
      uint64_t v16 = &a1[3 * v15];
      uint64_t v17 = *v16;
      ++v19;
      if (!*v16) {
        return 0;
      }
    }
  }
  else if (v17 == (const char *)-1 || v17 != 0)
  {
    for (int i = 1; ; ++i)
    {
      unsigned int v15 = (v15 + i) & v3;
      uint64_t v16 = &a1[3 * v15];
      int v22 = *v16;
      if (!*v16) {
        break;
      }
      if (v22 != (const char *)-1 && v22 == 0) {
        return v16;
      }
    }
    return 0;
  }
  return v16;
}

void *WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unsigned int v3 = (atomic_uint *)a1[1];
  *a1 = &unk_1F3C7B3A0;
  a1[1] = 0;
  if (!v3 || atomic_fetch_add(v3, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3);
  WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1F3C7B3A0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

void WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = WebThreadLock();
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      char v5 = *(unsigned char *)(v4 + 40);
      *(_WORD *)(v4 + 40) = 1;
      unsigned int v6 = (void *)MEMORY[0x1E4E4B3F0](v2);
      [*(id *)(v4 + 16) _updateRendering];
      if (*(unsigned char *)(v4 + 42))
      {
        if (*(unsigned char *)(v4 + 41)) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v7 = *(void *)(v4 + 16);
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke;
        v10[3] = &unk_1E6D97D30;
        v10[4] = v7;
        [MEMORY[0x1E4F39CF8] addCommitHandler:v10 forPhase:0];
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3221225472;
        v9[2] = ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke_2;
        v9[3] = &unk_1E6D97D30;
        v9[4] = v7;
        [MEMORY[0x1E4F39CF8] addCommitHandler:v9 forPhase:2];
        *(unsigned char *)(v4 + 42) = 1;
        if (*(unsigned char *)(v4 + 41)) {
          goto LABEL_8;
        }
      }
      WebCore::RunLoopObserver::invalidate(*(WebCore::RunLoopObserver **)(v4 + 24));
LABEL_8:
      *(unsigned char *)(v4 + 40) = v5;
      int v8 = *(_DWORD *)(v4 + 8);
      if (v8) {
        *(_DWORD *)(v4 + 8) = v8 - 1;
      }
      else {
        __break(0xC471u);
      }
    }
  }
}

void sub_1E142BC14(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 40) = v2;
  int v3 = *(_DWORD *)(v1 + 8);
  if (v3)
  {
    *(_DWORD *)(v1 + 8) = v3 - 1;
    _Unwind_Resume(a1);
  }
  __break(0xC471u);
}

void *WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  int v3 = (atomic_uint *)a1[1];
  *a1 = &unk_1F3C7B3C8;
  a1[1] = 0;
  if (!v3 || atomic_fetch_add(v3, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3);
  WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1F3C7B3C8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

void WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = WebThreadLock();
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      char v5 = (void *)MEMORY[0x1E4E4B3F0](v2);
      [*(id *)(v4 + 16) _didCompleteRenderingFrame];
      WebCore::RunLoopObserver::invalidate(*(WebCore::RunLoopObserver **)(v4 + 32));
      int v6 = *(_DWORD *)(v4 + 8);
      if (v6) {
        *(_DWORD *)(v4 + 8) = v6 - 1;
      }
      else {
        __break(0xC471u);
      }
    }
  }
}

void sub_1E142BDDC(_Unwind_Exception *a1)
{
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2)
  {
    *(_DWORD *)(v1 + 8) = v2 - 1;
    _Unwind_Resume(a1);
  }
  __break(0xC471u);
}

void WebCore::DummySpeechRecognitionProvider::~DummySpeechRecognitionProvider(WebCore::DummySpeechRecognitionProvider *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = this;
    goto LABEL_6;
  }
  if (v3[2] != 1)
  {
    --v3[2];
    goto LABEL_4;
  }
  (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  uint64_t v4 = this;
LABEL_6:
  WTF::fastFree(v4, a2);
}

void *WebCore::DummySpeechRecognitionProvider::speechRecognitionConnection(WebCore::DummySpeechRecognitionProvider *this)
{
  double result = (void *)*((void *)this + 1);
  if (!result)
  {
    double result = (void *)WTF::fastMalloc((WTF *)0x10);
    void *result = &unk_1F3C7B450;
    result[1] = 1;
    uint64_t v3 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = result;
    if (v3)
    {
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
        return (void *)*((void *)this + 1);
      }
      else
      {
        --v3[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::DummyStorageProvider::storageConnection(WebCore::DummyStorageProvider *this)
{
  if (*((void *)this + 1)) {
    return *((void *)this + 1);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1F3C7B4D8;
  v3[1] = 1;
  uint64_t v4 = (atomic_uint *)*((void *)this + 1);
  *((void *)this + 1) = v3;
  if (!v4 || atomic_fetch_add(v4 + 2, 0xFFFFFFFF) != 1) {
    return *((void *)this + 1);
  }
  atomic_store(1u, (unsigned int *)v4 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  return *((void *)this + 1);
}

uint64_t WebCore::DummyStorageProvider::ensureMediaKeysStorageDirectoryForOrigin@<X0>(uint64_t this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, WTF::FileSystemImpl *a3@<X8>)
{
  uint64_t v4 = *(void *)(this + 16);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v8, a2);
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v7 = v8;
    int v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    return WTF::FileSystemImpl::makeAllDirectories(a3, (const WTF::String *)v6);
  }
  else
  {
    char v5 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v5 += 2;
    }
    *(void *)a3 = v5;
  }
  return this;
}

void sub_1E142C234(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  unsigned int v12 = *v10;
  *unsigned int v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::DummyStorageProvider::setMediaKeysStorageDirectory(WebCore::DummyStorageProvider *this, StringImpl *a2)
{
  uint64_t v3 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v3 += 2;
  }
  double result = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::getPersisted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
  return v4(v3);
}

void sub_1E142C34C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::persist(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
  return v4(v3);
}

void sub_1E142C404(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::fileSystemGetDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v5[0] = 6;
  uint64_t v6 = 0;
  int v7 = 1;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v3 + 16))(v3, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v7 != -1) {
    return ((uint64_t (*)(char *, char *))off_1F3C7B508[v7])(&v8, v5);
  }
  return result;
}

void sub_1E142C4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7B508[a11])(v12 - 17, &a9);
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::getEstimate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v5[0] = 6;
  uint64_t v6 = 0;
  int v7 = 1;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v3 + 16))(v3, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v7 != -1) {
    return ((uint64_t (*)(char *, char *))off_1F3C7B518[v7])(&v8, v5);
  }
  return result;
}

void sub_1E142C600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7B518[a11])(v12 - 17, &a9);
  }
  _Unwind_Resume(a1);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::Page>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x1E4E47DB0]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ64__WebView_WebPrivate__willEnterBackgroundWithCompletionHandler__EUb_E3__2vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C7B560;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ64__WebView_WebPrivate__willEnterBackgroundWithCompletionHandler__EUb_E3__2vJEED0Ev(const void **a1)
{
  *a1 = &unk_1F3C7B560;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ64__WebView_WebPrivate__willEnterBackgroundWithCompletionHandler__EUb_E3__2vJEE4callEv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

WebCore::EditingStyle *WTF::RefCounted<WebCore::EditingStyle>::deref(WebCore::EditingStyle *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::EditingStyle::~EditingStyle(result);
    return (WebCore::EditingStyle *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, StringImpl *a2)
{
  if (result[2] > (unint64_t)a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > (unint64_t)a2)
    {
      char v5 = (unsigned int **)(*(void *)result + 8 * (void)a2);
      uint64_t v6 = 8 * v4 - 8 * (void)a2;
      do
      {
        uint64_t result = *v5;
        _DWORD *v5 = 0;
        if (result)
        {
          if (*result == 2) {
            uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          }
          else {
            *result -= 2;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    int v7 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc(v7, (void *)(8 * (void)a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if ((unint64_t)a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * (void)a2));
      v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v7) {
        uint64_t result = (unsigned int *)memcpy(result, v7, 8 * v4);
      }
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(void *)uint64_t v3 = 0;
        v3[2] = 0;
        char v8 = v7;
      }
      else
      {
        char v8 = v7;
      }
      return (unsigned int *)WTF::fastFree(v8, a2);
    }
  }
  return result;
}

WTF::ASCIICaseInsensitiveHash **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = (WTF::ASCIICaseInsensitiveHash **)(v6 + 8 * v11);
      int v14 = *v13;
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = WTF::ASCIICaseInsensitiveHash::hash(v14, v10);
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v16;
            int v17 = ++v18 + v19;
          }
          while (*(void *)(v15 + 8 * v19));
          int v20 = (WTF::ASCIICaseInsensitiveHash **)(v15 + 8 * v19);
          *int v20 = 0;
          int v21 = *v13;
          unsigned int *v13 = 0;
          *int v20 = v21;
          int v22 = *v13;
          unsigned int *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v10);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v20;
          }
        }
        else
        {
          unsigned int *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::ASCIICaseInsensitiveHash::hash(WTF::ASCIICaseInsensitiveHash *this, const StringImpl *a2)
{
  unsigned int v2 = -1640531527;
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((unsigned int *)this + 1);
  if ((*((unsigned char *)this + 16) & 4) != 0)
  {
    if (v4 >= 2)
    {
      uint64_t v12 = 0;
      do
      {
        unsigned int v13 = v2 + *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(v3 + v12));
        unsigned int v14 = (v13 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(v3 + v12 + 1)) << 11) ^ v13;
        unsigned int v2 = v14 + (v14 >> 11);
        unint64_t v15 = v12 + 3;
        v12 += 2;
      }
      while (v15 < v4);
    }
    if (v4)
    {
      int v11 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(v4 + v3 - 1));
      goto LABEL_12;
    }
  }
  else
  {
    if (v4 >= 2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = (unsigned __int16 *)(v3 + 2 * v5);
        int v7 = *v6 | (32 * (*v6 - 65 < 0x1A));
        unsigned int v8 = (((v6[1] - 65 < 0x1A) << 16) | (v6[1] << 11)) ^ ((v2 + v7) << 16) ^ (v2 + v7);
        unsigned int v2 = v8 + (v8 >> 11);
        unint64_t v9 = v5 + 3;
        v5 += 2;
      }
      while (v9 < v4);
    }
    if (v4)
    {
      int v10 = *(unsigned __int16 *)(v3 + 2 * v4 - 2);
      int v11 = v10 | (32 * ((v10 - 65) < 0x1A));
LABEL_12:
      unsigned int v2 = ((v2 + v11) ^ ((v2 + v11) << 11)) + (((v2 + v11) ^ ((v2 + v11) << 11)) >> 17);
    }
  }
  unsigned int v16 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  unsigned int v17 = (v16 ^ (4 * v16)) + ((v16 ^ (4 * v16)) >> 15);
  unsigned int v18 = (v17 ^ (v17 << 10)) & 0xFFFFFF;
  if (v18) {
    return v18;
  }
  else {
    return 0x800000;
  }
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 4);
  if (v2 != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 16);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 **)(a2 + 8);
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    if ((v3 & 4) != 0)
    {
      if (!v2) {
        return 1;
      }
      if (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *v4) != *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *v5)) {
        return 0;
      }
      uint64_t v17 = 1;
      do
      {
        unint64_t v12 = v17;
        if (v2 == v17) {
          break;
        }
        int v18 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v4[v17]);
        int v19 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v5[v17++]);
      }
      while (v18 == v19);
    }
    else
    {
      if (!v2) {
        return 1;
      }
      if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *v4)) {
        return 0;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v11;
        if (v2 == v11) {
          break;
        }
        int v13 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v4[v11]);
        int v14 = *(unsigned __int16 *)&v5[2 * v11] | (32 * (*(unsigned __int16 *)&v5[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v14 == v13);
    }
    return v12 >= v2;
  }
  if ((v3 & 4) != 0)
  {
    if (!v2) {
      return 1;
    }
    if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *v5)) {
      return 0;
    }
    uint64_t v15 = 1;
    do
    {
      unint64_t v12 = v15;
      if (v2 == v15) {
        break;
      }
      int v16 = *(unsigned __int16 *)&v4[2 * v15] | (32 * (*(unsigned __int16 *)&v4[2 * v15] - 65 < 0x1A));
      ++v15;
    }
    while (v16 == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + v5[v12]));
    return v12 >= v2;
  }
  if (!v2) {
    return 1;
  }
  if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) != (*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A)))) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v2 == v6) {
      break;
    }
    int v8 = *(unsigned __int16 *)&v4[2 * v6] | (32 * (*(unsigned __int16 *)&v4[2 * v6] - 65 < 0x1A));
    int v9 = *(unsigned __int16 *)&v5[2 * v6] | (32 * (*(unsigned __int16 *)&v5[2 * v6] - 65 < 0x1A));
    ++v6;
  }
  while (v8 == v9);
  return v7 >= v2;
}

WTF::ASCIICaseInsensitiveHash **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = *a3;
  unsigned int v9 = WTF::ASCIICaseInsensitiveHash::hash(*a3, (const StringImpl *)a2);
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v9 & v7;
    int v14 = (WTF::ASCIICaseInsensitiveHash **)(v6 + 8 * (v9 & v7));
    uint64_t v15 = *v14;
    if (*v14 == (WTF::ASCIICaseInsensitiveHash *)-1)
    {
      uint64_t v11 = (WTF::ASCIICaseInsensitiveHash **)(v6 + 8 * v13);
      goto LABEL_6;
    }
    if (!v15) {
      break;
    }
    uint64_t result = (WTF::ASCIICaseInsensitiveHash **)WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)v15, (uint64_t)v8);
    if (result)
    {
      char v17 = 0;
      uint64_t v18 = v6 + 8 * *(unsigned int *)(v6 - 4);
      goto LABEL_30;
    }
LABEL_6:
    unsigned int v9 = i + v13;
  }
  if (v11)
  {
    *uint64_t v11 = 0;
    --*(_DWORD *)(*a2 - 16);
    int v8 = *a3;
    int v14 = v11;
  }
  *a3 = 0;
  uint64_t result = (WTF::ASCIICaseInsensitiveHash **)*v14;
  WTF::ASCIICaseInsensitiveHash *v14 = v8;
  if (!result)
  {
LABEL_16:
    uint64_t v19 = *a2;
    if (!*a2) {
      goto LABEL_24;
    }
LABEL_17:
    ++*(_DWORD *)(v19 - 12);
    uint64_t v20 = *a2;
    if (!*a2) {
      goto LABEL_25;
    }
LABEL_18:
    uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 > 0x400) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_16;
  }
  uint64_t result = (WTF::ASCIICaseInsensitiveHash **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
  uint64_t v19 = *a2;
  if (*a2) {
    goto LABEL_17;
  }
LABEL_24:
  *(_DWORD *)(v19 - 12) = 1;
  uint64_t v20 = *a2;
  if (*a2) {
    goto LABEL_18;
  }
LABEL_25:
  uint64_t v21 = *(unsigned int *)(v20 - 16);
  unint64_t v22 = *(unsigned int *)(v20 - 4);
  if (v22 > 0x400)
  {
LABEL_26:
    if (v22 <= 2 * v21)
    {
LABEL_27:
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v14);
      int v14 = result;
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_28;
      }
LABEL_22:
      unint64_t v22 = 0;
    }
    goto LABEL_29;
  }
LABEL_19:
  if (3 * v22 <= 4 * v21)
  {
    if (v22) {
      goto LABEL_27;
    }
    uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
    int v14 = result;
    uint64_t v20 = *a2;
    if (!*a2) {
      goto LABEL_22;
    }
LABEL_28:
    unint64_t v22 = *(unsigned int *)(v20 - 4);
  }
LABEL_29:
  uint64_t v18 = v20 + 8 * v22;
  char v17 = 1;
LABEL_30:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 16) = v17;
  return result;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RetainPtr<objc_object *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RetainPtr<objc_object *>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RetainPtr<objc_object *>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RetainPtr<objc_object *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          char v23 = (uint64_t *)(v14 + 16 * v21);
          char v24 = (const void *)v23[1];
          v23[1] = 0;
          if (v24) {
            CFRelease(v24);
          }
          *char v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          unsigned int v13 = *(const void **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_6;
          }
LABEL_10:
          CFRelease(v13);
          goto LABEL_6;
        }
        uint64_t v12 = v4 + 16 * v9;
        unsigned int v13 = *(const void **)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_10;
        }
      }
LABEL_6:
      if (++v9 == v5) {
        goto LABEL_21;
      }
    }
  }
  if (v4)
  {
LABEL_21:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

char *WTF::Vector<WTF::RetainPtr<WebVideoFullscreenController>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v5 = *(WTF **)a1;
  if (*(void *)a1 <= a3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 <= v7)
      {
        uint64_t v29 = *(WTF **)a1;
        return (char *)v29 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        uint64_t v12 = WTF::fastMalloc((WTF *)(8 * v10));
        uint64_t v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(void *)a1 = v12;
        uint64_t v14 = 8 * v6;
        do
        {
          uint64_t v15 = *(void *)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          *(void *)(v12 + v13) = v15;
          unint64_t v16 = *(const void **)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          if (v16) {
            CFRelease(v16);
          }
          v13 += 8;
        }
        while (v14 != v13);
        uint64_t v29 = *(WTF **)a1;
        if (v5)
        {
          if (v29 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          uint64_t v29 = *(WTF **)a1;
        }
        return (char *)v29 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x1E142D494);
    }
  }
  unint64_t v17 = *(unsigned int *)(a1 + 8);
  unint64_t v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = 16;
  }
  if (v19 <= a2) {
    unint64_t v20 = a2;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 > v17)
  {
    if (v20 >> 29) {
      goto LABEL_39;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 12);
    uint64_t v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(void *)a1 = v22;
    if (v21)
    {
      char v24 = (void *)v22;
      uint64_t v25 = 8 * v21;
      uint64_t v26 = v5;
      do
      {
        uint64_t v27 = *(const void **)v26;
        *(void *)uint64_t v26 = 0;
        void *v24 = v27;
        uint64_t v28 = *(const void **)v26;
        *(void *)uint64_t v26 = 0;
        if (v28) {
          CFRelease(v28);
        }
        ++v24;
        uint64_t v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::DictationAlternative,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v5 = *(WTF **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 24 * v6 <= a3))
  {
    unint64_t v17 = *(unsigned int *)(a1 + 8);
    unint64_t v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = 16;
    }
    if (v19 <= a2) {
      unint64_t v19 = a2;
    }
    if (v19 > v17)
    {
      if (v19 >= 0xAAAAAAB) {
        goto LABEL_33;
      }
      uint64_t v20 = *(unsigned int *)(a1 + 12);
      int v21 = 24 * v19;
      uint64_t v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(void *)a1 = v22;
      if (v20)
      {
        uint64_t v24 = 24 * v20;
        uint64_t v25 = v5;
        do
        {
          long long v26 = *(_OWORD *)v25;
          *(void *)(v22 + 16) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v22 = v26;
          v22 += 24;
          uint64_t v25 = (WTF *)((char *)v25 + 24);
          v24 -= 24;
        }
        while (v24);
      }
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v23);
      }
    }
    return (char *)a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v9 = a2;
  }
  if (v9 > v7)
  {
    if (v9 < 0xAAAAAAB)
    {
      int v10 = 24 * v9;
      uint64_t v11 = WTF::fastMalloc((WTF *)(24 * v9));
      uint64_t v13 = 0;
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(void *)a1 = v11;
      do
      {
        uint64_t v14 = v11 + v13;
        long long v15 = *(_OWORD *)((char *)v5 + v13);
        *(void *)(v14 + 16) = *(void *)((char *)v5 + v13 + 16);
        *(_OWORD *)uint64_t v14 = v15;
        v13 += 24;
      }
      while (24 * v6 != v13);
      unint64_t v16 = *(WTF **)a1;
      if (v5)
      {
        if (v16 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        unint64_t v16 = *(WTF **)a1;
      }
      return (char *)v16 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1E142D69CLL);
  }
  unint64_t v16 = *(WTF **)a1;
  return (char *)v16 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebInstallMemoryPressureHandler::$_0 &&>>(WTF::MemoryPressureHandler *a1)
{
  uint64_t v1 = WTF::MemoryPressureHandler::singleton(a1);
  unint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v2 = &unk_1F3C7B5B0;
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return MEMORY[0x1F40EB650](v1);
}

uint64_t WTF::Detail::CallableWrapper<WebInstallMemoryPressureHandler::$_0::operator() const(void)::{lambda(WTF::Critical,WTF::Synchronous)#1},void,WTF::Critical,WTF::Synchronous>::call()
{
  return WebThreadRun();
}

uint64_t ___ZZZ31WebInstallMemoryPressureHandlerENK3__0clEvENKUlN3WTF8CriticalENS0_11SynchronousEE_clES1_S2__block_invoke(uint64_t a1)
{
  return MEMORY[0x1F416D6A0](*(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33), 0, 0);
}

void WebAlternativeTextClient::~WebAlternativeTextClient(WebAlternativeTextClient *this, void *a2)
{
  if (*((_DWORD *)this + 2))
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebAlternativeTextClient::removeDictationAlternatives(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 16) _removeDictationAlternatives:a2];
}

uint64_t WebAlternativeTextClient::showDictationAlternativeUI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 16) _showDictationAlternativeUI:a2 forDictationContext:a3];
}

void *WebAlternativeTextClient::dictationAlternatives@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result) {
    return (void *)[result _dictationAlternatives:a2];
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_1E142E228(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a12)
  {
    if (a12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a12 + 8))(a12);
    }
    else {
      --a12[2];
    }
  }
  if (a11)
  {
    if (a11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
      WTF::Vector<WTF::Ref<WebCore::LegacyWebArchive,WTF::RawPtrTraits<WebCore::LegacyWebArchive>,WTF::DefaultRefDerefTraits<WebCore::LegacyWebArchive>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v32);
      WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, v33);
      _Unwind_Resume(a1);
    }
    --a11[2];
    WTF::Vector<WTF::Ref<WebCore::LegacyWebArchive,WTF::RawPtrTraits<WebCore::LegacyWebArchive>,WTF::DefaultRefDerefTraits<WebCore::LegacyWebArchive>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
    WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, v34);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WTF::Ref<WebCore::LegacyWebArchive,WTF::RawPtrTraits<WebCore::LegacyWebArchive>,WTF::DefaultRefDerefTraits<WebCore::LegacyWebArchive>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, v35);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::LegacyWebArchive,WTF::RawPtrTraits<WebCore::LegacyWebArchive>,WTF::DefaultRefDerefTraits<WebCore::LegacyWebArchive>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E142E598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _DWORD *a11)
{
  if (a11)
  {
    if (a11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
      _Unwind_Resume(exception_object);
    }
    --a11[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E142E7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  objc_begin_catch(exception_object);

  objc_end_catch();
  return 0;
}

void sub_1E142EA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E142EBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFRelease(v11);
  if (!v10) {
    _Unwind_Resume(a1);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1E142EDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFRelease(v11);
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1E142EEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E142F514(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uchar *volatile *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a11) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(a11 + 1, a2);
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&a16, a2);
  _Unwind_Resume(a1);
}

double WebChromeClient::windowRect(WebChromeClient *this)
{
  return 0.0;
}

float WebChromeClient::pageRect(id *this)
{
  [objc_loadWeak(this + 2) frame];
  v6.origin.x = v1;
  v6.origin.y = v2;
  v6.size.width = v3;
  v6.size.height = v4;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v7, &v6);
  return v7;
}

uint64_t WebChromeClient::focus(id *this)
{
  CGFloat v1 = this + 2;
  CGFloat v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v1);
  return [v2 webViewFocus:Weak];
}

uint64_t WebChromeClient::unfocus(id *this)
{
  CGFloat v1 = this + 2;
  CGFloat v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v1);
  return [v2 webViewUnfocus:Weak];
}

uint64_t WebChromeClient::canTakeFocus()
{
  return 1;
}

id WebChromeClient::focusedElementChanged(id this, WebCore::Element *a2)
{
  if (a2)
  {
    if ((*((_WORD *)a2 + 16) & 0x10) != 0
      && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      uint64_t v3 = (uint64_t)this;
      this = (id)WebCore::HTMLInputElement::isText(a2);
      if (this)
      {
        id Weak = (WebView *)objc_loadWeak((id *)(v3 + 16));
        uint64_t v5 = kit(a2);
        uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
        if (v6
          && (uint64_t v7 = *(void *)(v6 + 8)) != 0
          && (unint64_t v8 = *(void **)(*(void *)(v7 + 280) + 16),
              ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
        {
          unint64_t v9 = (objc_object *)v8[2];
        }
        else
        {
          unint64_t v9 = 0;
        }
        return CallFormDelegate(Weak, (objc_selector *)sel_didFocusTextField_inFrame_, (objc_object *)v5, v9);
      }
    }
  }
  return this;
}

uint64_t WebChromeClient::createWindow(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = (id *)(a1 + 16);
  [objc_loadWeak((id *)(a1 + 16)) UIDelegate];
  uint64_t v6 = *(void *)(a2 + 296);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 28) + 2;
    *(_DWORD *)(v6 + 28) = v7;
    uint64_t v8 = *(void *)(v6 + 2032);
    if (v8)
    {
      int v9 = *(_DWORD *)(v8 + 8) + 1;
      *(_DWORD *)(v8 + 8) = v9;
      if (*(void *)(v8 + 56))
      {
        WebCore::FullscreenManager::cancelFullscreen((WebCore::FullscreenManager *)v8);
        int v9 = *(_DWORD *)(v8 + 8);
      }
      if (!v9)
      {
        uint64_t result = 286;
        __break(0xC471u);
        goto LABEL_95;
      }
      *(_DWORD *)(v8 + 8) = v9 - 1;
      int v7 = *(_DWORD *)(v6 + 28);
    }
    int v10 = v7 - 2;
    if (v10)
    {
      *(_DWORD *)(v6 + 28) = v10;
    }
    else if ((*(_WORD *)(v6 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a3[53] && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id Weak = (WebView *)objc_loadWeak(v5);
      uint64_t v14 = sel_webView_createWebViewModalDialogWithRequest_;
    }
    else
    {
      id Weak = (WebView *)objc_loadWeak(v5);
      uint64_t v14 = sel_webView_createWebViewWithRequest_;
    }
    id v15 = CallUIDelegate(Weak, (objc_selector *)v14, 0);
    goto LABEL_59;
  }
  id v11 = objc_alloc(MEMORY[0x1E4F1CA60]);
  if (*a3 || a3[8] || a3[16] || a3[24] || a3[32] || a3[37] || a3[39] || a3[41] || a3[43] || a3[45] || a3[47] || a3[49])
  {
    if (a3[37])
    {
      BOOL v12 = a3[36] != 0;
      goto LABEL_32;
    }
    if (a3[45] && a3[44])
    {
      if (!a3[39])
      {
LABEL_85:
        BOOL v12 = 1;
        goto LABEL_32;
      }
    }
    else
    {
      BOOL v12 = 1;
      if (!a3[43] || !a3[42] || !a3[39]) {
        goto LABEL_32;
      }
    }
    if (a3[38])
    {
      if (a3[48]) {
        BOOL v25 = 1;
      }
      else {
        BOOL v25 = a3[49] == 0;
      }
      BOOL v12 = 1;
      if (v25 && a3[47] && a3[46] && a3[41]) {
        BOOL v12 = a3[40] == 0;
      }
      goto LABEL_32;
    }
    goto LABEL_85;
  }
  BOOL v12 = 0;
LABEL_32:
  uint64_t v16 = [NSNumber numberWithBool:v12];
  uint64_t result = objc_msgSend(v11, "initWithObjectsAndKeys:", v16, @"wantsPopup", objc_msgSend(NSNumber, "numberWithBool:", *a3), @"hasAdditionalFeatures", 0);
  unint64_t v19 = (objc_object *)result;
  if (a3[8])
  {
    LODWORD(v18) = *((_DWORD *)a3 + 1);
    uint64_t result = objc_msgSend((id)result, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithFloat:", v18), @"x");
  }
  if (a3[16])
  {
    LODWORD(v18) = *((_DWORD *)a3 + 3);
    uint64_t result = -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithFloat:v18], @"y");
  }
  if (a3[24])
  {
    LODWORD(v18) = *((_DWORD *)a3 + 5);
    uint64_t result = -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithFloat:v18], @"width");
  }
  if (a3[32])
  {
    LODWORD(v18) = *((_DWORD *)a3 + 7);
    uint64_t result = -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithFloat:v18], @"height");
  }
  if (!a3[37]) {
    goto LABEL_43;
  }
  if (a3[53])
  {
    -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[52]], @"popup");
LABEL_43:
    if (a3[39]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[38]], @"menuBarVisible");
    }
    if (a3[41]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[40]], @"statusBarVisible");
    }
    if (a3[43]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[42]], @"toolBarVisible");
    }
    if (a3[47]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[46]], @"scrollbarsVisible");
    }
    if (a3[49]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[48]], @"resizable");
    }
    if (a3[51]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[50]], @"fullscreen");
    }
    if (a3[53]) {
      -[objc_object setObject:forKey:](v19, "setObject:forKey:", [NSNumber numberWithBool:a3[52]], @"dialog");
    }
    uint64_t v20 = (WebView *)objc_loadWeak(v5);
    id v15 = CallUIDelegate(v20, (objc_selector *)sel_webView_createWebViewWithRequest_windowFeatures_, 0, v19);
    if (v19) {
      CFRelease(v19);
    }
LABEL_59:
    if (!v15) {
      return (uint64_t)v15;
    }
    [v15 page];
    id v15 = v29;
    if (!v29 || a3[55] && a3[54]) {
      return (uint64_t)v15;
    }
    if (a3[57] && a3[56]) {
      return (uint64_t)v15;
    }
    id v21 = objc_loadWeak(v5);
    if (v21)
    {
      [v21 page];
      WebCore::Page::protectedStorageNamespaceProvider((uint64_t *)&v29, v28);
      uint64_t v22 = (uint64_t)v29;
      id v23 = objc_loadWeak(v5);
      if (v23)
      {
LABEL_67:
        [v23 page];
        uint64_t v24 = v27;
LABEL_88:
        (*(void (**)(uint64_t, uint64_t, id))(*(void *)v22 + 24))(v22, v24, v15);
        long long v26 = v29;
        uint64_t v29 = 0;
        if (v26)
        {
          if (v26[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
          }
          else {
            --v26[2];
          }
        }
        WebCore::Frame::setOpenerForWebKitLegacy();
        return (uint64_t)v15;
      }
    }
    else
    {
      WebCore::Page::protectedStorageNamespaceProvider((uint64_t *)&v29, 0);
      uint64_t v22 = (uint64_t)v29;
      id v23 = objc_loadWeak(v5);
      if (v23) {
        goto LABEL_67;
      }
    }
    uint64_t v24 = 0;
    goto LABEL_88;
  }
LABEL_95:
  __break(1u);
  return result;
}

void sub_1E142FF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a16)
  {
    if (a16[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a16 + 8))(a16);
      _Unwind_Resume(exception_object);
    }
    --a16[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebChromeClient::show(id *this)
{
  CGFloat v1 = this + 2;
  CGFloat v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v1);
  return [v2 webViewShow:Weak];
}

uint64_t WebChromeClient::canRunModal(id *this)
{
  return objc_opt_respondsToSelector() & 1;
}

id WebChromeClient::runModal(id *this)
{
  id Weak = (WebView *)objc_loadWeak(this + 2);
  return CallUIDelegate(Weak, (objc_selector *)sel_webViewRunModal_);
}

uint64_t WebChromeClient::setToolbarsVisible(id *this, uint64_t a2)
{
  uint64_t v3 = this + 2;
  CGFloat v4 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v3);
  return [v4 webView:Weak setToolbarsVisible:a2];
}

BOOL WebChromeClient::toolbarsVisible(id *this)
{
  id Weak = (WebView *)objc_loadWeak(this + 2);
  return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webViewAreToolbarsVisible_);
}

uint64_t WebChromeClient::setStatusbarVisible(id *this, uint64_t a2)
{
  uint64_t v3 = this + 2;
  CGFloat v4 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v3);
  return [v4 webView:Weak setStatusBarVisible:a2];
}

BOOL WebChromeClient::statusbarVisible(id *this)
{
  id Weak = (WebView *)objc_loadWeak(this + 2);
  return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webViewIsStatusBarVisible_);
}

uint64_t WebChromeClient::setScrollbarsVisible(id *this, uint64_t a2)
{
  uint64_t v3 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "mainFrame"), "frameView");
  return [v3 setAllowsScrolling:a2];
}

uint64_t WebChromeClient::scrollbarsVisible(id *this)
{
  CGFloat v1 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "mainFrame"), "frameView");
  return [v1 allowsScrolling];
}

uint64_t WebChromeClient::menubarVisible(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::setResizable(id *this, uint64_t a2)
{
  uint64_t v3 = this + 2;
  CGFloat v4 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v3);
  return [v4 webView:Weak setResizable:a2];
}

uint64_t WebChromeClient::addMessageToConsole(uint64_t a1, int a2, int a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  v22[6] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (id *)(a1 + 16);
  uint64_t result = [objc_loadWeak((id *)(a1 + 16)) _allowsMessaging];
  if (result)
  {
    uint64_t result = [objc_loadWeak(v13) _UIKitDelegate];
    if (result)
    {
      uint64_t result = objc_opt_respondsToSelector();
      if (result)
      {
        switch(a2)
        {
          case 0:
            id v15 = (__CFString *)WebConsoleMessageXMLMessageSource;
            break;
          case 1:
            goto LABEL_8;
          case 2:
            id v15 = (__CFString *)WebConsoleMessageNetworkMessageSource;
            break;
          case 3:
            id v15 = (__CFString *)WebConsoleMessageConsoleAPIMessageSource;
            break;
          case 4:
            id v15 = (__CFString *)WebConsoleMessageStorageMessageSource;
            break;
          case 5:
            id v15 = (__CFString *)WebConsoleMessageAppCacheMessageSource;
            break;
          case 6:
            id v15 = (__CFString *)WebConsoleMessageRenderingMessageSource;
            break;
          case 7:
            id v15 = (__CFString *)WebConsoleMessageCSSMessageSource;
            break;
          case 8:
            id v15 = (__CFString *)WebConsoleMessageSecurityMessageSource;
            break;
          case 9:
            id v15 = (__CFString *)WebConsoleMessageContentBlockerMessageSource;
            break;
          case 10:
            id v15 = @"MediaMessageSource";
            break;
          case 11:
            id v15 = @"MediaSourceMessageSource";
            break;
          case 12:
            id v15 = @"WebRTCMessageSource";
            break;
          case 13:
            id v15 = @"ITPDebugMessageSource";
            break;
          case 14:
            id v15 = @"PrivateClickMeasurementMessageSource";
            break;
          case 15:
            id v15 = @"PaymentRequestMessageSource";
            break;
          case 16:
            id v15 = (__CFString *)WebConsoleMessageOtherMessageSource;
            break;
          default:
            id v15 = &stru_1F3C7DA90;
            break;
        }
      }
      else
      {
        if (a2 != 1) {
          return result;
        }
        uint64_t result = objc_opt_respondsToSelector();
        if ((result & 1) == 0) {
          return result;
        }
LABEL_8:
        id v15 = (__CFString *)WebConsoleMessageJSMessageSource;
      }
      v21[0] = @"message";
      if (*a4) {
        uint64_t v16 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v16 = &stru_1F3C7DA90;
      }
      v22[0] = v16;
      v21[1] = @"lineNumber";
      v22[1] = [NSNumber numberWithUnsignedInt:a5];
      v21[2] = @"columnNumber";
      v22[2] = [NSNumber numberWithUnsignedInt:a6];
      v21[3] = @"sourceURL";
      if (*a7) {
        unint64_t v17 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v17 = &stru_1F3C7DA90;
      }
      v22[3] = v17;
      v22[4] = v15;
      v21[4] = @"MessageSource";
      v21[5] = @"MessageLevel";
      switch(a3)
      {
        case 0:
          double v18 = (__CFString *)WebConsoleMessageLogMessageLevel;
          break;
        case 1:
          double v18 = (__CFString *)WebConsoleMessageWarningMessageLevel;
          break;
        case 2:
          double v18 = (__CFString *)WebConsoleMessageErrorMessageLevel;
          break;
        case 3:
          double v18 = (__CFString *)WebConsoleMessageDebugMessageLevel;
          break;
        case 4:
          double v18 = (__CFString *)WebConsoleMessageInfoMessageLevel;
          break;
        default:
          double v18 = &stru_1F3C7DA90;
          break;
      }
      v22[5] = v18;
      uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:6];
      uint64_t v20 = objc_msgSend((id)objc_msgSend(objc_loadWeak(v13), "_UIKitDelegateForwarder"), "asyncForwarder");
      return [v20 webView:objc_loadWeak(v13) addMessageToConsole:v19 withSource:v15];
    }
  }
  return result;
}

uint64_t WebChromeClient::canRunBeforeUnloadConfirmPanel(id *this)
{
  return objc_opt_respondsToSelector() & 1;
}

BOOL WebChromeClient::runBeforeUnloadConfirmPanel(id *this, const WTF::String *a2, WebCore::LocalFrame *a3)
{
  id Weak = (WebView *)objc_loadWeak(this + 2);
  if (*(void *)a2) {
    uint64_t v6 = (objc_object *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = (objc_object *)&stru_1F3C7DA90;
  }
  int v7 = *(void **)(*((void *)a3 + 35) + 16);
  if ((*(uint64_t (**)(void *))(*v7 + 1072))(v7)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (objc_object *)v7[2];
  }
  return CallUIDelegateReturningBoolean(1, Weak, (objc_selector *)sel_webView_runBeforeUnloadConfirmPanelWithMessage_initiatedByFrame_, v6, v8);
}

uint64_t WebChromeClient::closeWindow(id *this)
{
  CGFloat v1 = this + 2;
  [objc_loadWeak(this + 2) setGroupName:0];
  [objc_loadWeak(v1) stopLoading:0];
  id Weak = objc_loadWeak(v1);
  return [Weak _closeWindow];
}

uint64_t WebChromeClient::runJavaScriptAlert(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v5 = this + 2;
  [objc_loadWeak(this + 2) UIDelegate];
  if (objc_opt_respondsToSelector())
  {
    id Weak = (WebView *)objc_loadWeak(v5);
    if (*(void *)a3) {
      int v7 = (objc_object *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v7 = (objc_object *)&stru_1F3C7DA90;
    }
    id v11 = *(void **)(*((void *)a2 + 35) + 16);
    if ((*(uint64_t (**)(void *))(*v11 + 1072))(v11)) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = (objc_object *)v11[2];
    }
    return (uint64_t)CallUIDelegate(Weak, (objc_selector *)sel_webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_, v7, v12);
  }
  else
  {
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      int v9 = (WebView *)objc_loadWeak(v5);
      if (*(void *)a3) {
        int v10 = (objc_object *)WTF::StringImpl::operator NSString *();
      }
      else {
        int v10 = (objc_object *)&stru_1F3C7DA90;
      }
      return (uint64_t)CallUIDelegate(v9, (objc_selector *)sel_webView_runJavaScriptAlertPanelWithMessage_, v10);
    }
  }
  return result;
}

BOOL WebChromeClient::runJavaScriptConfirm(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v5 = this + 2;
  [objc_loadWeak(this + 2) UIDelegate];
  if (objc_opt_respondsToSelector())
  {
    id Weak = (WebView *)objc_loadWeak(v5);
    if (*(void *)a3) {
      int v7 = (objc_object *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v7 = (objc_object *)&stru_1F3C7DA90;
    }
    id v11 = *(void **)(*((void *)a2 + 35) + 16);
    if ((*(uint64_t (**)(void *))(*v11 + 1072))(v11)) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = (objc_object *)v11[2];
    }
    return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_, v7, v12);
  }
  else if (objc_opt_respondsToSelector())
  {
    uint64_t v8 = (WebView *)objc_loadWeak(v5);
    if (*(void *)a3) {
      int v9 = (objc_object *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v9 = (objc_object *)&stru_1F3C7DA90;
    }
    return CallUIDelegateReturningBoolean(0, v8, (objc_selector *)sel_webView_runJavaScriptConfirmPanelWithMessage_, v9);
  }
  else
  {
    return 0;
  }
}

BOOL WebChromeClient::runJavaScriptPrompt(id *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  int v9 = this + 2;
  [objc_loadWeak(this + 2) UIDelegate];
  if (*(void *)a4)
  {
    int v10 = (objc_object *)WTF::StringImpl::operator NSString *();
    if (objc_opt_respondsToSelector())
    {
LABEL_3:
      id Weak = (WebView *)objc_loadWeak(v9);
      if (*(void *)a3) {
        BOOL v12 = (objc_object *)WTF::StringImpl::operator NSString *();
      }
      else {
        BOOL v12 = (objc_object *)&stru_1F3C7DA90;
      }
      double v18 = *(void **)(*((void *)a2 + 35) + 16);
      if ((*(uint64_t (**)(void *))(*v18 + 1072))(v18)) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = (objc_object *)v18[2];
      }
      id v20 = CallUIDelegate(Weak, (objc_selector *)sel_webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_, v12, v10, v19);
      goto LABEL_23;
    }
  }
  else
  {
    int v10 = (objc_object *)&stru_1F3C7DA90;
    if (objc_opt_respondsToSelector()) {
      goto LABEL_3;
    }
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v13 = (WebView *)objc_loadWeak(v9);
    if (*(void *)a3) {
      uint64_t v14 = (objc_object *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v14 = (objc_object *)&stru_1F3C7DA90;
    }
    id v20 = CallUIDelegate(v13, (objc_selector *)sel_webView_runJavaScriptTextInputPanelWithPrompt_defaultText_, v14, v10);
  }
  else
  {
    id v15 = +[WebDefaultUIDelegate sharedUIDelegate];
    id v16 = objc_loadWeak(v9);
    if (*(void *)a3) {
      unint64_t v17 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v17 = &stru_1F3C7DA90;
    }
    id v21 = *(void **)(*((void *)a2 + 35) + 16);
    if ((*(uint64_t (**)(void *))(*v21 + 1072))(v21)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21[2];
    }
    id v20 = (id)[v15 webView:v16 runJavaScriptTextInputPanelWithPrompt:v17 defaultText:v10 initiatedByFrame:v22];
  }
LABEL_23:
  MEMORY[0x1E4E442D0](&v29, v20);
  uint64_t v24 = v29;
  uint64_t v29 = 0;
  BOOL v25 = *a5;
  *a5 = v24;
  if (v25)
  {
    int v26 = *(_DWORD *)v25 - 2;
    if (*(_DWORD *)v25 != 2)
    {
LABEL_27:
      *(_DWORD *)BOOL v25 = v26;
      return *a5 != 0;
    }
    WTF::StringImpl::destroy(v25, v23);
    BOOL v25 = v29;
    uint64_t v29 = 0;
    if (v25)
    {
      int v26 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v27);
        return *a5 != 0;
      }
      goto LABEL_27;
    }
  }
  return *a5 != 0;
}

uint64_t WebChromeClient::screenToRootView(WebChromeClient *this, const IntPoint *a2)
{
  return (uint64_t)*a2;
}

uint64_t WebChromeClient::rootViewToScreen(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t WebChromeClient::accessibilityScreenToRootView(WebChromeClient *this, const IntPoint *a2)
{
  return (uint64_t)*a2;
}

uint64_t WebChromeClient::rootViewToAccessibilityScreen(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t WebChromeClient::platformPageClient(WebChromeClient *this)
{
  return 0;
}

id WebChromeClient::scrollContainingScrollViewsToRevealRect(uint64_t a1)
{
  CGFloat v1 = (id *)(a1 + 16);
  uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "mainFrame"), "frameView"), "documentView");
  WebCore::IntRect::operator CGRect();
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  id result = objc_loadWeak(v1);
  if (result)
  {
    BOOL v12 = result;
    do
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v13 = (void *)[v12 documentView];
        objc_msgSend(v13, "convertRect:fromView:", v2, v4, v6, v8, v10);
        objc_msgSend(v13, "scrollRectToVisible:");
      }
      id result = (id)[v12 superview];
      BOOL v12 = result;
    }
    while (result);
  }
  return result;
}

uint64_t WebChromeClient::shouldUnavailablePluginMessageBeButton(uint64_t a1, int a2)
{
  if (a2) {
    return 0;
  }
  objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "UIDelegate", v2, v3);
  return objc_opt_respondsToSelector() & 1;
}

id WebChromeClient::unavailablePluginButtonClicked(uint64_t a1, WebCore::Node *a2)
{
  id Weak = (WebView *)objc_loadWeak((id *)(a1 + 16));
  double v4 = kit(a2);
  return CallUIDelegate(Weak, (objc_selector *)sel_webView_didPressMissingPluginButton_, (objc_object *)v4);
}

void WebChromeClient::mouseDidMoveOverElement(id *a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  double v7 = [[WebElementDictionary alloc] initWithHitTestResult:a2];
  a1 += 2;
  [objc_loadWeak(a1) _mouseDidMoveOverElement:v7 modifierFlags:a3];
  double v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(objc_loadWeak(a1), "_selectedOrMainFrame"), "frameView"), "documentView");
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*a4) {
      double v9 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      double v9 = &stru_1F3C7DA90;
    }
    [v8 _setToolTip:v9];
  }
  if (v7)
  {
    CFRelease(v7);
  }
}

void sub_1E1430FC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

id WebChromeClient::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)(a2 + 280) + 16);
  if ((*(uint64_t (**)(void *))(*v3 + 1072))(v3)) {
    double v4 = 0;
  }
  else {
    double v4 = (objc_object *)v3[2];
  }
  [objc_loadWeak((id *)(a1 + 16)) UIDelegate];
  char v5 = objc_opt_respondsToSelector();
  id Weak = (WebView *)objc_loadWeak((id *)(a1 + 16));
  double v7 = Weak;
  if (v5)
  {
    double v8 = sel_webView_printFrame_;
    double v9 = v4;
  }
  else
  {
    double v9 = (objc_object *)[(objc_object *)v4 frameView];
    id Weak = v7;
    double v8 = sel_webView_printFrameView_;
  }
  return CallUIDelegate(Weak, (objc_selector *)v8, v9);
}

void WebChromeClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, void *a3)
{
  double v6 = [[WebSecurityOrigin alloc] _initWithWebCoreSecurityOrigin:WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(void *)(a2 + 296) + 208))];
  id Weak = (WebView *)objc_loadWeak((id *)(a1 + 16));
  double v8 = *(void **)(*(void *)(a2 + 280) + 16);
  if ((*(uint64_t (**)(void *))(*v8 + 1072))(v8))
  {
    double v9 = 0;
    if (*a3)
    {
LABEL_3:
      double v10 = (objc_object *)WTF::StringImpl::operator NSString *();
      goto LABEL_6;
    }
  }
  else
  {
    double v9 = (objc_object *)v8[2];
    if (*a3) {
      goto LABEL_3;
    }
  }
  double v10 = (objc_object *)&stru_1F3C7DA90;
LABEL_6:
  CallUIDelegate(Weak, (objc_selector *)sel_webView_frame_exceededDatabaseQuotaForSecurityOrigin_database_, v9, v6, v10);
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_1E14311EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    CFRelease(v14);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  unint64_t v17 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v17);
  objc_end_catch();
}

void WebChromeClient::createColorChooser(void *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::createDataListSuggestionPicker(void *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::createDateTimeChooser(void *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::runOpenPanel(WebChromeClient *this, WebCore::LocalFrame *a2, WebCore::FileChooser *a3)
{
  int v4 = *((unsigned __int8 *)a3 + 17);
  char v5 = [[WebOpenPanelResultListener alloc] initWithChooser:a3];
  double v6 = (id *)((char *)this + 16);
  [objc_loadWeak(v6) UIDelegate];
  if (objc_opt_respondsToSelector())
  {
    id Weak = (WebView *)objc_loadWeak(v6);
    CallUIDelegate(Weak, (objc_selector *)sel_webView_runOpenPanelForFileButtonWithResultListener_allowMultipleFiles_, (objc_object *)v5, v4 != 0);
  }
  else if (objc_opt_respondsToSelector())
  {
    double v8 = (WebView *)objc_loadWeak(v6);
    CallUIDelegate(v8, (objc_selector *)sel_webView_runOpenPanelForFileButtonWithResultListener_, (objc_object *)v5);
  }
  else
  {
    [(WebOpenPanelResultListener *)v5 cancel];
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_1E143136C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

WebCore::Icon *WebChromeClient::loadIconForFiles(uint64_t a1)
{
  (*(void (**)(WebCore::Icon **__return_ptr))(*(void *)a1 + 1608))(&v4);
  WebCore::FileIconLoader::iconLoaded();
  id result = v4;
  int v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Icon::~Icon(result);
      return (WebCore::Icon *)WTF::fastFree(v2, v3);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void sub_1E1431470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Icon *a10)
{
  if (a10) {
    WTF::RefCounted<WebCore::Icon>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebChromeClient::createIconForFiles(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F41724A8](a2);
}

uint64_t WebChromeClient::keyboardUIMode(id *this)
{
  return [objc_loadWeak(this + 2) _keyboardUIMode];
}

void sub_1E14314E8(_Unwind_Exception *a1)
{
}

uint64_t WebChromeClient::firstResponder(id *this)
{
  CGFloat v1 = this + 2;
  uint64_t v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  return [v2 webViewFirstResponder:objc_loadWeak(v1)];
}

void sub_1E1431568(_Unwind_Exception *a1)
{
}

uint64_t WebChromeClient::makeFirstResponder(id *this, WAKResponder *a2)
{
  uint64_t v3 = this + 2;
  [objc_loadWeak(this + 2) _pushPerformingProgrammaticFocus];
  int v4 = (void *)[objc_loadWeak(v3) _UIDelegateForwarder];
  [v4 webView:objc_loadWeak(v3) makeFirstResponder:a2];
  return [objc_loadWeak(v3) _popPerformingProgrammaticFocus];
}

uint64_t WebChromeClient::selectItemWritingDirectionIsNatural(WebChromeClient *this)
{
  return 0;
}

uint64_t WebChromeClient::selectItemAlignmentFollowsMenuWritingDirection(WebChromeClient *this)
{
  return 1;
}

void WebChromeClient::createPopupMenu(void *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::createSearchPopupMenu(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebChromeClient::shouldPaintEntireContents(WebChromeClient *this)
{
  return 0;
}

uint64_t WebChromeClient::setNeedsOneShotDrawingSynchronization(id *this)
{
  return [objc_loadWeak(this + 2) _setNeedsOneShotDrawingSynchronization:1];
}

uint64_t WebChromeClient::triggerRenderingUpdate(id *this)
{
  return [objc_loadWeak(this + 2) _scheduleUpdateRendering];
}

uint64_t WebChromeClient::canEnterVideoFullscreen(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::supportsVideoFullscreen(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::setMockVideoPresentationModeEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t WebChromeClient::enterVideoFullscreenForVideoElement(WebChromeClient *this, WebCore::HTMLVideoElement *a2, uint64_t a3)
{
  if (*((unsigned char *)this + 8)) {
    return WebCore::HTMLMediaElement::didBecomeFullscreenElement(a2);
  }
  int v4 = a2;
  return [objc_loadWeak((id *)this + 2) _enterVideoFullscreenForVideoElement:&v4 mode:a3];
}

void sub_1E14317DC(_Unwind_Exception *a1)
{
}

uint64_t WebChromeClient::exitVideoFullscreenForVideoElement(uint64_t a1, WebCore::HTMLMediaElement *this, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 8)) {
    WebCore::HTMLMediaElement::didStopBeingFullscreenElement(this);
  }
  else {
    [objc_loadWeak((id *)(a1 + 16)) _exitVideoFullscreen];
  }
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
  char v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

void sub_1E1431894(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::exitVideoFullscreenToModeWithoutAnimation(id *this, WebCore::HTMLVideoElement *a2)
{
  if (*((unsigned char *)this + 8)) {
    return WebCore::HTMLMediaElement::didStopBeingFullscreenElement(a2);
  }
  else {
    return [objc_loadWeak(this + 2) _exitVideoFullscreen];
  }
}

BOOL WebChromeClient::supportsFullScreenForElement(id *this, const WebCore::Element *a2, char a3)
{
  char v5 = this + 2;
  [objc_loadWeak(this + 2) UIDelegate];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  id Weak = (WebView *)objc_loadWeak(v5);
  double v7 = kit(a2);
  return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webView_supportsFullScreenForElement_withKeyboard_, (objc_object *)v7, a3);
}

void WebChromeClient::enterFullScreenForElement(id *this, WebCore::Element *a2)
{
  uint64_t v3 = this + 2;
  [objc_loadWeak(this + 2) UIDelegate];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = [[WebKitFullScreenListener alloc] initWithElement:a2];
    id Weak = (WebView *)objc_loadWeak(v3);
    double v6 = kit(a2);
    CallUIDelegate(Weak, (objc_selector *)sel_webView_enterFullScreenForElement_listener_, (objc_object *)v6, (objc_object *)v4);
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

void sub_1E1431ACC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebChromeClient::exitFullScreenForElement(id *this, WebCore::Element *a2)
{
  uint64_t v3 = this + 2;
  [objc_loadWeak(this + 2) UIDelegate];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = [[WebKitFullScreenListener alloc] initWithElement:a2];
    id Weak = (WebView *)objc_loadWeak(v3);
    double v6 = kit(a2);
    CallUIDelegate(Weak, (objc_selector *)sel_webView_exitFullScreenForElement_listener_, (objc_object *)v6, (objc_object *)v4);
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

void sub_1E1431B98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebChromeClient::createGPUForWebGPU(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebChromeClient::createBarcodeDetector@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  uint64_t result = MEMORY[0x1E4E45900](v4, a1);
  *a2 = v4;
  return result;
}

void sub_1E1431BFC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::getBarcodeDetectorSupportedFormats(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F416DE20](a2);
}

uint64_t WebChromeClient::createFaceDetector@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
  uint64_t result = WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl();
  *a1 = v2;
  return result;
}

void sub_1E1431C5C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::createTextDetector@<X0>(WebCore::ShapeDetection::TextDetectorImpl **a1@<X8>)
{
  uint64_t v3 = (WebCore::ShapeDetection::TextDetectorImpl *)WTF::fastMalloc((WTF *)0x10);
  uint64_t result = WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(v3);
  *a1 = v3;
  return result;
}

void sub_1E1431CA4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::registerBlobPathForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
  return v4(v3);
}

void sub_1E1431D38(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
  return v3(v2);
}

void sub_1E1431DF0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::hoverSupportedByPrimaryPointingDevice(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::hoverSupportedByAnyAvailablePointingDevice(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::pointerCharacteristicsOfPrimaryPointingDevice(WebChromeClient *this)
{
  return 258;
}

uint64_t WebChromeClient::pointerCharacteristicsOfAllAvailablePointingDevices(WebChromeClient *this)
{
  return 2;
}

uint64_t WebCore::ChromeClient::supportsSettingCursor(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::shouldUseMouseEventForSelection()
{
  return 1;
}

float WebCore::ChromeClient::screenSize(WebCore::ChromeClient *this)
{
  (*(void (**)(WebCore::ChromeClient *))(*(void *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::availableScreenSize(WebCore::ChromeClient *this)
{
  (*(void (**)(WebCore::ChromeClient *))(*(void *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::overrideScreenSize(WebCore::ChromeClient *this)
{
  (*(void (**)(WebCore::ChromeClient *))(*(void *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::overrideAvailableScreenSize(WebCore::ChromeClient *this)
{
  (*(void (**)(WebCore::ChromeClient *))(*(void *)this + 16))(this);
  return v1;
}

void WebCore::ChromeClient::underlayColor(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::appHighlightsVisiblility(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createWorkerClient(void *a1@<X8>)
{
  *a1 = 0;
}

double WebCore::ChromeClient::eventThrottlingDelay(WebCore::ChromeClient *this)
{
  return 0.0;
}

uint64_t WebCore::ChromeClient::fetchCustomFixedPositionLayoutRect()
{
  return 0;
}

uint64_t WebChromeClient::canShowDataListSuggestionLabels(WebChromeClient *this)
{
  return 0;
}

WTF *WebCore::ChromeClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  LOBYTE(v9) = 0;
  char v12 = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v3 + 16))(v3, &v9);
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v12)
  {
    if (v11)
    {
      double v6 = v9;
      uint64_t v7 = 48 * v11;
      do
      {
        WebCore::ContactInfo::~ContactInfo(v6, v5);
        double v6 = (WTF *)(v8 + 48);
        v7 -= 48;
      }
      while (v7);
    }
    uint64_t result = v9;
    if (v9)
    {
      double v9 = 0;
      int v10 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1E1432084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::hasStablePageScaleFactor(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::graphicsLayerFactory(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::displayRefreshMonitorFactory(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createImageBuffer(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::shouldTriggerRenderingUpdate(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::scheduleRenderingUpdate(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::remoteImagesCountForTesting(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::allowsAcceleratedCompositing(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::allowedCompositingTriggers(WebChromeClient *this)
{
  return 159;
}

uint64_t WebCore::ChromeClient::layerTreeStateIsFrozen(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createScrollingCoordinator(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::supportsVideoFullscreenStandby(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::requiresFullscreenForVideoPlayback(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::preferredScrollbarOverlayStyle(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isSVGImageChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

float WebCore::ChromeClient::minimumWindowSize(WebCore::ChromeClient *this)
{
  return 100.0;
}

uint64_t WebCore::ChromeClient::isEmptyChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::plugInStartLabelTitle(void *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInStartLabelSubtitle(void *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInExtraStyleSheet(void *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInExtraScript(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::shouldNotifyOnFormChanges(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldUseTiledBackingForFrameView()
{
  return 0;
}

__n128 WebCore::ChromeClient::applyLinkDecorationFilteringWithResult@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v2 += 2;
  }
  *(void *)a2 = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

__n128 WebCore::ChromeClient::allowedQueryParametersForAdvancedPrivacyProtections@<Q0>(const URL *a1@<X1>, uint64_t a2@<X8>)
{
  m_ptr = a1->m_string.m_impl.m_ptr;
  if (a1->m_string.m_impl.m_ptr) {
    *(_DWORD *)m_ptr += 2;
  }
  *(void *)a2 = m_ptr;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)a1 + 8);
  __n128 result = *(__n128 *)&a1->m_hostEnd;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t WebCore::ChromeClient::shouldDispatchFakeMouseMoveEvents(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  double v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
  return v6(v5);
}

void sub_1E1432304(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::ChromeClient::requestStorageAccess(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  __int16 v11 = 0;
  char v12 = a5;
  double v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a6, &v11);
  double v9 = v14;
  uint64_t v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v8);
      __n128 result = v13;
      uint64_t v13 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v9 -= 2;
  }
  __n128 result = v13;
  uint64_t v13 = 0;
  if (!result) {
    return result;
  }
LABEL_7:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1E14323E4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::RequestStorageAccessResult::~RequestStorageAccessResult((WebCore::RequestStorageAccessResult *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::hasPageLevelStorageAccess()
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

void sub_1E143248C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::userIsInteracting(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (*a4)
  {
    double v6 = 0;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::Node **))(*(void *)v4 + 16))(v4, &v6);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v5 = v6;
    double v6 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 7) == 2)
      {
        if ((*((_WORD *)v5 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v5);
        }
      }
      else
      {
        *((_DWORD *)v5 + 7) -= 2;
      }
    }
  }
}

void sub_1E1432598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::needsImageOverlayControllerForSelectionPainting(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

void sub_1E1432688(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::startApplePayAMSUISession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int16 v6 = 0;
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, __int16 *))(*(void *)v4 + 16))(v4, &v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void sub_1E1432744(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::isUsingUISideCompositing(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isInStableState(WebCore::ChromeClient *this)
{
  return 1;
}

double WebCore::ChromeClient::baseViewportLayoutSizeScaleFactor(WebCore::ChromeClient *this)
{
  return 1.0;
}

uint64_t WebCore::ChromeClient::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  v4[0] = 0;
  v4[64] = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_1E143285C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 12);
    if (v3)
    {
      uint64_t v4 = *(WebCore::ContactInfo **)a1;
      uint64_t v5 = 48 * v3;
      do
      {
        WebCore::ContactInfo::~ContactInfo(v4, a2);
        uint64_t v4 = (WebCore::ContactInfo *)(v6 + 48);
        v5 -= 48;
      }
      while (v5);
    }
    uint64_t v7 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  return a1;
}

void WebCore::ContactInfo::~ContactInfo(WebCore::ContactInfo *this, StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 11);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 4);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = (WTF *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((unsigned int *)this + 7);
  if (v8)
  {
    double v9 = (WTF::StringImpl **)*((void *)this + 2);
    uint64_t v10 = 8 * v8;
    do
    {
      __int16 v11 = *v9;
      *double v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, a2);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  char v12 = (WTF *)*((void *)this + 2);
  if (v12)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2);
  }
  uint64_t v13 = *((unsigned int *)this + 3);
  if (v13)
  {
    uint64_t v14 = *(WTF::StringImpl ***)this;
    uint64_t v15 = 8 * v13;
    do
    {
      id v16 = *v14;
      WTF::StringImpl *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, a2);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v17 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v17, a2);
  }
}

uint64_t WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(uint64_t *a1, __int16 *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  __int16 v8 = *a2;
  char v9 = *((unsigned char *)a2 + 2);
  long long v3 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)uint64_t v10 = v3;
  (*(void (**)(uint64_t, __int16 *))(*(void *)v2 + 16))(v2, &v8);
  uint64_t v5 = v10[1];
  v10[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v4);
      uint64_t v6 = v10[0];
      v10[0] = 0;
      if (!v6) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
      goto LABEL_7;
    }
    *(_DWORD *)v5 -= 2;
  }
  uint64_t v6 = v10[0];
  v10[0] = 0;
  if (!v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
LABEL_7:
  if (*(_DWORD *)v6 == 2) {
    WTF::StringImpl::destroy(v6, v4);
  }
  else {
    *(_DWORD *)v6 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_1E1432B38(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  WebCore::RequestStorageAccessResult::~RequestStorageAccessResult((WebCore::RequestStorageAccessResult *)&a12, a2);
  WebCore::RequestStorageAccessResult::~RequestStorageAccessResult((WebCore::RequestStorageAccessResult *)&a9, v14);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void WebCore::RequestStorageAccessResult::~RequestStorageAccessResult(WebCore::RequestStorageAccessResult *this, StringImpl *a2)
{
  long long v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
      *((void *)this + 1) = 0;
      if (!v4) {
        return;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4) {
    return;
  }
LABEL_7:
  if (*(_DWORD *)v4 == 2) {
    WTF::StringImpl::destroy(v4, a2);
  }
  else {
    *(_DWORD *)v4 -= 2;
  }
}

WebCore::Icon *WTF::RefCounted<WebCore::Icon>::deref(WebCore::Icon *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::Icon::~Icon(result);
    return (WebCore::Icon *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebChromeClientIOS::setWindowRect(id *this, const WebCore::FloatRect *a2)
{
  uint64_t v2 = this + 2;
  long long v3 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v2);
  WebCore::FloatRect::operator CGRect();
  return objc_msgSend(v3, "webView:setFrame:", Weak);
}

float WebChromeClientIOS::windowRect(id *this)
{
  uint64_t v1 = this + 2;
  uint64_t v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  [v2 webViewFrame:objc_loadWeak(v1)];
  v9[0] = v3;
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  WebCore::enclosingIntRect((WebCore *)v9, v7);
  WebCore::FloatRect::FloatRect();
  return v10;
}

uint64_t WebChromeClientIOS::focus(id *this)
{
  uint64_t v1 = this + 2;
  uint64_t v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v1);
  return [v2 webViewFocus:Weak];
}

uint64_t WebChromeClientIOS::runJavaScriptAlert(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  WebThreadLockPushModal();
  uint64_t v6 = this + 2;
  uint64_t v7 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v6);
  if (*(void *)a3) {
    char v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v9 = &stru_1F3C7DA90;
  }
  float v10 = *(void **)(*((void *)a2 + 35) + 16);
  if ((*(uint64_t (**)(void *))(*v10 + 1072))(v10)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10[2];
  }
  [v7 webView:Weak runJavaScriptAlertPanelWithMessage:v9 initiatedByFrame:v11];
  return WebThreadLockPopModal();
}

uint64_t WebChromeClientIOS::runJavaScriptConfirm(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  WebThreadLockPushModal();
  uint64_t v6 = this + 2;
  uint64_t v7 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v6);
  if (*(void *)a3) {
    char v9 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v9 = &stru_1F3C7DA90;
  }
  float v10 = *(void **)(*((void *)a2 + 35) + 16);
  if ((*(uint64_t (**)(void *))(*v10 + 1072))(v10)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10[2];
  }
  uint64_t v12 = [v7 webView:Weak runJavaScriptConfirmPanelWithMessage:v9 initiatedByFrame:v11];
  WebThreadLockPopModal();
  return v12;
}

BOOL WebChromeClientIOS::runJavaScriptPrompt(id *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  WebThreadLockPushModal();
  float v10 = this + 2;
  uint64_t v11 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v10);
  if (*(void *)a3)
  {
    uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    if (*(void *)a4)
    {
LABEL_3:
      uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v13 = &stru_1F3C7DA90;
    if (*(void *)a4) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = &stru_1F3C7DA90;
LABEL_6:
  uint64_t v15 = *(void **)(*((void *)a2 + 35) + 16);
  if ((*(uint64_t (**)(void *))(*v15 + 1072))(v15)) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15[2];
  }
  MEMORY[0x1E4E442D0](&v23, [v11 webView:Weak runJavaScriptTextInputPanelWithPrompt:v13 defaultText:v14 initiatedByFrame:v16]);
  uint64_t v18 = v23;
  id v23 = 0;
  uint64_t v19 = *a5;
  *a5 = v18;
  if (v19)
  {
    int v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
    {
LABEL_13:
      *(_DWORD *)uint64_t v19 = v20;
      goto LABEL_14;
    }
    WTF::StringImpl::destroy(v19, v17);
    uint64_t v19 = v23;
    id v23 = 0;
    if (v19)
    {
      int v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v21);
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
LABEL_14:
  WebThreadLockPopModal();
  return *a5 != 0;
}

void WebChromeClientIOS::runOpenPanel(WebChromeClientIOS *this, WebCore::LocalFrame *a2, WebCore::FileChooser *a3)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((unsigned __int8 *)a3 + 17);
  uint64_t v6 = [[WebOpenPanelResultListener alloc] initWithChooser:a3];
  int v7 = *((unsigned __int8 *)a3 + 72);
  if (v7 == 2) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = v7 == 1;
  }
  v20[0] = @"WebOpenPanelConfigurationAllowMultipleFilesKey";
  v21[0] = [NSNumber numberWithBool:v5];
  v20[1] = @"WebOpenPanelConfigurationMimeTypesKey";
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)a3 + 24, (uint64_t *)&cf);
  v21[1] = cf;
  v20[2] = @"WebOpenPanelConfigurationMediaCaptureTypeKey";
  v21[2] = [NSNumber numberWithInteger:v8];
  char v9 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:3];
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  IsCurrent = (WTF::RunLoop *)WebThreadIsCurrent();
  if (IsCurrent)
  {
    WTF::RunLoop::main(IsCurrent);
    CFTypeRef cf = this;
    uint64_t v17 = v6;
    uint64_t v18 = v9;
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v12 = &unk_1F3C7C570;
    v12[1] = this;
    v12[2] = v6;
    v12[3] = v9;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = v12;
    WTF::RunLoop::dispatch();
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
  }
  else
  {
    uint64_t v14 = (id *)((char *)this + 16);
    uint64_t v15 = (void *)[objc_loadWeak(v14) _UIKitDelegateForwarder];
    [v15 webView:objc_loadWeak(v14) runOpenPanelForFileButtonWithResultListener:v6 configuration:v9];
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_1E1433274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13)
  {
    CFRelease(v13);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  *a2 = v4;
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6)
  {
    int v7 = (void *)v4;
    uint64_t v8 = *(WTF **)a1;
    uint64_t v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      uint64_t v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_1E14333B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    *CFTypeRef v10 = 0;
    if (!v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    *CFTypeRef v10 = 0;
    if (!v11) {
      goto LABEL_3;
    }
  }
  CFRelease(v11);
  _Unwind_Resume(exception_object);
}

uint64_t WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WebChromeClientIOS::didPreventDefaultForEvent(id *this)
{
  uint64_t v1 = this + 2;
  uint64_t v2 = (void *)[objc_loadWeak(this + 2) _UIKitDelegateForwarder];
  id Weak = objc_loadWeak(v1);
  return [v2 webViewDidPreventDefaultForEvent:Weak];
}

uint64_t WebChromeClientIOS::didReceiveMobileDocType(uint64_t this, int a2)
{
  if (a2)
  {
    uint64_t v2 = (id *)(this + 16);
    uint64_t v3 = (void *)[objc_loadWeak((id *)(this + 16)) _UIKitDelegateForwarder];
    id Weak = objc_loadWeak(v2);
    return [v3 webViewDidReceiveMobileDocType:Weak];
  }
  return this;
}

uint64_t WebChromeClientIOS::setNeedsScrollNotifications(id *this, WebCore::LocalFrame *a2, uint64_t a3)
{
  uint64_t v5 = this + 2;
  uint64_t v6 = (void *)[objc_loadWeak(this + 2) _UIKitDelegateForwarder];
  id Weak = objc_loadWeak(v5);
  uint64_t v8 = [NSNumber numberWithBool:a3];
  uint64_t v9 = *(void **)(*((void *)a2 + 35) + 16);
  if ((*(uint64_t (**)(void *))(*v9 + 1072))(v9)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9[2];
  }
  return [v6 webView:Weak needsScrollNotifications:v8 forFrame:v10];
}

uint64_t WebChromeClientIOS::didFinishContentChangeObserving(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 296))
  {
    uint64_t v5 = (id *)(result + 16);
    uint64_t v6 = (void *)[objc_loadWeak((id *)(result + 16)) _UIKitDelegateForwarder];
    id Weak = objc_loadWeak(v5);
    uint64_t v8 = *(void **)(*(void *)(a2 + 280) + 16);
    if ((*(uint64_t (**)(void *))(*v8 + 1072))(v8)) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8[2];
    }
    return [v6 webView:Weak didObserveDeferredContentChange:a3 forFrame:v9];
  }
  return result;
}

uint64_t WebChromeClientIOS::screenSize(WebChromeClientIOS *this)
{
  return MEMORY[0x1F416C428](this);
}

double WebChromeClientIOS::availableScreenSize(WebChromeClientIOS *this)
{
  return 0.0;
}

uint64_t WebChromeClientIOS::overrideScreenSize(WebChromeClientIOS *this)
{
  return MEMORY[0x1F416C428](this);
}

double WebChromeClientIOS::overrideAvailableScreenSize(WebChromeClientIOS *this)
{
  return 0.0;
}

uint64_t WebChromeClientIOS::dispatchViewportPropertiesDidChange(uint64_t a1, uint64_t a2)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (id *)(a1 + 16);
  uint64_t v4 = (void *)[objc_loadWeak((id *)(a1 + 16)) _UIKitDelegateForwarder];
  id Weak = objc_loadWeak(v3);
  v16[0] = WebViewportInitialScaleKey;
  LODWORD(v6) = *(_DWORD *)(a2 + 12);
  v17[0] = [NSNumber numberWithFloat:v6];
  v16[1] = WebViewportMinimumScaleKey;
  LODWORD(v7) = *(_DWORD *)(a2 + 16);
  v17[1] = [NSNumber numberWithFloat:v7];
  unsigned char v16[2] = WebViewportMaximumScaleKey;
  LODWORD(v8) = *(_DWORD *)(a2 + 20);
  _OWORD v17[2] = [NSNumber numberWithFloat:v8];
  v16[3] = WebViewportUserScalableKey;
  LODWORD(v9) = *(_DWORD *)(a2 + 24);
  v17[3] = [NSNumber numberWithFloat:v9];
  v17[4] = &unk_1F3C9C7F8;
  v16[4] = WebViewportShrinkToFitKey;
  v16[5] = WebViewportFitKey;
  int v11 = *(unsigned __int8 *)(a2 + 36);
  uint64_t v12 = &WebViewportFitContainValue;
  if (v11 != 1) {
    uint64_t v12 = &WebViewportFitAutoValue;
  }
  if (v11 == 2) {
    uint64_t v13 = &WebViewportFitCoverValue;
  }
  else {
    uint64_t v13 = v12;
  }
  v17[5] = *v13;
  v16[6] = WebViewportWidthKey;
  LODWORD(v10) = *(_DWORD *)(a2 + 4);
  v17[6] = [NSNumber numberWithFloat:v10];
  v16[7] = WebViewportHeightKey;
  LODWORD(v14) = *(_DWORD *)(a2 + 8);
  v17[7] = [NSNumber numberWithFloat:v14];
  return objc_msgSend(v4, "webView:didReceiveViewportArguments:", Weak, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v17, v16, 8));
}

uint64_t WebChromeClientIOS::notifyRevealedSelectionByScrollingFrame(id *this, WebCore::LocalFrame *a2)
{
  uint64_t v3 = [objc_loadWeak(this + 2) _UIKitDelegateForwarder];
  uint64_t v4 = *(void **)(*((void *)a2 + 35) + 16);
  if ((*(uint64_t (**)(void *))(*v4 + 1072))(v4))
  {
    uint64_t v5 = 0;
    double v6 = (void *)v3;
  }
  else
  {
    uint64_t v5 = v4[2];
    double v6 = (void *)v3;
  }
  return [v6 revealedSelectionByScrollingWebFrame:v5];
}

uint64_t WebChromeClientIOS::isStopping(id *this)
{
  id Weak = objc_loadWeak(this + 2);
  return [Weak _isStopping];
}

uint64_t WebChromeClientIOS::didLayout(uint64_t a1, int a2)
{
  uint64_t v3 = (id *)(a1 + 16);
  uint64_t v4 = (void *)[objc_loadWeak((id *)(a1 + 16)) _UIKitDelegate];
  id Weak = objc_loadWeak(v3);
  return [v4 webThreadWebViewDidLayout:Weak byScrolling:a2 == 1];
}

uint64_t WebChromeClientIOS::didStartOverflowScroll(id *this)
{
  uint64_t v1 = this + 2;
  uint64_t v2 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder"), "asyncForwarder");
  id Weak = objc_loadWeak(v1);
  return [v2 webViewDidStartOverflowScroll:Weak];
}

uint64_t WebChromeClientIOS::didEndOverflowScroll(id *this)
{
  uint64_t v1 = this + 2;
  uint64_t v2 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder"), "asyncForwarder");
  id Weak = objc_loadWeak(v1);
  return [v2 webViewDidEndOverflowScroll:Weak];
}

uint64_t WebChromeClientIOS::suppressFormNotifications(uint64_t this)
{
  return this;
}

uint64_t WebChromeClientIOS::restoreFormNotifications(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 24);
  if (v1 <= 0) {
    int v2 = 0;
  }
  else {
    int v2 = v1 - 1;
  }
  *(_DWORD *)(this + ++*(_DWORD *)(this + 24) = v2;
  return this;
}

uint64_t WebChromeClientIOS::elementDidFocus(uint64_t result, WebCore::Node *a2)
{
  if (*(int *)(result + 24) <= 0)
  {
    uint64_t v3 = (id *)(result + 16);
    uint64_t v4 = (void *)[objc_loadWeak((id *)(result + 16)) _UIKitDelegateForwarder];
    id Weak = objc_loadWeak(v3);
    double v6 = kit(a2);
    return [v4 webView:Weak elementDidFocusNode:v6];
  }
  return result;
}

uint64_t WebChromeClientIOS::elementDidBlur(uint64_t this, WebCore::Element *a2)
{
  if (*(int *)(this + 24) <= 0)
  {
    uint64_t v3 = (id *)(this + 16);
    uint64_t v4 = (void *)[objc_loadWeak((id *)(this + 16)) _UIKitDelegateForwarder];
    id Weak = objc_loadWeak(v3);
    double v6 = kit(a2);
    return [v4 webView:Weak elementDidBlurNode:v6];
  }
  return this;
}

uint64_t WebChromeClientIOS::selectItemWritingDirectionIsNatural(WebChromeClientIOS *this)
{
  return 0;
}

uint64_t WebChromeClientIOS::selectItemAlignmentFollowsMenuWritingDirection(WebChromeClientIOS *this)
{
  return 1;
}

uint64_t WebChromeClientIOS::createPopupMenu@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1F3C792D8;
  *(void *)(result + 16) = a1;
  *a2 = result;
  return result;
}

uint64_t WebChromeClientIOS::createSearchPopupMenu@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1F3C79318;
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1F3C792D8;
  *(void *)(result + 16) = a1;
  *(void *)(v4 + 16) = result;
  *a2 = v4;
  return result;
}

uint64_t WebChromeClientIOS::attachRootGraphicsLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (id *)(a1 + 16);
  uint64_t v5 = (void *)[objc_loadWeak((id *)(a1 + 16)) _UIKitDelegate];
  id Weak = objc_loadWeak(v4);
  if (a3) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 584))(a3);
  }
  else {
    uint64_t v7 = 0;
  }
  return objc_msgSend(v5, "_webthread_webView:attachRootLayer:", Weak, v7);
}

uint64_t WebChromeClientIOS::didFlushCompositingLayers(id *this)
{
  int v1 = this + 2;
  int v2 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder"), "asyncForwarder");
  id Weak = objc_loadWeak(v1);
  return [v2 webViewDidCommitCompositingLayerChanges:Weak];
}

uint64_t WebChromeClientIOS::fetchCustomFixedPositionLayoutRect(uint64_t a1, void *a2)
{
  uint64_t v4 = [objc_loadWeak((id *)(a1 + 16)) _fetchCustomFixedPositionLayoutRect:v7];
  if (v4)
  {
    *a2 = WebCore::enclosingIntRect((WebCore *)v7, v3);
    a2[1] = v5;
  }
  return v4;
}

uint64_t WebChromeClientIOS::updateViewportConstrainedLayers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)[objc_loadWeak((id *)(a1 + 16)) _fixedPositionContent];
  return [v5 setViewportConstrainedLayers:a2 stickyContainerMap:a3];
}

uint64_t WebChromeClientIOS::addOrUpdateScrollingLayer(id *this, WebCore::Node *a2, CALayer *a3, CALayer *a4, const WebCore::IntSize *a5, uint64_t a6, char a7)
{
  uint64_t v12 = kit(a2);
  this += 2;
  uint64_t v13 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this), "_UIKitDelegateForwarder"), "asyncForwarder");
  id Weak = objc_loadWeak(this);
  uint64_t v15 = (void *)MEMORY[0x1E4F29238];
  WebCore::IntSize::operator CGSize();
  LOBYTE(v17) = a7;
  return objc_msgSend(v13, "webView:didCreateOrUpdateScrollingLayer:withContentsLayer:scrollSize:forNode:allowHorizontalScrollbar:allowVerticalScrollbar:", Weak, a3, a4, objc_msgSend(v15, "valueWithSize:"), v12, a6, v17);
}

uint64_t WebChromeClientIOS::removeScrollingLayer(id *this, WebCore::Node *a2, CALayer *a3, CALayer *a4)
{
  uint64_t v7 = kit(a2);
  this += 2;
  double v8 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this), "_UIKitDelegateForwarder"), "asyncForwarder");
  id Weak = objc_loadWeak(this);
  return [v8 webView:Weak willRemoveScrollingLayer:a3 withContentsLayer:a4 forNode:v7];
}

uint64_t WebChromeClientIOS::webAppOrientationsUpdated(id *this)
{
  int v1 = this + 2;
  int v2 = (void *)[objc_loadWeak(this + 2) _UIDelegateForwarder];
  id Weak = objc_loadWeak(v1);
  return [v2 webViewSupportedOrientationsUpdated:Weak];
}

id WebChromeClientIOS::focusedElementChanged(id this, WebCore::Element *a2)
{
  if (a2)
  {
    if ((*((_WORD *)a2 + 16) & 0x10) != 0
      && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      uint64_t v3 = (uint64_t)this;
      this = (id)WebCore::HTMLInputElement::isText(a2);
      if (this)
      {
        id Weak = (WebView *)objc_loadWeak((id *)(v3 + 16));
        uint64_t v5 = kit(a2);
        uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
        if (v6
          && (uint64_t v7 = *(void *)(v6 + 8)) != 0
          && (double v8 = *(void **)(*(void *)(v7 + 280) + 16),
              ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
        {
          double v9 = (objc_object *)v8[2];
        }
        else
        {
          double v9 = 0;
        }
        return CallFormDelegate(Weak, (objc_selector *)sel_didFocusTextField_inFrame_, (objc_object *)v5, v9);
      }
    }
  }
  return this;
}

uint64_t WebChromeClientIOS::showPlaybackTargetPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (id *)(a1 + 16);
  objc_msgSend((id)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_UIKitDelegateForwarder"), "interactionLocation");
  objc_msgSend((id)objc_msgSend(objc_loadWeak(v3), "mainFrame"), "elementRectAtPoint:", v4, v5);
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  double v14 = (void *)[objc_loadWeak(v3) _UIKitDelegateForwarder];
  return objc_msgSend(v14, "showPlaybackTargetPicker:fromRect:", a2, v7, v9, v11, v13);
}

uint64_t WebChromeClientIOS::createIconForFiles(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F41724A8](a2);
}

uint64_t WebChromeClientIOS::deviceOrientation(id *this)
{
  return [objc_loadWeak(this + 2) _deviceOrientation];
}

uint64_t WebChromeClientIOS::hoverSupportedByPrimaryPointingDevice(WebChromeClientIOS *this)
{
  return 0;
}

uint64_t WebChromeClientIOS::hoverSupportedByAnyAvailablePointingDevice(WebChromeClientIOS *this)
{
  return 0;
}

uint64_t WebChromeClientIOS::pointerCharacteristicsOfPrimaryPointingDevice(WebChromeClientIOS *this)
{
  return 257;
}

uint64_t WebChromeClientIOS::pointerCharacteristicsOfAllAvailablePointingDevices(WebChromeClientIOS *this)
{
  return 1;
}

uint64_t WebChromeClientIOS::showDataDetectorsUIForElement()
{
  return 0;
}

void WebChromeClientIOS::~WebChromeClientIOS(id *this)
{
  objc_destroyWeak(this + 2);
  WebCore::ChromeClient::~ChromeClient((WebCore::ChromeClient *)this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  objc_destroyWeak(this + 2);
  WebCore::ChromeClient::~ChromeClient((WebCore::ChromeClient *)this);
  WTF::fastFree(v2, v3);
}

void *WTF::Detail::CallableWrapper<WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7C570;
  int v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7C570;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  double v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0,void>::call(void *a1)
{
  int v2 = (id *)(a1[1] + 16);
  uint64_t v3 = (void *)[objc_loadWeak(v2) _UIKitDelegateForwarder];
  id Weak = objc_loadWeak(v2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  return [v3 webView:Weak runOpenPanelForFileButtonWithResultListener:v5 configuration:v6];
}

void sub_1E1434690(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  double v4 = va_arg(va1, WTF *);
  uint64_t v6 = va_arg(va1, void);
  std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100]((WTF **)va, a2);
  MEMORY[0x1E4E43B10](va1);
  _Unwind_Resume(a1);
}

uint64_t createNSCountedSet(uint64_t *a1, uint64_t *a2)
{
  id v4 = objc_alloc(MEMORY[0x1E4F28BD0]);
  if (*a2)
  {
    uint64_t result = [v4 initWithCapacity:*(unsigned int *)(*a2 - 12)];
    uint64_t v6 = (void *)result;
    *a1 = result;
    uint64_t v7 = *a2;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v10 = 0;
    uint64_t v9 = v7;
    goto LABEL_12;
  }
  uint64_t result = [v4 initWithCapacity:0];
  uint64_t v6 = (void *)result;
  *a1 = result;
  uint64_t v7 = *a2;
  if (!*a2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v8 = *(unsigned int *)(v7 - 4);
  uint64_t v9 = v7 + 16 * v8;
  if (*(_DWORD *)(v7 - 12))
  {
    uint64_t v10 = v7;
    if (v8)
    {
      uint64_t v11 = 16 * v8;
      uint64_t v10 = v7;
      while ((unint64_t)(*(void *)v10 + 1) <= 1)
      {
        v10 += 16;
        v11 -= 16;
        if (!v11)
        {
          uint64_t v10 = v9;
          if (v7) {
            goto LABEL_13;
          }
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v7) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  uint64_t v10 = v7 + 16 * v8;
  uint64_t v9 = v10;
  if (v7)
  {
LABEL_13:
    uint64_t v12 = v7 + 16 * *(unsigned int *)(v7 - 4);
    if (v12 == v10) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v12 = 0;
  if (!v10) {
    return result;
  }
  do
  {
LABEL_19:
    uint64_t result = [NSString stringWithUTF8String:*(void *)v10];
    if (*(_DWORD *)(v10 + 8))
    {
      uint64_t v13 = result;
      unsigned int v14 = 0;
      do
      {
        uint64_t result = [v6 addObject:v13];
        ++v14;
      }
      while (v14 < *(_DWORD *)(v10 + 8));
    }
    uint64_t v15 = v10 + 16;
    uint64_t v10 = v9;
    if (v15 != v9)
    {
      uint64_t v10 = v15;
      while ((unint64_t)(*(void *)v10 + 1) <= 1)
      {
        v10 += 16;
        if (v10 == v9)
        {
          uint64_t v10 = v9;
          break;
        }
      }
    }
  }
  while (v10 != v12);
  return result;
}

void sub_1E1434848(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

WTF **std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(void *)v3) {
      WTF::fastFree((WTF *)(*(void *)v3 - 16), a2);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void sub_1E143496C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  id v4 = va_arg(va1, WTF *);
  uint64_t v6 = va_arg(va1, void);
  std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100]((WTF **)va, a2);
  MEMORY[0x1E4E43B10](va1);
  _Unwind_Resume(a1);
}

void sub_1E1434F7C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143504C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1435160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

unint64_t WebCryptoClient::wrapCryptoKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v33 = 0;
  uint64_t v34 = 0;
  uint64_t v3 = (id *)(a1 + 8);
  [objc_loadWeak((id *)(a1 + 8)) UIDelegate];
  uint64_t v4 = objc_opt_respondsToSelector();
  if (v4)
  {
    id Weak = (WebView *)objc_loadWeak(v3);
    id v6 = CallUIDelegate(Weak, (objc_selector *)sel_webCryptoMasterKeyForWebView_);
    uint64_t v7 = v6;
    if (!v6)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      goto LABEL_28;
    }
    uint64_t v8 = [v6 bytes];
    unint64_t result = [v7 length];
    unint64_t v10 = result;
    uint64_t v30 = 0;
    LODWORD(v31) = 0;
    HIDWORD(v31) = result;
    if (result)
    {
      if (HIDWORD(result))
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)result);
      LODWORD(v31) = v10;
      uint64_t v30 = v11;
      if (v10 < 8)
      {
        uint64_t v12 = (char *)v8;
        goto LABEL_27;
      }
      uint64_t v12 = (char *)v8;
      if ((unint64_t)v11 - v8 < 0x20) {
        goto LABEL_27;
      }
      if (v10 < 0x20)
      {
        unint64_t v13 = 0;
        goto LABEL_22;
      }
      unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v18 = (long long *)(v8 + 16);
      uint64_t v19 = (_OWORD *)((char *)v11 + 16);
      unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        _OWORD *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v10 != v13)
      {
        if ((v10 & 0x18) == 0)
        {
          uint64_t v12 = (char *)(v8 + v13);
          uint64_t v11 = (WTF *)((char *)v11 + v13);
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v12 = (char *)(v8 + (v10 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v22 = (uint64_t *)(v8 + v13);
        id v23 = (void *)((char *)v11 + v13);
        unint64_t v24 = v13 - (v10 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *v22++;
          *v23++ = v25;
          v24 += 8;
        }
        while (v24);
        uint64_t v11 = (WTF *)((char *)v11 + (v10 & 0xFFFFFFFFFFFFFFF8));
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
        do
        {
LABEL_27:
          char v26 = *v12++;
          *(unsigned char *)uint64_t v11 = v26;
          uint64_t v11 = (WTF *)((char *)v11 + 1);
        }
        while (v12 != (char *)(v8 + v10));
      }
    }
LABEL_28:
    if (WebCore::wrapSerializedCryptoKey())
    {
      *(void *)a2 = v33;
      uint64_t v27 = v34;
      char v33 = 0;
      uint64_t v34 = 0;
      *(void *)(a2 + 8) = v27;
      char v28 = 1;
    }
    else
    {
      char v28 = 0;
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 16) = v28;
    goto LABEL_32;
  }
  WebCore::defaultWebCryptoMasterKey((uint64_t *)&v30, (WebCore *)v4);
  if (!v32)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    goto LABEL_34;
  }
  if (WebCore::wrapSerializedCryptoKey())
  {
    *(void *)a2 = v33;
    uint64_t v15 = v34;
    char v33 = 0;
    uint64_t v34 = 0;
    *(void *)(a2 + 8) = v15;
    int v16 = v32;
    *(unsigned char *)(a2 + 16) = 1;
    if (!v16) {
      goto LABEL_34;
    }
LABEL_32:
    uint64_t v29 = v30;
    if (v30)
    {
      uint64_t v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree(v29, v14);
    }
    goto LABEL_34;
  }
  *(unsigned char *)a2 = 0;
  int v17 = v32;
  *(unsigned char *)(a2 + 16) = 0;
  if (v17) {
    goto LABEL_32;
  }
LABEL_34:
  unint64_t result = (unint64_t)v33;
  if (v33)
  {
    char v33 = 0;
    LODWORD(v34) = 0;
    return WTF::fastFree((WTF *)result, v14);
  }
  return result;
}

void sub_1E14353C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, WTF *a14, int a15)
{
  if (a13 && a10) {
    WTF::fastFree(a10, a2);
  }
  if (a14) {
    WTF::fastFree(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebCryptoClient::unwrapCryptoKey@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t result = WebCore::readSerializedCryptoKey();
  if (!v28) {
    goto LABEL_14;
  }
  id v6 = (id *)(a1 + 8);
  [objc_loadWeak(v6) UIDelegate];
  uint64_t v7 = objc_opt_respondsToSelector();
  if (v7)
  {
    id Weak = (WebView *)objc_loadWeak(v6);
    unint64_t result = (unint64_t)CallUIDelegate(Weak, (objc_selector *)sel_webCryptoMasterKeyForWebView_);
    uint64_t v9 = (void *)result;
    if (!result)
    {
      id v23 = 0;
      uint64_t v24 = 0;
      goto LABEL_27;
    }
    uint64_t v10 = [(id)result bytes];
    unint64_t result = [v9 length];
    unint64_t v11 = result;
    id v23 = 0;
    LODWORD(v++*(_DWORD *)(this + 24) = 0;
    HIDWORD(v++*(_DWORD *)(this + 24) = result;
    if (!result) {
      goto LABEL_27;
    }
    if (HIDWORD(result))
    {
      __break(0xC471u);
      goto LABEL_36;
    }
    unint64_t result = WTF::fastMalloc((WTF *)result);
    LODWORD(v++*(_DWORD *)(this + 24) = v11;
    id v23 = (WTF *)result;
    if (v11 < 8)
    {
      uint64_t v12 = (char *)v10;
      goto LABEL_26;
    }
    uint64_t v12 = (char *)v10;
    if (result - v10 < 0x20) {
      goto LABEL_26;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v14 = (long long *)(v10 + 16);
      uint64_t v15 = (_OWORD *)(result + 16);
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        _OWORD *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
      {
LABEL_27:
        if (v28)
        {
          WebCore::unwrapCryptoKey();
LABEL_29:
          unint64_t result = (unint64_t)v23;
          if (v23)
          {
            id v23 = 0;
            LODWORD(v++*(_DWORD *)(this + 24) = 0;
            unint64_t result = WTF::fastFree((WTF *)result, v5);
          }
          goto LABEL_31;
        }
LABEL_36:
        __break(1u);
        return result;
      }
      if ((v11 & 0x18) == 0)
      {
        uint64_t v12 = (char *)(v10 + v13);
        result += v13;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v12 = (char *)(v10 + (v11 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v18 = (uint64_t *)(v10 + v13);
    uint64_t v19 = (void *)(result + v13);
    unint64_t v20 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v21 = *v18++;
      *v19++ = v21;
      v20 += 8;
    }
    while (v20);
    result += v11 & 0xFFFFFFFFFFFFFFF8;
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_27;
    }
    do
    {
LABEL_26:
      char v22 = *v12++;
      *(unsigned char *)result++ = v22;
    }
    while (v12 != (char *)(v10 + v11));
    goto LABEL_27;
  }
  unint64_t result = (unint64_t)WebCore::defaultWebCryptoMasterKey((uint64_t *)&v23, (WebCore *)v7);
  if (v25)
  {
    if (!v28) {
      goto LABEL_36;
    }
    unint64_t result = WebCore::unwrapCryptoKey();
    if (v25) {
      goto LABEL_29;
    }
  }
  else
  {
LABEL_14:
    *a2 = 0;
    a2[16] = 0;
  }
LABEL_31:
  if (v28)
  {
    unint64_t result = (unint64_t)v26;
    if (v26)
    {
      char v26 = 0;
      int v27 = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_1E143565C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a12 && a9) {
    WTF::fastFree(a9, a2);
  }
  if (a20)
  {
    if (a16)
    {
      WTF::fastFree(a16, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCryptoClient::~WebCryptoClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 1);
  WTF::fastFree((WTF *)this, v2);
}

void sub_1E1435918(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1435B34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1435B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  CFRelease(v12);
  if (v11) {
    CFRelease(v11);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(unsigned int **)a1;
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    do
    {
      uint64_t v6 = v4[6];
      if (v6 != -1) {
        ((void (*)(char *, unsigned int *))off_1F3C7C5D8[v6])(&v8, v4);
      }
      v4[6] = -1;
      v4 += 8;
      v5 -= 32;
    }
    while (v5);
    uint64_t v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void sub_1E1435D58(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1435D70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14)
  {
    CFRelease(v14);
    if (!v12)
    {
LABEL_3:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  CFRelease(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v15);
  _Unwind_Resume(a1);
}

void sub_1E1435FA4(_Unwind_Exception *exception_object)
{
}

void sub_1E1435FB0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1435FC4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1E1435FA8);
}

void sub_1E14361AC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_WORD *WTF::NeverDestroyed<WebKit::WebDatabaseManagerClient,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>(_WORD *a1)
{
  *(void *)a1 = &unk_1F3C7C5F8;
  a1[4] = 0;
  *((unsigned char *)a1 + 10) = 0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)WebKit::onNewDatabaseOriginAdded, @"com.apple.MobileSafariSettings.WebDatabaseOriginWasAddedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)WebKit::onDatabaseDeleted, @"com.apple.MobileSafariSettings.WebDatabaseWasDeletedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)WebKit::onDatabaseOriginDeleted, @"com.apple.MobileSafariSettings.WebDatabaseOriginWasDeletedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void WebKit::onNewDatabaseOriginAdded(WebKit *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  WebThreadLock();
  if (*((unsigned char *)a2 + 8))
  {
    *((unsigned char *)a2 + 8) = 0;
  }
  else
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFStringRef v8 = WebDatabaseOriginsDidChangeNotification;
    CFNotificationCenterPostNotification(LocalCenter, v8, 0, 0, 1u);
  }
}

WebCore::DatabaseTracker *WebKit::onDatabaseDeleted(WebKit *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  unint64_t result = (WebCore::DatabaseTracker *)WebThreadLock();
  if (*((unsigned char *)a2 + 9))
  {
    *((unsigned char *)a2 + 9) = 0;
  }
  else
  {
    uint64_t v8 = WebCore::DatabaseTracker::singleton(result);
    return (WebCore::DatabaseTracker *)MEMORY[0x1F416E068](v8);
  }
  return result;
}

void WebKit::onDatabaseOriginDeleted(WebKit *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  WebThreadLock();
  if (*((unsigned char *)a2 + 10))
  {
    *((unsigned char *)a2 + 10) = 0;
  }
  else
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFStringRef v8 = WebDatabaseOriginsDidChangeNotification;
    CFNotificationCenterPostNotification(LocalCenter, v8, 0, 0, 1u);
  }
}

void WebKit::WebDatabaseManagerClient::~WebDatabaseManagerClient(WebKit::WebDatabaseManagerClient *this)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, this, 0, 0);
}

{
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t vars8;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, this, 0, 0);
  JUMPOUT(0x1E4E4B240);
}

void WebKit::WebDatabaseManagerClient::dispatchDidModifyOrigin(WebKit::WebDatabaseManagerClient *this, const WebCore::SecurityOriginData *a2)
{
  if (WTF::isMainThread(this))
  {
    uint64_t v5 = [WebSecurityOrigin alloc];
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v13, a2);
    id v7 = [(WebSecurityOrigin *)v5 _initWithWebCoreSecurityOrigin:v13];
    CFStringRef v8 = v13;
    unint64_t v13 = 0;
    if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v8);
      uint64_t v10 = (WTF::StringImpl *)*((void *)v8 + 6);
      *((void *)v8 + 6) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v6);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      unint64_t v11 = (WTF::StringImpl *)*((void *)v8 + 5);
      *((void *)v8 + 5) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v6);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = *((unsigned int *)v8 + 8);
      if (v12 != -1) {
        ((void (*)(char *, char *))off_1F3C7C658[v12])(&v14, (char *)v8 + 8);
      }
      *((_DWORD *)v8 + 8) = -1;
      WTF::fastFree(v8, v6);
    }
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter", v13);
    [v9 postNotificationName:WebDatabaseDidModifyOriginNotification object:v7];
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    WebKit::DidModifyOriginData::dispatchToMainThread(this, a2, v4);
  }
}

void sub_1E1436654(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1436668(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::DidModifyOriginData *this, WebKit::WebDatabaseManagerClient *a2, const WebCore::SecurityOriginData *a3)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v4 = this;
  WebCore::SecurityOriginData::isolatedCopy();
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C7C640;
  v5[1] = v4;
  uint64_t v7 = (uint64_t)v5;
  WTF::callOnMainThread();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_1E1436738(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFStringRef v8 = va_arg(va1, unsigned int *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v4 = v10;
  uint64_t v10 = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va, v5);
    WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va1, v6);
    _Unwind_Resume(a1);
  }
  WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va, a2);
  WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va1, v7);
  _Unwind_Resume(a1);
}

void sub_1E14367A0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebDatabaseManagerClient::dispatchDidModifyDatabase(WebKit::WebDatabaseManagerClient *this, const WebCore::SecurityOriginData *a2, const WTF::String *a3)
{
  if (WTF::isMainThread(this))
  {
    uint64_t v7 = [WebSecurityOrigin alloc];
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v18, a2);
    id v9 = [(WebSecurityOrigin *)v7 _initWithWebCoreSecurityOrigin:v18];
    uint64_t v10 = v18;
    uint64_t v18 = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v10);
      uint64_t v15 = (WTF::StringImpl *)*((void *)v10 + 6);
      *((void *)v10 + 6) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v8);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      unint64_t v16 = (WTF::StringImpl *)*((void *)v10 + 5);
      *((void *)v10 + 5) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v8);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = *((unsigned int *)v10 + 8);
      if (v17 != -1) {
        ((void (*)(char *, char *))off_1F3C7C658[v17])(&v19, (char *)v10 + 8);
      }
      *((_DWORD *)v10 + 8) = -1;
      WTF::fastFree(v10, v8);
    }
    id v11 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    if (*(void *)a3) {
      uint64_t v12 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v12 = &stru_1F3C7DA90;
    }
    unint64_t v13 = (const void *)objc_msgSend(v11, "initWithObjectsAndKeys:", v12, WebDatabaseIdentifierKey, 0, v18);
    char v14 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
    [v14 postNotificationName:WebDatabaseDidModifyDatabaseNotification object:v9 userInfo:v13];
    if (v13) {
      CFRelease(v13);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  else
  {
    WebKit::DidModifyOriginData::dispatchToMainThread(this, a2, v6);
  }
}

void sub_1E1436974(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1436988(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    CFRelease(v2);
    if (!v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebDatabaseManagerClient::dispatchDidAddNewOrigin(WebKit::WebDatabaseManagerClient *this)
{
  *((unsigned char *)this + 8) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.MobileSafariSettings.WebDatabaseOriginWasAddedNotification", 0, 0, 1u);
}

void WebKit::WebDatabaseManagerClient::dispatchDidDeleteDatabase(WebKit::WebDatabaseManagerClient *this)
{
  *((unsigned char *)this + 9) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.MobileSafariSettings.WebDatabaseWasDeletedNotification", 0, 0, 1u);
}

void WebKit::WebDatabaseManagerClient::dispatchDidDeleteDatabaseOrigin(WebKit::WebDatabaseManagerClient *this)
{
  *((unsigned char *)this + 10) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.MobileSafariSettings.WebDatabaseOriginWasDeletedNotification", 0, 0, 1u);
}

unsigned int **WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData(unsigned int **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    uint64_t v4 = v3[8];
    if (v4 != -1) {
      ((void (*)(char *, unsigned int *))off_1F3C7C658[v4])(&v6, v3 + 2);
    }
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1F3C7C640;
  a1[1] = 0;
  if (v3)
  {
    uint64_t v4 = v3[8];
    if (v4 != -1) {
      ((void (*)(char *, unsigned int *))off_1F3C7C658[v4])(&v6, v3 + 2);
    }
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1F3C7C640;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3)
  {
    uint64_t v4 = v3[8];
    if (v4 != -1) {
      ((void (*)(char *, unsigned int *))off_1F3C7C658[v4])(&v6, v3 + 2);
    }
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
}

void WebDatabaseProvider::~WebDatabaseProvider(WebDatabaseProvider *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (unsigned int *)-1)
        {
          char v6 = *v5;
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6 + 6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
              WTF::fastFree(v7, v8);
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::DatabaseProvider::~DatabaseProvider(this);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (unsigned int *)-1)
        {
          char v6 = *v5;
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6 + 6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
              WTF::fastFree(v7, v8);
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::DatabaseProvider::~DatabaseProvider(this);
  WTF::fastFree(v9, v10);
}

uint64_t WebDatabaseProvider::idbConnectionToServerForSession(WebDatabaseProvider *this, SessionID sessionid)
{
  uint64_t v4 = (uint64_t *)((char *)this + 16);
  uint64_t v3 = *((void *)this + 2);
  if (v3
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash((uint64_t *)this + 2, 8u, 0), (uint64_t v3 = *v4) != 0))
  {
    int v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    int v5 = 0;
  }
  unint64_t v6 = (~(sessionid.m_identifier << 32) + sessionid.m_identifier) ^ ((~(sessionid.m_identifier << 32)
                                                                    + sessionid.m_identifier) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = (uint64_t *)(v3 + 16 * v9);
  v11.m_identifier = *v10;
  if (!*v10)
  {
LABEL_12:
    *uint64_t v10 = sessionid.m_identifier;
    if ((uint64_t)sessionid.m_identifier > -2)
    {
      WebDatabaseProvider::indexedDatabaseDirectoryPath((uint64_t)&v26);
      unint64_t v16 = (InProcessIDBServer *)WTF::fastMalloc((WTF *)0x40);
      InProcessIDBServer::InProcessIDBServer(v16, v28, (const WTF::String *)&v26);
      uint64_t v18 = v26;
      char v26 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v17);
          uint64_t v15 = (unsigned int *)v10[1];
          v10[1] = (uint64_t)v16;
          if (!v15) {
            goto LABEL_21;
          }
          goto LABEL_19;
        }
        *(_DWORD *)v18 -= 2;
      }
      uint64_t v15 = (unsigned int *)v10[1];
      v10[1] = (uint64_t)v16;
      if (!v15) {
        goto LABEL_21;
      }
    }
    else
    {
      char v14 = (InProcessIDBServer *)WTF::fastMalloc((WTF *)0x40);
      InProcessIDBServer::InProcessIDBServer(v14, v27, MEMORY[0x1E4F30978]);
      uint64_t v15 = (unsigned int *)v10[1];
      v10[1] = (uint64_t)v14;
      if (!v15) {
        goto LABEL_21;
      }
    }
LABEL_19:
    if (atomic_fetch_add((atomic_uint *volatile)v15 + 6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v15);
      WTF::fastFree(v24, v25);
    }
LABEL_21:
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      uint64_t v19 = *v4;
      if (*v4) {
        goto LABEL_23;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v19 = *v4;
      if (*v4)
      {
LABEL_23:
        uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
        unint64_t v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400) {
          goto LABEL_24;
        }
        goto LABEL_29;
      }
    }
    uint64_t v20 = *(unsigned int *)(v19 - 16);
    unint64_t v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400)
    {
LABEL_24:
      if (3 * v21 > 4 * v20) {
        return *(void *)(v10[1] + 40);
      }
      if (!v21)
      {
        unsigned int v22 = 8;
LABEL_31:
        uint64_t v10 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v4, v22, v10);
        return *(void *)(v10[1] + 40);
      }
LABEL_30:
      unsigned int v22 = v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
      goto LABEL_31;
    }
LABEL_29:
    if (v21 > 2 * v20) {
      return *(void *)(v10[1] + 40);
    }
    goto LABEL_30;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v11.m_identifier != sessionid.m_identifier)
  {
    if (v11.m_identifier == -1) {
      uint64_t v12 = v10;
    }
    unsigned int v9 = (v9 + v13) & v5;
    uint64_t v10 = (uint64_t *)(v3 + 16 * v9);
    v11.m_identifier = *v10;
    ++v13;
    if (!*v10)
    {
      if (v12)
      {
        *uint64_t v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v10 = v12;
      }
      goto LABEL_12;
    }
  }
  return *(void *)(v10[1] + 40);
}

void *WebDatabaseProvider::deleteAllDatabases(void *this)
{
  uint64_t v1 = this[2];
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(v1 - 4);
    uint64_t v3 = (void *)(v1 + 16 * v2);
    if (!*(_DWORD *)(v1 - 12))
    {
      uint64_t v4 = (void *)(v1 + 16 * v2);
      uint64_t v3 = v4;
LABEL_10:
      unint64_t v6 = (void *)(v1 + 16 * *(unsigned int *)(v1 - 4));
      if (v6 == v4) {
        return this;
      }
      goto LABEL_16;
    }
    uint64_t v4 = (void *)this[2];
    if (v2)
    {
      uint64_t v5 = 16 * v2;
      uint64_t v4 = (void *)this[2];
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        v5 -= 16;
        if (!v5)
        {
          uint64_t v4 = v3;
          goto LABEL_10;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  if (v1) {
    goto LABEL_10;
  }
  unint64_t v6 = 0;
  if (!v4) {
    return this;
  }
  do
  {
LABEL_16:
    uint64_t v7 = v4[1];
    atomic_fetch_add((atomic_uint *volatile)(v7 + 24), 1u);
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *unint64_t v8 = &unk_1F3C79288;
    v8[1] = v7;
    unsigned char v8[2] = v7;
    v8[3] = 0xFFF0000000000000;
    uint64_t v10 = v8;
    (*(void (**)(void, void **))(**(void **)(v7 + 56) + 32))(*(void *)(v7 + 56), &v10);
    this = v10;
    uint64_t v10 = 0;
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
    unsigned int v9 = v4 + 2;
    uint64_t v4 = v3;
    if (v9 != v3)
    {
      uint64_t v4 = v9;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
    }
  }
  while (v4 != v6);
  return this;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unint64_t v6 = a3;
    int v7 = *(_DWORD *)(v5 - 4);
    int v8 = *(_DWORD *)(v5 - 12);
    size_t v9 = 16 * a2;
    uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    uint64_t v12 = (void *)(v11 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v6 = a3;
  int v7 = 0;
  int v8 = 0;
  size_t v9 = 16 * a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  uint64_t v12 = (void *)(v11 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v12, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    char v14 = 0;
    uint64_t v15 = v6;
    do
    {
      unint64_t v16 = (uint64_t *)(v5 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v23 = *a1;
          if (*a1) {
            int v24 = *(_DWORD *)(v23 - 8);
          }
          else {
            int v24 = 0;
          }
          unint64_t v25 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          unsigned int v28 = v24 & ((v27 >> 31) ^ v27);
          int v29 = 1;
          do
          {
            unsigned int v30 = v28;
            uint64_t v31 = *(void *)(v23 + 16 * v28);
            unsigned int v28 = (v28 + v29++) & v24;
          }
          while (v31);
          unsigned __int8 v32 = (uint64_t *)(v23 + 16 * v30);
          char v33 = (unsigned int *)v32[1];
          v32[1] = 0;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33 + 6, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33 + 6);
            unint64_t v43 = v15;
            InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v33);
            WTF::fastFree(v40, v41);
            uint64_t v15 = v43;
          }
          *unsigned __int8 v32 = *v16;
          uint64_t v34 = v5 + 16 * v13;
          uint64_t v35 = *(void *)(v34 + 8);
          *(void *)(v34 + 8) = 0;
          v32[1] = v35;
          BOOL v36 = *(unsigned int **)(v34 + 8);
          *(void *)(v34 + 8) = 0;
          if (v36 && atomic_fetch_add((atomic_uint *volatile)v36 + 6, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v36 + 6);
            uint64_t v37 = v15;
            InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v36);
            WTF::fastFree(v38, v39);
            uint64_t v15 = v37;
          }
          if (v16 == v15) {
            char v14 = v32;
          }
        }
        else
        {
          uint64_t v18 = v5 + 16 * v13;
          uint64_t v19 = *(unsigned int **)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v19 + 6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v19 + 6);
              uint64_t v20 = v15;
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v19);
              WTF::fastFree(v21, v22);
              uint64_t v15 = v20;
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    char v14 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v10);
  return v14;
}

uint64_t WebDatabaseProvider::indexedDatabaseDirectoryPath@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v4 = [v3 objectForKey:WebDatabaseDirectoryDefaultsKey];
  if (v4)
  {
    uint64_t v5 = v4;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      MEMORY[0x1E4E442D0](&v13, v5);
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (v14)
      {
        int v7 = (__CFString *)WTF::StringImpl::operator NSString *();
        uint64_t v11 = v14;
        char v14 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v6);
            size_t v9 = v13;
            uint64_t v13 = 0;
            if (!v9) {
              return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
            }
          }
          else
          {
            *(_DWORD *)v11 -= 2;
            size_t v9 = v13;
            uint64_t v13 = 0;
            if (!v9) {
              return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
            }
          }
LABEL_22:
          int v10 = *(_DWORD *)v9 - 2;
          if (*(_DWORD *)v9 == 2) {
            goto LABEL_23;
          }
LABEL_12:
          *(_DWORD *)size_t v9 = v10;
          return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
        }
      }
      else
      {
        char v14 = 0;
        int v7 = &stru_1F3C7DA90;
      }
      size_t v9 = v13;
      uint64_t v13 = 0;
      if (!v9) {
        return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
      }
      goto LABEL_22;
    }
  }
  MEMORY[0x1E4E442D0](&v13, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"));
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v14)
  {
    int v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    int v8 = v14;
    char v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        size_t v9 = v13;
        uint64_t v13 = 0;
        if (!v9) {
          return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
        }
      }
      else
      {
        *(_DWORD *)v8 -= 2;
        size_t v9 = v13;
        uint64_t v13 = 0;
        if (!v9) {
          return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
        }
      }
LABEL_11:
      int v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 == 2)
      {
LABEL_23:
        WTF::StringImpl::destroy(v9, v6);
        return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
      }
      goto LABEL_12;
    }
  }
  else
  {
    char v14 = 0;
    int v7 = &stru_1F3C7DA90;
  }
  size_t v9 = v13;
  uint64_t v13 = 0;
  if (v9) {
    goto LABEL_11;
  }
  return MEMORY[0x1E4E442D0](a1, [(__CFString *)v7 stringByStandardizingPath]);
}

void sub_1E14375E4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id CallUIDelegate(WebView *a1, objc_selector *a2)
{
  id result = [(WebView *)a1 _UIDelegateForSelector:a2];
  unint64_t v6 = a1;
  if (result)
  {
    if (objc_opt_respondsToSelector())
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      [NSInvocation setArgument:&v6 atIndex:2];
      uint64_t v5 = 0;
      WebThreadCallDelegate();
      id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        [NSInvocation getReturnValue:&v5];
        return (id)v5;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1E1438118()
{
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3)
{
  id result = [(WebView *)a1 _UIDelegateForSelector:a2];
  int v8 = a3;
  size_t v9 = a1;
  if (result)
  {
    if (objc_opt_respondsToSelector())
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      [NSInvocation setArgument:&v9 atIndex:2];
      [NSInvocation setArgument:&v8 atIndex:3];
      uint64_t v7 = 0;
      WebThreadCallDelegate();
      id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        [NSInvocation getReturnValue:&v7];
        return (id)v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1E1438214()
{
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, char a4)
{
  id result = [(WebView *)a1 _UIDelegateForSelector:a2];
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  char v10 = a4;
  if (result)
  {
    if (objc_opt_respondsToSelector())
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      [NSInvocation setArgument:&v12 atIndex:2];
      [NSInvocation setArgument:&v11 atIndex:3];
      [NSInvocation setArgument:&v10 atIndex:4];
      uint64_t v9 = 0;
      WebThreadCallDelegate();
      id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        [NSInvocation getReturnValue:&v9];
        return (id)v9;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1E1438334()
{
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4)
{
  id result = [(WebView *)a1 _UIDelegateForSelector:a2];
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  char v10 = a4;
  if (result)
  {
    if (objc_opt_respondsToSelector())
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      [NSInvocation setArgument:&v12 atIndex:2];
      [NSInvocation setArgument:&v11 atIndex:3];
      [NSInvocation setArgument:&v10 atIndex:4];
      uint64_t v9 = 0;
      WebThreadCallDelegate();
      id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        [NSInvocation getReturnValue:&v9];
        return (id)v9;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1E1438454()
{
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5)
{
  id result = [(WebView *)a1 _UIDelegateForSelector:a2];
  char v14 = a3;
  uint64_t v15 = a1;
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  if (result)
  {
    if (objc_opt_respondsToSelector())
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      [NSInvocation setArgument:&v15 atIndex:2];
      [NSInvocation setArgument:&v14 atIndex:3];
      [NSInvocation setArgument:&v13 atIndex:4];
      [NSInvocation setArgument:&v12 atIndex:5];
      uint64_t v11 = 0;
      WebThreadCallDelegate();
      id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        [NSInvocation getReturnValue:&v11];
        return (id)v11;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1E1438588()
{
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, uint64_t a4)
{
  id result = [(WebView *)a1 _UIDelegateForSelector:a2];
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  uint64_t v10 = a4;
  if (result)
  {
    if (objc_opt_respondsToSelector())
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      [NSInvocation setArgument:&v12 atIndex:2];
      [NSInvocation setArgument:&v11 atIndex:3];
      [NSInvocation setArgument:&v10 atIndex:4];
      uint64_t v9 = 0;
      WebThreadCallDelegate();
      id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        [NSInvocation getReturnValue:&v9];
        return (id)v9;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1E14386A8()
{
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3)
{
  uint64_t v7 = a2;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v7 atIndex:2];
    char v6 = 0;
    WebThreadCallDelegate();
    [NSInvocation getReturnValue:&v6];
    return v6 != 0;
  }
  return a1;
}

void sub_1E1438790(_Unwind_Exception *a1)
{
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4)
{
  int v8 = a4;
  uint64_t v9 = a2;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v9 atIndex:2];
    [NSInvocation setArgument:&v8 atIndex:3];
    char v7 = 0;
    WebThreadCallDelegate();
    [NSInvocation getReturnValue:&v7];
    return v7 != 0;
  }
  return a1;
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4, char a5)
{
  uint64_t v10 = a4;
  uint64_t v11 = a2;
  char v9 = a5;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v11 atIndex:2];
    [NSInvocation setArgument:&v10 atIndex:3];
    [NSInvocation setArgument:&v9 atIndex:4];
    char v8 = 0;
    WebThreadCallDelegate();
    [NSInvocation getReturnValue:&v8];
    return v8 != 0;
  }
  return a1;
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4, objc_object *a5)
{
  uint64_t v10 = a4;
  uint64_t v11 = a2;
  char v9 = a5;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v11 atIndex:2];
    [NSInvocation setArgument:&v10 atIndex:3];
    [NSInvocation setArgument:&v9 atIndex:4];
    char v8 = 0;
    WebThreadCallDelegate();
    [NSInvocation getReturnValue:&v8];
    return v8 != 0;
  }
  return a1;
}

id CallFrameLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3)
{
  id result = [(WebView *)a2 _frameLoadDelegateForwarder];
  char v7 = a2;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v7 atIndex:2];
    uint64_t v6 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v6];
      return (id)v6;
    }
  }
  return result;
}

void sub_1E1438B58(_Unwind_Exception *a1)
{
}

id CallFrameLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4)
{
  id result = [(WebView *)a2 _frameLoadDelegateForwarder];
  char v9 = a4;
  uint64_t v10 = a2;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v10 atIndex:2];
    [NSInvocation setArgument:&v9 atIndex:3];
    uint64_t v8 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v8];
      return (id)v8;
    }
  }
  return result;
}

void sub_1E1438C40(_Unwind_Exception *a1)
{
}

uint64_t CallDelegate(void (*a1)(void), WebView *a2, objc_object *a3, objc_selector *a4, objc_object *a5, objc_object *a6)
{
  uint64_t v10 = a4;
  uint64_t v11 = a1;
  char v9 = a5;
  if (!a2) {
    return 0;
  }
  NSInvocation = (void *)WebThreadMakeNSInvocation();
  [NSInvocation setArgument:&v11 atIndex:2];
  [NSInvocation setArgument:&v10 atIndex:3];
  [NSInvocation setArgument:&v9 atIndex:4];
  uint64_t v8 = 0;
  WebThreadCallDelegate();
  uint64_t result = objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
  if (result)
  {
    [NSInvocation getReturnValue:&v8];
    return v8;
  }
  return result;
}

void sub_1E1438D24()
{
}

uint64_t CallDelegate(void (*a1)(void), WebView *a2, objc_object *a3, objc_selector *a4, objc_object *a5, objc_object *a6, objc_object *a7)
{
  uint64_t v13 = a1;
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  uint64_t v10 = a6;
  if (!a2) {
    return 0;
  }
  NSInvocation = (void *)WebThreadMakeNSInvocation();
  [NSInvocation setArgument:&v13 atIndex:2];
  [NSInvocation setArgument:&v12 atIndex:3];
  [NSInvocation setArgument:&v11 atIndex:4];
  [NSInvocation setArgument:&v10 atIndex:5];
  uint64_t v9 = 0;
  WebThreadCallDelegate();
  uint64_t result = objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
  if (result)
  {
    [NSInvocation getReturnValue:&v9];
    return v9;
  }
  return result;
}

void sub_1E1438E1C()
{
}

uint64_t CallDelegate(void (*a1)(void), WebView *a2, objc_object *a3, objc_selector *a4, objc_object *a5, objc_object *a6, objc_object *a7, objc_object *a8)
{
  uint64_t v15 = a1;
  uint64_t v13 = a5;
  char v14 = a4;
  uint64_t v11 = a7;
  uint64_t v12 = a6;
  if (!a2) {
    return 0;
  }
  NSInvocation = (void *)WebThreadMakeNSInvocation();
  [NSInvocation setArgument:&v15 atIndex:2];
  [NSInvocation setArgument:&v14 atIndex:3];
  [NSInvocation setArgument:&v13 atIndex:4];
  [NSInvocation setArgument:&v12 atIndex:5];
  [NSInvocation setArgument:&v11 atIndex:6];
  uint64_t v10 = 0;
  WebThreadCallDelegate();
  uint64_t result = objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
  if (result)
  {
    [NSInvocation getReturnValue:&v10];
    return v10;
  }
  return result;
}

void sub_1E1438F24()
{
}

id CallFrameLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4, double a5, objc_object *a6, objc_object *a7)
{
  id result = [(WebView *)a2 _frameLoadDelegateForwarder];
  uint64_t v18 = a4;
  uint64_t v19 = a2;
  double v17 = a5;
  uint64_t v15 = a7;
  unint64_t v16 = a6;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v19 atIndex:2];
    [NSInvocation setArgument:&v18 atIndex:3];
    [NSInvocation setArgument:&v17 atIndex:4];
    [NSInvocation setArgument:&v16 atIndex:5];
    [NSInvocation setArgument:&v15 atIndex:6];
    uint64_t v14 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v14];
      return (id)v14;
    }
  }
  return result;
}

id CallResourceLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4, uint64_t a5, objc_object *a6)
{
  id result = [(WebView *)a2 _resourceLoadDelegateForwarder];
  uint64_t v15 = a4;
  unint64_t v16 = a2;
  uint64_t v13 = a6;
  uint64_t v14 = a5;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v16 atIndex:2];
    [NSInvocation setArgument:&v15 atIndex:3];
    [NSInvocation setArgument:&v14 atIndex:4];
    [NSInvocation setArgument:&v13 atIndex:5];
    uint64_t v12 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v12];
      return (id)v12;
    }
  }
  return result;
}

void sub_1E1439170(_Unwind_Exception *a1)
{
}

id CallResourceLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4, objc_object *a5, uint64_t a6, objc_object *a7)
{
  id result = [(WebView *)a2 _resourceLoadDelegateForwarder];
  uint64_t v18 = a4;
  uint64_t v19 = a2;
  uint64_t v16 = a6;
  double v17 = a5;
  uint64_t v15 = a7;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v19 atIndex:2];
    [NSInvocation setArgument:&v18 atIndex:3];
    [NSInvocation setArgument:&v17 atIndex:4];
    [NSInvocation setArgument:&v16 atIndex:5];
    [NSInvocation setArgument:&v15 atIndex:6];
    uint64_t v14 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v14];
      return (id)v14;
    }
  }
  return result;
}

void sub_1E14392A8(_Unwind_Exception *a1)
{
}

id CallHistoryDelegate(void (*a1)(void), WebView *a2, objc_selector *a3)
{
  id result = a2->_private->historyDelegate;
  uint64_t v6 = a2;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v6 atIndex:2];
    uint64_t v5 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v5];
      return (id)v5;
    }
  }
  return result;
}

void sub_1E1439374(_Unwind_Exception *a1)
{
}

id CallFormDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4)
{
  char v7 = a4;
  uint64_t v8 = a3;
  id result = [(WebView *)a1 _formDelegateForSelector:a2];
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v8 atIndex:2];
    [NSInvocation setArgument:&v7 atIndex:3];
    uint64_t v6 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v6];
      return (id)v6;
    }
  }
  return result;
}

void sub_1E1439448(_Unwind_Exception *a1)
{
}

id CallFormDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5)
{
  uint64_t v9 = a4;
  uint64_t v10 = a3;
  uint64_t v8 = a5;
  id result = [(WebView *)a1 _formDelegateForSelector:a2];
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v10 atIndex:2];
    [NSInvocation setArgument:&v9 atIndex:3];
    [NSInvocation setArgument:&v8 atIndex:4];
    uint64_t v7 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v7];
      return (id)v7;
    }
  }
  return result;
}

void sub_1E1439530(_Unwind_Exception *a1)
{
}

id CallFormDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5, objc_object *a6, objc_object *a7)
{
  uint64_t v14 = a3;
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  uint64_t v10 = a7;
  uint64_t v11 = a6;
  id result = [(WebView *)a1 _formDelegateForSelector:a2];
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v14 atIndex:2];
    [NSInvocation setArgument:&v13 atIndex:3];
    [NSInvocation setArgument:&v12 atIndex:4];
    [NSInvocation setArgument:&v11 atIndex:5];
    [NSInvocation setArgument:&v10 atIndex:6];
    uint64_t v9 = 0;
    WebThreadCallDelegate();
    id result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      [NSInvocation getReturnValue:&v9];
      return (id)v9;
    }
  }
  return result;
}

void sub_1E143963C(_Unwind_Exception *a1)
{
}

BOOL CallFormDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4, objc_selector *a5, objc_object *a6)
{
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  uint64_t v10 = a6;
  if (-[WebView _formDelegateForSelector:](a2, "_formDelegateForSelector:"))
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    [NSInvocation setArgument:&v12 atIndex:2];
    [NSInvocation setArgument:&v11 atIndex:3];
    [NSInvocation setArgument:&v10 atIndex:4];
    char v9 = 0;
    WebThreadCallDelegate();
    [NSInvocation getReturnValue:&v9];
    return v9 != 0;
  }
  return a1;
}

void sub_1E1439730(_Unwind_Exception *a1)
{
}

void sub_1E14399A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 != 1)
    {
      --*(_DWORD *)a11;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1439AD8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E1439B74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1439CE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebDocumentLoaderMac::WebDocumentLoaderMac(WebDocumentLoaderMac *this, const WebCore::ResourceRequest *a2, const WebCore::SubstituteData *a3)
{
  uint64_t v3 = WebCore::DocumentLoader::DocumentLoader();
  *(void *)uint64_t v3 = &unk_1F3C7C6A0;
  *(void *)(v3 + 32) = &unk_1F3C7C748;
  *(void *)(v3 + 40) = &unk_1F3C7C778;
  *(void *)(v3 + 56) = &unk_1F3C7C7C8;
  *(void *)(v3 + 3568) = 0;
  *(unsigned char *)(v3 + 3576) = 0;
  *(void *)(v3 + 3584) = 0;
  *(void *)(v3 + 3600) = 0;
  *(void *)(v3 + 3592) = 0;
}

void WebDocumentLoaderMac::setDataSource(WebDocumentLoaderMac *this, CFTypeRef cf, WebView *a3)
{
  *((void *)this + 446) = cf;
  if (cf && !*((unsigned char *)this + 3576))
  {
    *((unsigned char *)this + 3576) = 1;
    CFRetain(cf);
  }
  id v5 = [(WebView *)a3 resourceLoadDelegate];
  id v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v7 = (const void *)*((void *)this + 448);
  *((void *)this + 448) = v6;
  if (v7) {
    CFRelease(v7);
  }
  id v8 = [(WebView *)a3 downloadDelegate];
  id v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (const void *)*((void *)this + 449);
  *((void *)this + 449) = v9;
  if (v10)
  {
    CFRelease(v10);
  }
}

CFTypeRef WebDocumentLoaderMac::attachToFrame(WebDocumentLoaderMac *this)
{
  CFTypeRef result = (CFTypeRef)WebCore::DocumentLoader::attachToFrame(this);
  if (!*((unsigned char *)this + 3576))
  {
    CFTypeRef result = (CFTypeRef)*((void *)this + 446);
    if (result)
    {
      *((unsigned char *)this + 3576) = 1;
      return CFRetain(result);
    }
  }
  return result;
}

void WebDocumentLoaderMac::detachFromFrame(uint64_t a1)
{
  WebCore::DocumentLoader::detachFromFrame();
  uint64_t v2 = *(void *)(a1 + 3600);
  if ((!v2 || !*(_DWORD *)(v2 - 12)) && *(unsigned char *)(a1 + 3576))
  {
    *(unsigned char *)(a1 + 3576) = 0;
    uint64_t v3 = *(const void **)(a1 + 3568);
    CFRelease(v3);
  }
}

uint64_t *WebDocumentLoaderMac::increaseLoadCount(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v12 = a2;
  uint64_t v3 = result[450];
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 - 8);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void *)(v3 + 8 * v8);
    if (v9 == a2) {
      return result;
    }
    int v10 = 1;
    while (v9)
    {
      unsigned int v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(v3 + 8 * v8);
      ++v10;
      if (v9 == a2) {
        return result;
      }
    }
  }
  CFTypeRef result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(result + 450, &v12, (uint64_t)&v11);
  if (!*((unsigned char *)v2 + 3576))
  {
    CFTypeRef result = (uint64_t *)v2[446];
    if (result)
    {
      *((unsigned char *)v2 + 3576) = 1;
      return (uint64_t *)CFRetain(result);
    }
  }
  return result;
}

void WebDocumentLoaderMac::decreaseLoadCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 3600);
  if (!v2) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(v2 + 8 * v8);
  if (v9 == a2)
  {
LABEL_6:
    if (v8 == *(_DWORD *)(v2 - 4)) {
      return;
    }
    *(void *)(v2 + 8 * v8) = -1;
    uint64_t v11 = (uint64_t *)(a1 + 3600);
    ++*(_DWORD *)(*(void *)(a1 + 3600) - 16);
    uint64_t v12 = *(void *)(a1 + 3600);
    if (v12)
    {
      --*(_DWORD *)(v12 - 12);
      uint64_t v13 = *v11;
      if (!*v11) {
        goto LABEL_20;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      uint64_t v13 = *v11;
      if (!*v11) {
        goto LABEL_20;
      }
    }
    int v14 = *(_DWORD *)(v13 - 12);
    unsigned int v15 = *(_DWORD *)(v13 - 4);
    if (6 * v14 >= v15 || v15 < 9)
    {
LABEL_19:
      if (v14) {
        return;
      }
      goto LABEL_20;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 3600), v15 >> 1, 0);
    if (*v11)
    {
      int v14 = *(_DWORD *)(*v11 - 12);
      goto LABEL_19;
    }
LABEL_20:
    double v17 = *(const void **)(a1 + 3584);
    *(void *)(a1 + 3584) = 0;
    if (v17) {
      CFRelease(v17);
    }
    uint64_t v18 = *(const void **)(a1 + 3592);
    *(void *)(a1 + 3592) = 0;
    if (v18) {
      CFRelease(v18);
    }
    uint64_t v19 = *(void *)(a1 + 16);
    if ((!v19 || !*(void *)(v19 + 8)) && *(unsigned char *)(a1 + 3576))
    {
      *(unsigned char *)(a1 + 3576) = 0;
      uint64_t v20 = *(const void **)(a1 + 3568);
      CFRelease(v20);
    }
    return;
  }
  int v10 = 1;
  while (v9)
  {
    uint64_t v8 = (v8 + v10) & v4;
    uint64_t v9 = *(void *)(v2 + 8 * v8);
    ++v10;
    if (v9 == a2) {
      goto LABEL_6;
    }
  }
}

void WebDocumentLoaderMac::~WebDocumentLoaderMac(WebDocumentLoaderMac *this, void *a2)
{
  *(void *)this = &unk_1F3C7C6A0;
  *((void *)this + 4) = &unk_1F3C7C748;
  *((void *)this + 5) = &unk_1F3C7C778;
  *((void *)this + 7) = &unk_1F3C7C7C8;
  uint64_t v3 = *((void *)this + 450);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  unsigned int v4 = (const void *)*((void *)this + 449);
  *((void *)this + 449) = 0;
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 448);
  *((void *)this + 448) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::DocumentLoader::~DocumentLoader(this);
}

{
  uint64_t v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F3C7C6A0;
  *((void *)this + 4) = &unk_1F3C7C748;
  *((void *)this + 5) = &unk_1F3C7C778;
  *((void *)this + 7) = &unk_1F3C7C7C8;
  uint64_t v3 = *((void *)this + 450);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  unsigned int v4 = (const void *)*((void *)this + 449);
  *((void *)this + 449) = 0;
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 448);
  *((void *)this + 448) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::DocumentLoader::~DocumentLoader(this);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::DocumentLoader::ref(uint64_t this)
{
  return this;
}

_DWORD *WebCore::DocumentLoader::deref(_DWORD *this)
{
  if (this[6] == 1) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)this + 24))();
  }
  --this[6];
  return this;
}

void non-virtual thunk to'WebDocumentLoaderMac::~WebDocumentLoaderMac(WebDocumentLoaderMac *this, void *a2)
{
  uint64_t v3 = (WebDocumentLoaderMac *)((char *)this - 32);
  *((void *)this - 4) = &unk_1F3C7C6A0;
  *(void *)this = &unk_1F3C7C748;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1F3C7C778;
  *((void *)this + 3) = &unk_1F3C7C7C8;
  uint64_t v4 = *((void *)this + 446);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  unint64_t v5 = (const void *)*((void *)this + 445);
  *((void *)this + 445) = 0;
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 444);
  *((void *)this + 444) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::DocumentLoader::~DocumentLoader(v3);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v3 = (WebDocumentLoaderMac *)((char *)this - 32);
  *((void *)this - 4) = &unk_1F3C7C6A0;
  *(void *)this = &unk_1F3C7C748;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1F3C7C778;
  *((void *)this + 3) = &unk_1F3C7C7C8;
  uint64_t v4 = *((void *)this + 446);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  unint64_t v5 = (const void *)*((void *)this + 445);
  *((void *)this + 445) = 0;
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 444);
  *((void *)this + 444) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::DocumentLoader::~DocumentLoader(v3);
  WTF::fastFree(v7, v8);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t vars8;

  uint64_t v3 = (WebDocumentLoaderMac *)((char *)this - 40);
  *((void *)this - 5) = &unk_1F3C7C6A0;
  *((void *)this - objc_destroyWeak(this + 1) = &unk_1F3C7C748;
  *(void *)this = &unk_1F3C7C778;
  *((void *)this + 2) = &unk_1F3C7C7C8;
  uint64_t v4 = *((void *)this + 445);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  unint64_t v5 = (const void *)*((void *)this + 444);
  *((void *)this + 444) = 0;
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 443);
  *((void *)this + 443) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::DocumentLoader::~DocumentLoader(v3);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v3 = (WebDocumentLoaderMac *)((char *)this - 40);
  *((void *)this - 5) = &unk_1F3C7C6A0;
  *((void *)this - objc_destroyWeak(this + 1) = &unk_1F3C7C748;
  *(void *)this = &unk_1F3C7C778;
  *((void *)this + 2) = &unk_1F3C7C7C8;
  uint64_t v4 = *((void *)this + 445);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  unint64_t v5 = (const void *)*((void *)this + 444);
  *((void *)this + 444) = 0;
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 443);
  *((void *)this + 443) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::DocumentLoader::~DocumentLoader(v3);
  WTF::fastFree(v7, v8);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t vars8;

  uint64_t v3 = (WebDocumentLoaderMac *)((char *)this - 56);
  *((void *)this - 7) = &unk_1F3C7C6A0;
  *((void *)this - 3) = &unk_1F3C7C748;
  *((void *)this - 2) = &unk_1F3C7C778;
  *(void *)this = &unk_1F3C7C7C8;
  uint64_t v4 = *((void *)this + 443);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  unint64_t v5 = (const void *)*((void *)this + 442);
  *((void *)this + 442) = 0;
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 441);
  *((void *)this + 44objc_destroyWeak(this + 1) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::DocumentLoader::~DocumentLoader(v3);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v3 = (WebDocumentLoaderMac *)((char *)this - 56);
  *((void *)this - 7) = &unk_1F3C7C6A0;
  *((void *)this - 3) = &unk_1F3C7C748;
  *((void *)this - 2) = &unk_1F3C7C778;
  *(void *)this = &unk_1F3C7C7C8;
  uint64_t v4 = *((void *)this + 443);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  unint64_t v5 = (const void *)*((void *)this + 442);
  *((void *)this + 442) = 0;
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 441);
  *((void *)this + 44objc_destroyWeak(this + 1) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::DocumentLoader::~DocumentLoader(v3);
  WTF::fastFree(v7, v8);
}

uint64_t non-virtual thunk to'WebCore::DocumentLoader::ref(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebCore::DocumentLoader::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 16) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this - 40) + 24))();
  }
  --*(_DWORD *)(this - 16);
  return this;
}

uint64_t WebCore::CachedRawResourceClient::resourceClientType(WebCore::CachedRawResourceClient *this)
{
  return 5;
}

uint64_t WebCore::CachedRawResourceClient::shouldCacheResponse()
{
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, 8u, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *a2 + ~(*a2 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  int v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    uint64_t *v14 = v9;
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      uint64_t v18 = *v4;
      if (*v4) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v18 = *v4;
      if (*v4)
      {
LABEL_14:
        uint64_t v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
        unint64_t v20 = *(unsigned int *)(v18 - 4);
        if (v20 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v19 = *(unsigned int *)(v18 - 16);
    unint64_t v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400)
    {
LABEL_15:
      if (3 * v20 > 4 * v19)
      {
LABEL_26:
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v18 + 8 * v20;
        *(unsigned char *)(a3 + ++*(_DWORD *)(this - 16) = 1;
        return result;
      }
      if (!v20)
      {
        CFTypeRef result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v4, 8u, v14);
        int v14 = result;
        uint64_t v18 = *v4;
        if (!*v4)
        {
LABEL_18:
          unint64_t v20 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v20 = *(unsigned int *)(v18 - 4);
        goto LABEL_26;
      }
LABEL_24:
      CFTypeRef result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v4, v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20)), v14);
      int v14 = result;
      uint64_t v18 = *v4;
      if (!*v4) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v20 > 2 * v19) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v8;
    int v14 = (uint64_t *)(v6 + 8 * v13);
    uint64_t v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        uint64_t *v16 = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v9 = *a2;
        int v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if (v7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v6 - 4);
  }
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v6 + 8 * v21;
  *(unsigned char *)(a3 + ++*(_DWORD *)(this - 16) = 0;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v15 = *a1;
        int v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
        int v21 = 1;
        do
        {
          unsigned int v22 = v20;
          uint64_t v23 = *(void *)(v15 + 8 * v20);
          unsigned int v20 = (v20 + v21++) & v16;
        }
        while (v23);
        int v24 = (void *)(v15 + 8 * v22);
        void *v24 = v14;
        if (v13 == a3) {
          unint64_t v12 = v24;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
  }
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v10);
  }
  return v12;
}

void sub_1E143B01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143B1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
    CFTypeRef v15 = cf;
    if (!cf) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    CFTypeRef v15 = cf;
    if (!cf) {
      goto LABEL_3;
    }
  }
  CFRelease(v15);
  _Unwind_Resume(exception_object);
}

void sub_1E143B314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143B4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143B634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143B740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143B888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143B9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E143BAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebDragClient::useLegacyDragClient(WebDragClient *this)
{
  return 1;
}

uint64_t WebDragClient::dragSourceActionMaskForPoint(WebDragClient *this, const IntPoint *a2)
{
  return 127;
}

uint64_t WebDragClient::startDrag(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) _startDrag:a2];
}

void WebDragClient::declareAndWriteDragImage(WebDragClient *this, const WTF::String *a2, WebCore::Element *a3, const WTF::URL *a4, const WTF::String *a5, WebCore::LocalFrame *a6)
{
  uint64_t v6 = *(void *)(*(void *)(*((void *)a3 + 6) + 8) + 544);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      int v8 = (unsigned int *)(v7 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      WebCore::Document::editor(*(WebCore::Document **)(v7 + 296));
      uint64_t v9 = WebCore::Frame::pageID((WebCore::Frame *)v7);
      uint64_t v11 = v10;
      unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v12 = &unk_1F3C7CA10;
      v12[1] = v9;
      v12[2] = v11;
      uint64_t v14 = v12;
      WebCore::Pasteboard::createForDragAndDrop();
      WebCore::Editor::writeImageToPasteboard();
      if (v15) {
        (*(void (**)())(*(void *)v15 + 8))();
      }
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        unsigned int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v13 = &unk_1F3C797F0;
        v13[1] = v8;
        int v16 = v13;
        WTF::ensureOnMainThread();
        if (v16) {
          (*(void (**)(void *))(*v16 + 8))(v16);
        }
      }
    }
  }
}

void sub_1E143C75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebDragClient::didConcludeEditDrag(id *this)
{
  return [this[1] _didConcludeEditDrag];
}

uint64_t WebCore::PagePasteboardContext::isPagePasteboardContext(WebCore::PagePasteboardContext *this)
{
  return 1;
}

void WebEditorClient::WebEditorClient(WebEditorClient *this, WebView *a2)
{
  *((_DWORD *)this + 4) = 0;
  *(void *)this = &unk_1F3C7CA38;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  *((void *)this + 3) = &unk_1F3C7CD30;
  *((void *)this + 4) = a2;
  uint64_t v3 = objc_alloc_init(WebEditorUndoTarget);
  *((void *)this + 7) = 0;
  *((void *)this + 5) = v3;
  *((unsigned char *)this + 48) = 0;
  *((_WORD *)this + 32) = 0;
  WebCore::VisibleSelection::VisibleSelection((WebEditorClient *)((char *)this + 72));
  *((_DWORD *)this + 44) = 2;
}

void sub_1E143CB1C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = v3;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextCheckingRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextCheckingRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextCheckingRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::~HashMap(v4, a2);
  uint64_t v7 = (const void *)*((void *)v2 + 5);
  *((void *)v2 + 5) = 0;
  if (v7)
  {
    CFRelease(v7);
    WebCore::EventListener::~EventListener(v2, v8);
    _Unwind_Resume(a1);
  }
  WebCore::EventListener::~EventListener(v2, v6);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TextCheckingRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TextCheckingRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TextCheckingRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      unint64_t v5 = (_DWORD **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (_DWORD *)-1)
        {
          uint64_t v6 = *v5;
          const void *v5 = 0;
          if (v6)
          {
            if (v6[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
            }
            else {
              --v6[2];
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void WebEditorClient::~WebEditorClient(WebEditorClient *this)
{
  WebCore::VisibleSelection::~VisibleSelection((WebEditorClient *)((char *)this + 72));
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      unint64_t v5 = (_DWORD **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (_DWORD *)-1)
        {
          uint64_t v6 = *v5;
          const void *v5 = 0;
          if (v6)
          {
            if (v6[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
            }
            else {
              --v6[2];
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  uint64_t v7 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    uint64_t v9 = (unsigned int *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v2);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebEditorClient::~WebEditorClient(this);
  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebEditorClient::~WebEditorClient(WebEditorClient *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebEditorClient::~WebEditorClient((WebEditorClient *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

uint64_t WebEditorClient::isContinuousSpellCheckingEnabled(id *this)
{
  return [this[4] isContinuousSpellCheckingEnabled];
}

uint64_t WebEditorClient::toggleContinuousSpellChecking(id *this)
{
  return [this[4] toggleContinuousSpellChecking:0];
}

uint64_t WebEditorClient::shouldDeleteRange(uint64_t a1)
{
  uint64_t v2 = (void *)[*(id *)(a1 + 32) _editingDelegateForwarder];
  uint64_t v3 = *(void *)(a1 + 32);
  WebCore::createLiveRange();
  uint64_t v4 = kit(v6);
  if (v6)
  {
    if (*((_DWORD *)v6 + 2) == 1) {
      (*(void (**)())(*(void *)v6 + 8))();
    }
    else {
      --*((_DWORD *)v6 + 2);
    }
  }
  return [v2 webView:v3 shouldDeleteDOMRange:v4];
}

void sub_1E143CE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WebEditorClient::smartInsertDeleteEnabled(WebEditorClient *this)
{
  CFTypeRef result = (void *)*((void *)this + 4);
  if (result)
  {
    [result page];
    if (v2) {
      return (void *)((*(unsigned __int8 *)(*(void *)(v2 + 112) + 703) >> 2) & 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WebEditorClient::isSelectTrailingWhitespaceEnabled(WebEditorClient *this)
{
  CFTypeRef result = (void *)*((void *)this + 4);
  if (result)
  {
    [result page];
    if (v2) {
      return (void *)(*(unsigned __int8 *)(*(void *)(v2 + 112) + 698) >> 7);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WebEditorClient::shouldApplyStyle(uint64_t a1, WebCore::StyleProperties *a2)
{
  uint64_t v4 = (void *)[*(id *)(a1 + 32) _editingDelegateForwarder];
  uint64_t v5 = *(void *)(a1 + 32);
  WebCore::StyleProperties::mutableCopy((uint64_t *)&v15, a2);
  uint64_t v6 = (DOMObjectInternal *)WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(v15);
  uint64_t v7 = kit(v6);
  WebCore::createLiveRange();
  uint64_t v8 = kit(v16);
  uint64_t v9 = v16;
  int v16 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1) {
      (*(void (**)(WebCore::Range *))(*(void *)v9 + 8))(v9);
    }
    else {
      --*((_DWORD *)v9 + 2);
    }
  }
  uint64_t v10 = [v4 webView:v5 shouldApplyStyle:v7 toElementsInDOMRange:v8];
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (!v11) {
    return v10;
  }
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
    return v10;
  }
  WebCore::MutableStyleProperties::~MutableStyleProperties(v11);
  WTF::fastFree(v13, v14);
  return v10;
}

void sub_1E143D060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebCore::MutableStyleProperties *a9, _DWORD *a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11)
  {
    if (v11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&a9);
      _Unwind_Resume(a1);
    }
    --v11[2];
    WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&a9);
    _Unwind_Resume(a1);
  }
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldMoveRangeAfterDelete(id *this, WebCore::Node **a2, WebCore::Node **a3)
{
  uint64_t v6 = (void *)[this[4] _editingDelegateForwarder];
  id v7 = this[4];
  uint64_t v8 = *a2;
  *((_DWORD *)v8 + 7) = *((_DWORD *)*a2 + 7) + 2;
  unint64_t v19 = v8;
  uint64_t v9 = a2[2];
  *((_DWORD *)v9 + 7) += 2;
  unsigned int v20 = v9;
  WebCore::createLiveRange();
  uint64_t v10 = kit(v16);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1) {
      (*(void (**)())(*(void *)v16 + 8))();
    }
    else {
      --*((_DWORD *)v16 + 2);
    }
  }
  uint64_t v11 = *a3;
  *((_DWORD *)v11 + 7) = *((_DWORD *)*a3 + 7) + 2;
  unint64_t v17 = v11;
  unint64_t v12 = a3[2];
  *((_DWORD *)v12 + 7) += 2;
  unint64_t v18 = v12;
  WebCore::createLiveRange();
  unsigned int v13 = kit(v21);
  if (v21)
  {
    if (*((_DWORD *)v21 + 2) == 1) {
      (*(void (**)())(*(void *)v21 + 8))();
    }
    else {
      --*((_DWORD *)v21 + 2);
    }
  }
  uint64_t v14 = [v6 webView:v7 shouldMoveRangeAfterDelete:v10 replacingRange:v13];
  if (v18)
  {
    if (*((_DWORD *)v18 + 7) == 2)
    {
      if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v18);
      }
    }
    else
    {
      *((_DWORD *)v18 + 7) -= 2;
    }
  }
  if (v17)
  {
    if (*((_DWORD *)v17 + 7) == 2)
    {
      if ((*((_WORD *)v17 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v17);
      }
    }
    else
    {
      *((_DWORD *)v17 + 7) -= 2;
    }
  }
  if (v20)
  {
    if (*((_DWORD *)v20 + 7) == 2)
    {
      if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v20);
      }
    }
    else
    {
      *((_DWORD *)v20 + 7) -= 2;
    }
  }
  if (!v19) {
    return v14;
  }
  if (*((_DWORD *)v19 + 7) != 2)
  {
    *((_DWORD *)v19 + 7) -= 2;
    return v14;
  }
  if ((*((_WORD *)v19 + 17) & 0x400) != 0) {
    return v14;
  }
  WebCore::Node::removedLastRef(v19);
  return v14;
}

void sub_1E143D34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v4 = *(_DWORD **)(v2 - 40);
  *(void *)(v2 - 40) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldBeginEditing(id *this, WebCore::Node **a2)
{
  uint64_t v4 = (void *)[this[4] _editingDelegateForwarder];
  id v5 = this[4];
  uint64_t v6 = *a2;
  *((_DWORD *)v6 + 7) = *((_DWORD *)*a2 + 7) + 2;
  uint64_t v11 = v6;
  LODWORD(v13) = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  *((_DWORD *)v7 + 7) += 2;
  uint64_t v14 = v7;
  WebCore::createLiveRange();
  uint64_t v8 = kit(v15);
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1) {
      (*(void (**)())(*(void *)v15 + 8))();
    }
    else {
      --*((_DWORD *)v15 + 2);
    }
  }
  uint64_t v9 = objc_msgSend(v4, "webView:shouldBeginEditingInDOMRange:", v5, v8, v11, v13);
  if (v14)
  {
    if (*((_DWORD *)v14 + 7) == 2)
    {
      if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v14);
      }
    }
    else
    {
      *((_DWORD *)v14 + 7) -= 2;
    }
  }
  if (!v12) {
    return v9;
  }
  if (*((_DWORD *)v12 + 7) != 2)
  {
    *((_DWORD *)v12 + 7) -= 2;
    return v9;
  }
  if ((*((_WORD *)v12 + 17) & 0x400) != 0) {
    return v9;
  }
  WebCore::Node::removedLastRef(v12);
  return v9;
}

void sub_1E143D598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldEndEditing(id *this, WebCore::Node **a2)
{
  uint64_t v4 = (void *)[this[4] _editingDelegateForwarder];
  id v5 = this[4];
  uint64_t v6 = *a2;
  *((_DWORD *)v6 + 7) = *((_DWORD *)*a2 + 7) + 2;
  uint64_t v11 = v6;
  LODWORD(v13) = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  *((_DWORD *)v7 + 7) += 2;
  uint64_t v14 = v7;
  WebCore::createLiveRange();
  uint64_t v8 = kit(v15);
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1) {
      (*(void (**)())(*(void *)v15 + 8))();
    }
    else {
      --*((_DWORD *)v15 + 2);
    }
  }
  uint64_t v9 = objc_msgSend(v4, "webView:shouldEndEditingInDOMRange:", v5, v8, v11, v13);
  if (v14)
  {
    if (*((_DWORD *)v14 + 7) == 2)
    {
      if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v14);
      }
    }
    else
    {
      *((_DWORD *)v14 + 7) -= 2;
    }
  }
  if (!v12) {
    return v9;
  }
  if (*((_DWORD *)v12 + 7) != 2)
  {
    *((_DWORD *)v12 + 7) -= 2;
    return v9;
  }
  if ((*((_WORD *)v12 + 17) & 0x400) != 0) {
    return v9;
  }
  WebCore::Node::removedLastRef(v12);
  return v9;
}

void sub_1E143D77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldInsertText(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)[v6 _editingDelegateForwarder];
  if (*a2) {
    uint64_t v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = &stru_1F3C7DA90;
  }
  WebCore::createLiveRange();
  uint64_t v9 = kit(v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1) {
      (*(void (**)())(*(void *)v12 + 8))();
    }
    else {
      --*((_DWORD *)v12 + 2);
    }
  }
  if (a4 == 2) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = a4 == 1;
  }
  return [v7 webView:v6 shouldInsertText:v8 replacingDOMRange:v9 givenAction:v10];
}

void sub_1E143D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebEditorClient::shouldChangeSelectedRange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = *(void **)(a1 + 32);
  WebCore::createLiveRange();
  uint64_t v8 = kit(v11);
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1) {
      (*(void (**)())(*(void *)v11 + 8))();
    }
    else {
      --*((_DWORD *)v11 + 2);
    }
  }
  WebCore::createLiveRange();
  uint64_t v9 = kit(0);
  return [v7 _shouldChangeSelectedDOMRange:v8 toDOMRange:v9 affinity:a4 stillSelecting:a5];
}

void sub_1E143DA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebEditorClient::didBeginEditing(WebEditorClient *this)
{
  return WebThreadPostNotification();
}

uint64_t WebEditorClient::startDelayingAndCoalescingContentChangeNotifications(uint64_t this)
{
  *(unsigned char *)(this + 64) = 1;
  return this;
}

uint64_t WebEditorClient::stopDelayingAndCoalescingContentChangeNotifications(uint64_t this)
{
  uint64_t v1 = this;
  *(unsigned char *)(this + 64) = 0;
  if (*(unsigned char *)(this + 65)) {
    this = WebThreadPostNotification();
  }
  *(unsigned char *)(v1 + 65) = 0;
  return this;
}

uint64_t WebEditorClient::respondToChangedContents(uint64_t this)
{
  if (!*(unsigned char *)(this + 64)) {
    return WebThreadPostNotification();
  }
  *(unsigned char *)(this + 65) = 1;
  return this;
}

uint64_t WebEditorClient::respondToChangedSelection(uint64_t this, WebCore::Document **a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    this = WebCore::Document::editor(a2[37]);
    if (!*(unsigned char *)(this + 488))
    {
      uint64_t v4 = (void *)*((void *)a2[35] + 2);
      if ((*(uint64_t (**)(void *))(*v4 + 1072))(v4)) {
        id v5 = 0;
      }
      else {
        id v5 = (void *)v4[2];
      }
      uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "frameView"), "documentView");
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v6 _selectionChanged];
        [*(id *)(v3 + 32) updateTouchBar];
        *(_DWORD *)(v3 + 176) = [v6 _isEditable];
      }
      this = [*(id *)(v3 + 32) _isClosing];
      if ((this & 1) == 0)
      {
        return WebThreadPostNotification();
      }
    }
  }
  return this;
}

uint64_t WebEditorClient::didEndEditing(WebEditorClient *this)
{
  return WebThreadPostNotification();
}

void _WebCreateFragment()
{
}

uint64_t WebEditorClient::shouldInsertNode(uint64_t a1, WebCore::Node *a2, uint64_t a3, int a4)
{
  uint64_t v7 = (void *)[*(id *)(a1 + 32) _editingDelegateForwarder];
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = kit(a2);
  WebCore::createLiveRange();
  uint64_t v10 = kit(v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1) {
      (*(void (**)())(*(void *)v12 + 8))();
    }
    else {
      --*((_DWORD *)v12 + 2);
    }
  }
  return [v7 webView:v8 shouldInsertNode:v9 replacingDOMRange:v10 givenAction:a4];
}

void sub_1E143DDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebEditorClient::registerUndoOrRedoStep(id *this, UndoStep *a2, int a3)
{
  uint64_t v6 = (void *)[this[4] undoManager];
  CFTypeRef result = (WTF::StringImpl *)[v6 isUndoing];
  if (result) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    CFTypeRef result = (WTF::StringImpl *)[v6 isRedoing];
    if (!result || (a3 & 1) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, UndoStep *))(*(void *)a2 + 40))(&v15, a2);
      if (v15)
      {
        uint64_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
        uint64_t v11 = v15;
        uint64_t v15 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v9);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1F3C7DA90;
      }
      id v12 = this[5];
      ++*((_DWORD *)a2 + 2);
      uint64_t v15 = (WTF::StringImpl *)a2;
      uint64_t v13 = +[WebUndoStep stepWithUndoStep:&v15];
      if (a3) {
        uint64_t v14 = sel_redoEditing_;
      }
      else {
        uint64_t v14 = sel_undoEditing_;
      }
      [v6 registerUndoWithTarget:v12 selector:v14 object:v13];
      CFTypeRef result = v15;
      uint64_t v15 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
        {
          CFTypeRef result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
          if (!v10) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        --*((_DWORD *)result + 2);
      }
      if (!v10)
      {
LABEL_21:
        *((unsigned char *)this + 48) = 1;
        return result;
      }
LABEL_20:
      CFTypeRef result = (WTF::StringImpl *)[v6 setActionName:v10];
      goto LABEL_21;
    }
  }
  return result;
}

void sub_1E143DF88(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebEditorClient::updateEditorStateAfterLayoutIfEditabilityChanged(uint64_t this)
{
  if (*(_DWORD *)(this + 176) != 2)
  {
    uint64_t v1 = this;
    this = [*(id *)(this + 32) _selectedOrMainFrame];
    if (this)
    {
      uint64_t v2 = *(void *)(*(void *)(this + 8) + 8);
      if (v2)
      {
        uint64_t v3 = *(void **)(*(void *)(v2 + 280) + 16);
        uint64_t v4 = ((*(uint64_t (**)(void *))(*v3 + 1072))(v3) & 1) != 0 ? 0 : (void *)v3[2];
        id v5 = objc_msgSend((id)objc_msgSend(v4, "frameView"), "documentView");
        objc_opt_class();
        this = objc_opt_isKindOfClass();
        if (this)
        {
          this = [v5 _isEditable];
          if (*(_DWORD *)(v1 + 176) != this)
          {
            uint64_t v6 = *(void **)(v1 + 32);
            return [v6 updateTouchBar];
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebEditorClient::registerUndoStep(id *this, UndoStep *a2)
{
  return WebEditorClient::registerUndoOrRedoStep(this, a2, 0);
}

WTF::StringImpl *WebEditorClient::registerRedoStep(id *this, UndoStep *a2)
{
  return WebEditorClient::registerUndoOrRedoStep(this, a2, 1);
}

uint64_t WebEditorClient::clearUndoRedoOperations(uint64_t this)
{
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v1 = this;
    uint64_t v2 = (void *)[*(id *)(this + 32) undoManager];
    int v3 = [v2 groupingLevel];
    int v4 = v3;
    if (v3 < 1)
    {
      this = [v2 removeAllActionsWithTarget:*(void *)(v1 + 40)];
    }
    else
    {
      int v5 = v3;
      do
      {
        [v2 endUndoGrouping];
        --v5;
      }
      while (v5);
      [v2 removeAllActionsWithTarget:*(void *)(v1 + 40)];
      do
      {
        this = [v2 beginUndoGrouping];
        --v4;
      }
      while (v4);
    }
    *(unsigned char *)(v1 + 48) = 0;
  }
  return this;
}

uint64_t WebEditorClient::canCopyCut(WebEditorClient *this, LocalFrame *a2, uint64_t a3)
{
  return a3;
}

uint64_t WebEditorClient::canPaste(WebEditorClient *this, LocalFrame *a2, uint64_t a3)
{
  return a3;
}

uint64_t WebEditorClient::canUndo(id *this)
{
  uint64_t v1 = (void *)[this[4] undoManager];
  return [v1 canUndo];
}

uint64_t WebEditorClient::canRedo(id *this)
{
  uint64_t v1 = (void *)[this[4] undoManager];
  return [v1 canRedo];
}

uint64_t WebEditorClient::undo(id *this)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "canUndo");
  if (result)
  {
    int v3 = (void *)[this[4] undoManager];
    return [v3 undo];
  }
  return result;
}

uint64_t WebEditorClient::redo(id *this)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "canRedo");
  if (result)
  {
    int v3 = (void *)[this[4] undoManager];
    return [v3 redo];
  }
  return result;
}

uint64_t WebEditorClient::handleKeyboardEvent(WebEditorClient *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3 = *((void *)a2 + 6);
  if (v3 && (*(unsigned char *)(v3 + 22) & 2) == 0)
  {
    uint64_t result = 105;
    __break(0xC471u);
    return result;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(v3 + 48) + 8) + 544);
  if (!v4
    || (uint64_t v5 = *(void *)(v4 + 8)) == 0
    || (uint64_t v6 = *(id **)(*(void *)(v5 + 280) + 16), ((*((uint64_t (**)(id *))*v6 + 134))(v6) & 1) != 0))
  {
    uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(0, "frameView"), "documentView"), "_handleEditingKeyEvent:", a2);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6[2], "frameView"), "documentView"), "_handleEditingKeyEvent:", a2);
  if (result) {
LABEL_7:
  }
    *((_DWORD *)a2 + 5) |= 0x80u;
  return result;
}

WebCore::Node *WebEditorClient::textFieldDidBeginEditing(WebCore::Node *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      uint64_t v4 = (objc_object *)this;
      uint64_t v5 = *(WebView **)(v3 + 32);
      uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
      if (v6
        && (uint64_t v7 = *(void *)(v6 + 8)) != 0
        && (BOOL v8 = *(void **)(*(void *)(v7 + 280) + 16),
            ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
      {
        uint64_t v9 = (objc_object *)v8[2];
      }
      else
      {
        uint64_t v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textFieldDidBeginEditing_inFrame_, v4, v9);
    }
  }
  return this;
}

WebCore::Node *WebEditorClient::textFieldDidEndEditing(WebCore::Node *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      uint64_t v4 = (objc_object *)this;
      uint64_t v5 = *(WebView **)(v3 + 32);
      uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
      if (v6
        && (uint64_t v7 = *(void *)(v6 + 8)) != 0
        && (BOOL v8 = *(void **)(*(void *)(v7 + 280) + 16),
            ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
      {
        uint64_t v9 = (objc_object *)v8[2];
      }
      else
      {
        uint64_t v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textFieldDidEndEditing_inFrame_, v4, v9);
    }
  }
  return this;
}

WebCore::Node *WebEditorClient::textDidChangeInTextField(WebCore::Node *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      uint64_t v4 = (objc_object *)this;
      uint64_t v5 = *(WebView **)(v3 + 32);
      uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
      if (v6
        && (uint64_t v7 = *(void *)(v6 + 8)) != 0
        && (BOOL v8 = *(void **)(*(void *)(v7 + 280) + 16),
            ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
      {
        uint64_t v9 = (objc_object *)v8[2];
      }
      else
      {
        uint64_t v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textDidChangeInTextField_inFrame_, v4, v9);
    }
  }
  return this;
}

BOOL WebEditorClient::doTextFieldCommandFromEvent(WebEditorClient *this, WebCore::Element *a2, WebCore::KeyboardEvent *a3)
{
  if ((*((_WORD *)a2 + 16) & 0x10) == 0) {
    return 0;
  }
  if (*(void *)(*((void *)a2 + 13) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24)) {
    return 0;
  }
  uint64_t v6 = kit(a2);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (objc_object *)v6;
  if (MEMORY[0x1E4E44240](*((void *)a3 + 14), "Up", 2))
  {
    BOOL v8 = &selRef_moveUp_;
  }
  else if (MEMORY[0x1E4E44240](*((void *)a3 + 14), "Down", 4))
  {
    BOOL v8 = &selRef_moveDown_;
  }
  else if (MEMORY[0x1E4E44240](*((void *)a3 + 14), "U+001B", 6))
  {
    BOOL v8 = &selRef_cancel_;
  }
  else if (MEMORY[0x1E4E44240](*((void *)a3 + 14), "U+0009", 6))
  {
    if ((*((unsigned char *)a3 + 84) & 8) != 0) {
      BOOL v8 = &selRef_insertBacktab_;
    }
    else {
      BOOL v8 = &selRef_insertTab_;
    }
  }
  else
  {
    if (!MEMORY[0x1E4E44240](*((void *)a3 + 14), "Enter", 5)) {
      return 0;
    }
    BOOL v8 = &selRef_insertNewline_;
  }
  uint64_t v9 = (objc_selector *)*v8;
  if (!*v8) {
    return 0;
  }
  uint64_t v10 = (WebView *)*((void *)this + 4);
  uint64_t v11 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
  if (v11
    && (uint64_t v12 = *(void *)(v11 + 8)) != 0
    && (uint64_t v13 = *(void **)(*(void *)(v12 + 280) + 16),
        ((*(uint64_t (**)(void *))(*v13 + 1072))(v13) & 1) == 0))
  {
    uint64_t v14 = (objc_object *)v13[2];
  }
  else
  {
    uint64_t v14 = 0;
  }
  return CallFormDelegateReturningBoolean(0, v10, (objc_selector *)sel_textField_doCommandBySelector_inFrame_, v7, v9, v14);
}

WebCore::Node *WebEditorClient::textWillBeDeletedInTextField(WebCore::Node *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      uint64_t v4 = (objc_object *)this;
      uint64_t v5 = *(WebView **)(v3 + 32);
      uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
      if (v6
        && (uint64_t v7 = *(void *)(v6 + 8)) != 0
        && (BOOL v8 = *(void **)(*(void *)(v7 + 280) + 16),
            ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
      {
        uint64_t v9 = (objc_object *)v8[2];
      }
      else
      {
        uint64_t v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegateReturningBoolean(0, v5, (objc_selector *)sel_textField_doCommandBySelector_inFrame_, v4, (objc_selector *)sel_deleteBackward_, v9);
    }
  }
  return this;
}

WebCore::Node *WebEditorClient::textDidChangeInTextArea(WebCore::Node *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB6690] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      uint64_t v4 = (objc_object *)this;
      uint64_t v5 = *(WebView **)(v3 + 32);
      uint64_t v6 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
      if (v6
        && (uint64_t v7 = *(void *)(v6 + 8)) != 0
        && (BOOL v8 = *(void **)(*(void *)(v7 + 280) + 16),
            ((*(uint64_t (**)(void *))(*v8 + 1072))(v8) & 1) == 0))
      {
        uint64_t v9 = (objc_object *)v8[2];
      }
      else
      {
        uint64_t v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textDidChangeInTextArea_inFrame_, v4, v9);
    }
  }
  return this;
}

uint64_t WebEditorClient::hasRichlyEditableSelection(id *this)
{
  [this[4] _UIKitDelegateForwarder];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = (void *)[this[4] _UIKitDelegateForwarder];
  return [v2 hasRichlyEditableSelection];
}

uint64_t WebEditorClient::getPasteboardItemsCount(id *this)
{
  if (objc_opt_respondsToSelector()) {
    return objc_msgSend((id)objc_msgSend(this[4], "_UIKitDelegateForwarder"), "getPasteboardItemsCount");
  }
  else {
    return 0;
  }
}

uint64_t WebEditorClient::shouldRevealCurrentSelectionAfterInsertion(id *this)
{
  [this[4] _UIKitDelegateForwarder];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 1;
  }
  uint64_t v2 = (void *)[this[4] _UIKitDelegateForwarder];
  return [v2 shouldRevealCurrentSelectionAfterInsertion];
}

uint64_t WebEditorClient::shouldSuppressPasswordEcho(id *this)
{
  [this[4] _UIKitDelegateForwarder];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = (void *)[this[4] _UIKitDelegateForwarder];
  return [v2 shouldSuppressPasswordEcho];
}

uint64_t WebEditorClient::documentFragmentFromDelegate@<X0>(id *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  [this[4] _editingDelegateForwarder];
  uint64_t result = objc_opt_respondsToSelector();
  if ((result & 1) != 0
    && (uint64_t result = objc_msgSend((id)objc_msgSend(this[4], "_editingDelegateForwarder"), "documentFragmentForPasteboardItemAtIndex:", a2)) != 0)
  {
    uint64_t v7 = *(void *)(result + 16);
    if (v7) {
      *(_DWORD *)(v7 + 28) += 2;
    }
    *a3 = v7;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebEditorClient::performsTwoStepPaste(uint64_t a1, WebCore::Node *a2)
{
  [*(id *)(a1 + 32) _UIKitDelegateForwarder];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (void *)[*(id *)(a1 + 32) _UIKitDelegateForwarder];
  uint64_t v5 = kit(a2);
  return [v4 performsTwoStepPaste:v5];
}

uint64_t WebEditorClient::performTwoStepDrop(uint64_t a1, WebCore::Node *a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) _UIKitDelegateForwarder];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  BOOL v8 = (void *)[*(id *)(a1 + 32) _UIKitDelegateForwarder];
  uint64_t v9 = kit(a2);
  uint64_t v10 = *(WebCore::Node **)a3;
  *((_DWORD *)v10 + 7) = *(_DWORD *)(*(void *)a3 + 28) + 2;
  uint64_t v15 = v10;
  LODWORD(v17) = *(_DWORD *)(a3 + 8);
  uint64_t v11 = *(WebCore::Node **)(a3 + 16);
  *((_DWORD *)v11 + 7) += 2;
  unint64_t v18 = v11;
  WebCore::createLiveRange();
  uint64_t v12 = kit(v19);
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1) {
      (*(void (**)())(*(void *)v19 + 8))();
    }
    else {
      --*((_DWORD *)v19 + 2);
    }
  }
  uint64_t v13 = objc_msgSend(v8, "performTwoStepDrop:atDestination:isMove:", v9, v12, a4, v15, v17);
  if (v18)
  {
    if (*((_DWORD *)v18 + 7) == 2)
    {
      if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v18);
      }
    }
    else
    {
      *((_DWORD *)v18 + 7) -= 2;
    }
  }
  if (!v16) {
    return v13;
  }
  if (*((_DWORD *)v16 + 7) != 2)
  {
    *((_DWORD *)v16 + 7) -= 2;
    return v13;
  }
  if ((*((_WORD *)v16 + 17) & 0x400) != 0) {
    return v13;
  }
  WebCore::Node::removedLastRef(v16);
  return v13;
}

void sub_1E143EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  v70[0] = a2;
  v70[1] = a3;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v5 = (void *)[*(id *)(a1 + 32) _UIKitDelegateForwarder];
  WTF::StringView::createNSStringWithoutCopying((uint64_t *)cf, (WTF::StringView *)v70);
  id obj = (id)[v5 checkSpellingOfString:*(void *)cf];
  uint64_t v6 = *(const void **)cf;
  *(void *)CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  uint64_t result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v71, 16, obj);
  uint64_t v8 = result;
  if (result)
  {
    unsigned int v9 = 0;
    uint64_t v61 = *(void *)v67;
    uint64_t v62 = 0;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v67 != v61) {
          objc_enumerationMutation(obja);
        }
        uint64_t v11 = *(void **)(*((void *)&v66 + 1) + 8 * v10);
        int v65 = 0;
        *(_OWORD *)&cf[8] = 0u;
        long long v64 = 0u;
        cf[0] = 1;
        *(void *)&cf[8] = [v11 rangeValue];
        *(void *)&cf[16] = v12;
        unsigned int v13 = v9;
        if (v9 == *(_DWORD *)(a4 + 8))
        {
          unint64_t v14 = WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v9 + 1, (unint64_t)cf);
          unsigned int v15 = *(_DWORD *)(a4 + 12);
          uint64_t v62 = *(void *)a4;
          uint64_t v16 = *(void *)a4 + 48 * v15;
          long long v17 = *(_OWORD *)v14;
          *(void *)(v16 + ++*(_DWORD *)(this - 16) = *(void *)(v14 + 16);
          *(_OWORD *)uint64_t v16 = v17;
          uint64_t v18 = *(unsigned int *)(v14 + 36);
          *(void *)(v16 + ++*(_DWORD *)(this + 24) = 0;
          *(void *)(v16 + 32) = 0;
          uint64_t v19 = v16 + 24;
          *(_DWORD *)(v19 + 12) = v18;
          if (v18)
          {
            if (v18 >= 0x6666667)
            {
              __break(0xC471u);
              JUMPOUT(0x1E143F454);
            }
            unsigned int v20 = 40 * v18;
            uint64_t v21 = WTF::fastMalloc((WTF *)(40 * v18));
            *(_DWORD *)(v19 + 8) = v20 / 0x28;
            *(void *)uint64_t v19 = v21;
            unsigned int v22 = *(_DWORD *)(v14 + 36);
            if (v22)
            {
              uint64_t v23 = *(void *)(v14 + 24);
              uint64_t v24 = v23 + 40 * v22;
              do
              {
                *(_OWORD *)uint64_t v21 = *(_OWORD *)v23;
                uint64_t v25 = *(unsigned int *)(v23 + 28);
                *(void *)(v21 + ++*(_DWORD *)(this - 16) = 0;
                *(void *)(v21 + ++*(_DWORD *)(this + 24) = 0;
                *(_DWORD *)(v21 + 28) = v25;
                if (v25)
                {
                  if (v25 >> 29) {
                    goto LABEL_74;
                  }
                  unint64_t v26 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
                  *(_DWORD *)(v21 + ++*(_DWORD *)(this + 24) = v25;
                  *(void *)(v21 + ++*(_DWORD *)(this - 16) = v26;
                  uint64_t v27 = *(unsigned int *)(v23 + 28);
                  if (v27)
                  {
                    unsigned int v28 = *(_DWORD ***)(v23 + 16);
                    uint64_t v29 = 8 * v27;
                    do
                    {
                      unsigned int v30 = *v28;
                      if (*v28) {
                        *v30 += 2;
                      }
                      *v26++ = v30;
                      ++v28;
                      v29 -= 8;
                    }
                    while (v29);
                  }
                }
                uint64_t v31 = *(_DWORD **)(v23 + 32);
                if (v31) {
                  *v31 += 2;
                }
                *(void *)(v21 + 32) = v31;
                v21 += 40;
                v23 += 40;
              }
              while (v23 != v24);
            }
          }
          unsigned __int8 v32 = *(_DWORD **)(v14 + 40);
          if (v32) {
            *v32 += 2;
          }
          *(void *)(v62 + 48 * v15 + 40) = v32;
          unsigned int v9 = v15 + 1;
          *(_DWORD *)(a4 + 12) = v15 + 1;
          char v33 = v65;
          int v65 = 0;
          if (!v33) {
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v34 = v62 + 48 * v9;
          long long v35 = *(_OWORD *)cf;
          *(void *)(v34 + ++*(_DWORD *)(this - 16) = *(void *)&cf[16];
          *(_OWORD *)uint64_t v34 = v35;
          uint64_t v36 = HIDWORD(v64);
          *(void *)(v34 + ++*(_DWORD *)(this + 24) = 0;
          *(void *)(v34 + 32) = 0;
          uint64_t v37 = v34 + 24;
          *(_DWORD *)(v37 + 12) = v36;
          if (v36)
          {
            if (v36 >= 0x6666667)
            {
LABEL_74:
              __break(0xC471u);
              JUMPOUT(0x1E143F440);
            }
            unsigned int v38 = 40 * v36;
            uint64_t v39 = WTF::fastMalloc((WTF *)(40 * v36));
            *(_DWORD *)(v37 + 8) = v38 / 0x28;
            *(void *)uint64_t v37 = v39;
            if (HIDWORD(v64))
            {
              uint64_t v40 = v64;
              uint64_t v41 = v64 + 40 * HIDWORD(v64);
              do
              {
                *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
                uint64_t v42 = *(unsigned int *)(v40 + 28);
                *(void *)(v39 + ++*(_DWORD *)(this - 16) = 0;
                *(void *)(v39 + ++*(_DWORD *)(this + 24) = 0;
                *(_DWORD *)(v39 + 28) = v42;
                if (v42)
                {
                  if (v42 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1E143F448);
                  }
                  unint64_t v43 = (void *)WTF::fastMalloc((WTF *)(8 * v42));
                  *(_DWORD *)(v39 + ++*(_DWORD *)(this + 24) = v42;
                  *(void *)(v39 + ++*(_DWORD *)(this - 16) = v43;
                  uint64_t v44 = *(unsigned int *)(v40 + 28);
                  if (v44)
                  {
                    int v45 = *(_DWORD ***)(v40 + 16);
                    uint64_t v46 = 8 * v44;
                    do
                    {
                      uint64_t v47 = *v45;
                      if (*v45) {
                        *v47 += 2;
                      }
                      *v43++ = v47;
                      ++v45;
                      v46 -= 8;
                    }
                    while (v46);
                  }
                }
                char v48 = *(_DWORD **)(v40 + 32);
                if (v48) {
                  *v48 += 2;
                }
                *(void *)(v39 + 32) = v48;
                v39 += 40;
                v40 += 40;
              }
              while (v40 != v41);
            }
          }
          int v49 = v65;
          if (v65) {
            *(_DWORD *)v65 += 2;
          }
          *(void *)(v62 + 48 * v13 + 40) = v49;
          unsigned int v9 = *(_DWORD *)(a4 + 12) + 1;
          *(_DWORD *)(a4 + 12) = v9;
          char v33 = v65;
          int v65 = 0;
          if (!v33) {
            goto LABEL_47;
          }
        }
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, v12);
          unsigned int v50 = HIDWORD(v64);
          uint64_t v51 = v64;
          if (!HIDWORD(v64))
          {
LABEL_67:
            if (!v51) {
              goto LABEL_6;
            }
LABEL_68:
            *(void *)&long long v64 = 0;
            DWORD2(v64) = 0;
            WTF::fastFree((WTF *)v51, v12);
            goto LABEL_6;
          }
          goto LABEL_48;
        }
        *(_DWORD *)v33 -= 2;
LABEL_47:
        unsigned int v50 = HIDWORD(v64);
        uint64_t v51 = v64;
        if (!HIDWORD(v64)) {
          goto LABEL_67;
        }
LABEL_48:
        uint64_t v52 = v51 + 40 * v50;
        do
        {
          uint64_t v53 = *(WTF::StringImpl **)(v51 + 32);
          *(void *)(v51 + 32) = 0;
          if (!v53) {
            goto LABEL_53;
          }
          if (*(_DWORD *)v53 != 2)
          {
            *(_DWORD *)v53 -= 2;
LABEL_53:
            uint64_t v54 = *(unsigned int *)(v51 + 28);
            if (!v54) {
              goto LABEL_62;
            }
            goto LABEL_56;
          }
          WTF::StringImpl::destroy(v53, v12);
          uint64_t v54 = *(unsigned int *)(v51 + 28);
          if (!v54) {
            goto LABEL_62;
          }
LABEL_56:
          uint64_t v55 = *(WTF::StringImpl ***)(v51 + 16);
          uint64_t v56 = 8 * v54;
          do
          {
            uint64_t v57 = *v55;
            WTF::StringImpl *v55 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2) {
                WTF::StringImpl::destroy(v57, v12);
              }
              else {
                *(_DWORD *)v57 -= 2;
              }
            }
            ++v55;
            v56 -= 8;
          }
          while (v56);
LABEL_62:
          uint64_t v58 = *(WTF **)(v51 + 16);
          if (v58)
          {
            *(void *)(v51 + ++*(_DWORD *)(this - 16) = 0;
            *(_DWORD *)(v51 + ++*(_DWORD *)(this + 24) = 0;
            WTF::fastFree(v58, v12);
          }
          v51 += 40;
        }
        while (v51 != v52);
        uint64_t v51 = v64;
        if ((void)v64) {
          goto LABEL_68;
        }
LABEL_6:
        ++v10;
      }
      while (v10 != v8);
      uint64_t result = [obja countByEnumeratingWithState:&v66 objects:v71 count:16];
      uint64_t v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_1E143F460(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E143F474(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13, v15);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13, a2);
  _Unwind_Resume(a1);
}

void WebCore::TextCheckingResult::~TextCheckingResult(WebCore::TextCheckingResult *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v3) {
    goto LABEL_4;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
LABEL_4:
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
    return;
  }
  WTF::StringImpl::destroy(v3, a2);
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v4);
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 48 * v3;
    uint64_t v5 = *(void *)a1 + 24;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)(v5 + 16);
      *(void *)(v5 + ++*(_DWORD *)(this - 16) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t non-virtual thunk to'WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WebEditorClient::checkTextOfParagraph(a1 - 24, a2, a3, a4);
}

BOOL WebEditorClient::shouldAllowSingleClickToChangeSelection(WebEditorClient *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v4 = WebCore::VisibleSelection::rootEditableElement(a3);
  return !v4 || v4 != WebCore::Node::rootEditableElement(a2);
}

uint64_t WebEditorClient::isGrammarCheckingEnabled(WebEditorClient *this)
{
  return 0;
}

uint64_t WebEditorClient::spellCheckerDocumentTag(WebEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EditorClient::shouldRemoveDictationAlternativesAfterEditing(WebCore::EditorClient *this)
{
  return 1;
}

uint64_t WebCore::EditorClient::supportsClientSideAttachmentData(WebCore::EditorClient *this)
{
  return 0;
}

void WebCore::EditorClient::serializedAttachmentDataForIdentifiers(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebEditorClient::requestDOMPasteAccess()
{
  return 0;
}

uint64_t WebEditorClient::textChecker(WebEditorClient *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebEditorClient::spellingUIIsShowing(WebEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EditorClient::supportsGlobalSelection(WebCore::EditorClient *this)
{
  return 0;
}

uint64_t WebEditorClient::shouldEraseMarkersAfterChangeSelection()
{
  return 1;
}

uint64_t non-virtual thunk to'WebEditorClient::shouldEraseMarkersAfterChangeSelection()
{
  return 1;
}

uint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = *(void *)a1 + 40 * v3;
    while (1)
    {
      uint64_t v6 = (WTF::StringImpl *)*((void *)v4 + 4);
      *((void *)v4 + 4) = 0;
      if (!v6) {
        goto LABEL_7;
      }
      if (*(_DWORD *)v6 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v6, a2);
      uint64_t v7 = *((unsigned int *)v4 + 7);
      if (v7)
      {
LABEL_10:
        uint64_t v8 = (WTF::StringImpl **)*((void *)v4 + 2);
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = *v8;
          *uint64_t v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, a2);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
LABEL_16:
      uint64_t v11 = (WTF *)*((void *)v4 + 2);
      if (v11)
      {
        *((void *)v4 + 2) = 0;
        *((_DWORD *)v4 + 6) = 0;
        WTF::fastFree(v11, a2);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 40);
      if (v4 == (WTF *)v5) {
        goto LABEL_18;
      }
    }
    *(_DWORD *)v6 -= 2;
LABEL_7:
    uint64_t v7 = *((unsigned int *)v4 + 7);
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_18:
  uint64_t v12 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unsigned int v3 = *(WTF **)result;
      unsigned int v4 = *(_DWORD *)(result + 12);
      int v5 = 48 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        unint64_t v8 = (char *)v3 + 48 * v4;
        uint64_t v9 = (uint64_t)v3 + 24;
        do
        {
          uint64_t v11 = *(void *)(v9 - 8);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)(v9 - 24);
          *(void *)(v7 + ++*(_DWORD *)(this + 24) = 0;
          *(void *)(v7 + 32) = 0;
          *(void *)(v7 + ++*(_DWORD *)(this - 16) = v11;
          uint64_t v12 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          *(void *)(v7 + ++*(_DWORD *)(this + 24) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 32) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 36) = v12;
          uint64_t v13 = *(void *)(v9 + 16);
          *(void *)(v9 + ++*(_DWORD *)(this - 16) = 0;
          *(void *)(v7 + 40) = v13;
          unint64_t v14 = *(WTF::StringImpl **)(v9 + 16);
          *(void *)(v9 + ++*(_DWORD *)(this - 16) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v6);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          uint64_t v10 = v9 - 24;
          uint64_t result = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v6);
          v9 += 48;
          v7 += 48;
        }
        while ((char *)(v10 + 48) != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void sub_1E143FFDC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t cacheValueForKey(const void *a1, const void *a2, void *a3)
{
  return [a3 objectForKey:a1];
}

void sub_1E144042C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1440500(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14405B0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1440660(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1440780(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1440830(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144097C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1440A48(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1441128(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)webFixedPositionContentDataLock);
  _Unwind_Resume(exception_object);
}

void sub_1E1441378(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)webFixedPositionContentDataLock);
  _Unwind_Resume(exception_object);
}

void sub_1E1441994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(webFixedPositionContentDataLock, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)webFixedPositionContentDataLock);
  _Unwind_Resume(exception_object);
}

WTF **std::unique_ptr<ViewportConstrainedLayerData>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  int v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    uint64_t v4 = *((void *)v3 + 1);
    *((void *)v3 + objc_destroyWeak(this + 1) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RetainPtr<CALayer>,WTF::KeyValuePair<WTF::RetainPtr<CALayer>,std::unique_ptr<ViewportConstrainedLayerData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<CALayer>,std::unique_ptr<ViewportConstrainedLayerData>>>,WTF::DefaultHash<WTF::RetainPtr<CALayer>>,WTF::HashMap<WTF::RetainPtr<CALayer>,std::unique_ptr<ViewportConstrainedLayerData>,WTF::DefaultHash<WTF::RetainPtr<CALayer>>,WTF::HashTraits<WTF::RetainPtr<CALayer>>,WTF::HashTraits<std::unique_ptr<ViewportConstrainedLayerData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<CALayer>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    while (1)
    {
      int v11 = (const void **)(v4 + 16 * v9);
      uint64_t v12 = *v11;
      if (*v11 != (const void *)-1)
      {
        if (v12)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = ((unint64_t)v12 + ~((void)v12 << 32)) ^ (((unint64_t)v12 + ~((void)v12 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = v16 + 16 * v23;
          unint64_t v26 = *(WTF **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v26)
          {
            uint64_t v27 = *((void *)v26 + 1);
            *((void *)v26 + objc_destroyWeak(this + 1) = 0;
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            WTF::fastFree(v26, v8);
            unsigned int v28 = *(const void **)v25;
            *(void *)uint64_t v25 = 0;
            if (v28) {
              CFRelease(v28);
            }
          }
          else
          {
            *(void *)uint64_t v25 = 0;
          }
          uint64_t v29 = *v11;
          *int v11 = 0;
          *(void *)uint64_t v25 = v29;
          uint64_t v30 = v4 + 16 * v9;
          uint64_t v31 = *(void *)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          *(void *)(v25 + 8) = v31;
          unsigned __int8 v32 = *(WTF **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          if (v32)
          {
            uint64_t v33 = *((void *)v32 + 1);
            *((void *)v32 + objc_destroyWeak(this + 1) = 0;
            if (v33) {
              (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
            }
            WTF::fastFree(v32, v8);
          }
          uint64_t v12 = *v11;
          *int v11 = 0;
          if (!v12) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v13 = v4 + 16 * v9;
          unint64_t v14 = *(WTF **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v14)
          {
            uint64_t v15 = *((void *)v14 + 1);
            *((void *)v14 + objc_destroyWeak(this + 1) = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
            WTF::fastFree(v14, v8);
            uint64_t v12 = *v11;
          }
          *int v11 = 0;
          if (!v12) {
            goto LABEL_6;
          }
        }
        CFRelease(v12);
      }
LABEL_6:
      if (++v9 == v10) {
        goto LABEL_33;
      }
    }
  }
  if (v4)
  {
LABEL_33:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void sub_1E1442184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_1E14421C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1442328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1442948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a15);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a21);
  uint64_t v27 = a18;
  if (a18)
  {
    a18 = 0;
    a19 = 0;
    WTF::fastFree(v27, v26);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a24);
    std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v24 - 120));
    _Unwind_Resume(a1);
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a24);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v24 - 120));
  _Unwind_Resume(a1);
}

void sub_1E1442A0C(_Unwind_Exception *a1)
{
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1E1442AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1442CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1442D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1442D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1442D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1442EA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9) {
    _Unwind_Resume(exception_object);
  }
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1E1442FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14430E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14432BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v4 = *(_DWORD **)(v2 - 24);
  *(void *)(v2 - ++*(_DWORD *)(this + 24) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1E1443344(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1E14433EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14436A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1E144400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1E1444368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E14444A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14444B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E14447D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_1E144481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1444830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E1444D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_1E1444F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1E1444F30(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1E14450E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1445180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E144524C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1446444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v29 - 128));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v29 - 104));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a29);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a26);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v29 - 248));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v29 - 224));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v29 - 200));
  _Unwind_Resume(a1);
}

uint64_t *WebCore::VisibleSelection::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  int v6 = *((_DWORD *)a2 + 2);
  *((unsigned char *)a1 + 12) = *((unsigned char *)a2 + 12);
  *((_DWORD *)a1 + 2) = v6;
  uint64_t v7 = a2[2];
  a2[2] = 0;
  uint64_t v8 = a1[2];
  a1[2] = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 28) == 2)
    {
      if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
    }
    else
    {
      *(_DWORD *)(v8 + 28) -= 2;
    }
  }
  int v9 = *((_DWORD *)a2 + 6);
  *((unsigned char *)a1 + 28) = *((unsigned char *)a2 + 28);
  *((_DWORD *)a1 + 6) = v9;
  uint64_t v10 = a2[4];
  a2[4] = 0;
  uint64_t v11 = a1[4];
  a1[4] = v10;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 28) == 2)
    {
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 28) -= 2;
    }
  }
  int v12 = *((_DWORD *)a2 + 10);
  *((unsigned char *)a1 + 44) = *((unsigned char *)a2 + 44);
  *((_DWORD *)a1 + 10) = v12;
  uint64_t v13 = a2[6];
  a2[6] = 0;
  uint64_t v14 = a1[6];
  a1[6] = v13;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 28) == 2)
    {
      if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
      }
    }
    else
    {
      *(_DWORD *)(v14 + 28) -= 2;
    }
  }
  int v15 = *((_DWORD *)a2 + 14);
  *((unsigned char *)a1 + 60) = *((unsigned char *)a2 + 60);
  *((_DWORD *)a1 + 14) = v15;
  uint64_t v16 = a2[8];
  a2[8] = 0;
  uint64_t v17 = a1[8];
  a1[8] = v16;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 28) == 2)
    {
      if ((*(_WORD *)(v17 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
    }
    else
    {
      *(_DWORD *)(v17 + 28) -= 2;
    }
  }
  int v18 = *((_DWORD *)a2 + 18);
  *((unsigned char *)a1 + 76) = *((unsigned char *)a2 + 76);
  *((_DWORD *)a1 + 18) = v18;
  uint64_t v19 = a2[10];
  a2[10] = 0;
  uint64_t v20 = a1[10];
  a1[10] = v19;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 28) == 2)
    {
      if ((*(_WORD *)(v20 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
      }
    }
    else
    {
      *(_DWORD *)(v20 + 28) -= 2;
    }
  }
  int v21 = *((_DWORD *)a2 + 22);
  *((unsigned char *)a1 + 92) = *((unsigned char *)a2 + 92);
  *((_DWORD *)a1 + 22) = v21;
  LOWORD(v2objc_destroyWeak(this + 1) = *((_WORD *)a2 + 48);
  *((unsigned char *)a1 + 98) = *((unsigned char *)a2 + 98);
  *((_WORD *)a1 + 48) = v21;
  return a1;
}

void sub_1E144683C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14468DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WebFrameNetworkingContext::ensurePrivateBrowsingSession(WebFrameNetworkingContext *this)
{
  MEMORY[0x1E4E442D0](&v10, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"));
  v1.m_identifier = (unint64_t)&v10;
  NetworkStorageSessionMap::ensureSession(0x8000000000000001, v1, v2);
  uint64_t v4 = v10;
  uint64_t v10 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v3);
        goto LABEL_5;
LABEL_13:
      uint64_t result = 0;
      globalSessionMap(void)::map = 0;
      return result;
    }
    *(_DWORD *)v4 -= 2;
  }
    goto LABEL_13;
LABEL_5:
  if (globalSessionMap(void)::map)
  {
    unsigned int v5 = *(_DWORD *)(globalSessionMap(void)::map - 8);
    uint64_t v6 = v5 & 0xA6721BA;
    uint64_t v7 = *(void *)(globalSessionMap(void)::map + 16 * v6);
    if (v7 == 0x8000000000000001) {
      return *(void *)(globalSessionMap(void)::map + 16 * v6 + 8);
    }
    int v8 = 1;
    while (v7)
    {
      uint64_t v6 = (v6 + v8) & v5;
      uint64_t v7 = *(void *)(globalSessionMap(void)::map + 16 * v6);
      ++v8;
      if (v7 == 0x8000000000000001) {
        return *(void *)(globalSessionMap(void)::map + 16 * v6 + 8);
      }
    }
  }
  return 0;
}

void sub_1E1446C14(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameNetworkingContext::localFileContentSniffingEnabled(WebFrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(unsigned char *)(*(void *)(v2 + 136) + 690) & 1;
  }
  else {
    return 0;
  }
}

uint64_t WebFrameNetworkingContext::scheduledRunLoopPairs(WebFrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && (v3 = *(void *)(v2 + 24)) != 0 && (v4 = *(void *)(v3 + 8)) != 0) {
    return *(void *)(v4 + 24);
  }
  else {
    return 0;
  }
}

uint64_t WebFrameNetworkingContext::sourceApplicationAuditData@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 16);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && (v5 = *(void *)(v4 + 24)) != 0 && (v6 = *(void *)(v5 + 8)) != 0)
  {
    this = (*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 48) + 16) + 1368))(*(void *)(*(void *)(v6 + 48) + 16));
    if ((this & 1) != 0
      || (this = (uint64_t)objc_loadWeak((id *)(*(void *)(*(void *)(v6 + 48) + 16) + 16))) == 0)
    {
      *a2 = 0;
    }
    else
    {
      this = [(id)this _sourceApplicationAuditData];
      *a2 = this;
      if (this)
      {
        return (uint64_t)CFRetain((CFTypeRef)this);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void WebFrameNetworkingContext::sourceApplicationIdentifier(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

uint64_t WebFrameNetworkingContext::blockedError(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 280) + 16)
                              + 576))();
}

uint64_t WebFrameNetworkingContext::storageSession(WebFrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v4 = *(WebCore::Page **)(v3 + 8);
  if (!v4 || WebCore::Page::sessionID(v4) > -2) {
    goto LABEL_13;
  }
  {
    if (globalSessionMap(void)::map)
    {
      unsigned int v5 = *(_DWORD *)(globalSessionMap(void)::map - 8);
      uint64_t v6 = v5 & 0xA6721BA;
      uint64_t v7 = *(void *)(globalSessionMap(void)::map + 16 * v6);
      if (v7 == 0x8000000000000001)
      {
LABEL_12:
        uint64_t result = *(void *)(globalSessionMap(void)::map + 16 * v6 + 8);
        if (result) {
          return result;
        }
      }
      else
      {
        int v8 = 1;
        while (v7)
        {
          uint64_t v6 = (v6 + v8) & v5;
          uint64_t v7 = *(void *)(globalSessionMap(void)::map + 16 * v6);
          ++v8;
          if (v7 == 0x8000000000000001) {
            goto LABEL_12;
          }
        }
      }
    }
LABEL_13:
      goto LABEL_14;
LABEL_17:
    defaultNetworkStorageSession(void)::session = 0;
    goto LABEL_18;
  }
  globalSessionMap(void)::map = 0;
    goto LABEL_17;
LABEL_14:
  uint64_t result = defaultNetworkStorageSession(void)::session;
  if (defaultNetworkStorageSession(void)::session) {
    return result;
  }
LABEL_18:
  uint64_t v10 = (WebCore::NetworkStorageSession *)WTF::fastMalloc((WTF *)0x128);
  v11.m_identifier = 1;
  uint64_t result = WebCore::NetworkStorageSession::NetworkStorageSession(v10, v11);
  {
    defaultNetworkStorageSession(void)::session = result;
    return result;
  }
  uint64_t v12 = defaultNetworkStorageSession(void)::session;
  defaultNetworkStorageSession(void)::session = result;
  if (v12)
  {
    MEMORY[0x1E4E470D0](v12);
    if (*(_DWORD *)(v12 + 8))
    {
      *(void *)(v12 + 288) = 0;
      *(_OWORD *)(v12 + 256) = 0u;
      *(_OWORD *)(v12 + 272) = 0u;
      *(_OWORD *)(v12 + 2++*(_DWORD *)(this + 24) = 0u;
      *(_OWORD *)(v12 + 240) = 0u;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 208) = 0u;
      *(_OWORD *)(v12 + 160) = 0u;
      *(_OWORD *)(v12 + 176) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_OWORD *)(v12 + 144) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + ++*(_DWORD *)(this - 16) = 0u;
        return defaultNetworkStorageSession(void)::session;
    }
    else
    {
      WTF::fastFree((WTF *)v12, v13);
        return defaultNetworkStorageSession(void)::session;
    }
    uint64_t result = 0;
    defaultNetworkStorageSession(void)::session = 0;
  }
  return result;
}

void WebFrameNetworkingContext::~WebFrameNetworkingContext(WebFrameNetworkingContext *this, void *a2)
{
  *(void *)this = &unk_1F3C7AAC8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  WTF *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3C7AAC8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  WTF::fastFree(v4, a2);
}

void sub_1E14471C0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebGeolocationClient::geolocationDestroyed(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 72))();
  }
  return this;
}

uint64_t WebGeolocationClient::startUpdating(id *this, const WTF::String *a2, int a3)
{
  if (a3) {
    (*((void (**)(id *, uint64_t))*this + 4))(this, 1);
  }
  uint64_t v4 = (void *)[this[1] _geolocationProvider];
  id v5 = this[1];
  return [v4 registerWebView:v5];
}

uint64_t WebGeolocationClient::stopUpdating(id *this)
{
  uint64_t v2 = (void *)[this[1] _geolocationProvider];
  id v3 = this[1];
  return [v2 unregisterWebView:v3];
}

uint64_t WebGeolocationClient::setEnableHighAccuracy(id *this, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "setEnableHighAccuracy:", a2);
}

void WebGeolocationClient::requestPermission(id *this, WebCore::Geolocation *a2)
{
  [this[1] UIDelegate];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = [[WebGeolocationProviderInitializationListener alloc] initWithGeolocation:a2];
    objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "initializeGeolocationForWebView:listener:", this[1], v4);
    if (v4)
    {
      CFRelease(v4);
    }
  }
  else
  {
    uint64_t v7 = 0;
    WebCore::Geolocation::setIsAllowed(a2, 0, (const WTF::String *)&v7);
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
}

void sub_1E1447480(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14 = (int)a2;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  if (v14 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

uint64_t WebGeolocationClient::lastPosition@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "lastPosition");
  if (result)
  {
    uint64_t v4 = *(void *)(result + 8);
    long long v5 = *(_OWORD *)(v4 + 56);
    long long v6 = *(_OWORD *)(v4 + 88);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v4 + 72);
    *(_OWORD *)(a2 + 80) = v6;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v4 + 104);
    long long v7 = *(_OWORD *)(v4 + 24);
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(a2 + ++*(_DWORD *)(this - 16) = v7;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v4 + 40);
    *(_OWORD *)(a2 + 48) = v5;
    *(unsigned char *)(a2 + 112) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 112) = 0;
  }
  return result;
}

void sub_1E1447720(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144782C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1447B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

void sub_1E1447C40(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t initCLLocationManager(void)
{
  if (_MergedGlobals_2)
  {
    uint64_t result = (uint64_t)objc_getClass("CLLocationManager");
    qword_1EAD80158 = result;
    if (result)
    {
LABEL_3:
      getCLLocationManagerClass = CLLocationManagerFunction;
      return result;
    }
  }
  else
  {
    qword_1EAD80160 = ___ZL19CoreLocationLibraryv_block_invoke();
    _MergedGlobals_2 = 1;
    uint64_t result = (uint64_t)objc_getClass("CLLocationManager");
    qword_1EAD80158 = result;
    if (result) {
      goto LABEL_3;
    }
  }
  uint64_t result = 42;
  __break(0xC471u);
  return result;
}

uint64_t CLLocationManagerFunction(void)
{
  return qword_1EAD80158;
}

uint64_t ___ZL19CoreLocationLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  if (!result)
  {
    uint64_t result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t initkCLLocationAccuracyBest(void)
{
  if (_MergedGlobals_2 == 1)
  {
    uint64_t result = (uint64_t)dlsym((void *)qword_1EAD80160, "kCLLocationAccuracyBest");
    if (result)
    {
LABEL_3:
      qword_1EAD80168 = *(void *)result;
      _MergedGlobals_5 = (uint64_t)kCLLocationAccuracyBestFunction;
      return result;
    }
  }
  else
  {
    qword_1EAD80160 = ___ZL19CoreLocationLibraryv_block_invoke();
    _MergedGlobals_2 = 1;
    uint64_t result = (uint64_t)dlsym((void *)qword_1EAD80160, "kCLLocationAccuracyBest");
    if (result) {
      goto LABEL_3;
    }
  }
  uint64_t result = 45;
  __break(0xC471u);
  return result;
}

double kCLLocationAccuracyBestFunction(void)
{
  return *(double *)&qword_1EAD80168;
}

uint64_t initkCLLocationAccuracyHundredMeters(void)
{
  if (_MergedGlobals_2 == 1)
  {
    uint64_t result = (uint64_t)dlsym((void *)qword_1EAD80160, "kCLLocationAccuracyHundredMeters");
    if (result)
    {
LABEL_3:
      qword_1EAD80170 = *(void *)result;
      qword_1EB3A9640 = (uint64_t)kCLLocationAccuracyHundredMetersFunction;
      return result;
    }
  }
  else
  {
    qword_1EAD80160 = ___ZL19CoreLocationLibraryv_block_invoke();
    _MergedGlobals_2 = 1;
    uint64_t result = (uint64_t)dlsym((void *)qword_1EAD80160, "kCLLocationAccuracyHundredMeters");
    if (result) {
      goto LABEL_3;
    }
  }
  uint64_t result = 46;
  __break(0xC471u);
  return result;
}

double kCLLocationAccuracyHundredMetersFunction(void)
{
  return *(double *)&qword_1EAD80170;
}

void sub_1E1448A84(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E1448C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1448F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1449098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1449368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1449550(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::HashMap<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::DefaultHash<WTF::RetainPtr<WebView>><objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::DefaultHash<WTF::RetainPtr<WebView>><objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        long long v6 = *(const void **)v5;
        if (*(void *)v5 != -1)
        {
          long long v7 = *(const void **)(v5 + 8);
          *(void *)(v5 + 8) = 0;
          if (v7)
          {
            CFRelease(v7);
            long long v6 = *(const void **)v5;
          }
          *(void *)uint64_t v5 = 0;
          if (v6) {
            CFRelease(v6);
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void sub_1E1449774(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::HashMap<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::DefaultHash<WTF::RetainPtr<WebView>><objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1449A04(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E1449B58(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E1449D48(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E144A07C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E144A090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    if (!v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  CFRelease(v14);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WebGeolocationPositionEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WebGeolocationPositionEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t *WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(result, 8u, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  int v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    uint64_t *v14 = v9;
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      uint64_t v18 = *v4;
      if (*v4) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v18 = *v4;
      if (*v4)
      {
LABEL_14:
        uint64_t v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
        unint64_t v20 = *(unsigned int *)(v18 - 4);
        if (v20 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v19 = *(unsigned int *)(v18 - 16);
    unint64_t v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400)
    {
LABEL_15:
      if (3 * v20 > 4 * v19)
      {
LABEL_26:
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v18 + 8 * v20;
        *(unsigned char *)(a3 + ++*(_DWORD *)(this - 16) = 1;
        return result;
      }
      if (!v20)
      {
        CFTypeRef result = WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(v4, 8u, v14);
        int v14 = result;
        uint64_t v18 = *v4;
        if (!*v4)
        {
LABEL_18:
          unint64_t v20 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v20 = *(unsigned int *)(v18 - 4);
        goto LABEL_26;
      }
LABEL_24:
      CFTypeRef result = WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(v4, v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20)), v14);
      int v14 = result;
      uint64_t v18 = *v4;
      if (!*v4) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v20 > 2 * v19) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v8;
    int v14 = (uint64_t *)(v6 + 8 * v13);
    uint64_t v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        uint64_t *v16 = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v9 = *a2;
        int v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if (v7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v6 - 4);
  }
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v6 + 8 * v21;
  *(unsigned char *)(a3 + ++*(_DWORD *)(this - 16) = 0;
  return result;
}

void *WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v15 = *a1;
        int v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        unint64_t v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
        int v21 = 1;
        do
        {
          unsigned int v22 = v20;
          uint64_t v23 = *(void *)(v15 + 8 * v20);
          unsigned int v20 = (v20 + v21++) & v16;
        }
        while (v23);
        uint64_t v24 = (void *)(v15 + 8 * v22);
        void *v24 = v14;
        if (v13 == a3) {
          unint64_t v12 = v24;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
  }
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v10);
  }
  return v12;
}

uint64_t WTF::HashTable<WTF::RetainPtr<WebView>,WTF::KeyValuePair<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>>,WTF::KeyValuePairKeyExtractor<WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashMap<WTF::RetainPtr<WebView>,objc_object  {objcproto44WebGeolocationProviderInitializationListener}*,WTF::DefaultHash,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::HashMap<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = (const void **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (const void *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = v14 + 16 * v21;
          uint64_t v24 = *(const void **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            CFRelease(v24);
            uint64_t v25 = *(const void **)v23;
            *(void *)uint64_t v23 = 0;
            if (v25) {
              CFRelease(v25);
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
          }
          unint64_t v26 = *v10;
          *unint64_t v10 = 0;
          *(void *)uint64_t v23 = v26;
          uint64_t v27 = v4 + 16 * v9;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          *(void *)(v23 + 8) = v28;
          uint64_t v29 = *(const void **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            CFRelease(v29);
          }
          uint64_t v11 = *v10;
          *unint64_t v10 = 0;
          if (!v11) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          unsigned int v13 = *(const void **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(v13);
            uint64_t v11 = *v10;
          }
          *unint64_t v10 = 0;
          if (!v11) {
            goto LABEL_6;
          }
        }
        CFRelease(v11);
      }
LABEL_6:
      if (++v9 == v5) {
        goto LABEL_27;
      }
    }
  }
  if (v4)
  {
LABEL_27:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void sub_1E144B45C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E144B558(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144B660(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E144B9F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E144BA08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E144BA1C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, int a20,int a21)
{
  if (v21) {
    CFRelease(v21);
  }
  WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(const void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      int v6 = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        CFRelease(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E144BF4C(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144C574(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  CFRelease(v21);
  WebHistoryWriter::~WebHistoryWriter((WebHistoryWriter *)&a10, v23);
  _Unwind_Resume(a1);
}

void WebHistoryWriter::~WebHistoryWriter(WebHistoryWriter *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C7CF48;
  uint64_t v3 = (WTF *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  HistoryPropertyListWriter::~HistoryPropertyListWriter(this, a2);
}

{
  WTF *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3C7CF48;
  uint64_t v3 = (WTF *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  HistoryPropertyListWriter::~HistoryPropertyListWriter(this, a2);
  JUMPOUT(0x1E4E4B240);
}

void sub_1E144D048(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void HistoryPropertyListWriter::~HistoryPropertyListWriter(HistoryPropertyListWriter *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78678;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
      *((void *)this + 5) = 0;
      if (!v4) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v4)
  {
LABEL_9:
    uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v4, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (!v5) {
    goto LABEL_14;
  }
LABEL_12:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    int v6 = (WTF::StringImpl *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (!v6) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  *(_DWORD *)v5 -= 2;
LABEL_14:
  int v6 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v6)
  {
LABEL_19:
    int v7 = (WTF::StringImpl *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v7) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v6, a2);
  int v7 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v7) {
    goto LABEL_24;
  }
LABEL_22:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, a2);
    int v8 = (WTF::StringImpl *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (!v8) {
      return;
    }
    goto LABEL_27;
  }
  *(_DWORD *)v7 -= 2;
LABEL_24:
  int v8 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (!v8) {
    return;
  }
LABEL_27:
  if (*(_DWORD *)v8 == 2) {
    WTF::StringImpl::destroy(v8, a2);
  }
  else {
    *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebHistoryWriter::writeHistoryItems(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 92);
  unint64_t v3 = (v2 - 1);
  if (v2 - 1 >= 0)
  {
    uint64_t v5 = result;
    do
    {
      if (v3 >= *(unsigned int *)(v5 + 92))
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v7 = **(void **)(v5 + 72);
      if (v7)
      {
        uint64_t v8 = *(int *)(*(void *)(v5 + 80) + 4 * v3);
        unsigned int v9 = *(_DWORD *)(v7 - 8);
        unint64_t v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
        uint64_t v14 = *(void *)(v7 + 16 * v13);
        if (v14 != v8)
        {
          int v15 = 1;
          while (v14)
          {
            uint64_t v13 = (v13 + v15) & v9;
            uint64_t v14 = *(void *)(v7 + 16 * v13);
            ++v15;
            if (v14 == v8) {
              goto LABEL_10;
            }
          }
          unint64_t v17 = 0;
          uint64_t result = [0 count];
          if (!result) {
            continue;
          }
LABEL_15:
          uint64_t v18 = result;
          for (uint64_t i = 0; i != v18; ++i)
            uint64_t result = HistoryPropertyListWriter::writeHistoryItem(v5, a2, [v17 objectAtIndex:i]);
          continue;
        }
LABEL_10:
        uint64_t v16 = v7 + 16 * v13;
        unint64_t v17 = *(void **)(v16 + 8);
        if (v17)
        {
          CFRetain(*(CFTypeRef *)(v16 + 8));
          CFRelease(v17);
          uint64_t result = [v17 count];
          if (result) {
            goto LABEL_15;
          }
          continue;
        }
      }
      else
      {
        unint64_t v17 = 0;
      }
      uint64_t result = [v17 count];
      if (result) {
        goto LABEL_15;
      }
    }
    while ((uint64_t)v3-- > 0);
  }
  return result;
}

void sub_1E144D7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, _DWORD *a13)
{
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&a13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E144DA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, _DWORD *a13)
{
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&a13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E144DFB0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E144DFC4(_Unwind_Exception *a1, void *a2)
{
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
      CFRelease(v2);
      _Unwind_Resume(a1);
    }
  }
  CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_1E144E00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E144E178(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::HistoryItem *kit(WebCore::HistoryItem *a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return v1;
  }
  if ((_MergedGlobals_18 & 1) == 0)
  {
    qword_1EB3A97A0 = 0;
    _MergedGlobals_18 = 1;
    goto LABEL_14;
  }
  if (!qword_1EB3A97A0) {
    goto LABEL_14;
  }
  int v2 = *(_DWORD *)(qword_1EB3A97A0 - 8);
  unint64_t v3 = ((unint64_t)a1 + ~((void)a1 << 32)) ^ (((unint64_t)a1 + ~((void)a1 << 32)) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  for (i = 1; ; unsigned int v6 = (v8 + i++) & v2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(qword_1EB3A97A0 + 16 * v6);
    if (v9 != -1)
    {
      if (!v9) {
        goto LABEL_14;
      }
      if (*(WebCore::HistoryItem **)(v9 + 8) == a1) {
        break;
      }
    }
  }
  uint64_t v10 = qword_1EB3A97A0 + 16 * v8;
  unint64_t v11 = *(const void **)(v10 + 8);
  if (!v11)
  {
LABEL_14:
    uint64_t v14 = [WebHistoryItem alloc];
    ++*(_DWORD *)v1;
    uint64_t v18 = v1;
    uint64_t v1 = (id)CFMakeCollectable([(WebHistoryItem *)v14 initWithWebCoreHistoryItem:&v18]);
    int v15 = v18;
    uint64_t v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        uint64_t v16 = (WTF *)MEMORY[0x1E4E44A30]();
        WTF::fastFree(v16, v17);
        return v1;
      }
      --*(_DWORD *)v15;
    }
    return v1;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  unint64_t v12 = (void *)CFMakeCollectable(v11);
  return (WebCore::HistoryItem *)v12;
}

void sub_1E144E640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E144E654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E144E880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, _DWORD *a13)
{
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&a13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E144EC4C(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144ECF4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144F1F0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 != 2)
    {
      *(_DWORD *)a18 -= 2;
      _Unwind_Resume(exception_object);
    }
    WTF::StringImpl::destroy(a18, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144F32C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144F6DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
  *a1 = v4;
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = (void *)v4;
    uint64_t v8 = *(WTF **)a2;
    uint64_t v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      uint64_t v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_1E144F794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    *CFTypeRef v10 = 0;
    if (!v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    *CFTypeRef v10 = 0;
    if (!v11) {
      goto LABEL_3;
    }
  }
  CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void sub_1E144F8F8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144F9E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E144FAB4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WebHistoryItem *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WebHistoryItem *>>,WTF::DefaultHash<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WebHistoryItem *,WTF::DefaultHash<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WebHistoryItem *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB3A97A0;
  if (qword_1EB3A97A0)
  {
    int v3 = *(_DWORD *)(qword_1EB3A97A0 - 4);
    int v4 = *(_DWORD *)(qword_1EB3A97A0 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB3A97A0 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB3A97A0 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v8 = (unsigned int **)(v2 + 16 * i);
      uint64_t v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1EB3A97A0) {
            int v10 = *(_DWORD *)(qword_1EB3A97A0 - 8);
          }
          else {
            int v10 = 0;
          }
          unint64_t v11 = ~(*((void *)v9 + 1) << 32) + *((void *)v9 + 1);
          unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          unsigned int v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
          int v15 = 1;
          do
          {
            unsigned int v16 = v14;
            uint64_t v17 = *(void *)(qword_1EB3A97A0 + 16 * v14);
            unsigned int v14 = (v14 + v15++) & v10;
          }
          while (v17);
          uint64_t v18 = (void *)(qword_1EB3A97A0 + 16 * v16);
          void *v18 = 0;
          long long v19 = *(_OWORD *)v8;
          *uint64_t v8 = 0;
          *(_OWORD *)uint64_t v18 = v19;
          int v20 = *v8;
          *uint64_t v8 = 0;
          if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v6);
          }
        }
        else
        {
          *uint64_t v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WTF::createNSArray<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>(void **a1, WTF **a2)
{
  id v4 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (*a2)
  {
    *a1 = (void *)[v4 initWithCapacity:*((unsigned int *)*a2 - 3)];
    uint64_t v6 = *a2;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v9 = 0;
    uint64_t v8 = v6;
    goto LABEL_12;
  }
  *a1 = (void *)[v4 initWithCapacity:0];
  uint64_t v6 = *a2;
  if (!*a2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v7 = *((unsigned int *)v6 - 1);
  uint64_t v8 = (WTF *)((char *)v6 + 8 * v7);
  if (*((_DWORD *)v6 - 3))
  {
    uint64_t v9 = v6;
    if (v7)
    {
      uint64_t v10 = 8 * v7;
      uint64_t v9 = v6;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        uint64_t v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
        if (!v10)
        {
          uint64_t v9 = v8;
          if (v6) {
            goto LABEL_13;
          }
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v6) {
      goto LABEL_13;
    }
LABEL_16:
    unint64_t v11 = 0;
    if (!v9) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v9 = (WTF *)((char *)v6 + 8 * v7);
  uint64_t v8 = v9;
  if (!v6) {
    goto LABEL_16;
  }
LABEL_13:
  unint64_t v11 = (WTF *)((char *)v6 + 8 * *((unsigned int *)v6 - 1));
  if (v11 == v9) {
    return;
  }
  do
  {
LABEL_19:
    unint64_t v12 = *a1;
    WTF::makeNSArrayElement((uint64_t *)&cf, v9, v5);
    if (cf)
    {
      objc_msgSend(v12, "addObject:");
      CFTypeRef v13 = cf;
      CFTypeRef cf = 0;
      if (v13) {
        CFRelease(v13);
      }
    }
    unsigned int v14 = (WTF *)((char *)v9 + 8);
    uint64_t v9 = v8;
    if (v14 != v8)
    {
      uint64_t v9 = v14;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        uint64_t v9 = (WTF *)((char *)v9 + 8);
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
}

void sub_1E145028C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    unint64_t v12 = *v10;
    *uint64_t v10 = 0;
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v12 = *v10;
    *uint64_t v10 = 0;
    if (!v12) {
      goto LABEL_3;
    }
  }
  CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &>(void **a1, WTF **a2)
{
  id v4 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (*a2)
  {
    *a1 = (void *)[v4 initWithCapacity:*((unsigned int *)*a2 - 3)];
    uint64_t v6 = *a2;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v9 = 0;
    uint64_t v8 = v6;
    goto LABEL_12;
  }
  *a1 = (void *)[v4 initWithCapacity:0];
  uint64_t v6 = *a2;
  if (!*a2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v7 = *((unsigned int *)v6 - 1);
  uint64_t v8 = (WTF *)((char *)v6 + 8 * v7);
  if (*((_DWORD *)v6 - 3))
  {
    uint64_t v9 = v6;
    if (v7)
    {
      uint64_t v10 = 8 * v7;
      uint64_t v9 = v6;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        uint64_t v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
        if (!v10)
        {
          uint64_t v9 = v8;
          if (v6) {
            goto LABEL_13;
          }
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v6) {
      goto LABEL_13;
    }
LABEL_16:
    unint64_t v11 = 0;
    if (!v9) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v9 = (WTF *)((char *)v6 + 8 * v7);
  uint64_t v8 = v9;
  if (!v6) {
    goto LABEL_16;
  }
LABEL_13:
  unint64_t v11 = (WTF *)((char *)v6 + 8 * *((unsigned int *)v6 - 1));
  if (v11 == v9) {
    return;
  }
  do
  {
LABEL_19:
    unint64_t v12 = *a1;
    WTF::makeNSArrayElement((uint64_t *)&cf, v9, v5);
    if (cf)
    {
      objc_msgSend(v12, "addObject:");
      CFTypeRef v13 = cf;
      CFTypeRef cf = 0;
      if (v13) {
        CFRelease(v13);
      }
    }
    unsigned int v14 = (WTF *)((char *)v9 + 8);
    uint64_t v9 = v8;
    if (v14 != v8)
    {
      uint64_t v9 = v14;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        uint64_t v9 = (WTF *)((char *)v9 + 8);
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
}

void sub_1E14504B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    unint64_t v12 = *v10;
    *uint64_t v10 = 0;
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v12 = *v10;
    *uint64_t v10 = 0;
    if (!v12) {
      goto LABEL_3;
    }
  }
  CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_1E145058C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::createNSArray<WTF::FixedVector<WTF::ASCIILiteral>>(WTF::StringImpl **a1, unsigned int **a2)
{
  id v4 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (*a2) {
    uint64_t v5 = **a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = (WTF::StringImpl *)[v4 initWithCapacity:v5];
  uint64_t v8 = result;
  *a1 = result;
  uint64_t v9 = *a2;
  uint64_t v10 = (uint64_t)(*a2 + 2);
  if (*a2) {
    uint64_t v11 = (uint64_t)(*a2 + 2);
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v9)
  {
    uint64_t v12 = 0;
    if (!v11) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v12 = v10 + 16 * *v9;
  if (v11 != v12)
  {
LABEL_11:
    CFTypeRef v13 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    while (1)
    {
      uint64_t v14 = *(void *)(v11 + 8);
      if (v14)
      {
        uint64_t v7 = (const WTF::String *)(v14 - 1);
        if (v14 == 1)
        {
          *(_DWORD *)v13 += 2;
          int v15 = v13;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          int v15 = (WTF::StringImpl *)cf[1];
        }
        uint64_t v17 = v15;
      }
      else
      {
        uint64_t v17 = 0;
      }
      WTF::makeNSArrayElement((uint64_t *)cf, (WTF *)&v17, v7);
      if (cf[0]) {
        break;
      }
      uint64_t result = v17;
      uint64_t v17 = 0;
      cf[0] = 0;
      if (result) {
        goto LABEL_26;
      }
LABEL_13:
      v11 += 16;
      if (v11 == v12) {
        return result;
      }
    }
    -[WTF::StringImpl addObject:](v8, "addObject:");
    CFTypeRef v16 = cf[0];
    cf[0] = 0;
    if (v16) {
      CFRelease(v16);
    }
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (!result) {
      goto LABEL_13;
    }
LABEL_26:
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
    goto LABEL_13;
  }
  return result;
}

void sub_1E14506FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf)
{
  *uint64_t v11 = 0;
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14507E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1450B74(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&a9, a2);
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void sub_1E1450EA8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *cf)
{
  if (cf)
  {
    if (*(_DWORD *)cf == 2)
    {
      WTF::StringImpl::destroy(cf, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)cf -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1451158(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (*(_DWORD *)(v3 + 28) == 2)
  {
    if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 28) -= 2;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      --*v4;
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
  }
  --*v4;
  _Unwind_Resume(exception_object);
}

void sub_1E14513F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1451614(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  --*v2;
  _Unwind_Resume(exception_object);
}

void sub_1E1451BD0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t regExpForLabels(NSArray *a1)
{
  if (byte_1EB3A97AD)
  {
    if (byte_1EB3A97AE) {
      goto LABEL_3;
    }
LABEL_75:
    *(void *)&dword_1EB3A97F0 = 0;
    qword_1EB3A97E8 = 0;
    byte_1EB3A97AE = 1;
    uint64_t v42 = a1;
    if (byte_1EB3A97AF) {
      goto LABEL_4;
    }
    goto LABEL_76;
  }
  qword_1EB3A97D8 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:4];
  byte_1EB3A97AD = 1;
  if ((byte_1EB3A97AE & 1) == 0) {
    goto LABEL_75;
  }
LABEL_3:
  uint64_t v42 = a1;
  if (byte_1EB3A97AF) {
    goto LABEL_4;
  }
LABEL_76:
  JSC::Yarr::RegularExpression::RegularExpression();
  byte_1EB3A97AF = 1;
  a1 = v42;
LABEL_4:
  uint64_t v48 = 0;
  unint64_t v2 = [(id)qword_1EB3A97D8 indexOfObject:a1];
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v44 = 0;
    int v45 = 0;
    unsigned int v46 = 0;
    char v47 = 1;
    LOBYTE(v54) = 40;
    WTF::StringBuilder::append();
    uint64_t v3 = [(NSArray *)a1 count];
    if (!v3) {
      goto LABEL_25;
    }
    MEMORY[0x1E4E442D0](&v43, [(NSArray *)a1 objectAtIndex:0]);
    id v4 = v43;
    if (v43)
    {
      uint64_t v5 = "";
      if (*((_DWORD *)v43 + 1))
      {
        int v6 = JSC::Yarr::RegularExpression::match();
        int v7 = JSC::Yarr::RegularExpression::match();
        id v4 = v43;
        uint64_t v8 = "\\b";
        if (v6 < 0) {
          uint64_t v9 = "";
        }
        else {
          uint64_t v9 = "\\b";
        }
        int v10 = ~(v6 >> 30) & 2;
        int v11 = ~(v7 >> 30) & 2;
        if (v7 < 0) {
          uint64_t v8 = "";
        }
        uint64_t v5 = v9;
      }
      else
      {
        int v11 = 0;
        int v10 = 0;
        uint64_t v8 = "";
      }
    }
    else
    {
      int v11 = 0;
      int v10 = 0;
      uint64_t v5 = "";
      uint64_t v8 = "";
    }
    uint64_t v54 = "";
    int v55 = 0;
    uint64_t v51 = v4;
    uint64_t v52 = v5;
    int v53 = v10;
    int v49 = v8;
    int v50 = v11;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v44, (unint64_t *)&v54, (uint64_t)&v52, (uint64_t *)&v51, (uint64_t)&v49);
    uint64_t v14 = v43;
    unint64_t v43 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v13);
        if (v3 == 1) {
          goto LABEL_25;
        }
LABEL_56:
        for (uint64_t i = 1; i != v3; ++i)
        {
          MEMORY[0x1E4E442D0](&v43, [(NSArray *)a1 objectAtIndex:i]);
          uint64_t v31 = v43;
          if (v43 && *((_DWORD *)v43 + 1))
          {
            int v32 = JSC::Yarr::RegularExpression::match();
            int v33 = JSC::Yarr::RegularExpression::match();
            a1 = v42;
            uint64_t v31 = v43;
            uint64_t v34 = "\\b";
            if (v32 < 0) {
              long long v35 = "";
            }
            else {
              long long v35 = "\\b";
            }
            int v36 = ~(v32 >> 30) & 2;
            int v37 = ~(v33 >> 30) & 2;
            if (v33 < 0) {
              uint64_t v34 = "";
            }
          }
          else
          {
            int v37 = 0;
            int v36 = 0;
            long long v35 = "";
            uint64_t v34 = "";
          }
          uint64_t v54 = "|";
          int v55 = 1;
          uint64_t v51 = v31;
          uint64_t v52 = v35;
          int v53 = v36;
          int v49 = v34;
          int v50 = v37;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v44, (unint64_t *)&v54, (uint64_t)&v52, (uint64_t *)&v51, (uint64_t)&v49);
          uint64_t v39 = v43;
          unint64_t v43 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2) {
              WTF::StringImpl::destroy(v39, v38);
            }
            else {
              *(_DWORD *)v39 -= 2;
            }
          }
        }
LABEL_25:
        LOBYTE(v54) = 41;
        if (v45 && ((v15 = v46, v46 < *((_DWORD *)v45 + 1)) ? (BOOL v16 = v44 == 0) : (BOOL v16 = 0), v16))
        {
          int v40 = *((_DWORD *)v45 + 4);
          uint64_t v41 = *((void *)v45 + 1);
          ++v46;
          if ((v40 & 4) != 0) {
            *(unsigned char *)(v41 + v15) = 41;
          }
          else {
            *(_WORD *)(v41 + 2 * v15) = 41;
          }
        }
        else
        {
          WTF::StringBuilder::append();
        }
        uint64_t v17 = WTF::fastMalloc((WTF *)8);
        uint64_t v18 = v44;
        if (v44
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v44),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v44),
              (uint64_t v18 = v44) != 0))
        {
          char v19 = 0;
          *(_DWORD *)v18 += 2;
        }
        else
        {
          char v19 = 1;
        }
        JSC::Yarr::RegularExpression::RegularExpression();
        uint64_t v48 = v17;
        if ((v19 & 1) == 0)
        {
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::destroy(v18, v20);
            unsigned int v21 = v45;
            int v45 = 0;
            if (!v21) {
              goto LABEL_42;
            }
LABEL_40:
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::destroy(v21, v20);
              uint64_t v22 = v44;
              uint64_t v44 = 0;
              if (!v22) {
                goto LABEL_48;
              }
              goto LABEL_45;
            }
            *(_DWORD *)v21 -= 2;
LABEL_42:
            uint64_t v22 = v44;
            uint64_t v44 = 0;
            if (!v22)
            {
LABEL_48:
              [(id)qword_1EB3A97D8 insertObject:a1 atIndex:0];
              unsigned int v23 = dword_1EB3A97F4;
              if (dword_1EB3A97F4 == dword_1EB3A97F0)
              {
                uint64_t v24 = WTF::Vector<JSC::Yarr::RegularExpression *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1EB3A97F4 + 1, (unint64_t)&v48);
                unsigned int v23 = dword_1EB3A97F4;
              }
              else
              {
                uint64_t v24 = (char *)&v48;
              }
              uint64_t v25 = (void *)qword_1EB3A97E8;
              memmove((void *)(qword_1EB3A97E8 + 8), (const void *)qword_1EB3A97E8, 8 * v23);
              *uint64_t v25 = *(void *)v24;
              ++dword_1EB3A97F4;
              if ((unint64_t)[(id)qword_1EB3A97D8 count] >= 5)
              {
                [(id)qword_1EB3A97D8 removeObjectAtIndex:4];
                if (!dword_1EB3A97F4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1E1452504);
                }
                unint64_t v26 = *(JSC::Yarr::RegularExpression **)(qword_1EB3A97E8 + 8 * dword_1EB3A97F4-- - 8);
                if (v26)
                {
                  JSC::Yarr::RegularExpression::~RegularExpression(v26);
                  WTF::fastFree(v27, v28);
                }
              }
              return v48;
            }
LABEL_45:
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v20);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
            goto LABEL_48;
          }
          *(_DWORD *)v18 -= 2;
        }
        unsigned int v21 = v45;
        int v45 = 0;
        if (!v21) {
          goto LABEL_42;
        }
        goto LABEL_40;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v3 == 1) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
  unint64_t v12 = v2;
  if (v2 >= dword_1EB3A97F4)
  {
    __break(0xC471u);
    JUMPOUT(0x1E14524FCLL);
  }
  uint64_t v48 = *(void *)(qword_1EB3A97E8 + 8 * v2);
  if (v2)
  {
    [(id)qword_1EB3A97D8 removeObjectAtIndex:v2];
    memmove((void *)(qword_1EB3A97E8 + 8 * v12), (const void *)(qword_1EB3A97E8 + 8 * v12 + 8), qword_1EB3A97E8 + 8 * dword_1EB3A97F4 - (qword_1EB3A97E8 + 8 * v12 + 8));
    --dword_1EB3A97F4;
    goto LABEL_48;
  }
  return v48;
}

void sub_1E1452518(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)&a12, a2);
  _Unwind_Resume(a1);
}

unsigned char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *a4;
  uint64_t v10 = *((void *)a1 + 1);
  if ((!v10 && (uint64_t v10 = *(void *)a1) == 0 || (*(unsigned char *)(v10 + 16) & 4) != 0)
    && (!v9 || (*(unsigned char *)(v9 + 16) & 4) != 0))
  {
    uint64_t result = (unsigned char *)MEMORY[0x1E4E43E50]();
    if (!result) {
      return result;
    }
    uint64_t v31 = result;
    unint64_t v32 = a2[1];
    uint64_t v33 = v32;
    uint64_t v34 = *(unsigned char **)a3;
    size_t v35 = *(unsigned int *)(a3 + 8);
    uint64_t v36 = *a4;
    int v37 = *(unsigned char **)a5;
    size_t v38 = *(unsigned int *)(a5 + 8);
    if (v32)
    {
      uint64_t v39 = (unsigned char *)*a2;
      if (v32 != 1)
      {
        uint64_t result = memcpy(result, v39, a2[1]);
        int v40 = &v31[v33];
        if (!v35) {
          goto LABEL_54;
        }
LABEL_52:
        if (v35 != 1)
        {
          uint64_t result = memcpy(v40, v34, v35);
          int v77 = &v40[v35];
          if (v36)
          {
LABEL_55:
            char v78 = *(int8x16_t **)(v36 + 8);
            size_t v79 = *(unsigned int *)(v36 + 4);
            if ((*(unsigned char *)(v36 + 16) & 4) != 0)
            {
              if (v79)
              {
                if (v79 == 1) {
                  *int v77 = v78->i8[0];
                }
                else {
                  uint64_t result = memcpy(v77, v78, v79);
                }
              }
            }
            else
            {
              size_t v80 = &v77[v79];
              if (v79 < 0x10)
              {
                unint64_t v81 = (unint64_t)v77;
              }
              else
              {
                unint64_t v81 = (unint64_t)&v77[v79 & 0xFFFFFFF0];
                uint64_t v82 = (unsigned long long *)v77;
                do
                {
                  unsigned long long v83 = (unsigned __int128)vld2q_s8(v78->i8);
                  v78 += 2;
                  *v82++ = v83;
                }
                while (v82 != (unsigned long long *)v81);
              }
              if ((unsigned char *)v81 != v80)
              {
                unint64_t v109 = (unint64_t)&v31[v79 + v33 + v35 - v81];
                if (v109 < 8
                  || (v81 < (unint64_t)v78 + 2 * v109
                    ? (BOOL v110 = v78 >= (int8x16_t *)&v31[v79 + v35 + v33])
                    : (BOOL v110 = 1),
                      !v110))
                {
                  int8x16_t v112 = (unsigned char *)v81;
                  int8x16_t v113 = v78;
                  goto LABEL_108;
                }
                if (v109 >= 0x20)
                {
                  unint64_t v111 = v109 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v155 = v78 + 2;
                  unint64_t v156 = (int8x16_t *)(v81 + 16);
                  unint64_t v157 = v109 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    int8x16_t v159 = v155[-2];
                    int8x16_t v158 = v155[-1];
                    int8x16_t v161 = *v155;
                    int8x16_t v160 = v155[1];
                    v155 += 4;
                    v156[-1] = vuzp1q_s8(v159, v158);
                    *unint64_t v156 = vuzp1q_s8(v161, v160);
                    v156 += 2;
                    v157 -= 32;
                  }
                  while (v157);
                  if (v109 == v111) {
                    goto LABEL_135;
                  }
                  if ((v109 & 0x18) == 0)
                  {
                    int8x16_t v113 = (int8x16_t *)((char *)v78 + 2 * v111);
                    int8x16_t v112 = (unsigned char *)(v81 + v111);
                    do
                    {
LABEL_108:
                      char v114 = v113->i8[0];
                      int8x16_t v113 = (int8x16_t *)((char *)v113 + 2);
                      *v112++ = v114;
                    }
                    while (v112 != v80);
                    goto LABEL_135;
                  }
                }
                else
                {
                  unint64_t v111 = 0;
                }
                int8x16_t v112 = (unsigned char *)(v81 + (v109 & 0xFFFFFFFFFFFFFFF8));
                int8x16_t v113 = (int8x16_t *)((char *)v78 + 2 * (v109 & 0xFFFFFFFFFFFFFFF8));
                v162 = (int16x8_t *)((char *)v78 + 2 * v111);
                v163 = (int8x8_t *)(v81 + v111);
                unint64_t v164 = v111 - (v109 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  int16x8_t v165 = *v162++;
                  *v163++ = vmovn_s16(v165);
                  v164 += 8;
                }
                while (v164);
                if (v109 != (v109 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_108;
                }
              }
            }
LABEL_135:
            uint64_t v84 = *(unsigned int *)(v36 + 4);
            if (!v38) {
              return result;
            }
            goto LABEL_136;
          }
LABEL_61:
          uint64_t v84 = 0;
          if (!v38) {
            return result;
          }
LABEL_136:
          uint64_t result = &v77[v84];
          if (v38 == 1)
          {
            unsigned char *result = *v37;
          }
          else
          {
            return memcpy(result, v37, v38);
          }
          return result;
        }
        unsigned char *v40 = *v34;
LABEL_54:
        int v77 = &v40[v35];
        if (v36) {
          goto LABEL_55;
        }
        goto LABEL_61;
      }
      unsigned char *result = *v39;
    }
    int v40 = &result[v32];
    if (!v35) {
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  uint64_t result = (unsigned char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result) {
    return result;
  }
  unint64_t v12 = result;
  unint64_t v13 = *a2;
  unint64_t v14 = a2[1];
  unint64_t v15 = *(void *)a3;
  uint64_t v16 = *(unsigned int *)(a3 + 8);
  uint64_t v17 = *a4;
  unint64_t v18 = *(void *)a5;
  uint64_t v19 = *(unsigned int *)(a5 + 8);
  unint64_t v20 = (unint64_t)&result[2 * v14];
  if ((v14 & 0xFFFFFFC0) == 0)
  {
    unint64_t v21 = (unint64_t)result;
    uint64_t v30 = v14;
    if (result == (unsigned char *)v20) {
      goto LABEL_29;
    }
LABEL_19:
    unint64_t v41 = (unint64_t)&result[2 * v30 - v21 - 2];
    if (v41 < 0xE
      || (v21 < v13 + (v41 >> 1) + 1 ? (BOOL v42 = v13 >= (v41 & 0xFFFFFFFFFFFFFFFELL) + v21 + 2) : (BOOL v42 = 1), !v42))
    {
      int v45 = (_WORD *)v21;
      unsigned int v46 = (unsigned __int8 *)v13;
      goto LABEL_28;
    }
    uint64_t v43 = (v41 >> 1) + 1;
    if (v41 >= 0x3E)
    {
      unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFE0;
      v115 = (uint8x8_t *)(v13 + 16);
      unint64_t v116 = (uint16x8_t *)(v21 + 32);
      unint64_t v117 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v118 = *(uint8x16_t *)v115[-2].i8;
        uint16x8_t v119 = vmovl_u8(*v115);
        uint16x8_t v120 = vmovl_high_u8(*(uint8x16_t *)v115->i8);
        v116[-2] = vmovl_u8(*(uint8x8_t *)v118.i8);
        v116[-1] = vmovl_high_u8(v118);
        *unint64_t v116 = v119;
        v116[1] = v120;
        v116 += 4;
        v115 += 4;
        v117 -= 32;
      }
      while (v117);
      if (v43 == v44) {
        goto LABEL_29;
      }
      if ((v43 & 0x18) == 0)
      {
        unsigned int v46 = (unsigned __int8 *)(v13 + v44);
        int v45 = (_WORD *)(v21 + 2 * v44);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v44 = 0;
    }
    int v45 = (_WORD *)(v21 + 2 * (v43 & 0xFFFFFFFFFFFFFFF8));
    unsigned int v46 = (unsigned __int8 *)(v13 + (v43 & 0xFFFFFFFFFFFFFFF8));
    __int16 v121 = (uint8x8_t *)(v13 + v44);
    unint64_t v122 = (uint16x8_t *)(v21 + 2 * v44);
    unint64_t v123 = v44 - (v43 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v124 = *v121++;
      *v122++ = vmovl_u8(v124);
      v123 += 8;
    }
    while (v123);
    if (v43 == (v43 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_29;
    }
    do
    {
LABEL_28:
      __int16 v47 = *v46++;
      *v45++ = v47;
    }
    while (v45 != (_WORD *)v20);
    goto LABEL_29;
  }
  unint64_t v21 = (unint64_t)&result[2 * (v14 & 0xFFFFFFC0)];
  long long v22 = 0uLL;
  unsigned int v23 = result;
  do
  {
    v167.val[0] = *(int8x16_t *)v13;
    int8x16_t v24 = *(int8x16_t *)(v13 + 16);
    v171.val[0] = *(int8x16_t *)(v13 + 32);
    long long v25 = *(_OWORD *)(v13 + 48);
    v13 += 64;
    long long v26 = v25;
    v171.val[1] = 0uLL;
    v175.val[0] = v24;
    v167.val[1] = 0uLL;
    uint64_t v27 = v23;
    vst2q_s8(v27, v167);
    v27 += 32;
    v175.val[1] = 0uLL;
    vst2q_s8(v27, v175);
    uint64_t v28 = v23 + 64;
    vst2q_s8(v28, v171);
    uint64_t v29 = v23 + 96;
    vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
    v23 += 128;
  }
  while (v23 != (char *)v21);
  uint64_t v30 = v14;
  if (v21 != v20) {
    goto LABEL_19;
  }
LABEL_29:
  uint64_t v48 = (char *)(v20 + 2 * v16);
  if ((v16 & 0xFFFFFFC0) != 0)
  {
    unint64_t v49 = v20 + 2 * (v16 & 0xFFFFFFC0);
    long long v50 = 0uLL;
    do
    {
      v168.val[0] = *(int8x16_t *)v15;
      int8x16_t v51 = *(int8x16_t *)(v15 + 16);
      v172.val[0] = *(int8x16_t *)(v15 + 32);
      long long v52 = *(_OWORD *)(v15 + 48);
      v15 += 64;
      long long v53 = v52;
      v172.val[1] = 0uLL;
      v176.val[0] = v51;
      v168.val[1] = 0uLL;
      uint64_t v54 = (char *)v20;
      vst2q_s8(v54, v168);
      v54 += 32;
      v176.val[1] = 0uLL;
      vst2q_s8(v54, v176);
      int v55 = (char *)(v20 + 64);
      vst2q_s8(v55, v172);
      uint64_t v56 = (char *)(v20 + 96);
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      v20 += 128;
    }
    while (v20 != v49);
    unint64_t v20 = v49;
  }
  if ((char *)v20 != v48)
  {
    unint64_t v57 = (unint64_t)&result[2 * v30 + 2 * v16 - v20 - 2];
    if (v57 < 0xE || v20 < v15 + (v57 >> 1) + 1 && v15 < (v57 & 0xFFFFFFFFFFFFFFFELL) + v20 + 2)
    {
      uint64_t v58 = (char *)v20;
      unint64_t v59 = (unsigned __int8 *)v15;
      goto LABEL_38;
    }
    uint64_t v85 = (v57 >> 1) + 1;
    if (v57 >= 0x3E)
    {
      unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v125 = (uint8x8_t *)(v15 + 16);
      long long v126 = (uint16x8_t *)(v20 + 32);
      unint64_t v127 = v85 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v128 = *(uint8x16_t *)v125[-2].i8;
        uint16x8_t v129 = vmovl_u8(*v125);
        uint16x8_t v130 = vmovl_high_u8(*(uint8x16_t *)v125->i8);
        v126[-2] = vmovl_u8(*(uint8x8_t *)v128.i8);
        v126[-1] = vmovl_high_u8(v128);
        *long long v126 = v129;
        v126[1] = v130;
        v126 += 4;
        v125 += 4;
        v127 -= 32;
      }
      while (v127);
      if (v85 == v86) {
        goto LABEL_39;
      }
      if ((v85 & 0x18) == 0)
      {
        unint64_t v59 = (unsigned __int8 *)(v15 + v86);
        uint64_t v58 = (char *)(v20 + 2 * v86);
        do
        {
LABEL_38:
          __int16 v60 = *v59++;
          *(_WORD *)uint64_t v58 = v60;
          v58 += 2;
        }
        while (v58 != v48);
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v86 = 0;
    }
    uint64_t v58 = (char *)(v20 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v59 = (unsigned __int8 *)(v15 + (v85 & 0xFFFFFFFFFFFFFFF8));
    v131 = (uint8x8_t *)(v15 + v86);
    v132 = (uint16x8_t *)(v20 + 2 * v86);
    unint64_t v133 = v86 - (v85 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v134 = *v131++;
      *v132++ = vmovl_u8(v134);
      v133 += 8;
    }
    while (v133);
    if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_38;
    }
  }
LABEL_39:
  if (!v17)
  {
    uint64_t v63 = 0;
    unint64_t v64 = (unint64_t)v48;
    int v65 = &v48[2 * v19];
    uint64_t v66 = v19 & 0xFFFFFFC0;
    if ((v19 & 0xFFFFFFC0) != 0) {
      goto LABEL_82;
    }
    goto LABEL_85;
  }
  uint64_t v61 = *(int8x16_t **)(v17 + 8);
  uint64_t v62 = *(unsigned int *)(v17 + 4);
  if ((*(unsigned char *)(v17 + 16) & 4) != 0)
  {
    long long v67 = &v48[2 * v62];
    if (v62 < 0x40)
    {
      unint64_t v68 = (unint64_t)v48;
      if (v48 == v67) {
        goto LABEL_81;
      }
    }
    else
    {
      unint64_t v68 = (unint64_t)&v48[2 * (v62 & 0xFFFFFFC0)];
      long long v69 = 0uLL;
      int v70 = v48;
      do
      {
        v169.val[0] = *v61;
        int8x16_t v71 = v61[1];
        v173.val[0] = v61[2];
        int8x16_t v72 = v61[3];
        v61 += 4;
        int8x16_t v73 = v72;
        v173.val[1] = 0uLL;
        v177.val[0] = v71;
        v169.val[1] = 0uLL;
        int v74 = v70;
        vst2q_s8(v74, v169);
        v74 += 32;
        v177.val[1] = 0uLL;
        vst2q_s8(v74, v177);
        unint64_t v75 = v70 + 64;
        vst2q_s8(v75, v173);
        int8x16_t v76 = v70 + 96;
        vst2q_s8(v76, *(int8x16x2_t *)(&v69 - 1));
        v70 += 128;
      }
      while (v70 != (char *)v68);
      if ((char *)v68 == v67) {
        goto LABEL_81;
      }
    }
    unint64_t v87 = (unint64_t)&result[2 * v30 + 2 * v62 + 2 * v16 - v68 - 2];
    if (v87 < 0xE
      || (v68 < (unint64_t)v61->u64 + (v87 >> 1) + 1
        ? (BOOL v88 = (unint64_t)v61 >= (v87 & 0xFFFFFFFFFFFFFFFELL) + v68 + 2)
        : (BOOL v88 = 1),
          !v88))
    {
      long long v91 = (char *)v68;
      long long v92 = v61;
      goto LABEL_78;
    }
    uint64_t v89 = (v87 >> 1) + 1;
    if (v87 >= 0x3E)
    {
      unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFE0;
      long long v145 = (uint8x8_t *)&v61[1];
      v146 = (uint16x8_t *)(v68 + 32);
      unint64_t v147 = v89 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v148 = *(uint8x16_t *)v145[-2].i8;
        uint16x8_t v149 = vmovl_u8(*v145);
        uint16x8_t v150 = vmovl_high_u8(*(uint8x16_t *)v145->i8);
        v146[-2] = vmovl_u8(*(uint8x8_t *)v148.i8);
        v146[-1] = vmovl_high_u8(v148);
        uint16x8_t *v146 = v149;
        v146[1] = v150;
        v146 += 4;
        v145 += 4;
        v147 -= 32;
      }
      while (v147);
      if (v89 == v90) {
        goto LABEL_81;
      }
      if ((v89 & 0x18) == 0)
      {
        long long v92 = (int8x16_t *)((char *)v61 + v90);
        long long v91 = (char *)(v68 + 2 * v90);
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v90 = 0;
    }
    long long v91 = (char *)(v68 + 2 * (v89 & 0xFFFFFFFFFFFFFFF8));
    long long v92 = (int8x16_t *)((char *)v61 + (v89 & 0xFFFFFFFFFFFFFFF8));
    v151 = (uint8x8_t *)&v61->i8[v90];
    v152 = (uint16x8_t *)(v68 + 2 * v90);
    unint64_t v153 = v90 - (v89 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v154 = *v151++;
      *v152++ = vmovl_u8(v154);
      v153 += 8;
    }
    while (v153);
    if (v89 == (v89 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_81;
    }
    do
    {
LABEL_78:
      __int16 v93 = v92->u8[0];
      long long v92 = (int8x16_t *)((char *)v92 + 1);
      *(_WORD *)long long v91 = v93;
      v91 += 2;
    }
    while (v91 != v67);
    goto LABEL_81;
  }
  if (v62)
  {
    if (v62 == 1) {
      *(_WORD *)uint64_t v48 = v61->i16[0];
    }
    else {
      uint64_t result = memcpy(v48, v61, 2 * v62);
    }
  }
LABEL_81:
  uint64_t v63 = *(unsigned int *)(v17 + 4);
  unint64_t v64 = (unint64_t)&v48[2 * v63];
  int v65 = (char *)(v64 + 2 * v19);
  uint64_t v66 = v19 & 0xFFFFFFC0;
  if ((v19 & 0xFFFFFFC0) != 0)
  {
LABEL_82:
    unint64_t v94 = v64 + 2 * v66;
    long long v95 = 0uLL;
    do
    {
      v170.val[0] = *(int8x16_t *)v18;
      int8x16_t v96 = *(int8x16_t *)(v18 + 16);
      v174.val[0] = *(int8x16_t *)(v18 + 32);
      long long v97 = *(_OWORD *)(v18 + 48);
      v18 += 64;
      long long v98 = v97;
      v174.val[1] = 0uLL;
      v178.val[0] = v96;
      v170.val[1] = 0uLL;
      uint64_t v99 = (char *)v64;
      vst2q_s8(v99, v170);
      v99 += 32;
      v178.val[1] = 0uLL;
      vst2q_s8(v99, v178);
      unint64_t v100 = (char *)(v64 + 64);
      vst2q_s8(v100, v174);
      BOOL v101 = (char *)(v64 + 96);
      vst2q_s8(v101, *(int8x16x2_t *)(&v95 - 1));
      v64 += 128;
    }
    while (v64 != v94);
    unint64_t v64 = v94;
  }
LABEL_85:
  if ((char *)v64 == v65) {
    return result;
  }
  unint64_t v102 = (unint64_t)&v12[2 * v63 + 2 * v30 + 2 * v16 + 2 * v19 - v64 - 2];
  if (v102 < 0xE
    || (v64 < v18 + (v102 >> 1) + 1 ? (BOOL v103 = v18 >= (v102 & 0xFFFFFFFFFFFFFFFELL) + v64 + 2) : (BOOL v103 = 1), !v103))
  {
    unint64_t v106 = (char *)v64;
    uint64_t v107 = (unsigned __int8 *)v18;
    goto LABEL_95;
  }
  uint64_t v104 = (v102 >> 1) + 1;
  if (v102 >= 0x3E)
  {
    unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFE0;
    BOOL v135 = (uint8x8_t *)(v18 + 16);
    uint64_t v136 = (uint16x8_t *)(v64 + 32);
    unint64_t v137 = v104 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      uint8x16_t v138 = *(uint8x16_t *)v135[-2].i8;
      uint16x8_t v139 = vmovl_u8(*v135);
      uint16x8_t v140 = vmovl_high_u8(*(uint8x16_t *)v135->i8);
      v136[-2] = vmovl_u8(*(uint8x8_t *)v138.i8);
      v136[-1] = vmovl_high_u8(v138);
      *uint64_t v136 = v139;
      v136[1] = v140;
      v136 += 4;
      v135 += 4;
      v137 -= 32;
    }
    while (v137);
    if (v104 == v105) {
      return result;
    }
    if ((v104 & 0x18) == 0)
    {
      uint64_t v107 = (unsigned __int8 *)(v18 + v105);
      unint64_t v106 = (char *)(v64 + 2 * v105);
      do
      {
LABEL_95:
        __int16 v108 = *v107++;
        *(_WORD *)unint64_t v106 = v108;
        v106 += 2;
      }
      while (v106 != v65);
      return result;
    }
  }
  else
  {
    unint64_t v105 = 0;
  }
  unint64_t v106 = (char *)(v64 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v107 = (unsigned __int8 *)(v18 + (v104 & 0xFFFFFFFFFFFFFFF8));
  v141 = (uint8x8_t *)(v18 + v105);
  uint64_t v142 = (uint16x8_t *)(v64 + 2 * v105);
  unint64_t v143 = v105 - (v104 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    uint8x8_t v144 = *v141++;
    *v142++ = vmovl_u8(v144);
    v143 += 8;
  }
  while (v143);
  if (v104 != (v104 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_95;
  }
  return result;
}

char *WTF::Vector<JSC::Yarr::RegularExpression *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = (char *)qword_1EB3A97E8;
  if (qword_1EB3A97E8 <= a2)
  {
    uint64_t v4 = dword_1EB3A97F4;
    if (qword_1EB3A97E8 + 8 * (unint64_t)dword_1EB3A97F4 > a2)
    {
      unint64_t v5 = dword_1EB3A97F0 + ((unint64_t)dword_1EB3A97F0 >> 2);
      if (v5 >= 0x10) {
        unint64_t v6 = v5 + 1;
      }
      else {
        unint64_t v6 = 16;
      }
      if (v6 <= a1) {
        unint64_t v7 = a1;
      }
      else {
        unint64_t v7 = v6;
      }
      if (v7 <= dword_1EB3A97F0)
      {
        uint64_t v8 = (char *)qword_1EB3A97E8;
        return &v8[8 * ((uint64_t)(v2 - (void)v3) >> 3)];
      }
      if (!(v7 >> 29))
      {
        uint64_t v8 = (char *)WTF::fastMalloc((WTF *)(8 * v7));
        dword_1EB3A97F0 = v7;
        qword_1EB3A97E8 = (uint64_t)v8;
        memcpy(v8, v3, 8 * v4);
        if (v3)
        {
          if (v8 == v3)
          {
            qword_1EB3A97E8 = 0;
            dword_1EB3A97F0 = 0;
          }
          WTF::fastFree((WTF *)v3, v9);
          uint64_t v8 = (char *)qword_1EB3A97E8;
        }
        return &v8[8 * ((uint64_t)(v2 - (void)v3) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1E1453078);
    }
  }
  unint64_t v10 = dword_1EB3A97F0 + ((unint64_t)dword_1EB3A97F0 >> 2);
  if (v10 >= 0x10) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = 16;
  }
  if (v11 <= a1) {
    unint64_t v12 = a1;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 > dword_1EB3A97F0)
  {
    if (v12 >> 29) {
      goto LABEL_30;
    }
    uint64_t v13 = dword_1EB3A97F4;
    unint64_t v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    dword_1EB3A97F0 = v12;
    qword_1EB3A97E8 = (uint64_t)v14;
    memcpy(v14, v3, 8 * v13);
    if (v3)
    {
      if ((char *)qword_1EB3A97E8 == v3)
      {
        qword_1EB3A97E8 = 0;
        dword_1EB3A97F0 = 0;
      }
      WTF::fastFree((WTF *)v3, v15);
    }
  }
  return (char *)v2;
}

__CFString *matchLabelsAgainstString(NSArray *a1, const WTF::String *a2)
{
  if (!a2 || !*((_DWORD *)a2 + 1)) {
    return 0;
  }
  *(_DWORD *)a2 += 2;
  JSC::Yarr::RegularExpression::RegularExpression();
  JSC::Yarr::replace();
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)&v17);
  WTF::StringImpl::replace();
  uint64_t v4 = a2;
  uint64_t v16 = v17;
  if (*(_DWORD *)v4 == 2) {
    WTF::StringImpl::destroy(v4, v3);
  }
  else {
    *(_DWORD *)v4 -= 2;
  }
  unint64_t v6 = (JSC::Yarr::RegularExpression *)regExpForLabels(a1);
  int v7 = -1;
  int v8 = -1;
  while (1)
  {
    int v10 = JSC::Yarr::RegularExpression::match();
    if (v10 == -1) {
      break;
    }
    int v11 = JSC::Yarr::RegularExpression::matchedLength(v6);
    if (v11 >= v8) {
      int v7 = v10;
    }
    if (v11 > v8) {
      int v8 = v11;
    }
  }
  if (v7 == -1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = v16;
    if (v16) {
      goto LABEL_27;
    }
    return 0;
  }
  unint64_t v12 = v16;
  if (!v16) {
    return &stru_1F3C7DA90;
  }
  if (!v7 && *((_DWORD *)v16 + 1) <= v8)
  {
    *(_DWORD *)v16 += 2;
    goto LABEL_23;
  }
  WTF::StringImpl::substring(v16);
  unint64_t v12 = v17;
  if (v17)
  {
LABEL_23:
    uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
    unint64_t v14 = v16;
    goto LABEL_27;
  }
  uint64_t v13 = &stru_1F3C7DA90;
  unint64_t v14 = v16;
LABEL_27:
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy(v14, v9);
  }
  else {
    *(_DWORD *)v14 -= 2;
  }
  return v13;
}

void sub_1E14532EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, a2);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E145345C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a9 & 0x8000000000000) != 0)
  {
    int v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebInspectorClient::sendMessageToFrontend(WebInspectorClient *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171DE8](*(void *)(*((void *)this + 5) + 64), a2);
}

uint64_t non-virtual thunk to'WebInspectorClient::sendMessageToFrontend(WebInspectorClient *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171DE8](*(void *)(*((void *)this + 4) + 64), a2);
}

void WebInspectorClient::WebInspectorClient(WebInspectorClient *this, WebView *a2)
{
  *(void *)this = &unk_1F3C7CF80;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1F3C7D040;
  *((void *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  uint64_t v4 = [[WebNodeHighlighter alloc] initWithInspectedWebView:a2];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v4;
}

void sub_1E14535D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebInspectorClient::~WebInspectorClient(WebInspectorClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
    unint64_t v5 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unint64_t v5 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
LABEL_7:
  objc_destroyWeak((id *)this + 2);
}

{
  uint64_t v3;
  atomic_uint *v4;
  const void *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (!v4 || atomic_fetch_add(v4, 0xFFFFFFFF) != 1)
  {
    unint64_t v5 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  atomic_store(1u, (unsigned int *)v4);
  WTF::fastFree((WTF *)v4, a2);
  unint64_t v5 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
LABEL_7:
  objc_destroyWeak((id *)this + 2);
  WTF::fastFree(this, v6);
}

void non-virtual thunk to'WebInspectorClient::~WebInspectorClient(WebInspectorClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v4 || atomic_fetch_add(v4, 0xFFFFFFFF) != 1)
  {
    unint64_t v5 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  atomic_store(1u, (unsigned int *)v4);
  WTF::fastFree((WTF *)v4, a2);
  unint64_t v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
LABEL_7:
  objc_destroyWeak((id *)this + 1);
}

{
  uint64_t v3;
  atomic_uint *v4;
  const void *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v4 || atomic_fetch_add(v4, 0xFFFFFFFF) != 1)
  {
    unint64_t v5 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  atomic_store(1u, (unsigned int *)v4);
  WTF::fastFree((WTF *)v4, a2);
  unint64_t v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
LABEL_7:
  objc_destroyWeak((id *)this + 1);
  WTF::fastFree((WebInspectorClient *)((char *)this - 8), v6);
}

uint64_t WebInspectorClient::openLocalFrontend(WebInspectorClient *this, InspectorController *a2)
{
  return 0;
}

uint64_t WebInspectorClient::highlight(id *this)
{
  return [this[3] highlight];
}

uint64_t WebInspectorClient::hideHighlight(id *this)
{
  return [this[3] hideHighlight];
}

void WebInspectorClient::showInspectorIndication(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained setShowingInspectorIndication:1];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_1E145390C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebInspectorClient::hideInspectorIndication(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained setShowingInspectorIndication:0];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_1E1453978(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebInspectorClient::didSetSearchingForNode(id *this, int a2)
{
  uint64_t v3 = &WebInspectorDidStartSearchingForNode;
  if (!a2) {
    uint64_t v3 = &WebInspectorDidStopSearchingForNode;
  }
  uint64_t v4 = *v3;
  WTF::RunLoop::main((WTF::RunLoop *)this);
  if (v4) {
    CFRetain(v4);
  }
  id WeakRetained = objc_loadWeakRetained(this + 2);
  unint64_t v6 = (const void *)objc_msgSend(WeakRetained, "inspector", v4);
  int v7 = v6;
  if (v6) {
    CFRetain(v6);
  }
  int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v8 = &unk_1F3C7D070;
  v8[1] = v4;
  unsigned char v8[2] = v7;
  uint64_t v9 = v8;
  WTF::RunLoop::dispatch();
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_1E1453A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = a12;
  a12 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  -[_WebSafeAsyncForwarder forwardInvocation:]::$_5::~$_5((uint64_t)&a9);
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t WebInspectorClient::overridesShowPaintRects(WebInspectorClient *this)
{
  return 1;
}

uint64_t WebCore::InspectorClient::paintRectCount(WebCore::InspectorClient *this)
{
  return 0;
}

uint64_t WebInspectorClient::allowRemoteInspectionToPageDirectly(WebInspectorClient *this)
{
  return 1;
}

uint64_t WebInspectorClient::connectionType(WebInspectorClient *this)
{
  return 1;
}

uint64_t non-virtual thunk to'WebInspectorClient::connectionType(WebInspectorClient *this)
{
  return 1;
}

void *WTF::Detail::CallableWrapper<WebInspectorClient::didSetSearchingForNode(BOOL)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C7D070;
  unint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebInspectorClient::didSetSearchingForNode(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C7D070;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    CFRelease(v4);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebInspectorClient::didSetSearchingForNode(BOOL)::$_0,void>::call(uint64_t a1)
{
  unint64_t v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  return [v2 postNotificationName:v3 object:v4];
}

JSValueRef jsPDFDocPrint(JSContextRef ctx, OpaqueJSValue *a2, JSValueRef value, unint64_t a4, const OpaqueJSValue *const *a5, const OpaqueJSValue **a6)
{
  {
    if (!JSValueIsObjectOfClass(ctx, value, (JSClassRef)jsPDFDocClass(void)::jsPDFDocClass)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  jsPDFDocClass(void)::jsPDFDocClass = (uint64_t)JSClassCreate(&jsPDFDocClass(void)::jsPDFDocClassDefinition);
  if (JSValueIsObjectOfClass(ctx, value, (JSClassRef)jsPDFDocClass(void)::jsPDFDocClass))
  {
LABEL_3:
    Private = JSObjectGetPrivate(value);
    CallUIDelegate((WebView *)objc_msgSend((id)objc_msgSend(Private, "webFrame"), "webView"), (objc_selector *)sel_webView_printFrameView_, (objc_object *)objc_msgSend((id)objc_msgSend(Private, "webFrame"), "frameView"));
  }
LABEL_4:
  return JSValueMakeUndefined(ctx);
}

CFTypeRef jsPDFDocInitialize(const OpaqueJSContext *a1, JSObjectRef object)
{
  Private = JSObjectGetPrivate(object);
  return CFRetain(Private);
}

void jsPDFDocFinalize(OpaqueJSValue *a1)
{
  Private = JSObjectGetPrivate(a1);
  CFRelease(Private);
}

uint64_t WTF::NeverDestroyed<WebKit::LogChannels,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v2 = (WTF **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this - 16) = 0;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 24) = 1;
  *(void *)a1 = &unk_1F3C7D0B8;
  uint64_t v4 = (_OWORD *)WTF::fastMalloc((WTF *)0xC0);
  v4[6] = xmmword_1E6D97EC8;
  v4[7] = *(_OWORD *)&off_1E6D97ED8;
  v4[4] = xmmword_1E6D97EA8;
  v4[5] = *(_OWORD *)&off_1E6D97EB8;
  v4[10] = xmmword_1E6D97F08;
  v4[11] = *(_OWORD *)&off_1E6D97F18;
  v4[8] = xmmword_1E6D97EE8;
  v4[9] = *(_OWORD *)&off_1E6D97EF8;
  *uint64_t v4 = constinit;
  v4[1] = *(_OWORD *)&off_1E6D97E78;
  v4[2] = xmmword_1E6D97E88;
  v4[3] = *(_OWORD *)&off_1E6D97E98;
  unint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 16) = 0;
    WTF::fastFree(v5, v3);
  }
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + ++*(_DWORD *)(this - 16) = 0x1800000018;
  return a1;
}

void sub_1E14547DC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v4, a2);
  *(void *)uint64_t v2 = v3;
  int v7 = *(WTF **)(v2 + 8);
  if (v7)
  {
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + ++*(_DWORD *)(this - 16) = 0;
    WTF::fastFree(v7, v6);
  }
  _Unwind_Resume(a1);
}

void ReportDiscardedDelegateException(objc_selector *a1, objc_object *a2)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  Name = sel_getName((SEL)a1);
  if (isKindOfClass) {
    NSLog(&cfstr_WebkitDiscarde.isa, Name, [(objc_object *)a2 name], [(objc_object *)a2 reason]);
  }
  else {
    NSLog(&cfstr_WebkitDiscarde_0.isa, Name, a2);
  }
}

void WebKit::LogChannels::~LogChannels(WebKit::LogChannels *this, void *a2)
{
  *(void *)this = &unk_1F3C7D0E0;
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3C7D0E0;
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x1E4E4B240);
}

void WebKit::LogChannels::logLevelString(WebKit::LogChannels *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"WebKitLogging");
  JUMPOUT(0x1E4E442D0);
}

void sub_1E1454B0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebLocalizedStringInternal(char *cStr)
{
  uint64_t v1 = (WebCore *)CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  WebCore::copyLocalizedString((uint64_t *)&arg, v1, v2);
  if (!arg)
  {
    CFTypeRef v3 = 0;
    if (!v1) {
      return v3;
    }
    goto LABEL_3;
  }
  CFAutorelease(arg);
  CFTypeRef v3 = arg;
  if (v1) {
LABEL_3:
  }
    CFRelease(v1);
  return v3;
}

void sub_1E1454C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    if (!v10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebMediaKeySystemClient::requestMediaKeySystem(WebMediaKeySystemClient *this, WebCore::MediaKeySystemRequest *a2)
{
  return WebCore::MediaKeySystemRequest::allow(a2);
}

void WebMediaKeySystemClient::~WebMediaKeySystemClient(WebMediaKeySystemClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *(void *)(v3 + 8) = 0;
    uint64_t v4 = (unsigned int *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (v4)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
  }
}

void WebMediaKeySystemClient::~WebMediaKeySystemClient(unsigned int **this, void *a2)
{
  CFStringRef v2 = (WebMediaKeySystemClient *)this;
  uint64_t v3 = this[1];
  if (v3)
  {
    *((void *)v3 + objc_destroyWeak(this + 1) = 0;
    uint64_t v4 = this[1];
    *((void *)v2 + objc_destroyWeak(this + 1) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      this = (unsigned int **)v2;
    }
    else
    {
      this = (unsigned int **)v2;
    }
  }
  else
  {
    this[1] = 0;
  }
  WTF::fastFree((WTF *)this, a2);
}

void sub_1E1454F30(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1455060(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1455134(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14551DC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1455C18(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1455E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void layerPathWithHole(CAShapeLayer *a1, const WebCore::FloatQuad *a2, const WebCore::FloatQuad *this)
{
  BOOL v6 = *(float *)a2 == *(float *)this && *((float *)a2 + 1) == *((float *)this + 1);
  if (v6
    && (*((float *)a2 + 2) == *((float *)this + 2) ? (BOOL v7 = *((float *)a2 + 3) == *((float *)this + 3)) : (BOOL v7 = 0),
        v7
     && (*((float *)a2 + 4) == *((float *)this + 4) ? (BOOL v8 = *((float *)a2 + 5) == *((float *)this + 5)) : (BOOL v8 = 0),
         v8
      && (*((float *)a2 + 6) == *((float *)this + 6) ? (BOOL v9 = *((float *)a2 + 7) == *((float *)this + 7)) : (BOOL v9 = 0), v9)))
    || WebCore::FloatQuad::containsQuad(this, a2))
  {
    [(CAShapeLayer *)a1 setPath:0];
    return;
  }
  if (WebCore::FloatQuad::containsQuad(a2, this))
  {
    float v10 = *(float *)this;
    float v11 = *((float *)this + 1);
    float v12 = *((float *)this + 2);
    float v13 = *((float *)this + 3);
    float v14 = *((float *)this + 4);
    float v15 = *((float *)this + 5);
    float v16 = *((float *)this + 6);
    float v17 = *((float *)this + 7);
    goto LABEL_160;
  }
  long long v18 = *((_OWORD *)a2 + 1);
  long long v43 = *(_OWORD *)a2;
  long long v44 = v18;
  long long v19 = *((_OWORD *)this + 1);
  long long v41 = *(_OWORD *)this;
  long long v42 = v19;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v21 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)&v41);
  if (v21) {
    goto LABEL_41;
  }
  *(void *)unint64_t v49 = 0;
  if (!WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v43 + 8), (const WebCore::FloatPoint *)&v41, (const WebCore::FloatPoint *)((char *)&v42 + 8), (const WebCore::FloatPoint *)v49, v20))goto LABEL_41; {
  if (*(float *)&v43 >= *((float *)&v43 + 2))
  }
  {
    if (v49[0] > *(float *)&v43 || v49[0] < *((float *)&v43 + 2)) {
      goto LABEL_41;
    }
  }
  else if (v49[0] > *((float *)&v43 + 2) || v49[0] < *(float *)&v43)
  {
    goto LABEL_41;
  }
  if (*((float *)&v43 + 1) >= *((float *)&v43 + 3))
  {
    if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v43 + 3)) {
      goto LABEL_41;
    }
  }
  else if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v43 + 1))
  {
LABEL_41:
    int v22 = 0;
    uint64_t v48 = v41;
    goto LABEL_42;
  }
  uint64_t v48 = *(void *)v49;
  int v22 = 1;
LABEL_42:
  int v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)((char *)&v41 + 8));
  if (v24) {
    goto LABEL_57;
  }
  *(void *)unint64_t v49 = 0;
  if (!WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v43 + 8), (const WebCore::FloatPoint *)((char *)&v41 + 8), (const WebCore::FloatPoint *)&v42, (const WebCore::FloatPoint *)v49, v23))goto LABEL_57; {
  if (*(float *)&v43 >= *((float *)&v43 + 2))
  }
  {
    if (v49[0] > *(float *)&v43 || v49[0] < *((float *)&v43 + 2)) {
      goto LABEL_57;
    }
  }
  else if (v49[0] > *((float *)&v43 + 2) || v49[0] < *(float *)&v43)
  {
    goto LABEL_57;
  }
  if (*((float *)&v43 + 1) >= *((float *)&v43 + 3))
  {
    if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v43 + 3)) {
      goto LABEL_57;
    }
  }
  else if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v43 + 1))
  {
LABEL_57:
    int v40 = 0;
    uint64_t v47 = *((void *)&v41 + 1);
    goto LABEL_58;
  }
  uint64_t v47 = *(void *)v49;
  int v40 = 1;
LABEL_58:
  int v26 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)&v42);
  if (v26) {
    goto LABEL_73;
  }
  *(void *)unint64_t v49 = 0;
  if (!WebCore::findIntersection((WebCore *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)((char *)&v41 + 8), (const WebCore::FloatPoint *)&v42, (const WebCore::FloatPoint *)v49, v25))goto LABEL_73; {
  if (*((float *)&v44 + 2) >= *(float *)&v44)
  }
  {
    if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v44) {
      goto LABEL_73;
    }
  }
  else if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v44 + 2))
  {
    goto LABEL_73;
  }
  if (*((float *)&v44 + 3) >= *((float *)&v44 + 1))
  {
    if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v44 + 1)) {
      goto LABEL_73;
    }
LABEL_72:
    int v27 = v24;
    uint64_t v28 = a1;
    int v29 = v21;
    int v30 = v22;
    uint64_t v46 = *(void *)v49;
    int v31 = 1;
    goto LABEL_74;
  }
  if (v49[1] <= *((float *)&v44 + 1) && v49[1] >= *((float *)&v44 + 3)) {
    goto LABEL_72;
  }
LABEL_73:
  int v27 = v24;
  uint64_t v28 = a1;
  int v29 = v21;
  int v30 = v22;
  int v31 = 0;
  uint64_t v46 = v42;
LABEL_74:
  int v33 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)((char *)&v42 + 8));
  if (v33)
  {
    int v34 = 0;
    uint64_t v45 = *((void *)&v42 + 1);
    int v35 = v30;
    int v36 = v29;
    a1 = v28;
    int v37 = v40;
    goto LABEL_91;
  }
  *(void *)unint64_t v49 = 0;
  int Intersection = WebCore::findIntersection((WebCore *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)&v41, (const WebCore::FloatPoint *)((char *)&v42 + 8), (const WebCore::FloatPoint *)v49, v32);
  int v35 = v30;
  int v36 = v29;
  a1 = v28;
  int v37 = v40;
  if (!Intersection) {
    goto LABEL_90;
  }
  if (*((float *)&v44 + 2) >= *(float *)&v44)
  {
    if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v44) {
      goto LABEL_90;
    }
  }
  else if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v44 + 2))
  {
    goto LABEL_90;
  }
  if (*((float *)&v44 + 3) >= *((float *)&v44 + 1))
  {
    if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v44 + 1)) {
      goto LABEL_90;
    }
LABEL_89:
    uint64_t v45 = *(void *)v49;
    int v34 = 1;
    goto LABEL_91;
  }
  if (v49[1] <= *((float *)&v44 + 1) && v49[1] >= *((float *)&v44 + 3)) {
    goto LABEL_89;
  }
LABEL_90:
  int v34 = 0;
  uint64_t v45 = *((void *)&v42 + 1);
LABEL_91:
  if ((v35 | v37 ^ 1 | v36))
  {
    if (((v27 | v35 ^ 1 | v37) & 1) == 0)
    {
      uint64_t v47 = *((void *)&v43 + 1);
      int v27 = 1;
    }
    if ((v33 | v31 ^ 1 | v34)) {
      goto LABEL_95;
    }
LABEL_98:
    uint64_t v45 = *((void *)&v44 + 1);
    int v33 = 1;
    goto LABEL_99;
  }
  uint64_t v48 = v43;
  int v36 = 1;
  if (((v33 | v31 ^ 1 | v34) & 1) == 0) {
    goto LABEL_98;
  }
LABEL_95:
  if (((v31 | v34 ^ 1 | v26) & 1) == 0)
  {
    uint64_t v46 = v44;
    int v26 = 1;
  }
LABEL_99:
  if (((v37 | v27) & 1) == 0)
  {
    *(void *)unint64_t v49 = 0;
    if (WebCore::findIntersection((WebCore *)((char *)&v43 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)&v48, (const WebCore::FloatPoint *)&v47, (const WebCore::FloatPoint *)v49, v32))
    {
      if (*((float *)&v43 + 2) < *(float *)&v44)
      {
        if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v43 + 2)) {
          goto LABEL_114;
        }
LABEL_107:
        if (*((float *)&v43 + 3) >= *((float *)&v44 + 1))
        {
          if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v44 + 1)) {
            goto LABEL_114;
          }
        }
        else if (v49[1] > *((float *)&v44 + 1) || v49[1] < *((float *)&v43 + 3))
        {
          goto LABEL_114;
        }
        uint64_t v47 = *(void *)v49;
        goto LABEL_114;
      }
      if (v49[0] <= *((float *)&v43 + 2) && v49[0] >= *(float *)&v44) {
        goto LABEL_107;
      }
    }
  }
LABEL_114:
  if (((v31 | v26) & 1) == 0)
  {
    *(void *)unint64_t v49 = 0;
    if (WebCore::findIntersection((WebCore *)((char *)&v43 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)&v45, (const WebCore::FloatPoint *)&v46, (const WebCore::FloatPoint *)v49, v32))
    {
      if (*((float *)&v43 + 2) < *(float *)&v44)
      {
        if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v43 + 2)) {
          goto LABEL_129;
        }
LABEL_122:
        if (*((float *)&v43 + 3) >= *((float *)&v44 + 1))
        {
          if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v44 + 1)) {
            goto LABEL_129;
          }
        }
        else if (v49[1] > *((float *)&v44 + 1) || v49[1] < *((float *)&v43 + 3))
        {
          goto LABEL_129;
        }
        uint64_t v46 = *(void *)v49;
        goto LABEL_129;
      }
      if (v49[0] <= *((float *)&v43 + 2) && v49[0] >= *(float *)&v44) {
        goto LABEL_122;
      }
    }
  }
LABEL_129:
  if (((v35 | v36) & 1) == 0)
  {
    *(void *)unint64_t v49 = 0;
    if (WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v48, (const WebCore::FloatPoint *)&v47, (const WebCore::FloatPoint *)v49, v32))
    {
      if (*(float *)&v43 < *((float *)&v44 + 2))
      {
        if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v43) {
          goto LABEL_144;
        }
LABEL_137:
        if (*((float *)&v43 + 1) >= *((float *)&v44 + 3))
        {
          if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v44 + 3)) {
            goto LABEL_144;
          }
        }
        else if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v43 + 1))
        {
          goto LABEL_144;
        }
        uint64_t v48 = *(void *)v49;
        goto LABEL_144;
      }
      if (v49[0] <= *(float *)&v43 && v49[0] >= *((float *)&v44 + 2)) {
        goto LABEL_137;
      }
    }
  }
LABEL_144:
  if ((v34 | v33)) {
    goto LABEL_159;
  }
  *(void *)unint64_t v49 = 0;
  if (!WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v45, (const WebCore::FloatPoint *)&v46, (const WebCore::FloatPoint *)v49, v32))goto LABEL_159; {
  if (*(float *)&v43 >= *((float *)&v44 + 2))
  }
  {
    if (v49[0] > *(float *)&v43 || v49[0] < *((float *)&v44 + 2)) {
      goto LABEL_159;
    }
  }
  else if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v43)
  {
    goto LABEL_159;
  }
  if (*((float *)&v43 + 1) >= *((float *)&v44 + 3))
  {
    if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v44 + 3)) {
      goto LABEL_159;
    }
  }
  else if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v43 + 1))
  {
    goto LABEL_159;
  }
  uint64_t v45 = *(void *)v49;
LABEL_159:
  float v11 = *((float *)&v48 + 1);
  float v10 = *(float *)&v48;
  float v13 = *((float *)&v47 + 1);
  float v12 = *(float *)&v47;
  float v15 = *((float *)&v46 + 1);
  float v14 = *(float *)&v46;
  float v17 = *((float *)&v45 + 1);
  float v16 = *(float *)&v45;
LABEL_160:
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, v10, v11);
  CGPathAddLineToPoint(Mutable, 0, v12, v13);
  CGPathAddLineToPoint(Mutable, 0, v14, v15);
  CGPathAddLineToPoint(Mutable, 0, v16, v17);
  CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
  [(CAShapeLayer *)a1 setPath:Mutable];
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1E1456728(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void layerPath(CAShapeLayer *a1, const WebCore::FloatQuad *a2)
{
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
  [(CAShapeLayer *)a1 setPath:Mutable];
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void sub_1E1456804(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1456924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1456A28(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1456A3C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)va, a2);
  _Unwind_Resume(a1);
}

void WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight(WebCore::InspectorOverlayHighlight *this, StringImpl *a2)
{
  unsigned int v3 = *((_DWORD *)this + 23);
  uint64_t v4 = (uint64_t *)*((void *)this + 10);
  if (!v3) {
    goto LABEL_43;
  }
  unint64_t v5 = &v4[17 * v3];
  while (2)
  {
    unsigned int v6 = *((_DWORD *)v4 + 33);
    uint64_t v7 = v4[15];
    if (!v6) {
      goto LABEL_27;
    }
    uint64_t v8 = v7 + 40 * v6;
    do
    {
      uint64_t v9 = *(void *)(v7 + 24);
      if ((v9 & 0x8000000000000) != 0)
      {
        float v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
          uint64_t v11 = *(unsigned int *)(v7 + 12);
          if (!v11) {
            goto LABEL_24;
          }
LABEL_10:
          float v12 = *(WTF **)v7;
          uint64_t v13 = 32 * v11;
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 3);
            if ((v14 & 0x8000000000000) != 0
              && (float v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL),
                  atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, a2);
              uint64_t v16 = *((void *)v12 + 1);
              if ((v16 & 0x8000000000000) != 0)
              {
LABEL_16:
                float v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v17);
                  WTF::fastFree((WTF *)v17, a2);
                }
              }
            }
            else
            {
              uint64_t v16 = *((void *)v12 + 1);
              if ((v16 & 0x8000000000000) != 0) {
                goto LABEL_16;
              }
            }
            long long v18 = *(WTF::StringImpl **)v12;
            *(void *)float v12 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2) {
                WTF::StringImpl::destroy(v18, a2);
              }
              else {
                *(_DWORD *)v18 -= 2;
              }
            }
            float v12 = (WTF *)((char *)v12 + 32);
            v13 -= 32;
            if (!v13) {
              goto LABEL_24;
            }
          }
        }
      }
      uint64_t v11 = *(unsigned int *)(v7 + 12);
      if (v11) {
        goto LABEL_10;
      }
LABEL_24:
      long long v19 = *(WTF **)v7;
      if (*(void *)v7)
      {
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        WTF::fastFree(v19, a2);
      }
      v7 += 40;
    }
    while (v7 != v8);
    uint64_t v7 = v4[15];
LABEL_27:
    if (v7)
    {
      v4[15] = 0;
      *((_DWORD *)v4 + 32) = 0;
      WTF::fastFree((WTF *)v7, a2);
    }
    unint64_t v20 = (WTF *)v4[13];
    if (v20)
    {
      v4[13] = 0;
      *((_DWORD *)v4 + 28) = 0;
      WTF::fastFree(v20, a2);
    }
    int v21 = (WTF *)v4[11];
    if (v21)
    {
      v4[11] = 0;
      *((_DWORD *)v4 + ++*(_DWORD *)(this + 24) = 0;
      WTF::fastFree(v21, a2);
    }
    int v22 = (WTF *)v4[9];
    if (v22)
    {
      v4[9] = 0;
      *((_DWORD *)v4 + 20) = 0;
      WTF::fastFree(v22, a2);
    }
    unsigned int v23 = (WTF *)v4[7];
    if (v23)
    {
      v4[7] = 0;
      *((_DWORD *)v4 + ++*(_DWORD *)(this - 16) = 0;
      WTF::fastFree(v23, a2);
    }
    int v24 = (WTF *)v4[5];
    if (v24)
    {
      v4[5] = 0;
      *((_DWORD *)v4 + 12) = 0;
      WTF::fastFree(v24, a2);
    }
    uint64_t v25 = *v4;
    if ((*v4 & 0x8000000000000) != 0)
    {
      int v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
    v4 += 17;
    if (v4 != v5) {
      continue;
    }
    break;
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 10);
LABEL_43:
  if (v4)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  unsigned int v27 = *((_DWORD *)this + 19);
  uint64_t v28 = (uint64_t *)*((void *)this + 8);
  if (!v27) {
    goto LABEL_90;
  }
  int v29 = &v28[9 * v27];
  while (2)
  {
    unsigned int v30 = *((_DWORD *)v28 + 17);
    uint64_t v31 = v28[7];
    if (!v30) {
      goto LABEL_71;
    }
    uint64_t v32 = v31 + 40 * v30;
    while (2)
    {
      uint64_t v33 = *(void *)(v31 + 24);
      if ((v33 & 0x8000000000000) != 0)
      {
        int v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v34);
          WTF::fastFree((WTF *)v34, a2);
          uint64_t v35 = *(unsigned int *)(v31 + 12);
          if (!v35) {
            goto LABEL_68;
          }
LABEL_54:
          int v36 = *(WTF **)v31;
          uint64_t v37 = 32 * v35;
          while (1)
          {
            uint64_t v38 = *((void *)v36 + 3);
            if ((v38 & 0x8000000000000) != 0
              && (uint64_t v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL),
                  atomic_fetch_add((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
            {
              atomic_store(1u, v39);
              WTF::fastFree((WTF *)v39, a2);
              uint64_t v40 = *((void *)v36 + 1);
              if ((v40 & 0x8000000000000) != 0)
              {
LABEL_60:
                long long v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v41);
                  WTF::fastFree((WTF *)v41, a2);
                }
              }
            }
            else
            {
              uint64_t v40 = *((void *)v36 + 1);
              if ((v40 & 0x8000000000000) != 0) {
                goto LABEL_60;
              }
            }
            long long v42 = *(WTF::StringImpl **)v36;
            *(void *)int v36 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2) {
                WTF::StringImpl::destroy(v42, a2);
              }
              else {
                *(_DWORD *)v42 -= 2;
              }
            }
            int v36 = (WTF *)((char *)v36 + 32);
            v37 -= 32;
            if (!v37) {
              goto LABEL_68;
            }
          }
        }
      }
      uint64_t v35 = *(unsigned int *)(v31 + 12);
      if (v35) {
        goto LABEL_54;
      }
LABEL_68:
      long long v43 = *(WTF **)v31;
      if (*(void *)v31)
      {
        *(void *)uint64_t v31 = 0;
        *(_DWORD *)(v31 + 8) = 0;
        WTF::fastFree(v43, a2);
      }
      v31 += 40;
      if (v31 != v32) {
        continue;
      }
      break;
    }
    uint64_t v31 = v28[7];
LABEL_71:
    if (v31)
    {
      v28[7] = 0;
      *((_DWORD *)v28 + ++*(_DWORD *)(this - 16) = 0;
      WTF::fastFree((WTF *)v31, a2);
    }
    uint64_t v44 = *((unsigned int *)v28 + 13);
    if (v44)
    {
      uint64_t v45 = (WTF::StringImpl **)v28[5];
      uint64_t v46 = 40 * v44;
      do
      {
        uint64_t v47 = *v45;
        *uint64_t v45 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, a2);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
        v45 += 5;
        v46 -= 40;
      }
      while (v46);
    }
    uint64_t v48 = (WTF *)v28[5];
    if (v48)
    {
      v28[5] = 0;
      *((_DWORD *)v28 + 12) = 0;
      WTF::fastFree(v48, a2);
    }
    unint64_t v49 = (WTF *)v28[3];
    if (v49)
    {
      v28[3] = 0;
      *((_DWORD *)v28 + 8) = 0;
      WTF::fastFree(v49, a2);
    }
    long long v50 = (WTF *)v28[1];
    if (v50)
    {
      v28[1] = 0;
      *((_DWORD *)v28 + 4) = 0;
      WTF::fastFree(v50, a2);
    }
    uint64_t v51 = *v28;
    if ((*v28 & 0x8000000000000) != 0)
    {
      long long v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, a2);
      }
    }
    v28 += 9;
    if (v28 != v29) {
      continue;
    }
    break;
  }
  uint64_t v28 = (uint64_t *)*((void *)this + 8);
LABEL_90:
  if (v28)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree((WTF *)v28, a2);
  }
  long long v53 = (WTF *)*((void *)this + 6);
  if (v53)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v53, a2);
  }
  uint64_t v54 = *((void *)this + 4);
  if ((v54 & 0x8000000000000) != 0
    && (int v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL),
        atomic_fetch_add((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
  {
    atomic_store(1u, v55);
    WTF::fastFree((WTF *)v55, a2);
    uint64_t v56 = *((void *)this + 3);
    if ((v56 & 0x8000000000000) != 0) {
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v56 = *((void *)this + 3);
    if ((v56 & 0x8000000000000) != 0)
    {
LABEL_97:
      unint64_t v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v57);
        WTF::fastFree((WTF *)v57, a2);
      }
    }
  }
  uint64_t v58 = *((void *)this + 2);
  if ((v58 & 0x8000000000000) != 0
    && (unint64_t v59 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL),
        atomic_fetch_add((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
  {
    atomic_store(1u, v59);
    WTF::fastFree((WTF *)v59, a2);
    uint64_t v60 = *((void *)this + 1);
    if ((v60 & 0x8000000000000) != 0) {
      goto LABEL_102;
    }
  }
  else
  {
    uint64_t v60 = *((void *)this + 1);
    if ((v60 & 0x8000000000000) != 0)
    {
LABEL_102:
      uint64_t v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v61);
        WTF::fastFree((WTF *)v61, a2);
      }
    }
  }
  uint64_t v62 = *(void *)this;
  if ((*(void *)this & 0x8000000000000) != 0)
  {
    uint64_t v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, a2);
    }
  }
}

void sub_1E14577A4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1457874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145794C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1457A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1457AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1457BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebNotificationClient::show(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  LOBYTE(v37) = 1;
  uint64_t v8 = objc_msgSend(*(id *)(a1 + 8), "_notificationProvider", a5, v37);
  if (!v8) {
    goto LABEL_39;
  }
  unint64_t v10 = *(void *)(a3 + 144);
  unint64_t v9 = *(void *)(a3 + 152);
  uint64_t v11 = [[WebNotification alloc] initWithCoreNotification:a3];
  uint64_t v13 = (uint64_t *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash((uint64_t *)(a1 + 16), 8u), (uint64_t v12 = *v13) != 0))
  {
    unsigned int v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    unsigned int v14 = 0;
  }
  unsigned int v15 = (v9 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v9 - 1640531527) << 16) ^ ((unsigned __int16)v9
                                                                                           - 1640531527);
  unsigned int v16 = (v9 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v9) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v9) + (v15 >> 11));
  unsigned int v17 = (v10 >> 5) & 0x7FFF800 ^ ((v16 + (unsigned __int16)v10 + (v16 >> 11)) << 16) ^ (v16 + (unsigned __int16)v10 + (v16 >> 11));
  unsigned int v18 = (v10 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v10) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v10) + (v17 >> 11));
  unsigned int v19 = (v18 + (v18 >> 11)) ^ (8 * (v18 + (v18 >> 11)));
  unsigned int v20 = (v19 + (v19 >> 5)) ^ (4 * (v19 + (v19 >> 5)));
  int v21 = (v20 + (v20 >> 15)) ^ ((v20 + (v20 >> 15)) << 10);
  if (!v21) {
    int v21 = 0x800000;
  }
  uint64_t v22 = v14 & v21;
  unsigned int v23 = (unint64_t *)(v12 + 32 * v22);
  unint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  if (*(_OWORD *)v23 != 0)
  {
    int v26 = 0;
    int v27 = 1;
    while (v24 != v9 || v25 != v10)
    {
      if (!(v25 ^ 1 | v24)) {
        int v26 = v23;
      }
      uint64_t v22 = (v22 + v27) & v14;
      unsigned int v23 = (unint64_t *)(v12 + 32 * v22);
      unint64_t v25 = *v23;
      unint64_t v24 = v23[1];
      ++v27;
      if (*(_OWORD *)v23 == 0)
      {
        if (v26)
        {
          *int v26 = 0;
          v26[1] = 0;
          v26[2] = 0;
          --*(_DWORD *)(*v13 - 16);
          unsigned int v23 = v26;
        }
        goto LABEL_18;
      }
    }
    if (v11) {
      CFRetain(v11);
    }
    int v34 = (const void *)v23[2];
    v23[2] = (unint64_t)v11;
    if (v34) {
      CFRelease(v34);
    }
    goto LABEL_37;
  }
LABEL_18:
  *unsigned int v23 = v10;
  v23[1] = v9;
  if (v11) {
    CFRetain(v11);
  }
  int v29 = (const void *)v23[2];
  v23[2] = (unint64_t)v11;
  if (v29) {
    CFRelease(v29);
  }
  if (*v13)
  {
    ++*(_DWORD *)(*v13 - 12);
    uint64_t v30 = *v13;
    if (*v13) {
      goto LABEL_24;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v30 = *v13;
    if (*v13)
    {
LABEL_24:
      uint64_t v31 = (*(_DWORD *)(v30 - 16) + *(_DWORD *)(v30 - 12));
      unint64_t v32 = *(unsigned int *)(v30 - 4);
      if (v32 <= 0x400) {
        goto LABEL_25;
      }
LABEL_34:
      if (v32 > 2 * v31) {
        goto LABEL_37;
      }
      goto LABEL_35;
    }
  }
  uint64_t v31 = *(unsigned int *)(v30 - 16);
  unint64_t v32 = *(unsigned int *)(v30 - 4);
  if (v32 > 0x400) {
    goto LABEL_34;
  }
LABEL_25:
  if (3 * v32 > 4 * v31) {
    goto LABEL_37;
  }
  if (v32)
  {
LABEL_35:
    unsigned int v33 = v32 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v32));
    goto LABEL_36;
  }
  unsigned int v33 = 8;
LABEL_36:
  WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash((uint64_t *)(a1 + 16), v33);
LABEL_37:
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "_notificationProvider"), "showNotification:fromWebView:", v11, *(void *)(a1 + 8));
  if (v11) {
    CFRelease(v11);
  }
LABEL_39:
  uint64_t v35 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  return v8 != 0;
}

void sub_1E1457F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  if (v9)
  {
    CFRelease(v9);
    WTF::ScopeExit<WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~ScopeExit(&a9);
    _Unwind_Resume(a1);
  }
  WTF::ScopeExit<WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~ScopeExit(&a9);
  _Unwind_Resume(a1);
}

uint64_t **WTF::ScopeExit<WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~ScopeExit(uint64_t **a1)
{
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = **a1;
    **a1 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1E1458094(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebNotificationClient::cancel(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v5 = *(void *)(a2 + 144);
    unint64_t v4 = *(void *)(a2 + 152);
    unsigned int v6 = *(_DWORD *)(v2 - 8);
    unsigned int v7 = (v4 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v4 - 1640531527) << 16) ^ ((unsigned __int16)v4
                                                                                            - 1640531527);
    unsigned int v8 = (v4 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(v4) + (v7 >> 11)) << 16) ^ (v7 + WORD2(v4) + (v7 >> 11));
    unsigned int v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                                 + (unsigned __int16)v5
                                                                                                 + (v8 >> 11));
    unsigned int v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
    unsigned int v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
    unsigned int v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
    int v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
    if (!v13) {
      int v13 = 0x800000;
    }
    uint64_t v14 = v6 & v13;
    unsigned int v15 = (uint64_t *)(v2 + 32 * v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    if (v17 == v4 && v16 == v5)
    {
LABEL_15:
      uint64_t v22 = v2 + 32 * v14;
      unsigned int v23 = *(const void **)(v22 + 16);
      if (v23)
      {
        CFRetain(*(CFTypeRef *)(v22 + 16));
        CFRelease(v23);
        unint64_t v24 = (void *)[*(id *)(v3 + 8) _notificationProvider];
        return [v24 cancelNotification:v23];
      }
    }
    else
    {
      int v19 = 1;
      while (v16 | v17)
      {
        uint64_t v14 = (v14 + v19) & v6;
        unsigned int v20 = (uint64_t *)(v2 + 32 * v14);
        uint64_t v16 = *v20;
        uint64_t v17 = v20[1];
        BOOL v21 = v17 == v4 && v16 == v5;
        ++v19;
        if (v21) {
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

void WebNotificationClient::notificationObjectDestroyed(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v3 = (uint64_t *)(a1 + 16);
  uint64_t v4 = v5;
  if (!v5) {
    return;
  }
  unint64_t v7 = *(void *)(a2 + 144);
  unint64_t v6 = *(void *)(a2 + 152);
  unsigned int v8 = *(_DWORD *)(v4 - 8);
  unsigned int v9 = (v6 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v6 - 1640531527) << 16) ^ ((unsigned __int16)v6
                                                                                          - 1640531527);
  unsigned int v10 = (v6 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v6) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v6) + (v9 >> 11));
  unsigned int v11 = (v7 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v7 + (v10 >> 11)) << 16) ^ (v10
                                                                                                  + (unsigned __int16)v7
                                                                                                  + (v10 >> 11));
  unsigned int v12 = (v7 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v7) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v7) + (v11 >> 11));
  unsigned int v13 = (v12 + (v12 >> 11)) ^ (8 * (v12 + (v12 >> 11)));
  unsigned int v14 = (v13 + (v13 >> 5)) ^ (4 * (v13 + (v13 >> 5)));
  int v15 = (v14 + (v14 >> 15)) ^ ((v14 + (v14 >> 15)) << 10);
  if (!v15) {
    int v15 = 0x800000;
  }
  uint64_t v16 = v8 & v15;
  uint64_t v17 = (uint64_t *)(v4 + 32 * v16);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  if (v19 == v6 && v18 == v7)
  {
LABEL_15:
    if (v16 == *(_DWORD *)(v4 - 4)) {
      return;
    }
    unint64_t v24 = (void *)(v4 + 32 * v16);
    unint64_t v25 = (const void *)v24[2];
    v24[2] = 0;
    uint64_t v26 = *v3;
    if (*v3)
    {
      v26 += 32 * *(unsigned int *)(v26 - 4);
      if ((void *)v26 == v24) {
        goto LABEL_31;
      }
    }
    if ((void *)v26 == v24) {
      goto LABEL_31;
    }
    void *v24 = 1;
    v24[1] = 0;
    v24[2] = 0;
    ++*(_DWORD *)(*v3 - 16);
    if (*v3)
    {
      --*(_DWORD *)(*v3 - 12);
      uint64_t v27 = *v3;
      if (!*v3)
      {
LABEL_31:
        if (v25)
        {
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "_notificationProvider"), "notificationDestroyed:", v25);
          CFRelease(v25);
        }
        return;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      uint64_t v27 = *v3;
      if (!*v3) {
        goto LABEL_31;
      }
    }
    unsigned int v28 = 6 * *(_DWORD *)(v27 - 12);
    unsigned int v29 = *(_DWORD *)(v27 - 4);
    if (v28 < v29 && v29 >= 9) {
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v3, v29 >> 1);
    }
    goto LABEL_31;
  }
  int v21 = 1;
  while (v18 | v19)
  {
    uint64_t v16 = (v16 + v21) & v8;
    uint64_t v22 = (uint64_t *)(v4 + 32 * v16);
    uint64_t v18 = *v22;
    uint64_t v19 = v22[1];
    BOOL v23 = v19 == v6 && v18 == v7;
    ++v21;
    if (v23) {
      goto LABEL_15;
    }
  }
}

void sub_1E145840C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebNotificationClient::notificationControllerDestroyed(WebNotificationClient *this, void *a2)
{
  if (this)
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(unsigned int *)(v3 - 4);
      if (v4)
      {
        uint64_t v5 = *((void *)this + 3);
        do
        {
          uint64_t v6 = *(unsigned int *)(v5 + 24);
          if (v6)
          {
            if (v6 != 1)
            {
              unsigned int v11 = (WebNotificationClient *)std::__throw_bad_variant_access[abi:sn180100]();
              WebNotificationClient::~WebNotificationClient(v11);
              return;
            }
          }
          else if (*(void *)v5 == -1)
          {
            goto LABEL_7;
          }
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v6])(&v12, v5);
          *(_DWORD *)(v5 + ++*(_DWORD *)(this + 24) = -1;
LABEL_7:
          v5 += 32;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    uint64_t v7 = *((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = *(unsigned int *)(v7 - 4);
      if (v8)
      {
        unsigned int v9 = (const void **)(v7 + 16);
        do
        {
          if ((unint64_t)*(v9 - 2) ^ 1 | (unint64_t)*(v9 - 1))
          {
            unsigned int v10 = *v9;
            *unsigned int v9 = 0;
            if (v10) {
              CFRelease(v10);
            }
          }
          v9 += 4;
          --v8;
        }
        while (v8);
      }
      WTF::fastFree((WTF *)(v7 - 16), a2);
    }
    WTF::fastFree(this, a2);
  }
}

void WebNotificationClient::~WebNotificationClient(WebNotificationClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 3);
      do
      {
        uint64_t v6 = *(unsigned int *)(v5 + 24);
        if (v6)
        {
          if (v6 != 1)
          {
            uint64_t v11 = std::__throw_bad_variant_access[abi:sn180100]();
            WebNotificationClient::requestPermission(v11);
            return;
          }
        }
        else if (*(void *)v5 == -1)
        {
          goto LABEL_6;
        }
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v6])(&v12, v5);
        *(_DWORD *)(v5 + ++*(_DWORD *)(this + 24) = -1;
LABEL_6:
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      unsigned int v9 = (const void **)(v7 + 16);
      do
      {
        if ((unint64_t)*(v9 - 2) ^ 1 | (unint64_t)*(v9 - 1))
        {
          unsigned int v10 = *v9;
          *unsigned int v9 = 0;
          if (v10) {
            CFRelease(v10);
          }
        }
        v9 += 4;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  const void *v10;
  uint64_t *v11;
  unsigned int v12;
  char v13;

  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 3);
      do
      {
        uint64_t v6 = *(unsigned int *)(v5 + 24);
        if (v6)
        {
          if (v6 != 1)
          {
            uint64_t v11 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v11, v12);
            return;
          }
        }
        else if (*(void *)v5 == -1)
        {
          goto LABEL_6;
        }
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v6])(&v13, v5);
        *(_DWORD *)(v5 + ++*(_DWORD *)(this + 24) = -1;
LABEL_6:
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      unsigned int v9 = (const void **)(v7 + 16);
      do
      {
        if ((unint64_t)*(v9 - 2) ^ 1 | (unint64_t)*(v9 - 1))
        {
          unsigned int v10 = *v9;
          *unsigned int v9 = 0;
          if (v10) {
            CFRelease(v10);
          }
        }
        v9 += 4;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

void WebNotificationClient::requestPermission(uint64_t a1, WebCore::SecurityContext *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [[WebNotificationPolicyListener alloc] initWithPermissionHandler:a3];
  [*(id *)(a1 + 8) UIDelegate];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(a1 + 32) = 1;
  CFTypeRef cf = [[WebSecurityOrigin alloc] _initWithWebCoreSecurityOrigin:WebCore::SecurityContext::securityOrigin(a2)];
  BOOL v23 = (objc_object *)v5;
  uint64_t v6 = WebCore::SecurityContext::securityOrigin(a2);
  uint64_t v7 = (uint64_t *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8
    || (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)(a1 + 24), 8u), (uint64_t v8 = *v7) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = WTF::computeHash<WebCore::SecurityOriginData>(v6 + 8);
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v13 = v10 & v9;
    unsigned int v14 = (_OWORD *)(v8 + 32 * v13);
    int v15 = *((_DWORD *)v14 + 6);
    if (v15 == 1) {
      goto LABEL_14;
    }
    if (v15)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      JUMPOUT(0x1E14589A0);
    }
    if (*v14 == 0) {
      break;
    }
    if (*(void *)v14 == -1)
    {
      uint64_t v11 = (_OWORD *)(v8 + 32 * v13);
      goto LABEL_7;
    }
LABEL_14:
    if (WebCore::operator==()) {
      goto LABEL_15;
    }
LABEL_7:
    int v10 = i + v13;
  }
  if (*((unsigned char *)v14 + 18)) {
    goto LABEL_14;
  }
  if (v11)
  {
    *uint64_t v11 = 0u;
    v11[1] = 0u;
    --*(_DWORD *)(*v7 - 16);
    unsigned int v14 = v11;
  }
  v26[0] = 0;
  int v27 = -1;
  uint64_t v16 = *(unsigned int *)(v6 + 32);
  if (v16 == -1)
  {
    uint64_t v17 = *((unsigned int *)v14 + 6);
    if (v17 != -1)
    {
      ((void (*)(_OWORD **, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v17])(&v24, v14);
      *((_DWORD *)v14 + 6) = -1;
    }
  }
  else
  {
    ((void (*)(char *, unsigned char *, uint64_t))off_1F3C7D278[v16])(&v25, v26, v6 + 8);
    int v27 = v16;
    unint64_t v24 = v14;
    ((void (*)(_OWORD **, _OWORD *, unsigned char *))off_1F3C7D268[v16])(&v24, v14, v26);
  }
  if (v27 != -1) {
    ((void (*)(_OWORD **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v27])(&v24, v26);
  }
  if (*v7)
  {
    ++*(_DWORD *)(*v7 - 12);
    uint64_t v18 = *v7;
    if (*v7) {
      goto LABEL_33;
    }
LABEL_38:
    uint64_t v19 = *(unsigned int *)(v18 - 16);
    unint64_t v20 = *(unsigned int *)(v18 - 4);
    if (v20 > 0x400) {
      goto LABEL_39;
    }
LABEL_34:
    if (3 * v20 <= 4 * v19)
    {
      if (!v20)
      {
        unsigned int v21 = 8;
        goto LABEL_41;
      }
LABEL_40:
      unsigned int v21 = v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20));
LABEL_41:
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)(a1 + 24), v21);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v18 = *v7;
    if (!*v7) {
      goto LABEL_38;
    }
LABEL_33:
    uint64_t v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
    unint64_t v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400) {
      goto LABEL_34;
    }
LABEL_39:
    if (v20 <= 2 * v19) {
      goto LABEL_40;
    }
  }
LABEL_15:
  uint64_t v5 = (WebNotificationPolicyListener *)v23;
  CallUIDelegate(*(WebView **)(a1 + 8), (objc_selector *)sel_webView_decidePolicyForNotificationRequestFromOrigin_listener_, cf, v23);
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_1E1458AA4()
{
}

uint64_t WebNotificationClient::checkPermission(id *this, WebCore::ScriptExecutionContext *a2)
{
  if (!a2) {
    return 1;
  }
  if (*((unsigned char *)a2 + 274)) {
    return 1;
  }
  if (!objc_msgSend((id)objc_msgSend(this[1], "preferences"), "notificationsEnabled")) {
    return 1;
  }
  id v6 = [[WebSecurityOrigin alloc] _initWithWebCoreSecurityOrigin:WebCore::SecurityContext::securityOrigin(a2)];
  int v7 = objc_msgSend((id)objc_msgSend(this[1], "_notificationProvider"), "policyForOrigin:", v6);
  if (!v7)
  {
    uint64_t v3 = 2;
    if (!v6) {
      return v3;
    }
LABEL_24:
    CFRelease(v6);
    return v3;
  }
  if (v7 != 2 || (uint64_t v8 = WebCore::SecurityContext::securityOrigin(a2), (v9 = this[3]) == 0))
  {
LABEL_21:
    uint64_t v3 = 0;
    if (!v6) {
      return v3;
    }
    goto LABEL_24;
  }
  unsigned int v10 = *(v9 - 2);
  int v11 = WTF::computeHash<WebCore::SecurityOriginData>(v8 + 8);
  for (i = 0; ; int v11 = i + v13)
  {
    uint64_t v13 = v11 & v10;
    unsigned int v14 = (char *)&v9[8 * v13];
    int v15 = *((_DWORD *)v14 + 6);
    if (v15 != 1)
    {
      if (v15)
      {
        uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        return result;
      }
      if (*(_OWORD *)v14 == 0)
      {
        if (!v14[18]) {
          goto LABEL_21;
        }
      }
      else if (*(void *)v14 == -1)
      {
        goto LABEL_11;
      }
    }
    if (WebCore::operator==()) {
      break;
    }
LABEL_11:
    ++i;
  }
  uint64_t v3 = 1;
  if (v6) {
    goto LABEL_24;
  }
  return v3;
}

void sub_1E1458C30(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1458D68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1E1458E30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    unsigned int v10 = (void *)(result + 16);
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    unsigned int v10 = (void *)(result + 16);
    if (!a2) {
      goto LABEL_7;
    }
  }
  int v11 = v10;
  do
  {
    *int v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v11 += 4;
    --v7;
  }
  while (v7);
LABEL_7:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (unint64_t *)(v4 + 32 * v12);
      unint64_t v14 = *v13;
      unint64_t v15 = v13[1];
      if (*v13 ^ 1 | v15)
      {
        if (v14 | v15)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v20 = 0;
          unsigned int v21 = (v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v15 - 1640531527) << 16) ^ ((unsigned __int16)v15 - 1640531527);
          unsigned int v22 = (v15 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v15) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v15) + (v21 >> 11));
          unsigned int v23 = (v14 >> 5) & 0x7FFF800 ^ ((v22 + (unsigned __int16)v14 + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v14 + (v22 >> 11));
          unsigned int v24 = (v14 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v14) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v14) + (v23 >> 11));
          unsigned int v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
          unsigned int v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
          int v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
          if (!v27) {
            int v27 = 0x800000;
          }
          do
          {
            uint64_t v28 = v27 & v19;
            uint64_t v29 = v18 + 32 * v28;
            int v27 = ++v20 + v28;
          }
          while (*(_OWORD *)v29 != 0);
          uint64_t v30 = *(const void **)(v29 + 16);
          *(void *)(v29 + ++*(_DWORD *)(this - 16) = 0;
          if (v30) {
            CFRelease(v30);
          }
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v13;
          uint64_t v31 = v4 + 32 * v12;
          uint64_t v32 = *(void *)(v31 + 16);
          *(void *)(v31 + ++*(_DWORD *)(this - 16) = 0;
          *(void *)(v29 + ++*(_DWORD *)(this - 16) = v32;
          uint64_t v17 = *(const void **)(v31 + 16);
          *(void *)(v31 + ++*(_DWORD *)(this - 16) = 0;
          if (!v17) {
            goto LABEL_9;
          }
LABEL_13:
          CFRelease(v17);
          goto LABEL_9;
        }
        uint64_t v16 = v4 + 32 * v12;
        uint64_t v17 = *(const void **)(v16 + 16);
        *(void *)(v16 + ++*(_DWORD *)(this - 16) = 0;
        if (v17) {
          goto LABEL_13;
        }
      }
LABEL_9:
      if (++v12 == v5) {
        goto LABEL_25;
      }
    }
  }
  if (v4)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  }
  return result;
}

void WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v4 + 32 * v11;
      int v13 = *(_DWORD *)(v12 + 24);
      if (v13) {
        break;
      }
      if (*(void *)v12 != -1)
      {
        if (*(_OWORD *)v12 != 0 || *(unsigned char *)(v12 + 18)) {
          goto LABEL_16;
        }
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + ++*(_DWORD *)(this + 24) = -1;
      }
LABEL_9:
      if (++v11 == v5) {
        goto LABEL_30;
      }
    }
    if (v13 != 1)
    {
LABEL_32:
      unsigned int v22 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      uint64_t v23 = *(unsigned int *)(v9 + 24);
      if (v23 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v23])(&v25, v9);
      }
      *(_DWORD *)(v9 + ++*(_DWORD *)(this + 24) = -1;
      _Unwind_Resume(v22);
    }
LABEL_16:
    uint64_t v14 = *a1;
    if (*a1) {
      unsigned int v15 = *(_DWORD *)(v14 - 8);
    }
    else {
      unsigned int v15 = 0;
    }
    int v16 = WTF::computeHash<WebCore::SecurityOriginData>(v4 + 32 * v11);
    for (i = 0; ; int v16 = i + v18)
    {
      uint64_t v18 = v16 & v15;
      uint64_t v9 = v14 + 32 * v18;
      int v19 = *(_DWORD *)(v9 + 24);
      if (v19 != 1)
      {
        if (v19) {
          goto LABEL_32;
        }
        if (*(_OWORD *)v9 == 0 && !*(unsigned char *)(v9 + 18)) {
          break;
        }
      }
      ++i;
    }
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + ++*(_DWORD *)(this + 24) = -1;
    uint64_t v20 = *(unsigned int *)(v12 + 24);
    if (v20 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1F3C7D258[v20])(&v24, v14 + 32 * v18, v4 + 32 * v11);
      *(_DWORD *)(v9 + ++*(_DWORD *)(this + 24) = v20;
      uint64_t v21 = *(unsigned int *)(v12 + 24);
      if (v21 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v21])(&v26, v4 + 32 * v11);
      }
    }
    *(_DWORD *)(v12 + ++*(_DWORD *)(this + 24) = -1;
    goto LABEL_9;
  }
  if (v4) {
LABEL_30:
  }
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSY_EEEDcSQ_DpT0_(unsigned int **a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  __n128 result = *a3;
  *uint64_t v4 = *a3;
  v4[1].n128_u32[2] = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[6];
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5)
  {
    __n128 result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v5])(&v14, result);
LABEL_9:
    v4[6] = -1;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v10;
    uint64_t v11 = a3[1];
    a3[1] = 0;
    *((void *)v4 + objc_destroyWeak(this + 1) = v11;
    v4[4] = *((_DWORD *)a3 + 4);
    v4[6] = 0;
    return result;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = *(WTF::StringImpl **)a2;
  *(void *)a2 = v7;
  if (!v8) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_6:
    uint64_t v9 = a3[1];
    a3[1] = 0;
    __n128 result = *(unsigned int **)(a2 + 8);
    *(void *)(a2 + 8) = v9;
    if (!result) {
      goto LABEL_14;
    }
LABEL_11:
    if (*result == 2) {
      __n128 result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
    }
    else {
      *result -= 2;
    }
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v8, (StringImpl *)a2);
  uint64_t v12 = a3[1];
  a3[1] = 0;
  __n128 result = *(unsigned int **)(a2 + 8);
  *(void *)(a2 + 8) = v12;
  if (result) {
    goto LABEL_11;
  }
LABEL_14:
  __int16 v13 = *((_WORD *)a3 + 8);
  *(unsigned char *)(a2 + 18) = *((unsigned char *)a3 + 18);
  *(_WORD *)(a2 + ++*(_DWORD *)(this - 16) = v13;
  return result;
}

void sub_1E145A68C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145A880(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145AA78(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145ADDC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145B110(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145B284(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

void sub_1E145B4B8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  _Unwind_Resume(a1);
}

void WebPaymentCoordinatorClient::validatedPaymentNetwork(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebPaymentCoordinatorClient::canMakePayments(WebPaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C7D348;
  v5[1] = v4;
  uint64_t v7 = v5;
  WTF::callOnMainThread();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_1E145B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPaymentCoordinatorClient::openPaymentSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C7D370;
  v5[1] = v4;
  uint64_t v7 = v5;
  WTF::callOnMainThread();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_1E145B744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPaymentCoordinatorClient::showPaymentUI()
{
  return 0;
}

uint64_t WebCore::PaymentCoordinatorClient::isMockPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebCore::PaymentCoordinatorClient::isWebPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

WTF *WebCore::PaymentCoordinatorClient::getSetupFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v4 + 16))(v4, &v10);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (HIDWORD(v11))
  {
    int v6 = v10;
    uint64_t v7 = 8 * HIDWORD(v11);
    do
    {
      uint64_t v8 = *(_DWORD **)v6;
      *(void *)int v6 = 0;
      if (v8)
      {
        if (v8[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
        }
        else {
          --v8[2];
        }
      }
      int v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t result = v10;
  if (v10)
  {
    uint64_t v10 = 0;
    LODWORD(v1objc_destroyWeak(this + 1) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_1E145B8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PaymentCoordinatorClient::beginApplePaySetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  int v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
  return v6(v5);
}

void sub_1E145B9B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      int v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F3C7D348;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1F3C7D348;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
  return v2(v1);
}

void sub_1E145BBF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F3C7D370;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1F3C7D370;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
  return v2(v1);
}

void sub_1E145BD98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *allScriptsInPDFDocument(CGPDFDocument *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (a1)
  {
    Catalog = CGPDFDocumentGetCatalog(a1);
    if (Catalog)
    {
      CGPDFDictionaryRef value = 0;
      if (CGPDFDictionaryGetDictionary(Catalog, "Names", &value))
      {
        CGPDFDictionaryRef v27 = 0;
        if (CGPDFDictionaryGetDictionary(value, "JavaScript", &v27))
        {
          char v25 = 0;
          uint64_t v26 = 0;
          appendValuesInPDFNameSubtreeToVector(v27, (uint64_t)&v25);
          uint64_t v5 = HIDWORD(v26);
          int v6 = v25;
          if (HIDWORD(v26))
          {
            uint64_t v7 = (CGPDFObjectRef *)v25;
            uint64_t v8 = "JS";
            while (1)
            {
              CGPDFDictionaryRef dict = 0;
              if (CGPDFObjectGetValue(*v7, kCGPDFObjectTypeDictionary, &dict))
              {
                __s1 = 0;
                if (CGPDFDictionaryGetName(dict, "S", (const char **)&__s1) && !strcmp(__s1, "JavaScript"))
                {
                  CGPDFStringRef string = 0;
                  CGPDFStreamRef stream = 0;
                  if (CGPDFDictionaryGetStream(dict, v8, &stream))
                  {
                    CGPDFDataFormat format = CGPDFDataFormatRaw;
                    CFDataRef v9 = CGPDFStreamCopyData(stream, &format);
                    CFDataRef v10 = v9;
                    if (v9)
                    {
                      BytePtr = CFDataGetBytePtr(v9);
                      uint64_t Length = CFDataGetLength(v10);
                      if (BytePtr)
                      {
LABEL_17:
                        if (Length)
                        {
                          __int16 v13 = v6;
                          char v14 = v8;
                          BOOL v15 = Length >= 2 && *BytePtr == 254 && BytePtr[1] == 255;
                          id v16 = [NSString alloc];
                          if (v15) {
                            uint64_t v17 = 10;
                          }
                          else {
                            uint64_t v17 = 4;
                          }
                          uint64_t v18 = (const void *)[v16 initWithBytes:BytePtr length:Length encoding:v17];
                          uint64_t v8 = v14;
                          int v6 = v13;
                          if (v18)
                          {
                            [v2 addObject:v18];
                            CFRelease(v18);
                          }
                        }
                      }
LABEL_27:
                      if (v10) {
                        CFRelease(v10);
                      }
                    }
                  }
                  else if (CGPDFDictionaryGetString(dict, v8, &string))
                  {
                    BytePtr = CGPDFStringGetBytePtr(string);
                    uint64_t Length = CGPDFStringGetLength(string);
                    CFDataRef v10 = 0;
                    if (BytePtr) {
                      goto LABEL_17;
                    }
                    goto LABEL_27;
                  }
                }
              }
              ++v7;
              if (!--v5) {
                goto LABEL_30;
              }
            }
          }
          if (v25) {
LABEL_30:
          }
            WTF::fastFree(v6, v4);
        }
      }
    }
  }
  return v2;
}

void sub_1E145C01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15)
{
  CFRelease(v16);
  if (v15)
  {
    CFRelease(v15);
    int v19 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    int v19 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  WTF::fastFree(v19, v18);
  _Unwind_Resume(a1);
}

unint64_t appendValuesInPDFNameSubtreeToVector(CGPDFDictionary *a1, uint64_t a2)
{
  CGPDFArrayRef value = 0;
  if (CGPDFDictionaryGetArray(a1, "Names", &value))
  {
    unint64_t result = CGPDFArrayGetCount(value);
    if (result >= 2)
    {
      unint64_t v5 = result >> 1;
      size_t v6 = 1;
      do
      {
        while (1)
        {
          CGPDFObjectRef array = 0;
          unint64_t result = CGPDFArrayGetObject(value, v6, &array);
          uint64_t v8 = *(unsigned int *)(a2 + 12);
          if (v8 != *(_DWORD *)(a2 + 8)) {
            break;
          }
          unint64_t result = WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)&array);
          uint64_t v7 = *(unsigned int *)(a2 + 12);
          *(void *)(*(void *)a2 + 8 * v7) = *(void *)result;
          *(_DWORD *)(a2 + 12) = v7 + 1;
          v6 += 2;
          if (!--v5) {
            return result;
          }
        }
        *(void *)(*(void *)a2 + 8 * v8) = array;
        *(_DWORD *)(a2 + 12) = v8 + 1;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    CGPDFObjectRef array = 0;
    unint64_t result = CGPDFDictionaryGetArray(a1, "Kids", &array);
    if (result)
    {
      unint64_t result = CGPDFArrayGetCount(array);
      if (result)
      {
        unint64_t v9 = result;
        for (size_t i = 0; i != v9; ++i)
        {
          CGPDFDictionaryRef v11 = 0;
          unint64_t result = CGPDFArrayGetDictionary(array, i, &v11);
          if (result) {
            unint64_t result = appendValuesInPDFNameSubtreeToVector(v11, a2);
          }
        }
      }
    }
  }
  return result;
}

CGColorRef createCGColorWithDeviceWhite(CGFloat a1, CGFloat a2, CGColorRef *a3)
{
  components[2] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (byte_1EAD80192 == 1)
  {
    DeviceGray = (CGColorSpace *)qword_1EAD801A8;
  }
  else
  {
    double v6 = a1;
    double v7 = a2;
    DeviceGray = CGColorSpaceCreateDeviceGray();
    a1 = v6;
    a2 = v7;
    qword_1EAD801A8 = (uint64_t)DeviceGray;
    byte_1EAD80192 = 1;
  }
  components[0] = a1;
  components[1] = a2;
  CGColorRef result = CGColorCreate(DeviceGray, components);
  *a3 = result;
  return result;
}

void sub_1E145C660(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a15 & 0x8000000000000) != 0)
  {
    uint64_t v17 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t comparePageRects(CGRect *a1, CGRect *a2)
{
  if (CGRectIntersectsRect(*a2, *a1)) {
    return 0;
  }
  double MinY = CGRectGetMinY(*a1);
  if (MinY > CGRectGetMaxY(*a2)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1E145CE1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      CFRelease(v10);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    CFRelease(v10);
    _Unwind_Resume(a1);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1E145D0BC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D0D0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D0E4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D0F8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D10C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D120(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D134(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D148(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, unsigned int *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(a10);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      CFRelease(v10);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    CFRelease(v10);
    _Unwind_Resume(a1);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

unsigned int *WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    OpaqueJSString::~OpaqueJSString((OpaqueJSString *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

void sub_1E145D520(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E145D938(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145DB78(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, unsigned int *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(a10);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E145DCF8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E145E108(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E145E670(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,WTF::StringImpl *a57,WTF::StringImpl *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a56) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a17, a2);
  }
  int v65 = a58;
  a58 = 0;
  if (v65)
  {
    if (*((_DWORD *)v65 + 6) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v65 + 24))(v65);
    }
    else {
      --*((_DWORD *)v65 + 6);
    }
  }
  MEMORY[0x1E4E460A0](&a63);
  uint64_t v66 = *(_DWORD **)(v63 - 56);
  *(void *)(v63 - 56) = 0;
  if (v66)
  {
    if (v66[4] != 1)
    {
      --v66[4];
      _Unwind_Resume(a1);
    }
    (*(void (**)(_DWORD *))(*(void *)v66 + 8))(v66);
  }
  _Unwind_Resume(a1);
}

void sub_1E145E7C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,WebCore::WindowProxy *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a63, v64);
  int v65 = a58;
  a58 = 0;
  if (v65)
  {
    WTF::RefCounted<WebCore::WindowProxy>::deref(v65);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1E145E7ACLL);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      double v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (v6[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[4];
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  double v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(WebCore::PrivateClickMeasurement *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      if (!*((unsigned char *)this + 296)) {
        goto LABEL_20;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  if (!*((unsigned char *)this + 296)) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      uint64_t v5 = (WTF::StringImpl *)*((void *)this + 35);
      *((void *)this + 35) = 0;
      if (!v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    *(_DWORD *)v4 -= 2;
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (!v5)
  {
LABEL_15:
    double v6 = (WTF::StringImpl *)*((void *)this + 34);
    *((void *)this + 34) = 0;
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_13:
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v5, a2);
  double v6 = (WTF::StringImpl *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (!v6) {
    goto LABEL_20;
  }
LABEL_18:
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, a2);
    double v7 = (WTF::StringImpl *)*((void *)this + 33);
    *((void *)this + 33) = 0;
    if (!v7) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  *(_DWORD *)v6 -= 2;
LABEL_20:
  double v7 = (WTF::StringImpl *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (!v7) {
    goto LABEL_24;
  }
LABEL_21:
  if (*(_DWORD *)v7 == 2) {
    WTF::StringImpl::destroy(v7, a2);
  }
  else {
    *(_DWORD *)v7 -= 2;
  }
LABEL_24:
  uint64_t v8 = (const void *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v8) {
    CFRelease(v8);
  }
  unint64_t v9 = (const void *)*((void *)this + 31);
  *((void *)this + 3objc_destroyWeak(this + 1) = 0;
  if (v9) {
    CFRelease(v9);
  }
  CFDataRef v10 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v10) {
    CFRelease(v10);
  }
  if (!*((unsigned char *)this + 232) || (CGPDFDictionaryRef v11 = (WTF::StringImpl *)*((void *)this + 28), *((void *)this + 28) = 0, !v11))
  {
LABEL_34:
    if (!*((unsigned char *)this + 184)) {
      goto LABEL_81;
    }
    goto LABEL_35;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_34;
  }
  WTF::StringImpl::destroy(v11, a2);
  if (!*((unsigned char *)this + 184)) {
    goto LABEL_81;
  }
LABEL_35:
  if (!*((unsigned char *)this + 176)) {
    goto LABEL_53;
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 2objc_destroyWeak(this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, a2);
      __int16 v13 = (WTF::StringImpl *)*((void *)this + 20);
      *((void *)this + 20) = 0;
      if (!v13) {
        goto LABEL_48;
      }
      goto LABEL_46;
    }
    *(_DWORD *)v12 -= 2;
  }
  __int16 v13 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (!v13)
  {
LABEL_48:
    char v14 = (WTF::StringImpl *)*((void *)this + 19);
    *((void *)this + 19) = 0;
    if (!v14) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
LABEL_46:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_48;
  }
  WTF::StringImpl::destroy(v13, a2);
  char v14 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (!v14) {
    goto LABEL_53;
  }
LABEL_51:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, a2);
    if (!*((unsigned char *)this + 144)) {
      goto LABEL_64;
    }
    goto LABEL_54;
  }
  *(_DWORD *)v14 -= 2;
LABEL_53:
  if (!*((unsigned char *)this + 144)) {
    goto LABEL_64;
  }
LABEL_54:
  BOOL v15 = (WTF::StringImpl *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, a2);
      id v16 = (const void *)*((void *)this + 16);
      *((void *)this + ++*(_DWORD *)(this - 16) = 0;
      if (!v16) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    *(_DWORD *)v15 -= 2;
  }
  id v16 = (const void *)*((void *)this + 16);
  *((void *)this + ++*(_DWORD *)(this - 16) = 0;
  if (v16) {
LABEL_58:
  }
    CFRelease(v16);
LABEL_59:
  uint64_t v17 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = (const void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v18) {
    CFRelease(v18);
  }
LABEL_64:
  if (!*((unsigned char *)this + 104) || (int v19 = (WTF::StringImpl *)*((void *)this + 12), *((void *)this + 12) = 0, !v19))
  {
LABEL_68:
    if (!*((unsigned char *)this + 88)) {
      goto LABEL_77;
    }
    goto LABEL_69;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_68;
  }
  WTF::StringImpl::destroy(v19, a2);
  if (!*((unsigned char *)this + 88)) {
    goto LABEL_77;
  }
LABEL_69:
  uint64_t v20 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, a2);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
LABEL_77:
  if (*((unsigned char *)this + 72))
  {
    uint64_t v21 = (WTF::StringImpl *)*((void *)this + 8);
    *((void *)this + 8) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, a2);
        unsigned int v22 = (WTF::StringImpl *)*((void *)this + 2);
        *((void *)this + 2) = 0;
        if (!v22) {
          goto LABEL_85;
        }
        goto LABEL_82;
      }
      *(_DWORD *)v21 -= 2;
    }
  }
LABEL_81:
  unsigned int v22 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v22) {
    goto LABEL_85;
  }
LABEL_82:
  if (*(_DWORD *)v22 == 2) {
    WTF::StringImpl::destroy(v22, a2);
  }
  else {
    *(_DWORD *)v22 -= 2;
  }
LABEL_85:
  uint64_t v23 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
}

unint64_t WTF::Vector<CGRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 32 * v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 27) {
        goto LABEL_30;
      }
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      int v19 = (void *)WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      memcpy(v19, v5, 32 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 27))
    {
      CGPDFDictionaryRef v11 = (void *)WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      memcpy(v11, v5, 32 * v6);
      __int16 v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        __int16 v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (void)v5) >> 5);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1E145EEA0);
  }
  __int16 v13 = *(void **)a1;
  return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (void)v5) >> 5);
}

void sub_1E145EF48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a9 & 0x8000000000000) != 0)
  {
    CGPDFDictionaryRef v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::initializeIfNecessary(WebPlatformStrategies *this)
{
  if (!WebPlatformStrategies::initializeIfNecessary(void)::platformStrategies) {
    operator new();
  }
}

WebResourceLoadScheduler *WebPlatformStrategies::createLoaderStrategy(WebPlatformStrategies *this)
{
  uint64_t v1 = (WebResourceLoadScheduler *)WTF::fastMalloc((WTF *)0x58);
  WebResourceLoadScheduler::WebResourceLoadScheduler(v1);
  return v1;
}

void sub_1E145F09C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPlatformStrategies::createPasteboardStrategy(WebPlatformStrategies *this)
{
  return (uint64_t)this + 56;
}

void WebPlatformStrategies::createMediaStrategy(WebPlatformStrategies *this)
{
}

void sub_1E145F114(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E4B240](v1, 0x1081C40C20BADFCLL);
  _Unwind_Resume(a1);
}

void WebPlatformStrategies::createBlobRegistry(WebPlatformStrategies *this)
{
}

void WebPlatformStrategies::getTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::getTypes();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E145F204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::getTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::getTypes();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E145F270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::bufferForType(const WTF::String *a1@<X1>, uint64_t a2@<X2>, atomic_uint **a3@<X8>)
{
  MEMORY[0x1E4E46BF0](&cf, a2);
  WebCore::PlatformPasteboard::bufferForType(v9, (WebCore::PlatformPasteboard *)&cf, a1);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = v10;
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *a3 = v7;
  WebCore::PasteboardBuffer::~PasteboardBuffer((WebCore::PasteboardBuffer *)v9, v5);
}

void sub_1E145F300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::bufferForType(const WTF::String *a1@<X1>, uint64_t a2@<X2>, atomic_uint **a3@<X8>)
{
  MEMORY[0x1E4E46BF0](&cf, a2);
  WebCore::PlatformPasteboard::bufferForType(v9, (WebCore::PlatformPasteboard *)&cf, a1);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = v10;
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *a3 = v7;
  WebCore::PasteboardBuffer::~PasteboardBuffer((WebCore::PasteboardBuffer *)v9, v5);
}

void sub_1E145F390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::getPathnamesForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  WebCore::PlatformPasteboard::getPathnamesForType();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145F404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::getPathnamesForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  WebCore::PlatformPasteboard::getPathnamesForType();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145F478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::allStringsForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::allStringsForType((WebCore::PlatformPasteboard *)&cf, a2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::allStringsForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::allStringsForType((WebCore::PlatformPasteboard *)&cf, a2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145F560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::stringForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::stringForType((WebCore::PlatformPasteboard *)&cf, a2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145F5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::stringForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::stringForType((WebCore::PlatformPasteboard *)&cf, a2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145F648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::changeCount()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E145F6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::changeCount()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E145F718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::color()
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::color((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v0 = cf;
  CFTypeRef cf = 0;
  if (v0) {
    CFRelease(v0);
  }
}

void sub_1E145F780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::color()
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::color((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v0 = cf;
  CFTypeRef cf = 0;
  if (v0) {
    CFRelease(v0);
  }
}

void sub_1E145F7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::url()
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::url((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v0 = cf;
  CFTypeRef cf = 0;
  if (v0) {
    CFRelease(v0);
  }
}

void sub_1E145F850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::url()
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::url((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v0 = cf;
  CFTypeRef cf = 0;
  if (v0) {
    CFRelease(v0);
  }
}

void sub_1E145F8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::addTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::addTypes();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145F92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::addTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::addTypes();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145F9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::setTypes();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145FA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::setTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::setTypes();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145FA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setBufferForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  uint64_t v4 = WebCore::PlatformPasteboard::setBufferForType();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

void sub_1E145FB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::setBufferForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  uint64_t v4 = WebCore::PlatformPasteboard::setBufferForType();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

void sub_1E145FB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::setURL();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145FBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::setURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::setURL();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145FC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::setColor();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145FCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::setColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::setColor();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E145FD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setStringForType(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  uint64_t v6 = WebCore::PlatformPasteboard::setStringForType((WebCore::PlatformPasteboard *)&cf, a2, a3);
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  return v6;
}

void sub_1E145FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::setStringForType(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  uint64_t v6 = WebCore::PlatformPasteboard::setStringForType((WebCore::PlatformPasteboard *)&cf, a2, a3);
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  return v6;
}

void sub_1E145FE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::getNumberOfFiles()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::numberOfFiles((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E145FEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::getNumberOfFiles()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::numberOfFiles((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E145FF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::typesSafeForDOMToReadAndWrite(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite((WebCore::PlatformPasteboard *)&cf, a3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::typesSafeForDOMToReadAndWrite(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite((WebCore::PlatformPasteboard *)&cf, a3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E145FFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::writeCustomData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::write();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E146006C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::writeCustomData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  uint64_t v3 = WebCore::PlatformPasteboard::write();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E14600E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::containsStringSafeForDOMToReadForType(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v4 = WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType((WebCore::PlatformPasteboard *)&cf, a3);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

void sub_1E1460150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::containsStringSafeForDOMToReadForType(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v4 = WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType((WebCore::PlatformPasteboard *)&cf, a3);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

void sub_1E14601C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::informationForItemAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::informationForItemAtIndex((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E1460244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::informationForItemAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::informationForItemAtIndex((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E14602C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::allPasteboardItemInfo()
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v0 = cf;
  CFTypeRef cf = 0;
  if (v0) {
    CFRelease(v0);
  }
}

void sub_1E1460338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::allPasteboardItemInfo()
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v0 = cf;
  CFTypeRef cf = 0;
  if (v0) {
    CFRelease(v0);
  }
}

void sub_1E14603A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::getPasteboardItemsCount()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::count((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E1460410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::getPasteboardItemsCount()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::count((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E1460478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::readBufferFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1E4E46BF0](&cf, a5);
  WebCore::PlatformPasteboard::readBuffer();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1E1460504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::readBufferFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1E4E46BF0](&cf, a5);
  WebCore::PlatformPasteboard::readBuffer();
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1E1460590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::readURLFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::readURL((WebCore::PlatformPasteboard *)&cf, a2, a4);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1E1460614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::readURLFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::readURL((WebCore::PlatformPasteboard *)&cf, a2, a4);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1E1460698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::readStringFromPasteboard(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  WebCore::PlatformPasteboard::readString((WebCore::PlatformPasteboard *)&cf, a2, a3);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1E146071C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::readStringFromPasteboard(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  WebCore::PlatformPasteboard::readString((WebCore::PlatformPasteboard *)&cf, a2, a3);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1E14607A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::containsURLStringSuitableForLoading()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::containsURLStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E1460808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebPlatformStrategies::containsURLStringSuitableForLoading()
{
  MEMORY[0x1E4E46BF0](&cf);
  uint64_t v0 = WebCore::PlatformPasteboard::containsURLStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v0;
}

void sub_1E1460870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::urlStringSuitableForLoading(uint64_t a1, uint64_t a2, WTF::String *a3)
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::urlStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf, a3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E14608E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::urlStringSuitableForLoading(uint64_t a1, uint64_t a2, WTF::String *a3)
{
  MEMORY[0x1E4E46BF0](&cf);
  WebCore::PlatformPasteboard::urlStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf, a3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E1460950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::write();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::write();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::write();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E14609BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::write();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::write();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::write();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E1460A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1460A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1460B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1460B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1460BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::writeToPasteboard(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  WebCore::PlatformPasteboard::write((WebCore::PlatformPasteboard *)&cf, a2, a3);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1E1460C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::writeToPasteboard(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  MEMORY[0x1E4E46BF0](&cf, a4);
  WebCore::PlatformPasteboard::write((WebCore::PlatformPasteboard *)&cf, a2, a3);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1E1460CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::updateSupportedTypeIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E1460D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebPlatformStrategies::updateSupportedTypeIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E4E46BF0](&cf, a3);
  WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1E1460D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::~WebPlatformStrategies(WebPlatformStrategies *this)
{
}

uint64_t WebPlatformStrategies::createPushStrategy(WebPlatformStrategies *this)
{
  return 0;
}

void non-virtual thunk to'WebPlatformStrategies::~WebPlatformStrategies(WebPlatformStrategies *this)
{
}

uint64_t WebMediaStrategy::createAudioDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F416E4C0](a2, a3, a4, a5);
}

void WebMediaStrategy::~WebMediaStrategy(WebMediaStrategy *this)
{
  WebCore::MediaStrategy::~MediaStrategy(this);
  JUMPOUT(0x1E4E4B240);
}

uint64_t WebBlobRegistry::registerInternalFileBlobURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F416E548](a1 + 8, a2, a3, a5);
}

uint64_t WebBlobRegistry::registerInternalBlobURL(uint64_t a1)
{
  return MEMORY[0x1F416E538](a1 + 8);
}

uint64_t WebBlobRegistry::registerBlobURL(uint64_t a1)
{
  return MEMORY[0x1F416E518](a1 + 8);
}

void WebBlobRegistry::registerInternalBlobURLOptionallyFileBacked()
{
  memset(v1, 0, sizeof(v1));
  __int16 v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  __int16 v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 7;
  WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked();
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)v1, v0);
}

void sub_1E1460EB4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebBlobRegistry::registerInternalBlobURLForSlice(WebBlobRegistry *this, const URL *a2, const URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  return MEMORY[0x1F416E550]((char *)this + 8, a2, a3, a4, a5, a6);
}

uint64_t WebBlobRegistry::unregisterBlobURL(uint64_t a1)
{
  return MEMORY[0x1F416E520](a1 + 8);
}

uint64_t WebBlobRegistry::registerBlobURLHandle(uint64_t a1)
{
  return MEMORY[0x1F416E528](a1 + 8);
}

uint64_t WebBlobRegistry::unregisterBlobURLHandle(uint64_t a1)
{
  return MEMORY[0x1F416E540](a1 + 8);
}

uint64_t WebBlobRegistry::blobType(WebBlobRegistry *this, const URL *a2)
{
  return MEMORY[0x1F416E570]((char *)this + 8, a2);
}

uint64_t WebBlobRegistry::blobSize(WebBlobRegistry *this, const URL *a2)
{
  return MEMORY[0x1F416E568]((char *)this + 8, a2);
}

uint64_t WebBlobRegistry::writeBlobsToTemporaryFilesForIndexedDB(uint64_t a1)
{
  return MEMORY[0x1F416E558](a1 + 8);
}

uint64_t WebBlobRegistry::blobRegistryImpl(WebBlobRegistry *this)
{
  return (uint64_t)this + 8;
}

void WebBlobRegistry::~WebBlobRegistry(WebBlobRegistry *this)
{
  MEMORY[0x1E4E45FE0]((char *)this + 8);
  WebCore::BlobRegistry::~BlobRegistry(this);
}

{
  uint64_t vars8;

  MEMORY[0x1E4E45FE0]((char *)this + 8);
  WebCore::BlobRegistry::~BlobRegistry(this);
  JUMPOUT(0x1E4E4B240);
}

void WebCore::PolicyContainer::~PolicyContainer(WebCore::PolicyContainer *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (WTF::StringImpl *)*((void *)this + 7);
      *((void *)this + 7) = 0;
      if (!v4) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (!v4)
  {
LABEL_9:
    __int16 v5 = (WTF::StringImpl *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v4, a2);
  __int16 v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v5) {
    goto LABEL_14;
  }
LABEL_12:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (!v6) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  *(_DWORD *)v5 -= 2;
LABEL_14:
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (!v6)
  {
LABEL_19:
    uint64_t v7 = *((unsigned int *)this + 3);
    if (!v7) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v6, a2);
  uint64_t v7 = *((unsigned int *)this + 3);
  if (!v7) {
    goto LABEL_28;
  }
LABEL_22:
  char v8 = *(WTF::StringImpl ***)this;
  uint64_t v9 = 16 * v7;
  do
  {
    unint64_t v10 = *v8;
    *char v8 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, a2);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
LABEL_28:
  CGPDFDictionaryRef v11 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v11, a2);
  }
}

void WebCore::PasteboardBuffer::~PasteboardBuffer(WebCore::PasteboardBuffer *this, StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3 || atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) != 1)
  {
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  atomic_store(1u, (unsigned int *)v3);
  uint64_t v6 = *(unsigned int *)(v3 + 20);
  if (v6)
  {
    uint64_t v7 = 16 * v6;
    char v8 = (unsigned int **)(*(void *)(v3 + 8) + 8);
    do
    {
      uint64_t v9 = *v8;
      *char v8 = 0;
      if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        uint64_t v13 = v7;
        unint64_t v14 = v8;
        atomic_store(1u, v9);
        unint64_t v15 = (WTF *)v9;
        uint64_t v10 = v9[6];
        if (v10 != -1) {
          ((void (*)(char *, unsigned int *))off_1F3C7D6A0[v10])(&v16, v9 + 2);
        }
        *((_DWORD *)v15 + 6) = -1;
        WTF::fastFree(v15, a2);
        uint64_t v7 = v13;
        char v8 = v14;
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  CGPDFDictionaryRef v11 = *(WTF **)(v3 + 8);
  if ((WTF *)(v3 + 24) != v11 && v11 != 0)
  {
    *(void *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + ++*(_DWORD *)(this - 16) = 0;
    WTF::fastFree(v11, a2);
  }
  WTF::fastFree((WTF *)v3, a2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
LABEL_4:
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
LABEL_7:
  __int16 v5 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

void WebPluginInfoProvider::~WebPluginInfoProvider(WebPluginInfoProvider *this)
{
  WebCore::PluginInfoProvider::~PluginInfoProvider(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebPluginInfoProvider::refreshPlugins(WebPluginInfoProvider *this)
{
  id v1 = +[WebPluginDatabase sharedDatabaseIfExists];
  return [v1 refresh];
}

void WebPluginInfoProvider::pluginInfo(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebPluginInfoProvider::webVisiblePluginInfo(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1E1461AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  objc_begin_catch(exception_object);

  objc_end_catch();
  return 0;
}

void sub_1E146550C(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v7 = *(WTF::StringImpl **)(v6 - 112);
  if (**(_DWORD **)(v6 - 136) == 2) {
    WTF::StringImpl::destroy(*(WTF::StringImpl **)(v6 - 136), a2);
  }
  else {
    **(_DWORD **)(v6 - 136) -= 2;
  }
  if (*(void *)(v6 - 128))
  {
    if (**(_DWORD **)(v6 - 128) == 2) {
      WTF::StringImpl::destroy(*(WTF::StringImpl **)(v6 - 128), a2);
    }
    else {
      **(_DWORD **)(v6 - 128) -= 2;
    }
  }
  if (*(void *)(v6 - 120))
  {
    if (**(_DWORD **)(v6 - 120) == 2) {
      WTF::StringImpl::destroy(*(WTF::StringImpl **)(v6 - 120), a2);
    }
    else {
      **(_DWORD **)(v6 - 120) -= 2;
    }
  }
  if (*(void *)(v6 - 104))
  {
    if (**(_DWORD **)(v6 - 104) == 2)
    {
      WTF::StringImpl::destroy(*(WTF::StringImpl **)(v6 - 104), a2);
      if (!v5) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    **(_DWORD **)(v6 - 104) -= 2;
  }
  if (!v5) {
    goto LABEL_22;
  }
LABEL_18:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    if (!v3) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  *(_DWORD *)v5 -= 2;
LABEL_22:
  if (!v3) {
    goto LABEL_27;
  }
LABEL_23:
  if (*(_DWORD *)v3 == 2)
  {
    WTF::StringImpl::destroy(v3, a2);
    if (!v4) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  *(_DWORD *)v3 -= 2;
LABEL_27:
  if (!v4) {
    goto LABEL_32;
  }
LABEL_28:
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, a2);
    if (v7) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  *(_DWORD *)v4 -= 2;
LABEL_32:
  if (v7)
  {
LABEL_33:
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
LABEL_36:
  if (*v2 == 2) {
    WTF::StringImpl::destroy(MEMORY[0x1E4F30960], a2);
  }
  else {
    *v2 -= 2;
  }
  if (*v2 == 2)
  {
    WTF::StringImpl::destroy(MEMORY[0x1E4F30960], a2);
    _Unwind_Resume(a1);
  }
  *v2 -= 2;
  _Unwind_Resume(a1);
}

void sub_1E1465A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1E1467668(_Unwind_Exception *exception_object)
{
}

void sub_1E1467674(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1E146766CLL);
}

void sub_1E1468708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14688A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1E14688EC(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1E146CF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef a22,CFTypeRef a23,CFTypeRef a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,CFTypeRef a32,CFTypeRef a33,CFTypeRef a34,CFTypeRef a35,CFTypeRef a36,CFTypeRef a37,CFTypeRef a38,CFTypeRef a39,CFTypeRef a40,CFTypeRef a41,CFTypeRef a42,CFTypeRef a43,CFTypeRef a44,CFTypeRef a45,CFTypeRef a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef a49,CFTypeRef a50,CFTypeRef a51,CFTypeRef a52,CFTypeRef a53,CFTypeRef a54,CFTypeRef a55,CFTypeRef a56,CFTypeRef a57,CFTypeRef a58,CFTypeRef a59,CFTypeRef a60,CFTypeRef a61,CFTypeRef a62,CFTypeRef a63)
{
  if (v77)
  {
    CFRelease(v77);
    if (!v76)
    {
LABEL_3:
      if (!v75) {
        goto LABEL_4;
      }
      goto LABEL_200;
    }
  }
  else if (!v76)
  {
    goto LABEL_3;
  }
  CFRelease(v76);
  if (!v75)
  {
LABEL_4:
    if (!v74) {
      goto LABEL_5;
    }
    goto LABEL_201;
  }
LABEL_200:
  CFRelease(v75);
  if (!v74)
  {
LABEL_5:
    if (!v73) {
      goto LABEL_6;
    }
    goto LABEL_202;
  }
LABEL_201:
  CFRelease(v74);
  if (!v73)
  {
LABEL_6:
    if (!v72) {
      goto LABEL_7;
    }
    goto LABEL_203;
  }
LABEL_202:
  CFRelease(v73);
  if (!v72)
  {
LABEL_7:
    if (!v79) {
      goto LABEL_8;
    }
    goto LABEL_204;
  }
LABEL_203:
  CFRelease(v72);
  if (!v79)
  {
LABEL_8:
    if (!v78) {
      goto LABEL_9;
    }
    goto LABEL_205;
  }
LABEL_204:
  CFRelease(v79);
  if (!v78)
  {
LABEL_9:
    if (!cf) {
      goto LABEL_10;
    }
    goto LABEL_206;
  }
LABEL_205:
  CFRelease(v78);
  if (!cf)
  {
LABEL_10:
    if (!a13) {
      goto LABEL_11;
    }
    goto LABEL_207;
  }
LABEL_206:
  CFRelease(cf);
  if (!a13)
  {
LABEL_11:
    if (!a14) {
      goto LABEL_12;
    }
    goto LABEL_208;
  }
LABEL_207:
  CFRelease(a13);
  if (!a14)
  {
LABEL_12:
    if (!a15) {
      goto LABEL_13;
    }
    goto LABEL_209;
  }
LABEL_208:
  CFRelease(a14);
  if (!a15)
  {
LABEL_13:
    if (!a16) {
      goto LABEL_14;
    }
    goto LABEL_210;
  }
LABEL_209:
  CFRelease(a15);
  if (!a16)
  {
LABEL_14:
    if (!a17) {
      goto LABEL_15;
    }
    goto LABEL_211;
  }
LABEL_210:
  CFRelease(a16);
  if (!a17)
  {
LABEL_15:
    if (!a18) {
      goto LABEL_16;
    }
    goto LABEL_212;
  }
LABEL_211:
  CFRelease(a17);
  if (!a18)
  {
LABEL_16:
    if (!a19) {
      goto LABEL_17;
    }
    goto LABEL_213;
  }
LABEL_212:
  CFRelease(a18);
  if (!a19)
  {
LABEL_17:
    if (!a20) {
      goto LABEL_18;
    }
    goto LABEL_214;
  }
LABEL_213:
  CFRelease(a19);
  if (!a20)
  {
LABEL_18:
    if (!a21) {
      goto LABEL_19;
    }
    goto LABEL_215;
  }
LABEL_214:
  CFRelease(a20);
  if (!a21)
  {
LABEL_19:
    if (!a22) {
      goto LABEL_20;
    }
    goto LABEL_216;
  }
LABEL_215:
  CFRelease(a21);
  if (!a22)
  {
LABEL_20:
    if (!a23) {
      goto LABEL_21;
    }
    goto LABEL_217;
  }
LABEL_216:
  CFRelease(a22);
  if (!a23)
  {
LABEL_21:
    if (!a24) {
      goto LABEL_22;
    }
    goto LABEL_218;
  }
LABEL_217:
  CFRelease(a23);
  if (!a24)
  {
LABEL_22:
    if (!a25) {
      goto LABEL_23;
    }
    goto LABEL_219;
  }
LABEL_218:
  CFRelease(a24);
  if (!a25)
  {
LABEL_23:
    if (!a26) {
      goto LABEL_24;
    }
    goto LABEL_220;
  }
LABEL_219:
  CFRelease(a25);
  if (!a26)
  {
LABEL_24:
    if (!a27) {
      goto LABEL_25;
    }
    goto LABEL_221;
  }
LABEL_220:
  CFRelease(a26);
  if (!a27)
  {
LABEL_25:
    if (!a28) {
      goto LABEL_26;
    }
    goto LABEL_222;
  }
LABEL_221:
  CFRelease(a27);
  if (!a28)
  {
LABEL_26:
    if (!a29) {
      goto LABEL_27;
    }
    goto LABEL_223;
  }
LABEL_222:
  CFRelease(a28);
  if (!a29)
  {
LABEL_27:
    if (!a30) {
      goto LABEL_28;
    }
    goto LABEL_224;
  }
LABEL_223:
  CFRelease(a29);
  if (!a30)
  {
LABEL_28:
    if (!a31) {
      goto LABEL_29;
    }
    goto LABEL_225;
  }
LABEL_224:
  CFRelease(a30);
  if (!a31)
  {
LABEL_29:
    if (!a32) {
      goto LABEL_30;
    }
    goto LABEL_226;
  }
LABEL_225:
  CFRelease(a31);
  if (!a32)
  {
LABEL_30:
    if (!a33) {
      goto LABEL_31;
    }
    goto LABEL_227;
  }
LABEL_226:
  CFRelease(a32);
  if (!a33)
  {
LABEL_31:
    if (!a34) {
      goto LABEL_32;
    }
    goto LABEL_228;
  }
LABEL_227:
  CFRelease(a33);
  if (!a34)
  {
LABEL_32:
    if (!a35) {
      goto LABEL_33;
    }
    goto LABEL_229;
  }
LABEL_228:
  CFRelease(a34);
  if (!a35)
  {
LABEL_33:
    if (!a36) {
      goto LABEL_34;
    }
    goto LABEL_230;
  }
LABEL_229:
  CFRelease(a35);
  if (!a36)
  {
LABEL_34:
    if (!a37) {
      goto LABEL_35;
    }
    goto LABEL_231;
  }
LABEL_230:
  CFRelease(a36);
  if (!a37)
  {
LABEL_35:
    if (!a38) {
      goto LABEL_36;
    }
    goto LABEL_232;
  }
LABEL_231:
  CFRelease(a37);
  if (!a38)
  {
LABEL_36:
    if (!a39) {
      goto LABEL_37;
    }
    goto LABEL_233;
  }
LABEL_232:
  CFRelease(a38);
  if (!a39)
  {
LABEL_37:
    if (!a40) {
      goto LABEL_38;
    }
    goto LABEL_234;
  }
LABEL_233:
  CFRelease(a39);
  if (!a40)
  {
LABEL_38:
    if (!a41) {
      goto LABEL_39;
    }
    goto LABEL_235;
  }
LABEL_234:
  CFRelease(a40);
  if (!a41)
  {
LABEL_39:
    if (!a42) {
      goto LABEL_40;
    }
    goto LABEL_236;
  }
LABEL_235:
  CFRelease(a41);
  if (!a42)
  {
LABEL_40:
    if (!a43) {
      goto LABEL_41;
    }
    goto LABEL_237;
  }
LABEL_236:
  CFRelease(a42);
  if (!a43)
  {
LABEL_41:
    if (!a44) {
      goto LABEL_42;
    }
    goto LABEL_238;
  }
LABEL_237:
  CFRelease(a43);
  if (!a44)
  {
LABEL_42:
    if (!a45) {
      goto LABEL_43;
    }
    goto LABEL_239;
  }
LABEL_238:
  CFRelease(a44);
  if (!a45)
  {
LABEL_43:
    if (!a46) {
      goto LABEL_44;
    }
    goto LABEL_240;
  }
LABEL_239:
  CFRelease(a45);
  if (!a46)
  {
LABEL_44:
    if (!a47) {
      goto LABEL_45;
    }
    goto LABEL_241;
  }
LABEL_240:
  CFRelease(a46);
  if (!a47)
  {
LABEL_45:
    if (!a48) {
      goto LABEL_46;
    }
    goto LABEL_242;
  }
LABEL_241:
  CFRelease(a47);
  if (!a48)
  {
LABEL_46:
    if (!a49) {
      goto LABEL_47;
    }
    goto LABEL_243;
  }
LABEL_242:
  CFRelease(a48);
  if (!a49)
  {
LABEL_47:
    if (!a50) {
      goto LABEL_48;
    }
    goto LABEL_244;
  }
LABEL_243:
  CFRelease(a49);
  if (!a50)
  {
LABEL_48:
    if (!a51) {
      goto LABEL_49;
    }
    goto LABEL_245;
  }
LABEL_244:
  CFRelease(a50);
  if (!a51)
  {
LABEL_49:
    if (!a52) {
      goto LABEL_50;
    }
    goto LABEL_246;
  }
LABEL_245:
  CFRelease(a51);
  if (!a52)
  {
LABEL_50:
    if (!a53) {
      goto LABEL_51;
    }
    goto LABEL_247;
  }
LABEL_246:
  CFRelease(a52);
  if (!a53)
  {
LABEL_51:
    if (!a54) {
      goto LABEL_52;
    }
    goto LABEL_248;
  }
LABEL_247:
  CFRelease(a53);
  if (!a54)
  {
LABEL_52:
    if (!a55) {
      goto LABEL_53;
    }
    goto LABEL_249;
  }
LABEL_248:
  CFRelease(a54);
  if (!a55)
  {
LABEL_53:
    if (!a56) {
      goto LABEL_54;
    }
    goto LABEL_250;
  }
LABEL_249:
  CFRelease(a55);
  if (!a56)
  {
LABEL_54:
    if (!a57) {
      goto LABEL_55;
    }
    goto LABEL_251;
  }
LABEL_250:
  CFRelease(a56);
  if (!a57)
  {
LABEL_55:
    if (!a58) {
      goto LABEL_56;
    }
    goto LABEL_252;
  }
LABEL_251:
  CFRelease(a57);
  if (!a58)
  {
LABEL_56:
    if (!a59) {
      goto LABEL_57;
    }
    goto LABEL_253;
  }
LABEL_252:
  CFRelease(a58);
  if (!a59)
  {
LABEL_57:
    if (!a60) {
      goto LABEL_58;
    }
    goto LABEL_254;
  }
LABEL_253:
  CFRelease(a59);
  if (!a60)
  {
LABEL_58:
    if (!a61) {
      goto LABEL_59;
    }
    goto LABEL_255;
  }
LABEL_254:
  CFRelease(a60);
  if (!a61)
  {
LABEL_59:
    if (!a62) {
      goto LABEL_60;
    }
    goto LABEL_256;
  }
LABEL_255:
  CFRelease(a61);
  if (!a62)
  {
LABEL_60:
    if (!a63) {
      goto LABEL_61;
    }
    goto LABEL_257;
  }
LABEL_256:
  CFRelease(a62);
  if (!a63)
  {
LABEL_61:
    if (!a64) {
      goto LABEL_62;
    }
    goto LABEL_258;
  }
LABEL_257:
  CFRelease(a63);
  if (!a64)
  {
LABEL_62:
    if (!a65) {
      goto LABEL_63;
    }
    goto LABEL_259;
  }
LABEL_258:
  CFRelease(a64);
  if (!a65)
  {
LABEL_63:
    if (!a66) {
      goto LABEL_64;
    }
    goto LABEL_260;
  }
LABEL_259:
  CFRelease(a65);
  if (!a66)
  {
LABEL_64:
    if (!a67) {
      goto LABEL_65;
    }
    goto LABEL_261;
  }
LABEL_260:
  CFRelease(a66);
  if (!a67)
  {
LABEL_65:
    if (!a68) {
      goto LABEL_66;
    }
    goto LABEL_262;
  }
LABEL_261:
  CFRelease(a67);
  if (!a68)
  {
LABEL_66:
    if (!a69) {
      goto LABEL_67;
    }
    goto LABEL_263;
  }
LABEL_262:
  CFRelease(a68);
  if (!a69)
  {
LABEL_67:
    if (!a70) {
      goto LABEL_68;
    }
    goto LABEL_264;
  }
LABEL_263:
  CFRelease(a69);
  if (!a70)
  {
LABEL_68:
    if (!a71) {
      goto LABEL_69;
    }
    goto LABEL_265;
  }
LABEL_264:
  CFRelease(a70);
  if (!a71)
  {
LABEL_69:
    if (!a72) {
      goto LABEL_70;
    }
    goto LABEL_266;
  }
LABEL_265:
  CFRelease(a71);
  if (!a72)
  {
LABEL_70:
    if (!STACK[0x200]) {
      goto LABEL_71;
    }
    goto LABEL_267;
  }
LABEL_266:
  CFRelease(a72);
  if (!STACK[0x200])
  {
LABEL_71:
    if (!STACK[0x208]) {
      goto LABEL_72;
    }
    goto LABEL_268;
  }
LABEL_267:
  CFRelease((CFTypeRef)STACK[0x200]);
  if (!STACK[0x208])
  {
LABEL_72:
    if (!STACK[0x210]) {
      goto LABEL_73;
    }
    goto LABEL_269;
  }
LABEL_268:
  CFRelease((CFTypeRef)STACK[0x208]);
  if (!STACK[0x210])
  {
LABEL_73:
    if (!STACK[0x218]) {
      goto LABEL_74;
    }
    goto LABEL_270;
  }
LABEL_269:
  CFRelease((CFTypeRef)STACK[0x210]);
  if (!STACK[0x218])
  {
LABEL_74:
    if (!STACK[0x220]) {
      goto LABEL_75;
    }
    goto LABEL_271;
  }
LABEL_270:
  CFRelease((CFTypeRef)STACK[0x218]);
  if (!STACK[0x220])
  {
LABEL_75:
    if (!STACK[0x228]) {
      goto LABEL_76;
    }
    goto LABEL_272;
  }
LABEL_271:
  CFRelease((CFTypeRef)STACK[0x220]);
  if (!STACK[0x228])
  {
LABEL_76:
    if (!STACK[0x230]) {
      goto LABEL_77;
    }
    goto LABEL_273;
  }
LABEL_272:
  CFRelease((CFTypeRef)STACK[0x228]);
  if (!STACK[0x230])
  {
LABEL_77:
    if (!STACK[0x238]) {
      goto LABEL_78;
    }
    goto LABEL_274;
  }
LABEL_273:
  CFRelease((CFTypeRef)STACK[0x230]);
  if (!STACK[0x238])
  {
LABEL_78:
    if (!STACK[0x240]) {
      goto LABEL_79;
    }
    goto LABEL_275;
  }
LABEL_274:
  CFRelease((CFTypeRef)STACK[0x238]);
  if (!STACK[0x240])
  {
LABEL_79:
    if (!STACK[0x248]) {
      goto LABEL_80;
    }
    goto LABEL_276;
  }
LABEL_275:
  CFRelease((CFTypeRef)STACK[0x240]);
  if (!STACK[0x248])
  {
LABEL_80:
    if (!STACK[0x250]) {
      goto LABEL_81;
    }
    goto LABEL_277;
  }
LABEL_276:
  CFRelease((CFTypeRef)STACK[0x248]);
  if (!STACK[0x250])
  {
LABEL_81:
    if (!STACK[0x258]) {
      goto LABEL_82;
    }
    goto LABEL_278;
  }
LABEL_277:
  CFRelease((CFTypeRef)STACK[0x250]);
  if (!STACK[0x258])
  {
LABEL_82:
    if (!STACK[0x260]) {
      goto LABEL_83;
    }
    goto LABEL_279;
  }
LABEL_278:
  CFRelease((CFTypeRef)STACK[0x258]);
  if (!STACK[0x260])
  {
LABEL_83:
    if (!STACK[0x268]) {
      goto LABEL_84;
    }
    goto LABEL_280;
  }
LABEL_279:
  CFRelease((CFTypeRef)STACK[0x260]);
  if (!STACK[0x268])
  {
LABEL_84:
    if (!STACK[0x270]) {
      goto LABEL_85;
    }
    goto LABEL_281;
  }
LABEL_280:
  CFRelease((CFTypeRef)STACK[0x268]);
  if (!STACK[0x270])
  {
LABEL_85:
    if (!STACK[0x278]) {
      goto LABEL_86;
    }
    goto LABEL_282;
  }
LABEL_281:
  CFRelease((CFTypeRef)STACK[0x270]);
  if (!STACK[0x278])
  {
LABEL_86:
    if (!STACK[0x280]) {
      goto LABEL_87;
    }
    goto LABEL_283;
  }
LABEL_282:
  CFRelease((CFTypeRef)STACK[0x278]);
  if (!STACK[0x280])
  {
LABEL_87:
    if (!STACK[0x288]) {
      goto LABEL_88;
    }
    goto LABEL_284;
  }
LABEL_283:
  CFRelease((CFTypeRef)STACK[0x280]);
  if (!STACK[0x288])
  {
LABEL_88:
    if (!STACK[0x290]) {
      goto LABEL_89;
    }
    goto LABEL_285;
  }
LABEL_284:
  CFRelease((CFTypeRef)STACK[0x288]);
  if (!STACK[0x290])
  {
LABEL_89:
    if (!STACK[0x298]) {
      goto LABEL_90;
    }
    goto LABEL_286;
  }
LABEL_285:
  CFRelease((CFTypeRef)STACK[0x290]);
  if (!STACK[0x298])
  {
LABEL_90:
    if (!STACK[0x2A0]) {
      goto LABEL_91;
    }
    goto LABEL_287;
  }
LABEL_286:
  CFRelease((CFTypeRef)STACK[0x298]);
  if (!STACK[0x2A0])
  {
LABEL_91:
    if (!STACK[0x2A8]) {
      goto LABEL_92;
    }
    goto LABEL_288;
  }
LABEL_287:
  CFRelease((CFTypeRef)STACK[0x2A0]);
  if (!STACK[0x2A8])
  {
LABEL_92:
    if (!STACK[0x2B0]) {
      goto LABEL_93;
    }
    goto LABEL_289;
  }
LABEL_288:
  CFRelease((CFTypeRef)STACK[0x2A8]);
  if (!STACK[0x2B0])
  {
LABEL_93:
    if (!STACK[0x2B8]) {
      goto LABEL_94;
    }
    goto LABEL_290;
  }
LABEL_289:
  CFRelease((CFTypeRef)STACK[0x2B0]);
  if (!STACK[0x2B8])
  {
LABEL_94:
    if (!STACK[0x2C0]) {
      goto LABEL_95;
    }
    goto LABEL_291;
  }
LABEL_290:
  CFRelease((CFTypeRef)STACK[0x2B8]);
  if (!STACK[0x2C0])
  {
LABEL_95:
    if (!STACK[0x2C8]) {
      goto LABEL_96;
    }
    goto LABEL_292;
  }
LABEL_291:
  CFRelease((CFTypeRef)STACK[0x2C0]);
  if (!STACK[0x2C8])
  {
LABEL_96:
    if (!STACK[0x2D0]) {
      goto LABEL_97;
    }
    goto LABEL_293;
  }
LABEL_292:
  CFRelease((CFTypeRef)STACK[0x2C8]);
  if (!STACK[0x2D0])
  {
LABEL_97:
    if (!STACK[0x2D8]) {
      goto LABEL_98;
    }
    goto LABEL_294;
  }
LABEL_293:
  CFRelease((CFTypeRef)STACK[0x2D0]);
  if (!STACK[0x2D8])
  {
LABEL_98:
    if (!STACK[0x2E0]) {
      goto LABEL_99;
    }
    goto LABEL_295;
  }
LABEL_294:
  CFRelease((CFTypeRef)STACK[0x2D8]);
  if (!STACK[0x2E0])
  {
LABEL_99:
    if (!STACK[0x2E8]) {
      goto LABEL_100;
    }
    goto LABEL_296;
  }
LABEL_295:
  CFRelease((CFTypeRef)STACK[0x2E0]);
  if (!STACK[0x2E8])
  {
LABEL_100:
    if (!STACK[0x2F0]) {
      goto LABEL_101;
    }
    goto LABEL_297;
  }
LABEL_296:
  CFRelease((CFTypeRef)STACK[0x2E8]);
  if (!STACK[0x2F0])
  {
LABEL_101:
    if (!STACK[0x2F8]) {
      goto LABEL_102;
    }
    goto LABEL_298;
  }
LABEL_297:
  CFRelease((CFTypeRef)STACK[0x2F0]);
  if (!STACK[0x2F8])
  {
LABEL_102:
    if (!STACK[0x300]) {
      goto LABEL_103;
    }
    goto LABEL_299;
  }
LABEL_298:
  CFRelease((CFTypeRef)STACK[0x2F8]);
  if (!STACK[0x300])
  {
LABEL_103:
    if (!STACK[0x308]) {
      goto LABEL_104;
    }
    goto LABEL_300;
  }
LABEL_299:
  CFRelease((CFTypeRef)STACK[0x300]);
  if (!STACK[0x308])
  {
LABEL_104:
    if (!STACK[0x310]) {
      goto LABEL_105;
    }
    goto LABEL_301;
  }
LABEL_300:
  CFRelease((CFTypeRef)STACK[0x308]);
  if (!STACK[0x310])
  {
LABEL_105:
    if (!STACK[0x318]) {
      goto LABEL_106;
    }
    goto LABEL_302;
  }
LABEL_301:
  CFRelease((CFTypeRef)STACK[0x310]);
  if (!STACK[0x318])
  {
LABEL_106:
    if (!STACK[0x320]) {
      goto LABEL_107;
    }
    goto LABEL_303;
  }
LABEL_302:
  CFRelease((CFTypeRef)STACK[0x318]);
  if (!STACK[0x320])
  {
LABEL_107:
    if (!STACK[0x328]) {
      goto LABEL_108;
    }
    goto LABEL_304;
  }
LABEL_303:
  CFRelease((CFTypeRef)STACK[0x320]);
  if (!STACK[0x328])
  {
LABEL_108:
    if (!STACK[0x330]) {
      goto LABEL_109;
    }
    goto LABEL_305;
  }
LABEL_304:
  CFRelease((CFTypeRef)STACK[0x328]);
  if (!STACK[0x330])
  {
LABEL_109:
    if (!STACK[0x338]) {
      goto LABEL_110;
    }
    goto LABEL_306;
  }
LABEL_305:
  CFRelease((CFTypeRef)STACK[0x330]);
  if (!STACK[0x338])
  {
LABEL_110:
    if (!STACK[0x340]) {
      goto LABEL_111;
    }
    goto LABEL_307;
  }
LABEL_306:
  CFRelease((CFTypeRef)STACK[0x338]);
  if (!STACK[0x340])
  {
LABEL_111:
    if (!STACK[0x348]) {
      goto LABEL_112;
    }
    goto LABEL_308;
  }
LABEL_307:
  CFRelease((CFTypeRef)STACK[0x340]);
  if (!STACK[0x348])
  {
LABEL_112:
    if (!STACK[0x350]) {
      goto LABEL_113;
    }
    goto LABEL_309;
  }
LABEL_308:
  CFRelease((CFTypeRef)STACK[0x348]);
  if (!STACK[0x350])
  {
LABEL_113:
    if (!STACK[0x358]) {
      goto LABEL_114;
    }
    goto LABEL_310;
  }
LABEL_309:
  CFRelease((CFTypeRef)STACK[0x350]);
  if (!STACK[0x358])
  {
LABEL_114:
    if (!STACK[0x360]) {
      goto LABEL_115;
    }
    goto LABEL_311;
  }
LABEL_310:
  CFRelease((CFTypeRef)STACK[0x358]);
  if (!STACK[0x360])
  {
LABEL_115:
    if (!STACK[0x368]) {
      goto LABEL_116;
    }
    goto LABEL_312;
  }
LABEL_311:
  CFRelease((CFTypeRef)STACK[0x360]);
  if (!STACK[0x368])
  {
LABEL_116:
    if (!STACK[0x370]) {
      goto LABEL_117;
    }
    goto LABEL_313;
  }
LABEL_312:
  CFRelease((CFTypeRef)STACK[0x368]);
  if (!STACK[0x370])
  {
LABEL_117:
    if (!STACK[0x378]) {
      goto LABEL_118;
    }
    goto LABEL_314;
  }
LABEL_313:
  CFRelease((CFTypeRef)STACK[0x370]);
  if (!STACK[0x378])
  {
LABEL_118:
    if (!STACK[0x380]) {
      goto LABEL_119;
    }
    goto LABEL_315;
  }
LABEL_314:
  CFRelease((CFTypeRef)STACK[0x378]);
  if (!STACK[0x380])
  {
LABEL_119:
    if (!STACK[0x388]) {
      goto LABEL_120;
    }
    goto LABEL_316;
  }
LABEL_315:
  CFRelease((CFTypeRef)STACK[0x380]);
  if (!STACK[0x388])
  {
LABEL_120:
    if (!STACK[0x390]) {
      goto LABEL_121;
    }
    goto LABEL_317;
  }
LABEL_316:
  CFRelease((CFTypeRef)STACK[0x388]);
  if (!STACK[0x390])
  {
LABEL_121:
    if (!STACK[0x398]) {
      goto LABEL_122;
    }
    goto LABEL_318;
  }
LABEL_317:
  CFRelease((CFTypeRef)STACK[0x390]);
  if (!STACK[0x398])
  {
LABEL_122:
    if (!STACK[0x3A0]) {
      goto LABEL_123;
    }
    goto LABEL_319;
  }
LABEL_318:
  CFRelease((CFTypeRef)STACK[0x398]);
  if (!STACK[0x3A0])
  {
LABEL_123:
    if (!STACK[0x3A8]) {
      goto LABEL_124;
    }
    goto LABEL_320;
  }
LABEL_319:
  CFRelease((CFTypeRef)STACK[0x3A0]);
  if (!STACK[0x3A8])
  {
LABEL_124:
    if (!STACK[0x3B0]) {
      goto LABEL_125;
    }
    goto LABEL_321;
  }
LABEL_320:
  CFRelease((CFTypeRef)STACK[0x3A8]);
  if (!STACK[0x3B0])
  {
LABEL_125:
    if (!STACK[0x3B8]) {
      goto LABEL_126;
    }
    goto LABEL_322;
  }
LABEL_321:
  CFRelease((CFTypeRef)STACK[0x3B0]);
  if (!STACK[0x3B8])
  {
LABEL_126:
    if (!STACK[0x3C0]) {
      goto LABEL_127;
    }
    goto LABEL_323;
  }
LABEL_322:
  CFRelease((CFTypeRef)STACK[0x3B8]);
  if (!STACK[0x3C0])
  {
LABEL_127:
    if (!STACK[0x3C8]) {
      goto LABEL_128;
    }
    goto LABEL_324;
  }
LABEL_323:
  CFRelease((CFTypeRef)STACK[0x3C0]);
  if (!STACK[0x3C8])
  {
LABEL_128:
    if (!STACK[0x3D0]) {
      goto LABEL_129;
    }
    goto LABEL_325;
  }
LABEL_324:
  CFRelease((CFTypeRef)STACK[0x3C8]);
  if (!STACK[0x3D0])
  {
LABEL_129:
    if (!STACK[0x3D8]) {
      goto LABEL_130;
    }
    goto LABEL_326;
  }
LABEL_325:
  CFRelease((CFTypeRef)STACK[0x3D0]);
  if (!STACK[0x3D8])
  {
LABEL_130:
    if (!STACK[0x3E0]) {
      goto LABEL_131;
    }
    goto LABEL_327;
  }
LABEL_326:
  CFRelease((CFTypeRef)STACK[0x3D8]);
  if (!STACK[0x3E0])
  {
LABEL_131:
    if (!STACK[0x3E8]) {
      goto LABEL_132;
    }
    goto LABEL_328;
  }
LABEL_327:
  CFRelease((CFTypeRef)STACK[0x3E0]);
  if (!STACK[0x3E8])
  {
LABEL_132:
    if (!STACK[0x3F0]) {
      goto LABEL_133;
    }
    goto LABEL_329;
  }
LABEL_328:
  CFRelease((CFTypeRef)STACK[0x3E8]);
  if (!STACK[0x3F0])
  {
LABEL_133:
    if (!STACK[0x3F8]) {
      goto LABEL_134;
    }
    goto LABEL_330;
  }
LABEL_329:
  CFRelease((CFTypeRef)STACK[0x3F0]);
  if (!STACK[0x3F8])
  {
LABEL_134:
    if (!STACK[0x400]) {
      goto LABEL_135;
    }
    goto LABEL_331;
  }
LABEL_330:
  CFRelease((CFTypeRef)STACK[0x3F8]);
  if (!STACK[0x400])
  {
LABEL_135:
    if (!STACK[0x408]) {
      goto LABEL_136;
    }
    goto LABEL_332;
  }
LABEL_331:
  CFRelease((CFTypeRef)STACK[0x400]);
  if (!STACK[0x408])
  {
LABEL_136:
    if (!STACK[0x410]) {
      goto LABEL_137;
    }
    goto LABEL_333;
  }
LABEL_332:
  CFRelease((CFTypeRef)STACK[0x408]);
  if (!STACK[0x410])
  {
LABEL_137:
    if (!STACK[0x418]) {
      goto LABEL_138;
    }
    goto LABEL_334;
  }
LABEL_333:
  CFRelease((CFTypeRef)STACK[0x410]);
  if (!STACK[0x418])
  {
LABEL_138:
    if (!STACK[0x420]) {
      goto LABEL_139;
    }
    goto LABEL_335;
  }
LABEL_334:
  CFRelease((CFTypeRef)STACK[0x418]);
  if (!STACK[0x420])
  {
LABEL_139:
    if (!STACK[0x428]) {
      goto LABEL_140;
    }
    goto LABEL_336;
  }
LABEL_335:
  CFRelease((CFTypeRef)STACK[0x420]);
  if (!STACK[0x428])
  {
LABEL_140:
    if (!STACK[0x430]) {
      goto LABEL_141;
    }
    goto LABEL_337;
  }
LABEL_336:
  CFRelease((CFTypeRef)STACK[0x428]);
  if (!STACK[0x430])
  {
LABEL_141:
    if (!STACK[0x438]) {
      goto LABEL_142;
    }
    goto LABEL_338;
  }
LABEL_337:
  CFRelease((CFTypeRef)STACK[0x430]);
  if (!STACK[0x438])
  {
LABEL_142:
    if (!STACK[0x440]) {
      goto LABEL_143;
    }
    goto LABEL_339;
  }
LABEL_338:
  CFRelease((CFTypeRef)STACK[0x438]);
  if (!STACK[0x440])
  {
LABEL_143:
    if (!STACK[0x448]) {
      goto LABEL_144;
    }
    goto LABEL_340;
  }
LABEL_339:
  CFRelease((CFTypeRef)STACK[0x440]);
  if (!STACK[0x448])
  {
LABEL_144:
    if (!STACK[0x450]) {
      goto LABEL_145;
    }
    goto LABEL_341;
  }
LABEL_340:
  CFRelease((CFTypeRef)STACK[0x448]);
  if (!STACK[0x450])
  {
LABEL_145:
    if (!STACK[0x458]) {
      goto LABEL_146;
    }
    goto LABEL_342;
  }
LABEL_341:
  CFRelease((CFTypeRef)STACK[0x450]);
  if (!STACK[0x458])
  {
LABEL_146:
    if (!STACK[0x460]) {
      goto LABEL_147;
    }
    goto LABEL_343;
  }
LABEL_342:
  CFRelease((CFTypeRef)STACK[0x458]);
  if (!STACK[0x460])
  {
LABEL_147:
    if (!STACK[0x468]) {
      goto LABEL_148;
    }
    goto LABEL_344;
  }
LABEL_343:
  CFRelease((CFTypeRef)STACK[0x460]);
  if (!STACK[0x468])
  {
LABEL_148:
    if (!STACK[0x470]) {
      goto LABEL_149;
    }
    goto LABEL_345;
  }
LABEL_344:
  CFRelease((CFTypeRef)STACK[0x468]);
  if (!STACK[0x470])
  {
LABEL_149:
    if (!STACK[0x478]) {
      goto LABEL_150;
    }
    goto LABEL_346;
  }
LABEL_345:
  CFRelease((CFTypeRef)STACK[0x470]);
  if (!STACK[0x478])
  {
LABEL_150:
    if (!STACK[0x480]) {
      goto LABEL_151;
    }
    goto LABEL_347;
  }
LABEL_346:
  CFRelease((CFTypeRef)STACK[0x478]);
  if (!STACK[0x480])
  {
LABEL_151:
    if (!STACK[0x488]) {
      goto LABEL_152;
    }
    goto LABEL_348;
  }
LABEL_347:
  CFRelease((CFTypeRef)STACK[0x480]);
  if (!STACK[0x488])
  {
LABEL_152:
    if (!STACK[0x490]) {
      goto LABEL_153;
    }
    goto LABEL_349;
  }
LABEL_348:
  CFRelease((CFTypeRef)STACK[0x488]);
  if (!STACK[0x490])
  {
LABEL_153:
    if (!STACK[0x498]) {
      goto LABEL_154;
    }
    goto LABEL_350;
  }
LABEL_349:
  CFRelease((CFTypeRef)STACK[0x490]);
  if (!STACK[0x498])
  {
LABEL_154:
    if (!STACK[0x4A0]) {
      goto LABEL_155;
    }
    goto LABEL_351;
  }
LABEL_350:
  CFRelease((CFTypeRef)STACK[0x498]);
  if (!STACK[0x4A0])
  {
LABEL_155:
    if (!STACK[0x4A8]) {
      goto LABEL_156;
    }
    goto LABEL_352;
  }
LABEL_351:
  CFRelease((CFTypeRef)STACK[0x4A0]);
  if (!STACK[0x4A8])
  {
LABEL_156:
    if (!STACK[0x4B0]) {
      goto LABEL_157;
    }
    goto LABEL_353;
  }
LABEL_352:
  CFRelease((CFTypeRef)STACK[0x4A8]);
  if (!STACK[0x4B0])
  {
LABEL_157:
    if (!STACK[0x4B8]) {
      goto LABEL_158;
    }
    goto LABEL_354;
  }
LABEL_353:
  CFRelease((CFTypeRef)STACK[0x4B0]);
  if (!STACK[0x4B8])
  {
LABEL_158:
    if (!STACK[0x4C0]) {
      goto LABEL_159;
    }
    goto LABEL_355;
  }
LABEL_354:
  CFRelease((CFTypeRef)STACK[0x4B8]);
  if (!STACK[0x4C0])
  {
LABEL_159:
    if (!STACK[0x4C8]) {
      goto LABEL_160;
    }
    goto LABEL_356;
  }
LABEL_355:
  CFRelease((CFTypeRef)STACK[0x4C0]);
  if (!STACK[0x4C8])
  {
LABEL_160:
    if (!STACK[0x4D0]) {
      goto LABEL_161;
    }
    goto LABEL_357;
  }
LABEL_356:
  CFRelease((CFTypeRef)STACK[0x4C8]);
  if (!STACK[0x4D0])
  {
LABEL_161:
    if (!STACK[0x4D8]) {
      goto LABEL_162;
    }
    goto LABEL_358;
  }
LABEL_357:
  CFRelease((CFTypeRef)STACK[0x4D0]);
  if (!STACK[0x4D8])
  {
LABEL_162:
    if (!STACK[0x4E0]) {
      goto LABEL_163;
    }
    goto LABEL_359;
  }
LABEL_358:
  CFRelease((CFTypeRef)STACK[0x4D8]);
  if (!STACK[0x4E0])
  {
LABEL_163:
    if (!STACK[0x4E8]) {
      goto LABEL_164;
    }
    goto LABEL_360;
  }
LABEL_359:
  CFRelease((CFTypeRef)STACK[0x4E0]);
  if (!STACK[0x4E8])
  {
LABEL_164:
    if (!STACK[0x4F0]) {
      goto LABEL_165;
    }
    goto LABEL_361;
  }
LABEL_360:
  CFRelease((CFTypeRef)STACK[0x4E8]);
  if (!STACK[0x4F0])
  {
LABEL_165:
    if (!STACK[0x4F8]) {
      goto LABEL_166;
    }
    goto LABEL_362;
  }
LABEL_361:
  CFRelease((CFTypeRef)STACK[0x4F0]);
  if (!STACK[0x4F8])
  {
LABEL_166:
    if (!STACK[0x500]) {
      goto LABEL_167;
    }
    goto LABEL_363;
  }
LABEL_362:
  CFRelease((CFTypeRef)STACK[0x4F8]);
  if (!STACK[0x500])
  {
LABEL_167:
    if (!STACK[0x508]) {
      goto LABEL_168;
    }
    goto LABEL_364;
  }
LABEL_363:
  CFRelease((CFTypeRef)STACK[0x500]);
  if (!STACK[0x508])
  {
LABEL_168:
    if (!STACK[0x510]) {
      goto LABEL_169;
    }
    goto LABEL_365;
  }
LABEL_364:
  CFRelease((CFTypeRef)STACK[0x508]);
  if (!STACK[0x510])
  {
LABEL_169:
    if (!STACK[0x518]) {
      goto LABEL_170;
    }
    goto LABEL_366;
  }
LABEL_365:
  CFRelease((CFTypeRef)STACK[0x510]);
  if (!STACK[0x518])
  {
LABEL_170:
    if (!STACK[0x520]) {
      goto LABEL_171;
    }
    goto LABEL_367;
  }
LABEL_366:
  CFRelease((CFTypeRef)STACK[0x518]);
  if (!STACK[0x520])
  {
LABEL_171:
    if (!STACK[0x528]) {
      goto LABEL_172;
    }
    goto LABEL_368;
  }
LABEL_367:
  CFRelease((CFTypeRef)STACK[0x520]);
  if (!STACK[0x528])
  {
LABEL_172:
    if (!STACK[0x530]) {
      goto LABEL_173;
    }
    goto LABEL_369;
  }
LABEL_368:
  CFRelease((CFTypeRef)STACK[0x528]);
  if (!STACK[0x530])
  {
LABEL_173:
    if (!STACK[0x538]) {
      goto LABEL_174;
    }
    goto LABEL_370;
  }
LABEL_369:
  CFRelease((CFTypeRef)STACK[0x530]);
  if (!STACK[0x538])
  {
LABEL_174:
    if (!STACK[0x540]) {
      goto LABEL_175;
    }
    goto LABEL_371;
  }
LABEL_370:
  CFRelease((CFTypeRef)STACK[0x538]);
  if (!STACK[0x540])
  {
LABEL_175:
    if (!STACK[0x548]) {
      goto LABEL_176;
    }
    goto LABEL_372;
  }
LABEL_371:
  CFRelease((CFTypeRef)STACK[0x540]);
  if (!STACK[0x548])
  {
LABEL_176:
    if (!STACK[0x550]) {
      goto LABEL_177;
    }
    goto LABEL_373;
  }
LABEL_372:
  CFRelease((CFTypeRef)STACK[0x548]);
  if (!STACK[0x550])
  {
LABEL_177:
    if (!STACK[0x558]) {
      goto LABEL_178;
    }
    goto LABEL_374;
  }
LABEL_373:
  CFRelease((CFTypeRef)STACK[0x550]);
  if (!STACK[0x558])
  {
LABEL_178:
    if (!STACK[0x560]) {
      goto LABEL_179;
    }
    goto LABEL_375;
  }
LABEL_374:
  CFRelease((CFTypeRef)STACK[0x558]);
  if (!STACK[0x560])
  {
LABEL_179:
    if (!STACK[0x568]) {
      goto LABEL_180;
    }
    goto LABEL_376;
  }
LABEL_375:
  CFRelease((CFTypeRef)STACK[0x560]);
  if (!STACK[0x568])
  {
LABEL_180:
    if (!STACK[0x570]) {
      goto LABEL_181;
    }
    goto LABEL_377;
  }
LABEL_376:
  CFRelease((CFTypeRef)STACK[0x568]);
  if (!STACK[0x570])
  {
LABEL_181:
    if (!STACK[0x578]) {
      goto LABEL_182;
    }
    goto LABEL_378;
  }
LABEL_377:
  CFRelease((CFTypeRef)STACK[0x570]);
  if (!STACK[0x578])
  {
LABEL_182:
    if (!STACK[0x580]) {
      goto LABEL_183;
    }
    goto LABEL_379;
  }
LABEL_378:
  CFRelease((CFTypeRef)STACK[0x578]);
  if (!STACK[0x580])
  {
LABEL_183:
    if (!STACK[0x588]) {
      goto LABEL_184;
    }
    goto LABEL_380;
  }
LABEL_379:
  CFRelease((CFTypeRef)STACK[0x580]);
  if (!STACK[0x588])
  {
LABEL_184:
    if (!STACK[0x590]) {
      goto LABEL_185;
    }
    goto LABEL_381;
  }
LABEL_380:
  CFRelease((CFTypeRef)STACK[0x588]);
  if (!STACK[0x590])
  {
LABEL_185:
    if (!STACK[0x598]) {
      goto LABEL_186;
    }
    goto LABEL_382;
  }
LABEL_381:
  CFRelease((CFTypeRef)STACK[0x590]);
  if (!STACK[0x598])
  {
LABEL_186:
    if (!STACK[0x5A0]) {
      goto LABEL_187;
    }
    goto LABEL_383;
  }
LABEL_382:
  CFRelease((CFTypeRef)STACK[0x598]);
  if (!STACK[0x5A0])
  {
LABEL_187:
    if (!STACK[0x5A8]) {
      goto LABEL_188;
    }
    goto LABEL_384;
  }
LABEL_383:
  CFRelease((CFTypeRef)STACK[0x5A0]);
  if (!STACK[0x5A8])
  {
LABEL_188:
    if (!STACK[0x5B0]) {
      goto LABEL_189;
    }
    goto LABEL_385;
  }
LABEL_384:
  CFRelease((CFTypeRef)STACK[0x5A8]);
  if (!STACK[0x5B0])
  {
LABEL_189:
    if (!STACK[0x5B8]) {
      goto LABEL_190;
    }
    goto LABEL_386;
  }
LABEL_385:
  CFRelease((CFTypeRef)STACK[0x5B0]);
  if (!STACK[0x5B8])
  {
LABEL_190:
    if (!STACK[0x5C0]) {
      goto LABEL_191;
    }
    goto LABEL_387;
  }
LABEL_386:
  CFRelease((CFTypeRef)STACK[0x5B8]);
  if (!STACK[0x5C0])
  {
LABEL_191:
    if (!STACK[0x5C8]) {
      goto LABEL_192;
    }
    goto LABEL_388;
  }
LABEL_387:
  CFRelease((CFTypeRef)STACK[0x5C0]);
  if (!STACK[0x5C8])
  {
LABEL_192:
    if (!STACK[0x5D0]) {
      goto LABEL_193;
    }
    goto LABEL_389;
  }
LABEL_388:
  CFRelease((CFTypeRef)STACK[0x5C8]);
  if (!STACK[0x5D0])
  {
LABEL_193:
    if (!STACK[0x5D8]) {
      goto LABEL_194;
    }
    goto LABEL_390;
  }
LABEL_389:
  CFRelease((CFTypeRef)STACK[0x5D0]);
  if (!STACK[0x5D8])
  {
LABEL_194:
    if (!STACK[0x5E0]) {
      goto LABEL_195;
    }
    goto LABEL_391;
  }
LABEL_390:
  CFRelease((CFTypeRef)STACK[0x5D8]);
  if (!STACK[0x5E0])
  {
LABEL_195:
    if (!STACK[0x5E8]) {
      goto LABEL_196;
    }
    goto LABEL_392;
  }
LABEL_391:
  CFRelease((CFTypeRef)STACK[0x5E0]);
  if (!STACK[0x5E8])
  {
LABEL_196:
    if (!a11) {
      goto LABEL_197;
    }
    goto LABEL_393;
  }
LABEL_392:
  CFRelease((CFTypeRef)STACK[0x5E8]);
  if (!a11) {
LABEL_197:
  }
    _Unwind_Resume(a1);
LABEL_393:
  CFRelease(a11);
  _Unwind_Resume(a1);
}

void sub_1E146E214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x1E146D664);
  }
  JUMPOUT(0x1E146CF94);
}

void sub_1E146E224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    JUMPOUT(0x1E146D674);
  }
  JUMPOUT(0x1E146CF9CLL);
}

void sub_1E146E234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x1E146D684);
  }
  JUMPOUT(0x1E146CFA4);
}

void sub_1E146E244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0x1E146D694);
  }
  JUMPOUT(0x1E146CFACLL);
}

void sub_1E146E254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    JUMPOUT(0x1E146D6A4);
  }
  JUMPOUT(0x1E146CFB4);
}

void sub_1E146E264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    JUMPOUT(0x1E146D6B4);
  }
  JUMPOUT(0x1E146CFBCLL);
}

void sub_1E146E274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    JUMPOUT(0x1E146D6C4);
  }
  JUMPOUT(0x1E146CFC4);
}

void sub_1E146E284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    JUMPOUT(0x1E146D6D4);
  }
  JUMPOUT(0x1E146CFCCLL);
}

void sub_1E146E294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x1E146D6E4);
  }
  JUMPOUT(0x1E146CFD4);
}

void sub_1E146E2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    JUMPOUT(0x1E146D6F4);
  }
  JUMPOUT(0x1E146CFDCLL);
}

void sub_1E146E2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23) {
    JUMPOUT(0x1E146D704);
  }
  JUMPOUT(0x1E146CFE4);
}

void sub_1E146E2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x1E146D714);
  }
  JUMPOUT(0x1E146CFECLL);
}

void sub_1E146E2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    JUMPOUT(0x1E146D724);
  }
  JUMPOUT(0x1E146CFF4);
}

void sub_1E146E2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    JUMPOUT(0x1E146D734);
  }
  JUMPOUT(0x1E146CFFCLL);
}

void sub_1E146E2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    JUMPOUT(0x1E146D744);
  }
  JUMPOUT(0x1E146D004);
}

void sub_1E146E304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a28) {
    JUMPOUT(0x1E146D754);
  }
  JUMPOUT(0x1E146D00CLL);
}

void sub_1E146E314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29) {
    JUMPOUT(0x1E146D764);
  }
  JUMPOUT(0x1E146D014);
}

void sub_1E146E324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30) {
    JUMPOUT(0x1E146D774);
  }
  JUMPOUT(0x1E146D01CLL);
}

void sub_1E146E334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31) {
    JUMPOUT(0x1E146D784);
  }
  JUMPOUT(0x1E146D024);
}

void sub_1E146E344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32) {
    JUMPOUT(0x1E146D794);
  }
  JUMPOUT(0x1E146D02CLL);
}

void sub_1E146E354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33) {
    JUMPOUT(0x1E146D7A4);
  }
  JUMPOUT(0x1E146D034);
}

void sub_1E146E364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a34) {
    JUMPOUT(0x1E146D7B4);
  }
  JUMPOUT(0x1E146D03CLL);
}

void sub_1E146E374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35) {
    JUMPOUT(0x1E146D7C4);
  }
  JUMPOUT(0x1E146D044);
}

void sub_1E146E384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36) {
    JUMPOUT(0x1E146D7D4);
  }
  JUMPOUT(0x1E146D04CLL);
}

void sub_1E146E394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a37) {
    JUMPOUT(0x1E146D7E4);
  }
  JUMPOUT(0x1E146D054);
}

void sub_1E146E3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38) {
    JUMPOUT(0x1E146D7F4);
  }
  JUMPOUT(0x1E146D05CLL);
}

void sub_1E146E3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39) {
    JUMPOUT(0x1E146D804);
  }
  JUMPOUT(0x1E146D064);
}

void sub_1E146E3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40) {
    JUMPOUT(0x1E146D814);
  }
  JUMPOUT(0x1E146D06CLL);
}

void sub_1E146E3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41) {
    JUMPOUT(0x1E146D824);
  }
  JUMPOUT(0x1E146D074);
}

void sub_1E146E3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a42) {
    JUMPOUT(0x1E146D834);
  }
  JUMPOUT(0x1E146D07CLL);
}

void sub_1E146E3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43) {
    JUMPOUT(0x1E146D844);
  }
  JUMPOUT(0x1E146D084);
}

void sub_1E146E404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44) {
    JUMPOUT(0x1E146D854);
  }
  JUMPOUT(0x1E146D08CLL);
}

void sub_1E146E414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a45) {
    JUMPOUT(0x1E146D864);
  }
  JUMPOUT(0x1E146D094);
}

void sub_1E146E424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46) {
    JUMPOUT(0x1E146D874);
  }
  JUMPOUT(0x1E146D09CLL);
}

void sub_1E146E434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47) {
    JUMPOUT(0x1E146D884);
  }
  JUMPOUT(0x1E146D0A4);
}

void sub_1E146E444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a48) {
    JUMPOUT(0x1E146D894);
  }
  JUMPOUT(0x1E146D0ACLL);
}

void sub_1E146E454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a49) {
    JUMPOUT(0x1E146D8A4);
  }
  JUMPOUT(0x1E146D0B4);
}

void sub_1E146E464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a50) {
    JUMPOUT(0x1E146D8B4);
  }
  JUMPOUT(0x1E146D0BCLL);
}

void sub_1E146E474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51) {
    JUMPOUT(0x1E146D8C4);
  }
  JUMPOUT(0x1E146D0C4);
}

void sub_1E146E484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a52) {
    JUMPOUT(0x1E146D8D4);
  }
  JUMPOUT(0x1E146D0CCLL);
}

void sub_1E146E494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53) {
    JUMPOUT(0x1E146D8E4);
  }
  JUMPOUT(0x1E146D0D4);
}

void sub_1E146E4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54) {
    JUMPOUT(0x1E146D8F4);
  }
  JUMPOUT(0x1E146D0DCLL);
}

void sub_1E146E4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a55) {
    JUMPOUT(0x1E146D904);
  }
  JUMPOUT(0x1E146D0E4);
}

void sub_1E146E4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a56) {
    JUMPOUT(0x1E146D914);
  }
  JUMPOUT(0x1E146D0ECLL);
}

void sub_1E146E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a57) {
    JUMPOUT(0x1E146D924);
  }
  JUMPOUT(0x1E146D0F4);
}

void sub_1E146E4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a58) {
    JUMPOUT(0x1E146D934);
  }
  JUMPOUT(0x1E146D0FCLL);
}

void sub_1E146E4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a59) {
    JUMPOUT(0x1E146D944);
  }
  JUMPOUT(0x1E146D104);
}

void sub_1E146E504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a60) {
    JUMPOUT(0x1E146D954);
  }
  JUMPOUT(0x1E146D10CLL);
}

void sub_1E146E514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a61) {
    JUMPOUT(0x1E146D964);
  }
  JUMPOUT(0x1E146D114);
}

void sub_1E146E524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a62) {
    JUMPOUT(0x1E146D974);
  }
  JUMPOUT(0x1E146D11CLL);
}

void sub_1E146E534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a63) {
    JUMPOUT(0x1E146D984);
  }
  JUMPOUT(0x1E146D124);
}

void sub_1E146E544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a64) {
    JUMPOUT(0x1E146D994);
  }
  JUMPOUT(0x1E146D12CLL);
}

void sub_1E146E554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a65) {
    JUMPOUT(0x1E146D9A4);
  }
  JUMPOUT(0x1E146D134);
}

void sub_1E146E564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a66) {
    JUMPOUT(0x1E146D9B4);
  }
  JUMPOUT(0x1E146D13CLL);
}

void sub_1E146E574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67) {
    JUMPOUT(0x1E146D9C4);
  }
  JUMPOUT(0x1E146D144);
}

void sub_1E146E584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68) {
    JUMPOUT(0x1E146D9D4);
  }
  JUMPOUT(0x1E146D14CLL);
}

void sub_1E146E594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69) {
    JUMPOUT(0x1E146D9E4);
  }
  JUMPOUT(0x1E146D154);
}

void sub_1E146E5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70) {
    JUMPOUT(0x1E146D9F4);
  }
  JUMPOUT(0x1E146D15CLL);
}

void sub_1E146E5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71) {
    JUMPOUT(0x1E146DA04);
  }
  JUMPOUT(0x1E146D164);
}

void sub_1E146E5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    JUMPOUT(0x1E146DA14);
  }
  JUMPOUT(0x1E146D16CLL);
}

void sub_1E146E5D4()
{
  if (STACK[0x200]) {
    JUMPOUT(0x1E146DA24);
  }
  JUMPOUT(0x1E146D174);
}

void sub_1E146E5E4()
{
  if (STACK[0x208]) {
    JUMPOUT(0x1E146DA34);
  }
  JUMPOUT(0x1E146D17CLL);
}

void sub_1E146E5F4()
{
  if (STACK[0x210]) {
    JUMPOUT(0x1E146DA44);
  }
  JUMPOUT(0x1E146D184);
}

void sub_1E146E604()
{
  if (STACK[0x218]) {
    JUMPOUT(0x1E146DA54);
  }
  JUMPOUT(0x1E146D18CLL);
}

void sub_1E146E614()
{
  if (STACK[0x220]) {
    JUMPOUT(0x1E146DA64);
  }
  JUMPOUT(0x1E146D194);
}

void sub_1E146E624()
{
  if (STACK[0x228]) {
    JUMPOUT(0x1E146DA74);
  }
  JUMPOUT(0x1E146D19CLL);
}

void sub_1E146E634()
{
  if (STACK[0x230]) {
    JUMPOUT(0x1E146DA84);
  }
  JUMPOUT(0x1E146D1A4);
}

void sub_1E146E644()
{
  if (STACK[0x238]) {
    JUMPOUT(0x1E146DA94);
  }
  JUMPOUT(0x1E146D1ACLL);
}

void sub_1E146E654()
{
  if (STACK[0x240]) {
    JUMPOUT(0x1E146DAA4);
  }
  JUMPOUT(0x1E146D1B4);
}

void sub_1E146E664()
{
  if (STACK[0x248]) {
    JUMPOUT(0x1E146DAB4);
  }
  JUMPOUT(0x1E146D1BCLL);
}

void sub_1E146E674()
{
  if (STACK[0x250]) {
    JUMPOUT(0x1E146DAC4);
  }
  JUMPOUT(0x1E146D1C4);
}

void sub_1E146E684()
{
  if (STACK[0x258]) {
    JUMPOUT(0x1E146DAD4);
  }
  JUMPOUT(0x1E146D1CCLL);
}

void sub_1E146E694()
{
  if (STACK[0x260]) {
    JUMPOUT(0x1E146DAE4);
  }
  JUMPOUT(0x1E146D1D4);
}

void sub_1E146E6A4()
{
  if (STACK[0x268]) {
    JUMPOUT(0x1E146DAF4);
  }
  JUMPOUT(0x1E146D1DCLL);
}

void sub_1E146E6B4()
{
  if (STACK[0x270]) {
    JUMPOUT(0x1E146DB04);
  }
  JUMPOUT(0x1E146D1E4);
}

void sub_1E146E6C4()
{
  if (STACK[0x278]) {
    JUMPOUT(0x1E146DB14);
  }
  JUMPOUT(0x1E146D1ECLL);
}

void sub_1E146E6D4()
{
  if (STACK[0x280]) {
    JUMPOUT(0x1E146DB24);
  }
  JUMPOUT(0x1E146D1F4);
}

void sub_1E146E6E4()
{
  if (STACK[0x290]) {
    JUMPOUT(0x1E146DB44);
  }
  JUMPOUT(0x1E146D204);
}

void sub_1E146E6F4()
{
  if (STACK[0x298]) {
    JUMPOUT(0x1E146DB54);
  }
  JUMPOUT(0x1E146D20CLL);
}

void sub_1E146E704()
{
  if (STACK[0x2A0]) {
    JUMPOUT(0x1E146DB64);
  }
  JUMPOUT(0x1E146D214);
}

void sub_1E146E714()
{
  if (STACK[0x2A8]) {
    JUMPOUT(0x1E146DB74);
  }
  JUMPOUT(0x1E146D21CLL);
}

void sub_1E146E724()
{
  if (STACK[0x2B0]) {
    JUMPOUT(0x1E146DB84);
  }
  JUMPOUT(0x1E146D224);
}

void sub_1E146E734()
{
  if (STACK[0x2B8]) {
    JUMPOUT(0x1E146DB94);
  }
  JUMPOUT(0x1E146D22CLL);
}

void sub_1E146E744()
{
  if (STACK[0x2C0]) {
    JUMPOUT(0x1E146DBA4);
  }
  JUMPOUT(0x1E146D234);
}

void sub_1E146E754()
{
  if (STACK[0x2C8]) {
    JUMPOUT(0x1E146DBB4);
  }
  JUMPOUT(0x1E146D23CLL);
}

void sub_1E146E764()
{
  if (STACK[0x2D8]) {
    JUMPOUT(0x1E146DBD4);
  }
  JUMPOUT(0x1E146D24CLL);
}

void sub_1E146E774()
{
  if (STACK[0x2E0]) {
    JUMPOUT(0x1E146DBE4);
  }
  JUMPOUT(0x1E146D254);
}

void sub_1E146E784()
{
  if (STACK[0x2E8]) {
    JUMPOUT(0x1E146DBF4);
  }
  JUMPOUT(0x1E146D25CLL);
}

void sub_1E146E794()
{
  if (STACK[0x2F0]) {
    JUMPOUT(0x1E146DC04);
  }
  JUMPOUT(0x1E146D264);
}

void sub_1E146E7A4()
{
  if (STACK[0x2F8]) {
    JUMPOUT(0x1E146DC14);
  }
  JUMPOUT(0x1E146D26CLL);
}

void sub_1E146E7B4()
{
  if (STACK[0x300]) {
    JUMPOUT(0x1E146DC24);
  }
  JUMPOUT(0x1E146D274);
}

void sub_1E146E7C4()
{
  if (STACK[0x308]) {
    JUMPOUT(0x1E146DC34);
  }
  JUMPOUT(0x1E146D27CLL);
}

void sub_1E146E7D4()
{
  if (STACK[0x310]) {
    JUMPOUT(0x1E146DC44);
  }
  JUMPOUT(0x1E146D284);
}

void sub_1E146E7E4()
{
  if (STACK[0x318]) {
    JUMPOUT(0x1E146DC54);
  }
  JUMPOUT(0x1E146D28CLL);
}

void sub_1E146E7F4()
{
  if (STACK[0x320]) {
    JUMPOUT(0x1E146DC64);
  }
  JUMPOUT(0x1E146D294);
}

void sub_1E146E804()
{
  if (STACK[0x328]) {
    JUMPOUT(0x1E146DC74);
  }
  JUMPOUT(0x1E146D29CLL);
}

void sub_1E146E814()
{
  if (STACK[0x330]) {
    JUMPOUT(0x1E146DC84);
  }
  JUMPOUT(0x1E146D2A4);
}

void sub_1E146E824()
{
  if (STACK[0x338]) {
    JUMPOUT(0x1E146DC94);
  }
  JUMPOUT(0x1E146D2ACLL);
}

void sub_1E146E834()
{
  if (STACK[0x340]) {
    JUMPOUT(0x1E146DCA4);
  }
  JUMPOUT(0x1E146D2B4);
}

void sub_1E146E844()
{
  if (STACK[0x348]) {
    JUMPOUT(0x1E146DCB4);
  }
  JUMPOUT(0x1E146D2BCLL);
}

void sub_1E146E854()
{
  if (STACK[0x350]) {
    JUMPOUT(0x1E146DCC4);
  }
  JUMPOUT(0x1E146D2C4);
}

void sub_1E146E864()
{
  if (STACK[0x358]) {
    JUMPOUT(0x1E146DCD4);
  }
  JUMPOUT(0x1E146D2CCLL);
}

void sub_1E146E874()
{
  if (STACK[0x360]) {
    JUMPOUT(0x1E146DCE4);
  }
  JUMPOUT(0x1E146D2D4);
}

void sub_1E146E884()
{
  if (STACK[0x368]) {
    JUMPOUT(0x1E146DCF4);
  }
  JUMPOUT(0x1E146D2DCLL);
}

void sub_1E146E894()
{
  if (STACK[0x370]) {
    JUMPOUT(0x1E146DD04);
  }
  JUMPOUT(0x1E146D2E4);
}

void sub_1E146E8A4()
{
  if (STACK[0x378]) {
    JUMPOUT(0x1E146DD14);
  }
  JUMPOUT(0x1E146D2ECLL);
}

void sub_1E146E8B4()
{
  if (STACK[0x380]) {
    JUMPOUT(0x1E146DD24);
  }
  JUMPOUT(0x1E146D2F4);
}

void sub_1E146E8C4()
{
  if (STACK[0x388]) {
    JUMPOUT(0x1E146DD34);
  }
  JUMPOUT(0x1E146D2FCLL);
}

void sub_1E146E8D4()
{
  if (STACK[0x390]) {
    JUMPOUT(0x1E146DD44);
  }
  JUMPOUT(0x1E146D304);
}

void sub_1E146E8E4()
{
  if (STACK[0x398]) {
    JUMPOUT(0x1E146DD54);
  }
  JUMPOUT(0x1E146D30CLL);
}

void sub_1E146E8F4()
{
  if (STACK[0x3A0]) {
    JUMPOUT(0x1E146DD64);
  }
  JUMPOUT(0x1E146D314);
}

void sub_1E146E904()
{
  if (STACK[0x3A8]) {
    JUMPOUT(0x1E146DD74);
  }
  JUMPOUT(0x1E146D31CLL);
}

void sub_1E146E914()
{
  if (STACK[0x3B0]) {
    JUMPOUT(0x1E146DD84);
  }
  JUMPOUT(0x1E146D324);
}

void sub_1E146E924()
{
  if (STACK[0x3B8]) {
    JUMPOUT(0x1E146DD94);
  }
  JUMPOUT(0x1E146D32CLL);
}

void sub_1E146E934()
{
  if (STACK[0x3C0]) {
    JUMPOUT(0x1E146DDA4);
  }
  JUMPOUT(0x1E146D334);
}

void sub_1E146E944()
{
  if (STACK[0x3C8]) {
    JUMPOUT(0x1E146DDB4);
  }
  JUMPOUT(0x1E146D33CLL);
}

void sub_1E146E954()
{
  if (STACK[0x3D0]) {
    JUMPOUT(0x1E146DDC4);
  }
  JUMPOUT(0x1E146D344);
}

void sub_1E146E964()
{
  if (STACK[0x3D8]) {
    JUMPOUT(0x1E146DDD4);
  }
  JUMPOUT(0x1E146D34CLL);
}

void sub_1E146E974()
{
  if (STACK[0x3E0]) {
    JUMPOUT(0x1E146DDE4);
  }
  JUMPOUT(0x1E146D354);
}

void sub_1E146E984()
{
  if (STACK[0x3E8]) {
    JUMPOUT(0x1E146DDF4);
  }
  JUMPOUT(0x1E146D35CLL);
}

void sub_1E146E994()
{
  if (STACK[0x3F0]) {
    JUMPOUT(0x1E146DE04);
  }
  JUMPOUT(0x1E146D364);
}

void sub_1E146E9A4()
{
  if (STACK[0x3F8]) {
    JUMPOUT(0x1E146DE14);
  }
  JUMPOUT(0x1E146D36CLL);
}

void sub_1E146E9B4()
{
  if (STACK[0x400]) {
    JUMPOUT(0x1E146DE24);
  }
  JUMPOUT(0x1E146D374);
}

void sub_1E146E9C4()
{
  if (STACK[0x408]) {
    JUMPOUT(0x1E146DE34);
  }
  JUMPOUT(0x1E146D37CLL);
}

void sub_1E146E9D4()
{
  if (STACK[0x410]) {
    JUMPOUT(0x1E146DE44);
  }
  JUMPOUT(0x1E146D384);
}

void sub_1E146E9E4()
{
  if (STACK[0x418]) {
    JUMPOUT(0x1E146DE54);
  }
  JUMPOUT(0x1E146D38CLL);
}

void sub_1E146E9F4()
{
  if (STACK[0x420]) {
    JUMPOUT(0x1E146DE64);
  }
  JUMPOUT(0x1E146D394);
}

void sub_1E146EA04()
{
  if (STACK[0x428]) {
    JUMPOUT(0x1E146DE74);
  }
  JUMPOUT(0x1E146D39CLL);
}

void sub_1E146EA14()
{
  if (STACK[0x430]) {
    JUMPOUT(0x1E146DE84);
  }
  JUMPOUT(0x1E146D3A4);
}

void sub_1E146EA24()
{
  if (STACK[0x438]) {
    JUMPOUT(0x1E146DE94);
  }
  JUMPOUT(0x1E146D3ACLL);
}

void sub_1E146EA34()
{
  if (STACK[0x440]) {
    JUMPOUT(0x1E146DEA4);
  }
  JUMPOUT(0x1E146D3B4);
}

void sub_1E146EA44()
{
  if (STACK[0x448]) {
    JUMPOUT(0x1E146DEB4);
  }
  JUMPOUT(0x1E146D3BCLL);
}

void sub_1E146EA54()
{
  if (STACK[0x450]) {
    JUMPOUT(0x1E146DEC4);
  }
  JUMPOUT(0x1E146D3C4);
}

void sub_1E146EA64()
{
  if (STACK[0x458]) {
    JUMPOUT(0x1E146DED4);
  }
  JUMPOUT(0x1E146D3CCLL);
}

void sub_1E146EA74()
{
  if (STACK[0x460]) {
    JUMPOUT(0x1E146DEE4);
  }
  JUMPOUT(0x1E146D3D4);
}

void sub_1E146EA84()
{
  if (STACK[0x468]) {
    JUMPOUT(0x1E146DEF4);
  }
  JUMPOUT(0x1E146D3DCLL);
}

void sub_1E146EA94()
{
  if (STACK[0x470]) {
    JUMPOUT(0x1E146DF04);
  }
  JUMPOUT(0x1E146D3E4);
}

void sub_1E146EAA4()
{
  if (STACK[0x478]) {
    JUMPOUT(0x1E146DF14);
  }
  JUMPOUT(0x1E146D3ECLL);
}

void sub_1E146EAB4()
{
  if (STACK[0x480]) {
    JUMPOUT(0x1E146DF24);
  }
  JUMPOUT(0x1E146D3F4);
}

void sub_1E146EAC4()
{
  if (STACK[0x488]) {
    JUMPOUT(0x1E146DF34);
  }
  JUMPOUT(0x1E146D3FCLL);
}

void sub_1E146EAD4()
{
  if (STACK[0x490]) {
    JUMPOUT(0x1E146DF44);
  }
  JUMPOUT(0x1E146D404);
}

void sub_1E146EAE4()
{
  if (STACK[0x498]) {
    JUMPOUT(0x1E146DF54);
  }
  JUMPOUT(0x1E146D40CLL);
}

void sub_1E146EAF4()
{
  if (STACK[0x4A0]) {
    JUMPOUT(0x1E146DF64);
  }
  JUMPOUT(0x1E146D414);
}

void sub_1E146EB04()
{
  if (STACK[0x4A8]) {
    JUMPOUT(0x1E146DF74);
  }
  JUMPOUT(0x1E146D41CLL);
}

void sub_1E146EB14()
{
  if (STACK[0x4B0]) {
    JUMPOUT(0x1E146DF84);
  }
  JUMPOUT(0x1E146D424);
}

void sub_1E146EB24()
{
  if (STACK[0x4B8]) {
    JUMPOUT(0x1E146DF94);
  }
  JUMPOUT(0x1E146D42CLL);
}

void sub_1E146EB34()
{
  if (STACK[0x4C0]) {
    JUMPOUT(0x1E146DFA4);
  }
  JUMPOUT(0x1E146D434);
}

void sub_1E146EB44()
{
  if (STACK[0x4C8]) {
    JUMPOUT(0x1E146DFB4);
  }
  JUMPOUT(0x1E146D43CLL);
}

void sub_1E146EB54()
{
  if (STACK[0x4D0]) {
    JUMPOUT(0x1E146DFC4);
  }
  JUMPOUT(0x1E146D444);
}

void sub_1E146EB64()
{
  if (STACK[0x4D8]) {
    JUMPOUT(0x1E146DFD4);
  }
  JUMPOUT(0x1E146D44CLL);
}

void sub_1E146EB74()
{
  if (STACK[0x4E0]) {
    JUMPOUT(0x1E146DFE4);
  }
  JUMPOUT(0x1E146D454);
}

void sub_1E146EB84()
{
  if (STACK[0x4E8]) {
    JUMPOUT(0x1E146DFF4);
  }
  JUMPOUT(0x1E146D45CLL);
}

void sub_1E146EB94()
{
  if (STACK[0x4F0]) {
    JUMPOUT(0x1E146E004);
  }
  JUMPOUT(0x1E146D464);
}

void sub_1E146EBA4()
{
  if (STACK[0x4F8]) {
    JUMPOUT(0x1E146E014);
  }
  JUMPOUT(0x1E146D46CLL);
}

void sub_1E146EBB4()
{
  if (STACK[0x500]) {
    JUMPOUT(0x1E146E024);
  }
  JUMPOUT(0x1E146D474);
}

void sub_1E146EBC4()
{
  if (STACK[0x508]) {
    JUMPOUT(0x1E146E034);
  }
  JUMPOUT(0x1E146D47CLL);
}

void sub_1E146EBD4()
{
  if (STACK[0x510]) {
    JUMPOUT(0x1E146E044);
  }
  JUMPOUT(0x1E146D484);
}

void sub_1E146EBE4()
{
  if (STACK[0x518]) {
    JUMPOUT(0x1E146E054);
  }
  JUMPOUT(0x1E146D48CLL);
}

void sub_1E146EBF4()
{
  if (STACK[0x520]) {
    JUMPOUT(0x1E146E064);
  }
  JUMPOUT(0x1E146D494);
}

void sub_1E146EC04()
{
  if (STACK[0x528]) {
    JUMPOUT(0x1E146E074);
  }
  JUMPOUT(0x1E146D49CLL);
}

void sub_1E146EC14()
{
  if (STACK[0x530]) {
    JUMPOUT(0x1E146E084);
  }
  JUMPOUT(0x1E146D4A4);
}

void sub_1E146EC24()
{
  if (STACK[0x538]) {
    JUMPOUT(0x1E146E094);
  }
  JUMPOUT(0x1E146D4ACLL);
}

void sub_1E146EC34()
{
  if (STACK[0x540]) {
    JUMPOUT(0x1E146E0A4);
  }
  JUMPOUT(0x1E146D4B4);
}

void sub_1E146EC44()
{
  if (STACK[0x548]) {
    JUMPOUT(0x1E146E0B4);
  }
  JUMPOUT(0x1E146D4BCLL);
}

void sub_1E146EC54()
{
  if (STACK[0x550]) {
    JUMPOUT(0x1E146E0C4);
  }
  JUMPOUT(0x1E146D4C4);
}

void sub_1E146EC64()
{
  if (STACK[0x558]) {
    JUMPOUT(0x1E146E0D4);
  }
  JUMPOUT(0x1E146D4CCLL);
}

void sub_1E146EC74()
{
  if (STACK[0x560]) {
    JUMPOUT(0x1E146E0E4);
  }
  JUMPOUT(0x1E146D4D4);
}

void sub_1E146EC84()
{
  if (STACK[0x568]) {
    JUMPOUT(0x1E146E0F4);
  }
  JUMPOUT(0x1E146D4DCLL);
}

void sub_1E146EC94()
{
  if (STACK[0x570]) {
    JUMPOUT(0x1E146E104);
  }
  JUMPOUT(0x1E146D4E4);
}

void sub_1E146ECA4()
{
  if (STACK[0x578]) {
    JUMPOUT(0x1E146E114);
  }
  JUMPOUT(0x1E146D4ECLL);
}

void sub_1E146ECB4()
{
  if (STACK[0x580]) {
    JUMPOUT(0x1E146E124);
  }
  JUMPOUT(0x1E146D4F4);
}

void sub_1E146ECC4()
{
  if (STACK[0x588]) {
    JUMPOUT(0x1E146E134);
  }
  JUMPOUT(0x1E146D4FCLL);
}

void sub_1E146ECD4()
{
  if (STACK[0x590]) {
    JUMPOUT(0x1E146E144);
  }
  JUMPOUT(0x1E146D504);
}

void sub_1E146ECE4()
{
  if (STACK[0x598]) {
    JUMPOUT(0x1E146E154);
  }
  JUMPOUT(0x1E146D50CLL);
}

void sub_1E146ECF4()
{
  if (STACK[0x5A0]) {
    JUMPOUT(0x1E146E164);
  }
  JUMPOUT(0x1E146D514);
}

void sub_1E146ED04()
{
  if (STACK[0x5A8]) {
    JUMPOUT(0x1E146E174);
  }
  JUMPOUT(0x1E146D51CLL);
}

void sub_1E146ED14()
{
  if (STACK[0x5B0]) {
    JUMPOUT(0x1E146E184);
  }
  JUMPOUT(0x1E146D524);
}

void sub_1E146ED24()
{
  if (STACK[0x5B8]) {
    JUMPOUT(0x1E146E194);
  }
  JUMPOUT(0x1E146D52CLL);
}

void sub_1E146ED34()
{
  if (STACK[0x5C0]) {
    JUMPOUT(0x1E146E1A4);
  }
  JUMPOUT(0x1E146D534);
}

void sub_1E146ED44()
{
  if (STACK[0x5C8]) {
    JUMPOUT(0x1E146E1B4);
  }
  JUMPOUT(0x1E146D53CLL);
}

void sub_1E146ED54()
{
  if (STACK[0x5D0]) {
    JUMPOUT(0x1E146E1C4);
  }
  JUMPOUT(0x1E146D544);
}

void sub_1E146ED64()
{
  if (STACK[0x5D8]) {
    JUMPOUT(0x1E146E1D4);
  }
  JUMPOUT(0x1E146D54CLL);
}

void sub_1E146ED74()
{
  if (STACK[0x5E0]) {
    JUMPOUT(0x1E146E1E4);
  }
  JUMPOUT(0x1E146D554);
}

void sub_1E146ED84()
{
  if (STACK[0x5E8]) {
    JUMPOUT(0x1E146E1F4);
  }
  JUMPOUT(0x1E146D55CLL);
}

void sub_1E146ED94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    JUMPOUT(0x1E146E204);
  }
  JUMPOUT(0x1E146D564);
}

void sub_1E14705CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef a22,CFTypeRef a23,CFTypeRef a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,CFTypeRef a32,CFTypeRef a33,CFTypeRef a34,CFTypeRef a35,CFTypeRef a36,CFTypeRef a37,CFTypeRef a38,CFTypeRef a39,CFTypeRef a40,CFTypeRef a41,CFTypeRef a42,CFTypeRef a43,CFTypeRef a44,CFTypeRef a45,CFTypeRef a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef a49,CFTypeRef a50,CFTypeRef a51,CFTypeRef a52,CFTypeRef a53,CFTypeRef a54,CFTypeRef a55,CFTypeRef a56,CFTypeRef a57,CFTypeRef a58,CFTypeRef a59,CFTypeRef a60,CFTypeRef a61,CFTypeRef a62,CFTypeRef a63)
{
  if (v73)
  {
    CFRelease(v73);
    if (!v72)
    {
LABEL_3:
      if (!v79) {
        goto LABEL_4;
      }
      goto LABEL_76;
    }
  }
  else if (!v72)
  {
    goto LABEL_3;
  }
  CFRelease(v72);
  if (!v79)
  {
LABEL_4:
    if (!v78) {
      goto LABEL_5;
    }
    goto LABEL_77;
  }
LABEL_76:
  CFRelease(v79);
  if (!v78)
  {
LABEL_5:
    if (!v77) {
      goto LABEL_6;
    }
    goto LABEL_78;
  }
LABEL_77:
  CFRelease(v78);
  if (!v77)
  {
LABEL_6:
    if (!v76) {
      goto LABEL_7;
    }
    goto LABEL_79;
  }
LABEL_78:
  CFRelease(v77);
  if (!v76)
  {
LABEL_7:
    if (!v75) {
      goto LABEL_8;
    }
    goto LABEL_80;
  }
LABEL_79:
  CFRelease(v76);
  if (!v75)
  {
LABEL_8:
    if (!v74) {
      goto LABEL_9;
    }
    goto LABEL_81;
  }
LABEL_80:
  CFRelease(v75);
  if (!v74)
  {
LABEL_9:
    if (!cf) {
      goto LABEL_10;
    }
    goto LABEL_82;
  }
LABEL_81:
  CFRelease(v74);
  if (!cf)
  {
LABEL_10:
    if (!a13) {
      goto LABEL_11;
    }
    goto LABEL_83;
  }
LABEL_82:
  CFRelease(cf);
  if (!a13)
  {
LABEL_11:
    if (!a14) {
      goto LABEL_12;
    }
    goto LABEL_84;
  }
LABEL_83:
  CFRelease(a13);
  if (!a14)
  {
LABEL_12:
    if (!a15) {
      goto LABEL_13;
    }
    goto LABEL_85;
  }
LABEL_84:
  CFRelease(a14);
  if (!a15)
  {
LABEL_13:
    if (!a16) {
      goto LABEL_14;
    }
    goto LABEL_86;
  }
LABEL_85:
  CFRelease(a15);
  if (!a16)
  {
LABEL_14:
    if (!a17) {
      goto LABEL_15;
    }
    goto LABEL_87;
  }
LABEL_86:
  CFRelease(a16);
  if (!a17)
  {
LABEL_15:
    if (!a18) {
      goto LABEL_16;
    }
    goto LABEL_88;
  }
LABEL_87:
  CFRelease(a17);
  if (!a18)
  {
LABEL_16:
    if (!a19) {
      goto LABEL_17;
    }
    goto LABEL_89;
  }
LABEL_88:
  CFRelease(a18);
  if (!a19)
  {
LABEL_17:
    if (!a20) {
      goto LABEL_18;
    }
    goto LABEL_90;
  }
LABEL_89:
  CFRelease(a19);
  if (!a20)
  {
LABEL_18:
    if (!a21) {
      goto LABEL_19;
    }
    goto LABEL_91;
  }
LABEL_90:
  CFRelease(a20);
  if (!a21)
  {
LABEL_19:
    if (!a22) {
      goto LABEL_20;
    }
    goto LABEL_92;
  }
LABEL_91:
  CFRelease(a21);
  if (!a22)
  {
LABEL_20:
    if (!a23) {
      goto LABEL_21;
    }
    goto LABEL_93;
  }
LABEL_92:
  CFRelease(a22);
  if (!a23)
  {
LABEL_21:
    if (!a24) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }
LABEL_93:
  CFRelease(a23);
  if (!a24)
  {
LABEL_22:
    if (!a25) {
      goto LABEL_23;
    }
    goto LABEL_95;
  }
LABEL_94:
  CFRelease(a24);
  if (!a25)
  {
LABEL_23:
    if (!a26) {
      goto LABEL_24;
    }
    goto LABEL_96;
  }
LABEL_95:
  CFRelease(a25);
  if (!a26)
  {
LABEL_24:
    if (!a27) {
      goto LABEL_25;
    }
    goto LABEL_97;
  }
LABEL_96:
  CFRelease(a26);
  if (!a27)
  {
LABEL_25:
    if (!a28) {
      goto LABEL_26;
    }
    goto LABEL_98;
  }
LABEL_97:
  CFRelease(a27);
  if (!a28)
  {
LABEL_26:
    if (!a29) {
      goto LABEL_27;
    }
    goto LABEL_99;
  }
LABEL_98:
  CFRelease(a28);
  if (!a29)
  {
LABEL_27:
    if (!a30) {
      goto LABEL_28;
    }
    goto LABEL_100;
  }
LABEL_99:
  CFRelease(a29);
  if (!a30)
  {
LABEL_28:
    if (!a31) {
      goto LABEL_29;
    }
    goto LABEL_101;
  }
LABEL_100:
  CFRelease(a30);
  if (!a31)
  {
LABEL_29:
    if (!a32) {
      goto LABEL_30;
    }
    goto LABEL_102;
  }
LABEL_101:
  CFRelease(a31);
  if (!a32)
  {
LABEL_30:
    if (!a33) {
      goto LABEL_31;
    }
    goto LABEL_103;
  }
LABEL_102:
  CFRelease(a32);
  if (!a33)
  {
LABEL_31:
    if (!a34) {
      goto LABEL_32;
    }
    goto LABEL_104;
  }
LABEL_103:
  CFRelease(a33);
  if (!a34)
  {
LABEL_32:
    if (!a35) {
      goto LABEL_33;
    }
    goto LABEL_105;
  }
LABEL_104:
  CFRelease(a34);
  if (!a35)
  {
LABEL_33:
    if (!a36) {
      goto LABEL_34;
    }
    goto LABEL_106;
  }
LABEL_105:
  CFRelease(a35);
  if (!a36)
  {
LABEL_34:
    if (!a37) {
      goto LABEL_35;
    }
    goto LABEL_107;
  }
LABEL_106:
  CFRelease(a36);
  if (!a37)
  {
LABEL_35:
    if (!a38) {
      goto LABEL_36;
    }
    goto LABEL_108;
  }
LABEL_107:
  CFRelease(a37);
  if (!a38)
  {
LABEL_36:
    if (!a39) {
      goto LABEL_37;
    }
    goto LABEL_109;
  }
LABEL_108:
  CFRelease(a38);
  if (!a39)
  {
LABEL_37:
    if (!a40) {
      goto LABEL_38;
    }
    goto LABEL_110;
  }
LABEL_109:
  CFRelease(a39);
  if (!a40)
  {
LABEL_38:
    if (!a41) {
      goto LABEL_39;
    }
    goto LABEL_111;
  }
LABEL_110:
  CFRelease(a40);
  if (!a41)
  {
LABEL_39:
    if (!a42) {
      goto LABEL_40;
    }
    goto LABEL_112;
  }
LABEL_111:
  CFRelease(a41);
  if (!a42)
  {
LABEL_40:
    if (!a43) {
      goto LABEL_41;
    }
    goto LABEL_113;
  }
LABEL_112:
  CFRelease(a42);
  if (!a43)
  {
LABEL_41:
    if (!a44) {
      goto LABEL_42;
    }
    goto LABEL_114;
  }
LABEL_113:
  CFRelease(a43);
  if (!a44)
  {
LABEL_42:
    if (!a45) {
      goto LABEL_43;
    }
    goto LABEL_115;
  }
LABEL_114:
  CFRelease(a44);
  if (!a45)
  {
LABEL_43:
    if (!a46) {
      goto LABEL_44;
    }
    goto LABEL_116;
  }
LABEL_115:
  CFRelease(a45);
  if (!a46)
  {
LABEL_44:
    if (!a47) {
      goto LABEL_45;
    }
    goto LABEL_117;
  }
LABEL_116:
  CFRelease(a46);
  if (!a47)
  {
LABEL_45:
    if (!a48) {
      goto LABEL_46;
    }
    goto LABEL_118;
  }
LABEL_117:
  CFRelease(a47);
  if (!a48)
  {
LABEL_46:
    if (!a49) {
      goto LABEL_47;
    }
    goto LABEL_119;
  }
LABEL_118:
  CFRelease(a48);
  if (!a49)
  {
LABEL_47:
    if (!a50) {
      goto LABEL_48;
    }
    goto LABEL_120;
  }
LABEL_119:
  CFRelease(a49);
  if (!a50)
  {
LABEL_48:
    if (!a51) {
      goto LABEL_49;
    }
    goto LABEL_121;
  }
LABEL_120:
  CFRelease(a50);
  if (!a51)
  {
LABEL_49:
    if (!a52) {
      goto LABEL_50;
    }
    goto LABEL_122;
  }
LABEL_121:
  CFRelease(a51);
  if (!a52)
  {
LABEL_50:
    if (!a53) {
      goto LABEL_51;
    }
    goto LABEL_123;
  }
LABEL_122:
  CFRelease(a52);
  if (!a53)
  {
LABEL_51:
    if (!a54) {
      goto LABEL_52;
    }
    goto LABEL_124;
  }
LABEL_123:
  CFRelease(a53);
  if (!a54)
  {
LABEL_52:
    if (!a55) {
      goto LABEL_53;
    }
    goto LABEL_125;
  }
LABEL_124:
  CFRelease(a54);
  if (!a55)
  {
LABEL_53:
    if (!a56) {
      goto LABEL_54;
    }
    goto LABEL_126;
  }
LABEL_125:
  CFRelease(a55);
  if (!a56)
  {
LABEL_54:
    if (!a57) {
      goto LABEL_55;
    }
    goto LABEL_127;
  }
LABEL_126:
  CFRelease(a56);
  if (!a57)
  {
LABEL_55:
    if (!a58) {
      goto LABEL_56;
    }
    goto LABEL_128;
  }
LABEL_127:
  CFRelease(a57);
  if (!a58)
  {
LABEL_56:
    if (!a59) {
      goto LABEL_57;
    }
    goto LABEL_129;
  }
LABEL_128:
  CFRelease(a58);
  if (!a59)
  {
LABEL_57:
    if (!a60) {
      goto LABEL_58;
    }
    goto LABEL_130;
  }
LABEL_129:
  CFRelease(a59);
  if (!a60)
  {
LABEL_58:
    if (!a61) {
      goto LABEL_59;
    }
    goto LABEL_131;
  }
LABEL_130:
  CFRelease(a60);
  if (!a61)
  {
LABEL_59:
    if (!a62) {
      goto LABEL_60;
    }
    goto LABEL_132;
  }
LABEL_131:
  CFRelease(a61);
  if (!a62)
  {
LABEL_60:
    if (!a63) {
      goto LABEL_61;
    }
    goto LABEL_133;
  }
LABEL_132:
  CFRelease(a62);
  if (!a63)
  {
LABEL_61:
    if (!a64) {
      goto LABEL_62;
    }
    goto LABEL_134;
  }
LABEL_133:
  CFRelease(a63);
  if (!a64)
  {
LABEL_62:
    if (!a65) {
      goto LABEL_63;
    }
    goto LABEL_135;
  }
LABEL_134:
  CFRelease(a64);
  if (!a65)
  {
LABEL_63:
    if (!a66) {
      goto LABEL_64;
    }
    goto LABEL_136;
  }
LABEL_135:
  CFRelease(a65);
  if (!a66)
  {
LABEL_64:
    if (!a67) {
      goto LABEL_65;
    }
    goto LABEL_137;
  }
LABEL_136:
  CFRelease(a66);
  if (!a67)
  {
LABEL_65:
    if (!a68) {
      goto LABEL_66;
    }
    goto LABEL_138;
  }
LABEL_137:
  CFRelease(a67);
  if (!a68)
  {
LABEL_66:
    if (!a69) {
      goto LABEL_67;
    }
    goto LABEL_139;
  }
LABEL_138:
  CFRelease(a68);
  if (!a69)
  {
LABEL_67:
    if (!a70) {
      goto LABEL_68;
    }
    goto LABEL_140;
  }
LABEL_139:
  CFRelease(a69);
  if (!a70)
  {
LABEL_68:
    if (!a71) {
      goto LABEL_69;
    }
    goto LABEL_141;
  }
LABEL_140:
  CFRelease(a70);
  if (!a71)
  {
LABEL_69:
    if (!a72) {
      goto LABEL_70;
    }
    goto LABEL_142;
  }
LABEL_141:
  CFRelease(a71);
  if (!a72)
  {
LABEL_70:
    if (!STACK[0x200]) {
      goto LABEL_71;
    }
    goto LABEL_143;
  }
LABEL_142:
  CFRelease(a72);
  if (!STACK[0x200])
  {
LABEL_71:
    if (!STACK[0x208]) {
      goto LABEL_72;
    }
    goto LABEL_144;
  }
LABEL_143:
  CFRelease((CFTypeRef)STACK[0x200]);
  if (!STACK[0x208])
  {
LABEL_72:
    if (!a11) {
      goto LABEL_73;
    }
    goto LABEL_145;
  }
LABEL_144:
  CFRelease((CFTypeRef)STACK[0x208]);
  if (!a11) {
LABEL_73:
  }
    _Unwind_Resume(a1);
LABEL_145:
  CFRelease(a11);
  _Unwind_Resume(a1);
}

void sub_1E1470CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x1E14708D0);
  }
  JUMPOUT(0x1E1470600);
}

void sub_1E1470CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    JUMPOUT(0x1E14708E0);
  }
  JUMPOUT(0x1E1470608);
}

void sub_1E1470CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x1E14708F0);
  }
  JUMPOUT(0x1E1470610);
}

void sub_1E1470CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0x1E1470900);
  }
  JUMPOUT(0x1E1470618);
}

void sub_1E1470D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    JUMPOUT(0x1E1470910);
  }
  JUMPOUT(0x1E1470620);
}

void sub_1E1470D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    JUMPOUT(0x1E1470920);
  }
  JUMPOUT(0x1E1470628);
}

void sub_1E1470D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    JUMPOUT(0x1E1470930);
  }
  JUMPOUT(0x1E1470630);
}

void sub_1E1470D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    JUMPOUT(0x1E1470940);
  }
  JUMPOUT(0x1E1470638);
}

void sub_1E1470D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x1E1470950);
  }
  JUMPOUT(0x1E1470640);
}

void sub_1E1470D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    JUMPOUT(0x1E1470960);
  }
  JUMPOUT(0x1E1470648);
}

void sub_1E1470D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23) {
    JUMPOUT(0x1E1470970);
  }
  JUMPOUT(0x1E1470650);
}

void sub_1E1470D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x1E1470980);
  }
  JUMPOUT(0x1E1470658);
}

void sub_1E1470D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    JUMPOUT(0x1E1470990);
  }
  JUMPOUT(0x1E1470660);
}

void sub_1E1470D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    JUMPOUT(0x1E14709A0);
  }
  JUMPOUT(0x1E1470668);
}

void sub_1E1470DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    JUMPOUT(0x1E14709B0);
  }
  JUMPOUT(0x1E1470670);
}

void sub_1E1470DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a28) {
    JUMPOUT(0x1E14709C0);
  }
  JUMPOUT(0x1E1470678);
}

void sub_1E1470DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29) {
    JUMPOUT(0x1E14709D0);
  }
  JUMPOUT(0x1E1470680);
}

void sub_1E1470DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30) {
    JUMPOUT(0x1E14709E0);
  }
  JUMPOUT(0x1E1470688);
}

void sub_1E1470DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31) {
    JUMPOUT(0x1E14709F0);
  }
  JUMPOUT(0x1E1470690);
}

void sub_1E1470DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32) {
    JUMPOUT(0x1E1470A00);
  }
  JUMPOUT(0x1E1470698);
}

void sub_1E1470E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33) {
    JUMPOUT(0x1E1470A10);
  }
  JUMPOUT(0x1E14706A0);
}

void sub_1E1470E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a34) {
    JUMPOUT(0x1E1470A20);
  }
  JUMPOUT(0x1E14706A8);
}

void sub_1E1470E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35) {
    JUMPOUT(0x1E1470A30);
  }
  JUMPOUT(0x1E14706B0);
}

void sub_1E1470E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36) {
    JUMPOUT(0x1E1470A40);
  }
  JUMPOUT(0x1E14706B8);
}

void sub_1E1470E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a37) {
    JUMPOUT(0x1E1470A50);
  }
  JUMPOUT(0x1E14706C0);
}

void sub_1E1470E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38) {
    JUMPOUT(0x1E1470A60);
  }
  JUMPOUT(0x1E14706C8);
}

void sub_1E1470E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39) {
    JUMPOUT(0x1E1470A70);
  }
  JUMPOUT(0x1E14706D0);
}

void sub_1E1470E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40) {
    JUMPOUT(0x1E1470A80);
  }
  JUMPOUT(0x1E14706D8);
}

void sub_1E1470E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41) {
    JUMPOUT(0x1E1470A90);
  }
  JUMPOUT(0x1E14706E0);
}

void sub_1E1470E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a42) {
    JUMPOUT(0x1E1470AA0);
  }
  JUMPOUT(0x1E14706E8);
}

void sub_1E1470EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43) {
    JUMPOUT(0x1E1470AB0);
  }
  JUMPOUT(0x1E14706F0);
}

void sub_1E1470EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44) {
    JUMPOUT(0x1E1470AC0);
  }
  JUMPOUT(0x1E14706F8);
}

void sub_1E1470EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a45) {
    JUMPOUT(0x1E1470AD0);
  }
  JUMPOUT(0x1E1470700);
}

void sub_1E1470ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46) {
    JUMPOUT(0x1E1470AE0);
  }
  JUMPOUT(0x1E1470708);
}

void sub_1E1470EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47) {
    JUMPOUT(0x1E1470AF0);
  }
  JUMPOUT(0x1E1470710);
}

void sub_1E1470EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a48) {
    JUMPOUT(0x1E1470B00);
  }
  JUMPOUT(0x1E1470718);
}

void sub_1E1470F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a49) {
    JUMPOUT(0x1E1470B10);
  }
  JUMPOUT(0x1E1470720);
}

void sub_1E1470F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a50) {
    JUMPOUT(0x1E1470B20);
  }
  JUMPOUT(0x1E1470728);
}

void sub_1E1470F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51) {
    JUMPOUT(0x1E1470B30);
  }
  JUMPOUT(0x1E1470730);
}

void sub_1E1470F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a52) {
    JUMPOUT(0x1E1470B40);
  }
  JUMPOUT(0x1E1470738);
}

void sub_1E1470F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53) {
    JUMPOUT(0x1E1470B50);
  }
  JUMPOUT(0x1E1470740);
}

void sub_1E1470F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54) {
    JUMPOUT(0x1E1470B60);
  }
  JUMPOUT(0x1E1470748);
}

void sub_1E1470F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a55) {
    JUMPOUT(0x1E1470B70);
  }
  JUMPOUT(0x1E1470750);
}

void sub_1E1470F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a56) {
    JUMPOUT(0x1E1470B80);
  }
  JUMPOUT(0x1E1470758);
}

void sub_1E1470F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a57) {
    JUMPOUT(0x1E1470B90);
  }
  JUMPOUT(0x1E1470760);
}

void sub_1E1470F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a58) {
    JUMPOUT(0x1E1470BA0);
  }
  JUMPOUT(0x1E1470768);
}

void sub_1E1470FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a59) {
    JUMPOUT(0x1E1470BB0);
  }
  JUMPOUT(0x1E1470770);
}

void sub_1E1470FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a60) {
    JUMPOUT(0x1E1470BC0);
  }
  JUMPOUT(0x1E1470778);
}

void sub_1E1470FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a61) {
    JUMPOUT(0x1E1470BD0);
  }
  JUMPOUT(0x1E1470780);
}

void sub_1E1470FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a62) {
    JUMPOUT(0x1E1470BE0);
  }
  JUMPOUT(0x1E1470788);
}

void sub_1E1470FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a63) {
    JUMPOUT(0x1E1470BF0);
  }
  JUMPOUT(0x1E1470790);
}

void sub_1E1470FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a64) {
    JUMPOUT(0x1E1470C00);
  }
  JUMPOUT(0x1E1470798);
}

void sub_1E1471000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a65) {
    JUMPOUT(0x1E1470C10);
  }
  JUMPOUT(0x1E14707A0);
}

void sub_1E1471010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a66) {
    JUMPOUT(0x1E1470C20);
  }
  JUMPOUT(0x1E14707A8);
}

void sub_1E1471020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67) {
    JUMPOUT(0x1E1470C30);
  }
  JUMPOUT(0x1E14707B0);
}

void sub_1E1471030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68) {
    JUMPOUT(0x1E1470C40);
  }
  JUMPOUT(0x1E14707B8);
}

void sub_1E1471040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69) {
    JUMPOUT(0x1E1470C50);
  }
  JUMPOUT(0x1E14707C0);
}

void sub_1E1471050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70) {
    JUMPOUT(0x1E1470C60);
  }
  JUMPOUT(0x1E14707C8);
}

void sub_1E1471060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71) {
    JUMPOUT(0x1E1470C70);
  }
  JUMPOUT(0x1E14707D0);
}

void sub_1E1471070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    JUMPOUT(0x1E1470C80);
  }
  JUMPOUT(0x1E14707D8);
}

void sub_1E1471080()
{
  if (STACK[0x200]) {
    JUMPOUT(0x1E1470C90);
  }
  JUMPOUT(0x1E14707E0);
}

void sub_1E1471090()
{
  if (STACK[0x208]) {
    JUMPOUT(0x1E1470CA0);
  }
  JUMPOUT(0x1E14707E8);
}

void sub_1E14710A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    JUMPOUT(0x1E1470CB0);
  }
  JUMPOUT(0x1E14707F0);
}

uint64_t WebProgressTrackerClient::progressStarted(WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  return WebThreadPostNotification();
}

void WebProgressTrackerClient::progressEstimateChanged(id *this, WebCore::LocalFrame *a2)
{
  uint64_t v3 = NSNumber;
  [this[1] estimatedProgress];
  *(float *)&double v4 = v4;
  __int16 v5 = (const void *)[v3 numberWithFloat:v4];
  uint64_t v6 = (const void *)objc_msgSend((id)objc_msgSend(this[1], "mainFrame"), "_bodyBackgroundColor");
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, @"WebProgressEstimatedProgressKey", v5);
  if (v6) {
    CFDictionaryAddValue(Mutable, @"WebProgressBackgroundColorKey", v6);
  }
  WebThreadPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void sub_1E14711BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1471908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[2];
    }
  }
  uint64_t v12 = *(_DWORD **)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12)
  {
    if (v12[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
      _Unwind_Resume(exception_object);
    }
    --v12[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1471B1C(_Unwind_Exception *a1)
{
}

void sub_1E1471CB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1471CCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SubstituteResource::data(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  if (this)
  {
    atomic_fetch_add((atomic_uint *volatile)this, 1u);
    if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      uint64_t v3 = *(unsigned int *)(this + 20);
      if (v3)
      {
        uint64_t v4 = 16 * v3;
        __int16 v5 = (unsigned int **)(*(void *)(this + 8) + 8);
        do
        {
          uint64_t v6 = *v5;
          const void *v5 = 0;
          if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
          {
            uint64_t v10 = v4;
            CGPDFDictionaryRef v11 = v5;
            atomic_store(1u, v6);
            uint64_t v12 = (WTF *)v6;
            uint64_t v7 = v6[6];
            if (v7 != -1) {
              ((void (*)(char *, unsigned int *))off_1F3C7D788[v7])(&v13, v6 + 2);
            }
            *((_DWORD *)v12 + 6) = -1;
            WTF::fastFree(v12, a2);
            uint64_t v4 = v10;
            __int16 v5 = v11;
          }
          v5 += 2;
          v4 -= 16;
        }
        while (v4);
      }
      char v8 = *(WTF **)(v2 + 8);
      if ((WTF *)(v2 + 24) != v8 && v8 != 0)
      {
        *(void *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + ++*(_DWORD *)(this - 16) = 0;
        WTF::fastFree(v8, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
      return v2;
    }
  }
  return this;
}

void sub_1E1471EE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1471EFC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E14724E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11)
{
  if (a11)
  {
    if (a11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[2];
    }
  }
  char v13 = *(_DWORD **)(v11 - 112);
  *(void *)(v11 - 112) = 0;
  if (v13)
  {
    if (v13[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      _Unwind_Resume(exception_object);
    }
    --v13[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E147280C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1472AF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  char v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, a2);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a13, v17);
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a13, a2);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v19);
    _Unwind_Resume(a1);
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a13, a2);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v20);
  _Unwind_Resume(a1);
}

void sub_1E1472D60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16)
{
  if (a16)
  {
    if (a14 != -1)
    {
      ((void (*)(WTF::StringImpl **, char *))off_1F3C7D7A8[a14])(&a9, &a11);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1E1472EAC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1473040(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1473108(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14731D0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1473544(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebKitInitializeStorageIfNecessary(void)
{
  if ((WebKitInitializeStorageIfNecessary(void)::initialized & 1) == 0)
  {
    id v0 = +[WebStorageManager _storageDirectoryPath];
    MEMORY[0x1E4E442D0](&v7, v0);
      operator new();
    uint64_t v2 = WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient;
    uint64_t v3 = WebKit::storageTracker;
    if (!WebKit::storageTracker)
    {
      uint64_t v3 = WTF::fastMalloc((WTF *)0x90);
      *(unsigned char *)uint64_t v3 = 0;
      WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(v3 + 8));
      WTF::String::isolatedCopy();
      *(unsigned char *)(v3 + 80) = 0;
      *(void *)(v3 + 88) = 0;
      *(unsigned char *)(v3 + 96) = 0;
      *(void *)(v3 + 104) = 0;
      *(void *)(v3 + 112) = 0;
      uint64_t v4 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + ++*(_DWORD *)(this - 16) = 0;
      *(_WORD *)(v4 + ++*(_DWORD *)(this + 24) = 0;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v3 + 120) = v4;
      *(_WORD *)(v3 + 128) = 0;
      *(void *)(v3 + 136) = 0x4072C00000000000;
      WebKit::storageTracker = v3;
    }
    *(void *)(v3 + 88) = v2;
    *(unsigned char *)(v3 + 129) = 1;
    __int16 v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v1);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = (void *)[MEMORY[0x1E4F1CB10] fileURLWithPath:v0];
    [v6 setResourceValue:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F1C630] error:0];
    WebKitInitializeStorageIfNecessary(void)::initialized = 1;
  }
}

void sub_1E1474058(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1474274(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E147428C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  CFRelease(v12);
  if (v11) {
    CFRelease(v11);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_1E1474558(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebStorageNamespaceProvider *WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(unsigned int **this, unsigned int **a2)
{
  uint64_t v4 = (void *)WebCore::StorageNamespaceProvider::StorageNamespaceProvider((WebCore::StorageNamespaceProvider *)this);
  v4[5] = 0;
  *uint64_t v4 = &unk_1F3C7D7F8;
  __int16 v5 = *a2;
  if (*a2 || (__int16 v5 = (unsigned int *)*MEMORY[0x1E4F30980]) != 0) {
    *v5 += 2;
  }
  this[7] = 0;
  this[8] = 0;
  this[6] = v5;
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  uint64_t v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = this;
  char v8 = this[5];
  this[5] = (unsigned int *)v7;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  uint64_t v9 = (atomic_uint *)this[5];
  atomic_fetch_add(v9, 1u);
  uint64_t v14 = (WTF *)v9;
  WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::add(&WebKit::storageNamespaceProviders(void)::storageNamespaceProviders, (unsigned int **)&v14, (uint64_t)&v13);
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (!v11 || atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) != 1) {
    return (WebKit::WebStorageNamespaceProvider *)this;
  }
  atomic_store(1u, (unsigned int *)v11);
  WTF::fastFree(v11, v10);
  return (WebKit::WebStorageNamespaceProvider *)this;
}

void WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(WebKit::WebStorageNamespaceProvider *this, StringImpl *a2)
{
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
    uint64_t v14 = *((void *)this + 7);
    if (!v14) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  uint64_t v3 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
  if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders)
  {
    int v4 = *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 8);
    unint64_t v5 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
    for (int i = 1; ; ++i)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(void *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v8);
      if (v11 != -1)
      {
        if (!v11) {
          goto LABEL_21;
        }
        if (*(WebKit::WebStorageNamespaceProvider **)(v11 + 8) == this) {
          break;
        }
      }
      unsigned int v8 = (v8 + i) & v4;
    }
    if (v8 != *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4))
    {
      *(void *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v8) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v11);
        uint64_t v21 = v3;
        WTF::fastFree((WTF *)v11, a2);
        uint64_t v3 = v21;
      }
      *(void *)(v3 + 8 * v10) = -1;
      ++*(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 16);
      if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders)
      {
        --*(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12);
        if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders)
        {
          unsigned int v12 = *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
          if (6 * *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12) < v12
            && v12 >= 9)
          {
            WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(&WebKit::storageNamespaceProviders(void)::storageNamespaceProviders, v12 >> 1, 0);
          }
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      }
    }
  }
LABEL_21:
  uint64_t v14 = *((void *)this + 7);
  if (v14)
  {
LABEL_22:
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    if (v15)
    {
      char v16 = (uint64_t *)(v14 + 8);
      do
      {
        if (*(v16 - 1) != -1)
        {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(v16, a2);
          unint64_t v17 = (unsigned int *)*(v16 - 1);
          *(v16 - objc_destroyWeak(this + 1) = 0;
          if (v17)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, a2);
            }
          }
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
LABEL_30:
  uint64_t v18 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, a2);
      uint64_t v19 = *((void *)this + 5);
      if (v19) {
        goto LABEL_34;
      }
LABEL_38:
      *((void *)this + 5) = 0;
      goto LABEL_39;
    }
    *(_DWORD *)v18 -= 2;
  }
  uint64_t v19 = *((void *)this + 5);
  if (!v19) {
    goto LABEL_38;
  }
LABEL_34:
  *(void *)(v19 + 8) = 0;
  uint64_t v20 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, a2);
  }
LABEL_39:
  MEMORY[0x1F4171350](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebStorageNamespaceProvider::clearLocalStorageForAllOrigins(WebKit::WebStorageNamespaceProvider *this)
{
  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      uint64_t v1 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if (v1)
      {
        uint64_t v2 = 8 * v1;
        for (int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v2 -= 8;
          if (!v2) {
            return result;
          }
        }
      }
      else
      {
        int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      uint64_t v4 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v1;
      if (i != (uint64_t *)v4)
      {
        uint64_t v5 = *i;
LABEL_12:
        unint64_t v6 = *(_DWORD **)(*(void *)(v5 + 8) + 16);
        if (v6)
        {
          ++v6[2];
          uint64_t result = WebKit::StorageNamespaceImpl::clearAllOriginsForDeletion((uint64_t)v6);
          if (v6[2] == 1) {
            uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
          }
          else {
            --v6[2];
          }
        }
        while (++i != (uint64_t *)v4)
        {
          uint64_t v5 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v4) {
              goto LABEL_12;
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return result;
}

const WebCore::SecurityOriginData *WebKit::WebStorageNamespaceProvider::clearLocalStorageForOrigin(const WebCore::SecurityOriginData *this, const WebCore::SecurityOriginData *a2)
{
  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      uint64_t v2 = this;
      uint64_t v3 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if (v3)
      {
        uint64_t v4 = 8 * v3;
        for (int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v4 -= 8;
          if (!v4) {
            return this;
          }
        }
      }
      else
      {
        int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      uint64_t v6 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v3;
      if (i != (uint64_t *)v6)
      {
        uint64_t v7 = *i;
LABEL_12:
        unsigned int v8 = *(_DWORD **)(*(void *)(v7 + 8) + 16);
        if (v8)
        {
          ++v8[2];
          this = (const WebCore::SecurityOriginData *)WebKit::StorageNamespaceImpl::clearOriginForDeletion((uint64_t)v8, v2);
          if (v8[2] == 1) {
            this = (const WebCore::SecurityOriginData *)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          }
          else {
            --v8[2];
          }
        }
        while (++i != (uint64_t *)v6)
        {
          uint64_t v7 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v6) {
              goto LABEL_12;
            }
            return this;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return this;
}

SessionID *WebKit::WebStorageNamespaceProvider::closeIdleLocalStorageDatabases(WebKit::WebStorageNamespaceProvider *this)
{
  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      uint64_t v1 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if (v1)
      {
        uint64_t v2 = 8 * v1;
        for (int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v2 -= 8;
          if (!v2) {
            return result;
          }
        }
      }
      else
      {
        int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      uint64_t v4 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v1;
      if (i != (uint64_t *)v4)
      {
        uint64_t v5 = *i;
LABEL_12:
        uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 16);
        if (v6)
        {
          ++*(_DWORD *)(v6 + 8);
          uint64_t result = WebKit::StorageNamespaceImpl::closeIdleLocalStorageDatabases((SessionID *)v6);
          if (*(_DWORD *)(v6 + 8) == 1) {
            uint64_t result = (SessionID *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
          else {
            --*(_DWORD *)(v6 + 8);
          }
        }
        while (++i != (uint64_t *)v4)
        {
          uint64_t v5 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v4) {
              goto LABEL_12;
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return result;
}

SessionID *WebKit::WebStorageNamespaceProvider::syncLocalStorage(WebKit::WebStorageNamespaceProvider *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      uint64_t v3 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if (v3)
      {
        uint64_t v4 = 8 * v3;
        for (int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v4 -= 8;
          if (!v4) {
            return result;
          }
        }
      }
      else
      {
        int i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      uint64_t v6 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v3;
      if (i != (uint64_t *)v6)
      {
        uint64_t v7 = *i;
LABEL_12:
        uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 16);
        if (v8)
        {
          ++*(_DWORD *)(v8 + 8);
          uint64_t result = WebKit::StorageNamespaceImpl::sync((SessionID *)v8, a2, a3);
          if (*(_DWORD *)(v8 + 8) == 1) {
            uint64_t result = (SessionID *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
          else {
            --*(_DWORD *)(v8 + 8);
          }
        }
        while (++i != (uint64_t *)v6)
        {
          uint64_t v7 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v6) {
              goto LABEL_12;
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return result;
}

unsigned int *WebKit::WebStorageNamespaceProvider::createLocalStorageNamespace@<X0>(const WTF::StringImpl **this@<X0>, SessionID a2@<0:X2>, const WTF::String *a3@<X1>, SessionID a4@<X3>, uint64_t *a5@<X8>)
{
  return WebKit::StorageNamespaceImpl::getOrCreateLocalStorageNamespace(this + 6, a3, a4, (const WTF::StringImpl *)a2.m_identifier, a5);
}

WTF::StringImpl *WebKit::WebStorageNamespaceProvider::createTransientLocalStorageNamespace@<X0>(SessionID a1@<0:X3>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
  uint64_t v11 = 0;
  WebKit::StorageNamespaceImpl::StorageNamespaceImpl(v8, 0, (uint64_t)&v11, a2, a1.m_identifier);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (!result) {
    goto LABEL_4;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_4:
    *a3 = v8;
    return result;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  *a3 = v8;
  return result;
}

uint64_t WebKit::WebStorageNamespaceProvider::sessionStorageNamespace@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v8 = a1;
  uint64_t v10 = (uint64_t *)(a1 + 56);
  uint64_t result = WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v82, (uint64_t *)(a1 + 56), a3[2]);
  uint64_t v13 = *(void *)(v8 + 56);
  if (v13) {
    v13 += 16 * *(unsigned int *)(v13 - 4);
  }
  if (v83 != v13) {
    goto LABEL_41;
  }
  if ((a4 & 1) == 0) {
    goto LABEL_66;
  }
  uint64_t v81 = 0;
  unsigned int v14 = *(_DWORD *)(v8 + 64);
  unsigned int v15 = *(_DWORD *)(v8 + 68);
  *(_DWORD *)(v8 + 64) = v14 + 1;
  if (v14 > v15) {
    WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v10, v12);
  }
  uint64_t v16 = v6[2];
  if (v16
    || (uint64_t v16 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)uint64_t v16 = 1,
        *(void *)(v16 + 8) = v6,
        unint64_t v17 = (unsigned int *)v6[2],
        v6[2] = v16,
        !v17))
  {
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    goto LABEL_12;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v12);
    uint64_t v16 = v6[2];
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    if (v16)
    {
LABEL_12:
      if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v16);
        WTF::fastFree((WTF *)v16, v12);
      }
    }
  }
  else
  {
    uint64_t v16 = v6[2];
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    if (v16) {
      goto LABEL_12;
    }
  }
  uint64_t v18 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v10, 8u), (uint64_t v18 = *v10) != 0))
  {
    uint64_t v19 = a2;
    unsigned int v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    uint64_t v19 = a2;
    unsigned int v20 = 0;
  }
  uint64_t v21 = 0;
  unint64_t v22 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
  unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  int v25 = (v24 >> 31) ^ v24;
  for (int i = 1; ; ++i)
  {
    uint64_t v27 = v25 & v20;
    uint64_t v28 = (uint64_t *)(v18 + 16 * v27);
    uint64_t v29 = *v28;
    if (*v28 == -1)
    {
      uint64_t v21 = (uint64_t *)(v18 + 16 * v27);
      goto LABEL_19;
    }
    if (!v29)
    {
      if (v21)
      {
        *uint64_t v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*v10 - 16);
        *uint64_t v21 = v16;
      }
      else
      {
        uint64_t *v28 = v16;
        uint64_t v21 = (uint64_t *)(v18 + 16 * v27);
      }
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(&v84, &v81);
      uint64_t v34 = v84;
      uint64_t v84 = 0;
      uint64_t v35 = (WTF::StringImpl *)v21[1];
      v21[1] = v34;
      uint64_t v82 = v35;
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v82, v36);
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v84, v37);
      if (*v10)
      {
        ++*(_DWORD *)(*v10 - 12);
        uint64_t v38 = *v10;
        if (*v10) {
          goto LABEL_31;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v38 = *v10;
        if (*v10)
        {
LABEL_31:
          uint64_t v39 = (*(_DWORD *)(v38 - 16) + *(_DWORD *)(v38 - 12));
          unint64_t v40 = *(unsigned int *)(v38 - 4);
          if (v40 <= 0x400) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }
      }
      uint64_t v39 = *(unsigned int *)(v38 - 16);
      unint64_t v40 = *(unsigned int *)(v38 - 4);
      if (v40 <= 0x400)
      {
LABEL_32:
        if (3 * v40 > 4 * v39) {
          goto LABEL_40;
        }
        if (!v40)
        {
          unsigned int v41 = 8;
LABEL_39:
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v10, v41);
          goto LABEL_40;
        }
LABEL_38:
        unsigned int v41 = v40 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v40));
        goto LABEL_39;
      }
LABEL_37:
      if (v40 > 2 * v39) {
        goto LABEL_40;
      }
      goto LABEL_38;
    }
    if (v29 == v16) {
      break;
    }
LABEL_19:
    int v25 = i + v27;
  }
  uint64_t v30 = v18 + 16 * v27;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)&v82, &v81);
  uint64_t v31 = *(WTF::StringImpl **)(v30 + 8);
  *(void *)(v30 + 8) = v82;
  uint64_t v82 = v31;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v82, v32);
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v16);
    WTF::fastFree((WTF *)v16, v33);
  }
LABEL_40:
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v81, v33);
  a2 = v19;
LABEL_41:
  uint64_t result = WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v82, v10, v6[2]);
  uint64_t v42 = *(void *)(v83 + 8);
  size_t v80 = (uint64_t *)(v83 + 8);
  uint64_t v78 = a2;
  uint64_t v43 = a2 + 8;
  if (!v42) {
    goto LABEL_60;
  }
  char v79 = a4;
  uint64_t v44 = v8;
  uint64_t v45 = v6;
  int v46 = *(_DWORD *)(v42 - 8);
  uint64_t result = WTF::computeHash<WebCore::SecurityOriginData>(a2 + 8);
  int v47 = 0;
  while (2)
  {
    int v48 = result & v46;
    uint64_t v49 = v42 + 40 * (result & v46);
    int v50 = *(_DWORD *)(v49 + 24);
    if (v50 != 1)
    {
      if (v50)
      {
LABEL_117:
        uint64_t v74 = std::__throw_bad_variant_access[abi:sn180100]();
        return WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(v74, v75, v76);
      }
      if (*(_OWORD *)v49 == 0)
      {
        if (!*(unsigned char *)(v49 + 18))
        {
          uint64_t v6 = v45;
          uint64_t v8 = v44;
          a4 = v79;
          goto LABEL_60;
        }
      }
      else if (*(void *)v49 == -1)
      {
        goto LABEL_45;
      }
    }
    uint64_t result = WebCore::operator==();
    if ((result & 1) == 0)
    {
LABEL_45:
      uint64_t result = (++v47 + v48);
      continue;
    }
    break;
  }
  if (*v80)
  {
    uint64_t v6 = v45;
    uint64_t v8 = v44;
    a4 = v79;
    if (*v80 + 40 * *(unsigned int *)(*v80 - 4) == v49) {
      goto LABEL_60;
    }
LABEL_57:
    uint64_t v51 = *(void *)(v49 + 32);
    if (v51) {
      ++*(_DWORD *)(v51 + 8);
    }
    *a5 = v51;
    return result;
  }
  uint64_t v6 = v45;
  uint64_t v8 = v44;
  a4 = v79;
  if (v49) {
    goto LABEL_57;
  }
LABEL_60:
  if ((a4 & 1) == 0)
  {
LABEL_66:
    *a5 = 0;
    return result;
  }
  int v52 = *(_DWORD *)(v8 + 32);
  uint64_t v53 = WebCore::Page::sessionID((WebCore::Page *)v6);
  uint64_t v54 = (_DWORD *)WTF::fastMalloc((WTF *)0x48);
  uint64_t v82 = 0;
  WebKit::StorageNamespaceImpl::StorageNamespaceImpl((uint64_t)v54, 0, (uint64_t)&v82, v52, v53);
  uint64_t v56 = v82;
  uint64_t v82 = 0;
  if (!v56) {
    goto LABEL_64;
  }
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::destroy(v56, v55);
    uint64_t v57 = *v80;
    int v77 = a5;
    if (!*v80) {
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  *(_DWORD *)v56 -= 2;
LABEL_64:
  uint64_t v57 = *v80;
  int v77 = a5;
  if (*v80)
  {
LABEL_70:
    int v58 = *(_DWORD *)(v57 - 8);
    goto LABEL_71;
  }
LABEL_69:
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v80, 8u, 0);
  uint64_t v57 = *v80;
  if (*v80) {
    goto LABEL_70;
  }
  int v58 = 0;
LABEL_71:
  unsigned int v59 = WTF::computeHash<WebCore::SecurityOriginData>(v43);
  uint64_t v60 = 0;
  int v61 = 1;
  while (2)
  {
    unsigned int v62 = v59 & v58;
    uint64_t v63 = v57 + 40 * (v59 & v58);
    int v64 = *(_DWORD *)(v63 + 24);
    if (v64 == 1) {
      goto LABEL_73;
    }
    if (v64) {
      goto LABEL_117;
    }
    if (*(_OWORD *)v63 != 0)
    {
      if (*(void *)v63 == -1)
      {
        uint64_t v60 = v57 + 40 * v62;
LABEL_74:
        unsigned int v59 = v61 + v62;
        ++v61;
        continue;
      }
LABEL_73:
      uint64_t result = WebCore::operator==();
      if (result)
      {
        int v65 = v77;
        uint64_t v66 = *(void *)(v63 + 32);
        if (!v66) {
          goto LABEL_82;
        }
        goto LABEL_81;
      }
      goto LABEL_74;
    }
    break;
  }
  if (*(unsigned char *)(v63 + 18)) {
    goto LABEL_73;
  }
  if (v60)
  {
    *(void *)(v60 + 32) = 0;
    *(_OWORD *)uint64_t v60 = 0u;
    *(_OWORD *)(v60 + ++*(_DWORD *)(this - 16) = 0u;
    --*(_DWORD *)(*v80 - 16);
    int v67 = *(_DWORD *)(v60 + 24);
    int v65 = v77;
    int v68 = *(_DWORD *)(v78 + 32);
    if (v67 == -1)
    {
      if (v68 != -1) {
        goto LABEL_95;
      }
    }
    else
    {
      if (v68 == -1)
      {
        uint64_t v63 = v60;
        goto LABEL_97;
      }
LABEL_95:
      uint64_t v82 = (WTF::StringImpl *)v60;
      ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1F3C7D868[v68])(&v82, v60, v43);
    }
  }
  else
  {
    int v65 = v77;
    int v68 = *(_DWORD *)(v78 + 32);
    if (v68 != -1)
    {
      uint64_t v60 = v57 + 40 * (v59 & v58);
      goto LABEL_95;
    }
    int v67 = 0;
    uint64_t v60 = v57 + 40 * (v59 & v58);
LABEL_97:
    ((void (*)(WTF::StringImpl **, uint64_t))off_1F3C7D828[v67])(&v82, v63);
    *(_DWORD *)(v63 + ++*(_DWORD *)(this + 24) = -1;
  }
  uint64_t result = *(void *)(v60 + 32);
  *(void *)(v60 + 32) = v54;
  if (!result)
  {
LABEL_101:
    uint64_t v69 = *v80;
    if (!*v80) {
      goto LABEL_108;
    }
LABEL_102:
    ++*(_DWORD *)(v69 - 12);
    uint64_t v70 = *v80;
    if (!*v80) {
      goto LABEL_109;
    }
LABEL_103:
    uint64_t v71 = (*(_DWORD *)(v70 - 16) + *(_DWORD *)(v70 - 12));
    unint64_t v72 = *(unsigned int *)(v70 - 4);
    if (v72 > 0x400) {
      goto LABEL_110;
    }
    goto LABEL_104;
  }
  if (*(_DWORD *)(result + 8) != 1)
  {
    --*(_DWORD *)(result + 8);
    goto LABEL_101;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  uint64_t v69 = *v80;
  if (*v80) {
    goto LABEL_102;
  }
LABEL_108:
  *(_DWORD *)(v69 - 12) = 1;
  uint64_t v70 = *v80;
  if (*v80) {
    goto LABEL_103;
  }
LABEL_109:
  uint64_t v71 = *(unsigned int *)(v70 - 16);
  unint64_t v72 = *(unsigned int *)(v70 - 4);
  if (v72 > 0x400)
  {
LABEL_110:
    if (v72 <= 2 * v71)
    {
LABEL_111:
      unsigned int v73 = v72 << (6 * *(_DWORD *)(v70 - 12) >= (2 * v72));
      goto LABEL_112;
    }
    goto LABEL_113;
  }
LABEL_104:
  if (3 * v72 <= 4 * v71)
  {
    if (v72) {
      goto LABEL_111;
    }
    unsigned int v73 = 8;
LABEL_112:
    uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v80, v73, v60);
    uint64_t v60 = result;
  }
LABEL_113:
  uint64_t v54 = 0;
  uint64_t v66 = *(void *)(v60 + 32);
  if (v66) {
LABEL_81:
  }
    ++*(_DWORD *)(v66 + 8);
LABEL_82:
  void *v65 = v66;
  if (v54)
  {
    if (v54[2] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v54 + 8))(v54);
    }
    else {
      --v54[2];
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(uint64_t result, uint64_t *a2, uint64_t a3)
{
  ++*((_DWORD *)a2 + 2);
  if (!a3 || !*(void *)(a3 + 8))
  {
    if (*a2)
    {
      uint64_t v15 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
      *(void *)uint64_t result = a2;
      *(void *)(result + 8) = v15;
      *(void *)(result + ++*(_DWORD *)(this - 16) = v15;
      *(void *)(result + ++*(_DWORD *)(this + 24) = v15;
      *(void *)(result + 32) = v15;
    }
    else
    {
      *(void *)uint64_t result = a2;
      *(void *)(result + 8) = 0;
      *(void *)(result + ++*(_DWORD *)(this - 16) = 0;
      *(void *)(result + ++*(_DWORD *)(this + 24) = 0;
      *(void *)(result + 32) = 0;
    }
    *(_DWORD *)(result + 40) = 0;
    return result;
  }
  uint64_t v3 = *a2;
  if (!*a2)
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v13 = 0;
    *(void *)uint64_t result = a2;
    *(void *)(result + 8) = 0;
    unint64_t v17 = (void *)(result + 8);
    *(void *)(result + ++*(_DWORD *)(this - 16) = 0;
    goto LABEL_17;
  }
  int v4 = *(_DWORD *)(v3 - 8);
  unint64_t v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
  for (int i = 1; ; ++i)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)(v3 + 16 * v8);
    if (v11 == -1) {
      goto LABEL_5;
    }
    if (!v11) {
      break;
    }
    if (v11 == a3)
    {
      uint64_t v12 = v3 + 16 * v10;
      uint64_t v13 = *(unsigned int *)(v3 - 4);
      uint64_t v14 = v3 + 16 * v13;
      goto LABEL_16;
    }
LABEL_5:
    unsigned int v8 = (v10 + i) & v4;
  }
  uint64_t v13 = *(unsigned int *)(v3 - 4);
  uint64_t v12 = v3 + 16 * v13;
  uint64_t v14 = v12;
LABEL_16:
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = v12;
  unint64_t v17 = (void *)(result + 8);
  *(void *)(result + ++*(_DWORD *)(this - 16) = v14;
  uint64_t v16 = v3 + 16 * v13;
LABEL_17:
  *(void *)(result + ++*(_DWORD *)(this + 24) = v16;
  *(void *)(result + 32) = v3 + 16 * v13;
  *(_DWORD *)(result + 40) = 0;
LABEL_18:
  while (v12 != v16 && !*(void *)(*(void *)v12 + 8))
  {
    uint64_t v18 = v12 + 16;
    void *v17 = v12 + 16;
    uint64_t v12 = v14;
    if (v18 != v14)
    {
      uint64_t v12 = v18;
      while ((unint64_t)(*(void *)v12 + 1) <= 1)
      {
        v12 += 16;
        void *v17 = v12;
        if (v12 == v14)
        {
          uint64_t v12 = v14;
          goto LABEL_18;
        }
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebStorageNamespaceProvider::cloneSessionStorageNamespaceForPage(WebKit::WebStorageNamespaceProvider *this, WebCore::Page *a2, WebCore::Page *a3)
{
  uint64_t v5 = *((void *)a2 + 116);
  uint64_t result = (uint64_t *)WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)v75, (uint64_t *)(v5 + 56), *((void *)a2 + 2));
  uint64_t v8 = *(void *)(v5 + 56);
  if (v8)
  {
    uint64_t v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
    uint64_t v10 = v76;
    if (v76 == v9) {
      return result;
    }
  }
  else
  {
    uint64_t v10 = v76;
    if (!v76) {
      return result;
    }
  }
  uint64_t v74 = 0;
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11)
  {
    uint64_t v14 = 0;
    LODWORD(v12) = 0;
LABEL_24:
    uint64_t v13 = v11 + 40 * v12;
    goto LABEL_25;
  }
  uint64_t v12 = *(unsigned int *)(v11 - 4);
  uint64_t v13 = v11 + 40 * v12;
  if (!*(_DWORD *)(v11 - 12))
  {
    uint64_t v14 = v11 + 40 * v12;
    goto LABEL_24;
  }
  uint64_t v14 = v11;
  if (!v12) {
    goto LABEL_25;
  }
  uint64_t v15 = 40 * v12;
  uint64_t v14 = v11;
  while (1)
  {
    int v16 = *(_DWORD *)(v14 + 24);
    if (v16) {
      break;
    }
    BOOL v18 = *(_OWORD *)v14 == 0 && *(unsigned char *)(v14 + 18) == 0;
    if (*(void *)v14 != -1 && !v18) {
      goto LABEL_25;
    }
    v14 += 40;
    v15 -= 40;
    if (!v15)
    {
      uint64_t v14 = v13;
      goto LABEL_25;
    }
  }
  if (v16 != 1)
  {
LABEL_130:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_131:
    atomic_store(add, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, v7);
    goto LABEL_100;
  }
LABEL_25:
  if (v11)
  {
    uint64_t v20 = v11 + 40 * *(unsigned int *)(v11 - 4);
    if (v20 == v14) {
      goto LABEL_92;
    }
LABEL_32:
    (*(void (**)(_DWORD **__return_ptr))(**(void **)(v14 + 32) + 32))(&v77);
    uint64_t v21 = v74;
    if (v74
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(&v74, 8u, 0), (uint64_t v21 = v74) != 0))
    {
      int v22 = *(_DWORD *)(v21 - 8);
    }
    else
    {
      int v22 = 0;
    }
    unsigned int v23 = WTF::computeHash<WebCore::SecurityOriginData>(v14);
    uint64_t v3 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v25 = v23 & v22;
      uint64_t v26 = v21 + 40 * (v23 & v22);
      int v27 = *(_DWORD *)(v26 + 24);
      if (v27 != 1)
      {
        if (v27) {
          goto LABEL_130;
        }
        if (*(_OWORD *)v26 == 0)
        {
          if (!*(unsigned char *)(v26 + 18))
          {
            if (v3)
            {
              *(void *)(v3 + 32) = 0;
              *(_OWORD *)uint64_t v3 = 0u;
              *(_OWORD *)(v3 + ++*(_DWORD *)(this - 16) = 0u;
              --*(_DWORD *)(v74 - 16);
              uint64_t v31 = *(unsigned int *)(v3 + 24);
              uint64_t v32 = *(unsigned int *)(v14 + 24);
              if (v31 == -1)
              {
                if (v32 == 0xFFFFFFFFLL)
                {
LABEL_59:
                  uint64_t v33 = (uint64_t)v77;
                  int v77 = 0;
                  uint64_t v34 = *(_DWORD **)(v3 + 32);
                  *(void *)(v3 + 32) = v33;
                  if (!v34) {
                    goto LABEL_62;
                  }
                  if (v34[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
                    uint64_t v35 = v74;
                    if (v74) {
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    --v34[2];
LABEL_62:
                    uint64_t v35 = v74;
                    if (v74)
                    {
LABEL_63:
                      int v36 = *(_DWORD *)(v35 - 16);
                      int v37 = *(_DWORD *)(v35 - 12) + 1;
                      *(_DWORD *)(v35 - 12) = v37;
                      uint64_t v38 = (v36 + v37);
                      unint64_t v39 = *(unsigned int *)(v35 - 4);
                      if (v39 <= 0x400) {
                        goto LABEL_64;
                      }
LABEL_69:
                      if (v39 > 2 * v38) {
                        goto LABEL_72;
                      }
                      goto LABEL_70;
                    }
                  }
                  int v37 = 1;
                  *(_DWORD *)(v35 - 12) = 1;
                  uint64_t v38 = (*(_DWORD *)(v35 - 16) + 1);
                  unint64_t v39 = *(unsigned int *)(v35 - 4);
                  if (v39 > 0x400) {
                    goto LABEL_69;
                  }
LABEL_64:
                  if (3 * v39 > 4 * v38) {
                    goto LABEL_72;
                  }
                  if (v39) {
LABEL_70:
                  }
                    unsigned int v40 = v39 << (6 * v37 >= (2 * v39));
                  else {
                    unsigned int v40 = 8;
                  }
                  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(&v74, v40, v3);
                  goto LABEL_72;
                }
LABEL_58:
                uint64_t v78 = v3;
                ((void (*)(uint64_t *, uint64_t, uint64_t))off_1F3C7D868[v32])(&v78, v3, v14);
                goto LABEL_59;
              }
              if (v32 != 0xFFFFFFFFLL) {
                goto LABEL_58;
              }
            }
            else
            {
              uint64_t v32 = *(unsigned int *)(v14 + 24);
              if (v32 != -1)
              {
                uint64_t v3 = v21 + 40 * v25;
                goto LABEL_58;
              }
              uint64_t v31 = 0;
              uint64_t v3 = v21 + 40 * v25;
            }
            ((void (*)(uint64_t *, uint64_t))off_1F3C7D828[v31])(&v78, v3);
            *(_DWORD *)(v3 + ++*(_DWORD *)(this + 24) = -1;
            goto LABEL_59;
          }
        }
        else if (*(void *)v26 == -1)
        {
          uint64_t v3 = v21 + 40 * v25;
          goto LABEL_38;
        }
      }
      if (WebCore::operator==())
      {
        uint64_t v28 = v21 + 40 * v25;
        uint64_t v29 = (uint64_t)v77;
        int v77 = 0;
        uint64_t v30 = *(_DWORD **)(v28 + 32);
        *(void *)(v28 + 32) = v29;
        if (v30)
        {
          if (v30[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
          }
          else {
            --v30[2];
          }
        }
LABEL_72:
        unsigned int v41 = v77;
        int v77 = 0;
        if (!v41)
        {
LABEL_75:
          uint64_t v42 = v14 + 40;
          uint64_t v14 = v13;
          if (v42 == v13) {
            goto LABEL_31;
          }
LABEL_76:
          uint64_t v14 = v42;
          while (1)
          {
            int v43 = *(_DWORD *)(v14 + 24);
            if (v43) {
              break;
            }
            BOOL v45 = *(_OWORD *)v14 == 0 && *(unsigned char *)(v14 + 18) == 0;
            if (*(void *)v14 != -1 && !v45) {
              goto LABEL_31;
            }
            v14 += 40;
            if (v14 == v13)
            {
              uint64_t v14 = v13;
              goto LABEL_31;
            }
          }
          if (v43 != 1) {
            goto LABEL_130;
          }
          goto LABEL_31;
        }
        if (v41[2] != 1)
        {
          --v41[2];
          goto LABEL_75;
        }
        (*(void (**)(_DWORD *))(*(void *)v41 + 8))(v41);
        uint64_t v42 = v14 + 40;
        uint64_t v14 = v13;
        if (v42 != v13) {
          goto LABEL_76;
        }
LABEL_31:
        if (v14 == v20) {
          goto LABEL_92;
        }
        goto LABEL_32;
      }
LABEL_38:
      unsigned int v23 = i + v25;
    }
  }
  uint64_t v20 = 0;
  if (v14) {
    goto LABEL_32;
  }
LABEL_92:
  uint64_t v47 = *((void *)a3 + 116);
  uint64_t v14 = v47 + 56;
  unsigned int v48 = *(_DWORD *)(v47 + 64);
  unsigned int v49 = *(_DWORD *)(v47 + 68);
  *(_DWORD *)(v47 + 64) = v48 + 1;
  if (v48 > v49) {
    WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v47 + 56, v7);
  }
  uint64_t v3 = *((void *)a3 + 2);
  if (v3
    || (uint64_t v3 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)uint64_t v3 = 1,
        *(void *)(v3 + 8) = a3,
        int v50 = (atomic_uint *)*((void *)a3 + 2),
        *((void *)a3 + 2) = v3,
        !v50))
  {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
    goto LABEL_99;
  }
  if (atomic_fetch_add(v50, 0xFFFFFFFF) != 1)
  {
    uint64_t v3 = *((void *)a3 + 2);
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
    if (!v3) {
      goto LABEL_100;
    }
LABEL_99:
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF);
    if (add != 1) {
      goto LABEL_100;
    }
    goto LABEL_131;
  }
  atomic_store(1u, (unsigned int *)v50);
  WTF::fastFree((WTF *)v50, v7);
  uint64_t v3 = *((void *)a3 + 2);
  atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  if (v3) {
    goto LABEL_99;
  }
LABEL_100:
  uint64_t v52 = *(void *)v14;
  if (*(void *)v14
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v14, 8u), (uint64_t v52 = *(void *)v14) != 0))
  {
    unsigned int v53 = *(_DWORD *)(v52 - 8);
  }
  else
  {
    unsigned int v53 = 0;
  }
  uint64_t v54 = 0;
  unint64_t v55 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  unint64_t v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
  unint64_t v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
  int v58 = (v57 >> 31) ^ v57;
  for (int j = 1; ; ++j)
  {
    uint64_t v60 = v58 & v53;
    int v61 = (uint64_t *)(v52 + 16 * v60);
    uint64_t v62 = *v61;
    if (*v61 == -1)
    {
      uint64_t v54 = (uint64_t *)(v52 + 16 * v60);
      goto LABEL_105;
    }
    if (!v62)
    {
      if (v54)
      {
        uint64_t *v54 = 0;
        v54[1] = 0;
        --*(_DWORD *)(*(void *)v14 - 16);
        uint64_t *v54 = v3;
      }
      else
      {
        *int v61 = v3;
        uint64_t v54 = (uint64_t *)(v52 + 16 * v60);
      }
      uint64_t v67 = v74;
      uint64_t v74 = 0;
      uint64_t v68 = v54[1];
      v54[1] = v67;
      int v77 = 0;
      uint64_t v78 = v68;
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v78, v7);
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v77, v69);
      if (*(void *)v14)
      {
        ++*(_DWORD *)(*(void *)v14 - 12);
        uint64_t v70 = *(void *)v14;
        if (*(void *)v14) {
          goto LABEL_117;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v70 = *(void *)v14;
        if (*(void *)v14)
        {
LABEL_117:
          uint64_t v71 = (*(_DWORD *)(v70 - 16) + *(_DWORD *)(v70 - 12));
          unint64_t v72 = *(unsigned int *)(v70 - 4);
          if (v72 <= 0x400) {
            goto LABEL_118;
          }
          goto LABEL_123;
        }
      }
      uint64_t v71 = *(unsigned int *)(v70 - 16);
      unint64_t v72 = *(unsigned int *)(v70 - 4);
      if (v72 <= 0x400)
      {
LABEL_118:
        if (3 * v72 > 4 * v71) {
          return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v74, v66);
        }
        if (!v72)
        {
          unsigned int v73 = 8;
LABEL_125:
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v14, v73);
          return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v74, v66);
        }
LABEL_124:
        unsigned int v73 = v72 << (6 * *(_DWORD *)(v70 - 12) >= (2 * v72));
        goto LABEL_125;
      }
LABEL_123:
      if (v72 > 2 * v71) {
        return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v74, v66);
      }
      goto LABEL_124;
    }
    if (v62 == v3) {
      break;
    }
LABEL_105:
    int v58 = j + v60;
  }
  uint64_t v63 = v52 + 16 * v60;
  uint64_t v64 = v74;
  uint64_t v74 = 0;
  uint64_t v65 = *(void *)(v63 + 8);
  *(void *)(v63 + 8) = v64;
  uint64_t v78 = v65;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v78, v7);
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, v66);
    }
  }
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v74, v66);
}

uint64_t *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        uint64_t v6 = *(unsigned int *)(v5 + 24);
        if (v6)
        {
          if (v6 != 1)
          {
            uint64_t v8 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::add(v8, v9, v10);
          }
        }
        else if (*(void *)v5 == -1)
        {
          goto LABEL_7;
        }
        unint64_t v7 = *(_DWORD **)(v5 + 32);
        *(void *)(v5 + 32) = 0;
        if (v7)
        {
          if (v7[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
            uint64_t v6 = *(unsigned int *)(v5 + 24);
            if (v6 == -1) {
              goto LABEL_6;
            }
          }
          else
          {
            --v7[2];
          }
        }
        ((void (*)(char *, uint64_t))off_1F3C7D828[v6])(&v12, v5);
LABEL_6:
        *(_DWORD *)(v5 + ++*(_DWORD *)(this + 24) = -1;
LABEL_7:
        v5 += 40;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::add@<X0>(uint64_t *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(result, 8u, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a2;
  uint64_t v11 = *((void *)*a2 + 1);
  unint64_t v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = (v14 >> 31) ^ v14;
  for (int i = 1; ; ++i)
  {
    unsigned int v17 = v15 & v8;
    BOOL v18 = (unsigned int **)(v6 + 8 * v17);
    uint64_t v19 = *v18;
    if (*v18 == (unsigned int *)-1)
    {
      uint64_t v9 = (unsigned int **)(v6 + 8 * v17);
      goto LABEL_6;
    }
    if (!v19)
    {
      if (v9)
      {
        *uint64_t v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v10 = *a2;
        BOOL v18 = v9;
      }
      *a2 = 0;
      uint64_t result = (uint64_t *)*v18;
      WTF::StringImpl *v18 = v10;
      if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        uint64_t v21 = *v4;
        if (*v4)
        {
LABEL_17:
          ++*(_DWORD *)(v21 - 12);
          uint64_t v22 = *v4;
          if (*v4) {
            goto LABEL_18;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v21 = *v4;
        if (*v4) {
          goto LABEL_17;
        }
      }
      *(_DWORD *)(v21 - 12) = 1;
      uint64_t v22 = *v4;
      if (*v4)
      {
LABEL_18:
        uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
        unint64_t v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400) {
          goto LABEL_19;
        }
        goto LABEL_29;
      }
LABEL_28:
      uint64_t v23 = *(unsigned int *)(v22 - 16);
      unint64_t v24 = *(unsigned int *)(v22 - 4);
      if (v24 <= 0x400)
      {
LABEL_19:
        if (3 * v24 > 4 * v23)
        {
LABEL_32:
          *(void *)a3 = v18;
          *(void *)(a3 + 8) = v22 + 8 * v24;
          *(unsigned char *)(a3 + ++*(_DWORD *)(this - 16) = 1;
          return result;
        }
        if (!v24)
        {
          uint64_t result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(v4, 8u, v18);
          BOOL v18 = (unsigned int **)result;
          uint64_t v22 = *v4;
          if (!*v4)
          {
LABEL_22:
            unint64_t v24 = 0;
            goto LABEL_32;
          }
LABEL_31:
          unint64_t v24 = *(unsigned int *)(v22 - 4);
          goto LABEL_32;
        }
LABEL_30:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(v4, v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), v18);
        BOOL v18 = (unsigned int **)result;
        uint64_t v22 = *v4;
        if (!*v4) {
          goto LABEL_22;
        }
        goto LABEL_31;
      }
LABEL_29:
      if (v24 > 2 * v23) {
        goto LABEL_32;
      }
      goto LABEL_30;
    }
    if (*((void *)v19 + 1) == v11) {
      break;
    }
LABEL_6:
    unsigned int v15 = i + v17;
  }
  if (v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(unsigned int *)(v6 - 4);
  }
  *(void *)a3 = v18;
  *(void *)(a3 + 8) = v6 + 8 * v20;
  *(unsigned char *)(a3 + ++*(_DWORD *)(this - 16) = 0;
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (unsigned int **)(v6 + 8 * v11);
      unint64_t v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ~(*((void *)v14 + 1) << 32) + *((void *)v14 + 1);
          unint64_t v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          unint64_t v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          unsigned int v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~(v19 << 27)));
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          unint64_t v24 = (unsigned int **)(v15 + 8 * v22);
          _OWORD *v24 = 0;
          unsigned int v25 = *v13;
          _DWORD *v13 = 0;
          _OWORD *v24 = v25;
          uint64_t v26 = *v13;
          _DWORD *v13 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
        else
        {
          _DWORD *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4) {
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v6;
      int v8 = (uint64_t *)(v3 + 16 * v6);
      uint64_t v9 = *v8;
      if ((unint64_t)(*v8 + 1) >= 2 && !*(void *)(v9 + 8))
      {
        *int v8 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, a2);
        }
        *int v8 = -1;
        WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v3 + 16 * v6 + 8), a2);
        ++v5;
      }
      --v6;
    }
    while (v7);
    uint64_t v3 = *(void *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1) {
        int v11 = *(_DWORD *)(v10 - 12);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v10 - 12) = v11 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v12 = *(_DWORD *)(v3 - 4);
      uint64_t v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        unsigned int v17 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        unsigned int v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
        unint64_t v19 = (v18 | HIWORD(v18)) + 1;
        if (v19 > 0x400)
        {
          if (v19 > 2 * v13) {
            goto LABEL_34;
          }
        }
        else if (3 * v19 > 4 * v13)
        {
LABEL_32:
          if ((double)v19 * 0.604166667 > (double)v13)
          {
LABEL_36:
            if (v19 <= 8) {
              unsigned int v20 = 8;
            }
            else {
              unsigned int v20 = v19;
            }
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v20);
            uint64_t v3 = *(void *)a1;
            *(_DWORD *)(a1 + 8) = 0;
            if (!v3)
            {
              unsigned int v15 = 0;
              goto LABEL_25;
            }
LABEL_22:
            unsigned int v15 = *(_DWORD *)(v3 - 12);
            int v16 = 0x7FFFFFFF;
            if (v15 >= 0x7FFFFFFF) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
LABEL_35:
          LODWORD(v19) = 2 * v19;
          goto LABEL_36;
        }
        LODWORD(v19) = 2 * v19;
        if (v19 <= 0x400) {
          goto LABEL_32;
        }
LABEL_34:
        if ((double)v19 * 0.416666667 > (double)v13) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  unsigned int v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  int v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    size_t v7 = 16 * a2;
    uint64_t v9 = WTF::fastMalloc((WTF *)(v7 + 16));
    uint64_t v10 = (void *)(v9 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v5 = 0;
  int v6 = 0;
  size_t v7 = 16 * a2;
  uint64_t v9 = WTF::fastMalloc((WTF *)(v7 + 16));
  uint64_t v10 = (void *)(v9 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v10, v7);
LABEL_4:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (atomic_uint **)(v4 + 16 * v11);
      unint64_t v14 = *v13;
      if (*v13 != (atomic_uint *)-1)
      {
        if (v14)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = ((unint64_t)v14 + ~((void)v14 << 32)) ^ (((unint64_t)v14 + ~((void)v14 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = v16 + 16 * v23;
          uint64_t v26 = (uint64_t *)(v25 + 8);
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v25 + 8), v8);
          uint64_t v28 = *(unsigned int **)v25;
          *(void *)uint64_t v25 = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v27);
          }
          uint64_t v29 = *v13;
          _DWORD *v13 = 0;
          *(void *)uint64_t v25 = v29;
          uint64_t v30 = (uint64_t *)(v4 + 16 * v11);
          *uint64_t v26 = 0;
          uint64_t v31 = v30[1];
          *++uint64_t v30 = 0;
          *uint64_t v26 = v31;
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(v30, v27);
          unsigned int v15 = *v13;
          _DWORD *v13 = 0;
          if (!v15 || atomic_fetch_add(v15, 0xFFFFFFFF) != 1) {
            goto LABEL_6;
          }
        }
        else
        {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v4 + 16 * v11 + 8), v8);
          unsigned int v15 = *v13;
          _DWORD *v13 = 0;
          if (!v15 || atomic_fetch_add(v15, 0xFFFFFFFF) != 1) {
            goto LABEL_6;
          }
        }
        atomic_store(1u, (unsigned int *)v15);
        WTF::fastFree((WTF *)v15, v8);
      }
LABEL_6:
      if (++v11 == v12) {
        goto LABEL_26;
      }
    }
  }
  if (v4)
  {
LABEL_26:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

uint64_t *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(40 * v8 + 16));
  bzero((void *)(v9 + 16), 40 * v8);
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  uint64_t v10 = *a2;
  if (!*a2)
  {
    uint64_t v13 = 0;
    LODWORD(v1objc_destroyWeak(this + 1) = 0;
LABEL_34:
    uint64_t v12 = v10 + 40 * v11;
    goto LABEL_35;
  }
  uint64_t v11 = *(unsigned int *)(v10 - 4);
  uint64_t v12 = v10 + 40 * v11;
  if (!*(_DWORD *)(v10 - 12))
  {
    uint64_t v13 = v10 + 40 * v11;
    goto LABEL_34;
  }
  uint64_t v13 = *a2;
  if (!v11) {
    goto LABEL_35;
  }
  uint64_t v14 = 40 * v11;
  uint64_t v13 = v10;
  while (1)
  {
    int v15 = *(_DWORD *)(v13 + 24);
    if (v15) {
      break;
    }
    BOOL v17 = *(_OWORD *)v13 == 0 && *(unsigned char *)(v13 + 18) == 0;
    if (*(void *)v13 != -1 && !v17) {
      goto LABEL_35;
    }
    v13 += 40;
    v14 -= 40;
    if (!v14)
    {
      uint64_t v13 = v12;
      goto LABEL_35;
    }
  }
  if (v15 != 1) {
LABEL_88:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_35:
  if (v10)
  {
    uint64_t v19 = v10 + 40 * *(unsigned int *)(v10 - 4);
    if (v19 != v13) {
      goto LABEL_42;
    }
    return a1;
  }
  uint64_t v19 = 0;
  if (!v13) {
    return a1;
  }
LABEL_42:
  while (2)
  {
    uint64_t v20 = *a1;
    if (*a1) {
      unsigned int v21 = *(_DWORD *)(v20 - 8);
    }
    else {
      unsigned int v21 = 0;
    }
    int v22 = WTF::computeHash<WebCore::SecurityOriginData>(v13);
    for (i = 0; ; int v22 = i + v24)
    {
      unsigned int v24 = v22 & v21;
      uint64_t v25 = v20 + 40 * (v22 & v21);
      int v26 = *(_DWORD *)(v25 + 24);
      if (v26 != 1)
      {
        if (v26) {
          goto LABEL_88;
        }
        if (*(_OWORD *)v25 == 0 && !*(unsigned char *)(v25 + 18)) {
          break;
        }
      }
      ++i;
    }
    v42[0] = 0;
    unsigned int v43 = -1;
    uint64_t v27 = *(unsigned int *)(v13 + 24);
    if (v27 != -1)
    {
      ((void (*)(uint64_t *, unsigned char *, uint64_t))off_1F3C7D848[v27])(&v41, v42, v13);
      unsigned int v43 = v27;
    }
    uint64_t v28 = *(_DWORD **)(v13 + 32);
    if (v28) {
      ++v28[2];
    }
    uint64_t v44 = v28;
    uint64_t v29 = *(unsigned int *)(v25 + 24);
    if (v29 == -1)
    {
      if (v27 == -1) {
        goto LABEL_60;
      }
LABEL_59:
      uint64_t v41 = v20 + 40 * v24;
      ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C7D838[v27])(&v41, v41, v42);
      goto LABEL_60;
    }
    if (v27 != -1) {
      goto LABEL_59;
    }
    ((void (*)(uint64_t *, uint64_t))off_1F3C7D828[v29])(&v41, v20 + 40 * v24);
    *(_DWORD *)(v25 + ++*(_DWORD *)(this + 24) = -1;
LABEL_60:
    uint64_t v30 = v20 + 40 * v24;
    uint64_t v31 = v44;
    uint64_t v44 = 0;
    uint64_t v32 = *(_DWORD **)(v30 + 32);
    *(void *)(v30 + 32) = v31;
    if (v32)
    {
      if (v32[2] != 1)
      {
        --v32[2];
        uint64_t v44 = 0;
        uint64_t v33 = v43;
        if (v43 == -1) {
          goto LABEL_69;
        }
        goto LABEL_68;
      }
      (*(void (**)(_DWORD *))(*(void *)v32 + 8))(v32);
      uint64_t v34 = v44;
      uint64_t v44 = 0;
      if (v34)
      {
        if (v34[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
          uint64_t v33 = v43;
          if (v43 == -1) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        --v34[2];
      }
    }
    uint64_t v33 = v43;
    if (v43 != -1) {
LABEL_68:
    }
      ((void (*)(uint64_t *, unsigned char *))off_1F3C7D828[v33])(&v41, v42);
LABEL_69:
    uint64_t v35 = v13 + 40;
    uint64_t v13 = v12;
    if (v35 == v12) {
      goto LABEL_41;
    }
    uint64_t v13 = v35;
    do
    {
      int v36 = *(_DWORD *)(v13 + 24);
      if (v36)
      {
        if (v36 == 1) {
          goto LABEL_41;
        }
        goto LABEL_88;
      }
      BOOL v38 = *(_OWORD *)v13 == 0 && *(unsigned char *)(v13 + 18) == 0;
      if (*(void *)v13 != -1 && !v38) {
        goto LABEL_41;
      }
      v13 += 40;
    }
    while (v13 != v12);
    uint64_t v13 = v12;
LABEL_41:
    if (v13 != v19) {
      continue;
    }
    return a1;
  }
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 40 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v6;
    while (1)
    {
      uint64_t v15 = v5 + 40 * v12;
      int v16 = *(_DWORD *)(v15 + 24);
      if (v16)
      {
        if (v16 != 1)
        {
LABEL_51:
          std::__throw_bad_variant_access[abi:sn180100]();
          JUMPOUT(0x1E14770E0);
        }
LABEL_17:
        uint64_t v17 = *a1;
        if (*a1) {
          unsigned int v18 = *(_DWORD *)(v17 - 8);
        }
        else {
          unsigned int v18 = 0;
        }
        int v19 = WTF::computeHash<WebCore::SecurityOriginData>(v5 + 40 * v12);
        for (i = 0; ; int v19 = i + v21)
        {
          unsigned int v21 = v19 & v18;
          uint64_t v22 = v17 + 40 * (v19 & v18);
          int v23 = *(_DWORD *)(v22 + 24);
          if (v23 != 1)
          {
            if (v23) {
              goto LABEL_51;
            }
            if (*(_OWORD *)v22 == 0 && !*(unsigned char *)(v22 + 18)) {
              break;
            }
          }
          ++i;
        }
        uint64_t v24 = v17 + 40 * v21;
        uint64_t v27 = *(_DWORD **)(v24 + 32);
        int v26 = (void *)(v24 + 32);
        uint64_t v25 = v27;
        *int v26 = 0;
        if (!v27)
        {
          uint64_t v30 = 0;
          goto LABEL_30;
        }
        int v28 = v25[2];
        int v29 = v28 - 1;
        if (v28 != 1)
        {
          uint64_t v30 = 0;
          v25[2] = v29;
          goto LABEL_30;
        }
        (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
        uint64_t v30 = *(unsigned int *)(v22 + 24);
        if (v30 != -1) {
LABEL_30:
        }
          ((void (*)(char *, uint64_t))off_1F3C7D828[v30])(&v45, v22);
        *(unsigned char *)uint64_t v22 = 0;
        *(_DWORD *)(v22 + ++*(_DWORD *)(this + 24) = -1;
        uint64_t v31 = *(unsigned int *)(v15 + 24);
        if (v31 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1F3C7D858[v31])(&v46, v22, v5 + 40 * v12);
          *(_DWORD *)(v22 + ++*(_DWORD *)(this + 24) = v31;
        }
        uint64_t v32 = v5 + 40 * v12;
        uint64_t v33 = *(void *)(v32 + 32);
        *(void *)(v32 + 32) = 0;
        *int v26 = v33;
        uint64_t v34 = *(_DWORD **)(v32 + 32);
        *(void *)(v32 + 32) = 0;
        if (v34)
        {
          if (v34[2] != 1)
          {
            --v34[2];
            goto LABEL_36;
          }
          (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
          uint64_t v35 = *(unsigned int *)(v15 + 24);
          if (v35 != -1) {
LABEL_39:
          }
            ((void (*)(char *, uint64_t))off_1F3C7D828[v35])(&v44, v5 + 40 * v12);
        }
        else
        {
LABEL_36:
          uint64_t v35 = *(unsigned int *)(v15 + 24);
          if (v35 != -1) {
            goto LABEL_39;
          }
        }
        *(_DWORD *)(v15 + ++*(_DWORD *)(this + 24) = -1;
        if (v15 == a3) {
          uint64_t v13 = v22;
        }
        goto LABEL_10;
      }
      if (*(void *)v15 != -1) {
        break;
      }
LABEL_10:
      if (++v12 == v14) {
        goto LABEL_49;
      }
    }
    if (*(_OWORD *)v15 != 0 || *(unsigned char *)(v15 + 18)) {
      goto LABEL_17;
    }
    uint64_t v36 = v5 + 40 * v12;
    int v37 = *(_DWORD **)(v36 + 32);
    *(void *)(v36 + 32) = 0;
    if (v37)
    {
      int v38 = v37[2];
      int v39 = v38 - 1;
      if (v38 == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
        uint64_t v40 = *(unsigned int *)(v15 + 24);
        if (v40 == -1)
        {
LABEL_45:
          *(_DWORD *)(v15 + ++*(_DWORD *)(this + 24) = -1;
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v40 = 0;
        v37[2] = v39;
      }
    }
    else
    {
      uint64_t v40 = 0;
    }
    ((void (*)(char *, uint64_t))off_1F3C7D828[v40])(&v43, v5 + 40 * v12);
    goto LABEL_45;
  }
  uint64_t v13 = 0;
  uint64_t result = 0;
  if (v5)
  {
LABEL_49:
    WTF::fastFree((WTF *)(v5 - 16), v9);
    return v13;
  }
  return result;
}

void WebStorageTrackerClient::~WebStorageTrackerClient(WebStorageTrackerClient *this)
{
}

void WebStorageTrackerClient::dispatchDidModifyOrigin(WebStorageTrackerClient *this, WebCore::SecurityOrigin *a2)
{
  id v2 = [[WebSecurityOrigin alloc] _initWithWebCoreSecurityOrigin:a2];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "postNotificationName:object:", @"WebStorageDidModifyOriginNotification", v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_1E1477174(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebStorageTrackerClient::dispatchDidModifyOrigin(WebStorageTrackerClient *this, const WTF::String *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WebCore::SecurityOriginData::fromDatabaseIdentifier();
  if (!v25) {
    return result;
  }
  if (WTF::isMainThread(result))
  {
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v21, (WebCore::SecurityOriginData *)v23);
    uint64_t result = (WTF *)(*(uint64_t (**)(WebStorageTrackerClient *, WTF *))(*(void *)this + 32))(this, v21);
    uint64_t v5 = v21;
    unsigned int v21 = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5);
      unsigned int v6 = (WTF::StringImpl *)*((void *)v5 + 6);
      *((void *)v5 + 6) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      uint64_t v13 = (WTF::StringImpl *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v4);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v16 = *((unsigned int *)v5 + 8);
      if (v16 != -1) {
        ((void (*)(WTF **, char *))off_1F3C7D8B0[v16])(&v20, (char *)v5 + 8);
      }
LABEL_47:
      *((_DWORD *)v5 + 8) = -1;
      uint64_t result = (WTF *)WTF::fastFree(v5, v4);
    }
  }
  else
  {
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v19, (WebCore::SecurityOriginData *)v23);
    WebCore::SecurityOrigin::isolatedCopy((uint64_t *)&v20, v19);
    int v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v7 = &unk_1F3C7D8D0;
    uint64_t v8 = v20;
    uint64_t v20 = 0;
    unsigned int v21 = v7;
    *((void *)v7 + objc_destroyWeak(this + 1) = v8;
    WTF::callOnMainThread();
    uint64_t result = v21;
    unsigned int v21 = 0;
    if (result) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
    }
    uint64_t v9 = v20;
    uint64_t v20 = 0;
    if (v9 && (unsigned int add = atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF), add == 1))
    {
      atomic_store(add, (unsigned int *)v9);
      uint64_t v11 = (WTF::StringImpl *)*((void *)v9 + 6);
      *((void *)v9 + 6) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v4);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v14 = (WTF::StringImpl *)*((void *)v9 + 5);
      *((void *)v9 + 5) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v4);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v17 = *((unsigned int *)v9 + 8);
      if (v17 != -1) {
        ((void (*)(char *, char *))off_1F3C7D8B0[v17])(&v22, (char *)v9 + 8);
      }
      *((_DWORD *)v9 + 8) = -1;
      uint64_t result = (WTF *)WTF::fastFree(v9, v4);
      uint64_t v5 = v19;
      int v19 = 0;
      if (!v5) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v5 = v19;
      int v19 = 0;
      if (!v5) {
        goto LABEL_14;
      }
    }
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5);
      uint64_t v12 = (WTF::StringImpl *)*((void *)v5 + 6);
      *((void *)v5 + 6) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v4);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t v15 = (WTF::StringImpl *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v4);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v18 = *((unsigned int *)v5 + 8);
      if (v18 != -1) {
        ((void (*)(char *, char *))off_1F3C7D8B0[v18])(&v22, (char *)v5 + 8);
      }
      goto LABEL_47;
    }
  }
LABEL_14:
  if (v25)
  {
    if (v24 != -1) {
      return (WTF *)((uint64_t (*)(WTF **, unsigned char *))off_1F3C7D8B0[v24])(&v21, v23);
    }
  }
  return result;
}

void sub_1E14774F4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  uint64_t v19 = a11;
  a11 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a10, a2);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a9, v20);
  if (a18)
  {
    if (a16 != -1)
    {
      ((void (*)(uint64_t *, char *))off_1F3C7D8B0[a16])(&a11, &a13);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebStorageTrackerClient::dispatchDidModifyOrigin(WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C7D8D0;
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebStorageTrackerClient::dispatchDidModifyOrigin(WTF::String const&)::$_0,void>::~CallableWrapper(WTF *a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C7D8D0;
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((void *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebStorageTrackerClient::dispatchDidModifyOrigin(WTF::String const&)::$_0,void>::call(uint64_t a1)
{
    operator new();
  uint64_t v1 = *(void *)(a1 + 8);
  id v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient
                                                  + 32);
  uint64_t v3 = WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient;
  return v2(v3, v1);
}

void sub_1E14778E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::fastFree(v9, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1E14778FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1477B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *(_DWORD **)(v13 - 24);
  *(void *)(v13 - ++*(_DWORD *)(this + 24) = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a13);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a13);
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a13);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1E1477EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKitInitialize()
{
  if ((WebKitInitialize::webkitInitialized & 1) == 0)
  {
    WebKitInitialize::webkitInitialized = 1;
    InitWebCoreThreadSystemInterface();
    +[WebView enableWebThread];
    if (!WebPlatformStrategies::initializeIfNecessary(void)::platformStrategies) {
      operator new();
    }
    CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    id v2 = CFRunLoopTimerCreate(v0, Current, 0.0, 0, 0, (CFRunLoopTimerCallBack)LoadWebLocalizedStringsTimerCallback, 0);
    uint64_t v3 = CFRunLoopGetCurrent();
    CFRunLoopAddTimer(v3, v2, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
    if (v2) {
      CFRelease(v2);
    }
    MEMORY[0x1F4172408]();
  }
}

void sub_1E1478008(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

float WebKitGetMinimumZoomFontSize()
{
  return 15.0;
}

void WebKitGetLastLineBreakInBuffer(uint64_t a1, StringImpl *length, unsigned int a3)
{
  int v3 = (int)length;
  unsigned int v4 = 0;
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v102 = a1;
  *((void *)&v102 + objc_destroyWeak(this + 1) = a3;
  BOOL v103 = 0;
  LOBYTE(v104) = 0;
  char v112 = 0;
  int8x16_t v113 = 0;
  __int16 v114 = 256;
  unsigned int v115 = 0;
  uint64_t v5 = MEMORY[0x1E4FB6490];
  int v95 = (int)length;
  while (1)
  {
    unint64_t v7 = v4;
    BOOL v16 = v4 == 0;
    long long v8 = v102;
    unint64_t v6 = DWORD2(v102);
    LOBYTE(v4) = BYTE2(v115);
    char v9 = !v16;
    if (HIWORD(v115)) {
      char v9 = 1;
    }
    if ((*((void *)&v102 + 1) & 0xFF00000000) != 0)
    {
      if (v9)
      {
        unint64_t v10 = v7 - 2;
        if (v7 >= 2)
        {
          if (DWORD2(v102) <= v10) {
            goto LABEL_266;
          }
          unsigned __int8 v11 = *(unsigned char *)(v102 + v10);
          goto LABEL_25;
        }
        unsigned __int8 v11 = v115;
        if (!v7) {
          goto LABEL_27;
        }
LABEL_24:
        unint64_t v7 = 1;
LABEL_25:
        if (DWORD2(v102) <= v7 - 1) {
          goto LABEL_266;
        }
        LOBYTE(v4) = *(unsigned char *)(v102 + v7 - 1);
LABEL_27:
        if (v7 >= DWORD2(v102)) {
          goto LABEL_3;
        }
        while (1)
        {
          unsigned __int8 v15 = v4;
          unsigned int v4 = *(unsigned __int8 *)(v102 + v7);
          BOOL v16 = v4 > 0x20 || ((1 << v4) & 0x100000600) == 0;
          if (!v16)
          {
LABEL_2:
            LODWORD(v6) = v7;
            goto LABEL_3;
          }
          if (v15 != 45) {
            break;
          }
          if (v4 - 48 > 9)
          {
            if (v4 < 0x21) {
              goto LABEL_30;
            }
            goto LABEL_29;
          }
          if ((v11 - 48) < 0xAu || ((v11 | 0x20) - 97) < 0x1Au) {
            goto LABEL_2;
          }
LABEL_30:
          ++v7;
          unsigned __int8 v11 = v15;
          if (DWORD2(v102) == v7) {
            goto LABEL_3;
          }
        }
        if (v15 < 0x21u || v4 <= 0x20) {
          goto LABEL_30;
        }
LABEL_29:
        if ((*(unsigned __int8 *)(v5 + 28 * (v15 - 33) + ((v4 - 33) >> 3)) >> ((v4 - 33) & 7))) {
          goto LABEL_2;
        }
        goto LABEL_30;
      }
      if (DWORD2(v102) >= 2uLL)
      {
        unsigned __int8 v11 = v115;
        goto LABEL_24;
      }
      goto LABEL_3;
    }
    if ((v9 & 1) == 0)
    {
      if (DWORD2(v102) < 2uLL) {
        goto LABEL_3;
      }
      unint64_t v7 = 1;
      unsigned __int16 v13 = v115;
      unint64_t v14 = 0;
      goto LABEL_48;
    }
    unint64_t v12 = v7 - 2;
    if (v7 < 2) {
      break;
    }
    if (DWORD2(v102) <= v12) {
      goto LABEL_266;
    }
    unsigned __int16 v13 = *(_WORD *)(v102 + 2 * v12);
    unint64_t v14 = v7 - 1;
    if (DWORD2(v102) <= v7 - 1) {
      goto LABEL_266;
    }
LABEL_48:
    uint64_t v17 = (_WORD *)(v102 + 2 * v14);
    if (v7 < DWORD2(v102)) {
      goto LABEL_49;
    }
LABEL_3:
    unsigned int v4 = v6 + 1;
    if ((int)v6 >= v3)
    {
      if (v112) {
        WTF::CachedTextBreakIterator::~CachedTextBreakIterator(&v104);
      }
      BOOL v88 = v103;
      BOOL v103 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2) {
          WTF::StringImpl::destroy(v88, length);
        }
        else {
          *(_DWORD *)v88 -= 2;
        }
      }
      return;
    }
  }
  unsigned __int16 v13 = v115;
  if (v7)
  {
    unint64_t v7 = 1;
    unint64_t v14 = 0;
    if (!DWORD2(v102)) {
      goto LABEL_266;
    }
    goto LABEL_48;
  }
  uint64_t v17 = (_WORD *)&v115 + 1;
  if (!DWORD2(v102)) {
    goto LABEL_3;
  }
LABEL_49:
  uint64_t v18 = 0;
  int v98 = 0;
  LOWORD(v19) = *v17;
  uint64_t v96 = v102 + 4;
  unint64_t v97 = 0;
  while (2)
  {
    unsigned __int16 v20 = v19;
    unsigned int v19 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v19 <= 0x20 && ((1 << v19) & 0x100000600) != 0)
    {
LABEL_253:
      LODWORD(v6) = v7;
LABEL_254:
      int v3 = v95;
      uint64_t v5 = MEMORY[0x1E4FB6490];
      goto LABEL_3;
    }
    if (v20 == 45)
    {
      if (v19 - 48 <= 9)
      {
        if ((unsigned __int16)(v13 - 48) < 0xAu || (unsigned __int16)((v13 | 0x20) - 97) < 0x1Au) {
          goto LABEL_253;
        }
LABEL_77:
        uint64_t v22 = 0;
        unsigned __int16 v20 = 45;
LABEL_50:
        ++v7;
        unsigned __int16 v13 = v20;
        uint64_t v18 = v22;
        if (v7 >= v6) {
          goto LABEL_254;
        }
        continue;
      }
      if (v19 < 0x100)
      {
        if (v19 < 0x21) {
          goto LABEL_77;
        }
        goto LABEL_67;
      }
    }
    else if ((unsigned __int16)(v19 | v20) < 0x100u)
    {
      uint64_t v22 = 0;
      if (v20 < 0x21u || v19 <= 0x20) {
        goto LABEL_50;
      }
LABEL_67:
      if ((*(unsigned __int8 *)(MEMORY[0x1E4FB6490] + 28 * (v20 - 33) + ((v19 - 33) >> 3)) >> ((v19 - 33) & 7))) {
        goto LABEL_253;
      }
      uint64_t v22 = 0;
      goto LABEL_50;
    }
    break;
  }
  if (!(_WORD)v18) {
    uint64_t v18 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v20);
  }
  uint64_t v23 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v19);
  uint64_t v22 = v23;
  __int16 v24 = v18 | v23;
  if ((((unsigned __int16)v18 | (unsigned __int16)v23) & 0xFE7E) == 0) {
    goto LABEL_50;
  }
  if ((v24 & 0xFFFE) == 2) {
    goto LABEL_253;
  }
  if ((((unsigned __int16)v18 | (unsigned __int16)v23) & 0x8000) == 0 && (v24 & 0xC0) != 0) {
    goto LABEL_50;
  }
  if (v23 == 4)
  {
    uint64_t v22 = v18;
    goto LABEL_50;
  }
  if ((((unsigned __int16)v18 | (unsigned __int16)v23) & 0x8000) == 0 && (v24 & 0x38) != 0)
  {
    if ((unsigned __int16)v18 == 8 || v23 == 16 || v23 == 32) {
      goto LABEL_50;
    }
    if ((v24 & 2) != 0) {
      goto LABEL_253;
    }
  }
  unint64_t v25 = v97;
  if (v98 && v97 >= v7)
  {
    if (v7 < v97)
    {
LABEL_214:
      unint64_t v78 = v6 - 1;
      if (v6 - 1 >= v25) {
        unint64_t v78 = v25;
      }
      if (v7 < v78)
      {
        unint64_t v79 = v25;
        unint64_t v80 = v7 + 1;
        if (v6 <= v7 + 1) {
          goto LABEL_266;
        }
        unsigned int v81 = *(unsigned __int16 *)(v8 + 2 * v80);
        if (v81 > 0xFF || (v81 | 0x20) - 97 <= 0x19)
        {
          if (v80 == v78)
          {
LABEL_221:
            unint64_t v7 = v78;
          }
          else
          {
            while (1)
            {
              if (v6 <= v7 + 2) {
                goto LABEL_266;
              }
              unsigned int v87 = *(unsigned __int16 *)(v96 + 2 * v7);
              if (v87 <= 0xFF && (v87 | 0x20) - 97 > 0x19) {
                break;
              }
              if (v78 - 1 == ++v7) {
                goto LABEL_221;
              }
            }
            ++v7;
          }
          unsigned __int16 v20 = v19;
        }
        unint64_t v25 = v79;
      }
    }
LABEL_224:
    unint64_t v97 = v25;
    if (v7 == v25)
    {
      if (v20 > 0x20u || ((1 << v20) & 0x100000600) == 0)
      {
        LODWORD(v6) = v25;
        goto LABEL_254;
      }
      int v98 = 1;
      unint64_t v7 = v25;
    }
    else
    {
      int v98 = 1;
    }
    goto LABEL_50;
  }
  while (2)
  {
    if (!HIWORD(v115))
    {
      uint64_t v26 = v116;
      if (!v112)
      {
        uint64_t v93 = 0;
        uint64_t v26 = v116;
        goto LABEL_105;
      }
LABEL_95:
      if (v26 == v113) {
        goto LABEL_206;
      }
      char v27 = v114;
      char v28 = HIBYTE(v114);
      int v29 = v103;
      if (v103)
      {
        int v30 = *(_DWORD *)v103;
        *(_DWORD *)v103 += 2;
        if (v30)
        {
          *(_DWORD *)int v29 = v30;
        }
        else
        {
          uint64_t v23 = WTF::StringImpl::destroy(v29, length);
          if (!v112) {
            goto LABEL_90;
          }
        }
      }
      WTF::CachedTextBreakIterator::~CachedTextBreakIterator(&v104);
      char v112 = 0;
LABEL_90:
      int8x16_t v113 = 0;
      LOBYTE(v114) = v27;
      HIBYTE(v114) = v28;
      continue;
    }
    break;
  }
  uint64_t v26 = &v116[2 * ((_WORD)v115 == 0) - 4];
  if (v112) {
    goto LABEL_95;
  }
  if ((_WORD)v115) {
    uint64_t v31 = 2;
  }
  else {
    uint64_t v31 = 1;
  }
  uint64_t v93 = v31;
LABEL_105:
  long long v92 = v102;
  uint64_t v32 = v114;
  int v94 = HIBYTE(v114);
  isMainThread = (WTF::TextBreakIteratorCache *)WTF::isMainThread((WTF *)v23);
  if (!isMainThread
    || (uint64_t v34 = WTF::TextBreakIteratorCache::singleton(isMainThread),
        uint64_t v99 = v32,
        uint64_t v36 = *(void *)v34,
        uint64_t v91 = v34,
        uint64_t v37 = *(unsigned int *)(v34 + 12),
        !v37))
  {
LABEL_129:
    WTF::TextBreakIterator::TextBreakIterator();
    goto LABEL_168;
  }
  uint64_t v89 = v36 + 80 * v37;
  uint64_t v38 = 80 * v37;
  while (2)
  {
    CFTypeRef cf = *(CFTypeRef *)(v36 + 56);
    BOOL v40 = HIDWORD(v99) == HIDWORD(cf) && HIDWORD(v99) != -1;
    if (HIDWORD(cf) == -1 || !v40)
    {
      if (HIDWORD(cf) == -1) {
        BOOL v42 = HIDWORD(v99) == -1;
      }
      else {
        BOOL v42 = v40;
      }
      if (v42) {
        goto LABEL_126;
      }
    }
    else
    {
      *(void *)&long long v124 = &v100;
      char v43 = ((uint64_t (*)(long long *, CFTypeRef *, uint64_t *))off_1F3C7D948[(unint64_t)cf >> 32])(&v124, &cf, &v99);
      if (v43)
      {
LABEL_126:
        if ((v94 != 0) != (*(unsigned char *)(v36 + 64) == 0) && *(WTF::StringImpl **)(v36 + 72) == v103) {
          goto LABEL_131;
        }
      }
    }
    v36 += 80;
    v38 -= 80;
    if (v38) {
      continue;
    }
    break;
  }
  uint64_t v36 = v89;
LABEL_131:
  uint64_t v44 = v36;
  if (v36 == *(void *)v91 + 80 * *(unsigned int *)(v91 + 12)) {
    goto LABEL_129;
  }
  LOBYTE(v135) = 0;
  unsigned int v140 = -1;
  uint64_t v45 = *(unsigned int *)(v36 + 48);
  uint64_t v90 = v44;
  if (v45 != -1)
  {
    ((void (*)(CFTypeRef *, CFStringTokenizerRef *, uint64_t))off_1F3C7D928[v45])(&cf, &v135, v44 + 8);
    unsigned int v140 = v45;
    uint64_t v44 = v90;
  }
  uint64_t v46 = *(void *)(v44 + 56);
  char v142 = *(unsigned char *)(v44 + 64);
  uint64_t v141 = v46;
  uint64_t v47 = *(WTF::StringImpl **)(v44 + 72);
  *(void *)(v44 + 72) = 0;
  unint64_t v143 = v47;
  unsigned int v48 = *(WTF::StringImpl **)(v44 + 72);
  *(void *)(v44 + 72) = 0;
  if (!v48)
  {
LABEL_137:
    uint64_t v49 = *(unsigned int *)(v44 + 48);
    if (v49 == -1) {
      goto LABEL_139;
    }
LABEL_138:
    uint64_t v50 = v44;
    ((void (*)(long long *, uint64_t))off_1F3C7D908[v49])(&v124, v44 + 8);
    uint64_t v44 = v50;
    goto LABEL_139;
  }
  if (*(_DWORD *)v48 != 2)
  {
    *(_DWORD *)v48 -= 2;
    goto LABEL_137;
  }
  WTF::StringImpl::destroy(v48, v35);
  uint64_t v44 = v90;
  uint64_t v49 = *(unsigned int *)(v90 + 48);
  if (v49 != -1) {
    goto LABEL_138;
  }
LABEL_139:
  *(_DWORD *)(v44 + 48) = -1;
  WTF::VectorMover<false,WTF::TextBreakIterator>::move((WTF::StringImpl *)(v44 + 80), (WTF::StringImpl *)(*(void *)v91 + 80 * *(unsigned int *)(v91 + 12)), v44);
  --*(_DWORD *)(v91 + 12);
  if (v140 == 1)
  {
    if (v139 == 1)
    {
      long long v124 = v92;
      if (v93) {
        WTF::createContextualizedCFString();
      }
      else {
        WTF::StringView::createCFStringWithoutCopying((uint64_t *)&cf, (WTF::StringView *)&v124);
      }
      v146.length = DWORD2(v92);
      uint64_t v136 = DWORD2(v92);
      uint64_t v137 = v93;
      v146.location = 0;
      CFStringTokenizerSetString(v135, (CFStringRef)cf, v146);
      CFTypeRef v61 = cf;
      CFTypeRef cf = 0;
      if (v61) {
        CFRelease(v61);
      }
    }
    else
    {
      if (v139) {
        goto LABEL_265;
      }
      long long v124 = v92;
      if (v93)
      {
        WTF::createContextualizedCFString();
        uint64_t v52 = (__CFStringTokenizer *)cf;
        CFTypeRef cf = 0;
        CFStringTokenizerRef v53 = v135;
        CFStringTokenizerRef v135 = v52;
        if (v53)
        {
          CFRelease(v53);
          CFTypeRef v54 = cf;
          CFTypeRef cf = 0;
          if (v54) {
            CFRelease(v54);
          }
        }
        uint64_t v55 = DWORD2(v92);
      }
      else
      {
        WTF::StringView::createCFStringWithoutCopying((uint64_t *)&cf, (WTF::StringView *)&v124);
        int v58 = (__CFStringTokenizer *)cf;
        CFTypeRef cf = 0;
        CFStringTokenizerRef v59 = v135;
        CFStringTokenizerRef v135 = v58;
        if (v59)
        {
          CFRelease(v59);
          CFTypeRef v60 = cf;
          CFTypeRef cf = 0;
          if (v60) {
            CFRelease(v60);
          }
        }
        uint64_t v55 = DWORD2(v124);
      }
      uint64_t v137 = v55;
      uint64_t v138 = v93;
    }
LABEL_168:
    v118[0] = 0;
    unsigned int v119 = -1;
    unsigned int v62 = v140;
    if (v140 == -1)
    {
      uint64_t v63 = 0xFFFFFFFFLL;
    }
    else
    {
      ((void (*)(CFTypeRef *, unsigned char *, CFStringTokenizerRef *))off_1F3C7D928[v140])(&cf, v118, &v135);
      unsigned int v119 = v62;
      uint64_t v63 = v140;
    }
    uint64_t v120 = v141;
    char v121 = v142;
    unint64_t v122 = v143;
    char v123 = 1;
    unint64_t v143 = 0;
    if (v63 != 0xFFFFFFFFLL) {
      ((void (*)(long long *, CFStringTokenizerRef *))off_1F3C7D908[v63])(&v124, &v135);
    }
    if (v112)
    {
      v134[0] = 0;
      char v144 = 0;
      std::__optional_copy_assign_base<WTF::TextBreakIterator,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v124, (uint64_t)&v117);
      std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>((uint64_t)&v117, (uint64_t)v134);
      std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>((uint64_t)&v104, (uint64_t)&v124);
      if (!(_BYTE)v129) {
        goto LABEL_181;
      }
      uint64_t v65 = (WTF::StringImpl *)*((void *)&v128 + 1);
      *((void *)&v128 + objc_destroyWeak(this + 1) = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
        {
          WTF::StringImpl::destroy(v65, v64);
          uint64_t v66 = v127;
          if (v127 == -1) {
            goto LABEL_180;
          }
          goto LABEL_179;
        }
        *(_DWORD *)v65 -= 2;
      }
      uint64_t v66 = v127;
      if (v127 == -1)
      {
LABEL_180:
        LODWORD(v127) = -1;
LABEL_181:
        if (!v144) {
          goto LABEL_205;
        }
        uint64_t v67 = v143;
        unint64_t v143 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
          {
            WTF::StringImpl::destroy(v67, v64);
            uint64_t v68 = v140;
            if (v140 == -1) {
              goto LABEL_205;
            }
            goto LABEL_204;
          }
          *(_DWORD *)v67 -= 2;
        }
        uint64_t v68 = v140;
        if (v140 == -1)
        {
LABEL_205:
          WTF::CachedTextBreakIterator::~CachedTextBreakIterator(&v117);
          int8x16_t v113 = v26;
          if (!v112) {
            goto LABEL_266;
          }
LABEL_206:
          if (!v111) {
            goto LABEL_266;
          }
          unint64_t v74 = (v7 - 1);
          if (v110 != 1)
          {
            if (v110) {
              goto LABEL_265;
            }
            int v75 = ubrk_following();
            uint64_t v76 = (v75 - v106) | 0x100000000;
            if (v75 == -1) {
              uint64_t v76 = 0;
            }
LABEL_211:
            int v77 = v98;
            if (v98 == HIDWORD(v76)) {
              goto LABEL_212;
            }
LABEL_247:
            if (!v77) {
              goto LABEL_213;
            }
            goto LABEL_248;
          }
          if (v109 == 1)
          {
            if (v106 <= v74)
            {
              uint64_t v85 = 0;
              uint64_t v86 = 0;
              uint64_t v84 = 0;
            }
            else
            {
              CFStringTokenizerGoToTokenAtIndex(tokenizer, v107 + v74);
              CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(tokenizer);
              length = (StringImpl *)CurrentTokenRange.length;
              if (CurrentTokenRange.location == -1)
              {
                uint64_t v85 = 0;
                uint64_t v86 = 0;
                uint64_t v84 = 0;
              }
              else
              {
                uint64_t v84 = (LODWORD(CurrentTokenRange.location) + LODWORD(CurrentTokenRange.length) - v107) & 0xFFFFFF00;
                uint64_t v85 = (LOBYTE(CurrentTokenRange.location) + LOBYTE(CurrentTokenRange.length) - v107);
                uint64_t v86 = 0x100000000;
              }
            }
            uint64_t v76 = v86 | v85 | v84;
            int v77 = v98;
            if (v98 != HIDWORD(v76)) {
              goto LABEL_247;
            }
          }
          else
          {
            if (v109) {
              goto LABEL_265;
            }
            if (v107 > v74)
            {
              int RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
              uint64_t v76 = (RangeOfCharacterClusterAtIndex + length - v108) | 0x100000000;
              goto LABEL_211;
            }
            LODWORD(v76) = 0;
            int v77 = v98;
            if (v98) {
              goto LABEL_247;
            }
          }
LABEL_212:
          if (v77)
          {
LABEL_213:
            unint64_t v25 = v76;
            if (v7 >= v76) {
              goto LABEL_224;
            }
            goto LABEL_214;
          }
LABEL_248:
          int v98 = 0;
          goto LABEL_50;
        }
LABEL_204:
        ((void (*)(CFTypeRef *, CFStringTokenizerRef *))off_1F3C7D908[v68])(&cf, &v135);
        goto LABEL_205;
      }
LABEL_179:
      ((void (*)(CFTypeRef *, char *))off_1F3C7D908[v66])(&cf, (char *)&v124 + 8);
      goto LABEL_180;
    }
    LOBYTE(v1++*(_DWORD *)(this + 24) = 0;
    LOBYTE(v129) = 0;
    std::__optional_copy_assign_base<WTF::TextBreakIterator,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v104, (uint64_t)&v117);
    std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>((uint64_t)&v117, (uint64_t)&v124);
    if ((_BYTE)v129)
    {
      uint64_t v70 = (WTF::StringImpl *)*((void *)&v128 + 1);
      *((void *)&v128 + objc_destroyWeak(this + 1) = 0;
      if (!v70) {
        goto LABEL_191;
      }
      if (*(_DWORD *)v70 != 2)
      {
        *(_DWORD *)v70 -= 2;
LABEL_191:
        uint64_t v71 = v127;
        if (v127 == -1) {
          goto LABEL_193;
        }
        goto LABEL_192;
      }
      WTF::StringImpl::destroy(v70, v69);
      uint64_t v71 = v127;
      if (v127 != -1) {
LABEL_192:
      }
        ((void (*)(char *, char *))off_1F3C7D908[v71])(v134, (char *)&v124 + 8);
    }
LABEL_193:
    if (!v123)
    {
LABEL_200:
      char v112 = 1;
      goto LABEL_205;
    }
    unint64_t v72 = v122;
    unint64_t v122 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        WTF::StringImpl::destroy(v72, v69);
        uint64_t v73 = v119;
        if (v119 == -1) {
          goto LABEL_199;
        }
        goto LABEL_198;
      }
      *(_DWORD *)v72 -= 2;
    }
    uint64_t v73 = v119;
    if (v119 == -1)
    {
LABEL_199:
      unsigned int v119 = -1;
      char v123 = 0;
      goto LABEL_200;
    }
LABEL_198:
    ((void (*)(long long *, unsigned char *))off_1F3C7D908[v73])(&v124, v118);
    goto LABEL_199;
  }
  if (!v140)
  {
    long long v124 = xmmword_1E149DE40;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    DWORD2(v125) = 32;
    *(void *)&long long v128 = &v133;
    LODWORD(cf) = 0;
    if ((*((void *)&v92 + 1) & 0xFF00000000) != 0) {
      uint64_t v51 = WTF::openLatin1ContextAwareUTextProvider();
    }
    else {
      uint64_t v51 = WTF::openUTF16ContextAwareUTextProvider();
    }
    unint64_t v56 = (UText *)v51;
    int v57 = 0;
    if (v51 && (int)cf <= 0)
    {
      ubrk_setUText();
      utext_close(v56);
      int v57 = v93;
    }
    LODWORD(v136) = v57;
    goto LABEL_168;
  }
LABEL_265:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_266:
  __break(1u);
}

void sub_1E1478F14(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef cf,WTF::StringImpl *a39)
{
  if (cf)
  {
    CFRelease(cf);
    WTF::TextBreakIterator::~TextBreakIterator((WTF::TextBreakIterator *)(v39 - 192), v41);
    WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(&a39, v42);
    _Unwind_Resume(a1);
  }
  WTF::TextBreakIterator::~TextBreakIterator((WTF::TextBreakIterator *)(v39 - 192), a2);
  WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(&a39, v43);
  _Unwind_Resume(a1);
}

void sub_1E1479034()
{
}

void WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(WTF::StringImpl **this, StringImpl *a2)
{
  if (*((unsigned char *)this + 112)) {
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator(this + 3);
  }
  int v3 = this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

const char *WebKitPlatformSystemRootDirectory()
{
  return "/";
}

uint64_t WebKitSetInvalidWebBackgroundTaskIdentifier(uint64_t a1)
{
  id v2 = (void *)[MEMORY[0x1E4FB61D0] sharedController];
  return [v2 setInvalidBackgroundTaskIdentifier:a1];
}

uint64_t WebKitSetStartBackgroundTaskBlock(uint64_t a1)
{
  id v2 = (void *)[MEMORY[0x1E4FB61D0] sharedController];
  return [v2 setBackgroundTaskStartBlock:a1];
}

uint64_t WebKitSetEndBackgroundTaskBlock(uint64_t a1)
{
  id v2 = (void *)[MEMORY[0x1E4FB61D0] sharedController];
  return [v2 setBackgroundTaskEndBlock:a1];
}

CGPathRef WebKitCreatePathWithShrinkWrappedRects(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  char v28 = 0;
  uint64_t v29 = 0;
  unint64_t v2 = [a1 count];
  if (v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
LABEL_36:
      JUMPOUT(0x1E1479410);
    }
    LODWORD(v29) = v2;
    char v28 = (WTF *)WTF::fastMalloc((WTF *)(16 * v2));
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        while (1)
        {
          if (*(void *)v25 != v5) {
            objc_enumerationMutation(a1);
          }
          unint64_t v7 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          [v7 getValue:&v31];
          if (strcmp("{CGRect={CGPoint=dd}{CGSize=dd}}", (const char *)[v7 objCType]))
          {
            CGPathRef v21 = 0;
            goto LABEL_31;
          }
          if (v4 == v29) {
            break;
          }
          WebCore::FloatRect::FloatRect((WTF *)((char *)v28 + 16 * v4++), &v31);
          HIDWORD(v29) = v4;
          if (++i == v3) {
            goto LABEL_27;
          }
        }
        unint64_t v9 = v4 + ((unint64_t)v4 >> 2);
        if (v9 >= 0x10) {
          unint64_t v10 = v9 + 1;
        }
        else {
          unint64_t v10 = 16;
        }
        if (v10 <= (unint64_t)v4 + 1) {
          unint64_t v11 = v4 + 1;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11 >> 28)
        {
          __break(0xC471u);
          goto LABEL_36;
        }
        unint64_t v12 = v28;
        unsigned __int16 v13 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
        unsigned __int8 v15 = v13;
        LODWORD(v29) = v11;
        char v28 = v13;
        if (v4)
        {
          uint64_t v16 = 16 * v4;
          uint64_t v17 = v13;
          uint64_t v18 = v12;
          do
          {
            long long v19 = *(_OWORD *)v18;
            uint64_t v18 = (WTF *)((char *)v18 + 16);
            *(_OWORD *)uint64_t v17 = v19;
            uint64_t v17 = (WTF *)((char *)v17 + 16);
            v16 -= 16;
          }
          while (v16);
        }
        if (v12)
        {
          if (v13 == v12)
          {
            unsigned __int8 v15 = 0;
            char v28 = 0;
            LODWORD(v29) = 0;
          }
          WTF::fastFree(v12, v14);
        }
        WebCore::FloatRect::FloatRect((WTF *)((char *)v15 + 16 * v4), &v31);
        unsigned int v4 = ++HIDWORD(v29);
      }
LABEL_27:
      uint64_t v3 = [a1 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }
    while (v3);
  }
  WebCore::PathUtilities::pathWithShrinkWrappedRects();
  unsigned __int16 v20 = (const CGPath *)WebCore::Path::platformPath((WebCore::Path *)&v31);
  CGPathRef v21 = CGPathRetain(v20);
  if (v32 != -1) {
    ((void (*)(char *, CGFloat *))off_1F3C7D988[v32])(&v30, &v31.origin.y);
  }
LABEL_31:
  uint64_t v22 = v28;
  if (v28)
  {
    char v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v22, v8);
  }
  return v21;
}

void sub_1E147941C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  if (a17)
  {
    WTF::fastFree(a17, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LoadWebLocalizedStringsTimerCallback(__CFRunLoopTimer *a1, void *a2)
{
  global_queue = dispatch_get_global_queue(-2, 0);
  dispatch_async(global_queue, &__block_literal_global_6);
}

CFTypeRef ___ZL36LoadWebLocalizedStringsTimerCallbackP16__CFRunLoopTimerPv_block_invoke()
{
  return WebLocalizedStringInternal("Typing (Undo action name)");
}

void WTF::CachedTextBreakIterator::~CachedTextBreakIterator(WTF::StringImpl **this)
{
  if (*((unsigned char *)this + 80))
  {
    isMainThread = (WTF::TextBreakIteratorCache *)WTF::isMainThread((WTF *)this);
    if (!isMainThread) {
      goto LABEL_18;
    }
    uint64_t v4 = WTF::TextBreakIteratorCache::singleton(isMainThread);
    if (!*((unsigned char *)this + 80))
    {
      __break(1u);
      return;
    }
    uint64_t v5 = (_DWORD *)v4;
    uint64_t v6 = *(unsigned int *)(v4 + 12);
    if (v6 == *(_DWORD *)(v4 + 8))
    {
      unint64_t v7 = WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v6 + 1, (unint64_t)this);
      long long v8 = (WTF::CachedTextBreakIterator *)v7;
      unsigned int v9 = v5[3];
      uint64_t v10 = *(void *)v5;
      uint64_t v11 = *(void *)v5 + 80 * v9;
      *(unsigned char *)(v11 + 8) = 0;
      uint64_t v12 = v11 + 8;
      *(_DWORD *)(v12 + 40) = -1;
      uint64_t v13 = *((unsigned int *)v7 + 12);
      if (v13 != -1)
      {
        ((void (*)(char *, uint64_t, char *))off_1F3C7D928[v13])(v32, v12, v7 + 8);
        *(_DWORD *)(v12 + 40) = v13;
      }
      uint64_t v14 = *((void *)v8 + 7);
      uint64_t v15 = v10 + 80 * v9;
      *(unsigned char *)(v15 + 64) = *((unsigned char *)v8 + 64);
      *(void *)(v15 + 56) = v14;
      uint64_t v16 = (void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *(void *)v4;
      uint64_t v18 = *(void *)v4 + 80 * v6;
      *(unsigned char *)(v18 + 8) = 0;
      uint64_t v19 = v18 + 8;
      *(_DWORD *)(v19 + 40) = -1;
      uint64_t v20 = *((unsigned int *)this + 12);
      if (v20 != -1)
      {
        ((void (*)(char *, uint64_t, WTF::StringImpl **))off_1F3C7D928[v20])(v31, v19, this + 1);
        *(_DWORD *)(v19 + 40) = v20;
      }
      CGPathRef v21 = this[7];
      uint64_t v22 = v17 + 80 * v6;
      *(unsigned char *)(v22 + 64) = *((unsigned char *)this + 64);
      *(void *)(v22 + 56) = v21;
      uint64_t v16 = (void *)(v22 + 72);
      long long v8 = (WTF::CachedTextBreakIterator *)this;
    }
    uint64_t v23 = *((void *)v8 + 9);
    *((void *)v8 + 9) = 0;
    void *v16 = v23;
    unsigned int v24 = v5[3] + 1;
    v5[3] = v24;
    if (v24 < 3)
    {
LABEL_18:
      if (!*((unsigned char *)this + 80)) {
        return;
      }
      char v28 = this[9];
      this[9] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v3);
          uint64_t v29 = *((unsigned int *)this + 12);
          if (v29 == -1) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        *(_DWORD *)v28 -= 2;
      }
      uint64_t v29 = *((unsigned int *)this + 12);
      if (v29 == -1)
      {
LABEL_24:
        *((_DWORD *)this + 12) = -1;
        return;
      }
LABEL_23:
      ((void (*)(char *, WTF::StringImpl **))off_1F3C7D908[v29])(&v30, this + 1);
      goto LABEL_24;
    }
    uint64_t v25 = *(void *)v5;
    long long v26 = *(WTF::StringImpl **)(*(void *)v5 + 72);
    *(void *)(*(void *)v5 + 72) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v3);
        uint64_t v27 = *(unsigned int *)(v25 + 48);
        if (v27 == -1) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      *(_DWORD *)v26 -= 2;
    }
    uint64_t v27 = *(unsigned int *)(v25 + 48);
    if (v27 == -1)
    {
LABEL_17:
      *(_DWORD *)(v25 + 48) = -1;
      WTF::VectorMover<false,WTF::TextBreakIterator>::move((WTF::StringImpl *)(v25 + 80), (WTF::StringImpl *)(*(void *)v5 + 80 * v5[3]--), v25);
      goto LABEL_18;
    }
LABEL_16:
    ((void (*)(char *, uint64_t))off_1F3C7D908[v27])(&v33, v25 + 8);
    goto LABEL_17;
  }
}

void sub_1E1479744(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  uint64_t v15 = *v13;
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7D908[v15])(&a11, v12);
  }
  _DWORD *v13 = -1;
  std::optional<WTF::TextBreakIterator>::~optional(v11, a2);
  _Unwind_Resume(a1);
}

void sub_1E14797AC(_Unwind_Exception *a1, StringImpl *a2)
{
  std::optional<WTF::TextBreakIterator>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::TextBreakIterator>::~optional(uint64_t a1, StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, a2);
        uint64_t v4 = *(unsigned int *)(a1 + 48);
        if (v4 == -1) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      *(_DWORD *)v3 -= 2;
    }
    uint64_t v4 = *(unsigned int *)(a1 + 48);
    if (v4 == -1)
    {
LABEL_7:
      *(_DWORD *)(a1 + 48) = -1;
      return a1;
    }
LABEL_6:
    ((void (*)(char *, uint64_t))off_1F3C7D908[v4])(&v6, a1 + 8);
    goto LABEL_7;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return ubrk_close();
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F3C7D918[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  uint64_t v3 = *(unsigned int *)(a3 + 32);
  if (v3 != -1)
  {
    uint64_t result = ((uint64_t (*)(unsigned char *))off_1F3C7D938[v3])(v6);
    *(_DWORD *)(a2 + 32) = v3;
  }
  return result;
}

void sub_1E147994C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 32);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7D918[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 32) = -1;
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(void *)(a2 + ++*(_DWORD *)(this + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

char *WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char v5 = *(WTF::StringImpl **)a1;
  if (*(void *)a1 > a3
    || (char v6 = (WTF::StringImpl *)((char *)v5 + 80 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    unint64_t v12 = *(unsigned int *)(a1 + 8);
    unint64_t v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10) {
      unint64_t v14 = v13 + 1;
    }
    else {
      unint64_t v14 = 16;
    }
    if (v14 <= a2) {
      unint64_t v14 = a2;
    }
    if (v14 > v12)
    {
      unsigned int v15 = *(_DWORD *)(a1 + 12);
      if (v14 < 3)
      {
        uint64_t v17 = a1 + 16;
        *(void *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
      }
      else
      {
        if (v14 >= 0x3333334) {
          goto LABEL_36;
        }
        int v16 = 80 * v14;
        uint64_t v17 = WTF::fastMalloc((WTF *)(80 * v14));
        *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF0) / 0x50;
        *(void *)a1 = v17;
      }
      WTF::VectorMover<false,WTF::TextBreakIterator>::move(v5, (WTF::StringImpl *)((char *)v5 + 80 * v15), v17);
      if ((WTF::StringImpl *)(a1 + 16) != v5 && v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v18);
      }
    }
    return (char *)a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v9 = a2;
  }
  if (v9 > v7)
  {
    if (v9 < 3)
    {
      uint64_t v11 = a1 + 16;
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      goto LABEL_30;
    }
    if (v9 < 0x3333334)
    {
      int v10 = 80 * v9;
      uint64_t v11 = WTF::fastMalloc((WTF *)(80 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x50;
      *(void *)a1 = v11;
LABEL_30:
      WTF::VectorMover<false,WTF::TextBreakIterator>::move(v5, v6, v11);
      uint64_t v20 = *(WTF::StringImpl **)a1;
      if ((WTF::StringImpl *)(a1 + 16) != v5 && v5)
      {
        if (v20 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v21);
        uint64_t v20 = *(WTF::StringImpl **)a1;
      }
      return (char *)v20 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1E1479BD0);
  }
  uint64_t v20 = *(WTF::StringImpl **)a1;
  return (char *)v20 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
}

WTF::StringImpl *WTF::VectorMover<false,WTF::TextBreakIterator>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    char v5 = result;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = a3 + v6;
      *(unsigned char *)(a3 + v6 + 8) = 0;
      unint64_t v8 = (StringImpl *)(a3 + v6 + 8);
      *(_DWORD *)(a3 + v6 + 48) = -1;
      unint64_t v9 = (char *)v5 + v6;
      uint64_t v10 = *(unsigned int *)((char *)v5 + v6 + 48);
      if (v10 != -1)
      {
        ((void (*)(char *, StringImpl *, char *))off_1F3C7D928[v10])(v14, v8, v9 + 8);
        *(_DWORD *)(v7 + 48) = v10;
      }
      uint64_t v11 = *((void *)v9 + 7);
      *(unsigned char *)(v7 + 64) = v9[64];
      *(void *)(v7 + 56) = v11;
      uint64_t v12 = *((void *)v9 + 9);
      *((void *)v9 + 9) = 0;
      *(void *)(v7 + 72) = v12;
      __n128 result = (WTF::StringImpl *)*((void *)v9 + 9);
      *((void *)v9 + 9) = 0;
      if (!result) {
        goto LABEL_9;
      }
      if (*(_DWORD *)result != 2) {
        break;
      }
      __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      uint64_t v13 = *((unsigned int *)v9 + 12);
      if (v13 != -1) {
        goto LABEL_12;
      }
LABEL_3:
      *((_DWORD *)v9 + 12) = -1;
      v6 += 80;
      if ((WTF::StringImpl *)((char *)v5 + v6) == a2) {
        return result;
      }
    }
    *(_DWORD *)result -= 2;
LABEL_9:
    uint64_t v13 = *((unsigned int *)v9 + 12);
    if (v13 == -1) {
      goto LABEL_3;
    }
LABEL_12:
    __n128 result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1F3C7D908[v13])(&v15, (char *)v5 + v6 + 8);
    goto LABEL_3;
  }
  return result;
}

void sub_1E1479D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v16 = v12 + v14;
  uint64_t v17 = *(unsigned int *)(v16 + 48);
  if (v17 != -1) {
    (*(void (**)(char *, uint64_t))(v13 + 8 * v17))(&a12, v16 + 8);
  }
  *(_DWORD *)(v16 + 48) = -1;
  _Unwind_Resume(exception_object);
}

void WTF::TextBreakIterator::~TextBreakIterator(WTF::TextBreakIterator *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = *((unsigned int *)this + 12);
      if (v4 == -1) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
LABEL_5:
  }
    ((void (*)(char *, char *))off_1F3C7D908[v4])(&v5, (char *)this + 8);
LABEL_6:
  *((_DWORD *)this + 12) = -1;
}

uint64_t WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(unsigned int a1)
{
  unsigned __int16 v1 = 1;
  switch(a1 >> 7)
  {
    case 0u:
      switch(a1 >> 4)
      {
        case 1u:
          return 4;
        case 2u:
          LOWORD(v3) = a1 - 32;
          if (a1 - 32 >= 0xA) {
            return 0x8000;
          }
          uint64_t v3 = (__int16)v3;
          uint64_t v4 = (unsigned __int16 *)&unk_1E149DE50;
          return v4[v3];
        case 3u:
          if (a1 < 0x3A) {
            return 1;
          }
          else {
            return (unsigned __int16)0x8000;
          }
        case 4u:
        case 6u:
          return 1;
        case 5u:
          if (a1 == 93) {
            unsigned __int16 v17 = 16;
          }
          else {
            unsigned __int16 v17 = 0x8000;
          }
          if (a1 == 91) {
            unsigned __int16 v17 = 8;
          }
          if (a1 >= 0x5B) {
            return v17;
          }
          else {
            return 1;
          }
        case 7u:
          if (a1 == 125) {
            unsigned __int16 v19 = 32;
          }
          else {
            unsigned __int16 v19 = 0x8000;
          }
          if (a1 == 123) {
            unsigned __int16 v19 = 8;
          }
          if (a1 >= 0x7B) {
            return v19;
          }
          else {
            return 1;
          }
        default:
          return 0x8000;
      }
    case 1u:
      if ((a1 & 0xFFFFFFEF) == 0xAB) {
        __int16 v5 = 128;
      }
      else {
        __int16 v5 = 0x8000;
      }
      if (a1 == 191) {
        __int16 v5 = 8;
      }
      if (a1 == 161) {
        __int16 v6 = 8;
      }
      else {
        __int16 v6 = v5;
      }
      if (a1 <= 0xC0) {
        unsigned __int16 v7 = v6;
      }
      else {
        unsigned __int16 v7 = 1;
      }
      if (a1 == 160) {
        return 64;
      }
      else {
        return v7;
      }
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 0xAu:
      return v1;
    case 5u:
      if (a1 - 712 > 0x17 || ((1 << (a1 + 56)) & 0x800011) == 0) {
        return 1;
      }
      return 0x8000;
    case 6u:
      if (a1 - 847 < 0x14 && ((0xFE001u >> (a1 - 79)) & 1) != 0) {
        return 64;
      }
      if (a1 == 894) {
        unsigned __int16 v9 = 0x8000;
      }
      else {
        unsigned __int16 v9 = 1;
      }
      if (a1 >= 0x370) {
        return v9;
      }
      else {
        return 4;
      }
    case 9u:
      if (a1 - 1155 >= 7) {
        return 1;
      }
      else {
        return 4;
      }
    case 0xBu:
      if ((unsigned __int16)(a1 - 1480) < 0xFFC1u) {
        return 1;
      }
      if (a1 - 1425 < 0x2D) {
        return 4;
      }
      LOWORD(v3) = a1 - 1471;
      if (a1 - 1471 >= 9) {
        return 0x8000;
      }
      uint64_t v3 = (__int16)v3;
      uint64_t v4 = (unsigned __int16 *)&unk_1E149DE64;
      return v4[v3];
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      return 0x8000;
    case 0x40u:
      if (a1 >> 1 == 4108) {
        return 128;
      }
      else {
        return (unsigned __int16)0x8000;
      }
    default:
      if ((unsigned __int16)((unsigned __int16)(a1 - 11904) >> 4) > 0x764u)
      {
        if ((((_WORD)a1 + 1792) & 0xFE00) != 0) {
          unsigned __int16 v13 = 0x8000;
        }
        else {
          unsigned __int16 v13 = 2;
        }
        if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) >= 0x2BBu) {
          return v13;
        }
        else {
          return 2;
        }
      }
      else
      {
        if ((a1 & 0xFF00) == 0x3000)
        {
          if (a1 >> 6 <= 0xC0)
          {
            uint64_t v3 = (a1 & 0x1F) - 1;
            if (v3 < 0x1F)
            {
              uint64_t v4 = (unsigned __int16 *)&unk_1E149DE76;
              return v4[v3];
            }
          }
          return 0x8000;
        }
        if ((a1 & 0xFFF0) == 0x31F0) {
          return 0x8000;
        }
        unsigned __int16 v1 = 1;
        if ((a1 & 0xFFF8) == 0x3248 || (a1 & 0xFFC0) == 0x4DC0) {
          return v1;
        }
        if (a1 == 40981) {
          return (unsigned __int16)0x8000;
        }
        else {
          return 2;
        }
      }
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__optional_copy_assign_base<WTF::TextBreakIterator,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 48) = -1;
    uint64_t v4 = *(unsigned int *)(a2 + 48);
    if (v4 != -1)
    {
      ((void (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7D928[v4])(v8, a1 + 8, a2 + 8);
      *(_DWORD *)(a1 + 48) = v4;
    }
    uint64_t v5 = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(void *)(a1 + 56) = v5;
    uint64_t v6 = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = 0;
    *(void *)(a1 + 72) = v6;
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

void sub_1E147A2B8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 48);
  if (v16 == -1)
  {
    *(_DWORD *)(v13 + 48) = -1;
    if (!*(unsigned char *)(v13 + 80)) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t))off_1F3C7D908[v16])(&a12, v14);
    *(_DWORD *)(v13 + 48) = -1;
    if (!*(unsigned char *)(v13 + 80)) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  unsigned __int16 v17 = *(WTF::StringImpl **)(v13 + 72);
  *(void *)(v13 + 72) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, a2);
      uint64_t v18 = *(unsigned int *)(v13 + 48);
      if (v18 != -1)
      {
        ((void (*)(char *, uint64_t))off_1F3C7D908[v18])(&a13, v14);
        *(_DWORD *)(v13 + 48) = -1;
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  *(_DWORD *)(v13 + 48) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (!*(unsigned char *)(result + 80)) {
      return result;
    }
    uint64_t v4 = (StringImpl *)(result + 8);
    uint64_t v5 = *(unsigned int *)(result + 48);
    uint64_t v6 = *(unsigned int *)(a2 + 48);
    if (v5 == -1)
    {
      if (v6 == -1) {
        goto LABEL_19;
      }
    }
    else if (v6 == -1)
    {
      ((void (*)(char *, StringImpl *))off_1F3C7D908[v5])(&v14, v4);
      *(_DWORD *)(v3 + 48) = -1;
      goto LABEL_19;
    }
    uint64_t v13 = result + 8;
    ((void (*)(uint64_t *))off_1F3C7D968[v6])(&v13);
LABEL_19:
    uint64_t v11 = *(void *)(a2 + 56);
    *(unsigned char *)(v3 + 64) = *(unsigned char *)(a2 + 64);
    *(void *)(v3 + 56) = v11;
    uint64_t v12 = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = 0;
    __n128 result = *(void *)(v3 + 72);
    *(void *)(v3 + 72) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  if (*(unsigned char *)(result + 80))
  {
    __n128 result = *(void *)(result + 72);
    *(void *)(v3 + 72) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        __n128 result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
        uint64_t v7 = *(unsigned int *)(v3 + 48);
        if (v7 == -1) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
    uint64_t v7 = *(unsigned int *)(v3 + 48);
    if (v7 == -1)
    {
LABEL_12:
      *(_DWORD *)(v3 + 48) = -1;
      *(unsigned char *)(v3 + 80) = 0;
      return result;
    }
LABEL_11:
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1F3C7D908[v7])(&v15, v3 + 8);
    goto LABEL_12;
  }
  *(unsigned char *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = -1;
  uint64_t v8 = *(unsigned int *)(a2 + 48);
  if (v8 != -1)
  {
    __n128 result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7D928[v8])(v16, result + 8, a2 + 8);
    *(_DWORD *)(v3 + 48) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 56);
  *(unsigned char *)(v3 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(v3 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(v3 + 72) = v10;
  *(unsigned char *)(v3 + 80) = 1;
  return result;
}

void sub_1E147A54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 48);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7D908[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 48) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 40);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1F3C7D908[v5])(&v9, v4);
LABEL_7:
    uint64_t v8 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(v4 + 40) = 0;
    return result;
  }
  __n128 result = *a2;
  if (*a2) {
    __n128 result = ubrk_close();
  }
  uint64_t v7 = *(void *)a3;
  *(void *)a3 = 0;
  *a2 = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 40);
  if (v5 == -1)
  {
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    uint64_t v9 = *(unsigned int *)(a3 + 32);
    if (v9 != -1)
    {
      __n128 result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))off_1F3C7D938[v9])(v13, v4, a3);
      *(_DWORD *)(v4 + 32) = v9;
    }
    *(_DWORD *)(v4 + 40) = 1;
    return result;
  }
  if (v5 != 1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1F3C7D908[v5])(&v12, v4);
    goto LABEL_8;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 32);
  uint64_t v8 = *(unsigned int *)(a3 + 32);
  if (v7 != -1)
  {
    if (v8 == -1)
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1F3C7D918[v7])(&v11, a2);
      *(_DWORD *)(a2 + 32) = -1;
      return result;
    }
LABEL_12:
    uint64_t v10 = a2;
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1F3C7D978[v8])(&v10, a2, a3);
  }
  if (v8 != -1) {
    goto LABEL_12;
  }
  return result;
}

void sub_1E147A758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 32);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C7D918[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 32) = -1;
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_1F3C7D918[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v10;
    __n128 result = *(__n128 *)(a3 + 1);
    *(void *)(v4 + ++*(_DWORD *)(this + 24) = a3[3];
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = *(const void **)a2;
  *(void *)a2 = v7;
  if (v8) {
    CFRelease(v8);
  }
  __n128 result = *(__n128 *)(a3 + 1);
  *(void *)(a2 + ++*(_DWORD *)(this + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1F3C7D918[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v10;
    __n128 result = *(__n128 *)(a3 + 1);
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = *(const void **)a2;
  *(void *)a2 = v7;
  if (v8) {
    CFRelease(v8);
  }
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, unsigned int **a2)
{
  __n128 result = *a2;
  *a2 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void sub_1E147AC6C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E147B010(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  uint64_t v22 = *(WTF::StringImpl **)(v20 - 48);
  *(void *)(v20 - 48) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, a2);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
    {
      WTF::StringImpl::destroy(a20, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<WebCore::AlternativeTextUIController>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (const void **)*((void *)this + 1);
      do
      {
        uint64_t v6 = *v5;
        if (*v5 != (const void *)-1)
        {
          WTF::StringImpl *v5 = 0;
          if (v6) {
            CFRelease(v6);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = (const void **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (const void *)-1)
        {
          uint64_t v10 = *v9;
          *uint64_t v9 = 0;
          if (v10) {
            CFRelease(v10);
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

void WebViewGroup::getOrCreate(WebViewGroup *this@<X0>, const WTF::String *a2@<X1>, WebViewGroup **a3@<X8>)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    {
      webViewGroups(void)::webViewGroups = 0;
    }
    uint64_t v19 = 0;
    WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&webViewGroups(void)::webViewGroups, (StringImpl *)this, (const WTF::StringImpl *)&v19, (uint64_t)v20);
    uint64_t v8 = v20[0];
    uint64_t v9 = *(void *)(v20[0] + 8);
    if (v9)
    {
      if (!*(void *)(v9 + 32))
      {
        uint64_t v15 = *(WTF::StringImpl **)(v9 + 24);
        if (!v15 || !*((_DWORD *)v15 + 1))
        {
          uint64_t v16 = *(_DWORD **)a2;
          if (*(void *)a2)
          {
            if (v16[1])
            {
              *v16 += 2;
              *(void *)(v9 + ++*(_DWORD *)(this + 24) = v16;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2) {
                  WTF::StringImpl::destroy(v15, v7);
                }
                else {
                  *(_DWORD *)v15 -= 2;
                }
              }
            }
          }
        }
      }
      uint64_t v10 = *(WebViewGroup **)(v8 + 8);
      ++*(_DWORD *)v10;
      *a3 = v10;
    }
    else
    {
      char v12 = (WebViewGroup *)WTF::fastMalloc((WTF *)0x38);
      WebViewGroup::WebViewGroup(v12, (const WTF::String *)this, a2);
      *a3 = v12;
      ++*(_DWORD *)v12;
      uint64_t v14 = *(WebViewGroup **)(v8 + 8);
      *(void *)(v8 + 8) = v12;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebViewGroup::~WebViewGroup(v14, v13);
          WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
  }
  else
  {
    char v11 = (WebViewGroup *)WTF::fastMalloc((WTF *)0x38);
    v20[0] = 0;
    WebViewGroup::WebViewGroup(v11, (const WTF::String *)v20, a2);
    *a3 = v11;
  }
}

void sub_1E147B830(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E147B844(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebViewGroup *WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    uint64_t v7 = *a1;
    if (!*a1)
    {
      int v8 = 0;
      uint64_t v9 = *(WTF::StringImpl **)a2;
      unsigned int v10 = *(_DWORD *)(*(void *)a2 + 16);
      if (v10 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v11 = WTF::StringImpl::hashSlowCase(v9);
      goto LABEL_7;
    }
  }
  int v8 = *(_DWORD *)(v7 - 8);
  uint64_t v9 = *(WTF::StringImpl **)a2;
  unsigned int v10 = *(_DWORD *)(*(void *)a2 + 16);
  if (v10 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v11 = v10 >> 8;
LABEL_7:
  char v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v8;
    uint64_t v15 = (WebViewGroup *)(v7 + 16 * (v11 & v8));
    uint64_t v16 = *(WTF **)v15;
    if (*(void *)v15 == -1)
    {
      char v12 = (WebViewGroup *)(v7 + 16 * v14);
      goto LABEL_9;
    }
    if (!v16)
    {
      if (v12)
      {
        *(void *)char v12 = 0;
        *((void *)v12 + objc_destroyWeak(this + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v15 = v12;
      }
      uint64_t v20 = *(WTF::StringImpl **)a2;
      if (*(void *)a2) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)uint64_t v15 = v20;
      __n128 result = (WebViewGroup *)*((void *)v15 + 1);
      *((void *)v15 + objc_destroyWeak(this + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebViewGroup::~WebViewGroup(result, a2);
          __n128 result = (WebViewGroup *)WTF::fastFree(v27, v28);
          uint64_t v23 = *a1;
          if (*a1)
          {
LABEL_26:
            ++*(_DWORD *)(v23 - 12);
            uint64_t v24 = *a1;
            if (*a1) {
              goto LABEL_27;
            }
            goto LABEL_34;
          }
LABEL_33:
          *(_DWORD *)(v23 - 12) = 1;
          uint64_t v24 = *a1;
          if (*a1)
          {
LABEL_27:
            uint64_t v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
            unint64_t v26 = *(unsigned int *)(v24 - 4);
            if (v26 <= 0x400) {
              goto LABEL_28;
            }
            goto LABEL_35;
          }
LABEL_34:
          uint64_t v25 = *(unsigned int *)(v24 - 16);
          unint64_t v26 = *(unsigned int *)(v24 - 4);
          if (v26 <= 0x400)
          {
LABEL_28:
            if (3 * v26 > 4 * v25)
            {
LABEL_38:
              uint64_t v22 = v24 + 16 * v26;
              char v21 = 1;
              goto LABEL_39;
            }
            if (!v26)
            {
              __n128 result = (WebViewGroup *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, (WTF::StringImpl **)v15);
              uint64_t v15 = result;
              uint64_t v24 = *a1;
              if (!*a1)
              {
LABEL_31:
                unint64_t v26 = 0;
                goto LABEL_38;
              }
LABEL_37:
              unint64_t v26 = *(unsigned int *)(v24 - 4);
              goto LABEL_38;
            }
LABEL_36:
            __n128 result = (WebViewGroup *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), (WTF::StringImpl **)v15);
            uint64_t v15 = result;
            uint64_t v24 = *a1;
            if (!*a1) {
              goto LABEL_31;
            }
            goto LABEL_37;
          }
LABEL_35:
          if (v26 > 2 * v25) {
            goto LABEL_38;
          }
          goto LABEL_36;
        }
        --*(_DWORD *)result;
      }
      uint64_t v23 = *a1;
      if (*a1) {
        goto LABEL_26;
      }
      goto LABEL_33;
    }
    __n128 result = (WebViewGroup *)WTF::equal(v16, *(const WTF::StringImpl **)a2, a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v11 = i + v14;
  }
  uint64_t v18 = *a1;
  if (*a1) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v21 = 0;
  uint64_t v22 = v18 + 16 * v19;
LABEL_39:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v22;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this - 16) = v21;
  return result;
}

void WebViewGroup::WebViewGroup(WebViewGroup *this, const WTF::String *a2, const WTF::String *a3)
{
  *(_DWORD *)this = 1;
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *((void *)this + objc_destroyWeak(this + 1) = v4;
  *((void *)this + 2) = 0;
  uint64_t v5 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v5 += 2;
  }
  *((void *)this + 3) = v5;
  *((void *)this + 4) = 0;
  WebCore::UserContentController::create((WebCore::UserContentController *)this);
  WebVisitedLinkStore::create((WebVisitedLinkStore **)this + 6);
}

void sub_1E147BB24(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  WTF::Ref<WebCore::UserContentController,WTF::RawPtrTraits<WebCore::UserContentController>,WTF::DefaultRefDerefTraits<WebCore::UserContentController>>::~Ref(v3);
  uint64_t v6 = (_DWORD *)v1[4];
  v1[4] = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t v7 = (WTF::StringImpl *)v1[3];
  void v1[3] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v1[2];
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), v5);
  }
  uint64_t v9 = (WTF::StringImpl *)v1[1];
  v1[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v5);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD **WTF::Ref<WebCore::UserContentController,WTF::RawPtrTraits<WebCore::UserContentController>,WTF::DefaultRefDerefTraits<WebCore::UserContentController>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (v2[2] != 1)
  {
    --v2[2];
    return a1;
  }
  (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  return a1;
}

void WebViewGroup::~WebViewGroup(WebViewGroup *this, StringImpl *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      uint64_t v4 = (_DWORD *)*((void *)this + 5);
      *((void *)this + 5) = 0;
      if (!v4) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
    --v3[2];
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_5:
  if (v4[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[2];
  }
LABEL_10:
  uint64_t v5 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      uint64_t v6 = (WTF::StringImpl *)*((void *)this + 3);
      *((void *)this + 3) = 0;
      if (!v6) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    --v5[2];
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v6)
  {
LABEL_18:
    uint64_t v7 = *((void *)this + 2);
    if (!v7) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_16:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v6, a2);
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
LABEL_19:
  }
    WTF::fastFree((WTF *)(v7 - 16), a2);
LABEL_20:
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t *WebViewGroup::removeWebView(WebViewGroup *this, WebView *a2)
{
  uint64_t v4 = *((void *)this + 2);
  __n128 result = (uint64_t *)((char *)this + 16);
  uint64_t v3 = v4;
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v3 - 8);
    unint64_t v6 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
    unsigned int v10 = *(WebView **)(v3 + 8 * v9);
    if (v10 == a2)
    {
LABEL_6:
      if (v9 == *(_DWORD *)(v3 - 4)) {
        return result;
      }
      *(void *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      if (*result)
      {
        --*(_DWORD *)(*result - 12);
        uint64_t v12 = *result;
        if (!*result) {
          return result;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        uint64_t v12 = *result;
        if (!*result) {
          return result;
        }
      }
      unsigned int v13 = 6 * *(_DWORD *)(v12 - 12);
      unsigned int v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9) {
        return WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(result, v14 >> 1, 0);
      }
    }
    else
    {
      int v11 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v11) & v5;
        unsigned int v10 = *(WebView **)(v3 + 8 * v9);
        ++v11;
        if (v10 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

WebKit::WebStorageNamespaceProvider *WebViewGroup::storageNamespaceProvider(WebViewGroup *this)
{
  __n128 result = (WebKit::WebStorageNamespaceProvider *)*((void *)this + 4);
  if (!result)
  {
    uint64_t v3 = (unsigned int **)WTF::fastMalloc((WTF *)0x48);
    __n128 result = WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(v3, (unsigned int **)this + 3);
    uint64_t v4 = (_DWORD *)*((void *)this + 4);
    *((void *)this + 4) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        return (WebKit::WebStorageNamespaceProvider *)*((void *)this + 4);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      unsigned int v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      unsigned int v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1)
          {
            int v18 = *(_DWORD *)(v17 - 8);
            unsigned int v19 = *((_DWORD *)v14 + 4);
            if (v19 >= 0x100) {
              goto LABEL_18;
            }
LABEL_23:
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            int v18 = 0;
            unsigned int v19 = *((_DWORD *)v14 + 4);
            if (v19 < 0x100) {
              goto LABEL_23;
            }
LABEL_18:
            unsigned int v20 = v19 >> 8;
          }
          int v24 = 0;
          do
          {
            uint64_t v25 = v20 & v18;
            unsigned int v20 = ++v24 + v25;
          }
          while (*(void *)(v17 + 16 * v25));
          uint64_t v26 = v17 + 16 * v25;
          uint64_t v27 = *(WebViewGroup **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 != 1)
            {
              --*(_DWORD *)v27;
              goto LABEL_29;
            }
            WebViewGroup::~WebViewGroup(v27, v10);
            WTF::fastFree(v28, v29);
            char v30 = *(WTF::StringImpl **)v26;
            *(void *)uint64_t v26 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2) {
                WTF::StringImpl::destroy(v30, v10);
              }
              else {
                *(_DWORD *)v30 -= 2;
              }
            }
          }
          else
          {
LABEL_29:
            *(void *)uint64_t v26 = 0;
          }
          CGRect v31 = *v13;
          StringImpl *v13 = 0;
          *(void *)uint64_t v26 = v31;
          uint64_t v32 = v6 + 16 * v11;
          uint64_t v33 = *(void *)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          *(void *)(v26 + 8) = v33;
          uint64_t v34 = *(WebViewGroup **)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 != 1)
            {
              --*(_DWORD *)v34;
              goto LABEL_38;
            }
            WebViewGroup::~WebViewGroup(v34, v10);
            WTF::fastFree(v36, v37);
            uint64_t v35 = *v13;
            StringImpl *v13 = 0;
            if (v35)
            {
LABEL_41:
              if (*(_DWORD *)v35 == 2) {
                WTF::StringImpl::destroy(v35, v10);
              }
              else {
                *(_DWORD *)v35 -= 2;
              }
            }
          }
          else
          {
LABEL_38:
            uint64_t v35 = *v13;
            StringImpl *v13 = 0;
            if (v35) {
              goto LABEL_41;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
          goto LABEL_9;
        }
        uint64_t v15 = v6 + 16 * v11;
        uint64_t v16 = *(WebViewGroup **)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebViewGroup::~WebViewGroup(v16, v10);
            WTF::fastFree(v21, v22);
            uint64_t v23 = *v13;
            StringImpl *v13 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v10);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
            }
            goto LABEL_9;
          }
          --*(_DWORD *)v16;
        }
        StringImpl *v13 = 0;
      }
LABEL_9:
      if (++v11 == v7) {
        goto LABEL_44;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void sub_1E14813B8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E148150C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1481600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14817F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1481808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1481928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E148193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1481A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1481A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1481C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v7 - 72));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1481C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14822F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E1482334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E148235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E148249C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14825D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E14825EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E14826D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1482878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v4 = *(_DWORD **)(v2 - 24);
  *(void *)(v2 - ++*(_DWORD *)(this + 24) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14828E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1483284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_1E1483420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1483578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1483594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1483710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1483724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1483738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1483754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1483768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1483B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v4 = *(_DWORD **)(v2 - 56);
  *(void *)(v2 - 56) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v5);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1483BCC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v19 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1483C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v6 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1483C34(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1483FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v4 = *(_DWORD **)(v2 - 56);
  *(void *)(v2 - 56) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v5);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1484040(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v12 - 80));
  _Unwind_Resume(a1);
}

void sub_1E148405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v6 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1484078(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_1E1484244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1E14843B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1E14845FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_1E1484624(_Unwind_Exception *a1)
{
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1E1484638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v8 - 136));
  _Unwind_Resume(a1);
}

void sub_1E1484654(_Unwind_Exception *a1)
{
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1E1484668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_1E1484684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E1484698(_Unwind_Exception *a1)
{
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1E1484974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va2);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)(v6 - 72));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E1484A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E1484C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v13 - 40));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1E1484E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v13 - 40));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1E1485014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E1485210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E148522C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a13 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1E1485224);
}

void sub_1E14853D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E14855EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E1485608(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a13 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1E1485600);
}

void WebVisitedLinkStore::create(WebVisitedLinkStore **a1@<X8>)
{
  uint64_t v3 = (WebVisitedLinkStore *)WTF::fastMalloc((WTF *)0x38);
  WebVisitedLinkStore::WebVisitedLinkStore(v3);
  *a1 = v3;
}

void sub_1E1485670(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebVisitedLinkStore::WebVisitedLinkStore(WebVisitedLinkStore *this)
{
  uint64_t v2 = WebCore::VisitedLinkStore::VisitedLinkStore(this);
  *(void *)(v2 + 32) = 0;
  uint64_t v3 = (uint64_t *)(v2 + 32);
  *(void *)uint64_t v2 = &unk_1F3C7D9B0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 0;
  if ((_MergedGlobals_27 & 1) == 0)
  {
    qword_1EB3A9898 = 0;
    _MergedGlobals_27 = 1;
  }
  uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v5 = 1;
  *(void *)(v5 + 8) = this;
  uint64_t v6 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = v5;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
    uint64_t v5 = *v3;
  }
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  uint64_t v7 = qword_1EB3A9898;
  if (qword_1EB3A9898
    || (WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(8u),
        (uint64_t v7 = qword_1EB3A9898) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(v5 + 8);
  unint64_t v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    uint64_t v17 = (uint64_t *)(v7 + 8 * (v14 & v8));
    uint64_t v18 = *v17;
    if (*v17 == -1)
    {
      uint64_t v9 = (uint64_t *)(v7 + 8 * v16);
      goto LABEL_12;
    }
    if (!v18)
    {
      if (v9)
      {
        *uint64_t v9 = 0;
        --*(_DWORD *)(qword_1EB3A9898 - 16);
        *uint64_t v9 = v5;
        uint64_t v19 = qword_1EB3A9898;
        if (qword_1EB3A9898) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t *v17 = v5;
        uint64_t v19 = qword_1EB3A9898;
        if (qword_1EB3A9898)
        {
LABEL_21:
          ++*(_DWORD *)(v19 - 12);
          uint64_t v20 = qword_1EB3A9898;
          if (qword_1EB3A9898) {
            goto LABEL_22;
          }
          goto LABEL_28;
        }
      }
      *(_DWORD *)(v19 - 12) = 1;
      uint64_t v20 = qword_1EB3A9898;
      if (qword_1EB3A9898)
      {
LABEL_22:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_23;
        }
        goto LABEL_29;
      }
LABEL_28:
      uint64_t v21 = *(unsigned int *)(v20 - 16);
      unint64_t v22 = *(unsigned int *)(v20 - 4);
      if (v22 <= 0x400)
      {
LABEL_23:
        if (3 * v22 > 4 * v21) {
          return;
        }
        if (!v22)
        {
          unsigned int v23 = 8;
LABEL_31:
          WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(v23);
          return;
        }
LABEL_30:
        unsigned int v23 = v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22));
        goto LABEL_31;
      }
LABEL_29:
      if (v22 > 2 * v21) {
        return;
      }
      goto LABEL_30;
    }
    if (*(void *)(v18 + 8) == v10) {
      break;
    }
LABEL_12:
    unsigned int v14 = i + v16;
  }
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5);
      WTF::fastFree((WTF *)v5, v9);
    }
  }
}

void sub_1E1485910(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *((void *)v2 + 5);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, a2);
  WebCore::VisitedLinkStore::~VisitedLinkStore(v2);
  _Unwind_Resume(a1);
}

void WebVisitedLinkStore::~WebVisitedLinkStore(WebVisitedLinkStore *this, void *a2)
{
  if (_MergedGlobals_27)
  {
    uint64_t v3 = qword_1EB3A9898;
    if (qword_1EB3A9898)
    {
      int v4 = *(_DWORD *)(qword_1EB3A9898 - 8);
      unint64_t v5 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
      unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
      for (int i = 1; ; ++i)
      {
        uint64_t v10 = v8;
        uint64_t v11 = *(void *)(qword_1EB3A9898 + 8 * v8);
        if (v11 != -1)
        {
          if (!v11) {
            goto LABEL_21;
          }
          if (*(WebVisitedLinkStore **)(v11 + 8) == this) {
            break;
          }
        }
        unsigned int v8 = (v8 + i) & v4;
      }
      if (v8 != *(_DWORD *)(qword_1EB3A9898 - 4))
      {
        *(void *)(qword_1EB3A9898 + 8 * v8) = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v11);
          uint64_t v21 = v8;
          uint64_t v22 = v3;
          WTF::fastFree((WTF *)v11, a2);
          uint64_t v10 = v21;
          uint64_t v3 = v22;
        }
        *(void *)(v3 + 8 * v10) = -1;
        uint64_t v12 = qword_1EB3A9898;
        ++*(_DWORD *)(qword_1EB3A9898 - 16);
        if (v12)
        {
          --*(_DWORD *)(v12 - 12);
          uint64_t v13 = qword_1EB3A9898;
          if (!qword_1EB3A9898) {
            goto LABEL_21;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          uint64_t v13 = qword_1EB3A9898;
          if (!qword_1EB3A9898) {
            goto LABEL_21;
          }
        }
        unsigned int v14 = 6 * *(_DWORD *)(v13 - 12);
        unsigned int v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9) {
          WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(v15 >> 1);
        }
      }
    }
LABEL_21:
    uint64_t v17 = *((void *)this + 5);
    if (!v17) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  qword_1EB3A9898 = 0;
  _MergedGlobals_27 = 1;
  uint64_t v17 = *((void *)this + 5);
  if (v17) {
LABEL_22:
  }
    WTF::fastFree((WTF *)(v17 - 16), a2);
LABEL_23:
  uint64_t v18 = *((void *)this + 4);
  if (v18)
  {
    *(void *)(v18 + 8) = 0;
    uint64_t v19 = (unsigned int *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
      uint64_t v20 = this;
    }
    else
    {
      uint64_t v20 = this;
    }
  }
  else
  {
    *((void *)this + 4) = 0;
    uint64_t v20 = this;
  }
  WebCore::VisitedLinkStore::~VisitedLinkStore(v20);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebVisitedLinkStore::~WebVisitedLinkStore(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_1E1485B78(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *((void *)v2 + 5);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((void *)v2 + 4, a2);
  WebCore::VisitedLinkStore::~VisitedLinkStore(v2);
  _Unwind_Resume(a1);
}

uint64_t WebVisitedLinkStore::removeAllVisitedLinks(WebVisitedLinkStore *this, void *a2)
{
  if (_MergedGlobals_27)
  {
    if (qword_1EB3A9898 && *(_DWORD *)(qword_1EB3A9898 - 12))
    {
      uint64_t v2 = *(unsigned int *)(qword_1EB3A9898 - 4);
      if (v2)
      {
        uint64_t v3 = 8 * v2;
        for (int i = (uint64_t *)qword_1EB3A9898; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v3 -= 8;
          if (!v3) {
            return result;
          }
        }
      }
      else
      {
        int i = (uint64_t *)qword_1EB3A9898;
      }
      uint64_t v5 = qword_1EB3A9898 + 8 * v2;
      if (i != (uint64_t *)v5)
      {
        uint64_t v6 = *i;
LABEL_12:
        uint64_t v7 = *(void *)(v6 + 8);
        int v8 = *(_DWORD *)(v7 + 8) + 1;
        *(_DWORD *)(v7 + 8) = v8;
        *(unsigned char *)(v7 + 48) = 0;
        uint64_t v9 = *(void *)(v7 + 40);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          *(void *)(v7 + 40) = 0;
          WTF::fastFree((WTF *)(v9 - 16), a2);
          uint64_t result = WebCore::VisitedLinkStore::invalidateStylesForAllLinks((WebCore::VisitedLinkStore *)v7);
          int v8 = *(_DWORD *)(v7 + 8);
        }
        int v11 = v8 - 1;
        if (v11) {
          *(_DWORD *)(v7 + 8) = v11;
        }
        else {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        while (++i != (uint64_t *)v5)
        {
          uint64_t v6 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v5) {
              goto LABEL_12;
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    qword_1EB3A9898 = 0;
    _MergedGlobals_27 = 1;
  }
  return result;
}

void sub_1E1485D14(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    _Unwind_Resume(exception_object);
  }
  --v1[2];
  _Unwind_Resume(exception_object);
}

WTF *WebVisitedLinkStore::addVisitedLink(WTF *this, __CFString *a2)
{
  if (s_shouldTrackVisitedLinks)
  {
    uint64_t v3 = (uint64_t *)this;
    NSUInteger v4 = [(__CFString *)a2 length];
    this = (WTF *)CFStringGetCharactersPtr(a2);
    if (this)
    {
      v10[0] = WebCore::computeSharedStringHash();
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((int *)&v7, v3 + 5, v10);
      return (WTF *)WebCore::VisitedLinkStore::invalidateStylesForLink((WebCore::VisitedLinkStore *)v3);
    }
    else
    {
      uint64_t v7 = (WTF *)v9;
      LODWORD(v8) = 512;
      HIDWORD(v8) = v4;
      uint64_t v5 = (WTF *)v9;
      if (v4 >= 0x201)
      {
        if (v4 >> 31)
        {
          __break(0xC471u);
          return this;
        }
        uint64_t v5 = (WTF *)WTF::fastMalloc((WTF *)(2 * v4));
        LODWORD(v8) = v4;
        uint64_t v7 = v5;
      }
      -[__CFString getCharacters:](a2, "getCharacters:", v5, v7, v8);
      int v11 = WebCore::computeSharedStringHash();
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v10, v3 + 5, &v11);
      WebCore::VisitedLinkStore::invalidateStylesForLink((WebCore::VisitedLinkStore *)v3);
      this = v7;
      if (v9 != (unsigned char *)v7)
      {
        if (v7)
        {
          uint64_t v7 = 0;
          LODWORD(v8) = 0;
          return (WTF *)WTF::fastFree(this, v6);
        }
      }
    }
  }
  return this;
}

void sub_1E1485E9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (v10 != a9)
  {
    if (a9) {
      WTF::fastFree(a9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebVisitedLinkStore::removeVisitedLink(WebVisitedLinkStore *this, NSString *a2)
{
  MEMORY[0x1E4E442D0](&v14, a2);
  unsigned int v5 = WebCore::computeSharedStringHash((WebCore *)&v14, v3);
  uint64_t v6 = v14;
  unsigned int v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      uint64_t v7 = (uint64_t *)((char *)this + 40);
      uint64_t v8 = *((void *)this + 5);
      if (!v8) {
        return WebCore::VisitedLinkStore::invalidateStylesForLink(this);
      }
      goto LABEL_7;
    }
    *(_DWORD *)v6 -= 2;
  }
  uint64_t v7 = (uint64_t *)((char *)this + 40);
  uint64_t v8 = *((void *)this + 5);
  if (!v8) {
    return WebCore::VisitedLinkStore::invalidateStylesForLink(this);
  }
LABEL_7:
  unsigned int v9 = *(_DWORD *)(v8 - 8);
  uint64_t v10 = v9 & v5;
  int v11 = *(_DWORD *)(v8 + 4 * v10);
  if (v11 == v5)
  {
LABEL_11:
    if (v10 != *(_DWORD *)(v8 - 4)) {
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(v7, (_DWORD *)(v8 + 4 * v10));
    }
  }
  else
  {
    int v12 = 1;
    while (v11)
    {
      uint64_t v10 = (v10 + v12) & v9;
      int v11 = *(_DWORD *)(v8 + 4 * v10);
      ++v12;
      if (v11 == v5) {
        goto LABEL_11;
      }
    }
  }
  return WebCore::VisitedLinkStore::invalidateStylesForLink(this);
}

void sub_1E1485FA4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebVisitedLinkStore::isLinkVisited(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(a1 + 48) = 1;
    if ((*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 48) + 16) + 1368))(*(void *)(*(void *)(a2 + 48) + 16)))
    {
      if ([0 historyDelegate])
      {
        id Weak = 0;
        populateVisitedLinksFunc = (void (*)(void))qword_1EAD7FFF8;
        if (!qword_1EAD7FFF8) {
          goto LABEL_2;
        }
        goto LABEL_21;
      }
    }
    else
    {
      id Weak = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(a2 + 48) + 16) + 16));
      if ([(WebView *)Weak historyDelegate])
      {
        if (Weak)
        {
          populateVisitedLinksFunc = (void (*)(void))Weak->_private->historyDelegateImplementations.populateVisitedLinksFunc;
          if (!populateVisitedLinksFunc) {
            goto LABEL_2;
          }
        }
        else
        {
          populateVisitedLinksFunc = (void (*)(void))qword_1EAD7FFF8;
          if (!qword_1EAD7FFF8) {
            goto LABEL_2;
          }
        }
LABEL_21:
        CallHistoryDelegate(populateVisitedLinksFunc, Weak, (objc_selector *)sel_populateVisitedLinksForWebView_);
        goto LABEL_2;
      }
    }
    [+[WebHistory optionalSharedHistory] _addVisitedLinksToVisitedLinkStore:a1];
  }
LABEL_2:
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    return 0;
  }
  int v6 = *(_DWORD *)(v5 - 8);
  unsigned int v7 = v6 & a3;
  int v8 = *(_DWORD *)(v5 + 4 * (v6 & a3));
  if (v8 == a3) {
    return 1;
  }
  int v13 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v13) & v6;
    int v8 = *(_DWORD *)(v5 + 4 * v7);
    ++v13;
  }
  while (v8 != a3);
  return result;
}

uint64_t *WebVisitedLinkStore::addVisitedLink(uint64_t *this, WebCore::Page *a2, int a3)
{
  if (s_shouldTrackVisitedLinks)
  {
    uint64_t v3 = (WebCore::VisitedLinkStore *)this;
    int v5 = a3;
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v4, this + 5, &v5);
    return (uint64_t *)WebCore::VisitedLinkStore::invalidateStylesForLink(v3);
  }
  return this;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB3A9898;
  if (qword_1EB3A9898)
  {
    int v3 = *(_DWORD *)(qword_1EB3A9898 - 4);
    int v4 = *(_DWORD *)(qword_1EB3A9898 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  BOOL result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  qword_1EB3A9898 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB3A9898 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      int v8 = (unsigned int **)(v2 + 8 * i);
      unsigned int v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1EB3A9898) {
            int v10 = *(_DWORD *)(qword_1EB3A9898 - 8);
          }
          else {
            int v10 = 0;
          }
          unint64_t v11 = ~(*((void *)v9 + 1) << 32) + *((void *)v9 + 1);
          unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          unsigned int v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
          int v15 = 1;
          do
          {
            unsigned int v16 = v14;
            uint64_t v17 = *(void *)(qword_1EB3A9898 + 8 * v14);
            unsigned int v14 = (v14 + v15++) & v10;
          }
          while (v17);
          uint64_t v18 = (unsigned int **)(qword_1EB3A9898 + 8 * v16);
          void *v18 = 0;
          uint64_t v19 = *v8;
          *int v8 = 0;
          void *v18 = v19;
          uint64_t v20 = *v8;
          *int v8 = 0;
          if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v6);
          }
        }
        else
        {
          *int v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = result;
  int v3 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v4 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v4 - 12) - 1;
  }
  *(_DWORD *)(v4 - 12) = v3;
  uint64_t v5 = *result;
  if (*result)
  {
    int v6 = *(_DWORD *)(v5 - 12);
    unint64_t v7 = *(unsigned int *)(v5 - 4);
    if (6 * v6 < v7 && v7 >= 9)
    {
      uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(4 * (v7 >> 1) + 16));
      uint64_t v11 = 0;
      *uint64_t v2 = v9 + 16;
      *(_DWORD *)(v9 + 12) = v7 >> 1;
      *(_DWORD *)(*v2 - 8) = (v7 >> 1) - 1;
      *(_DWORD *)(*v2 - ++*(_DWORD *)(this - 16) = 0;
      *(_DWORD *)(*v2 - 12) = v6;
      do
      {
        int v12 = *(_DWORD *)(v5 + 4 * v11);
        if ((v12 + 1) >= 2)
        {
          uint64_t v13 = *v2;
          if (*v2) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          int v15 = 0;
          int v16 = *(_DWORD *)(v5 + 4 * v11);
          do
          {
            uint64_t v17 = v16 & v14;
            int v16 = ++v15 + v17;
          }
          while (*(_DWORD *)(v13 + 4 * v17));
          *(_DWORD *)(v13 + 4 * v17) = v12;
        }
        ++v11;
      }
      while (v11 != v7);
      return (uint64_t *)WTF::fastFree((WTF *)(v5 - 16), v10);
    }
  }
  return result;
}

int *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(int *result, uint64_t *a2, int *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
    int v9 = *a3;
    unsigned int v10 = *a3 & v8;
    uint64_t v11 = (int *)(v6 + 4 * v10);
    int v12 = *v11;
    if (*v11) {
      goto LABEL_4;
    }
LABEL_16:
    *uint64_t v11 = v9;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v16 = *a2;
      if (*a2) {
        goto LABEL_18;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v16 = *a2;
      if (*a2)
      {
LABEL_18:
        uint64_t v17 = (*(_DWORD *)(v16 - 16) + *(_DWORD *)(v16 - 12));
        unint64_t v18 = *(unsigned int *)(v16 - 4);
        if (v18 <= 0x400) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
    }
    uint64_t v17 = *(unsigned int *)(v16 - 16);
    unint64_t v18 = *(unsigned int *)(v16 - 4);
    if (v18 <= 0x400)
    {
LABEL_19:
      if (3 * v18 > 4 * v17) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }
LABEL_23:
    if (v18 > 2 * v17)
    {
LABEL_27:
      *(void *)uint64_t v5 = v11;
      *((void *)v5 + objc_destroyWeak(this + 1) = v16 + 4 * v18;
      *((unsigned char *)v5 + ++*(_DWORD *)(this - 16) = 1;
      return result;
    }
LABEL_24:
    BOOL result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(a2, v11);
    uint64_t v11 = result;
    uint64_t v16 = *a2;
    if (*a2) {
      unint64_t v18 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v18 = 0;
    }
    goto LABEL_27;
  }
  int v8 = 0;
  char v7 = 1;
  int v9 = *a3;
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  int v12 = MEMORY[0];
  if (!MEMORY[0]) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != v9)
  {
    if (v12 == -1) {
      uint64_t v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v8;
    uint64_t v11 = (int *)(v6 + 4 * v10);
    int v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        int *v13 = 0;
        --*(_DWORD *)(*a2 - 16);
        int v9 = *a3;
        uint64_t v11 = v13;
      }
      goto LABEL_16;
    }
  }
  if (v7) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(unsigned int *)(v6 - 4);
  }
  *(void *)uint64_t v5 = v11;
  *((void *)v5 + objc_destroyWeak(this + 1) = v6 + 4 * v15;
  *((unsigned char *)v5 + ++*(_DWORD *)(this - 16) = 0;
  return result;
}

int *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(4 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      int v12 = (int *)(v4 + 4 * v10);
      if ((*v12 + 1) >= 2)
      {
        uint64_t v13 = *a1;
        unsigned int v14 = *a1 ? *(_DWORD *)(v13 - 8) : 0;
        int v15 = 0;
        int v16 = *v12;
        do
        {
          uint64_t v17 = v16 & v14;
          int v16 = ++v15 + v17;
        }
        while (*(_DWORD *)(v13 + 4 * v17));
        unint64_t v18 = (int *)(v13 + 4 * v17);
        int *v18 = *v12;
        if (v12 == a2) {
          uint64_t v11 = v18;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v9);
  }
  return v11;
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D20](retstr, sx, sy, sz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1F40D7558](bundle, functionName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7578](bundle);
}

void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator)
{
}

UInt32 CFBundleGetVersionNumber(CFBundleRef bundle)
{
  return MEMORY[0x1F40D75D8](bundle);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1F40D7778](theSet, *(void *)&theChar);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFStringRef CFHTTPAuthenticationCopyMethod(CFHTTPAuthenticationRef auth)
{
  return (CFStringRef)MEMORY[0x1F40D51F8](auth);
}

CFStringRef CFHTTPAuthenticationCopyRealm(CFHTTPAuthenticationRef auth)
{
  return (CFStringRef)MEMORY[0x1F40D5200](auth);
}

CFHTTPAuthenticationRef CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef alloc, CFHTTPMessageRef response)
{
  return (CFHTTPAuthenticationRef)MEMORY[0x1F40D5208](alloc, response);
}

Boolean CFHTTPAuthenticationRequiresUserNameAndPassword(CFHTTPAuthenticationRef auth)
{
  return MEMORY[0x1F40D5218](auth);
}

uint64_t CFHTTPCookieStorageSetCookieAcceptPolicy()
{
  return MEMORY[0x1F40D5270]();
}

Boolean CFHTTPMessageApplyCredentials(CFHTTPMessageRef request, CFHTTPAuthenticationRef auth, CFStringRef username, CFStringRef password, CFStreamError *error)
{
  return MEMORY[0x1F40D5280](request, auth, username, password, error);
}

CFStringRef CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField)
{
  return (CFStringRef)MEMORY[0x1F40D5298](message, headerField);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52D8](alloc, requestMethod, url, httpVersion);
}

CFIndex CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response)
{
  return MEMORY[0x1F40D52E8](response);
}

CFTypeID CFHTTPMessageGetTypeID(void)
{
  return MEMORY[0x1F40D52F0]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D7CA0](cf);
}

CFArrayRef CFNetworkCopyProxiesForURL(CFURLRef url, CFDictionaryRef proxySettings)
{
  return (CFArrayRef)MEMORY[0x1F40D5360](url, proxySettings);
}

CFDictionaryRef CFNetworkCopySystemProxySettings(void)
{
  return (CFDictionaryRef)MEMORY[0x1F40D5368]();
}

CFRunLoopSourceRef CFNetworkExecuteProxyAutoConfigurationURL(CFURLRef proxyAutoConfigURL, CFURLRef targetURL, CFProxyAutoConfigurationResultCallback cb, CFStreamClientContext *clientContext)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D5378](proxyAutoConfigURL, targetURL, cb, clientContext);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1F40D7F98](stream);
}

CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D7FA0](stream, propertyName);
}

const UInt8 *__cdecl CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead)
{
  return (const UInt8 *)MEMORY[0x1F40D7FC8](stream, maxBytesToRead, numBytesRead);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8000](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1F40D8010](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8020](stream, propertyName, propertyValue);
}

void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8180](allocator, flags, order, callout, context, fireDate, interval);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1F40D85D0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1F40D86B0](tokenizer, index);
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

uint64_t CFURLCacheSetMemoryCapacity()
{
  return MEMORY[0x1F40D53C0]();
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1F40D88F0](anURL);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8900](url, buffer, bufferLength);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8A78](stream);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1F40D8A88](stream);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1F40D8AE0](stream, streamEvents, clientCB, clientContext);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8AF0](stream, propertyName, propertyValue);
}

void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8B08](stream, buffer, bufferLength);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97C8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF0]();
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

uint64_t CGContextGetType()
{
  return MEMORY[0x1F40DA030]();
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x1F40DA0D8]();
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA300](data);
}

size_t CGPDFArrayGetCount(CGPDFArrayRef array)
{
  return MEMORY[0x1F40DAB78](array);
}

BOOL CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1F40DAB80](array, index, value);
}

BOOL CGPDFArrayGetObject(CGPDFArrayRef array, size_t index, CGPDFObjectRef *value)
{
  return MEMORY[0x1F40DAB98](array, index, value);
}

BOOL CGPDFDictionaryGetArray(CGPDFDictionaryRef dict, const char *key, CGPDFArrayRef *value)
{
  return MEMORY[0x1F40DABE8](dict, key, value);
}

BOOL CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict, const char *key, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1F40DABF0](dict, key, value);
}

BOOL CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key, const char **value)
{
  return MEMORY[0x1F40DABF8](dict, key, value);
}

BOOL CGPDFDictionaryGetStream(CGPDFDictionaryRef dict, const char *key, CGPDFStreamRef *value)
{
  return MEMORY[0x1F40DAC10](dict, key, value);
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  return MEMORY[0x1F40DAC18](dict, key, value);
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DAC48](provider);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1F40DAC60](document);
}

CGPDFDictionaryRef CGPDFDocumentGetInfo(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1F40DAC80](document);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DAC88](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1F40DAC90](document, pageNumber);
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DACB0](document);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DACC0](document);
}

BOOL CGPDFObjectGetValue(CGPDFObjectRef object, CGPDFObjectType type, void *value)
{
  return MEMORY[0x1F40DAD60](object, *(void *)&type, value);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  MEMORY[0x1F40DAD80](page, *(void *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1F40DAD98](retstr, page, *(void *)&box, *(void *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

size_t CGPDFPageGetPageNumber(CGPDFPageRef page)
{
  return MEMORY[0x1F40DADA8](page);
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  return MEMORY[0x1F40DADB8](page);
}

CFDataRef CGPDFStreamCopyData(CGPDFStreamRef stream, CGPDFDataFormat *format)
{
  return (CFDataRef)MEMORY[0x1F40DAF50](stream, format);
}

CFStringRef CGPDFStringCopyTextString(CGPDFStringRef string)
{
  return (CFStringRef)MEMORY[0x1F40DAF58](string);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(CGPDFStringRef string)
{
  return (const unsigned __int8 *)MEMORY[0x1F40DAF60](string);
}

size_t CGPDFStringGetLength(CGPDFStringRef string)
{
  return MEMORY[0x1F40DAF68](string);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB178](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t InitWebCoreThreadSystemInterface()
{
  return MEMORY[0x1F416BB38]();
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  return (JSClassRef)MEMORY[0x1F40E9BD0](definition);
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9BF8](ctx, script, thisObject, sourceURL, *(void *)&startingLineNumber, exception);
}

JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9C08](globalObjectClass);
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  return (void *)MEMORY[0x1F40E9C58](object);
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  return (JSObjectRef)MEMORY[0x1F40E9CB8](ctx, jsClass, data);
}

BOOL JSValueIsObjectOfClass(JSContextRef ctx, JSValueRef value, JSClassRef jsClass)
{
  return MEMORY[0x1F40E9E28](ctx, value, jsClass);
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1F40E9E68](ctx);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

BOOL NSEqualPoints(NSPoint aPoint, NSPoint bPoint)
{
  return MEMORY[0x1F40E70B8]((__n128)aPoint, *(__n128 *)&aPoint.y, (__n128)bPoint, *(__n128 *)&bPoint.y);
}

BOOL NSEqualSizes(NSSize aSize, NSSize bSize)
{
  return MEMORY[0x1F40E70C8]((__n128)aSize, *(__n128 *)&aSize.height, (__n128)bSize, *(__n128 *)&bSize.height);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSRect NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  MEMORY[0x1F40E7128]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, dX, dY);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  MEMORY[0x1F40E7148]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return MEMORY[0x1F40E7160]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

void NSLog(NSString *format, ...)
{
}

BOOL NSPointInRect(NSPoint aPoint, NSRect aRect)
{
  return MEMORY[0x1F40E71D8]((__n128)aPoint, *(__n128 *)&aPoint.y, (__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

int32_t NSVersionOfLinkTimeLibrary(const char *libraryName)
{
  return MEMORY[0x1F40C99B0](libraryName);
}

fat_arch *__cdecl NXFindBestFatArch(cpu_type_t cputype, cpu_subtype_t cpusubtype, fat_arch *fat_archs, uint32_t nfat_archs)
{
  return (fat_arch *)MEMORY[0x1F40C99C0](*(void *)&cputype, *(void *)&cpusubtype, fat_archs, *(void *)&nfat_archs);
}

const NXArchInfo *NXGetLocalArchInfo(void)
{
  return (const NXArchInfo *)MEMORY[0x1F40C99D8]();
}

uint64_t WKGetCurrentGraphicsContext()
{
  return MEMORY[0x1F416BB40]();
}

uint64_t WKRectFill()
{
  return MEMORY[0x1F416BB48]();
}

uint64_t WKSetCurrentGraphicsContext()
{
  return MEMORY[0x1F416BB50]();
}

uint64_t WebCoreObjCDeallocOnWebThread()
{
  return MEMORY[0x1F416BB58]();
}

uint64_t WebThreadCallDelegate()
{
  return MEMORY[0x1F416BB60]();
}

uint64_t WebThreadEnable()
{
  return MEMORY[0x1F416BB68]();
}

uint64_t WebThreadIsCurrent()
{
  return MEMORY[0x1F416BB70]();
}

uint64_t WebThreadIsEnabled()
{
  return MEMORY[0x1F416BB78]();
}

uint64_t WebThreadIsLocked()
{
  return MEMORY[0x1F416BB80]();
}

uint64_t WebThreadLock()
{
  return MEMORY[0x1F416BB88]();
}

uint64_t WebThreadLockPopModal()
{
  return MEMORY[0x1F416BB90]();
}

uint64_t WebThreadLockPushModal()
{
  return MEMORY[0x1F416BB98]();
}

uint64_t WebThreadMakeNSInvocation()
{
  return MEMORY[0x1F416BBA0]();
}

uint64_t WebThreadNSRunLoop()
{
  return MEMORY[0x1F416BBA8]();
}

uint64_t WebThreadNotCurrent()
{
  return MEMORY[0x1F416BBB0]();
}

uint64_t WebThreadPostNotification()
{
  return MEMORY[0x1F416BBB8]();
}

uint64_t WebThreadRun()
{
  return MEMORY[0x1F416BBC0]();
}

uint64_t WebThreadRunLoop()
{
  return MEMORY[0x1F416BBC8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFHTTPMessageSetResponseURL()
{
  return MEMORY[0x1F40D5608]();
}

uint64_t _CFNetworkIsKnownHSTSHostWithSession()
{
  return MEMORY[0x1F40D5708]();
}

uint64_t _CFURLCacheCopyCacheDirectory()
{
  return MEMORY[0x1F40D5728]();
}

uint64_t _CFURLStorageSessionCopyCookieStorage()
{
  return MEMORY[0x1F40D5788]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t ReportBlockedObjCException(NSException *a1)
{
  return MEMORY[0x1F40E9F28](a1);
}

uint64_t suggestedFilenameWithMIMEType(NSURL *a1, const WTF::String *a2)
{
  return MEMORY[0x1F416BBD0](a1, a2);
}

uint64_t filenameByFixingIllegalCharacters(NSString *a1)
{
  return MEMORY[0x1F416BBD8](a1);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainThread(objc_class *a1, objc_object *a2)
{
  return MEMORY[0x1F416BBE0](a1, a2);
}

uint64_t OpaqueJSString::tryCreate()
{
  return MEMORY[0x1F40E9F38]();
}

void OpaqueJSString::~OpaqueJSString(OpaqueJSString *this)
{
}

uint64_t JSC::Breakpoint::create()
{
  return MEMORY[0x1F40E9F50]();
}

uint64_t JSC::JSLockHolder::JSLockHolder()
{
  return MEMORY[0x1F40EA068]();
}

{
  return MEMORY[0x1F40EA078]();
}

void JSC::JSLockHolder::~JSLockHolder(JSC::JSLockHolder *this)
{
}

uint64_t JSC::SourceProvider::getID(JSC::SourceProvider *this)
{
  return MEMORY[0x1F40EA238](this);
}

void JSC::BufferMemoryHandle::~BufferMemoryHandle(JSC::BufferMemoryHandle *this)
{
}

uint64_t JSC::InlineWatchpointSet::freeFat(JSC::InlineWatchpointSet *this)
{
  return MEMORY[0x1F40EA498](this);
}

uint64_t JSC::globalMemoryStatistics(JSC *this)
{
  return MEMORY[0x1F40EA558](this);
}

void JSC::SharedArrayBufferContents::~SharedArrayBufferContents(JSC::SharedArrayBufferContents *this)
{
}

uint64_t JSC::Heap::objectCount(JSC::Heap *this)
{
  return MEMORY[0x1F40EA6C8](this);
}

uint64_t JSC::Heap::objectTypeCounts(JSC::Heap *this)
{
  return MEMORY[0x1F40EA6E0](this);
}

uint64_t JSC::Heap::globalObjectCount(JSC::Heap *this)
{
  return MEMORY[0x1F40EA6F0](this);
}

uint64_t JSC::Heap::protectedObjectCount(JSC::Heap *this)
{
  return MEMORY[0x1F40EA718](this);
}

uint64_t JSC::Heap::protectedObjectTypeCounts(JSC::Heap *this)
{
  return MEMORY[0x1F40EA730](this);
}

uint64_t JSC::Heap::protectedGlobalObjectCount(JSC::Heap *this)
{
  return MEMORY[0x1F40EA748](this);
}

uint64_t JSC::Heap::size(JSC::Heap *this)
{
  return MEMORY[0x1F40EA790](this);
}

uint64_t JSC::Heap::capacity(JSC::Heap *this)
{
  return MEMORY[0x1F40EA7A0](this);
}

uint64_t JSC::Yarr::RegularExpression::RegularExpression()
{
  return MEMORY[0x1F40EA810]();
}

void JSC::Yarr::RegularExpression::~RegularExpression(JSC::Yarr::RegularExpression *this)
{
}

uint64_t JSC::Yarr::replace()
{
  return MEMORY[0x1F40EA848]();
}

uint64_t JSC::JSLock::DropAllLocks::DropAllLocks()
{
  return MEMORY[0x1F40EA888]();
}

void JSC::JSLock::DropAllLocks::~DropAllLocks(JSC::JSLock::DropAllLocks *this)
{
}

uint64_t JSC::Debugger::setBreakpointsActivated(JSC::Debugger *this)
{
  return MEMORY[0x1F40EA928](this);
}

uint64_t JSC::Debugger::currentDebuggerCallFrame(JSC::Debugger *this)
{
  return MEMORY[0x1F40EA930](this);
}

uint64_t JSC::Debugger::attach()
{
  return MEMORY[0x1F40EA938]();
}

uint64_t JSC::Debugger::Debugger()
{
  return MEMORY[0x1F40EA948]();
}

void JSC::Debugger::~Debugger(JSC::Debugger *this)
{
}

uint64_t JSC::HandleSet::grow(JSC::HandleSet *this)
{
  return MEMORY[0x1F40EAB10](this);
}

uint64_t PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const WTF::String *a2)
{
  return MEMORY[0x1F416BC20](this, a2);
}

uint64_t PAL::UTF8Encoding(PAL *this)
{
  return MEMORY[0x1F416BC28](this);
}

uint64_t PAL::WindowsLatin1Encoding(PAL *this)
{
  return MEMORY[0x1F416BC70](this);
}

uint64_t PAL::decodeURLEscapeSequences()
{
  return MEMORY[0x1F416BC98]();
}

uint64_t PAL::deviceClassIsSmallScreen(PAL *this)
{
  return MEMORY[0x1F416BCA0](this);
}

uint64_t PAL::defaultTextEncodingNameForSystemLanguage(PAL *this)
{
  return MEMORY[0x1F416BD90](this);
}

uint64_t WTF::ParkingLot::unparkOneImpl()
{
  return MEMORY[0x1F40EABF0]();
}

uint64_t WTF::ParkingLot::parkConditionallyImpl()
{
  return MEMORY[0x1F40EABF8]();
}

uint64_t WTF::ParkingLot::unparkAll(WTF::ParkingLot *this, const void *a2)
{
  return MEMORY[0x1F40EAC00](this, a2);
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty()
{
  return MEMORY[0x1F40EAC58]();
}

{
  return MEMORY[0x1F40EAC60]();
}

uint64_t WTF::StringImpl::destroy(WTF::StringImpl *this, StringImpl *a2)
{
  return MEMORY[0x1F40EACA8](this, a2);
}

uint64_t WTF::StringImpl::replace()
{
  return MEMORY[0x1F40EACB0]();
}

uint64_t WTF::StringImpl::endsWith()
{
  return MEMORY[0x1F40EACD0]();
}

uint64_t WTF::StringImpl::substring(WTF::StringImpl *this)
{
  return MEMORY[0x1F40EACD8](this);
}

uint64_t WTF::StringImpl::operator NSString *()
{
  return MEMORY[0x1F40EACE0]();
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1F40EADC0](this);
}

uint64_t WTF::LogArgument<void const*>::toString()
{
  return MEMORY[0x1F40EADE8]();
}

uint64_t WTF::LogChannels::initializeLogChannelsIfNecessary()
{
  return MEMORY[0x1F40EADF8]();
}

uint64_t WTF::fastRealloc(WTF *this, void *a2)
{
  return MEMORY[0x1F40EAF50](this, a2);
}

uint64_t WTF::logChannels(WTF *this)
{
  return MEMORY[0x1F40EAF60](this);
}

uint64_t WTF::SchedulePair::SchedulePair(WTF::SchedulePair *this, NSRunLoop *a2, const __CFString *a3)
{
  return MEMORY[0x1F40EAF88](this, a2, a3);
}

uint64_t WTF::isMainThread(WTF *this)
{
  return MEMORY[0x1F40EAFB0](this);
}

uint64_t WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EB000](this);
}

uint64_t WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB008](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingLChar(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB020](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB028](this);
}

uint64_t WTF::StringBuilder::append()
{
  return MEMORY[0x1F40EB038]();
}

uint64_t WTF::aboutBlankURL(WTF *this)
{
  return MEMORY[0x1F40EB050](this);
}

uint64_t WTF::allPrivileges(WTF *this)
{
  return MEMORY[0x1F40EB058](this);
}

uint64_t WTF::AtomStringImpl::addSlowCase()
{
  return MEMORY[0x1F40EB0F0]();
}

uint64_t WTF::AtomStringImpl::add()
{
  return MEMORY[0x1F40EB118]();
}

uint64_t WTF::AtomStringImpl::add(WTF::AtomStringImpl *this, const __CFString *a2)
{
  return MEMORY[0x1F40EB120](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteFile(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB148](this, a2);
}

uint64_t WTF::FileSystemImpl::fileExists(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB150](this, a2);
}

uint64_t WTF::FileSystemImpl::parentPath(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB158](this, a2);
}

uint64_t WTF::FileSystemImpl::listDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB198](this, a2);
}

uint64_t WTF::FileSystemImpl::makeAllDirectories(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB228](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteNonEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB280](this, a2);
}

uint64_t WTF::FileSystemImpl::pathByAppendingComponent()
{
  return MEMORY[0x1F40EB298]();
}

uint64_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB300](this, a2);
}

uint64_t WTF::decodeHostName(WTF *this, NSString *a2)
{
  return MEMORY[0x1F40EB368](this, a2);
}

uint64_t WTF::encodeHostName(WTF *this, NSString *a2)
{
  return MEMORY[0x1F40EB370](this, a2);
}

uint64_t WTF::AutodrainedPool::AutodrainedPool(WTF::AutodrainedPool *this)
{
  return MEMORY[0x1F40EB3B0](this);
}

void WTF::AutodrainedPool::~AutodrainedPool(WTF::AutodrainedPool *this)
{
}

uint64_t WTF::BinarySemaphore::waitUntil()
{
  return MEMORY[0x1F40EB3C8]();
}

uint64_t WTF::defaultLanguage()
{
  return MEMORY[0x1F40EB3D0]();
}

uint64_t WTF::originalURLData(WTF *this, NSURL *a2)
{
  return MEMORY[0x1F40EB3F8](this, a2);
}

uint64_t WTF::callOnMainThread()
{
  return MEMORY[0x1F40EB408]();
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1F40EB420](this);
}

uint64_t WTF::NativePromiseBase::logChannel(WTF::NativePromiseBase *this)
{
  return MEMORY[0x1F40EB448](this);
}

uint64_t WTF::TextBreakIterator::TextBreakIterator()
{
  return MEMORY[0x1F40EB478]();
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  return MEMORY[0x1F40EB4B0](this);
}

uint64_t WTF::makeVectorElement(WTF *this, const WTF::String *a2, objc_object *a3)
{
  return MEMORY[0x1F40EB4C0](this, a2, a3);
}

uint64_t WTF::ensureOnMainThread()
{
  return MEMORY[0x1F40EB508]();
}

uint64_t WTF::makeNSArrayElement(WTF *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB520](this, a2);
}

uint64_t WTF::fastMallocStatistics(WTF *this)
{
  return MEMORY[0x1F40EB5F8](this);
}

uint64_t WTF::initializeMainThread(WTF *this)
{
  return MEMORY[0x1F40EB600](this);
}

uint64_t WTF::setProcessPrivileges()
{
  return MEMORY[0x1F40EB618]();
}

uint64_t WTF::tryFastCompactMalloc(WTF *this)
{
  return MEMORY[0x1F40EB620](this);
}

uint64_t WTF::MemoryPressureHandler::singleton(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1F40EB658](this);
}

uint64_t WTF::TextBreakIteratorCache::singleton(WTF::TextBreakIteratorCache *this)
{
  return MEMORY[0x1F40EB6A0](this);
}

uint64_t WTF::callOnMainThreadAndWait()
{
  return MEMORY[0x1F40EB6F0]();
}

uint64_t WTF::dataForURLComponentType(WTF *this, NSURL *a2, CFURLComponentType a3)
{
  return MEMORY[0x1F40EB6F8](this, a2, a3);
}

uint64_t WTF::releaseFastMallocFreeMemory(WTF *this)
{
  return MEMORY[0x1F40EB780](this);
}

uint64_t WTF::createContextualizedCFString()
{
  return MEMORY[0x1F40EB788]();
}

uint64_t WTF::linkedOnOrAfterSDKWithBehavior()
{
  return MEMORY[0x1F40EB800]();
}

uint64_t WTF::openUTF16ContextAwareUTextProvider()
{
  return MEMORY[0x1F40EB858]();
}

uint64_t WTF::openLatin1ContextAwareUTextProvider()
{
  return MEMORY[0x1F40EB868]();
}

uint64_t WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1F40EB878]();
}

uint64_t WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1F40EB880]();
}

uint64_t WTF::URL::invalidate(WTF::URL *this)
{
  return MEMORY[0x1F40EB898](this);
}

uint64_t WTF::URL::fakeURLWithRelativePart()
{
  return MEMORY[0x1F40EB8D8]();
}

uint64_t WTF::URL::URL()
{
  return MEMORY[0x1F40EB928]();
}

uint64_t WTF::URL::URL(WTF::URL *this, NSURL *a2)
{
  return MEMORY[0x1F40EB930](this, a2);
}

uint64_t WTF::Lock::unlockSlow(WTF::Lock *this)
{
  return MEMORY[0x1F40EB978](this);
}

uint64_t WTF::Lock::lockSlow(WTF::Lock *this)
{
  return MEMORY[0x1F40EB980](this);
}

uint64_t WTF::UUID::UUID(WTF::UUID *this)
{
  return MEMORY[0x1F40EB9D8](this);
}

uint64_t WTF::equal()
{
  return MEMORY[0x1F40EBA08]();
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1F40EBA18](this, a2, a3);
}

{
  return MEMORY[0x1F40EBA20](this, a2, a3);
}

uint64_t WTF::Logger::observers(WTF::Logger *this)
{
  return MEMORY[0x1F40EBA40](this);
}

uint64_t WTF::String::number(WTF::String *this)
{
  return MEMORY[0x1F40EBA80](this);
}

uint64_t WTF::String::fromUTF8()
{
  return MEMORY[0x1F40EBAA8]();
}

uint64_t WTF::String::String()
{
  return MEMORY[0x1F40EBAB8]();
}

{
  return MEMORY[0x1F40EBAC0]();
}

{
  return MEMORY[0x1F40EBAC8]();
}

uint64_t WTF::String::String(WTF::String *this, const __CFString *a2)
{
  return MEMORY[0x1F40EBAD0](this, a2);
}

uint64_t WTF::String::String(WTF::String *this, const char *a2)
{
  return MEMORY[0x1F40EBAD8](this, a2);
}

uint64_t WTF::Thread::waitForCompletion(WTF::Thread *this)
{
  return MEMORY[0x1F40EBB08](this);
}

uint64_t WTF::Thread::create()
{
  return MEMORY[0x1F40EBB38]();
}

void WTF::Thread::~Thread(WTF::Thread *this)
{
}

uint64_t WTF::RunLoop::main(WTF::RunLoop *this)
{
  return MEMORY[0x1F40EBB90](this);
}

uint64_t WTF::RunLoop::dispatch()
{
  return MEMORY[0x1F40EBBC0]();
}

uint64_t WTF::ramSize(WTF *this)
{
  return MEMORY[0x1F40EBC20](this);
}

uint64_t WTF::Internal::appendHex()
{
  return MEMORY[0x1F40EBC38]();
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1F40EBCA8](this, a2);
}

uint64_t WTF::WorkQueue::main(WTF::WorkQueue *this)
{
  return MEMORY[0x1F40EBD40](this);
}

uint64_t WTF::WorkQueue::create()
{
  return MEMORY[0x1F40EBD48]();
}

uint64_t WebCore::FloatPoint::FloatPoint(WebCore::FloatPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1F416C110](this, a2);
}

uint64_t WebCore::JSNodeList::toWrapped()
{
  return MEMORY[0x1F416C120]();
}

uint64_t WebCore::LayoutRect::LayoutRect(WebCore::LayoutRect *this, const FloatRect *a2)
{
  return MEMORY[0x1F416C128](this, a2);
}

uint64_t WebCore::LocalFrame::rangeForPoint(WebCore::LocalFrame *this, const IntPoint *a2)
{
  return MEMORY[0x1F416C148](this, a2);
}

uint64_t WebCore::LocalFrame::createSubframe()
{
  return MEMORY[0x1F416C150]();
}

uint64_t WebCore::LocalFrame::deepestNodeAtLocation(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F416C190](this, a2);
}

uint64_t WebCore::LocalFrame::searchForLabelsAboveCell()
{
  return MEMORY[0x1F416C1A8]();
}

uint64_t WebCore::LocalFrame::initWithSimpleHTMLDocument()
{
  return MEMORY[0x1F416C1C0]();
}

uint64_t WebCore::LocalFrame::resizePageRectsKeepingRatio(WebCore::LocalFrame *this, const FloatSize *a2, const FloatSize *a3)
{
  return MEMORY[0x1F416C1E0](this, a2, a3);
}

uint64_t WebCore::LocalFrame::nodeRespondingToScrollWheelEvents(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F416C210](this, a2);
}

uint64_t WebCore::LocalFrame::overflowScrollPositionChangedForNode(WebCore::LocalFrame *this, const IntPoint *a2, Node *a3)
{
  return MEMORY[0x1F416C230](this, a2, a3);
}

uint64_t WebCore::LocalFrame::approximateNodeAtViewportLocationLegacy(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  return MEMORY[0x1F416C238](this, a2, a3);
}

uint64_t WebCore::LocalFrame::init(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F416C258](this);
}

uint64_t WebCore::LocalFrame::setView()
{
  return MEMORY[0x1F416C270]();
}

uint64_t WebCore::MouseEvent::initMouseEvent()
{
  return MEMORY[0x1F416C290]();
}

uint64_t WebCore::MouseEvent::create()
{
  return MEMORY[0x1F416C298]();
}

uint64_t WebCore::Pasteboard::createForDragAndDrop()
{
  return MEMORY[0x1F416C2B0]();
}

uint64_t WebCore::RenderView::compositor(WebCore::RenderView *this)
{
  return MEMORY[0x1F416C2F0](this);
}

uint64_t WebCore::ScrollView::setParentVisible(WebCore::ScrollView *this)
{
  return MEMORY[0x1F416C300](this);
}

uint64_t WebCore::ScrollView::setUseFixedLayout(WebCore::ScrollView *this)
{
  return MEMORY[0x1F416C310](this);
}

uint64_t WebCore::ScrollView::setFixedLayoutSize()
{
  return MEMORY[0x1F416C318]();
}

uint64_t WebCore::ScrollView::setDelegatedScrollingMode()
{
  return MEMORY[0x1F416C330]();
}

uint64_t WebCore::ScrollView::scrollOffsetChangedViaPlatformWidget(WebCore::ScrollView *this, const IntPoint *a2, const IntPoint *a3)
{
  return MEMORY[0x1F416C338](this, a2, a3);
}

uint64_t WebCore::ScrollView::paint()
{
  return MEMORY[0x1F416C340]();
}

uint64_t WebCore::StorageMap::removeItem(WebCore::StorageMap *this, const WTF::String *a2, WTF::String *a3)
{
  return MEMORY[0x1F416C348](this, a2, a3);
}

uint64_t WebCore::StorageMap::importItems()
{
  return MEMORY[0x1F416C350]();
}

uint64_t WebCore::StorageMap::clear(WebCore::StorageMap *this)
{
  return MEMORY[0x1F416C368](this);
}

uint64_t WebCore::StorageMap::setItem(WebCore::StorageMap *this, const WTF::String *a2, const WTF::String *a3, WTF::String *a4, BOOL *a5)
{
  return MEMORY[0x1F416C370](this, a2, a3, a4, a5);
}

uint64_t WebCore::StorageMap::StorageMap(WebCore::StorageMap *this)
{
  return MEMORY[0x1F416C378](this);
}

uint64_t WebCore::TreeWalker::firstChild(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3A0](this);
}

uint64_t WebCore::TreeWalker::parentNode(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3A8](this);
}

uint64_t WebCore::TreeWalker::nextSibling(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3B0](this);
}

uint64_t WebCore::TreeWalker::previousNode(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3B8](this);
}

uint64_t WebCore::TreeWalker::setCurrentNode(WebCore::TreeWalker *this, Node *a2)
{
  return MEMORY[0x1F416C3C0](this, a2);
}

uint64_t WebCore::TreeWalker::previousSibling(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3C8](this);
}

uint64_t WebCore::TreeWalker::nextNode(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3D0](this);
}

uint64_t WebCore::TreeWalker::lastChild(WebCore::TreeWalker *this)
{
  return MEMORY[0x1F416C3D8](this);
}

void WebCore::TreeWalker::operator delete(void *a1)
{
}

uint64_t WebCore::UserScript::UserScript()
{
  return MEMORY[0x1F416C3E8]();
}

uint64_t WebCore::cocoaColor()
{
  return MEMORY[0x1F416C400]();
}

void WebCore::AbortSignal::~AbortSignal(WebCore::AbortSignal *this)
{
}

void WebCore::AbortSignal::operator delete(void *a1)
{
}

uint64_t WebCore::CSSPageRule::setSelectorText(WebCore::CSSPageRule *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C458](this, a2);
}

uint64_t WebCore::CSSPageRule::style(WebCore::CSSPageRule *this)
{
  return MEMORY[0x1F416C460](this);
}

uint64_t WebCore::CachedFrame::cachedFramePlatformData(WebCore::CachedFrame *this)
{
  return MEMORY[0x1F416C468](this);
}

uint64_t WebCore::CachedFrame::setCachedFramePlatformData()
{
  return MEMORY[0x1F416C470]();
}

uint64_t WebCore::EventTarget::dispatchEventForBindings()
{
  return MEMORY[0x1F416C530]();
}

uint64_t WebCore::EventTarget::addEventListenerForBindings()
{
  return MEMORY[0x1F416C538]();
}

uint64_t WebCore::EventTarget::removeEventListenerForBindings()
{
  return MEMORY[0x1F416C540]();
}

uint64_t WebCore::FileChooser::chooseFile(WebCore::FileChooser *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C550](this, a2);
}

uint64_t WebCore::FileChooser::chooseFiles()
{
  return MEMORY[0x1F416C558]();
}

uint64_t WebCore::FileChooser::chooseMediaFiles()
{
  return MEMORY[0x1F416C560]();
}

void WebCore::FileChooser::~FileChooser(WebCore::FileChooser *this)
{
}

uint64_t WebCore::FrameLoader::loadArchive()
{
  return MEMORY[0x1F416C590]();
}

uint64_t WebCore::FrameLoader::detachFromParent(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F416C5A8](this);
}

uint64_t WebCore::FrameLoader::loadFrameRequest()
{
  return MEMORY[0x1F416C5B0]();
}

uint64_t WebCore::FrameLoader::reloadWithOverrideEncoding(WebCore::FrameLoader *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C5C8](this, a2);
}

uint64_t WebCore::FrameLoader::load()
{
  return MEMORY[0x1F416C5D8]();
}

uint64_t WebCore::Geolocation::setIsAllowed(WebCore::Geolocation *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416C5E8](this, a2, a3);
}

void WebCore::Geolocation::~Geolocation(WebCore::Geolocation *this)
{
}

void WebCore::Geolocation::operator delete(void *a1)
{
}

uint64_t WebCore::HTMLElement::setDraggable(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C608](this);
}

uint64_t WebCore::HTMLElement::setInnerText()
{
  return MEMORY[0x1F416C610]();
}

uint64_t WebCore::HTMLElement::setOuterText()
{
  return MEMORY[0x1F416C618]();
}

uint64_t WebCore::HTMLElement::setTranslate(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C620](this);
}

uint64_t WebCore::HTMLElement::setSpellcheck(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C628](this);
}

uint64_t WebCore::HTMLElement::setAutocorrect(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C630](this);
}

uint64_t WebCore::HTMLElement::setAutocapitalize()
{
  return MEMORY[0x1F416C638]();
}

uint64_t WebCore::HTMLElement::setContentEditable(WebCore::HTMLElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C640](this, a2);
}

uint64_t WebCore::HTMLElement::click(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C650](this);
}

uint64_t WebCore::HTMLElement::labels(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C658](this);
}

uint64_t WebCore::HTMLElement::setDir()
{
  return MEMORY[0x1F416C660]();
}

uint64_t WebCore::HistoryItem::setReferrer(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C670](this, a2);
}

uint64_t WebCore::HistoryItem::addChildItem()
{
  return MEMORY[0x1F416C678]();
}

uint64_t WebCore::HistoryItem::setURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C680](this, a2);
}

uint64_t WebCore::HistoryItem::setAlternateTitle(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C6A0](this, a2);
}

uint64_t WebCore::HistoryItem::setScrollPosition(WebCore::HistoryItem *this, const IntPoint *a2)
{
  return MEMORY[0x1F416C6A8](this, a2);
}

uint64_t WebCore::HistoryItem::setOriginalURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C6C0](this, a2);
}

uint64_t WebCore::HistoryItem::formData(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F416C6D8](this);
}

uint64_t WebCore::HistoryItem::setTitle(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C6E0](this, a2);
}

uint64_t WebCore::HistoryItem::HistoryItem()
{
  return MEMORY[0x1F416C6F0]();
}

void WebCore::HistoryItem::~HistoryItem(WebCore::HistoryItem *this)
{
}

uint64_t WebCore::JSMediaList::toWrapped()
{
  return MEMORY[0x1F416C770]();
}

uint64_t WebCore::MemoryCache::getStatistics(WebCore::MemoryCache *this)
{
  return MEMORY[0x1F416CAA0](this);
}

uint64_t WebCore::MemoryCache::setCapacities(WebCore::MemoryCache *this)
{
  return MEMORY[0x1F416CAA8](this);
}

uint64_t WebCore::MemoryCache::resourceForRequest()
{
  return MEMORY[0x1F416CAC0]();
}

uint64_t WebCore::MemoryCache::singleton(WebCore::MemoryCache *this)
{
  return MEMORY[0x1F416CAE0](this);
}

uint64_t WebCore::RenderLayer::ensureLayerScrollableArea(WebCore::RenderLayer *this)
{
  return MEMORY[0x1F416CBB8](this);
}

uint64_t WebCore::SimpleRange::SimpleRange()
{
  return MEMORY[0x1F416CBC0]();
}

uint64_t WebCore::SimpleRange::SimpleRange(WebCore::SimpleRange *this, const BoundaryPoint *a2, const BoundaryPoint *a3)
{
  return MEMORY[0x1F416CBC8](this, a2, a3);
}

void WebCore::TrustedHTML::operator delete(void *a1)
{
}

uint64_t WebCore::WindowProxy::globalObject(WebCore::WindowProxy *this, DOMWrapperWorld *a2)
{
  return MEMORY[0x1F416CC00](this, a2);
}

void WebCore::WindowProxy::~WindowProxy(WebCore::WindowProxy *this)
{
}

uint64_t WebCore::XPathResult::iterateNext(WebCore::XPathResult *this)
{
  return MEMORY[0x1F416CC10](this);
}

uint64_t WebCore::XPathResult::snapshotItem(WebCore::XPathResult *this)
{
  return MEMORY[0x1F416CC18](this);
}

void WebCore::XPathResult::~XPathResult(WebCore::XPathResult *this)
{
}

uint64_t WebCore::isEndOfLine(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416CC28](this, a2);
}

uint64_t WebCore::logChannels(WebCore *this)
{
  return MEMORY[0x1F416CC30](this);
}

uint64_t WebCore::startOfLine(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416CC40](this, a2);
}

uint64_t WebCore::startOfWord()
{
  return MEMORY[0x1F416CC48]();
}

void WebCore::BlobRegistry::~BlobRegistry(WebCore::BlobRegistry *this)
{
}

uint64_t WebCore::CSSStyleRule::setSelectorText(WebCore::CSSStyleRule *this, const WTF::String *a2)
{
  return MEMORY[0x1F416CCE8](this, a2);
}

uint64_t WebCore::CSSStyleRule::style(WebCore::CSSStyleRule *this)
{
  return MEMORY[0x1F416CCF0](this);
}

uint64_t WebCore::ChromeClient::ChromeClient(WebCore::ChromeClient *this)
{
  return MEMORY[0x1F416CCF8](this);
}

void WebCore::ChromeClient::~ChromeClient(WebCore::ChromeClient *this)
{
}

uint64_t WebCore::DOMException::description()
{
  return MEMORY[0x1F416CD08]();
}

uint64_t WebCore::DOMTokenList::toggle()
{
  return MEMORY[0x1F416CD10]();
}

uint64_t WebCore::DOMTokenList::tokens(WebCore::DOMTokenList *this)
{
  return MEMORY[0x1F416CD18](this);
}

uint64_t WebCore::DOMTokenList::setValue()
{
  return MEMORY[0x1F416CD20]();
}

uint64_t WebCore::EditingStyle::styleAtSelectionStart()
{
  return MEMORY[0x1F416CD28]();
}

uint64_t WebCore::EditingStyle::EditingStyle()
{
  return MEMORY[0x1F416CD38]();
}

void WebCore::EditingStyle::~EditingStyle(WebCore::EditingStyle *this)
{
}

uint64_t WebCore::EventHandler::touchEvent()
{
  return MEMORY[0x1F416CD58]();
}

uint64_t WebCore::EventHandler::tryToBeginDragAtPoint(WebCore::EventHandler *this, const IntPoint *a2, const IntPoint *a3)
{
  return MEMORY[0x1F416CDD8](this, a2, a3);
}

uint64_t WebCore::EventHandler::mouseUp()
{
  return MEMORY[0x1F416CE38]();
}

uint64_t WebCore::EventHandler::keyEvent()
{
  return MEMORY[0x1F416CE40]();
}

uint64_t WebCore::EventHandler::mouseDown()
{
  return MEMORY[0x1F416CE50]();
}

uint64_t WebCore::GCController::singleton(WebCore::GCController *this)
{
  return MEMORY[0x1F416CE88](this);
}

void WebCore::IDBGetResult::operator delete(void *a1)
{
}

uint64_t WebCore::JSStyleSheet::toWrapped()
{
  return MEMORY[0x1F416CF18]();
}

uint64_t WebCore::JSTreeWalker::toWrapped()
{
  return MEMORY[0x1F416CF20]();
}

uint64_t WebCore::NamedNodeMap::setNamedItem()
{
  return MEMORY[0x1F416CF38]();
}

uint64_t WebCore::NamedNodeMap::removeNamedItem()
{
  return MEMORY[0x1F416CF40]();
}

uint64_t WebCore::NamedNodeMap::removeNamedItemNS()
{
  return MEMORY[0x1F416CF48]();
}

uint64_t WebCore::NamedNodeMap::ref(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1F416CF50](this);
}

uint64_t WebCore::NamedNodeMap::deref(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1F416CF58](this);
}

uint64_t WebCore::NodeIterator::previousNode(WebCore::NodeIterator *this)
{
  return MEMORY[0x1F416CF60](this);
}

uint64_t WebCore::NodeIterator::nextNode(WebCore::NodeIterator *this)
{
  return MEMORY[0x1F416CF68](this);
}

void WebCore::NodeIterator::~NodeIterator(WebCore::NodeIterator *this)
{
}

void WebCore::NodeIterator::operator delete(void *a1)
{
}

uint64_t WebCore::Notification::ensureOnNotificationThread()
{
  return MEMORY[0x1F416CFA8]();
}

uint64_t WebCore::PrintContext::numberOfPages(WebCore::PrintContext *this, WebCore::LocalFrame *a2, const FloatSize *a3)
{
  return MEMORY[0x1F416CFB8](this, a2, a3);
}

uint64_t WebCore::PrintContext::spoolAllPagesWithBoundaries()
{
  return MEMORY[0x1F416CFF8]();
}

uint64_t WebCore::PrintContext::computePageRectsWithPageSize(WebCore::PrintContext *this, const FloatSize *a2)
{
  return MEMORY[0x1F416D000](this, a2);
}

uint64_t WebCore::PrintContext::PrintContext(WebCore::PrintContext *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416D020](this, a2);
}

void WebCore::PrintContext::~PrintContext(WebCore::PrintContext *this)
{
}

uint64_t WebCore::RenderObject::absoluteTextRects()
{
  return MEMORY[0x1F416D0B0]();
}

uint64_t WebCore::RenderObject::collectSelectionGeometries(WebCore::RenderObject *this, const WebCore::SimpleRange *a2)
{
  return MEMORY[0x1F416D0C0](this, a2);
}

uint64_t WebCore::RenderWidget::setWidget()
{
  return MEMORY[0x1F416D0D0]();
}

uint64_t WebCore::SettingsBase::setFixedFontFamily()
{
  return MEMORY[0x1F416D0F0]();
}

uint64_t WebCore::SettingsBase::setSerifFontFamily()
{
  return MEMORY[0x1F416D0F8]();
}

uint64_t WebCore::SettingsBase::setCursiveFontFamily()
{
  return MEMORY[0x1F416D100]();
}

uint64_t WebCore::SettingsBase::setFantasyFontFamily()
{
  return MEMORY[0x1F416D108]();
}

uint64_t WebCore::SettingsBase::setStandardFontFamily()
{
  return MEMORY[0x1F416D110]();
}

uint64_t WebCore::SettingsBase::setSansSerifFontFamily()
{
  return MEMORY[0x1F416D118]();
}

uint64_t WebCore::SettingsBase::setPictographFontFamily()
{
  return MEMORY[0x1F416D120]();
}

uint64_t WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D150](this, a2);
}

uint64_t WebCore::SharedBuffer::SharedBuffer()
{
  return MEMORY[0x1F416D168]();
}

uint64_t WebCore::TextIterator::advance(WebCore::TextIterator *this)
{
  return MEMORY[0x1F416D1B0](this);
}

uint64_t WebCore::TextIterator::TextIterator()
{
  return MEMORY[0x1F416D1B8]();
}

void WebCore::TextIterator::~TextIterator(WebCore::TextIterator *this)
{
}

uint64_t WebCore::commonVMSlow(WebCore *this)
{
  return MEMORY[0x1F416D210](this);
}

uint64_t WebCore::AXObjectCache::rootObject(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1F416D220](this);
}

uint64_t WebCore::AXObjectCache::rootObjectForFrame(WebCore::AXObjectCache *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416D230](this, a2);
}

uint64_t WebCore::CSSStyleSheet::deleteRule(WebCore::CSSStyleSheet *this)
{
  return MEMORY[0x1F416D268](this);
}

uint64_t WebCore::CSSStyleSheet::insertRule(WebCore::CSSStyleSheet *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D270](this, a2);
}

uint64_t WebCore::CSSStyleSheet::addRule()
{
  return MEMORY[0x1F416D278]();
}

uint64_t WebCore::CSSStyleSheet::cssRules(WebCore::CSSStyleSheet *this)
{
  return MEMORY[0x1F416D280](this);
}

uint64_t WebCore::CharacterData::appendData(WebCore::CharacterData *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D288](this, a2);
}

uint64_t WebCore::CharacterData::deleteData(WebCore::CharacterData *this)
{
  return MEMORY[0x1F416D290](this);
}

uint64_t WebCore::CharacterData::insertData(WebCore::CharacterData *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416D298](this, a2, a3);
}

uint64_t WebCore::CharacterData::replaceData(WebCore::CharacterData *this, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  return MEMORY[0x1F416D2A0](this, a2, a3, a4);
}

uint64_t WebCore::CharacterData::setData(WebCore::CharacterData *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D2A8](this, a2);
}

uint64_t WebCore::ContainerNode::appendChild(WebCore::ContainerNode *this, Node *a2)
{
  return MEMORY[0x1F416D2B0](this, a2);
}

uint64_t WebCore::ContainerNode::querySelector(WebCore::ContainerNode *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D2B8](this, a2);
}

uint64_t WebCore::ContainerNode::querySelectorAll(WebCore::ContainerNode *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D2C8](this, a2);
}

uint64_t WebCore::ContainerNode::getElementsByTagName()
{
  return MEMORY[0x1F416D2D0]();
}

uint64_t WebCore::ContainerNode::getElementsByClassName()
{
  return MEMORY[0x1F416D2D8]();
}

uint64_t WebCore::ContainerNode::getElementsByTagNameNS()
{
  return MEMORY[0x1F416D2E0]();
}

uint64_t WebCore::ContainerNode::children(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F416D2E8](this);
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
  return MEMORY[0x1F416D3E8](this);
}

uint64_t WebCore::HitTestResult::HitTestResult()
{
  return MEMORY[0x1F416D408]();
}

void WebCore::HitTestResult::~HitTestResult(WebCore::HitTestResult *this)
{
}

uint64_t WebCore::JSCSSRuleList::toWrapped()
{
  return MEMORY[0x1F416D458]();
}

uint64_t WebCore::JSWindowProxy::toWrapped()
{
  return MEMORY[0x1F416D460]();
}

uint64_t WebCore::JSXPathResult::toWrapped()
{
  return MEMORY[0x1F416D468]();
}

uint64_t WebCore::KeyboardEvent::initKeyboardEvent()
{
  return MEMORY[0x1F416D470]();
}

uint64_t WebCore::KeyboardEvent::create()
{
  return MEMORY[0x1F416D478]();
}

uint64_t WebCore::MediaStrategy::MediaStrategy(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1F416D498](this);
}

void WebCore::MediaStrategy::~MediaStrategy(WebCore::MediaStrategy *this)
{
}

uint64_t WebCore::MutationEvent::initMutationEvent()
{
  return MEMORY[0x1F416D4A8]();
}

uint64_t WebCore::NodeTraversal::deepLastChild(WebCore::NodeTraversal *this, Node *a2)
{
  return MEMORY[0x1F416D4B0](this, a2);
}

uint64_t WebCore::NodeTraversal::nextAncestorSibling(WebCore::NodeTraversal *this, const Node *a2)
{
  return MEMORY[0x1F416D4B8](this, a2);
}

uint64_t WebCore::PathUtilities::pathWithShrinkWrappedRects()
{
  return MEMORY[0x1F416D4D0]();
}

void WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(WebCore::QualifiedName::QualifiedNameImpl *this)
{
}

uint64_t WebCore::QualifiedName::QualifiedName()
{
  return MEMORY[0x1F416D500]();
}

uint64_t WebCore::RenderElement::resetTextAutosizing(WebCore::RenderElement *this)
{
  return MEMORY[0x1F416D508](this);
}

uint64_t WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, NSError *a2)
{
  return MEMORY[0x1F416D518](this, a2);
}

uint64_t WebCore::StyledElement::cssomStyle(WebCore::StyledElement *this)
{
  return MEMORY[0x1F416D5F8](this);
}

uint64_t WebCore::TextIndicator::createWithRange()
{
  return MEMORY[0x1F416D610]();
}

void WebCore::TextIndicator::~TextIndicator(WebCore::TextIndicator *this)
{
}

uint64_t WebCore::cachedCGColor()
{
  return MEMORY[0x1F416D638]();
}

uint64_t WebCore::createWrapper()
{
  return MEMORY[0x1F416D640]();
}

uint64_t WebCore::displayString(WebCore *this, const WTF::String *a2, const Node *a3)
{
  return MEMORY[0x1F416D648](this, a2, a3);
}

uint64_t WebCore::documentOrder(WebCore *this, const VisiblePosition *a2, const VisiblePosition *a3)
{
  return MEMORY[0x1F416D650](this, a2, a3);
}

uint64_t WebCore::documentOrder(WebCore *this, const Position *a2, const Position *a3)
{
  return MEMORY[0x1F416D658](this, a2, a3);
}

uint64_t WebCore::endOfDocument(WebCore *this, const Node *a2)
{
  return MEMORY[0x1F416D668](this, a2);
}

uint64_t WebCore::endOfDocument(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416D670](this, a2);
}

uint64_t WebCore::endOfSentence(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416D678](this, a2);
}

uint64_t WebCore::isStartOfLine(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416D690](this, a2);
}

uint64_t WebCore::CredentialBase::CredentialBase(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F416D6D0](this);
}

uint64_t WebCore::DocumentLoader::commitData()
{
  return MEMORY[0x1F416D6F8]();
}

uint64_t WebCore::DocumentLoader::attachToFrame(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F416D700](this);
}

uint64_t WebCore::DocumentLoader::detachFromFrame()
{
  return MEMORY[0x1F416D708]();
}

uint64_t WebCore::DocumentLoader::addArchiveResource()
{
  return MEMORY[0x1F416D718]();
}

uint64_t WebCore::DocumentLoader::setResponseMIMEType(WebCore::DocumentLoader *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D728](this, a2);
}

uint64_t WebCore::DocumentLoader::addAllArchiveResources()
{
  return MEMORY[0x1F416D748]();
}

uint64_t WebCore::DocumentLoader::cancelMainResourceLoad()
{
  return MEMORY[0x1F416D750]();
}

uint64_t WebCore::DocumentLoader::didGetLoadDecisionForIcon()
{
  return MEMORY[0x1F416D768]();
}

uint64_t WebCore::DocumentLoader::setTitle()
{
  return MEMORY[0x1F416D7A0]();
}

uint64_t WebCore::DocumentLoader::DocumentLoader()
{
  return MEMORY[0x1F416D7B0]();
}

void WebCore::DocumentLoader::~DocumentLoader(WebCore::DocumentLoader *this)
{
}

uint64_t WebCore::DocumentWriter::end(WebCore::DocumentWriter *this)
{
  return MEMORY[0x1F416D7C0](this);
}

uint64_t WebCore::DragController::dragExited()
{
  return MEMORY[0x1F416D7C8]();
}

uint64_t WebCore::DragController::dragEnteredOrUpdated()
{
  return MEMORY[0x1F416D7D0]();
}

uint64_t WebCore::DragController::performDragOperation()
{
  return MEMORY[0x1F416D7D8]();
}

uint64_t WebCore::DragController::dragEnded(WebCore::DragController *this)
{
  return MEMORY[0x1F416D7F0](this);
}

uint64_t WebCore::FileIconLoader::iconLoaded()
{
  return MEMORY[0x1F416D800]();
}

uint64_t WebCore::FrameSelection::setSelection()
{
  return MEMORY[0x1F416D808]();
}

uint64_t WebCore::FrameSelection::setCaretColor()
{
  return MEMORY[0x1F416D810]();
}

uint64_t WebCore::FrameSelection::selectionBounds()
{
  return MEMORY[0x1F416D820]();
}

uint64_t WebCore::FrameSelection::setSelectedRange()
{
  return MEMORY[0x1F416D828]();
}

uint64_t WebCore::FrameSelection::updateAppearance(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F416D830](this);
}

uint64_t WebCore::FrameSelection::wordRangeContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F416D858](this);
}

uint64_t WebCore::FrameSelection::wordSelectionContainingCaretSelection()
{
  return MEMORY[0x1F416D860]();
}

uint64_t WebCore::FrameSelection::modify()
{
  return MEMORY[0x1F416D888]();
}

uint64_t WebCore::FrameSelection::moveTo()
{
  return MEMORY[0x1F416D890]();
}

{
  return MEMORY[0x1F416D898]();
}

uint64_t WebCore::FrameSelection::FrameSelection(WebCore::FrameSelection *this, Document *a2)
{
  return MEMORY[0x1F416D8A8](this, a2);
}

void WebCore::FrameSelection::~FrameSelection(WebCore::FrameSelection *this)
{
}

uint64_t WebCore::HTMLMapElement::areas(WebCore::HTMLMapElement *this)
{
  return MEMORY[0x1F416D8B8](this);
}

void WebCore::IDBTransaction::~IDBTransaction(WebCore::IDBTransaction *this)
{
}

void WebCore::IDBTransaction::operator delete(void *a1)
{
}

uint64_t WebCore::IOSApplication::isMobileMail(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D908](this);
}

uint64_t WebCore::IOSApplication::isWebProcess(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D918](this);
}

uint64_t WebCore::IOSApplication::isMobileSafari(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D930](this);
}

uint64_t WebCore::IOSApplication::isLaBanquePostale(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D950](this);
}

uint64_t WebCore::IOSApplication::isTheSecretSocietyHiddenMystery(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D970](this);
}

uint64_t WebCore::JSNamedNodeMap::toWrapped()
{
  return MEMORY[0x1F416D9D0]();
}

uint64_t WebCore::JSNodeIterator::toWrapped()
{
  return MEMORY[0x1F416D9D8]();
}

uint64_t WebCore::JSNotification::toWrapped()
{
  return MEMORY[0x1F416D9E0]();
}

uint64_t WebCore::LocalDOMWindow::dispatchAllPendingUnloadEvents(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1F416DA08](this);
}

uint64_t WebCore::LocalFrameView::forceLayout(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA18](this);
}

uint64_t WebCore::LocalFrameView::setMediaType()
{
  return MEMORY[0x1F416DA20]();
}

uint64_t WebCore::LocalFrameView::paintContents()
{
  return MEMORY[0x1F416DA28]();
}

uint64_t WebCore::LocalFrameView::setTransparent(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA40](this);
}

uint64_t WebCore::LocalFrameView::setPaintBehavior()
{
  return MEMORY[0x1F416DA48]();
}

uint64_t WebCore::LocalFrameView::scrollRectToVisible()
{
  return MEMORY[0x1F416DA88]();
}

uint64_t WebCore::LocalFrameView::setCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DAB0](this);
}

uint64_t WebCore::LocalFrameView::setBaseBackgroundColor()
{
  return MEMORY[0x1F416DAC0]();
}

uint64_t WebCore::LocalFrameView::updateCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DAC8](this);
}

uint64_t WebCore::LocalFrameView::forceLayoutForPagination()
{
  return MEMORY[0x1F416DAD0]();
}

uint64_t WebCore::LocalFrameView::adjustPageHeightDeprecated(WebCore::LocalFrameView *this, float *a2, float a3, float a4, float a5)
{
  return MEMORY[0x1F416DAF0](this, a2, a3, a4, a5);
}

uint64_t WebCore::LocalFrameView::availableContentSizeChanged()
{
  return MEMORY[0x1F416DB08]();
}

uint64_t WebCore::LocalFrameView::setShouldUpdateWhileOffscreen(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DB40](this);
}

uint64_t WebCore::LocalFrameView::graphicsLayerForPlatformWidget(WebCore::LocalFrameView *this, WAKView *a2)
{
  return MEMORY[0x1F416DB50](this, a2);
}

uint64_t WebCore::LocalFrameView::setCustomFixedPositionLayoutRect()
{
  return MEMORY[0x1F416DB88]();
}

uint64_t WebCore::LocalFrameView::flushCompositingStateIncludingSubframes(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DBA0](this);
}

uint64_t WebCore::LocalFrameView::create(WebCore::LocalFrameView *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416DBD0](this, a2);
}

uint64_t WebCore::ReportingScope::generateTestReport()
{
  return MEMORY[0x1F416DC48]();
}

uint64_t WebCore::ResourceHandle::clearClient(WebCore::ResourceHandle *this)
{
  return MEMORY[0x1F416DC60](this);
}

uint64_t WebCore::ResourceHandle::create()
{
  return MEMORY[0x1F416DC70]();
}

uint64_t WebCore::ResourceLoader::start(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F416DC88](this);
}

uint64_t WebCore::SQLiteDatabase::tableExists()
{
  return MEMORY[0x1F416DCA0]();
}

uint64_t WebCore::SQLiteDatabase::executeCommand()
{
  return MEMORY[0x1F416DCC8]();
}

uint64_t WebCore::SQLiteDatabase::prepareStatement()
{
  return MEMORY[0x1F416DCD0]();
}

uint64_t WebCore::SQLiteDatabase::open()
{
  return MEMORY[0x1F416DD00]();
}

uint64_t WebCore::SQLiteDatabase::close(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DD08](this);
}

uint64_t WebCore::SQLiteDatabase::SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DD28](this);
}

void WebCore::SQLiteDatabase::~SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
}

uint64_t WebCore::SecurityOrigin::createFromString(WebCore::SecurityOrigin *this, const WTF::String *a2)
{
  return MEMORY[0x1F416DDB8](this, a2);
}

uint64_t WebCore::SecurityOrigin::create(WebCore::SecurityOrigin *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416DDD8](this, a2);
}

uint64_t WebCore::SecurityPolicy::setLocalLoadPolicy()
{
  return MEMORY[0x1F416DDE0]();
}

uint64_t WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416DDF8](this, a2, a3, a4);
}

uint64_t WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416DE00](this, a2, a3, a4);
}

uint64_t WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl()
{
  return MEMORY[0x1F416DE10]();
}

uint64_t WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(WebCore::ShapeDetection::TextDetectorImpl *this)
{
  return MEMORY[0x1F416DE18](this);
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::BarcodeDetectorImpl()
{
  return MEMORY[0x1F416DE28]();
}

uint64_t WebCore::StyleSheetList::item(WebCore::StyleSheetList *this)
{
  return MEMORY[0x1F416DE30](this);
}

void WebCore::StyleSheetList::~StyleSheetList(WebCore::StyleSheetList *this)
{
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet()
{
  return MEMORY[0x1F416DEB0]();
}

uint64_t WebCore::WebRTCProvider::create(WebCore::WebRTCProvider *this)
{
  return MEMORY[0x1F416DEC0](this);
}

uint64_t WebCore::WebSocketFrame::parseFrame()
{
  return MEMORY[0x1F416DEC8]();
}

uint64_t WebCore::WebSocketFrame::makeFrameData()
{
  return MEMORY[0x1F416DED0]();
}

uint64_t WebCore::WebSocketFrame::needsExtendedLengthField(WebCore::WebSocketFrame *this)
{
  return MEMORY[0x1F416DED8](this);
}

uint64_t WebCore::WebSocketFrame::WebSocketFrame()
{
  return MEMORY[0x1F416DEE0]();
}

uint64_t WebCore::characterCount()
{
  return MEMORY[0x1F416DEE8]();
}

uint64_t WebCore::endOfParagraph()
{
  return MEMORY[0x1F416DEF8]();
}

void WebCore::ActiveDOMObject::~ActiveDOMObject(WebCore::ActiveDOMObject *this)
{
}

uint64_t WebCore::ArchiveResource::create()
{
  return MEMORY[0x1F416DF70]();
}

uint64_t WebCore::CSSFontFaceRule::style(WebCore::CSSFontFaceRule *this)
{
  return MEMORY[0x1F416DFB0](this);
}

uint64_t WebCore::CSSGroupingRule::deleteRule(WebCore::CSSGroupingRule *this)
{
  return MEMORY[0x1F416DFB8](this);
}

uint64_t WebCore::CSSGroupingRule::insertRule(WebCore::CSSGroupingRule *this, const WTF::String *a2)
{
  return MEMORY[0x1F416DFC0](this, a2);
}

void WebCore::DOMWrapperWorld::~DOMWrapperWorld(WebCore::DOMWrapperWorld *this)
{
}

uint64_t WebCore::DatabaseManager::initialize(WebCore::DatabaseManager *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E010](this, a2);
}

uint64_t WebCore::DatabaseManager::setIsAvailable(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1F416E018](this);
}

uint64_t WebCore::DatabaseManager::hasOpenDatabases(WebCore::DatabaseManager *this, Document *a2)
{
  return MEMORY[0x1F416E020](this, a2);
}

uint64_t WebCore::DatabaseManager::detailsForNameAndOrigin(WebCore::DatabaseManager *this, const WTF::String *a2, WebCore::SecurityOrigin *a3)
{
  return MEMORY[0x1F416E028](this, a2, a3);
}

uint64_t WebCore::DatabaseManager::setClient()
{
  return MEMORY[0x1F416E030]();
}

uint64_t WebCore::DatabaseManager::singleton(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1F416E038](this);
}

uint64_t WebCore::DatabaseTracker::databaseNames()
{
  return MEMORY[0x1F416E048]();
}

uint64_t WebCore::DatabaseTracker::deleteDatabase()
{
  return MEMORY[0x1F416E050]();
}

uint64_t WebCore::DatabaseTracker::deleteDatabaseFileIfEmpty(WebCore::DatabaseTracker *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E060](this, a2);
}

uint64_t WebCore::DatabaseTracker::deleteAllDatabasesImmediately(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1F416E070](this);
}

uint64_t WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskWillBeScheduled(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1F416E080](this);
}

uint64_t WebCore::DatabaseTracker::origins(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1F416E098](this);
}

uint64_t WebCore::DatabaseTracker::singleton(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1F416E0A8](this);
}

uint64_t WebCore::FocusController::setFocused(WebCore::FocusController *this)
{
  return MEMORY[0x1F416E0C0](this);
}

uint64_t WebCore::FocusController::setFocusedFrame()
{
  return MEMORY[0x1F416E0C8]();
}

uint64_t WebCore::FocusController::setInitialFocus()
{
  return MEMORY[0x1F416E0D0]();
}

uint64_t WebCore::FocusController::nextFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1F416E0E0](this, a2);
}

uint64_t WebCore::FocusController::previousFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1F416E0F0](this, a2);
}

uint64_t WebCore::GamepadProvider::setSharedProvider()
{
  return MEMORY[0x1F416E100]();
}

uint64_t WebCore::GamepadProvider::singleton(WebCore::GamepadProvider *this)
{
  return MEMORY[0x1F416E108](this);
}

uint64_t WebCore::HTMLBaseElement::setHref()
{
  return MEMORY[0x1F416E160]();
}

uint64_t WebCore::HTMLFormElement::setEnctype()
{
  return MEMORY[0x1F416E168]();
}

uint64_t WebCore::HTMLFormElement::checkValidity(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F416E170](this);
}

uint64_t WebCore::HTMLFormElement::setAutocomplete()
{
  return MEMORY[0x1F416E178]();
}

uint64_t WebCore::HTMLFormElement::elementsForNativeBindings(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F416E180](this);
}

uint64_t WebCore::HTMLFormElement::reset(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F416E188](this);
}

uint64_t WebCore::HTMLFormElement::submit(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F416E190](this);
}

uint64_t WebCore::HTMLFormElement::setMethod()
{
  return MEMORY[0x1F416E198]();
}

uint64_t WebCore::HTMLLinkElement::setCrossOrigin()
{
  return MEMORY[0x1F416E1A0]();
}

uint64_t WebCore::HTMLLinkElement::relList(WebCore::HTMLLinkElement *this)
{
  return MEMORY[0x1F416E1A8](this);
}

void WebCore::IDBDatabaseInfo::operator delete(void *a1)
{
}

void WebCore::IDBGetAllResult::operator delete(void *a1)
{
}

uint64_t WebCore::LegacyTileCache::setTileBordersVisible(WebCore::LegacyTileCache *this)
{
  return MEMORY[0x1F416E1E8](this);
}

uint64_t WebCore::LegacyTileCache::setTilePaintCountersVisible(WebCore::LegacyTileCache *this)
{
  return MEMORY[0x1F416E1F0](this);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace()
{
  return MEMORY[0x1F416E260]();
}

uint64_t WebCore::RenderBlockFlow::findClosestTextAtAbsolutePoint(WebCore::RenderBlockFlow *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F416E268](this, a2);
}

uint64_t WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties()
{
  return MEMORY[0x1F416E288]();
}

uint64_t WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, NSURLRequest *a2)
{
  return MEMORY[0x1F416E290](this, a2);
}

uint64_t WebCore::RunLoopObserver::invalidate(WebCore::RunLoopObserver *this)
{
  return MEMORY[0x1F416E298](this);
}

void WebCore::RunLoopObserver::~RunLoopObserver(WebCore::RunLoopObserver *this)
{
}

uint64_t WebCore::SQLiteStatement::columnText(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2B8](this);
}

uint64_t WebCore::SQLiteStatement::executeCommand(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2C8](this);
}

uint64_t WebCore::SQLiteStatement::columnBlobAsString(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2D0](this);
}

uint64_t WebCore::SQLiteStatement::isColumnDeclaredAsBlob(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2D8](this);
}

uint64_t WebCore::SQLiteStatement::step(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2E0](this);
}

uint64_t WebCore::SQLiteStatement::reset(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2E8](this);
}

uint64_t WebCore::SQLiteStatement::bindBlob(WebCore::SQLiteStatement *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416E2F8](this, a2, a3);
}

uint64_t WebCore::SQLiteStatement::bindText()
{
  return MEMORY[0x1F416E300]();
}

uint64_t WebCore::SQLiteStatement::columnInt(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E308](this);
}

uint64_t WebCore::VisiblePosition::VisiblePosition()
{
  return MEMORY[0x1F416E3B0]();
}

uint64_t WebCore::XPathExpression::evaluate(WebCore::XPathExpression *this, Node *a2, uint64_t a3, WebCore::XPathResult *a4)
{
  return MEMORY[0x1F416E3C0](this, a2, a3, a4);
}

void WebCore::XPathExpression::~XPathExpression(WebCore::XPathExpression *this)
{
}

void WebCore::XPathNSResolver::~XPathNSResolver(WebCore::XPathNSResolver *this)
{
}

uint64_t WebCore::createLiveRange()
{
  return MEMORY[0x1F416E3F8]();
}

uint64_t WebCore::isDraggableLink(WebCore *this, const Element *a2)
{
  return MEMORY[0x1F416E408](this, a2);
}

uint64_t WebCore::makeSimpleRange()
{
  return MEMORY[0x1F416E418]();
}

{
  return MEMORY[0x1F416E430]();
}

{
  return MEMORY[0x1F416E438]();
}

uint64_t WebCore::reportException()
{
  return MEMORY[0x1F416E440]();
}

uint64_t WebCore::startOfDocument(WebCore *this, const Node *a2)
{
  return MEMORY[0x1F416E448](this, a2);
}

uint64_t WebCore::startOfDocument(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416E450](this, a2);
}

uint64_t WebCore::startOfSentence(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416E458](this, a2);
}

uint64_t WebCore::unwrapCryptoKey()
{
  return MEMORY[0x1F416E468]();
}

uint64_t WebCore::AutofillElements::computeAutofillElements()
{
  return MEMORY[0x1F416E4C8]();
}

uint64_t WebCore::AutofillElements::autofill()
{
  return MEMORY[0x1F416E4D0]();
}

uint64_t WebCore::BackForwardCache::setMaxSize(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1F416E4D8](this);
}

uint64_t WebCore::BackForwardCache::remove(WebCore::BackForwardCache *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1F416E500](this, a2);
}

uint64_t WebCore::BackForwardCache::singleton(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1F416E508](this);
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked()
{
  return MEMORY[0x1F416E560]();
}

void WebCore::BlobRegistryImpl::~BlobRegistryImpl(WebCore::BlobRegistryImpl *this)
{
}

uint64_t WebCore::BroadcastChannel::dispatchMessageTo()
{
  return MEMORY[0x1F416E580]();
}

void WebCore::DatabaseProvider::~DatabaseProvider(WebCore::DatabaseProvider *this)
{
}

uint64_t WebCore::EventListenerMap::find()
{
  return MEMORY[0x1F416E5C0]();
}

uint64_t WebCore::EventListenerMap::EventListenerMap(WebCore::EventListenerMap *this)
{
  return MEMORY[0x1F416E5C8](this);
}

uint64_t WebCore::FileReaderLoader::start()
{
  return MEMORY[0x1F416E5D8]();
}

uint64_t WebCore::FileReaderLoader::cancel(WebCore::FileReaderLoader *this)
{
  return MEMORY[0x1F416E5E0](this);
}

uint64_t WebCore::FileReaderLoader::FileReaderLoader()
{
  return MEMORY[0x1F416E5E8]();
}

uint64_t WebCore::FontCascadeFonts::realizeFallbackRangesAt()
{
  return MEMORY[0x1F416E608]();
}

void WebCore::FontCascadeFonts::~FontCascadeFonts(WebCore::FontCascadeFonts *this)
{
}

uint64_t WebCore::FrameLoadRequest::FrameLoadRequest()
{
  return MEMORY[0x1F416E638]();
}

{
  return MEMORY[0x1F416E648]();
}

void WebCore::FrameLoadRequest::~FrameLoadRequest(WebCore::FrameLoadRequest *this)
{
}

uint64_t WebCore::HTMLImageElement::currentSrc(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F416E660](this);
}

uint64_t WebCore::HTMLImageElement::setCrossOrigin()
{
  return MEMORY[0x1F416E668]();
}

uint64_t WebCore::HTMLImageElement::width(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F416E678](this);
}

uint64_t WebCore::HTMLImageElement::height(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F416E680](this);
}

uint64_t WebCore::HTMLImageElement::setWidth(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F416E688](this);
}

uint64_t WebCore::HTMLImageElement::setHeight(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F416E690](this);
}

uint64_t WebCore::HTMLInputElement::setChecked()
{
  return MEMORY[0x1F416E698]();
}

uint64_t WebCore::HTMLInputElement::setRangeText()
{
  return MEMORY[0x1F416E6A0]();
}

uint64_t WebCore::HTMLInputElement::setValueAsDate()
{
  return MEMORY[0x1F416E6B0]();
}

uint64_t WebCore::HTMLInputElement::setDefaultValue()
{
  return MEMORY[0x1F416E6B8]();
}

uint64_t WebCore::HTMLInputElement::setIndeterminate(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6C0](this);
}

uint64_t WebCore::HTMLInputElement::setValueAsNumber()
{
  return MEMORY[0x1F416E6C8]();
}

uint64_t WebCore::HTMLInputElement::files(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6E8](this);
}

uint64_t WebCore::HTMLInputElement::stepUp(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6F0](this);
}

uint64_t WebCore::HTMLInputElement::setSize(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6F8](this);
}

uint64_t WebCore::HTMLInputElement::setType()
{
  return MEMORY[0x1F416E700]();
}

uint64_t WebCore::HTMLInputElement::setFiles()
{
  return MEMORY[0x1F416E708]();
}

uint64_t WebCore::HTMLInputElement::setValue()
{
  return MEMORY[0x1F416E710]();
}

uint64_t WebCore::HTMLInputElement::setWidth(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E718](this);
}

uint64_t WebCore::HTMLInputElement::stepDown(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E720](this);
}

uint64_t WebCore::HTMLInputElement::setHeight(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E728](this);
}

uint64_t WebCore::HTMLMediaElement::setPreload()
{
  return MEMORY[0x1F416E730]();
}

uint64_t WebCore::HTMLMediaElement::setControls(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E740](this);
}

uint64_t WebCore::HTMLMediaElement::exitFullscreen(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E748](this);
}

uint64_t WebCore::HTMLMediaElement::setCrossOrigin()
{
  return MEMORY[0x1F416E750]();
}

uint64_t WebCore::HTMLMediaElement::setPreservesPitch(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E768](this);
}

uint64_t WebCore::HTMLMediaElement::setMediaCacheDirectory(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E798](this, a2);
}

uint64_t WebCore::HTMLMediaElement::setCurrentTimeForBindings(WebCore::HTMLMediaElement *this, double a2)
{
  return MEMORY[0x1F416E7B0](this, a2);
}

uint64_t WebCore::HTMLMediaElement::didBecomeFullscreenElement(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E7B8](this);
}

uint64_t WebCore::HTMLMediaElement::didStopBeingFullscreenElement(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E7C0](this);
}

uint64_t WebCore::HTMLMediaElement::load(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E7D0](this);
}

uint64_t WebCore::HTMLMediaElement::fastSeek(WebCore::HTMLMediaElement *this, double a2)
{
  return MEMORY[0x1F416E7D8](this, a2);
}

uint64_t WebCore::HTMLOListElement::setStartForBindings(WebCore::HTMLOListElement *this)
{
  return MEMORY[0x1F416E7E0](this);
}

uint64_t WebCore::HTMLStyleElement::setDisabled(WebCore::HTMLStyleElement *this)
{
  return MEMORY[0x1F416E7E8](this);
}

uint64_t WebCore::HTMLTableElement::setCaption()
{
  return MEMORY[0x1F416E7F0]();
}

uint64_t WebCore::HTMLTableElement::createTBody(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E7F8](this);
}

uint64_t WebCore::HTMLTableElement::createTFoot(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E800](this);
}

uint64_t WebCore::HTMLTableElement::createTHead(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E808](this);
}

uint64_t WebCore::HTMLTableElement::deleteTFoot(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E810](this);
}

uint64_t WebCore::HTMLTableElement::deleteTHead(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E818](this);
}

uint64_t WebCore::HTMLTableElement::createCaption(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E820](this);
}

uint64_t WebCore::HTMLTableElement::deleteCaption(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E828](this);
}

uint64_t WebCore::HTMLTableElement::rows(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E830](this);
}

uint64_t WebCore::HTMLTableElement::tBodies(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E838](this);
}

uint64_t WebCore::HTMLTableElement::setTFoot()
{
  return MEMORY[0x1F416E840]();
}

uint64_t WebCore::HTMLTableElement::setTHead()
{
  return MEMORY[0x1F416E848]();
}

uint64_t WebCore::HTMLTableElement::deleteRow(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E850](this);
}

uint64_t WebCore::HTMLTableElement::insertRow(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F416E858](this);
}

uint64_t WebCore::HTMLTitleElement::setText()
{
  return MEMORY[0x1F416E860]();
}

uint64_t WebCore::HTMLVideoElement::webkitExitFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E868](this);
}

uint64_t WebCore::HTMLVideoElement::webkitEnterFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E870](this);
}

uint64_t WebCore::HTMLVideoElement::webkitSupportsFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E878](this);
}

uint64_t WebCore::HTMLVideoElement::webkitDisplayingFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E890](this);
}

uint64_t WebCore::JSHTMLCollection::toWrapped()
{
  return MEMORY[0x1F416E8C8]();
}

uint64_t WebCore::JSStyleSheetList::toWrapped()
{
  return MEMORY[0x1F416E8D0]();
}

uint64_t WebCore::LegacyWebArchive::rawDataRepresentation(WebCore::LegacyWebArchive *this)
{
  return MEMORY[0x1F416E8E0](this);
}

uint64_t WebCore::LegacyWebArchive::create()
{
  return MEMORY[0x1F416E8E8]();
}

{
  return MEMORY[0x1F416E900]();
}

{
  return MEMORY[0x1F416E908]();
}

uint64_t WebCore::LegacyWebArchive::create(WebCore::LegacyWebArchive *this, const WebCore::SimpleRange *a2)
{
  return MEMORY[0x1F416E8F0](this, a2);
}

uint64_t WebCore::LegacyWebArchive::create(WebCore::LegacyWebArchive *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416E8F8](this, a2);
}

uint64_t WebCore::LegacyWebArchive::create(WebCore::LegacyWebArchive *this)
{
  return MEMORY[0x1F416E910](this);
}

uint64_t WebCore::MIMETypeRegistry::isTextMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E940](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::mimeTypeForExtension()
{
  return MEMORY[0x1F416E960]();
}

uint64_t WebCore::MIMETypeRegistry::supportedImageMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1F416E970](this);
}

uint64_t WebCore::MIMETypeRegistry::supportedMediaMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1F416E978](this);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E980](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedMediaMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E988](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::unsupportedTextMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1F416E998](this);
}

uint64_t WebCore::MIMETypeRegistry::supportedNonImageMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1F416E9A0](this);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E9A8](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::preferredExtensionForMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E9B0](this, a2);
}

uint64_t WebCore::NativeNodeFilter::NativeNodeFilter()
{
  return MEMORY[0x1F416E9C0]();
}

uint64_t WebCore::SQLiteFileSystem::deleteDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EA48](this, a2);
}

uint64_t WebCore::ScriptController::createWorld()
{
  return MEMORY[0x1F416EAD8]();
}

uint64_t WebCore::ScriptController::jsWindowProxy(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1F416EAE0](this, a2);
}

uint64_t WebCore::ScriptController::bindingRootObject(WebCore::ScriptController *this)
{
  return MEMORY[0x1F416EAE8](this);
}

uint64_t WebCore::ScriptController::javaScriptContext(WebCore::ScriptController *this)
{
  return MEMORY[0x1F416EAF0](this);
}

uint64_t WebCore::ScriptController::windowScriptObject(WebCore::ScriptController *this)
{
  return MEMORY[0x1F416EAF8](this);
}

uint64_t WebCore::ScriptController::executeScriptIgnoringException()
{
  return MEMORY[0x1F416EB00]();
}

uint64_t WebCore::ScriptController::executeUserAgentScriptInWorldIgnoringException(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416EB10](this, a2, a3);
}

uint64_t WebCore::ThreadGlobalData::initializeEventNames(WebCore::ThreadGlobalData *this)
{
  return MEMORY[0x1F416EB60](this);
}

void WebCore::ValidationBubble::~ValidationBubble(WebCore::ValidationBubble *this)
{
}

uint64_t WebCore::VisibleSelection::VisibleSelection()
{
  return MEMORY[0x1F416EBD8]();
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this, const VisiblePosition *a2, const VisiblePosition *a3)
{
  return MEMORY[0x1F416EBE0](this, a2, a3);
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416EBE8](this, a2);
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F416EBF0](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForLink(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1F416EBF8](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForAllLinks(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1F416EC00](this);
}

uint64_t WebCore::VisitedLinkStore::VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1F416EC08](this);
}

void WebCore::VisitedLinkStore::~VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const CGRect *a2)
{
  return MEMORY[0x1F416EC28](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1F416EC38](this, a2);
}

uint64_t WebCore::findIntersection(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, const WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  return MEMORY[0x1F416EC40](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::nextLinePosition()
{
  return MEMORY[0x1F416EC48]();
}

uint64_t WebCore::startOfParagraph()
{
  return MEMORY[0x1F416EC58]();
}

uint64_t WebCore::CredentialStorage::getFromPersistentStorage()
{
  return MEMORY[0x1F416ED18]();
}

uint64_t WebCore::CredentialStorage::get()
{
  return MEMORY[0x1F416ED30]();
}

uint64_t WebCore::DOMImplementation::createDocument()
{
  return MEMORY[0x1F416ED50]();
}

uint64_t WebCore::DOMImplementation::createDocumentType()
{
  return MEMORY[0x1F416ED58]();
}

uint64_t WebCore::DOMImplementation::createHTMLDocument()
{
  return MEMORY[0x1F416ED60]();
}

uint64_t WebCore::DOMImplementation::createCSSStyleSheet(WebCore::DOMImplementation *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416ED68](this, a2, a3);
}

uint64_t WebCore::FullscreenManager::cancelFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F416ED88](this);
}

uint64_t WebCore::GraphicsContextCG::GraphicsContextCG()
{
  return MEMORY[0x1F416EDD8]();
}

void WebCore::GraphicsContextCG::~GraphicsContextCG(WebCore::GraphicsContextCG *this)
{
}

uint64_t WebCore::HTMLAnchorElement::text(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1F416EE20](this);
}

uint64_t WebCore::HTMLAnchorElement::relList(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1F416EE28](this);
}

uint64_t WebCore::HTMLButtonElement::setType()
{
  return MEMORY[0x1F416EE30]();
}

uint64_t WebCore::HTMLCanvasElement::setWidth(WebCore::HTMLCanvasElement *this)
{
  return MEMORY[0x1F416EE38](this);
}

uint64_t WebCore::HTMLCanvasElement::setHeight(WebCore::HTMLCanvasElement *this)
{
  return MEMORY[0x1F416EE40](this);
}

uint64_t WebCore::HTMLCanvasElement::toDataURL(WebCore::HTMLCanvasElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EE48](this, a2);
}

uint64_t WebCore::HTMLOptionElement::setSelected(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F416EE50](this);
}

uint64_t WebCore::HTMLOptionElement::setLabel()
{
  return MEMORY[0x1F416EE58]();
}

uint64_t WebCore::HTMLOptionElement::setValue()
{
  return MEMORY[0x1F416EE60]();
}

uint64_t WebCore::HTMLScriptElement::setCrossOrigin()
{
  return MEMORY[0x1F416EE68]();
}

uint64_t WebCore::HTMLScriptElement::setText()
{
  return MEMORY[0x1F416EE70]();
}

uint64_t WebCore::HTMLScriptElement::setAsync(WebCore::HTMLScriptElement *this)
{
  return MEMORY[0x1F416EE78](this);
}

uint64_t WebCore::HTMLSelectElement::setSelectedIndex(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F416EE80](this);
}

uint64_t WebCore::HTMLSelectElement::add()
{
  return MEMORY[0x1F416EE90]();
}

uint64_t WebCore::HTMLSelectElement::item(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F416EE98](this);
}

uint64_t WebCore::HTMLSelectElement::remove(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F416EEA0](this);
}

uint64_t WebCore::HTMLSelectElement::options(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F416EEA8](this);
}

uint64_t WebCore::HTMLSelectElement::setSize(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F416EEB0](this);
}

uint64_t WebCore::HTMLSelectElement::setValue(WebCore::HTMLSelectElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EEB8](this, a2);
}

uint64_t WebCore::HTMLSelectElement::namedItem()
{
  return MEMORY[0x1F416EEC0]();
}

uint64_t WebCore::HistoryController::replaceCurrentItem()
{
  return MEMORY[0x1F416EEE0]();
}

uint64_t WebCore::HistoryController::saveDocumentAndScrollState(WebCore::HistoryController *this)
{
  return MEMORY[0x1F416EEE8](this);
}

uint64_t WebCore::JSXPathExpression::toWrapped()
{
  return MEMORY[0x1F416EF00]();
}

uint64_t WebCore::MouseRelatedEvent::offsetX(WebCore::MouseRelatedEvent *this)
{
  return MEMORY[0x1F416EF60](this);
}

uint64_t WebCore::MouseRelatedEvent::offsetY(WebCore::MouseRelatedEvent *this)
{
  return MEMORY[0x1F416EF68](this);
}

uint64_t WebCore::PageConfiguration::PageConfiguration()
{
  return MEMORY[0x1F416EFB0]();
}

void WebCore::PageConfiguration::~PageConfiguration(WebCore::PageConfiguration *this)
{
}

uint64_t WebCore::PageConsoleClient::shouldPrintExceptions(WebCore::PageConsoleClient *this)
{
  return MEMORY[0x1F416EFC0](this);
}

uint64_t WebCore::PageConsoleClient::setShouldPrintExceptions(WebCore::PageConsoleClient *this)
{
  return MEMORY[0x1F416EFC8](this);
}

uint64_t WebCore::SQLiteTransaction::begin(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F416F008](this);
}

uint64_t WebCore::SQLiteTransaction::commit(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F416F010](this);
}

uint64_t WebCore::SQLiteTransaction::rollback(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F416F018](this);
}

uint64_t WebCore::SQLiteTransaction::SQLiteTransaction(WebCore::SQLiteTransaction *this, WebCore::SQLiteDatabase *a2)
{
  return MEMORY[0x1F416F020](this, a2);
}

void WebCore::SQLiteTransaction::~SQLiteTransaction(WebCore::SQLiteTransaction *this)
{
}

uint64_t WebCore::SubresourceLoader::create()
{
  return MEMORY[0x1F416F060]();
}

void WebCore::WebSocketDeflater::~WebSocketDeflater(WebCore::WebSocketDeflater *this)
{
}

void WebCore::WebSocketInflater::~WebSocketInflater(WebCore::WebSocketInflater *this)
{
}

uint64_t WebCore::isStartOfDocument(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416F0A8](this, a2);
}

uint64_t WebCore::makeBoundaryPoint(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416F0B0](this, a2);
}

uint64_t WebCore::sRGBColorSpaceRef(WebCore *this)
{
  return MEMORY[0x1F416F0C0](this);
}

uint64_t WebCore::screenScaleFactor(WebCore *this, UIScreen *a2)
{
  return MEMORY[0x1F416F0C8](this, a2);
}

uint64_t WebCore::serializeFragment()
{
  return MEMORY[0x1F416F0D0]();
}

uint64_t WebCore::CustomElementQueue::processQueue()
{
  return MEMORY[0x1F416F0F0]();
}

uint64_t WebCore::DocumentFullscreen::webkitExitFullscreen(WebCore::DocumentFullscreen *this, Document *a2)
{
  return MEMORY[0x1F416F110](this, a2);
}

uint64_t WebCore::HTMLMarqueeElement::setScrollDelay(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F416F140](this);
}

uint64_t WebCore::HTMLMarqueeElement::setScrollAmount(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F416F148](this);
}

uint64_t WebCore::HTMLMarqueeElement::stop(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F416F150](this);
}

uint64_t WebCore::HTMLMarqueeElement::start(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F416F158](this);
}

uint64_t WebCore::HTMLMarqueeElement::setLoop(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F416F160](this);
}

uint64_t WebCore::PlatformPasteboard::setBufferForType()
{
  return MEMORY[0x1F416F2F0]();
}

uint64_t WebCore::PlatformPasteboard::setStringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416F2F8](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::allPasteboardItemInfo(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F308](this);
}

uint64_t WebCore::PlatformPasteboard::informationForItemAtIndex(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F310](this);
}

uint64_t WebCore::PlatformPasteboard::urlStringSuitableForLoading(WebCore::PlatformPasteboard *this, WTF::String *a2)
{
  return MEMORY[0x1F416F318](this, a2);
}

uint64_t WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers()
{
  return MEMORY[0x1F416F320]();
}

uint64_t WebCore::PlatformPasteboard::containsURLStringSuitableForLoading(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F328](this);
}

uint64_t WebCore::PlatformPasteboard::url(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F330](this);
}

uint64_t WebCore::PlatformPasteboard::color(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F338](this);
}

uint64_t WebCore::PlatformPasteboard::write(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416F340](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::write()
{
  return MEMORY[0x1F416F348]();
}

{
  return MEMORY[0x1F416F350]();
}

{
  return MEMORY[0x1F416F358]();
}

{
  return MEMORY[0x1F416F360]();
}

uint64_t WebCore::PlatformPasteboard::setURL()
{
  return MEMORY[0x1F416F368]();
}

uint64_t WebCore::PlatformPasteboard::addTypes()
{
  return MEMORY[0x1F416F370]();
}

uint64_t WebCore::PlatformPasteboard::setColor()
{
  return MEMORY[0x1F416F378]();
}

uint64_t WebCore::PlatformPasteboard::setTypes()
{
  return MEMORY[0x1F416F380]();
}

uint64_t WebCore::PlatformPasteboard::PlatformPasteboard(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F388](this, a2);
}

void WebCore::PluginInfoProvider::~PluginInfoProvider(WebCore::PluginInfoProvider *this)
{
}

uint64_t WebCore::SecurityOriginData::fromDatabaseIdentifier()
{
  return MEMORY[0x1F416F460]();
}

uint64_t WebCore::WebSocketHandshake::readServerHandshake()
{
  return MEMORY[0x1F416F4D8]();
}

uint64_t WebCore::WebSocketHandshake::addExtensionProcessor()
{
  return MEMORY[0x1F416F4E0]();
}

uint64_t WebCore::WebSocketHandshake::reset(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F416F4E8](this);
}

uint64_t WebCore::WebSocketHandshake::WebSocketHandshake(WebCore::WebSocketHandshake *this, const WTF::URL *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  return MEMORY[0x1F416F4F0](this, a2, a3, a4, a5);
}

void WebCore::WebSocketHandshake::~WebSocketHandshake(WebCore::WebSocketHandshake *this)
{
}

uint64_t WebCore::documentTypeString(WebCore *this, const Document *a2)
{
  return MEMORY[0x1F416F528](this, a2);
}

uint64_t WebCore::isEditablePosition()
{
  return MEMORY[0x1F416F530]();
}

uint64_t WebCore::makeNSArrayElement()
{
  return MEMORY[0x1F416F538]();
}

uint64_t WebCore::makeNSArrayElement(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1F416F540](this, a2);
}

uint64_t WebCore::platformStrategies(WebCore *this)
{
  return MEMORY[0x1F416F550](this);
}

void WebCore::DeflateResultHolder::~DeflateResultHolder(WebCore::DeflateResultHolder *this)
{
}

uint64_t WebCore::HTMLTableColElement::setSpan(WebCore::HTMLTableColElement *this)
{
  return MEMORY[0x1F416F5B8](this);
}

uint64_t WebCore::HTMLTableRowElement::deleteCell(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1F416F5C0](this);
}

uint64_t WebCore::HTMLTableRowElement::insertCell(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1F416F5C8](this);
}

uint64_t WebCore::HTMLTableRowElement::cells(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1F416F5D0](this);
}

uint64_t WebCore::HTMLTextAreaElement::setDefaultValue()
{
  return MEMORY[0x1F416F5D8]();
}

uint64_t WebCore::HTMLTextAreaElement::setCols(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1F416F5E0](this);
}

uint64_t WebCore::HTMLTextAreaElement::setRows(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1F416F5E8](this);
}

uint64_t WebCore::HTMLTextAreaElement::setValue()
{
  return MEMORY[0x1F416F5F0]();
}

void WebCore::InflateResultHolder::~InflateResultHolder(WebCore::InflateResultHolder *this)
{
}

uint64_t WebCore::InspectorController::evaluateForTestInFrontend(WebCore::InspectorController *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F658](this, a2);
}

uint64_t WebCore::InspectorController::show(WebCore::InspectorController *this)
{
  return MEMORY[0x1F416F670](this);
}

uint64_t WebCore::JSDOMImplementation::toWrapped()
{
  return MEMORY[0x1F416F678]();
}

uint64_t WebCore::ResourceRequestBase::setURL(WebCore::ResourceRequestBase *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416F878](this, a2);
}

uint64_t WebCore::TextResourceDecoder::decodeAndFlush()
{
  return MEMORY[0x1F416F8C0]();
}

uint64_t WebCore::TextResourceDecoder::create(WebCore::TextResourceDecoder *this, const WTF::String *a2, const PAL::TextEncoding *a3)
{
  return MEMORY[0x1F416F8D0](this, a2, a3);
}

void WebCore::TextResourceDecoder::~TextResourceDecoder(WebCore::TextResourceDecoder *this)
{
}

uint64_t WebCore::copyLocalizedString(WebCore *this, const __CFString *a2)
{
  return MEMORY[0x1F416F980](this, a2);
}

uint64_t WebCore::createInternalError()
{
  return MEMORY[0x1F416F990]();
}

uint64_t WebCore::provideNotification()
{
  return MEMORY[0x1F416F9A8]();
}

uint64_t WebCore::unitedBoundingBoxes()
{
  return MEMORY[0x1F416F9D8]();
}

uint64_t WebCore::DeprecatedCSSOMValue::operator delete()
{
  return MEMORY[0x1F416FA18]();
}

uint64_t WebCore::HTMLTableCellElement::setColSpan(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F416FA30](this);
}

uint64_t WebCore::HTMLTableCellElement::setRowSpanForBindings(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F416FA38](this);
}

uint64_t WebCore::HTMLTableCellElement::setScope()
{
  return MEMORY[0x1F416FA40]();
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA68](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA70](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme(WebCore::LegacySchemeRegistry *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416FAC8](this, a2, a3);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsAllowingDatabaseAccessInPrivateBrowsing(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FAE0](this, a2);
}

uint64_t WebCore::NetworkStateNotifier::singleton(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1F416FB48](this);
}

uint64_t WebCore::PlatformEventFactory::createPlatformKeyboardEvent()
{
  return MEMORY[0x1F416FBB8]();
}

uint64_t WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason()
{
  return MEMORY[0x1F416FBD8]();
}

uint64_t WebCore::ResourceHandleClient::ResourceHandleClient(WebCore::ResourceHandleClient *this)
{
  return MEMORY[0x1F416FBE0](this);
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this, const WTF::URL *a2, const WTF::String *a3, uint64_t a4, const WTF::String *a5)
{
  return MEMORY[0x1F416FC68](this, a2, a3, a4, a5);
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F416FC70](this);
}

uint64_t WebCore::endOfEditableContent(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F416FD30](this, a2);
}

uint64_t WebCore::previousLinePosition()
{
  return MEMORY[0x1F416FD68]();
}

uint64_t WebCore::provideGeolocationTo(WebCore *this, Page *a2, WebCore::GeolocationClient *a3)
{
  return MEMORY[0x1F416FD70](this, a2, a3);
}

uint64_t WebCore::threadGlobalDataSlow(WebCore *this)
{
  return MEMORY[0x1F416FD80](this);
}

uint64_t WebCore::BackForwardController::currentItem(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F416FDB8](this);
}

uint64_t WebCore::BackForwardController::itemAtIndex(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F416FDC0](this);
}

uint64_t WebCore::DestinationColorSpace::SRGB(WebCore::DestinationColorSpace *this)
{
  return MEMORY[0x1F416FE80](this);
}

uint64_t WebCore::DeviceOrientationData::create()
{
  return MEMORY[0x1F416FE90]();
}

uint64_t WebCore::GeolocationController::errorOccurred()
{
  return MEMORY[0x1F416FFC0]();
}

uint64_t WebCore::GeolocationController::supplementName(WebCore::GeolocationController *this)
{
  return MEMORY[0x1F416FFC8](this);
}

uint64_t WebCore::GeolocationController::positionChanged()
{
  return MEMORY[0x1F416FFD0]();
}

uint64_t WebCore::HTMLOptionsCollection::setSelectedIndex(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1F4170010](this);
}

uint64_t WebCore::HTMLOptionsCollection::add()
{
  return MEMORY[0x1F4170018]();
}

uint64_t WebCore::HTMLOptionsCollection::remove(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1F4170020](this);
}

uint64_t WebCore::HTMLOptionsCollection::setLength(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1F4170028](this);
}

uint64_t WebCore::JSCSSStyleDeclaration::toWrapped()
{
  return MEMORY[0x1F4170070]();
}

uint64_t WebCore::JSDeprecatedCSSOMRect::toWrapped()
{
  return MEMORY[0x1F4170078]();
}

uint64_t WebCore::MediaKeySystemRequest::allow(WebCore::MediaKeySystemRequest *this)
{
  return MEMORY[0x1F4170088](this);
}

uint64_t WebCore::NetworkStorageSession::deleteAllCookies()
{
  return MEMORY[0x1F41700C8]();
}

uint64_t WebCore::NetworkStorageSession::processMayUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170100](this);
}

uint64_t WebCore::NetworkStorageSession::permitProcessToUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170140](this);
}

uint64_t WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier()
{
  return MEMORY[0x1F41701A0]();
}

uint64_t WebCore::NetworkStorageSession::NetworkStorageSession(WebCore::NetworkStorageSession *this, SessionID a2)
{
  return MEMORY[0x1F4170220](this, a2.m_identifier);
}

uint64_t WebCore::NetworkStorageSession::NetworkStorageSession()
{
  return MEMORY[0x1F4170228]();
}

void WebCore::NetworkStorageSession::~NetworkStorageSession(WebCore::NetworkStorageSession *this)
{
}

uint64_t WebCore::RenderLayerCompositor::layerTreeAsText()
{
  return MEMORY[0x1F4170280]();
}

uint64_t WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(WebCore::SQLiteDatabaseTracker *this)
{
  return MEMORY[0x1F4170288](this);
}

uint64_t WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(WebCore::SQLiteDatabaseTracker *this)
{
  return MEMORY[0x1F4170290](this);
}

uint64_t WebCore::SQLiteDatabaseTracker::setClient()
{
  return MEMORY[0x1F4170298]();
}

void WebCore::SerializedScriptValue::~SerializedScriptValue(WebCore::SerializedScriptValue *this)
{
}

uint64_t WebCore::UserContentController::addUserScript()
{
  return MEMORY[0x1F41702F8]();
}

uint64_t WebCore::UserContentController::removeUserScript(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4170300](this, a2, a3);
}

uint64_t WebCore::UserContentController::addUserStyleSheet()
{
  return MEMORY[0x1F4170308]();
}

uint64_t WebCore::UserContentController::removeUserScripts(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1F4170310](this, a2);
}

uint64_t WebCore::UserContentController::removeAllUserContent(WebCore::UserContentController *this)
{
  return MEMORY[0x1F4170318](this);
}

uint64_t WebCore::UserContentController::removeUserStyleSheet(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4170320](this, a2, a3);
}

uint64_t WebCore::UserContentController::removeUserStyleSheets(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1F4170328](this, a2);
}

uint64_t WebCore::UserContentController::create(WebCore::UserContentController *this)
{
  return MEMORY[0x1F4170330](this);
}

uint64_t WebCore::UserContentURLPattern::parse()
{
  return MEMORY[0x1F4170338]();
}

uint64_t WebCore::mainThreadNormalWorld(WebCore *this)
{
  return MEMORY[0x1F4170418](this);
}

uint64_t WebCore::resolveCharacterRange()
{
  return MEMORY[0x1F4170438]();
}

uint64_t WebCore::setPlatformStrategies()
{
  return MEMORY[0x1F4170448]();
}

uint64_t WebCore::CaptionUserPreferences::createTestingModeToken(WebCore::CaptionUserPreferences *this)
{
  return MEMORY[0x1F41704A8](this);
}

uint64_t WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded()
{
  return MEMORY[0x1F41704B0]();
}

uint64_t WebCore::FragmentedSharedBuffer::create(WebCore::FragmentedSharedBuffer *this, NSData *a2)
{
  return MEMORY[0x1F41704F0](this, a2);
}

uint64_t WebCore::HTMLFormControlElement::setFormAction()
{
  return MEMORY[0x1F4170DB8]();
}

uint64_t WebCore::HTMLFormControlElement::setFormMethod()
{
  return MEMORY[0x1F4170DC0]();
}

uint64_t WebCore::HTMLFormControlElement::setFormEnctype()
{
  return MEMORY[0x1F4170DC8]();
}

uint64_t WebCore::HTMLFormControlElement::setAutocomplete()
{
  return MEMORY[0x1F4170DD0]();
}

uint64_t WebCore::JSDeprecatedCSSOMValue::toWrapped()
{
  return MEMORY[0x1F4170DF0]();
}

uint64_t WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(WebCore::MutableStyleProperties *this)
{
  return MEMORY[0x1F4170E08](this);
}

void WebCore::MutableStyleProperties::~MutableStyleProperties(WebCore::MutableStyleProperties *this)
{
}

uint64_t WebCore::NotificationController::clientFrom(WebCore::NotificationController *this, Page *a2)
{
  return MEMORY[0x1F4170E18](this, a2);
}

uint64_t WebCore::StorageEventDispatcher::dispatchLocalStorageEvents()
{
  return MEMORY[0x1F4170EC0]();
}

uint64_t WebCore::StorageEventDispatcher::dispatchSessionStorageEvents()
{
  return MEMORY[0x1F4170EC8]();
}

uint64_t WebCore::WebSocketDeflateFramer::createExtensionProcessor(WebCore::WebSocketDeflateFramer *this)
{
  return MEMORY[0x1F4170ED8](this);
}

uint64_t WebCore::WebSocketDeflateFramer::deflate(WebCore::WebSocketDeflateFramer *this, WebCore::WebSocketFrame *a2)
{
  return MEMORY[0x1F4170EE0](this, a2);
}

uint64_t WebCore::WebSocketDeflateFramer::didFail(WebCore::WebSocketDeflateFramer *this)
{
  return MEMORY[0x1F4170EE8](this);
}

uint64_t WebCore::WebSocketDeflateFramer::inflate(WebCore::WebSocketDeflateFramer *this, WebCore::WebSocketFrame *a2)
{
  return MEMORY[0x1F4170EF0](this, a2);
}

uint64_t WebCore::createFragmentFromText(WebCore *this, const WebCore::SimpleRange *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170F10](this, a2, a3);
}

uint64_t WebCore::externalRepresentation()
{
  return MEMORY[0x1F4170F20]();
}

uint64_t WebCore::startOfEditableContent(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1F4170F48](this, a2);
}

uint64_t WebCore::ApplicationCacheStorage::ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170F60](this, a2, a3);
}

uint64_t WebCore::GeolocationPositionData::GeolocationPositionData(WebCore::GeolocationPositionData *this, CLLocation *a2)
{
  return MEMORY[0x1F4170F98](this, a2);
}

uint64_t WebCore::HTMLTableSectionElement::rows(WebCore::HTMLTableSectionElement *this)
{
  return MEMORY[0x1F4170FA0](this);
}

uint64_t WebCore::HTMLTableSectionElement::deleteRow(WebCore::HTMLTableSectionElement *this)
{
  return MEMORY[0x1F4170FA8](this);
}

uint64_t WebCore::HTMLTableSectionElement::insertRow(WebCore::HTMLTableSectionElement *this)
{
  return MEMORY[0x1F4170FB0](this);
}

uint64_t WebCore::JSHTMLOptionsCollection::toWrapped()
{
  return MEMORY[0x1F4170FB8]();
}

uint64_t WebCore::atBoundaryOfGranularity()
{
  return MEMORY[0x1F41710B8]();
}

uint64_t WebCore::computeSharedStringHash()
{
  return MEMORY[0x1F41710D8]();
}

uint64_t WebCore::computeSharedStringHash(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F41710E0](this, a2);
}

uint64_t WebCore::createDragImageForRange(WebCore *this, WebCore::LocalFrame *a2, const WebCore::SimpleRange *a3)
{
  return MEMORY[0x1F41710E8](this, a2, a3);
}

uint64_t WebCore::provideMediaKeySystemTo()
{
  return MEMORY[0x1F4171100]();
}

uint64_t WebCore::readSerializedCryptoKey()
{
  return MEMORY[0x1F4171108]();
}

uint64_t WebCore::wrapSerializedCryptoKey()
{
  return MEMORY[0x1F4171128]();
}

uint64_t WebCore::DeprecatedGlobalSettings::setOpusDecoderEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171160](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171168](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::allowsAnySSLCertificate(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171170](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setNetworkInterfaceName(WebCore::DeprecatedGlobalSettings *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171178](this, a2);
}

uint64_t WebCore::DeprecatedGlobalSettings::setVorbisDecoderEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171180](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setMockScrollbarsEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171188](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setTrackingPreventionEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171198](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setAudioSessionCategoryOverride(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711A0](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setNetworkDataUsageTrackingEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711A8](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711B0](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711B8](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::shared(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711C0](this);
}

uint64_t WebCore::DocumentMarkerController::removeMarkers()
{
  return MEMORY[0x1F41711D8]();
}

uint64_t WebCore::DocumentMarkerController::markersInRange()
{
  return MEMORY[0x1F41711F0]();
}

uint64_t WebCore::DocumentMarkerController::renderedRectsForMarkers()
{
  return MEMORY[0x1F4171200]();
}

uint64_t WebCore::DummyModelPlayerProvider::DummyModelPlayerProvider(WebCore::DummyModelPlayerProvider *this)
{
  return MEMORY[0x1F4171228](this);
}

void WebCore::DummyModelPlayerProvider::~DummyModelPlayerProvider(WebCore::DummyModelPlayerProvider *this)
{
}

uint64_t WebCore::JSDeprecatedCSSOMCounter::toWrapped()
{
  return MEMORY[0x1F4171250]();
}

uint64_t WebCore::StorageNamespaceProvider::setSessionIDForTesting(WebCore::StorageNamespaceProvider *this, SessionID a2)
{
  return MEMORY[0x1F4171340](this, a2.m_identifier);
}

uint64_t WebCore::StorageNamespaceProvider::StorageNamespaceProvider(WebCore::StorageNamespaceProvider *this)
{
  return MEMORY[0x1F4171348](this);
}

uint64_t WebCore::createFragmentFromMarkup()
{
  return MEMORY[0x1F4171380]();
}

uint64_t WebCore::distanceBetweenPositions(WebCore *this, const VisiblePosition *a2, const VisiblePosition *a3)
{
  return MEMORY[0x1F4171388](this, a2, a3);
}

uint64_t WebCore::JSDeprecatedCSSOMRGBColor::toWrapped()
{
  return MEMORY[0x1F4171468]();
}

uint64_t WebCore::RenderLayerScrollableArea::scrollToOffset()
{
  return MEMORY[0x1F4171508]();
}

uint64_t WebCore::defaultWebCryptoMasterKey(WebCore *this)
{
  return MEMORY[0x1F4171550](this);
}

uint64_t WebCore::getOutOfLineCachedWrapper()
{
  return MEMORY[0x1F4171578]();
}

uint64_t WebCore::roundAndClampToSRGBALossy(WebCore *this, CGColor *a2)
{
  return MEMORY[0x1F4171588](this, a2);
}

uint64_t WebCore::ContextDestructionObserver::contextDestroyed(WebCore::ContextDestructionObserver *this)
{
  return MEMORY[0x1F41715B8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setMaxLength(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F41715E8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setRangeText()
{
  return MEMORY[0x1F41715F0]();
}

{
  return MEMORY[0x1F41715F8]();
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionEnd(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4171600](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionRange()
{
  return MEMORY[0x1F4171608]();
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionStart(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4171610](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setCanShowPlaceholder(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4171618](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionDirection(WebCore::HTMLTextFormControlElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171620](this, a2);
}

uint64_t WebCore::HTMLTextFormControlElement::select()
{
  return MEMORY[0x1F4171628]();
}

uint64_t WebCore::ThreadableWebSocketChannel::validateURL(WebCore::ThreadableWebSocketChannel *this, Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4171770](this, a2, a3);
}

uint64_t WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel(WebCore::ThreadableWebSocketChannel *this)
{
  return MEMORY[0x1F4171780](this);
}

uint64_t WebCore::ValidatedFormListedElement::checkValidity()
{
  return MEMORY[0x1F41717A8]();
}

uint64_t WebCore::ValidatedFormListedElement::setCustomValidity(WebCore::ValidatedFormListedElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F41717B0](this, a2);
}

uint64_t WebCore::AlternativeTextUIController::addAlternatives()
{
  return MEMORY[0x1F4171808]();
}

uint64_t WebCore::AlternativeTextUIController::removeAlternatives()
{
  return MEMORY[0x1F4171810]();
}

uint64_t WebCore::AlternativeTextUIController::alternativesForContext()
{
  return MEMORY[0x1F4171820]();
}

uint64_t WebCore::DeviceOrientationClientMock::setOrientation()
{
  return MEMORY[0x1F4171840]();
}

uint64_t WebCore::DeviceOrientationClientMock::DeviceOrientationClientMock(WebCore::DeviceOrientationClientMock *this)
{
  return MEMORY[0x1F4171848](this);
}

uint64_t WebCore::createPrivateStorageSession()
{
  return MEMORY[0x1F4171A40]();
}

uint64_t WebCore::withinTextUnitOfGranularity()
{
  return MEMORY[0x1F4171AA8]();
}

uint64_t WebCore::makeDeprecatedLegacyPosition(WebCore *this, const BoundaryPoint *a2)
{
  return MEMORY[0x1F4171BB0](this, a2);
}

uint64_t WebCore::GameControllerGamepadProvider::singleton(WebCore::GameControllerGamepadProvider *this)
{
  return MEMORY[0x1F4171C50](this);
}

uint64_t WebCore::createDefaultParagraphElement(WebCore *this, Document *a2)
{
  return MEMORY[0x1F4171DB0](this, a2);
}

uint64_t WebCore::WebSQLiteDatabaseTrackerClient::sharedWebSQLiteDatabaseTrackerClient(WebCore::WebSQLiteDatabaseTrackerClient *this)
{
  return MEMORY[0x1F4171E70](this);
}

uint64_t WebCore::enclosingTextUnitOfGranularity()
{
  return MEMORY[0x1F4171E80]();
}

uint64_t WebCore::makeRangeSelectingNodeContents(WebCore *this, Node *a2)
{
  return MEMORY[0x1F4171EA0](this, a2);
}

uint64_t WebCore::removeQLPreviewConverterForURL(WebCore *this, NSURL *a2)
{
  return MEMORY[0x1F4171EB8](this, a2);
}

uint64_t WebCore::CrossOriginPreflightResultCache::singleton(WebCore::CrossOriginPreflightResultCache *this)
{
  return MEMORY[0x1F4171EF8](this);
}

uint64_t WebCore::createTemporaryFileForQuickLook(WebCore *this, NSString *a2)
{
  return MEMORY[0x1F4171FA0](this, a2);
}

void WebCore::IDBDatabaseNameAndVersionRequest::operator delete(void *a1)
{
}

uint64_t WebCore::setAdditionalSupportedImageTypes()
{
  return MEMORY[0x1F4172118]();
}

uint64_t WebCore::OriginAccessPatternsForWebProcess::singleton(WebCore::OriginAccessPatternsForWebProcess *this)
{
  return MEMORY[0x1F4172130](this);
}

uint64_t WebCore::QLPreviewGetSupportedMIMETypesSet(WebCore *this)
{
  return MEMORY[0x1F4172138](this);
}

uint64_t WebCore::registerQLPreviewConverterIfNeeded(WebCore *this, NSURL *a2, NSString *a3, NSData *a4)
{
  return MEMORY[0x1F4172250](this, a2, a3, a4);
}

uint64_t WebCore::positionOfNextBoundaryOfGranularity()
{
  return MEMORY[0x1F41722A0]();
}

uint64_t WebCore::serializePreservingVisualAppearance()
{
  return MEMORY[0x1F41722A8]();
}

uint64_t WebCore::registerMemoryReleaseNotifyCallbacks(WebCore *this)
{
  return MEMORY[0x1F41722E0](this);
}

uint64_t WebCore::standardUserAgentWithApplicationName()
{
  return MEMORY[0x1F41722F0]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::hasFrontends(WebCore::LegacyWebSocketInspectorInstrumentation *this)
{
  return MEMORY[0x1F4172370](this);
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket()
{
  return MEMORY[0x1F4172378]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didCreateWebSocket()
{
  return MEMORY[0x1F4172380]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didSendWebSocketFrame()
{
  return MEMORY[0x1F4172388]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrame()
{
  return MEMORY[0x1F4172390]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError()
{
  return MEMORY[0x1F4172398]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::willSendWebSocketHandshakeRequest()
{
  return MEMORY[0x1F41723A0]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketHandshakeResponse()
{
  return MEMORY[0x1F41723A8]();
}

uint64_t WebCore::mac()
{
  return MEMORY[0x1F41723D0]();
}

uint64_t WebCore::initializeMaximumHTTPConnectionCountPerHost(WebCore *this)
{
  return MEMORY[0x1F4172428](this);
}

uint64_t WebCore::Attr::style(WebCore::Attr *this)
{
  return MEMORY[0x1F4172478](this);
}

uint64_t WebCore::Attr::setValue()
{
  return MEMORY[0x1F4172480]();
}

void WebCore::Font::~Font(WebCore::Font *this)
{
}

uint64_t WebCore::Icon::create()
{
  return MEMORY[0x1F41724B0]();
}

void WebCore::Icon::~Icon(WebCore::Icon *this)
{
}

uint64_t WebCore::Node::childNodes(WebCore::Node *this)
{
  return MEMORY[0x1F41724C8](this);
}

uint64_t WebCore::Node::appendChild(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1F41724D0](this, a2);
}

uint64_t WebCore::Node::removeChild(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1F41724D8](this, a2);
}

uint64_t WebCore::Node::insertBefore()
{
  return MEMORY[0x1F41724E0]();
}

uint64_t WebCore::Node::replaceChild(WebCore::Node *this, WebCore::Node *a2, WebCore::Node *a3)
{
  return MEMORY[0x1F41724E8](this, a2, a3);
}

uint64_t WebCore::Node::removedLastRef(WebCore::Node *this)
{
  return MEMORY[0x1F41724F0](this);
}

uint64_t WebCore::Node::setTextContent()
{
  return MEMORY[0x1F41724F8]();
}

uint64_t WebCore::Node::absoluteBoundingRect(WebCore::Node *this, BOOL *a2)
{
  return MEMORY[0x1F4172510](this, a2);
}

uint64_t WebCore::Node::cloneNodeForBindings(WebCore::Node *this)
{
  return MEMORY[0x1F4172518](this);
}

uint64_t WebCore::Node::compareDocumentPosition(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172520](this, a2);
}

uint64_t WebCore::Node::remove(WebCore::Node *this)
{
  return MEMORY[0x1F4172528](this);
}

uint64_t WebCore::Node::inspect(WebCore::Node *this)
{
  return MEMORY[0x1F4172530](this);
}

uint64_t WebCore::Node::normalize(WebCore::Node *this)
{
  return MEMORY[0x1F4172538](this);
}

uint64_t WebCore::Page::pluginData(WebCore::Page *this)
{
  return MEMORY[0x1F4172548](this);
}

uint64_t WebCore::Page::setGroupName(WebCore::Page *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172558](this, a2);
}

uint64_t WebCore::Page::setIsVisible(WebCore::Page *this)
{
  return MEMORY[0x1F4172560](this);
}

uint64_t WebCore::Page::setSessionID(WebCore::Page *this, SessionID a2)
{
  return MEMORY[0x1F4172570](this, a2.m_identifier);
}

uint64_t WebCore::Page::rangeOfString()
{
  return MEMORY[0x1F4172578]();
}

uint64_t WebCore::Page::setIsInWindow(WebCore::Page *this)
{
  return MEMORY[0x1F4172580](this);
}

uint64_t WebCore::Page::setPagination()
{
  return MEMORY[0x1F4172588]();
}

uint64_t WebCore::Page::setInspectable(WebCore::Page *this)
{
  return MEMORY[0x1F4172598](this);
}

uint64_t WebCore::Page::addSchedulePair()
{
  return MEMORY[0x1F41725B8]();
}

uint64_t WebCore::Page::updateRendering(WebCore::Page *this)
{
  return MEMORY[0x1F41725D0](this);
}

uint64_t WebCore::Page::setCanStartMedia(WebCore::Page *this)
{
  return MEMORY[0x1F41725E8](this);
}

uint64_t WebCore::Page::settingsDidChange(WebCore::Page *this)
{
  return MEMORY[0x1F4172610](this);
}

uint64_t WebCore::Page::removeSchedulePair()
{
  return MEMORY[0x1F4172630]();
}

uint64_t WebCore::Page::setPageScaleFactor(WebCore::Page *this, float a2, const IntPoint *a3)
{
  return MEMORY[0x1F4172638](this, a3, a2);
}

uint64_t WebCore::Page::addLayoutMilestones()
{
  return MEMORY[0x1F4172660]();
}

uint64_t WebCore::Page::setDelegatesScaling(WebCore::Page *this)
{
  return MEMORY[0x1F4172670](this);
}

uint64_t WebCore::Page::setVisitedLinkStore()
{
  return MEMORY[0x1F4172680]();
}

uint64_t WebCore::Page::setUserContentProvider()
{
  return MEMORY[0x1F4172708]();
}

uint64_t WebCore::Page::scheduleRenderingUpdate()
{
  return MEMORY[0x1F4172730]();
}

uint64_t WebCore::Page::setBroadcastChannelRegistry()
{
  return MEMORY[0x1F41727D0]();
}

uint64_t WebCore::Page::setUnobscuredSafeAreaInsets()
{
  return MEMORY[0x1F41727E0]();
}

uint64_t WebCore::Page::setMediaKeysStorageDirectory(WebCore::Page *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172810](this, a2);
}

uint64_t WebCore::Page::didCompleteRenderingUpdateDisplay(WebCore::Page *this)
{
  return MEMORY[0x1F4172878](this);
}

uint64_t WebCore::Page::setInLowQualityImageInterpolationMode(WebCore::Page *this)
{
  return MEMORY[0x1F41728D8](this);
}

uint64_t WebCore::Page::group(WebCore::Page *this)
{
  return MEMORY[0x1F4172940](this);
}

uint64_t WebCore::Page::create()
{
  return MEMORY[0x1F4172948]();
}

uint64_t WebCore::Page::goToItem()
{
  return MEMORY[0x1F4172950]();
}

void WebCore::Page::~Page(WebCore::Page *this)
{
}

uint64_t WebCore::Text::replaceWholeText(WebCore::Text *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172988](this, a2);
}

uint64_t WebCore::Text::splitText(WebCore::Text *this)
{
  return MEMORY[0x1F4172990](this);
}

uint64_t WebCore::Color::Color()
{
  return MEMORY[0x1F41729E0]();
}

uint64_t WebCore::Event::create()
{
  return MEMORY[0x1F41729F8]();
}

uint64_t WebCore::Event::initEvent()
{
  return MEMORY[0x1F4172A00]();
}

uint64_t WebCore::Frame::setOpenerForWebKitLegacy()
{
  return MEMORY[0x1F4172A20]();
}

uint64_t WebCore::Image::supportsType(WebCore::Image *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172A40](this, a2);
}

uint64_t WebCore::Range::insertNode()
{
  return MEMORY[0x1F4172A78]();
}

uint64_t WebCore::Range::selectNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172A80](this, a2);
}

uint64_t WebCore::Range::setEndAfter(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172A88](this, a2);
}

uint64_t WebCore::Range::setEndBefore(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172A90](this, a2);
}

uint64_t WebCore::Range::cloneContents(WebCore::Range *this)
{
  return MEMORY[0x1F4172A98](this);
}

uint64_t WebCore::Range::setStartAfter(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172AA0](this, a2);
}

uint64_t WebCore::Range::deleteContents(WebCore::Range *this)
{
  return MEMORY[0x1F4172AA8](this);
}

uint64_t WebCore::Range::isPointInRange(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172AB0](this, a2);
}

uint64_t WebCore::Range::setStartBefore(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172AB8](this, a2);
}

uint64_t WebCore::Range::extractContents(WebCore::Range *this)
{
  return MEMORY[0x1F4172AC0](this);
}

uint64_t WebCore::Range::surroundContents(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172AC8](this, a2);
}

uint64_t WebCore::Range::selectNodeContents(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172AD0](this, a2);
}

uint64_t WebCore::Range::createContextualFragment()
{
  return MEMORY[0x1F4172AD8]();
}

uint64_t WebCore::Range::expand(WebCore::Range *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172AE8](this, a2);
}

uint64_t WebCore::Range::setEnd()
{
  return MEMORY[0x1F4172AF0]();
}

uint64_t WebCore::Range::collapse(WebCore::Range *this)
{
  return MEMORY[0x1F4172AF8](this);
}

uint64_t WebCore::Range::setStart()
{
  return MEMORY[0x1F4172B00]();
}

uint64_t WebCore::Style::Scope::didChangeStyleSheetEnvironment(WebCore::Style::Scope *this)
{
  return MEMORY[0x1F4172B08](this);
}

uint64_t WebCore::Chrome::focusNSView(WebCore::Chrome *this, WAKView *a2)
{
  return MEMORY[0x1F4172B18](this, a2);
}

uint64_t WebCore::Editor::applyStyle()
{
  return MEMORY[0x1F4172B50]();
}

uint64_t WebCore::Editor::findString()
{
  return MEMORY[0x1F4172B58]();
}

uint64_t WebCore::Editor::insertText()
{
  return MEMORY[0x1F4172B60]();
}

uint64_t WebCore::Editor::rangeForPoint(WebCore::Editor *this, const IntPoint *a2)
{
  return MEMORY[0x1F4172B70](this, a2);
}

uint64_t WebCore::Editor::setComposition()
{
  return MEMORY[0x1F4172B78]();
}

uint64_t WebCore::Editor::fontForSelection(WebCore::Editor *this, BOOL *a2)
{
  return MEMORY[0x1F4172B88](this, a2);
}

uint64_t WebCore::Editor::confirmMarkedText(WebCore::Editor *this)
{
  return MEMORY[0x1F4172B98](this);
}

uint64_t WebCore::Editor::insertOrderedList(WebCore::Editor *this)
{
  return MEMORY[0x1F4172BA0](this);
}

uint64_t WebCore::Editor::confirmComposition(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172BA8](this, a2);
}

uint64_t WebCore::Editor::countMatchesForText()
{
  return MEMORY[0x1F4172BC0]();
}

uint64_t WebCore::Editor::insertUnorderedList(WebCore::Editor *this)
{
  return MEMORY[0x1F4172BD0](this);
}

uint64_t WebCore::Editor::insertDictationPhrases()
{
  return MEMORY[0x1F4172BF8]();
}

uint64_t WebCore::Editor::writeImageToPasteboard()
{
  return MEMORY[0x1F4172C08]();
}

uint64_t WebCore::Editor::setBaseWritingDirection()
{
  return MEMORY[0x1F4172C18]();
}

uint64_t WebCore::Editor::setTextAsChildOfElement()
{
  return MEMORY[0x1F4172C20]();
}

uint64_t WebCore::Editor::computeAndSetTypingStyle()
{
  return MEMORY[0x1F4172C28]();
}

uint64_t WebCore::Editor::increaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1F4172C58](this);
}

uint64_t WebCore::Editor::fontAttributesAtSelectionStart(WebCore::Editor *this)
{
  return MEMORY[0x1F4172C98](this);
}

uint64_t WebCore::Editor::increaseSelectionListLevelOrdered(WebCore::Editor *this)
{
  return MEMORY[0x1F4172CA0](this);
}

uint64_t WebCore::Editor::increaseSelectionListLevelUnordered(WebCore::Editor *this)
{
  return MEMORY[0x1F4172CB0](this);
}

uint64_t WebCore::Editor::setDictationPhrasesAsChildOfElement()
{
  return MEMORY[0x1F4172CB8]();
}

uint64_t WebCore::Editor::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping(WebCore::Editor *this)
{
  return MEMORY[0x1F4172CD0](this);
}

uint64_t WebCore::Editor::command(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172CE0](this, a2);
}

uint64_t WebCore::JSNode::toWrapped()
{
  return MEMORY[0x1F4172CF8]();
}

uint64_t WebCore::Widget::setPlatformWidget(WebCore::Widget *this, WAKView *a2)
{
  return MEMORY[0x1F4172DE0](this, a2);
}

uint64_t WebCore::Widget::Widget(WebCore::Widget *this, WAKView *a2)
{
  return MEMORY[0x1F4172E00](this, a2);
}

void WebCore::Widget::~Widget(WebCore::Widget *this)
{
}

uint64_t WebCore::CSSRule::setCssText(WebCore::CSSRule *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172E20](this, a2);
}

uint64_t WebCore::Element::clientLeft(WebCore::Element *this)
{
  return MEMORY[0x1F4172E28](this);
}

uint64_t WebCore::Element::clientWidth(WebCore::Element *this)
{
  return MEMORY[0x1F4172E30](this);
}

uint64_t WebCore::Element::offsetWidth(WebCore::Element *this)
{
  return MEMORY[0x1F4172E38](this);
}

uint64_t WebCore::Element::clientHeight(WebCore::Element *this)
{
  return MEMORY[0x1F4172E40](this);
}

uint64_t WebCore::Element::offsetHeight(WebCore::Element *this)
{
  return MEMORY[0x1F4172E48](this);
}

uint64_t WebCore::Element::setAttribute()
{
  return MEMORY[0x1F4172E50]();
}

uint64_t WebCore::Element::setInnerHTML()
{
  return MEMORY[0x1F4172E58]();
}

uint64_t WebCore::Element::setOuterHTML()
{
  return MEMORY[0x1F4172E60]();
}

uint64_t WebCore::Element::scrollIntoView(WebCore::Element *this)
{
  return MEMORY[0x1F4172E78](this);
}

uint64_t WebCore::Element::setAttributeNS()
{
  return MEMORY[0x1F4172E80]();
}

uint64_t WebCore::Element::removeAttribute()
{
  return MEMORY[0x1F4172E88]();
}

uint64_t WebCore::Element::getAttributeNode()
{
  return MEMORY[0x1F4172E90]();
}

uint64_t WebCore::Element::setAttributeNode(WebCore::Element *this, WebCore::Attr *a2)
{
  return MEMORY[0x1F4172E98](this, a2);
}

uint64_t WebCore::Element::removeAttributeNS()
{
  return MEMORY[0x1F4172EA0]();
}

uint64_t WebCore::Element::getAttributeNodeNS()
{
  return MEMORY[0x1F4172EB0]();
}

uint64_t WebCore::Element::insertAdjacentHTML()
{
  return MEMORY[0x1F4172EB8]();
}

uint64_t WebCore::Element::insertAdjacentText()
{
  return MEMORY[0x1F4172EC0]();
}

uint64_t WebCore::Element::setAttributeNodeNS(WebCore::Element *this, WebCore::Attr *a2)
{
  return MEMORY[0x1F4172EC8](this, a2);
}

uint64_t WebCore::Element::removeAttributeNode(WebCore::Element *this, WebCore::Attr *a2)
{
  return MEMORY[0x1F4172ED0](this, a2);
}

uint64_t WebCore::Element::setBooleanAttribute()
{
  return MEMORY[0x1F4172ED8]();
}

uint64_t WebCore::Element::offsetTopForBindings(WebCore::Element *this)
{
  return MEMORY[0x1F4172EE0](this);
}

uint64_t WebCore::Element::setIntegralAttribute()
{
  return MEMORY[0x1F4172EE8]();
}

uint64_t WebCore::Element::boundsInRootViewSpace(WebCore::Element *this)
{
  return MEMORY[0x1F4172EF0](this);
}

uint64_t WebCore::Element::insertAdjacentElement(WebCore::Element *this, const WTF::String *a2, WebCore::Element *a3)
{
  return MEMORY[0x1F4172EF8](this, a2, a3);
}

uint64_t WebCore::Element::offsetLeftForBindings(WebCore::Element *this)
{
  return MEMORY[0x1F4172F00](this);
}

uint64_t WebCore::Element::scrollIntoViewIfNeeded(WebCore::Element *this)
{
  return MEMORY[0x1F4172F08](this);
}

uint64_t WebCore::Element::setTabIndexForBindings(WebCore::Element *this)
{
  return MEMORY[0x1F4172F10](this);
}

uint64_t WebCore::Element::offsetParentForBindings(WebCore::Element *this)
{
  return MEMORY[0x1F4172F18](this);
}

uint64_t WebCore::Element::webkitRequestFullscreen(WebCore::Element *this)
{
  return MEMORY[0x1F4172F20](this);
}

uint64_t WebCore::Element::setUnsignedIntegralAttribute()
{
  return MEMORY[0x1F4172F38]();
}

uint64_t WebCore::Element::setAttributeWithoutSynchronization()
{
  return MEMORY[0x1F4172F48]();
}

uint64_t WebCore::Element::closest(WebCore::Element *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172F50](this, a2);
}

uint64_t WebCore::Element::matches(WebCore::Element *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172F58](this, a2);
}

uint64_t WebCore::Element::classList(WebCore::Element *this)
{
  return MEMORY[0x1F4172F60](this);
}

uint64_t WebCore::Element::clientTop(WebCore::Element *this)
{
  return MEMORY[0x1F4172F68](this);
}

uint64_t WebCore::Element::innerText(WebCore::Element *this)
{
  return MEMORY[0x1F4172F70](this);
}

uint64_t WebCore::Element::outerText(WebCore::Element *this)
{
  return MEMORY[0x1F4172F78](this);
}

uint64_t WebCore::IntSize::IntSize(WebCore::IntSize *this, const CGSize *a2)
{
  return MEMORY[0x1F4172FB0](this, a2);
}

uint64_t WebCore::JSEvent::toWrapped()
{
  return MEMORY[0x1F4172FC0]();
}

uint64_t WebCore::JSRange::toWrapped()
{
  return MEMORY[0x1F4172FC8]();
}

uint64_t WebCore::Process::identifier(WebCore::Process *this)
{
  return MEMORY[0x1F4172FF0](this);
}

uint64_t WebCore::UIEvent::initUIEvent()
{
  return MEMORY[0x1F4173000]();
}

uint64_t WebCore::Document::importNode(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4173028](this, a2);
}

uint64_t WebCore::Document::setBgColor()
{
  return MEMORY[0x1F4173030]();
}

uint64_t WebCore::Document::setCharset(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173038](this, a2);
}

uint64_t WebCore::Document::setFgColor()
{
  return MEMORY[0x1F4173040]();
}

uint64_t WebCore::Document::createEvent(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173048](this, a2);
}

uint64_t WebCore::Document::createRange(WebCore::Document *this)
{
  return MEMORY[0x1F4173050](this);
}

uint64_t WebCore::Document::execCommand()
{
  return MEMORY[0x1F4173058]();
}

uint64_t WebCore::Document::styleSheets(WebCore::Document *this)
{
  return MEMORY[0x1F4173060](this);
}

uint64_t WebCore::Document::updateLayout()
{
  return MEMORY[0x1F4173078]();
}

uint64_t WebCore::Document::activeElement(WebCore::Document *this)
{
  return MEMORY[0x1F4173080](this);
}

uint64_t WebCore::Document::createComment()
{
  return MEMORY[0x1F4173088]();
}

uint64_t WebCore::Document::ensureMarkers(WebCore::Document *this)
{
  return MEMORY[0x1F4173098](this);
}

uint64_t WebCore::Document::getTouchRects()
{
  return MEMORY[0x1F41730A0]();
}

uint64_t WebCore::Document::setAlinkColor()
{
  return MEMORY[0x1F41730A8]();
}

uint64_t WebCore::Document::setDesignMode(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F41730B0](this, a2);
}

uint64_t WebCore::Document::setVlinkColor()
{
  return MEMORY[0x1F41730B8]();
}

uint64_t WebCore::Document::setXMLVersion(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F41730C0](this, a2);
}

uint64_t WebCore::Document::createTextNode()
{
  return MEMORY[0x1F41730C8]();
}

uint64_t WebCore::Document::implementation(WebCore::Document *this)
{
  return MEMORY[0x1F41730D0](this);
}

uint64_t WebCore::Document::setDocumentURI(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F41730D8](this, a2);
}

uint64_t WebCore::Document::createAttribute()
{
  return MEMORY[0x1F41730E8]();
}

uint64_t WebCore::Document::createElementNS()
{
  return MEMORY[0x1F41730F0]();
}

uint64_t WebCore::Document::createExpression()
{
  return MEMORY[0x1F41730F8]();
}

uint64_t WebCore::Document::createNSResolver(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4173100](this, a2);
}

uint64_t WebCore::Document::createTreeWalker()
{
  return MEMORY[0x1F4173108]();
}

uint64_t WebCore::Document::setXMLStandalone(WebCore::Document *this)
{
  return MEMORY[0x1F4173110](this);
}

uint64_t WebCore::Document::addConsoleMessage()
{
  return MEMORY[0x1F4173118]();
}

uint64_t WebCore::Document::createAttributeNS()
{
  return MEMORY[0x1F4173120]();
}

uint64_t WebCore::Document::getElementsByName()
{
  return MEMORY[0x1F4173128]();
}

uint64_t WebCore::Document::queryCommandState(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173130](this, a2);
}

uint64_t WebCore::Document::queryCommandValue(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173138](this, a2);
}

uint64_t WebCore::Document::setBodyOrFrameset()
{
  return MEMORY[0x1F4173140]();
}

uint64_t WebCore::Document::setFocusedElement(WebCore::Document *this, WebCore::Element *a2)
{
  return MEMORY[0x1F4173148](this, a2);
}

uint64_t WebCore::Document::createCDATASection()
{
  return MEMORY[0x1F4173150]();
}

uint64_t WebCore::Document::createNodeIterator()
{
  return MEMORY[0x1F4173158]();
}

uint64_t WebCore::Document::caretRangeFromPoint()
{
  return MEMORY[0x1F4173168]();
}

uint64_t WebCore::Document::dispatchWindowEvent()
{
  return MEMORY[0x1F4173170]();
}

uint64_t WebCore::Document::queryCommandEnabled(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173180](this, a2);
}

uint64_t WebCore::Document::updateStyleIfNeeded(WebCore::Document *this)
{
  return MEMORY[0x1F4173188](this);
}

uint64_t WebCore::Document::ensureReportingScope(WebCore::Document *this)
{
  return MEMORY[0x1F4173198](this);
}

uint64_t WebCore::Document::queryCommandIndeterm(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F41731A0](this, a2);
}

uint64_t WebCore::Document::queryCommandSupported(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F41731B8](this, a2);
}

uint64_t WebCore::Document::createDocumentFragment(WebCore::Document *this)
{
  return MEMORY[0x1F41731C0](this);
}

uint64_t WebCore::Document::scrollingElementForAPI(WebCore::Document *this)
{
  return MEMORY[0x1F41731C8](this);
}

uint64_t WebCore::Document::ensureFullscreenManager(WebCore::Document *this)
{
  return MEMORY[0x1F41731D8](this);
}

uint64_t WebCore::Document::setLinkColorForBindings()
{
  return MEMORY[0x1F41731E0]();
}

uint64_t WebCore::Document::createElementForBindings()
{
  return MEMORY[0x1F41731F0]();
}

uint64_t WebCore::Document::setShouldCreateRenderers(WebCore::Document *this)
{
  return MEMORY[0x1F4173200](this);
}

uint64_t WebCore::Document::createCSSStyleDeclaration(WebCore::Document *this)
{
  return MEMORY[0x1F4173208](this);
}

uint64_t WebCore::Document::ensureCachedResourceLoader(WebCore::Document *this)
{
  return MEMORY[0x1F4173220](this);
}

uint64_t WebCore::Document::createProcessingInstruction()
{
  return MEMORY[0x1F4173238]();
}

uint64_t WebCore::Document::head(WebCore::Document *this)
{
  return MEMORY[0x1F4173278](this);
}

uint64_t WebCore::Document::open(WebCore::Document *this, WebCore::Document *a2)
{
  return MEMORY[0x1F4173280](this, a2);
}

uint64_t WebCore::Document::close(WebCore::Document *this)
{
  return MEMORY[0x1F4173298](this);
}

uint64_t WebCore::Document::forms(WebCore::Document *this)
{
  return MEMORY[0x1F41732A0](this);
}

uint64_t WebCore::Document::links(WebCore::Document *this)
{
  return MEMORY[0x1F41732A8](this);
}

uint64_t WebCore::Document::write()
{
  return MEMORY[0x1F41732B0]();
}

uint64_t WebCore::Document::cookie(WebCore::Document *this)
{
  return MEMORY[0x1F41732B8](this);
}

uint64_t WebCore::Document::editor(WebCore::Document *this)
{
  return MEMORY[0x1F41732C0](this);
}

uint64_t WebCore::Document::embeds(WebCore::Document *this)
{
  return MEMORY[0x1F41732C8](this);
}

uint64_t WebCore::Document::images(WebCore::Document *this)
{
  return MEMORY[0x1F41732D0](this);
}

uint64_t WebCore::Document::setDir()
{
  return MEMORY[0x1F41732D8]();
}

uint64_t WebCore::Document::anchors(WebCore::Document *this)
{
  return MEMORY[0x1F41732E0](this);
}

uint64_t WebCore::Document::applets(WebCore::Document *this)
{
  return MEMORY[0x1F41732E8](this);
}

uint64_t WebCore::Document::scripts(WebCore::Document *this)
{
  return MEMORY[0x1F41732F8](this);
}

uint64_t WebCore::Document::writeln()
{
  return MEMORY[0x1F4173300]();
}

uint64_t WebCore::Document::evaluate()
{
  return MEMORY[0x1F4173308]();
}

uint64_t WebCore::Document::referrer(WebCore::Document *this)
{
  return MEMORY[0x1F4173318](this);
}

uint64_t WebCore::Document::setTitle()
{
  return MEMORY[0x1F4173320]();
}

uint64_t WebCore::Document::adoptNode(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4173328](this, a2);
}

uint64_t WebCore::Document::setCookie(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173338](this, a2);
}

uint64_t WebCore::DragData::DragData()
{
  return MEMORY[0x1F4173340]();
}

void WebCore::FileList::operator delete(void *a1)
{
}

void WebCore::FormData::~FormData(WebCore::FormData *this)
{
}

void WebCore::FormData::operator delete(void *a1)
{
}

uint64_t WebCore::IDBError::IDBError()
{
  return MEMORY[0x1F41733B8]();
}

uint64_t WebCore::IntPoint::IntPoint(WebCore::IntPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1F41733C8](this, a2);
}

uint64_t WebCore::Position::Position()
{
  return MEMORY[0x1F41733E0]();
}

{
  return MEMORY[0x1F41733E8]();
}

uint64_t WebCore::Settings::setDefaultFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F4173580](this, a2);
}

uint64_t WebCore::Settings::setMinimumFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F4173588](this, a2);
}

uint64_t WebCore::Settings::setShowDebugBorders(WebCore::Settings *this)
{
  return MEMORY[0x1F4173590](this);
}

uint64_t WebCore::Settings::setCoreMathMLEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173598](this);
}

uint64_t WebCore::Settings::setColorFilterEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735A0](this);
}

uint64_t WebCore::Settings::setShowRepaintCounter(WebCore::Settings *this)
{
  return MEMORY[0x1F41735A8](this);
}

uint64_t WebCore::Settings::setCanvasFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735B0](this);
}

uint64_t WebCore::Settings::setDefaultFixedFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F41735B8](this, a2);
}

uint64_t WebCore::Settings::setUsesBackForwardCache(WebCore::Settings *this)
{
  return MEMORY[0x1F41735C0](this);
}

uint64_t WebCore::Settings::setDNSPrefetchingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735C8](this);
}

uint64_t WebCore::Settings::setStorageBlockingPolicy()
{
  return MEMORY[0x1F41735D0]();
}

uint64_t WebCore::Settings::setTextAreasAreResizable(WebCore::Settings *this)
{
  return MEMORY[0x1F41735D8](this);
}

uint64_t WebCore::Settings::setTextAutosizingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735E0](this);
}

uint64_t WebCore::Settings::setVisualViewportEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735E8](this);
}

uint64_t WebCore::Settings::setMinimumLogicalFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F41735F0](this, a2);
}

uint64_t WebCore::Settings::setLoadsImagesAutomatically(WebCore::Settings *this)
{
  return MEMORY[0x1F4173600](this);
}

uint64_t WebCore::Settings::setAcceleratedFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173608](this);
}

uint64_t WebCore::Settings::setMockCaptureDevicesEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173610](this);
}

uint64_t WebCore::Settings::setAsyncFrameScrollingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173618](this);
}

uint64_t WebCore::Settings::setAuthorAndUserStylesEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173620](this);
}

uint64_t WebCore::Settings::setLayerBasedSVGEngineEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173628](this);
}

uint64_t WebCore::Settings::setResourceUsageOverlayVisible(WebCore::Settings *this)
{
  return MEMORY[0x1F4173638](this);
}

uint64_t WebCore::Settings::setICECandidateFilteringEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173640](this);
}

uint64_t WebCore::Settings::setAcceleratedCompositingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173648](this);
}

uint64_t WebCore::Settings::setAsyncOverflowScrollingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173650](this);
}

uint64_t WebCore::Settings::setCSSWordBreakAutoPhraseEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173658](this);
}

uint64_t WebCore::Settings::setGraphicsContextFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173660](this);
}

uint64_t WebCore::Settings::setShouldAllowUserInstalledFonts(WebCore::Settings *this)
{
  return MEMORY[0x1F4173668](this);
}

uint64_t WebCore::Settings::setFontFallbackPrefersPictographs(WebCore::Settings *this)
{
  return MEMORY[0x1F4173670](this);
}

uint64_t WebCore::Settings::setShouldEnableTextAutosizingBoost(WebCore::Settings *this)
{
  return MEMORY[0x1F4173678](this);
}

uint64_t WebCore::Settings::setTextAutosizingUsesIdempotentMode(WebCore::Settings *this)
{
  return MEMORY[0x1F4173688](this);
}

uint64_t WebCore::Settings::setPunchOutWhiteBackgroundsInDarkMode(WebCore::Settings *this)
{
  return MEMORY[0x1F4173690](this);
}

uint64_t WebCore::Settings::setScrollingPerformanceTestingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173698](this);
}

uint64_t WebCore::Settings::setShouldUseModernAVContentKeySession(WebCore::Settings *this)
{
  return MEMORY[0x1F41736A0](this);
}

uint64_t WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736B0](this);
}

uint64_t WebCore::Settings::setLayoutViewportHeightExpansionFactor(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F41736B8](this, a2);
}

uint64_t WebCore::Settings::setLegacyOverflowScrollingTouchEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736C0](this);
}

uint64_t WebCore::Settings::setLegacyLineLayoutVisualCoverageEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736C8](this);
}

uint64_t WebCore::Settings::setHiddenPageCSSAnimationSuspensionEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736D0](this);
}

uint64_t WebCore::Settings::setHiddenPageDOMTimerThrottlingAutoIncreases(WebCore::Settings *this)
{
  return MEMORY[0x1F41736E0](this);
}

uint64_t WebCore::CaretBase::computeCaretColor()
{
  return MEMORY[0x1F4173730]();
}

uint64_t WebCore::CookieJar::cookieRequestHeaderFieldProxy(WebCore::CookieJar *this, const WebCore::Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4173748](this, a2, a3);
}

uint64_t WebCore::CookieJar::create()
{
  return MEMORY[0x1F4173750]();
}

uint64_t WebCore::FloatRect::FloatRect(WebCore::FloatRect *this, const CGRect *a2)
{
  return MEMORY[0x1F4173790](this, a2);
}

uint64_t WebCore::FloatRect::FloatRect()
{
  return MEMORY[0x1F4173798]();
}

uint64_t WebCore::FontCache::forCurrentThread(WebCore::FontCache *this)
{
  return MEMORY[0x1F41737A8](this);
}

uint64_t WebCore::FrameTree::setSpecifiedName()
{
  return MEMORY[0x1F41737D8]();
}

uint64_t WebCore::HTMLNames::init(WebCore::HTMLNames *this)
{
  return MEMORY[0x1F41737E8](this);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::deref(WebCore::IDBClient::IDBConnectionProxy *this)
{
  return MEMORY[0x1F41737F0](this);
}

void WebCore::IDBClient::IDBConnectionProxy::operator delete(void *a1)
{
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::create()
{
  return MEMORY[0x1F41738C0]();
}

void WebCore::IDBClient::IDBConnectionToServer::operator delete(void *a1)
{
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::create()
{
  return MEMORY[0x1F4173928]();
}

uint64_t WebCore::IDBServer::IDBServer::openCursor()
{
  return MEMORY[0x1F4173A10]();
}

uint64_t WebCore::IDBServer::IDBServer::createIndex()
{
  return MEMORY[0x1F4173A18]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteIndex()
{
  return MEMORY[0x1F4173A20]();
}

uint64_t WebCore::IDBServer::IDBServer::renameIndex()
{
  return MEMORY[0x1F4173A28]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteRecord()
{
  return MEMORY[0x1F4173A30]();
}

uint64_t WebCore::IDBServer::IDBServer::openDatabase()
{
  return MEMORY[0x1F4173A38]();
}

uint64_t WebCore::IDBServer::IDBServer::getAllRecords()
{
  return MEMORY[0x1F4173A40]();
}

uint64_t WebCore::IDBServer::IDBServer::iterateCursor()
{
  return MEMORY[0x1F4173A48]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteDatabase()
{
  return MEMORY[0x1F4173A50]();
}

uint64_t WebCore::IDBServer::IDBServer::abortTransaction()
{
  return MEMORY[0x1F4173A58]();
}

uint64_t WebCore::IDBServer::IDBServer::clearObjectStore()
{
  return MEMORY[0x1F4173A60]();
}

uint64_t WebCore::IDBServer::IDBServer::commitTransaction()
{
  return MEMORY[0x1F4173A68]();
}

uint64_t WebCore::IDBServer::IDBServer::createObjectStore()
{
  return MEMORY[0x1F4173A70]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteObjectStore()
{
  return MEMORY[0x1F4173A78]();
}

uint64_t WebCore::IDBServer::IDBServer::renameObjectStore()
{
  return MEMORY[0x1F4173A80]();
}

uint64_t WebCore::IDBServer::IDBServer::registerConnection()
{
  return MEMORY[0x1F4173A88]();
}

uint64_t WebCore::IDBServer::IDBServer::establishTransaction()
{
  return MEMORY[0x1F4173A90]();
}

uint64_t WebCore::IDBServer::IDBServer::openDBRequestCancelled()
{
  return MEMORY[0x1F4173A98]();
}

uint64_t WebCore::IDBServer::IDBServer::databaseConnectionClosed()
{
  return MEMORY[0x1F4173AA0]();
}

uint64_t WebCore::IDBServer::IDBServer::abortOpenAndUpgradeNeeded()
{
  return MEMORY[0x1F4173AA8]();
}

uint64_t WebCore::IDBServer::IDBServer::didFireVersionChangeEvent()
{
  return MEMORY[0x1F4173AB0]();
}

uint64_t WebCore::IDBServer::IDBServer::databaseConnectionPendingClose()
{
  return MEMORY[0x1F4173AB8]();
}

uint64_t WebCore::IDBServer::IDBServer::getAllDatabaseNamesAndVersions()
{
  return MEMORY[0x1F4173AC0]();
}

uint64_t WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince()
{
  return MEMORY[0x1F4173AC8]();
}

uint64_t WebCore::IDBServer::IDBServer::didFinishHandlingVersionChangeTransaction()
{
  return MEMORY[0x1F4173AD0]();
}

uint64_t WebCore::IDBServer::IDBServer::getCount()
{
  return MEMORY[0x1F4173AD8]();
}

uint64_t WebCore::IDBServer::IDBServer::putOrAdd()
{
  return MEMORY[0x1F4173AE0]();
}

uint64_t WebCore::IDBServer::IDBServer::getRecord()
{
  return MEMORY[0x1F4173AE8]();
}

uint64_t WebCore::IDBServer::IDBServer::IDBServer()
{
  return MEMORY[0x1F4173AF0]();
}

uint64_t WebCore::JSCSSRule::toWrapped()
{
  return MEMORY[0x1F4173B90]();
}

uint64_t WebCore::JSElement::toWrapped()
{
  return MEMORY[0x1F4173B98]();
}

uint64_t WebCore::MediaList::appendMedium(WebCore::MediaList *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173BF0](this, a2);
}

uint64_t WebCore::MediaList::deleteMedium(WebCore::MediaList *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173BF8](this, a2);
}

uint64_t WebCore::MediaList::setMediaText(WebCore::MediaList *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173C00](this, a2);
}

void WebCore::MediaList::~MediaList(WebCore::MediaList *this)
{
}

uint64_t WebCore::PageGroup::ensureCaptionPreferences(WebCore::PageGroup *this)
{
  return MEMORY[0x1F4173C18](this);
}

uint64_t WebCore::Scrollbar::maxOverlapBetweenPages(WebCore::Scrollbar *this)
{
  return MEMORY[0x1F4173C58](this);
}

uint64_t WebCore::TextEvent::initTextEvent()
{
  return MEMORY[0x1F4173C68]();
}

uint64_t WebCore::TimerBase::stopSlowCase(WebCore::TimerBase *this)
{
  return MEMORY[0x1F4173C70](this);
}

uint64_t WebCore::TimerBase::start()
{
  return MEMORY[0x1F4173C78]();
}

uint64_t WebCore::TimerBase::TimerBase(WebCore::TimerBase *this)
{
  return MEMORY[0x1F4173C80](this);
}

void WebCore::TimerBase::~TimerBase(WebCore::TimerBase *this)
{
}

uint64_t WebCore::TreeScope::elementFromPoint()
{
  return MEMORY[0x1F4173C90]();
}

uint64_t WebCore::endOfWord()
{
  return MEMORY[0x1F4173CB0]();
}

uint64_t WebCore::plainText()
{
  return MEMORY[0x1F4173CB8]();
}

uint64_t WebCore::unionRect()
{
  return MEMORY[0x1F4173CC8]();
}

uint64_t WebCore::operator==()
{
  return MEMORY[0x1F4173CD0]();
}

uint64_t Inspector::RemoteInspector::setParentProcessInformation()
{
  return MEMORY[0x1F40EBE88]();
}

uint64_t Inspector::RemoteInspector::singleton(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1F40EBEB0](this);
}

uint64_t JSC::JSRopeString::resolveRope()
{
  return MEMORY[0x1F40EC6C0]();
}

uint64_t JSC::DebuggerCallFrame::functionName()
{
  return MEMORY[0x1F40EC710]();
}

uint64_t JSC::DebuggerCallFrame::sourceID(JSC::DebuggerCallFrame *this)
{
  return MEMORY[0x1F40EC718](this);
}

uint64_t JSC::VM::deprecatedVMEntryGlobalObject()
{
  return MEMORY[0x1F40EC748]();
}

uint64_t JSC::Yarr::RegularExpression::matchedLength(JSC::Yarr::RegularExpression *this)
{
  return MEMORY[0x1F40EC750](this);
}

uint64_t JSC::Yarr::RegularExpression::match()
{
  return MEMORY[0x1F40EC758]();
}

uint64_t JSC::Yarr::RegularExpression::searchRev()
{
  return MEMORY[0x1F40EC768]();
}

uint64_t JSC::JSValue::toWTFStringSlowCase()
{
  return MEMORY[0x1F40EC7A8]();
}

uint64_t PAL::TextEncoding::decode()
{
  return MEMORY[0x1F4173D00]();
}

uint64_t WTF::StringImpl::hashSlowCase(WTF::StringImpl *this)
{
  return MEMORY[0x1F40EC820](this);
}

uint64_t WTF::StringView::createCFString(WTF::StringView *this)
{
  return MEMORY[0x1F40EC860](this);
}

uint64_t WTF::StringView::createNSString(WTF::StringView *this)
{
  return MEMORY[0x1F40EC868](this);
}

uint64_t WTF::StringView::createCFStringWithoutCopying(WTF::StringView *this)
{
  return MEMORY[0x1F40EC8C8](this);
}

uint64_t WTF::StringView::createNSStringWithoutCopying(WTF::StringView *this)
{
  return MEMORY[0x1F40EC8D0](this);
}

uint64_t WTF::MonotonicTime::approximateWallTime(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EC918](this);
}

uint64_t WTF::StringBuilder::reifyString(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EC920](this);
}

uint64_t WTF::TimeWithDynamicClockType::nowWithSameClock(WTF::TimeWithDynamicClockType *this)
{
  return MEMORY[0x1F40EC948](this);
}

uint64_t WTF::TimeWithDynamicClockType::operator<()
{
  return MEMORY[0x1F40EC950]();
}

uint64_t WTF::URL::protocolIs()
{
  return MEMORY[0x1F40EC958]();
}

uint64_t WTF::URL::createCFURL(WTF::URL *this)
{
  return MEMORY[0x1F40EC960](this);
}

uint64_t WTF::URL::stringCenterEllipsizedToLength(WTF::URL *this)
{
  return MEMORY[0x1F40EC9E8](this);
}

uint64_t WTF::URL::host(WTF::URL *this)
{
  return MEMORY[0x1F40ECA10](this);
}

uint64_t WTF::URL::path(WTF::URL *this)
{
  return MEMORY[0x1F40ECA18](this);
}

uint64_t WTF::URL::port(WTF::URL *this)
{
  return MEMORY[0x1F40ECA20](this);
}

uint64_t WTF::URL::operator NSURL *()
{
  return MEMORY[0x1F40ECA50]();
}

uint64_t WTF::UUID::toString(WTF::UUID *this)
{
  return MEMORY[0x1F40ECA58](this);
}

uint64_t WTF::Logger::LogSiteIdentifier::toString(WTF::Logger::LogSiteIdentifier *this)
{
  return MEMORY[0x1F40ECA68](this);
}

uint64_t WTF::String::createCFString(WTF::String *this)
{
  return MEMORY[0x1F40ECA70](this);
}

uint64_t WTF::String::convertToASCIILowercase(WTF::String *this)
{
  return MEMORY[0x1F40ECA90](this);
}

uint64_t WTF::String::utf8()
{
  return MEMORY[0x1F40ECAD8]();
}

uint64_t WebCore::Credential::isEmpty(WebCore::Credential *this)
{
  return MEMORY[0x1F4173D98](this);
}

uint64_t WebCore::FloatPoint::operator CGPoint()
{
  return MEMORY[0x1F4173DB0]();
}

uint64_t WebCore::FontRanges::glyphDataForCharacter()
{
  return MEMORY[0x1F4173DB8]();
}

uint64_t WebCore::FontRanges::Range::font()
{
  return MEMORY[0x1F4173DC0]();
}

uint64_t WebCore::IDBKeyData::isolatedCopy(WebCore::IDBKeyData *this)
{
  return MEMORY[0x1F4173DC8](this);
}

uint64_t WebCore::LocalFrame::contentRenderer(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F4173DD8](this);
}

uint64_t WebCore::LocalFrame::renderRectForPoint(WebCore::LocalFrame *this, CGPoint a2, BOOL *a3, float *a4)
{
  return MEMORY[0x1F4173DF0](this, a3, a4, (__n128)a2, *(__n128 *)&a2.y);
}

uint64_t WebCore::LocalFrame::rangedSelectionBase(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F4173DF8](this);
}

uint64_t WebCore::LocalFrame::visiblePositionForPoint(WebCore::LocalFrame *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173E00](this, a2);
}

uint64_t WebCore::LocalFrame::rangedSelectionInitialExtent(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F4173E10](this);
}

uint64_t WebCore::LocalFrame::displayStringModifiedByEncoding(WebCore::LocalFrame *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173E20](this, a2);
}

uint64_t WebCore::PluginData::supportsWebVisibleMimeType()
{
  return MEMORY[0x1F4173E40]();
}

uint64_t WebCore::RenderText::textNode(WebCore::RenderText *this)
{
  return MEMORY[0x1F4173E50](this);
}

uint64_t WebCore::RenderView::documentRect(WebCore::RenderView *this)
{
  return MEMORY[0x1F4173E58](this);
}

uint64_t WebCore::ScrollView::layoutSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173E70](this);
}

uint64_t WebCore::ScrollView::documentView(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173E80](this);
}

uint64_t WebCore::ScrollView::useFixedLayout(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173E90](this);
}

uint64_t WebCore::ScrollView::fixedLayoutSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173E98](this);
}

uint64_t WebCore::ScrollView::contentsToWindow()
{
  return MEMORY[0x1F4173EA8]();
}

uint64_t WebCore::ScrollView::windowToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173EC0](this, a2);
}

uint64_t WebCore::StorageMap::length(WebCore::StorageMap *this)
{
  return MEMORY[0x1F4173F30](this);
}

uint64_t WebCore::TimeRanges::end(WebCore::TimeRanges *this)
{
  return MEMORY[0x1F4173F48](this);
}

uint64_t WebCore::TimeRanges::start(WebCore::TimeRanges *this)
{
  return MEMORY[0x1F4173F50](this);
}

uint64_t WebCore::TimeRanges::length(WebCore::TimeRanges *this)
{
  return MEMORY[0x1F4173F58](this);
}

uint64_t WebCore::CSSPageRule::selectorText(WebCore::CSSPageRule *this)
{
  return MEMORY[0x1F4173F60](this);
}

uint64_t WebCore::CachedImage::image(WebCore::CachedImage *this)
{
  return MEMORY[0x1F4173F70](this);
}

uint64_t WebCore::FontCascade::protectedFonts(WebCore::FontCascade *this)
{
  return MEMORY[0x1F41741E8](this);
}

uint64_t WebCore::FrameLoader::frameHasLoaded(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F41741F8](this);
}

uint64_t WebCore::FrameLoader::networkingContext(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174200](this);
}

uint64_t WebCore::FrameLoader::frame(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174220](this);
}

uint64_t WebCore::FrameLoader::loadType(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174230](this);
}

uint64_t WebCore::Geolocation::frame(WebCore::Geolocation *this)
{
  return MEMORY[0x1F4174238](this);
}

uint64_t WebCore::HTMLElement::spellcheck(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174240](this);
}

uint64_t WebCore::HTMLElement::autocapitalize(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174248](this);
}

uint64_t WebCore::HTMLElement::contentEditable(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174250](this);
}

uint64_t WebCore::HTMLElement::dir(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174268](this);
}

uint64_t WebCore::HTMLElement::title(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174270](this);
}

uint64_t WebCore::HTMLElement::translate(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174278](this);
}

uint64_t WebCore::HistoryItem::isTargetItem(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174280](this);
}

uint64_t WebCore::HistoryItem::alternateTitle(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174290](this);
}

uint64_t WebCore::HistoryItem::scrollPosition(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174298](this);
}

uint64_t WebCore::HistoryItem::originalURLString(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742B0](this);
}

uint64_t WebCore::HistoryItem::url(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742D0](this);
}

uint64_t WebCore::HistoryItem::copy(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742D8](this);
}

uint64_t WebCore::HistoryItem::title(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742E0](this);
}

uint64_t WebCore::HistoryItem::target(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742E8](this);
}

uint64_t WebCore::HistoryItem::children(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742F0](this);
}

uint64_t WebCore::HistoryItem::referrer(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742F8](this);
}

uint64_t WebCore::HistoryItem::urlString(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174300](this);
}

uint64_t WebCore::HistoryItem::viewState(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174308](this);
}

uint64_t WebCore::NativeImage::platformImage(WebCore::NativeImage *this)
{
  return MEMORY[0x1F4174548](this);
}

uint64_t WebCore::RenderLayer::scrollableArea(WebCore::RenderLayer *this)
{
  return MEMORY[0x1F4174560](this);
}

uint64_t WebCore::RenderStyle::fontCascade(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F4174578](this);
}

uint64_t WebCore::RenderStyle::fontDescription(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F4174590](this);
}

uint64_t WebCore::RenderStyle::computedLineHeight(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F41745A0](this);
}

uint64_t WebCore::RenderStyle::visitedDependentColorWithColorFilter()
{
  return MEMORY[0x1F41745B8]();
}

uint64_t WebCore::WindowProxy::window(WebCore::WindowProxy *this)
{
  return MEMORY[0x1F4174610](this);
}

uint64_t WebCore::XPathResult::resultType(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174618](this);
}

uint64_t WebCore::XPathResult::numberValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174620](this);
}

uint64_t WebCore::XPathResult::stringValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174628](this);
}

uint64_t WebCore::XPathResult::BOOLeanValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174630](this);
}

uint64_t WebCore::XPathResult::snapshotLength(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174638](this);
}

uint64_t WebCore::XPathResult::singleNodeValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174640](this);
}

uint64_t WebCore::XPathResult::invalidIteratorState(WebCore::XPathResult *this)
{
  return MEMORY[0x1F4174648](this);
}

uint64_t WebCore::CSSMediaRule::media(WebCore::CSSMediaRule *this)
{
  return MEMORY[0x1F4174658](this);
}

uint64_t WebCore::CSSStyleRule::selectorText(WebCore::CSSStyleRule *this)
{
  return MEMORY[0x1F4174660](this);
}

uint64_t WebCore::DOMTokenList::value(WebCore::DOMTokenList *this)
{
  return MEMORY[0x1F4174668](this);
}

uint64_t WebCore::DOMTokenList::contains()
{
  return MEMORY[0x1F4174670]();
}

uint64_t WebCore::EventHandler::hitTestResultAtPoint()
{
  return MEMORY[0x1F4174678]();
}

uint64_t WebCore::EventHandler::capsLockStateMayHaveChanged(WebCore::EventHandler *this)
{
  return MEMORY[0x1F4174680](this);
}

uint64_t WebCore::NamedNodeMap::getNamedItem()
{
  return MEMORY[0x1F4174688]();
}

uint64_t WebCore::NamedNodeMap::getNamedItemNS()
{
  return MEMORY[0x1F4174690]();
}

uint64_t WebCore::NamedNodeMap::item(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1F4174698](this);
}

uint64_t WebCore::NamedNodeMap::length(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1F41746A0](this);
}

uint64_t WebCore::RenderObject::enclosingLayer(WebCore::RenderObject *this)
{
  return MEMORY[0x1F41746A8](this);
}

uint64_t WebCore::RenderObject::containingBlock(WebCore::RenderObject *this)
{
  return MEMORY[0x1F41746B0](this);
}

uint64_t WebCore::RenderObject::localToAbsolute()
{
  return MEMORY[0x1F41746B8]();
}

uint64_t WebCore::RenderObject::absoluteBoundingBoxRect(WebCore::RenderObject *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1F41746E0](this, a2, a3);
}

uint64_t WebCore::RenderObject::pixelSnappedAbsoluteClippedOverflowRect(WebCore::RenderObject *this)
{
  return MEMORY[0x1F41746E8](this);
}

uint64_t WebCore::SharedBuffer::createNSData(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1F4174718](this);
}

uint64_t WebCore::SharedBuffer::data(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1F4174720](this);
}

uint64_t WebCore::TextIterator::node(WebCore::TextIterator *this)
{
  return MEMORY[0x1F4174730](this);
}

uint64_t WebCore::TextIterator::range(WebCore::TextIterator *this)
{
  return MEMORY[0x1F4174738](this);
}

uint64_t WebCore::CSSImportRule::styleSheet(WebCore::CSSImportRule *this)
{
  return MEMORY[0x1F4174748](this);
}

uint64_t WebCore::CSSImportRule::href(WebCore::CSSImportRule *this)
{
  return MEMORY[0x1F4174750](this);
}

uint64_t WebCore::CSSImportRule::media(WebCore::CSSImportRule *this)
{
  return MEMORY[0x1F4174758](this);
}

uint64_t WebCore::CSSStyleSheet::ownerRule(WebCore::CSSStyleSheet *this)
{
  return MEMORY[0x1F4174760](this);
}

uint64_t WebCore::CharacterData::substringData(WebCore::CharacterData *this)
{
  return MEMORY[0x1F4174768](this);
}

uint64_t WebCore::ContainerNode::countChildNodes(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F4174770](this);
}

uint64_t WebCore::ContainerNode::lastElementChild(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F4174778](this);
}

uint64_t WebCore::ContainerNode::childElementCount(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F4174780](this);
}

uint64_t WebCore::ContainerNode::firstElementChild(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F4174788](this);
}

uint64_t WebCore::ContainerNode::traverseToChildAt(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F4174790](this);
}

uint64_t WebCore::HitTestResult::isSelected(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747B0](this);
}

uint64_t WebCore::HitTestResult::targetFrame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747B8](this);
}

uint64_t WebCore::HitTestResult::textContent(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747C0](this);
}

uint64_t WebCore::HitTestResult::innerNodeFrame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747F0](this);
}

uint64_t WebCore::HitTestResult::absoluteLinkURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747F8](this);
}

uint64_t WebCore::HitTestResult::spellingToolTip()
{
  return MEMORY[0x1F4174808]();
}

uint64_t WebCore::HitTestResult::absoluteImageURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174810](this);
}

uint64_t WebCore::HitTestResult::absoluteMediaURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174818](this);
}

uint64_t WebCore::HitTestResult::altDisplayString(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174820](this);
}

uint64_t WebCore::HitTestResult::isContentEditable(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174828](this);
}

uint64_t WebCore::HitTestResult::titleDisplayString(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174830](this);
}

uint64_t WebCore::HitTestResult::title()
{
  return MEMORY[0x1F4174878]();
}

uint64_t WebCore::IDBCursorInfo::isolatedCopy(WebCore::IDBCursorInfo *this)
{
  return MEMORY[0x1F4174888](this);
}

uint64_t WebCore::IDBResultData::isolatedCopy(WebCore::IDBResultData *this)
{
  return MEMORY[0x1F4174890](this);
}

uint64_t WebCore::KeyboardEvent::keyCode(WebCore::KeyboardEvent *this)
{
  return MEMORY[0x1F41748A0](this);
}

uint64_t WebCore::KeyboardEvent::charCode(WebCore::KeyboardEvent *this)
{
  return MEMORY[0x1F41748A8](this);
}

uint64_t WebCore::ResourceError::operator NSError *()
{
  return MEMORY[0x1F4174900]();
}

uint64_t WebCore::ScriptElement::scriptContent(WebCore::ScriptElement *this)
{
  return MEMORY[0x1F4174908](this);
}

uint64_t WebCore::CachedResource::response(WebCore::CachedResource *this)
{
  return MEMORY[0x1F4174940](this);
}

uint64_t WebCore::CredentialBase::user(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F4174958](this);
}

uint64_t WebCore::CredentialBase::password(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F4174960](this);
}

uint64_t WebCore::DocumentLoader::frameLoader(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174968](this);
}

uint64_t WebCore::DocumentLoader::subresource(WebCore::DocumentLoader *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4174970](this, a2);
}

uint64_t WebCore::DocumentLoader::mainResource(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174978](this);
}

uint64_t WebCore::DocumentLoader::subresources(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174980](this);
}

uint64_t WebCore::DocumentLoader::urlForHistory(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174988](this);
}

uint64_t WebCore::DocumentLoader::mainResourceData(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174990](this);
}

uint64_t WebCore::DocumentLoader::parsedArchiveData(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F41749A0](this);
}

uint64_t WebCore::DocumentLoader::mainResourceLoader(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F41749A8](this);
}

uint64_t WebCore::DocumentLoader::archiveResourceForURL(WebCore::DocumentLoader *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41749B8](this, a2);
}

uint64_t WebCore::DocumentLoader::urlForHistoryReflectsFailure(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F41749C0](this);
}

uint64_t WebCore::FontAttributes::createDictionary(WebCore::FontAttributes *this)
{
  return MEMORY[0x1F41749C8](this);
}

uint64_t WebCore::FrameSelection::currentForm(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F41749D0](this);
}

uint64_t WebCore::FrameSelection::copyTypingStyle(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F41749D8](this);
}

uint64_t WebCore::FrameSelection::rangeByMovingCurrentSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F41749F0](this);
}

uint64_t WebCore::FrameSelection::getClippedVisibleTextRectangles()
{
  return MEMORY[0x1F41749F8]();
}

uint64_t WebCore::FrameSelection::rangeByExtendingCurrentSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F4174A00](this);
}

uint64_t WebCore::FrameSelection::elementRangeContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F4174A10](this);
}

uint64_t WebCore::FrameSelection::rootEditableElementOrDocumentElement(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F4174A18](this);
}

uint64_t WebCore::IDBRequestData::isolatedCopy(WebCore::IDBRequestData *this)
{
  return MEMORY[0x1F4174A28](this);
}

uint64_t WebCore::LocalDOMWindow::getComputedStyle(WebCore::LocalDOMWindow *this, WebCore::Element *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4174A38](this, a2, a3);
}

uint64_t WebCore::LocalDOMWindow::getMatchedCSSRules(WebCore::LocalDOMWindow *this, WebCore::Element *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4174A40](this, a2, a3);
}

uint64_t WebCore::LocalDOMWindow::frame(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1F4174A50](this);
}

uint64_t WebCore::LocalFrameView::paintBehavior(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A68](this);
}

uint64_t WebCore::LocalFrameView::isSoftwareRenderable(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AA8](this);
}

uint64_t WebCore::ResourceHandle::connection(WebCore::ResourceHandle *this)
{
  return MEMORY[0x1F4174B10](this);
}

uint64_t WebCore::ResourceLoader::frameLoader(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F4174B18](this);
}

uint64_t WebCore::ScrollableArea::scrollOffset(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B58](this);
}

uint64_t WebCore::SecurityOrigin::canDisplay()
{
  return MEMORY[0x1F4174BC8]();
}

uint64_t WebCore::SecurityOrigin::isolatedCopy(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F4174BE8](this);
}

uint64_t WebCore::SecurityOrigin::isSameOriginAs(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1F4174BF0](this, a2);
}

uint64_t WebCore::SecurityOrigin::toURL(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F4174C10](this);
}

uint64_t WebCore::SecurityOrigin::toString(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F4174C18](this);
}

uint64_t WebCore::StyleSheetList::length(WebCore::StyleSheetList *this)
{
  return MEMORY[0x1F4174C20](this);
}

uint64_t WebCore::CSSGroupingRule::cssRules(WebCore::CSSGroupingRule *this)
{
  return MEMORY[0x1F4174C78](this);
}

uint64_t WebCore::FocusController::focusedOrMainFrame(WebCore::FocusController *this)
{
  return MEMORY[0x1F4174C88](this);
}

uint64_t WebCore::HTMLAreaElement::computeRect(WebCore::HTMLAreaElement *this, WebCore::RenderObject *a2)
{
  return MEMORY[0x1F4174CB0](this, a2);
}

uint64_t WebCore::HTMLBaseElement::href(WebCore::HTMLBaseElement *this)
{
  return MEMORY[0x1F4174CC0](this);
}

uint64_t WebCore::HTMLFormElement::autocomplete(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F4174CC8](this);
}

uint64_t WebCore::HTMLFormElement::unsafeListedElements(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F4174CD0](this);
}

uint64_t WebCore::HTMLFormElement::length(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F4174CD8](this);
}

uint64_t WebCore::HTMLFormElement::method(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1F4174CE0](this);
}

uint64_t WebCore::HTMLLinkElement::crossOrigin(WebCore::HTMLLinkElement *this)
{
  return MEMORY[0x1F4174CE8](this);
}

uint64_t WebCore::IDBKeyRangeData::isolatedCopy(WebCore::IDBKeyRangeData *this)
{
  return MEMORY[0x1F4174D08](this);
}

uint64_t WebCore::JSDOMWindowBase::wrapped(WebCore::JSDOMWindowBase *this)
{
  return MEMORY[0x1F4174D10](this);
}

uint64_t WebCore::ProtectionSpace::nsSpace(WebCore::ProtectionSpace *this)
{
  return MEMORY[0x1F4174D48](this);
}

uint64_t WebCore::ResourceRequest::nsURLRequest()
{
  return MEMORY[0x1F4174D50]();
}

uint64_t WebCore::SecurityContext::securityOrigin(WebCore::SecurityContext *this)
{
  return MEMORY[0x1F4174D68](this);
}

uint64_t WebCore::StyleProperties::mutableCopy(WebCore::StyleProperties *this)
{
  return MEMORY[0x1F4174D88](this);
}

uint64_t WebCore::VisiblePosition::characterAfter(WebCore::VisiblePosition *this)
{
  return MEMORY[0x1F4174DA8](this);
}

uint64_t WebCore::VisiblePosition::absoluteCaretBounds(WebCore::VisiblePosition *this, BOOL *a2)
{
  return MEMORY[0x1F4174DB0](this, a2);
}

uint64_t WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation(WebCore::VisiblePosition *this)
{
  return MEMORY[0x1F4174DC0](this);
}

uint64_t WebCore::VisiblePosition::left(WebCore::VisiblePosition *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1F4174DC8](this, a2, a3);
}

uint64_t WebCore::VisiblePosition::next()
{
  return MEMORY[0x1F4174DD0]();
}

uint64_t WebCore::VisiblePosition::right(WebCore::VisiblePosition *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1F4174DD8](this, a2, a3);
}

uint64_t WebCore::VisiblePosition::previous()
{
  return MEMORY[0x1F4174DE0]();
}

uint64_t WebCore::DocumentFragment::getElementById()
{
  return MEMORY[0x1F4174E10]();
}

uint64_t WebCore::FileReaderLoader::arrayBufferResult(WebCore::FileReaderLoader *this)
{
  return MEMORY[0x1F4174E18](this);
}

uint64_t WebCore::HTMLImageElement::cachedImage(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E30](this);
}

uint64_t WebCore::HTMLImageElement::crossOrigin(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E38](this);
}

uint64_t WebCore::HTMLImageElement::naturalWidth(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E40](this);
}

uint64_t WebCore::HTMLImageElement::naturalHeight(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E48](this);
}

uint64_t WebCore::HTMLImageElement::x(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E50](this);
}

uint64_t WebCore::HTMLImageElement::y(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E58](this);
}

uint64_t WebCore::HTMLImageElement::alt(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E60](this);
}

uint64_t WebCore::HTMLImageElement::complete(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1F4174E68](this);
}

uint64_t WebCore::HTMLInputElement::isTextField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E80](this);
}

uint64_t WebCore::HTMLInputElement::valueAsDate(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E98](this);
}

uint64_t WebCore::HTMLInputElement::defaultValue(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EA0](this);
}

uint64_t WebCore::HTMLInputElement::valueAsNumber(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EE8](this);
}

uint64_t WebCore::HTMLInputElement::isPasswordField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F00](this);
}

uint64_t WebCore::HTMLInputElement::validationMessage(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F18](this);
}

uint64_t WebCore::HTMLInputElement::alt(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F40](this);
}

uint64_t WebCore::HTMLInputElement::list(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F48](this);
}

uint64_t WebCore::HTMLInputElement::value(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F50](this);
}

uint64_t WebCore::HTMLInputElement::width(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F58](this);
}

uint64_t WebCore::HTMLInputElement::height(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F60](this);
}

uint64_t WebCore::HTMLInputElement::isText(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F68](this);
}

uint64_t WebCore::HTMLLabelElement::form(WebCore::HTMLLabelElement *this)
{
  return MEMORY[0x1F4174F78](this);
}

uint64_t WebCore::HTMLLabelElement::control(WebCore::HTMLLabelElement *this)
{
  return MEMORY[0x1F4174F80](this);
}

uint64_t WebCore::HTMLMediaElement::canPlayType(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F4174F88](this, a2);
}

uint64_t WebCore::HTMLMediaElement::crossOrigin(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174F90](this);
}

uint64_t WebCore::HTMLMediaElement::getStartDate(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174F98](this);
}

uint64_t WebCore::HTMLMediaElement::networkState(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FA0](this);
}

uint64_t WebCore::HTMLMediaElement::preservesPitch(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FA8](this);
}

uint64_t WebCore::HTMLMediaElement::ended(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FC8](this);
}

uint64_t WebCore::HTMLMediaElement::error(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FD0](this);
}

uint64_t WebCore::HTMLMediaElement::preload(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FE0](this);
}

uint64_t WebCore::HTMLMediaElement::seeking(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FE8](this);
}

uint64_t WebCore::HTMLMediaElement::controls(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FF0](this);
}

uint64_t WebCore::HTMLStyleElement::disabled(WebCore::HTMLStyleElement *this)
{
  return MEMORY[0x1F4174FF8](this);
}

uint64_t WebCore::HTMLTableElement::tFoot(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F4175000](this);
}

uint64_t WebCore::HTMLTableElement::tHead(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F4175008](this);
}

uint64_t WebCore::HTMLTableElement::caption(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1F4175010](this);
}

uint64_t WebCore::HTMLTitleElement::text(WebCore::HTMLTitleElement *this)
{
  return MEMORY[0x1F4175018](this);
}

uint64_t WebCore::HTMLVideoElement::videoWidth(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F4175020](this);
}

uint64_t WebCore::HTMLVideoElement::videoHeight(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F4175028](this);
}

uint64_t WebCore::IDBGetRecordData::isolatedCopy(WebCore::IDBGetRecordData *this)
{
  return MEMORY[0x1F4175038](this);
}

uint64_t WebCore::ResourceResponse::nsURLResponse(WebCore::ResourceResponse *this)
{
  return MEMORY[0x1F4175048](this);
}

uint64_t WebCore::URLDecomposition::hash(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F4175080](this);
}

uint64_t WebCore::URLDecomposition::host(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F4175088](this);
}

uint64_t WebCore::URLDecomposition::port(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F4175090](this);
}

uint64_t WebCore::URLDecomposition::search(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F4175098](this);
}

uint64_t WebCore::URLDecomposition::hostname(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F41750A0](this);
}

uint64_t WebCore::URLDecomposition::pathname(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F41750A8](this);
}

uint64_t WebCore::URLDecomposition::protocol(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1F41750B0](this);
}

uint64_t WebCore::VisibleSelection::isContentEditable(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750E0](this);
}

uint64_t WebCore::VisibleSelection::toNormalizedRange(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750F0](this);
}

uint64_t WebCore::VisibleSelection::rootEditableElement(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750F8](this);
}

uint64_t WebCore::FullscreenManager::fullscreenElement(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F4175130](this);
}

uint64_t WebCore::FullscreenManager::isFullscreenEnabled(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F4175138](this);
}

uint64_t WebCore::HTMLAnchorElement::origin(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1F4175150](this);
}

uint64_t WebCore::HTMLLegendElement::form(WebCore::HTMLLegendElement *this)
{
  return MEMORY[0x1F4175158](this);
}

uint64_t WebCore::HTMLOptionElement::form(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175178](this);
}

uint64_t WebCore::HTMLOptionElement::text(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175180](this);
}

uint64_t WebCore::HTMLOptionElement::index(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175188](this);
}

uint64_t WebCore::HTMLOptionElement::label(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175190](this);
}

uint64_t WebCore::HTMLOptionElement::value(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175198](this);
}

uint64_t WebCore::HTMLOptionElement::selected()
{
  return MEMORY[0x1F41751A0]();
}

uint64_t WebCore::HTMLScriptElement::crossOrigin(WebCore::HTMLScriptElement *this)
{
  return MEMORY[0x1F41751A8](this);
}

uint64_t WebCore::HTMLScriptElement::async(WebCore::HTMLScriptElement *this)
{
  return MEMORY[0x1F41751B0](this);
}

uint64_t WebCore::HTMLSelectElement::selectedIndex(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F41751B8](this);
}

uint64_t WebCore::HTMLSelectElement::value(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F41751C0](this);
}

uint64_t WebCore::HTMLSelectElement::length(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F41751C8](this);
}

uint64_t WebCore::HTMLSelectElement::listItems(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F41751D0](this);
}

uint64_t WebCore::RenderTextControl::textFormControlElement(WebCore::RenderTextControl *this)
{
  return MEMORY[0x1F4175200](this);
}

uint64_t WebCore::ResourceErrorBase::lazyInit(WebCore::ResourceErrorBase *this)
{
  return MEMORY[0x1F4175210](this);
}

uint64_t WebCore::SelectionGeometry::rect(WebCore::SelectionGeometry *this)
{
  return MEMORY[0x1F4175228](this);
}

uint64_t WebCore::HTMLMarqueeElement::scrollDelay(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F4175240](this);
}

uint64_t WebCore::HTMLMarqueeElement::scrollAmount(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F4175248](this);
}

uint64_t WebCore::HTMLMarqueeElement::loop(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1F4175250](this);
}

uint64_t WebCore::IDBOpenRequestData::isolatedCopy(WebCore::IDBOpenRequestData *this)
{
  return MEMORY[0x1F4175258](this);
}

uint64_t WebCore::IDBTransactionInfo::isolatedCopy(WebCore::IDBTransactionInfo *this)
{
  return MEMORY[0x1F4175260](this);
}

uint64_t WebCore::PlatformPasteboard::readBuffer()
{
  return MEMORY[0x1F41752B0]();
}

uint64_t WebCore::PlatformPasteboard::readString(WebCore::PlatformPasteboard *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F41752B8](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::changeCount(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F41752C0](this);
}

uint64_t WebCore::PlatformPasteboard::bufferForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752C8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::numberOfFiles(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F41752D0](this);
}

uint64_t WebCore::PlatformPasteboard::stringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752D8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::allStringsForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752E0](this, a2);
}

uint64_t WebCore::PlatformPasteboard::getPathnamesForType()
{
  return MEMORY[0x1F41752E8]();
}

uint64_t WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752F0](this, a2);
}

uint64_t WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752F8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::count(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F4175300](this);
}

uint64_t WebCore::PlatformPasteboard::readURL(WebCore::PlatformPasteboard *this, uint64_t a2, WTF::String *a3)
{
  return MEMORY[0x1F4175308](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::getTypes()
{
  return MEMORY[0x1F4175310]();
}

uint64_t WebCore::SecurityOriginData::securityOrigin(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1F4175350](this);
}

uint64_t WebCore::SecurityOriginData::databaseIdentifier(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1F4175358](this);
}

uint64_t WebCore::WebSocketHandshake::failureReason(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F4175380](this);
}

uint64_t WebCore::WebSocketHandshake::serverSetCookie(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F4175388](this);
}

uint64_t WebCore::WebSocketHandshake::acceptedExtensions(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F4175390](this);
}

uint64_t WebCore::WebSocketHandshake::clientHandshakeMessage(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F4175398](this);
}

uint64_t WebCore::WebSocketHandshake::clientHandshakeRequest()
{
  return MEMORY[0x1F41753A0]();
}

uint64_t WebCore::WebSocketHandshake::serverHandshakeResponse(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F41753A8](this);
}

uint64_t WebCore::WebSocketHandshake::serverWebSocketProtocol(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F41753B0](this);
}

uint64_t WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F41753B8](this);
}

uint64_t WebCore::WebSocketHandshake::url(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F41753C0](this);
}

uint64_t WebCore::WebSocketHandshake::mode(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1F41753C8](this);
}

uint64_t WebCore::DragCaretController::caretRectInRootViewCoordinates(WebCore::DragCaretController *this)
{
  return MEMORY[0x1F41753D8](this);
}

uint64_t WebCore::HTMLTableRowElement::sectionRowIndex(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1F41753F8](this);
}

uint64_t WebCore::HTMLTableRowElement::rowIndex(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1F4175400](this);
}

uint64_t WebCore::HTMLTextAreaElement::defaultValue(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1F4175408](this);
}

uint64_t WebCore::HTMLTextAreaElement::value(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1F4175410](this);
}

uint64_t WebCore::InspectorController::getHighlight()
{
  return MEMORY[0x1F4175438]();
}

uint64_t WebCore::ResourceRequestBase::httpMethod(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175480](this);
}

uint64_t WebCore::ResourceRequestBase::httpReferrer(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754A0](this);
}

uint64_t WebCore::ResourceRequestBase::url(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175508](this);
}

uint64_t WebCore::ResourceRequestBase::isNull(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175510](this);
}

uint64_t WebCore::ResourceRequestBase::priority(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175528](this);
}

uint64_t WebCore::UIEventWithKeyState::getModifierState(WebCore::UIEventWithKeyState *this, const WTF::String *a2)
{
  return MEMORY[0x1F4175570](this, a2);
}

uint64_t WebCore::DeprecatedCSSOMValue::cssValueType(WebCore::DeprecatedCSSOMValue *this)
{
  return MEMORY[0x1F4175588](this);
}

uint64_t WebCore::DeprecatedCSSOMValue::cssText(WebCore::DeprecatedCSSOMValue *this)
{
  return MEMORY[0x1F4175590](this);
}

uint64_t WebCore::HTMLTableCellElement::rowSpanForBindings(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F41755A8](this);
}

uint64_t WebCore::HTMLTableCellElement::scope(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F41755B0](this);
}

uint64_t WebCore::HTMLTableCellElement::colSpan(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F41755B8](this);
}

uint64_t WebCore::HTMLTableCellElement::cellAbove(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F41755C0](this);
}

uint64_t WebCore::HTMLTableCellElement::cellIndex(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F41755C8](this);
}

uint64_t WebCore::IDBGetAllRecordsData::isolatedCopy(WebCore::IDBGetAllRecordsData *this)
{
  return MEMORY[0x1F41755D0](this);
}

uint64_t WebCore::IDBIterateCursorData::isolatedCopy(WebCore::IDBIterateCursorData *this)
{
  return MEMORY[0x1F41755D8](this);
}

uint64_t WebCore::RenderBoxModelObject::inlineContinuation(WebCore::RenderBoxModelObject *this)
{
  return MEMORY[0x1F41755F0](this);
}

uint64_t WebCore::ResourceResponseBase::suggestedFilename(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175640](this);
}

uint64_t WebCore::ResourceResponseBase::url(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175690](this);
}

uint64_t WebCore::ResourceResponseBase::mimeType(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F41756B0](this);
}

uint64_t WebCore::BackForwardController::forwardCount(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F4175728](this);
}

uint64_t WebCore::BackForwardController::backCount(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F4175738](this);
}

uint64_t WebCore::HTMLFrameOwnerElement::contentWindow(WebCore::HTMLFrameOwnerElement *this)
{
  return MEMORY[0x1F41757A0](this);
}

uint64_t WebCore::HTMLFrameOwnerElement::contentDocument(WebCore::HTMLFrameOwnerElement *this)
{
  return MEMORY[0x1F41757A8](this);
}

uint64_t WebCore::HTMLOptionsCollection::selectedIndex(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1F41757B0](this);
}

uint64_t WebCore::HTMLOptionsCollection::item(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1F41757B8](this);
}

uint64_t WebCore::HTMLOptionsCollection::length(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1F41757C0](this);
}

uint64_t WebCore::HTMLOptionsCollection::namedItem()
{
  return MEMORY[0x1F41757C8]();
}

uint64_t WebCore::IDBResourceIdentifier::isolatedCopy(WebCore::IDBResourceIdentifier *this)
{
  return MEMORY[0x1F41757D0](this);
}

uint64_t WebCore::NetworkStorageSession::cookieStorage(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41757F8](this);
}

uint64_t WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue()
{
  return MEMORY[0x1F4175878]();
}

uint64_t WebCore::UserContentURLPattern::matchesHost(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  return MEMORY[0x1F41758B8](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  return MEMORY[0x1F41758C0](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesScheme(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41758D0](this, a2);
}

uint64_t WebCore::FragmentedSharedBuffer::makeContiguous(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1F4175950](this);
}

uint64_t WebCore::FragmentedSharedBuffer::createNSDataArray(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1F4175958](this);
}

uint64_t WebCore::HTMLFormControlElement::formAction(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F4175980](this);
}

uint64_t WebCore::HTMLFormControlElement::formMethod(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F4175988](this);
}

uint64_t WebCore::HTMLFormControlElement::formEnctype(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F4175990](this);
}

uint64_t WebCore::HTMLFormControlElement::autocomplete(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F4175998](this);
}

uint64_t WebCore::HTMLFormControlElement::autocapitalizeType(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F41759B0](this);
}

uint64_t WebCore::LocalDOMWindowProperty::frame(WebCore::LocalDOMWindowProperty *this)
{
  return MEMORY[0x1F41759B8](this);
}

uint64_t WebCore::ScriptExecutionContext::domainForCachePartition(WebCore::ScriptExecutionContext *this)
{
  return MEMORY[0x1F41759D0](this);
}

uint64_t WebCore::FrameLoaderStateMachine::committingFirstRealLoad(WebCore::FrameLoaderStateMachine *this)
{
  return MEMORY[0x1F41759F0](this);
}

uint64_t WebCore::DocumentMarkerController::markersFor()
{
  return MEMORY[0x1F4175A78]();
}

uint64_t WebCore::HTMLTextFormControlElement::selectionEnd(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4175AC0](this);
}

uint64_t WebCore::HTMLTextFormControlElement::selectionStart(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4175AC8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::selectionDirection(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4175AD0](this);
}

uint64_t WebCore::HTMLTextFormControlElement::visiblePositionForIndex(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4175AE0](this);
}

uint64_t WebCore::ValidatedFormListedElement::willValidate(WebCore::ValidatedFormListedElement *this)
{
  return MEMORY[0x1F4175B28](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getRectValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1F4175BA8](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getFloatValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1F4175BB0](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::primitiveType(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1F4175BB8](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getStringValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1F4175BC0](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getCounterValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1F4175BC8](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getRGBColorValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1F4175BD0](this);
}

uint64_t WebCore::FixedPositionViewportConstraints::layerPositionForViewportRect(WebCore::FixedPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4175C38](this, a2);
}

uint64_t WebCore::StickyPositionViewportConstraints::layerPositionForConstrainingRect(WebCore::StickyPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4175C50](this, a2);
}

uint64_t WebCore::Attr::value(WebCore::Attr *this)
{
  return MEMORY[0x1F4175CA0](this);
}

uint64_t WebCore::Blob::size(WebCore::Blob *this)
{
  return MEMORY[0x1F4175CA8](this);
}

uint64_t WebCore::File::lastModified(WebCore::File *this)
{
  return MEMORY[0x1F4175CB0](this);
}

uint64_t WebCore::Node::isEqualNode(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4175CC8](this, a2);
}

uint64_t WebCore::Node::textContent(WebCore::Node *this)
{
  return MEMORY[0x1F4175CD0](this);
}

uint64_t WebCore::Node::lookupPrefix()
{
  return MEMORY[0x1F4175CD8]();
}

uint64_t WebCore::Node::isContentEditable(WebCore::Node *this)
{
  return MEMORY[0x1F4175CE0](this);
}

uint64_t WebCore::Node::isDefaultNamespace()
{
  return MEMORY[0x1F4175CF0]();
}

uint64_t WebCore::Node::lookupNamespaceURI()
{
  return MEMORY[0x1F4175CF8]();
}

uint64_t WebCore::Node::nextElementSibling(WebCore::Node *this)
{
  return MEMORY[0x1F4175D00](this);
}

uint64_t WebCore::Node::rootEditableElement(WebCore::Node *this)
{
  return MEMORY[0x1F4175D08](this);
}

uint64_t WebCore::Node::previousElementSibling(WebCore::Node *this)
{
  return MEMORY[0x1F4175D10](this);
}

uint64_t WebCore::Node::baseURI(WebCore::Node *this)
{
  return MEMORY[0x1F4175D38](this);
}

uint64_t WebCore::Node::contains(WebCore::Node *this, const WebCore::Node *a2)
{
  return MEMORY[0x1F4175D40](this, a2);
}

uint64_t WebCore::Node::renderBox(WebCore::Node *this)
{
  return MEMORY[0x1F4175D48](this);
}

uint64_t WebCore::Page::visibilityState(WebCore::Page *this)
{
  return MEMORY[0x1F4175D70](this);
}

uint64_t WebCore::Page::useDarkAppearance(WebCore::Page *this)
{
  return MEMORY[0x1F4175D80](this);
}

uint64_t WebCore::Page::editableElementsInRect(WebCore::Page *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4175DB8](this, a2);
}

uint64_t WebCore::Page::protectedStorageNamespaceProvider(WebCore::Page *this)
{
  return MEMORY[0x1F4175E10](this);
}

uint64_t WebCore::Page::inLowQualityImageInterpolationMode(WebCore::Page *this)
{
  return MEMORY[0x1F4175E18](this);
}

uint64_t WebCore::Page::groupName(WebCore::Page *this)
{
  return MEMORY[0x1F4175E38](this);
}

uint64_t WebCore::Page::pageCount(WebCore::Page *this)
{
  return MEMORY[0x1F4175E40](this);
}

uint64_t WebCore::Page::sessionID(WebCore::Page *this)
{
  return MEMORY[0x1F4175E50](this);
}

uint64_t WebCore::Path::platformPath(WebCore::Path *this)
{
  return MEMORY[0x1F4175E58](this);
}

uint64_t WebCore::Text::wholeText(WebCore::Text *this)
{
  return MEMORY[0x1F4175E78](this);
}

uint64_t WebCore::Frame::ownerRenderer(WebCore::Frame *this)
{
  return MEMORY[0x1F4175E90](this);
}

uint64_t WebCore::Frame::pageID(WebCore::Frame *this)
{
  return MEMORY[0x1F4175EA8](this);
}

uint64_t WebCore::Range::cloneRange(WebCore::Range *this)
{
  return MEMORY[0x1F4175EC0](this);
}

uint64_t WebCore::Range::compareNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4175EC8](this, a2);
}

uint64_t WebCore::Range::comparePoint(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4175ED0](this, a2);
}

uint64_t WebCore::Range::intersectsNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4175ED8](this, a2);
}

uint64_t WebCore::Range::compareBoundaryPoints(WebCore::Range *this, uint64_t a2, const WebCore::Range *a3)
{
  return MEMORY[0x1F4175EE0](this, a2, a3);
}

uint64_t WebCore::Range::commonAncestorContainer(WebCore::Range *this)
{
  return MEMORY[0x1F4175EE8](this);
}

uint64_t WebCore::Range::toString(WebCore::Range *this)
{
  return MEMORY[0x1F4175EF0](this);
}

uint64_t WebCore::Editor::selectedText(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F18](this);
}

uint64_t WebCore::Editor::compositionRange(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F28](this);
}

uint64_t WebCore::Editor::firstRectForRange(WebCore::Editor *this, const WebCore::SimpleRange *a2)
{
  return MEMORY[0x1F4175F30](this, a2);
}

uint64_t WebCore::Editor::applyEditingStyleToBodyElement(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F40](this);
}

uint64_t WebCore::Editor::baseWritingDirectionForSelectionStart(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F48](this);
}

uint64_t WebCore::Editor::client(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F58](this);
}

uint64_t WebCore::Editor::Command::isSupported(WebCore::Editor::Command *this)
{
  return MEMORY[0x1F4175F60](this);
}

uint64_t WebCore::Editor::Command::execute()
{
  return MEMORY[0x1F4175F70]();
}

{
  return MEMORY[0x1F4175F78]();
}

uint64_t WebCore::Editor::canEdit(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F90](this);
}

uint64_t WebCore::Widget::platformWidget(WebCore::Widget *this)
{
  return MEMORY[0x1F4176060](this);
}

uint64_t WebCore::CSSRule::typeForCSSOM(WebCore::CSSRule *this)
{
  return MEMORY[0x1F4176080](this);
}

uint64_t WebCore::Element::attributes(WebCore::Element *this)
{
  return MEMORY[0x1F4176088](this);
}

uint64_t WebCore::Element::getAttribute()
{
  return MEMORY[0x1F41760A0]();
}

{
  return MEMORY[0x1F41760A8]();
}

uint64_t WebCore::Element::hasAttribute()
{
  return MEMORY[0x1F41760B0]();
}

uint64_t WebCore::Element::hasAttributes(WebCore::Element *this)
{
  return MEMORY[0x1F41760B8](this);
}

uint64_t WebCore::Element::getAttributeNS()
{
  return MEMORY[0x1F41760C0]();
}

uint64_t WebCore::Element::hasAttributeNS()
{
  return MEMORY[0x1F41760C8]();
}

uint64_t WebCore::Element::getURLAttribute()
{
  return MEMORY[0x1F41760D8]();
}

uint64_t WebCore::Element::getIntegralAttribute()
{
  return MEMORY[0x1F41760E8]();
}

uint64_t WebCore::Element::getUnsignedIntegralAttribute()
{
  return MEMORY[0x1F41760F8]();
}

uint64_t WebCore::Element::innerHTML(WebCore::Element *this)
{
  return MEMORY[0x1F4176118](this);
}

uint64_t WebCore::Element::outerHTML(WebCore::Element *this)
{
  return MEMORY[0x1F4176120](this);
}

uint64_t WebCore::IntRect::operator CGRect()
{
  return MEMORY[0x1F4176148]();
}

uint64_t WebCore::IntSize::operator CGSize()
{
  return MEMORY[0x1F4176150]();
}

uint64_t WebCore::Document::alinkColor(WebCore::Document *this)
{
  return MEMORY[0x1F4176160](this);
}

uint64_t WebCore::Document::compatMode(WebCore::Document *this)
{
  return MEMORY[0x1F4176168](this);
}

uint64_t WebCore::Document::designMode(WebCore::Document *this)
{
  return MEMORY[0x1F4176170](this);
}

uint64_t WebCore::Document::vlinkColor(WebCore::Document *this)
{
  return MEMORY[0x1F4176178](this);
}

uint64_t WebCore::Document::completeURL()
{
  return MEMORY[0x1F4176180]();
}

uint64_t WebCore::Document::contentType(WebCore::Document *this)
{
  return MEMORY[0x1F4176188](this);
}

uint64_t WebCore::Document::documentURI(WebCore::Document *this)
{
  return MEMORY[0x1F4176190](this);
}

uint64_t WebCore::Document::windowProxy(WebCore::Document *this)
{
  return MEMORY[0x1F41761A0](this);
}

uint64_t WebCore::Document::lastModified(WebCore::Document *this)
{
  return MEMORY[0x1F41761A8](this);
}

uint64_t WebCore::Document::axObjectCache(WebCore::Document *this)
{
  return MEMORY[0x1F41761B0](this);
}

uint64_t WebCore::Document::bodyOrFrameset(WebCore::Document *this)
{
  return MEMORY[0x1F41761C0](this);
}

uint64_t WebCore::Document::urlForBindings(WebCore::Document *this)
{
  return MEMORY[0x1F41761D0](this);
}

uint64_t WebCore::Document::visibilityState(WebCore::Document *this)
{
  return MEMORY[0x1F41761D8](this);
}

uint64_t WebCore::Document::linkColorForBindings(WebCore::Document *this)
{
  return MEMORY[0x1F41761F8](this);
}

uint64_t WebCore::Document::haveStylesheetsLoaded(WebCore::Document *this)
{
  return MEMORY[0x1F4176200](this);
}

uint64_t WebCore::Document::characterSetWithUTF8Fallback(WebCore::Document *this)
{
  return MEMORY[0x1F4176218](this);
}

uint64_t WebCore::Document::defaultCharsetForLegacyBindings(WebCore::Document *this)
{
  return MEMORY[0x1F4176220](this);
}

uint64_t WebCore::Document::displayStringModifiedByEncoding(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4176228](this, a2);
}

uint64_t WebCore::Document::dir(WebCore::Document *this)
{
  return MEMORY[0x1F4176240](this);
}

uint64_t WebCore::Document::domain(WebCore::Document *this)
{
  return MEMORY[0x1F4176258](this);
}

uint64_t WebCore::Document::hidden(WebCore::Document *this)
{
  return MEMORY[0x1F4176260](this);
}

uint64_t WebCore::Document::loader(WebCore::Document *this)
{
  return MEMORY[0x1F4176268](this);
}

uint64_t WebCore::Document::bgColor(WebCore::Document *this)
{
  return MEMORY[0x1F4176278](this);
}

uint64_t WebCore::Document::doctype(WebCore::Document *this)
{
  return MEMORY[0x1F4176280](this);
}

uint64_t WebCore::Document::fgColor(WebCore::Document *this)
{
  return MEMORY[0x1F4176288](this);
}

uint64_t WebCore::Document::encoding(WebCore::Document *this)
{
  return MEMORY[0x1F4176290](this);
}

uint64_t WebCore::Document::hasFocus(WebCore::Document *this)
{
  return MEMORY[0x1F4176298](this);
}

uint64_t WebCore::Document::userAgent(WebCore::Document *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41762A8](this, a2);
}

uint64_t WebCore::FileList::item(WebCore::FileList *this)
{
  return MEMORY[0x1F41762B0](this);
}

uint64_t WebCore::IDBValue::isolatedCopy(WebCore::IDBValue *this)
{
  return MEMORY[0x1F41762D8](this);
}

uint64_t WebCore::Position::containerNode(WebCore::Position *this)
{
  return MEMORY[0x1F4176300](this);
}

uint64_t WebCore::Position::parentAnchoredEquivalent(WebCore::Position *this)
{
  return MEMORY[0x1F4176310](this);
}

uint64_t WebCore::Position::offsetForPositionAfterAnchor(WebCore::Position *this)
{
  return MEMORY[0x1F4176320](this);
}

uint64_t WebCore::FloatQuad::boundingBox(WebCore::FloatQuad *this)
{
  return MEMORY[0x1F4176378](this);
}

uint64_t WebCore::FloatQuad::containsQuad(WebCore::FloatQuad *this, const WebCore::FloatQuad *a2)
{
  return MEMORY[0x1F4176380](this, a2);
}

uint64_t WebCore::FloatQuad::containsPoint(WebCore::FloatQuad *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F4176388](this, a2);
}

uint64_t WebCore::FloatRect::operator CGRect()
{
  return MEMORY[0x1F41763B8]();
}

uint64_t WebCore::FloatSize::operator CGSize()
{
  return MEMORY[0x1F41763C8]();
}

uint64_t WebCore::FrameTree::childCount(WebCore::FrameTree *this)
{
  return MEMORY[0x1F41763D0](this);
}

uint64_t WebCore::FrameTree::uniqueName(WebCore::FrameTree *this)
{
  return MEMORY[0x1F41763D8](this);
}

uint64_t WebCore::FrameTree::traverseNext()
{
  return MEMORY[0x1F41763E8]();
}

uint64_t WebCore::FrameTree::traverseNext(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  return MEMORY[0x1F41763F0](this, a2);
}

uint64_t WebCore::FrameTree::findByUniqueName()
{
  return MEMORY[0x1F4176400]();
}

uint64_t WebCore::FrameTree::traversePrevious()
{
  return MEMORY[0x1F4176408]();
}

uint64_t WebCore::FrameTree::parent(WebCore::FrameTree *this)
{
  return MEMORY[0x1F4176420](this);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::identifier(WebCore::IDBClient::IDBConnectionToServer *this)
{
  return MEMORY[0x1F4176450](this);
}

uint64_t WebCore::MediaList::item(WebCore::MediaList *this)
{
  return MEMORY[0x1F41764C0](this);
}

uint64_t WebCore::MediaList::length(WebCore::MediaList *this)
{
  return MEMORY[0x1F41764C8](this);
}

uint64_t WebCore::MediaList::mediaText(WebCore::MediaList *this)
{
  return MEMORY[0x1F41764D0](this);
}

uint64_t WebCore::RenderBox::borderRadii(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764D8](this);
}

uint64_t WebCore::RenderBox::absoluteContentQuad(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764F0](this);
}

uint64_t WebCore::TreeScope::getElementById()
{
  return MEMORY[0x1F4176508]();
}

uint64_t WebCore::TreeScope::ancestorElementInThisScope(WebCore::TreeScope *this, WebCore::Element *a2)
{
  return MEMORY[0x1F4176518](this, a2);
}

uint64_t WTF::String::isolatedCopy()
{
  return MEMORY[0x1F40ECD38]();
}

{
  return MEMORY[0x1F40ECD48]();
}

uint64_t WebCore::IDBIndexInfo::isolatedCopy()
{
  return MEMORY[0x1F4176520]();
}

uint64_t WebCore::IDBObjectStoreInfo::isolatedCopy()
{
  return MEMORY[0x1F4176528]();
}

uint64_t WebCore::SecurityOriginData::isolatedCopy()
{
  return MEMORY[0x1F4176530]();
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1F417EC50]();
}

void operator delete()
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

int rmdir(const char *a1)
{
  return MEMORY[0x1F40CDD90](a1);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1F41821D0](a1, zDbName, *(void *)&op, a4);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

UCharDirection u_charDirection(UChar32 c)
{
  return MEMORY[0x1F417F700](*(void *)&c);
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F760](*(void *)&c, *(void *)&which);
}

uint64_t ubrk_close()
{
  return MEMORY[0x1F417FA30]();
}

uint64_t ubrk_following()
{
  return MEMORY[0x1F417FA50]();
}

uint64_t ubrk_setUText()
{
  return MEMORY[0x1F417FAA8]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1F4180780](ut);
}