uint64_t WebLocalizedString(void *a1, char *cStr)
{
  void *v4;
  CFStringRef v5;
  uint64_t v6;
  char v8;
  char **v9;
  char *v10;

  if (a1)
  {
    v4 = (void *)a1[1];
    if (!v4)
    {
      v4 = objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", objc_msgSend(NSString, "stringWithUTF8String:", *a1));
      a1[1] = v4;
    }
  }
  else
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB3A9800, memory_order_acquire) != -1)
    {
      v10 = &v8;
      v9 = &v10;
      std::__call_once(&qword_1EB3A9800, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebLocalizedString::$_0 &&>>);
    }
    v4 = (void *)_MergedGlobals_20;
  }
  v5 = CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  v6 = [v4 localizedStringForKey:v5 value:@"localized string not found" table:0];
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

void sub_1E1346984(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef std::__call_once_proxy[abi:sn180100]<std::tuple<WebLocalizedString::$_0 &&>>()
{
  CFTypeRef result = (CFTypeRef)[MEMORY[0x1E4F28B50] mainBundle];
  _MergedGlobals_20 = (uint64_t)result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void sub_1E1346C74(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void BackForwardList::BackForwardList(BackForwardList *this, WebView *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *(void *)this = &unk_1F3C78540;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0x64FFFFFFFFLL;
  *((_WORD *)this + 32) = 257;
}

void BackForwardList::~BackForwardList(BackForwardList *this, void *a2)
{
  *(void *)this = &unk_1F3C78540;
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      v5 = (_DWORD **)*((void *)this + 6);
      do
      {
        v8 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *v5 = 0;
          if (v8)
          {
            if (*v8 == 1)
            {
              v6 = (WTF *)MEMORY[0x1E4E44A30]();
              WTF::fastFree(v6, v7);
            }
            else
            {
              --*v8;
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v9 = *((unsigned int *)this + 11);
  if (v9)
  {
    v10 = (_DWORD **)*((void *)this + 4);
    uint64_t v11 = 8 * v9;
    do
    {
      v14 = *v10;
      *v10 = 0;
      if (v14)
      {
        if (*v14 == 1)
        {
          v12 = (WTF *)MEMORY[0x1E4E44A30]();
          WTF::fastFree(v12, v13);
        }
        else
        {
          --*v14;
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v15 = (WTF *)*((void *)this + 4);
  if (v15)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, a2);
  }
  uint64_t v16 = *((void *)this + 2);
  if (v16)
  {
    *(void *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v17)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  BackForwardList::~BackForwardList(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned char *BackForwardList::addItem(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *((unsigned int *)result + 15);
  if (v4)
  {
    v5 = result;
    if (result[65])
    {
      uint64_t v7 = *((unsigned int *)result + 14);
      if (v7 == -1)
      {
        unint64_t v8 = *((unsigned int *)result + 11);
      }
      else
      {
        unint64_t v9 = v7 + 1;
        unint64_t v8 = *((unsigned int *)result + 11);
        if (v8 > v9)
        {
          do
          {
            while (1)
            {
              int v10 = v8 - 1;
              uint64_t v11 = *((void *)v5 + 4);
              uint64_t v12 = 8 * (v8 - 1);
              v13 = *(WebCore::HistoryItem **)(v11 + v12);
              *(void *)(v11 + v12) = 0;
              uint64_t v14 = *((void *)v5 + 4);
              v15 = *(_DWORD **)(v14 + v12);
              *(void *)(v14 + v12) = 0;
              if (v15)
              {
                if (*v15 == 1)
                {
                  uint64_t v16 = (WTF *)MEMORY[0x1E4E44A30]();
                  WTF::fastFree(v16, v17);
                }
                else
                {
                  --*v15;
                }
              }
              *((_DWORD *)v5 + 11) = v10;
              v18 = (WebCore::BackForwardCache *)WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)v5 + 6, (uint64_t)v13);
              v19 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v18);
              CFTypeRef result = (unsigned char *)WebCore::BackForwardCache::remove(v19, v13);
              if (*(_DWORD *)v13 == 1) {
                break;
              }
              --*(_DWORD *)v13;
              unint64_t v8 = *((unsigned int *)v5 + 11);
              if (v8 <= v9) {
                goto LABEL_14;
              }
            }
            v20 = (WTF *)MEMORY[0x1E4E44A30](v13);
            CFTypeRef result = (unsigned char *)WTF::fastFree(v20, v21);
            unint64_t v8 = *((unsigned int *)v5 + 11);
          }
          while (v8 > v9);
LABEL_14:
          uint64_t v4 = *((unsigned int *)v5 + 15);
        }
      }
      v22 = (WebCore::HistoryItem ***)(v5 + 32);
      if (v8 == v4 && (v4 == 1 || *((_DWORD *)v5 + 14)))
      {
        if (!v4)
        {
          __break(0xC471u);
          return result;
        }
        v23 = **v22;
        **v22 = 0;
        v24 = *v22;
        v25 = **v22;
        **v22 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
          {
            v26 = (WTF *)MEMORY[0x1E4E44A30]();
            WTF::fastFree(v26, v27);
            uint64_t v4 = *((unsigned int *)v5 + 11);
          }
          else
          {
            --*(_DWORD *)v25;
          }
        }
        memmove(v24, v24 + 1, *((void *)v5 + 4) + 8 * v4 - (void)(v24 + 1));
        --*((_DWORD *)v5 + 11);
        v28 = (WebCore::BackForwardCache *)WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)v5 + 6, (uint64_t)v23);
        v29 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v28);
        WebCore::BackForwardCache::remove(v29, v23);
        --*((_DWORD *)v5 + 14);
        if (*(_DWORD *)v23 == 1)
        {
          v30 = (WTF *)MEMORY[0x1E4E44A30](v23);
          WTF::fastFree(v30, v31);
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      v32 = (_DWORD *)*a4;
      ++*(_DWORD *)*a4;
      v34 = (uint64_t *)(v5 + 48);
      uint64_t v33 = *((void *)v5 + 6);
      if (v33
        || (WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash((uint64_t *)v5 + 6, 8u), (uint64_t v33 = *v34) != 0))
      {
        int v35 = *(_DWORD *)(v33 - 8);
      }
      else
      {
        int v35 = 0;
      }
      unint64_t v36 = ((unint64_t)v32 + ~((void)v32 << 32)) ^ (((unint64_t)v32 + ~((void)v32 << 32)) >> 22);
      unint64_t v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
      unint64_t v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
      unsigned int v39 = v35 & ((v38 >> 31) ^ v38);
      v40 = (void *)(v33 + 8 * v39);
      v41 = (_DWORD *)*v40;
      if (*v40)
      {
        v42 = 0;
        int v43 = 1;
        while (v41 != v32)
        {
          if (v41 == (_DWORD *)-1) {
            v42 = v40;
          }
          unsigned int v39 = (v39 + v43) & v35;
          v40 = (void *)(v33 + 8 * v39);
          v41 = (_DWORD *)*v40;
          ++v43;
          if (!*v40)
          {
            if (v42)
            {
              void *v42 = 0;
              --*(_DWORD *)(*v34 - 16);
              v40 = v42;
            }
            goto LABEL_37;
          }
        }
        if (*v32 == 1)
        {
          v52 = (WTF *)MEMORY[0x1E4E44A30](v32);
          WTF::fastFree(v52, v53);
          uint64_t v48 = (*((_DWORD *)v5 + 14) + 1);
          uint64_t v49 = *((unsigned int *)v5 + 11);
          if (v49 == *((_DWORD *)v5 + 10)) {
            goto LABEL_52;
          }
        }
        else
        {
          --*v32;
          uint64_t v48 = (*((_DWORD *)v5 + 14) + 1);
          uint64_t v49 = *((unsigned int *)v5 + 11);
          if (v49 == *((_DWORD *)v5 + 10)) {
            goto LABEL_52;
          }
        }
        goto LABEL_53;
      }
LABEL_37:
      void *v40 = v32;
      if (*v34)
      {
        ++*(_DWORD *)(*v34 - 12);
        uint64_t v44 = *v34;
        if (*v34) {
          goto LABEL_39;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v44 = *v34;
        if (*v34)
        {
LABEL_39:
          uint64_t v45 = (*(_DWORD *)(v44 - 16) + *(_DWORD *)(v44 - 12));
          unint64_t v46 = *(unsigned int *)(v44 - 4);
          if (v46 <= 0x400) {
            goto LABEL_40;
          }
          goto LABEL_48;
        }
      }
      uint64_t v45 = *(unsigned int *)(v44 - 16);
      unint64_t v46 = *(unsigned int *)(v44 - 4);
      if (v46 <= 0x400)
      {
LABEL_40:
        if (3 * v46 > 4 * v45) {
          goto LABEL_51;
        }
        if (!v46)
        {
          unsigned int v47 = 8;
LABEL_50:
          WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash((uint64_t *)v5 + 6, v47);
LABEL_51:
          uint64_t v48 = (*((_DWORD *)v5 + 14) + 1);
          uint64_t v49 = *((unsigned int *)v5 + 11);
          if (v49 == *((_DWORD *)v5 + 10))
          {
LABEL_52:
            a4 = (void *)WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v5 + 32), v49 + 1, (unint64_t)a4);
            LODWORD(v49) = *((_DWORD *)v5 + 11);
          }
LABEL_53:
          v50 = (void *)(*((void *)v5 + 4) + 8 * v48);
          CFTypeRef result = memmove(v50 + 1, v50, 8 * v49 - 8 * v48);
          v51 = (_DWORD *)*a4;
          *a4 = 0;
          void *v50 = v51;
          ++*((_DWORD *)v5 + 11);
          ++*((_DWORD *)v5 + 14);
          return result;
        }
LABEL_49:
        unsigned int v47 = v46 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v46));
        goto LABEL_50;
      }
LABEL_48:
      if (v46 > 2 * v45) {
        goto LABEL_51;
      }
      goto LABEL_49;
    }
  }
  return result;
}

void sub_1E13472B8(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1E13472CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E13472E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(v2 + 8 * v8);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9)
    {
      uint64_t v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(v2 + 8 * v8);
      ++v10;
      if (v9 == a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (v8 == *(_DWORD *)(v2 - 4)) {
    return 0;
  }
  uint64_t v12 = 8 * v8;
  v13 = *(_DWORD **)(v2 + v12);
  *(void *)(v2 + v12) = -1;
  if (!v13)
  {
LABEL_12:
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v14 = *a1;
    if (*a1) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  if (*v13 != 1)
  {
    --*v13;
    goto LABEL_12;
  }
  uint64_t v16 = (WTF *)MEMORY[0x1E4E44A30]();
  WTF::fastFree(v16, v17);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v14 = *a1;
  if (*a1)
  {
LABEL_13:
    --*(_DWORD *)(v14 - 12);
    uint64_t v15 = *a1;
    if (!*a1) {
      return 1;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(v14 - 12) = -1;
  uint64_t v15 = *a1;
  if (!*a1) {
    return 1;
  }
LABEL_17:
  unsigned int v18 = 6 * *(_DWORD *)(v15 - 12);
  unsigned int v19 = *(_DWORD *)(v15 - 4);
  if (v18 >= v19 || v19 < 9) {
    return 1;
  }
  WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash(a1, v19 >> 1);
  return 1;
}

_DWORD **WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*v2 != 1)
  {
    --*v2;
    return a1;
  }
  unsigned int v4 = (WTF *)MEMORY[0x1E4E44A30]();
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t BackForwardList::goToItem(uint64_t this, HistoryItem *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 44);
  if (v2)
  {
    uint64_t v3 = 0;
    while (*(HistoryItem **)(*(void *)(this + 32) + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        return this;
      }
    }
    *(_DWORD *)(this + 56) = v3;
  }
  return this;
}

WTF *BackForwardList::backListWithLimit(WTF *result, void *a2, uint64_t a3)
{
  int v4 = (int)a2;
  unint64_t v5 = result;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v6 = *(unsigned int *)(a3 + 12);
    if (v6)
    {
      unint64_t v7 = *(WTF **)a3;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v11 = *(_DWORD **)v7;
        *(void *)unint64_t v7 = 0;
        if (v11)
        {
          if (*v11 == 1)
          {
            uint64_t v9 = (WTF *)MEMORY[0x1E4E44A30]();
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*v11;
          }
        }
        unint64_t v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      *(_DWORD *)(a3 + 12) = 0;
    }
    CFTypeRef result = *(WTF **)a3;
    if (*(void *)a3)
    {
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      CFTypeRef result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  unsigned int v12 = *((_DWORD *)v5 + 14);
  if (v12 != -1)
  {
    unint64_t v13 = (v12 - v4) & ~((int)(v12 - v4) >> 31);
    if (v13 < v12)
    {
      do
      {
        while (1)
        {
          if (v13 >= *((unsigned int *)v5 + 11))
          {
LABEL_31:
            __break(0xC471u);
            JUMPOUT(0x1E13476A8);
          }
          uint64_t v15 = *(_DWORD **)(*((void *)v5 + 4) + 8 * v13);
          unint64_t v16 = *(unsigned int *)(a3 + 12);
          if (v16 == *(_DWORD *)(a3 + 8)) {
            break;
          }
          uint64_t v14 = *(WTF **)a3;
          ++*v15;
          *((void *)v14 + v16) = v15;
          *(_DWORD *)(a3 + 12) = v16 + 1;
          if (++v13 >= v12) {
            return result;
          }
        }
        unint64_t v17 = v16 + (v16 >> 2);
        if (v17 >= 0x10) {
          unint64_t v18 = v17 + 1;
        }
        else {
          unint64_t v18 = 16;
        }
        if (v18 <= v16 + 1) {
          unint64_t v19 = v16 + 1;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19 >> 29) {
          goto LABEL_31;
        }
        v20 = *(WTF **)a3;
        v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
        *(_DWORD *)(a3 + 8) = v19;
        *(void *)a3 = v21;
        CFTypeRef result = (WTF *)memcpy(v21, v20, 8 * v16);
        if (v20)
        {
          if (*(WTF **)a3 == v20)
          {
            *(void *)a3 = 0;
            *(_DWORD *)(a3 + 8) = 0;
          }
          CFTypeRef result = (WTF *)WTF::fastFree(v20, v22);
        }
        uint64_t v23 = *(unsigned int *)(a3 + 12);
        v24 = *(WTF **)a3;
        ++*v15;
        *((void *)v24 + v23) = v15;
        unsigned int v12 = *((_DWORD *)v5 + 14);
        *(_DWORD *)(a3 + 12) = v23 + 1;
        ++v13;
      }
      while (v13 < v12);
    }
  }
  return result;
}

WTF *BackForwardList::forwardListWithLimit(WTF *result, void *a2, uint64_t a3)
{
  int v4 = (int)a2;
  unint64_t v5 = result;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v6 = *(unsigned int *)(a3 + 12);
    if (v6)
    {
      unint64_t v7 = *(WTF **)a3;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v11 = *(_DWORD **)v7;
        *(void *)unint64_t v7 = 0;
        if (v11)
        {
          if (*v11 == 1)
          {
            uint64_t v9 = (WTF *)MEMORY[0x1E4E44A30]();
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*v11;
          }
        }
        unint64_t v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      *(_DWORD *)(a3 + 12) = 0;
    }
    CFTypeRef result = *(WTF **)a3;
    if (*(void *)a3)
    {
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      CFTypeRef result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  int v12 = *((_DWORD *)v5 + 11);
  if (v12)
  {
    unsigned int v13 = v12 - 1;
    unsigned int v14 = *((_DWORD *)v5 + 14);
    if (v14 < v13)
    {
      int v15 = v13 >= v14 + v4 ? v14 + v4 : v13;
      signed int v16 = v14 + 1;
      if ((int)(v14 + 1) <= v15)
      {
        while (1)
        {
          signed int v18 = v16;
          if (*((unsigned int *)v5 + 11) <= (unint64_t)v16) {
            break;
          }
          unint64_t v19 = *(_DWORD **)(*((void *)v5 + 4) + 8 * v16);
          unint64_t v20 = *(unsigned int *)(a3 + 12);
          if (v20 == *(_DWORD *)(a3 + 8))
          {
            unint64_t v21 = v20 + (v20 >> 2);
            if (v21 >= 0x10) {
              unint64_t v22 = v21 + 1;
            }
            else {
              unint64_t v22 = 16;
            }
            if (v22 <= v20 + 1) {
              unint64_t v23 = v20 + 1;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23 >> 29) {
              break;
            }
            v24 = *(WTF **)a3;
            v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
            *(_DWORD *)(a3 + 8) = v23;
            *(void *)a3 = v25;
            CFTypeRef result = (WTF *)memcpy(v25, v24, 8 * v20);
            if (v24)
            {
              if (*(WTF **)a3 == v24)
              {
                *(void *)a3 = 0;
                *(_DWORD *)(a3 + 8) = 0;
              }
              CFTypeRef result = (WTF *)WTF::fastFree(v24, v26);
            }
            unint64_t v20 = *(unsigned int *)(a3 + 12);
            unint64_t v17 = (void *)(*(void *)a3 + 8 * v20);
          }
          else
          {
            unint64_t v17 = (void *)(*(void *)a3 + 8 * v20);
          }
          ++*v19;
          void *v17 = v19;
          *(_DWORD *)(a3 + 12) = v20 + 1;
          signed int v16 = v18 + 1;
          if (v18 + 1 > v15) {
            return result;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1E1347860);
      }
    }
  }
  return result;
}

uint64_t BackForwardList::setCapacity(uint64_t this, int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(unsigned int *)(this + 44);
  int v5 = v4;
  if ((int)v4 <= a2)
  {
    LODWORD(v6) = *(_DWORD *)(this + 44);
    if (!a2)
    {
LABEL_15:
      int v19 = -1;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(this + 44);
    do
    {
      while (1)
      {
        if (!v5)
        {
          __break(0xC471u);
          return this;
        }
        uint64_t v7 = v6 - 1;
        uint64_t v8 = *(void *)(v3 + 32);
        uint64_t v9 = 8 * v7;
        int v10 = *(WebCore::HistoryItem **)(v8 + 8 * v7);
        *(void *)(v8 + v9) = 0;
        uint64_t v11 = *(void *)(v3 + 32);
        int v12 = *(_DWORD **)(v11 + 8 * v7);
        *(void *)(v11 + v9) = 0;
        if (v12)
        {
          if (*v12 == 1)
          {
            unsigned int v13 = (WTF *)MEMORY[0x1E4E44A30]();
            WTF::fastFree(v13, v14);
          }
          else
          {
            --*v12;
          }
        }
        *(_DWORD *)(v3 + 44) = v7;
        int v15 = (WebCore::BackForwardCache *)WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)(v3 + 48), (uint64_t)v10);
        signed int v16 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v15);
        this = WebCore::BackForwardCache::remove(v16, v10);
        if (*(_DWORD *)v10 == 1) {
          break;
        }
        --*(_DWORD *)v10;
        uint64_t v6 = *(unsigned int *)(v3 + 44);
        int v5 = v6;
        uint64_t v4 = v6;
        if ((int)v6 <= a2) {
          goto LABEL_11;
        }
      }
      unint64_t v17 = (WTF *)MEMORY[0x1E4E44A30](v10);
      this = WTF::fastFree(v17, v18);
      uint64_t v6 = *(unsigned int *)(v3 + 44);
      int v5 = v6;
      uint64_t v4 = v6;
    }
    while ((int)v6 > a2);
LABEL_11:
    if (!a2) {
      goto LABEL_15;
    }
  }
  if (v4 - 1 < (unint64_t)*(unsigned int *)(v3 + 56))
  {
    int v19 = v6 - 1;
LABEL_16:
    *(_DWORD *)(v3 + 56) = v19;
  }
  *(_DWORD *)(v3 + 60) = a2;
  return this;
}

void sub_1E13479A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

uint64_t BackForwardList::backListCount(BackForwardList *this)
{
  unsigned int v1 = *((_DWORD *)this + 14);
  if (v1 == -1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t BackForwardList::forwardListCount(BackForwardList *this)
{
  int v1 = *((_DWORD *)this + 14);
  if (v1 == -1) {
    return 0;
  }
  else {
    return (*((_DWORD *)this + 11) + ~v1);
  }
}

_DWORD *BackForwardList::itemAtIndex@<X0>(_DWORD *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (-this[14] <= a2)
  {
    int v5 = this;
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 48))(this);
    if ((int)this >= a2)
    {
      unsigned int v6 = v5[14] + a2;
      if (v5[11] <= v6)
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v7 = *(_DWORD **)(*((void *)v5 + 4) + 8 * v6);
        ++*v7;
        *a3 = v7;
      }
    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t BackForwardList::close(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)(this + 40))
  {
    uint64_t v3 = *(unsigned int *)(this + 44);
    if (v3)
    {
      uint64_t v4 = *(_DWORD ***)(this + 32);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v8 = *v4;
        *uint64_t v4 = 0;
        if (v8)
        {
          if (*v8 == 1)
          {
            unsigned int v6 = (WTF *)MEMORY[0x1E4E44A30]();
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*v8;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v2 + 44) = 0;
    }
    this = *(void *)(v2 + 32);
    if (this)
    {
      *(void *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 40) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  uint64_t v9 = *(_DWORD ***)(v2 + 48);
  if (v9)
  {
    *(void *)(v2 + 48) = 0;
    uint64_t v10 = *((unsigned int *)v9 - 1);
    if (v10)
    {
      uint64_t v11 = v9;
      do
      {
        unsigned int v14 = *v11;
        if (*v11 != (_DWORD *)-1)
        {
          *uint64_t v11 = 0;
          if (v14)
          {
            if (*v14 == 1)
            {
              int v12 = (WTF *)MEMORY[0x1E4E44A30]();
              WTF::fastFree(v12, v13);
            }
            else
            {
              --*v14;
            }
          }
        }
        ++v11;
        --v10;
      }
      while (v10);
    }
    this = WTF::fastFree((WTF *)(v9 - 2), a2);
  }
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 64) = 1;
  return this;
}

BOOL BackForwardList::containsItem(BackForwardList *this, const HistoryItem *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = *(const HistoryItem **)(v2 + 8 * v7);
  if (v8 == a2) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v9) & v3;
    uint64_t v8 = *(const HistoryItem **)(v2 + 8 * v7);
    ++v9;
  }
  while (v8 != a2);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::HistoryItem>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    int v1 = (WTF *)MEMORY[0x1E4E44A30]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (void *)(v4 + 8 * i);
      uint64_t v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          unint64_t v21 = (void *)(v12 + 8 * v19);
          void *v21 = 0;
          unint64_t v22 = (_DWORD *)*v10;
          *uint64_t v10 = 0;
          void *v21 = v22;
          unint64_t v23 = (_DWORD *)*v10;
          *uint64_t v10 = 0;
          if (v23)
          {
            if (*v23 == 1)
            {
              v24 = (WTF *)MEMORY[0x1E4E44A30]();
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*v23;
            }
          }
        }
        else
        {
          *uint64_t v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 8 * v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 29) {
        goto LABEL_30;
      }
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      unsigned int v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      memcpy(v19, v5, 8 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 29))
    {
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      memcpy(v11, v5, 8 * v6);
      int v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        int v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1E1347F98);
  }
  int v13 = *(void **)a1;
  return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
}

void *BinaryPropertyListPlan::writeBooleanTrue(void *this)
{
  ++this[7];
  if (this[1] == -1)
  {
    uint64_t v1 = this[6];
    this[6] = v1 + 1;
    this[1] = v1;
    ++this[8];
  }
  return this;
}

uint64_t *BinaryPropertyListPlan::writeInteger(uint64_t *this, int a2)
{
  uint64_t v2 = this;
  ++this[7];
  if (!a2)
  {
    if (this[2] != -1) {
      return this;
    }
    uint64_t v20 = this[6];
    this[2] = v20;
    this[6] = v20 + 1;
    uint64_t v19 = 2;
LABEL_33:
    v2[8] += v19;
    return this;
  }
  int v5 = this + 3;
  uint64_t v4 = this[3];
  if (v4
    || (this = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,unsigned long>>,WTF::DefaultHash<int>,WTF::HashMap<int,unsigned long,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(this + 3, 8u), (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unsigned int v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  unsigned int v9 = v6 & (v8 ^ HIWORD(v8));
  unint64_t v10 = (void *)(v4 + 16 * v9);
  int v11 = *(_DWORD *)v10;
  if (!*(_DWORD *)v10)
  {
LABEL_13:
    *(_DWORD *)unint64_t v10 = a2;
    v10[1] = v2[6];
    uint64_t v14 = v2[3];
    if (v14)
    {
      ++*(_DWORD *)(v14 - 12);
      uint64_t v15 = *v5;
      if (*v5) {
        goto LABEL_15;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v15 = *v5;
      if (*v5)
      {
LABEL_15:
        uint64_t v16 = (*(_DWORD *)(v15 - 16) + *(_DWORD *)(v15 - 12));
        unint64_t v17 = *(unsigned int *)(v15 - 4);
        if (v17 <= 0x400) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }
    }
    uint64_t v16 = *(unsigned int *)(v15 - 16);
    unint64_t v17 = *(unsigned int *)(v15 - 4);
    if (v17 <= 0x400)
    {
LABEL_16:
      if (3 * v17 > 4 * v16) {
        goto LABEL_26;
      }
      if (!v17)
      {
        unsigned int v18 = 8;
LABEL_25:
        this = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,unsigned long>>,WTF::DefaultHash<int>,WTF::HashMap<int,unsigned long,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v2 + 3, v18);
LABEL_26:
        ++v2[6];
        if (a2 >= 0x100)
        {
          if (a2 >= 0x10000)
          {
            uint64_t v19 = 9;
            if (a2 >= 0) {
              uint64_t v19 = 5;
            }
          }
          else
          {
            uint64_t v19 = 3;
          }
        }
        else
        {
          uint64_t v19 = 2;
        }
        goto LABEL_33;
      }
LABEL_24:
      unsigned int v18 = v17 << (6 * *(_DWORD *)(v15 - 12) >= (2 * v17));
      goto LABEL_25;
    }
LABEL_23:
    if (v17 > 2 * v16) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v11 != a2)
  {
    if (v11 == -1) {
      uint64_t v12 = v10;
    }
    unsigned int v9 = (v9 + v13) & v6;
    unint64_t v10 = (void *)(v4 + 16 * v9);
    int v11 = *(_DWORD *)v10;
    ++v13;
    if (!*(_DWORD *)v10)
    {
      if (v12)
      {
        void *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        unint64_t v10 = v12;
      }
      goto LABEL_13;
    }
  }
  return this;
}

uint64_t BinaryPropertyListPlan::writeString(BinaryPropertyListPlan *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  int v5 = (uint64_t *)((char *)this + 32);
  uint64_t v6 = *((void *)this + 4);
  ++*((void *)this + 7);
  if (!v6)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 4, 8u);
    uint64_t v6 = *v5;
    if (!*v5)
    {
      int v7 = 0;
      unsigned int v8 = *a2;
      unsigned int v9 = *((_DWORD *)*a2 + 4);
      if (v9 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  int v7 = *(_DWORD *)(v6 - 8);
  unsigned int v8 = *a2;
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v10 = v9 >> 8;
LABEL_7:
  int v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v7;
    uint64_t v14 = (WTF **)(v6 + 16 * (v10 & v7));
    uint64_t v15 = *v14;
    if (*v14 == (WTF *)-1)
    {
      int v11 = (WTF **)(v6 + 16 * v13);
      goto LABEL_9;
    }
    if (!v15) {
      break;
    }
    uint64_t result = WTF::equal(v15, *a2, a3);
    if (result) {
      return result;
    }
LABEL_9:
    unsigned int v10 = i + v13;
  }
  if (v11)
  {
    *int v11 = 0;
    v11[1] = 0;
    --*(_DWORD *)(*v5 - 16);
    uint64_t v14 = v11;
  }
  unint64_t v17 = *a2;
  if (*a2) {
    *(_DWORD *)v17 += 2;
  }
  _DWORD *v14 = v17;
  v14[1] = (WTF *)*((void *)this + 6);
  uint64_t v18 = *((void *)this + 4);
  if (v18)
  {
    ++*(_DWORD *)(v18 - 12);
    uint64_t v19 = *v5;
    if (*v5) {
      goto LABEL_20;
    }
LABEL_25:
    uint64_t v20 = *(unsigned int *)(v19 - 16);
    unint64_t v21 = *(unsigned int *)(v19 - 4);
    if (v21 > 0x400) {
      goto LABEL_26;
    }
LABEL_21:
    if (3 * v21 <= 4 * v20)
    {
      if (!v21)
      {
        unsigned int v22 = 8;
        goto LABEL_28;
      }
LABEL_27:
      unsigned int v22 = v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
LABEL_28:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v22);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v19 = *v5;
    if (!*v5) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
    unint64_t v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400) {
      goto LABEL_21;
    }
LABEL_26:
    if (v21 <= 2 * v20) {
      goto LABEL_27;
    }
  }
  ++*((void *)this + 6);
  unint64_t v23 = *a2;
  if (*a2)
  {
    unsigned int v24 = *((_DWORD *)v23 + 1);
    if (v24 >= 0xF)
    {
      if (v24 >= 0x100)
      {
        uint64_t v25 = 6;
        if (v24 < 0x10000) {
          uint64_t v25 = 4;
        }
      }
      else
      {
        uint64_t v25 = 3;
      }
    }
    else
    {
      uint64_t v25 = 1;
    }
  }
  else
  {
    unsigned int v24 = 0;
    uint64_t v25 = 1;
  }
  uint64_t v26 = v24;
  uint64_t v27 = v25 + v24 + *((void *)this + 8);
  *((void *)this + 8) = v27;
  uint64_t result = WTF::String::containsOnlyASCII(v23);
  if ((result & 1) == 0) {
    *((void *)this + 8) = v27 + v26;
  }
  return result;
}

uint64_t BinaryPropertyListPlan::writeIntegerArray(BinaryPropertyListPlan *this, const int *a2, unint64_t a3)
{
  int v7 = (uint64_t *)((char *)this + 40);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v8 = *((void *)this + 7) + 1;
  *((void *)this + 7) = v8;
  if (v6
    || (WTF::HashTable<IntegerArray,WTF::KeyValuePair<IntegerArray,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IntegerArray,unsigned long>>,IntegerArrayHash,WTF::HashMap<IntegerArray,unsigned long,IntegerArrayHash,IntegerArrayHashTraits,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,IntegerArrayHashTraits>::rehash((uint64_t *)this + 5, 8u, 0), (uint64_t v6 = *v7) != 0))
  {
    int v9 = *(_DWORD *)(v6 - 8);
    unsigned int v10 = -1640531527;
    if (!a3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = -1640531527;
    if (!a3) {
      goto LABEL_6;
    }
  }
  uint64_t v11 = 4 * a3;
  uint64_t v12 = a2;
  do
  {
    unsigned int v13 = *v12++;
    unsigned int v10 = ((v13 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v13) << 16) ^ (v10 + (unsigned __int16)v13))
        + (((v13 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v13) << 16) ^ (v10 + (unsigned __int16)v13)) >> 11);
    v11 -= 4;
  }
  while (v11);
LABEL_6:
  unsigned int v14 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  unsigned int v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  int v16 = v15 ^ (v15 << 10);
  if (!v16) {
    int v16 = 0x800000;
  }
  unsigned int v17 = v16 & v9;
  uint64_t v18 = v6 + 24 * v17;
  uint64_t v19 = *(unsigned int **)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  uint64_t result = v20 == 0;
  if (*(void *)v18) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = v20 == 0;
  }
  if (v22) {
    goto LABEL_40;
  }
  if (a3 == -1)
  {
    if (v20 == -1) {
      return result;
    }
    for (int i = 1; ; ++i)
    {
      unsigned int v17 = (v17 + i) & v9;
      uint64_t v18 = v6 + 24 * v17;
      uint64_t v31 = *(void *)(v18 + 8);
      if (!*(void *)v18 && v31 == 0) {
        break;
      }
      if (v31 == -1) {
        return result;
      }
    }
LABEL_40:
    *(void *)uint64_t v18 = a2;
    *(void *)(v18 + 8) = a3;
    *(void *)(v18 + 16) = 0;
    if (*v7)
    {
      ++*(_DWORD *)(*v7 - 12);
      uint64_t v33 = *v7;
      if (*v7) {
        goto LABEL_42;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v33 = *v7;
      if (*v7)
      {
LABEL_42:
        uint64_t v34 = (*(_DWORD *)(v33 - 16) + *(_DWORD *)(v33 - 12));
        unint64_t v35 = *(unsigned int *)(v33 - 4);
        if (v35 <= 0x400) {
          goto LABEL_43;
        }
        goto LABEL_48;
      }
    }
    uint64_t v34 = *(unsigned int *)(v33 - 16);
    unint64_t v35 = *(unsigned int *)(v33 - 4);
    if (v35 <= 0x400)
    {
LABEL_43:
      if (3 * v35 <= 4 * v34)
      {
        if (!v35)
        {
          unsigned int v36 = 8;
LABEL_50:
          uint64_t result = (uint64_t)WTF::HashTable<IntegerArray,WTF::KeyValuePair<IntegerArray,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IntegerArray,unsigned long>>,IntegerArrayHash,WTF::HashMap<IntegerArray,unsigned long,IntegerArrayHash,IntegerArrayHashTraits,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,IntegerArrayHashTraits>::rehash(v7, v36, (unsigned int **)v18);
          uint64_t v18 = result;
          goto LABEL_51;
        }
LABEL_49:
        unsigned int v36 = v35 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v35));
        goto LABEL_50;
      }
LABEL_51:
      if (a3)
      {
        uint64_t v37 = 0;
        do
          uint64_t result = (*(uint64_t (**)(BinaryPropertyListPlan *, void))(*(void *)this + 8))(this, a2[v37++]);
        while (a3 != v37);
        uint64_t v38 = *((void *)this + 6);
        *((void *)this + 6) = v38 + 1;
        *(void *)(v18 + 16) = v38;
        uint64_t v39 = 1;
        uint64_t v40 = 3;
        uint64_t v41 = 4;
        uint64_t v42 = 10;
        if (!HIDWORD(a3)) {
          uint64_t v42 = 6;
        }
        if (a3 >= 0x10000) {
          uint64_t v41 = v42;
        }
        if (a3 >= 0x100) {
          uint64_t v40 = v41;
        }
        if (a3 >= 0xF) {
          uint64_t v39 = v40;
        }
      }
      else
      {
        uint64_t v43 = *((void *)this + 6);
        *((void *)this + 6) = v43 + 1;
        *(void *)(v18 + 16) = v43;
        uint64_t v39 = 1;
      }
      unint64_t v44 = *((void *)this + 9) + a3;
      *((void *)this + 8) += v39;
      *((void *)this + 9) = v44;
      *((void *)this + 7) = v8;
      return result;
    }
LABEL_48:
    if (v35 <= 2 * v34) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  int v23 = 0;
  unsigned int v24 = 0;
  while (1)
  {
    uint64_t v26 = v24;
    unsigned int v24 = (void *)v18;
    if (v20 == -1) {
      goto LABEL_15;
    }
    if (v20 == a3)
    {
      if (result) {
        return result;
      }
      if (*v19 == *a2) {
        break;
      }
    }
    unsigned int v24 = v26;
LABEL_15:
    unsigned int v17 = (++v23 + v17) & v9;
    uint64_t v18 = v6 + 24 * v17;
    uint64_t v19 = *(unsigned int **)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t result = v20 == 0;
    if (*(void *)v18) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = v20 == 0;
    }
    if (v25)
    {
      if (v24)
      {
        void *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        --*(_DWORD *)(*v7 - 16);
        uint64_t v18 = (uint64_t)v24;
      }
      goto LABEL_40;
    }
  }
  unint64_t v27 = 0;
  v28 = v19 + 1;
  while (a3 - 1 != v27)
  {
    uint64_t result = v28[v27];
    int v29 = a2[++v27];
    if (result != v29)
    {
      unsigned int v24 = v26;
      if (v27 < a3) {
        goto LABEL_15;
      }
      return result;
    }
  }
  return result;
}

BOOL BinaryPropertyListPlan::writeUniqueString(int64x2_t *this, WTF::String **a2)
{
  uint64_t v3 = 1;
  this[3] = vaddq_s64(this[3], vdupq_n_s64(1uLL));
  uint64_t v4 = *a2;
  if (*a2)
  {
    unsigned int v5 = *((_DWORD *)v4 + 1);
    if (v5 >= 0xF)
    {
      if (v5 >= 0x100)
      {
        uint64_t v3 = 6;
        if (v5 < 0x10000) {
          uint64_t v3 = 4;
        }
      }
      else
      {
        uint64_t v3 = 3;
      }
    }
    else
    {
      uint64_t v3 = 1;
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v3 + v5 + this[4].i64[0];
  this[4].i64[0] = v7;
  BOOL result = WTF::String::containsOnlyASCII(v4);
  if (!result) {
    this[4].i64[0] = v7 + v6;
  }
  return result;
}

size_t BinaryPropertyListPlan::writeUniqueString(int64x2_t *this, const char *__s)
{
  this[3] = vaddq_s64(this[3], vdupq_n_s64(1uLL));
  size_t result = strlen(__s);
  uint64_t v4 = 3;
  uint64_t v5 = 6;
  if (result < 0x10000uLL) {
    uint64_t v5 = 4;
  }
  if (result >= 0x100uLL) {
    uint64_t v4 = v5;
  }
  if (result < 0xFuLL) {
    uint64_t v4 = 1;
  }
  this[4].i64[0] += v4 + result;
  return result;
}

uint64_t BinaryPropertyListPlan::writeArrayStart(BinaryPropertyListPlan *this)
{
  uint64_t v1 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  return v1;
}

void *BinaryPropertyListPlan::writeArrayEnd(void *this, uint64_t a2)
{
  unint64_t v2 = this[7];
  uint64_t v3 = this[6] + 1;
  uint64_t v4 = 1;
  uint64_t v5 = 3;
  uint64_t v6 = 10;
  if (!HIDWORD(v2)) {
    uint64_t v6 = 6;
  }
  if (v2 < 0x10000) {
    uint64_t v6 = 4;
  }
  if (v2 >= 0x100) {
    uint64_t v5 = v6;
  }
  uint64_t v7 = this[9];
  if (v2 >= 0xF) {
    uint64_t v4 = v5;
  }
  this[8] += v4;
  this[9] = v7 + v2;
  this[6] = v3;
  this[7] = a2 + 1;
  return this;
}

uint64_t BinaryPropertyListPlan::writeDictionaryStart(BinaryPropertyListPlan *this)
{
  uint64_t v1 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  return v1;
}

void *BinaryPropertyListPlan::writeDictionaryEnd(void *this, uint64_t a2)
{
  unint64_t v2 = this[7];
  uint64_t v3 = this[6] + 1;
  uint64_t v4 = 1;
  uint64_t v5 = 3;
  uint64_t v6 = 10;
  if (!(v2 >> 33)) {
    uint64_t v6 = 6;
  }
  if (v2 < 0x20000) {
    uint64_t v6 = 4;
  }
  if (v2 >= 0x200) {
    uint64_t v5 = v6;
  }
  uint64_t v7 = this[9];
  if (v2 >= 0x1E) {
    uint64_t v4 = v5;
  }
  this[8] += v4;
  this[9] = v7 + v2;
  this[6] = v3;
  this[7] = a2 + 1;
  return this;
}

BOOL WTF::String::containsOnlyASCII(WTF::String *this)
{
  if (!this) {
    return 1;
  }
  unint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((unsigned int *)this + 1);
  BOOL v4 = (v1 & 7) == 0 || v2 == 0;
  if ((*((unsigned char *)this + 16) & 4) == 0)
  {
    unint64_t v5 = v1 + 2 * v2;
    if (v4)
    {
      int8x8_t v6 = 0;
      unint64_t v7 = *((void *)this + 1);
    }
    else
    {
      int8x8_t v6 = 0;
      uint64_t v14 = 2 * v2 - 2;
      char v15 = v1 + 2;
      unint64_t v7 = *((void *)this + 1);
      do
      {
        unsigned int v16 = *(unsigned __int16 *)v7;
        v7 += 2;
        *(void *)&v6 |= v16;
        if ((v15 & 7) == 0) {
          break;
        }
        uint64_t v17 = v14;
        v14 -= 2;
        v15 += 2;
      }
      while (v17);
    }
    unint64_t v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    if (v7 >= (v5 & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v21 = (uint16x4_t *)v7;
      goto LABEL_50;
    }
    unint64_t v19 = v7 + 8;
    if (v18 > v7 + 8) {
      unint64_t v19 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v20 = v19 + ~v7;
    if (v20 >= 0x18)
    {
      uint64_t v26 = (v20 >> 3) + 1;
      unint64_t v21 = (uint16x4_t *)(v7 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
      int8x16_t v27 = 0uLL;
      int8x16_t v28 = (int8x16_t)(unint64_t)v6;
      int v29 = (int8x16_t *)(v7 + 16);
      uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v28 = vorrq_s8(v29[-1], v28);
        int8x16_t v27 = vorrq_s8(*v29, v27);
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      int8x16_t v31 = vorrq_s8(v27, v28);
      int8x8_t v6 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_50:
        if (v21 != (uint16x4_t *)v5)
        {
          unint64_t v33 = v1 + 2 * v2 - (void)v21 - 2;
          if (v33 >= 0x1E)
          {
            uint64_t v35 = (v33 >> 1) + 1;
            int8x16_t v36 = 0uLL;
            int8x16_t v37 = (int8x16_t)(unint64_t)v6;
            uint64_t v34 = (unsigned __int16 *)v21 + (v35 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v38 = v21 + 2;
            unint64_t v39 = v35 & 0xFFFFFFFFFFFFFFF0;
            int8x16_t v40 = 0uLL;
            int8x16_t v41 = 0uLL;
            int8x16_t v42 = 0uLL;
            int8x16_t v43 = 0uLL;
            int8x16_t v44 = 0uLL;
            int8x16_t v45 = 0uLL;
            do
            {
              uint16x8_t v46 = *(uint16x8_t *)v38[-2].i8;
              uint32x4_t v47 = vmovl_u16(*(uint16x4_t *)v46.i8);
              v48.i64[0] = v47.u32[0];
              v48.i64[1] = v47.u32[1];
              int8x16_t v49 = v48;
              v48.i64[0] = v47.u32[2];
              v48.i64[1] = v47.u32[3];
              int8x16_t v50 = v48;
              uint32x4_t v51 = vmovl_high_u16(v46);
              v48.i64[0] = v51.u32[0];
              v48.i64[1] = v51.u32[1];
              int8x16_t v52 = v48;
              v48.i64[0] = v51.u32[2];
              v48.i64[1] = v51.u32[3];
              int8x16_t v53 = v48;
              uint32x4_t v54 = vmovl_u16(*v38);
              v48.i64[0] = v54.u32[0];
              v48.i64[1] = v54.u32[1];
              int8x16_t v55 = v48;
              v48.i64[0] = v54.u32[2];
              v48.i64[1] = v54.u32[3];
              int8x16_t v56 = v48;
              uint32x4_t v57 = vmovl_high_u16(*(uint16x8_t *)v38->i8);
              v48.i64[0] = v57.u32[0];
              v48.i64[1] = v57.u32[1];
              int8x16_t v58 = v48;
              v48.i64[0] = v57.u32[2];
              v48.i64[1] = v57.u32[3];
              int8x16_t v41 = vorrq_s8(v41, v53);
              int8x16_t v40 = vorrq_s8(v40, v52);
              int8x16_t v36 = vorrq_s8(v36, v50);
              int8x16_t v37 = vorrq_s8(v37, v49);
              int8x16_t v45 = vorrq_s8(v45, v48);
              int8x16_t v44 = vorrq_s8(v44, v58);
              int8x16_t v43 = vorrq_s8(v43, v56);
              int8x16_t v42 = vorrq_s8(v42, v55);
              v38 += 4;
              v39 -= 16;
            }
            while (v39);
            int8x16_t v59 = vorrq_s8(vorrq_s8(vorrq_s8(v42, v37), vorrq_s8(v44, v40)), vorrq_s8(vorrq_s8(v43, v36), vorrq_s8(v45, v41)));
            int8x8_t v6 = vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
            if (v35 == (v35 & 0xFFFFFFFFFFFFFFF0)) {
              return (*(void *)&v6 & 0xFF80FF80FF80FF80) == 0;
            }
          }
          else
          {
            uint64_t v34 = (unsigned __int16 *)v21;
          }
          do
          {
            unsigned int v60 = *v34++;
            *(void *)&v6 |= v60;
          }
          while (v34 != (unsigned __int16 *)v5);
        }
        return (*(void *)&v6 & 0xFF80FF80FF80FF80) == 0;
      }
    }
    else
    {
      unint64_t v21 = (uint16x4_t *)v7;
    }
    do
    {
      uint64_t v32 = (uint64_t)*v21++;
      *(void *)&v6 |= v32;
    }
    while ((unint64_t)v21 < v18);
    goto LABEL_50;
  }
  int v9 = (uint8x16_t *)(v1 + v2);
  if (v4)
  {
    int8x8_t v10 = 0;
    unint64_t v11 = *((void *)this + 1);
    unint64_t v12 = (unint64_t)v9 & 0xFFFFFFFFFFFFFFF8;
    if (v1 >= ((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_14:
      unsigned int v13 = (uint8x16_t *)v11;
      goto LABEL_62;
    }
  }
  else
  {
    unint64_t v11 = v1 + 1;
    unsigned __int8 v22 = *(unsigned char *)v1;
    if (((v1 + 1) & 7) != 0 && v2 != 1)
    {
      v22 |= *(unsigned char *)(v1 + 1);
      unint64_t v11 = v1 + 2;
      if (((v1 + 2) & 7) != 0 && v2 != 2)
      {
        v22 |= *(unsigned char *)(v1 + 2);
        unint64_t v11 = v1 + 3;
        if (((v1 + 3) & 7) != 0 && v2 != 3)
        {
          v22 |= *(unsigned char *)(v1 + 3);
          unint64_t v11 = v1 + 4;
          if (((v1 + 4) & 7) != 0 && v2 != 4)
          {
            v22 |= *(unsigned char *)(v1 + 4);
            unint64_t v11 = v1 + 5;
            if (((v1 + 5) & 7) != 0 && v2 != 5)
            {
              v22 |= *(unsigned char *)(v1 + 5);
              unint64_t v11 = v1 + 6;
              if (((v1 + 6) & 7) != 0 && v2 != 6)
              {
                v22 |= *(unsigned char *)(v1 + 6);
                unint64_t v11 = v1 + 7;
                if (((v1 + 7) & 7) != 0 && v2 != 7)
                {
                  v22 |= *(unsigned char *)(v1 + 7);
                  unint64_t v11 = v1 + 8;
                }
              }
            }
          }
        }
      }
    }
    int8x8_t v10 = (int8x8_t)v22;
    unint64_t v12 = (unint64_t)v9 & 0xFFFFFFFFFFFFFFF8;
    if (v11 >= ((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_14;
    }
  }
  unint64_t v24 = v11 + 8;
  if (v12 > v11 + 8) {
    unint64_t v24 = v12;
  }
  unint64_t v25 = v24 + ~v11;
  if (v25 < 0x18)
  {
    unsigned int v13 = (uint8x16_t *)v11;
    do
    {
LABEL_61:
      uint64_t v67 = v13->i64[0];
      unsigned int v13 = (uint8x16_t *)((char *)v13 + 8);
      *(void *)&v10 |= v67;
    }
    while ((unint64_t)v13 < v12);
    goto LABEL_62;
  }
  uint64_t v61 = (v25 >> 3) + 1;
  unsigned int v13 = (uint8x16_t *)(v11 + 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL));
  int8x16_t v62 = 0uLL;
  int8x16_t v63 = (int8x16_t)(unint64_t)v10;
  v64 = (int8x16_t *)(v11 + 16);
  uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    int8x16_t v63 = vorrq_s8(v64[-1], v63);
    int8x16_t v62 = vorrq_s8(*v64, v62);
    v64 += 2;
    v65 -= 4;
  }
  while (v65);
  int8x16_t v66 = vorrq_s8(v62, v63);
  int8x8_t v10 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_61;
  }
LABEL_62:
  if (v13 != v9)
  {
    unint64_t v68 = v1 + v2 - (void)v13;
    if (v68 < 8)
    {
      v69 = (unsigned __int8 *)v13;
      goto LABEL_76;
    }
    if (v68 >= 0x10)
    {
      unint64_t v70 = v68 & 0xFFFFFFFFFFFFFFF0;
      int8x16_t v86 = 0uLL;
      int8x16_t v87 = (int8x16_t)(unint64_t)v10;
      unint64_t v88 = v68 & 0xFFFFFFFFFFFFFFF0;
      v89 = v13;
      int8x16_t v90 = 0uLL;
      int8x16_t v91 = 0uLL;
      int8x16_t v92 = 0uLL;
      int8x16_t v93 = 0uLL;
      int8x16_t v94 = 0uLL;
      int8x16_t v95 = 0uLL;
      do
      {
        uint8x16_t v96 = *v89++;
        uint16x8_t v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
        uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v97.i8);
        v99.i64[0] = v98.u32[0];
        v99.i64[1] = v98.u32[1];
        int8x16_t v100 = v99;
        uint16x8_t v101 = vmovl_high_u8(v96);
        uint32x4_t v102 = vmovl_high_u16(v101);
        v99.i64[0] = v102.u32[2];
        v99.i64[1] = v102.u32[3];
        int8x16_t v103 = v99;
        v99.i64[0] = v98.u32[2];
        v99.i64[1] = v98.u32[3];
        int8x16_t v104 = v99;
        uint32x4_t v105 = vmovl_high_u16(v97);
        v99.i64[0] = v105.u32[0];
        v99.i64[1] = v105.u32[1];
        int8x16_t v106 = v99;
        uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v101.i8);
        v99.i64[0] = v107.u32[0];
        v99.i64[1] = v107.u32[1];
        int8x16_t v108 = v99;
        v99.i64[0] = v102.u32[0];
        v99.i64[1] = v102.u32[1];
        int8x16_t v109 = v99;
        v99.i64[0] = v105.u32[2];
        v99.i64[1] = v105.u32[3];
        int8x16_t v110 = v99;
        v99.i64[0] = v107.u32[2];
        v99.i64[1] = v107.u32[3];
        int8x16_t v93 = vorrq_s8(v93, v99);
        int8x16_t v91 = vorrq_s8(v91, v110);
        int8x16_t v94 = vorrq_s8(v94, v109);
        int8x16_t v92 = vorrq_s8(v92, v108);
        int8x16_t v90 = vorrq_s8(v90, v106);
        int8x16_t v86 = vorrq_s8(v86, v104);
        int8x16_t v95 = vorrq_s8(v95, v103);
        int8x16_t v87 = vorrq_s8(v87, v100);
        v88 -= 16;
      }
      while (v88);
      int8x16_t v111 = vorrq_s8(vorrq_s8(vorrq_s8(v87, v92), vorrq_s8(v90, v94)), vorrq_s8(vorrq_s8(v86, v93), vorrq_s8(v91, v95)));
      int8x8_t v10 = vorr_s8(*(int8x8_t *)v111.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
      if (v68 == v70) {
        return (*(void *)&v10 & 0x8080808080808080) == 0;
      }
      if ((v68 & 8) == 0)
      {
        v69 = &v13->u8[v70];
        do
        {
LABEL_76:
          unsigned int v112 = *v69++;
          *(void *)&v10 |= v112;
        }
        while (v69 != (unsigned __int8 *)v9);
        return (*(void *)&v10 & 0x8080808080808080) == 0;
      }
    }
    else
    {
      unint64_t v70 = 0;
    }
    v69 = &v13->u8[v68 & 0xFFFFFFFFFFFFFFF8];
    int8x16_t v71 = 0uLL;
    int8x16_t v72 = (int8x16_t)(unint64_t)v10;
    v73 = (uint8x8_t *)&v13->i8[v70];
    unint64_t v74 = v70 - (v68 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v75 = 0uLL;
    int8x16_t v76 = 0uLL;
    do
    {
      uint8x8_t v77 = *v73++;
      uint16x8_t v78 = vmovl_u8(v77);
      uint32x4_t v79 = vmovl_u16(*(uint16x4_t *)v78.i8);
      v80.i64[0] = v79.u32[0];
      v80.i64[1] = v79.u32[1];
      int8x16_t v81 = v80;
      v80.i64[0] = v79.u32[2];
      v80.i64[1] = v79.u32[3];
      int8x16_t v82 = v80;
      uint32x4_t v83 = vmovl_high_u16(v78);
      v80.i64[0] = v83.u32[0];
      v80.i64[1] = v83.u32[1];
      int8x16_t v84 = v80;
      v80.i64[0] = v83.u32[2];
      v80.i64[1] = v83.u32[3];
      int8x16_t v76 = vorrq_s8(v76, v80);
      int8x16_t v75 = vorrq_s8(v75, v84);
      int8x16_t v71 = vorrq_s8(v71, v82);
      int8x16_t v72 = vorrq_s8(v72, v81);
      v74 += 8;
    }
    while (v74);
    int8x16_t v85 = vorrq_s8(vorrq_s8(v72, v75), vorrq_s8(v71, v76));
    int8x8_t v10 = vorr_s8(*(int8x8_t *)v85.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8)) {
      return (*(void *)&v10 & 0x8080808080808080) == 0;
    }
    goto LABEL_76;
  }
  return (*(void *)&v10 & 0x8080808080808080) == 0;
}

uint64_t BinaryPropertyListSerializer::BinaryPropertyListSerializer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F3C78608;
  uint64_t v4 = -1;
  *(void *)(a1 + 8) = &unk_1F3C78598;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  do
  {
    v4 <<= 8;
    ++v5;
  }
  while ((v4 & v6) != 0);
  int v7 = 0;
  uint64_t v8 = 0;
  *(_DWORD *)(a1 + 88) = v5;
  uint64_t v9 = *(void *)(a1 + 72) + *(void *)(a1 + 80) * v5 + 8;
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = -1;
  do
  {
    v10 <<= 8;
    v8 += v6;
    ++v7;
  }
  while ((v10 & v9) != 0);
  *(_DWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v9 + v8 + 32;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 136) = 0;
  if (v11)
  {
    *(void *)(a1 + 128) = v11 + 8;
    *(void *)(a1 + 144) = v11 + *(void *)(a1 + 96);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
    **(void **)(a1 + 120) = 0x30307473696C7062;
    uint64_t v12 = *(void *)(a1 + 120) + *(void *)(a1 + 112);
    *(_WORD *)(v12 - 28) = 0;
    *(_DWORD *)(v12 - 32) = 0;
    *(unsigned char *)(v12 - 26) = *(_DWORD *)(a1 + 104);
    *(unsigned char *)(v12 - 25) = *(_DWORD *)(a1 + 88);
    *(void *)(v12 - 24) = bswap64(*(void *)(a1 + 56));
    *(void *)(v12 - 16) = bswap64(*(void *)(a1 + 56) - 1);
    *(void *)(v12 - 8) = bswap64(*(void *)(a1 + 96));
  }
  return a1;
}

uint64_t BinaryPropertyListSerializer::writeBooleanTrue(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (*(void *)(this + 136) == v1)
  {
    *(void *)(this + 136) = v1 + 1;
    uint64_t v2 = *(int *)(this + 104);
    int v3 = v2 - 1;
    uint64_t v4 = *(void *)(this + 120);
    uint64_t v5 = (unsigned char *)(*(void *)(this + 128) - v4);
    uint64_t v6 = v4 + *(void *)(this + 96) + v1 * v2 + v2;
    switch(v3)
    {
      case 0:
        goto LABEL_10;
      case 1:
        goto LABEL_9;
      case 2:
        goto LABEL_8;
      case 3:
        goto LABEL_7;
      case 4:
        goto LABEL_6;
      case 5:
        goto LABEL_5;
      case 6:
        goto LABEL_4;
      case 7:
        *(unsigned char *)(v6 - 8) = HIBYTE(v5);
LABEL_4:
        *(unsigned char *)(v6 - 7) = BYTE6(v5);
LABEL_5:
        *(unsigned char *)(v6 - 6) = BYTE5(v5);
LABEL_6:
        *(unsigned char *)(v6 - 5) = BYTE4(v5);
LABEL_7:
        *(unsigned char *)(v6 - 4) = BYTE3(v5);
LABEL_8:
        *(unsigned char *)(v6 - 3) = BYTE2(v5);
LABEL_9:
        *(unsigned char *)(v6 - 2) = BYTE1(v5);
LABEL_10:
        *(unsigned char *)(v6 - 1) = (_BYTE)v5;
        uint64_t v5 = *(unsigned char **)(this + 128);
        break;
      default:
        break;
    }
    *(void *)(this + 128) = v5 + 1;
    unsigned char *v5 = 9;
  }
  switch(*(_DWORD *)(this + 88))
  {
    case 1:
      goto LABEL_20;
    case 2:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 4:
      goto LABEL_17;
    case 5:
      goto LABEL_16;
    case 6:
      goto LABEL_15;
    case 7:
      goto LABEL_14;
    case 8:
      int v7 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v7;
      unsigned char *v7 = HIBYTE(v1);
LABEL_14:
      uint64_t v8 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v8;
      unsigned char *v8 = BYTE6(v1);
LABEL_15:
      uint64_t v9 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v9;
      *uint64_t v9 = BYTE5(v1);
LABEL_16:
      uint64_t v10 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v10;
      *uint64_t v10 = BYTE4(v1);
LABEL_17:
      uint64_t v11 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v11;
      *uint64_t v11 = BYTE3(v1);
LABEL_18:
      uint64_t v12 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v12;
      unsigned char *v12 = BYTE2(v1);
LABEL_19:
      unsigned int v13 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v13;
      unsigned char *v13 = BYTE1(v1);
LABEL_20:
      uint64_t v14 = (unsigned char *)(*(void *)(this + 144) - 1);
      *(void *)(this + 144) = v14;
      unsigned char *v14 = v1;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::writeInteger(BinaryPropertyListSerializer *this, int a2)
{
  uint64_t result = BinaryPropertyListSerializer::writeIntegerWithoutAddingAggregateObjectReference(this, a2);
  switch(*((_DWORD *)this + 22))
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      uint64_t v4 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v4;
      *uint64_t v4 = HIBYTE(result);
LABEL_3:
      uint64_t v5 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v5;
      unsigned char *v5 = BYTE6(result);
LABEL_4:
      uint64_t v6 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v6;
      unsigned char *v6 = BYTE5(result);
LABEL_5:
      int v7 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v7;
      unsigned char *v7 = BYTE4(result);
LABEL_6:
      uint64_t v8 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v8;
      unsigned char *v8 = BYTE3(result);
LABEL_7:
      uint64_t v9 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v9;
      *uint64_t v9 = BYTE2(result);
LABEL_8:
      uint64_t v10 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v10;
      *uint64_t v10 = BYTE1(result);
LABEL_9:
      uint64_t v11 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v11;
      *uint64_t v11 = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BinaryPropertyListSerializer::writeIntegerWithoutAddingAggregateObjectReference(BinaryPropertyListSerializer *this, int a2)
{
  if (!a2)
  {
    uint64_t v9 = *((void *)this + 3);
    if (*((void *)this + 17) == v9) {
      goto LABEL_10;
    }
    return v9;
  }
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    goto LABEL_20;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = v3 & (v5 ^ HIWORD(v5));
  int v7 = *(_DWORD *)(v2 + 16 * v6);
  if (v7 == a2)
  {
LABEL_7:
    uint64_t v9 = *(void *)(v2 + 16 * v6 + 8);
    if (*((void *)this + 17) == v9) {
      goto LABEL_10;
    }
    return v9;
  }
  int v8 = 1;
  while (v7)
  {
    uint64_t v6 = (v6 + v8) & v3;
    int v7 = *(_DWORD *)(v2 + 16 * v6);
    ++v8;
    if (v7 == a2) {
      goto LABEL_7;
    }
  }
LABEL_20:
  uint64_t v9 = 0;
  if (*((void *)this + 17)) {
    return v9;
  }
LABEL_10:
  *((void *)this + 17) = v9 + 1;
  uint64_t v10 = *((int *)this + 26);
  int v11 = v10 - 1;
  uint64_t v12 = *((void *)this + 15);
  uint64_t v13 = *((void *)this + 16) - v12;
  uint64_t v14 = v12 + *((void *)this + 12) + v9 * v10 + v10;
  switch(v11)
  {
    case 0:
      goto LABEL_18;
    case 1:
      goto LABEL_17;
    case 2:
      goto LABEL_16;
    case 3:
      goto LABEL_15;
    case 4:
      goto LABEL_14;
    case 5:
      goto LABEL_13;
    case 6:
      goto LABEL_12;
    case 7:
      *(unsigned char *)(v14 - 8) = HIBYTE(v13);
LABEL_12:
      *(unsigned char *)(v14 - 7) = BYTE6(v13);
LABEL_13:
      *(unsigned char *)(v14 - 6) = BYTE5(v13);
LABEL_14:
      *(unsigned char *)(v14 - 5) = BYTE4(v13);
LABEL_15:
      *(unsigned char *)(v14 - 4) = BYTE3(v13);
LABEL_16:
      *(unsigned char *)(v14 - 3) = BYTE2(v13);
LABEL_17:
      *(unsigned char *)(v14 - 2) = BYTE1(v13);
LABEL_18:
      *(unsigned char *)(v14 - 1) = v13;
      break;
    default:
      break;
  }
  BinaryPropertyListSerializer::appendInteger((uint64_t)this, a2);
  return v9;
}

uint64_t BinaryPropertyListSerializer::writeString(uint64_t this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = *(void *)(this + 40);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 - 8);
    unsigned int v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100) {
      this = WTF::StringImpl::hashSlowCase(*a2);
    }
    else {
      this = v7 >> 8;
    }
    for (int i = 0; ; this = (i + v10))
    {
      uint64_t v10 = this & v6;
      uint64_t v8 = *(void *)(v5 + 16 * v10);
      if (v8 != -1)
      {
        if (!v8) {
          goto LABEL_12;
        }
        this = WTF::equal(*(WTF **)(v5 + 16 * (this & v6)), *a2, a3);
        if (this) {
          break;
        }
      }
      ++i;
    }
    uint64_t v8 = *(void *)(v5 + 16 * v10 + 8);
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_12:
  if (*(void *)(v4 + 136) == v8) {
    this = BinaryPropertyListSerializer::appendStringObject((BinaryPropertyListSerializer *)v4, (unsigned int **)a2);
  }
  switch(*(_DWORD *)(v4 + 88))
  {
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      int v11 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v11;
      *int v11 = HIBYTE(v8);
LABEL_16:
      uint64_t v12 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v12;
      unsigned char *v12 = BYTE6(v8);
LABEL_17:
      uint64_t v13 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v13;
      unsigned char *v13 = BYTE5(v8);
LABEL_18:
      uint64_t v14 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v14;
      unsigned char *v14 = BYTE4(v8);
LABEL_19:
      char v15 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v15;
      unsigned char *v15 = BYTE3(v8);
LABEL_20:
      unsigned int v16 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v16;
      *unsigned int v16 = BYTE2(v8);
LABEL_21:
      uint64_t v17 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v17;
      unsigned char *v17 = BYTE1(v8);
LABEL_22:
      unint64_t v18 = (unsigned char *)(*(void *)(v4 + 144) - 1);
      *(void *)(v4 + 144) = v18;
      unsigned char *v18 = v8;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::appendStringObject(BinaryPropertyListSerializer *this, unsigned int **a2)
{
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = v4 + 1;
  uint64_t v5 = *((int *)this + 26);
  uint64_t v6 = *((void *)this + 15);
  uint64_t v7 = *((void *)this + 16) - v6;
  uint64_t v8 = v6 + *((void *)this + 12) + v4 * v5 + v5;
  switch((int)v5)
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      *(unsigned char *)(v8 - 8) = HIBYTE(v7);
LABEL_3:
      *(unsigned char *)(v8 - 7) = BYTE6(v7);
LABEL_4:
      *(unsigned char *)(v8 - 6) = BYTE5(v7);
LABEL_5:
      *(unsigned char *)(v8 - 5) = BYTE4(v7);
LABEL_6:
      *(unsigned char *)(v8 - 4) = BYTE3(v7);
LABEL_7:
      *(unsigned char *)(v8 - 3) = BYTE2(v7);
LABEL_8:
      *(unsigned char *)(v8 - 2) = BYTE1(v7);
LABEL_9:
      *(unsigned char *)(v8 - 1) = v7;
      break;
    default:
      break;
  }
  uint64_t v9 = *a2;
  if (!*a2)
  {
    uint64_t result = WTF::String::containsOnlyASCII(0);
    uint64_t v13 = (char *)*((void *)this + 16);
    *((void *)this + 16) = v13 + 1;
    if (result) {
      char v14 = 80;
    }
    else {
      char v14 = 96;
    }
    char *v13 = v14;
    return result;
  }
  unint64_t v10 = v9[1];
  uint64_t result = WTF::String::containsOnlyASCII((WTF::String *)v9);
  if ((result & 1) == 0)
  {
    if (v10 >= 0xF)
    {
      unint64_t v21 = (unsigned char *)*((void *)this + 16);
      *((void *)this + 16) = v21 + 1;
      unsigned char *v21 = 111;
      uint64_t result = BinaryPropertyListSerializer::appendInteger((uint64_t)this, v10);
    }
    else
    {
      char v15 = (unsigned char *)*((void *)this + 16);
      *((void *)this + 16) = v15 + 1;
      unsigned char *v15 = v10 | 0x60;
      if (!v10) {
        return result;
      }
    }
    unint64_t v22 = 0;
    while (1)
    {
      unint64_t v25 = *a2;
      if (!*a2) {
        goto LABEL_41;
      }
      if (v22 >= v25[1]) {
        break;
      }
      if ((v25[4] & 4) != 0)
      {
        uint64_t v30 = (unsigned char *)*((void *)this + 16);
        *((void *)this + 16) = v30 + 1;
        unsigned char *v30 = 0;
        int v23 = *a2;
        if (*a2)
        {
LABEL_42:
          if (v22 >= v23[1])
          {
            LOBYTE(v23) = 0;
          }
          else
          {
            uint64_t v29 = *((void *)v23 + 1);
            if ((v23[4] & 4) != 0) {
              LOBYTE(v23) = *(unsigned char *)(v29 + v22);
            }
            else {
              LOWORD(v23) = *(_WORD *)(v29 + 2 * v22);
            }
          }
        }
      }
      else
      {
        char v26 = *(unsigned char *)(*((void *)v25 + 1) + 2 * v22 + 1);
        int8x16_t v27 = (unsigned char *)*((void *)this + 16);
        *((void *)this + 16) = v27 + 1;
        unsigned char *v27 = v26;
        int v23 = *a2;
        if (*a2) {
          goto LABEL_42;
        }
      }
LABEL_34:
      unint64_t v24 = (unsigned char *)*((void *)this + 16);
      *((void *)this + 16) = v24 + 1;
      unsigned char *v24 = (_BYTE)v23;
      if (v10 == ++v22) {
        return result;
      }
    }
    LOBYTE(v25) = 0;
LABEL_41:
    int8x16_t v28 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v28 + 1;
    unsigned char *v28 = (_BYTE)v25;
    int v23 = *a2;
    if (*a2) {
      goto LABEL_42;
    }
    goto LABEL_34;
  }
  if (v10 >= 0xF)
  {
    unsigned int v16 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v16 + 1;
    *unsigned int v16 = 95;
    uint64_t result = BinaryPropertyListSerializer::appendInteger((uint64_t)this, v10);
  }
  else
  {
    uint64_t v12 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v12 + 1;
    unsigned char *v12 = v10 | 0x50;
    if (!v10) {
      return result;
    }
  }
  for (unint64_t i = 0; i != v10; ++i)
  {
    unint64_t v18 = *a2;
    if (*a2)
    {
      if (i >= v18[1])
      {
        LOBYTE(v18) = 0;
      }
      else
      {
        uint64_t v20 = *((void *)v18 + 1);
        if ((v18[4] & 4) != 0) {
          LOBYTE(v18) = *(unsigned char *)(v20 + i);
        }
        else {
          LOWORD(v18) = *(_WORD *)(v20 + 2 * i);
        }
      }
    }
    unint64_t v19 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v19 + 1;
    unsigned char *v19 = (_BYTE)v18;
  }
  return result;
}

uint64_t BinaryPropertyListSerializer::writeIntegerArray(uint64_t this, int *a2, unint64_t a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *(void *)(this + 48);
  if (!v6) {
    goto LABEL_28;
  }
  unsigned int v7 = -1640531527;
  if (a3)
  {
    uint64_t v8 = 4 * a3;
    uint64_t v9 = a2;
    do
    {
      unsigned int v10 = *v9++;
      unsigned int v7 = ((v10 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v10) << 16) ^ (v7 + (unsigned __int16)v10))
         + (((v10 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v10) << 16) ^ (v7 + (unsigned __int16)v10)) >> 11);
      v8 -= 4;
    }
    while (v8);
  }
  int v11 = *(_DWORD *)(v6 - 8);
  unsigned int v12 = (v7 ^ (8 * v7)) + ((v7 ^ (8 * v7)) >> 5);
  unsigned int v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  int v14 = v13 ^ (v13 << 10);
  if (!v14) {
    int v14 = 0x800000;
  }
  if (a3 == -1)
  {
    unsigned int v17 = v14 & v11;
    unint64_t v24 = (void *)(v6 + 24 * v17);
    uint64_t v25 = v24[1];
    if (v25 == -1) {
      goto LABEL_33;
    }
    int v26 = 1;
    while (v25 || *v24)
    {
      unsigned int v17 = (v17 + v26) & v11;
      unint64_t v24 = (void *)(v6 + 24 * v17);
      uint64_t v25 = v24[1];
      ++v26;
      if (v25 == -1) {
        goto LABEL_33;
      }
    }
LABEL_28:
    uint64_t v27 = 0;
    if (a3) {
      goto LABEL_34;
    }
    goto LABEL_36;
  }
  if (!a3)
  {
    unsigned int v17 = v14 & v11;
    if (*(void *)(v6 + 24 * v17 + 8))
    {
      int v28 = 1;
      do
        unsigned int v17 = (v17 + v28++) & v11;
      while (*(void *)(v6 + 24 * v17 + 8));
    }
    goto LABEL_33;
  }
  for (i = 0; ; int v14 = i + v17)
  {
    unsigned int v17 = v14 & v11;
    uint64_t v18 = v6 + 24 * v17;
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19 == -1) {
      goto LABEL_14;
    }
    uint64_t v20 = *(_DWORD **)v18;
    if (v19 == a3) {
      break;
    }
    if (v19) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v20 == 0;
    }
    if (v16) {
      goto LABEL_28;
    }
LABEL_14:
    ++i;
  }
  if (*v20 != *a2) {
    goto LABEL_14;
  }
  unint64_t v21 = 0;
  unint64_t v22 = v20 + 1;
  while (a3 - 1 != v21)
  {
    this = v22[v21];
    int v23 = a2[++v21];
    if (this != v23)
    {
      if (v21 < a3) {
        goto LABEL_14;
      }
      break;
    }
  }
LABEL_33:
  uint64_t v27 = *(void *)(v6 + 24 * v17 + 16);
  if (a3)
  {
LABEL_34:
    uint64_t v29 = a2;
    unint64_t v30 = a3;
    do
    {
      int v31 = *v29++;
      this = BinaryPropertyListSerializer::writeIntegerWithoutAddingAggregateObjectReference((BinaryPropertyListSerializer *)v5, v31);
      --v30;
    }
    while (v30);
  }
LABEL_36:
  if (*(void *)(v5 + 136) == v27)
  {
    *(void *)(v5 + 136) = v27 + 1;
    uint64_t v32 = *(int *)(v5 + 104);
    int v33 = v32 - 1;
    uint64_t v34 = *(void *)(v5 + 120);
    uint64_t v35 = *(void *)(v5 + 128) - v34;
    uint64_t v36 = v34 + *(void *)(v5 + 96) + v27 * v32 + v32;
    switch(v33)
    {
      case 0:
        goto LABEL_45;
      case 1:
        goto LABEL_44;
      case 2:
        goto LABEL_43;
      case 3:
        goto LABEL_42;
      case 4:
        goto LABEL_41;
      case 5:
        goto LABEL_40;
      case 6:
        goto LABEL_39;
      case 7:
        *(unsigned char *)(v36 - 8) = HIBYTE(v35);
LABEL_39:
        *(unsigned char *)(v36 - 7) = BYTE6(v35);
LABEL_40:
        *(unsigned char *)(v36 - 6) = BYTE5(v35);
LABEL_41:
        *(unsigned char *)(v36 - 5) = BYTE4(v35);
LABEL_42:
        *(unsigned char *)(v36 - 4) = BYTE3(v35);
LABEL_43:
        *(unsigned char *)(v36 - 3) = BYTE2(v35);
LABEL_44:
        *(unsigned char *)(v36 - 2) = BYTE1(v35);
LABEL_45:
        *(unsigned char *)(v36 - 1) = v35;
        break;
      default:
        break;
    }
    if (a3 >= 0xF)
    {
      uint16x8_t v46 = *(unsigned char **)(v5 + 128);
      *(void *)(v5 + 128) = v46 + 1;
      *uint16x8_t v46 = -81;
      this = BinaryPropertyListSerializer::appendInteger(v5, a3);
    }
    else
    {
      int8x16_t v37 = *(unsigned char **)(v5 + 128);
      *(void *)(v5 + 128) = v37 + 1;
      *int8x16_t v37 = a3 | 0xA0;
      if (!a3) {
        goto LABEL_48;
      }
    }
    uint64_t v47 = 0;
    while (2)
    {
      int v55 = a2[v47];
      int8x16_t v56 = (uint64_t *)(v5 + 24);
      if (!v55) {
        goto LABEL_74;
      }
      uint64_t v57 = *(void *)(v5 + 32);
      if (v57)
      {
        unsigned int v58 = *(_DWORD *)(v57 - 8);
        unsigned int v59 = 9 * ((v55 + ~(v55 << 15)) ^ ((v55 + ~(v55 << 15)) >> 10));
        unsigned int v60 = (v59 ^ (v59 >> 6)) + ~((v59 ^ (v59 >> 6)) << 11);
        uint64_t v61 = v58 & (v60 ^ HIWORD(v60));
        int v62 = *(_DWORD *)(v57 + 16 * v61);
        if (v62 != v55)
        {
          int v63 = 1;
          while (v62)
          {
            uint64_t v61 = (v61 + v63) & v58;
            int v62 = *(_DWORD *)(v57 + 16 * v61);
            ++v63;
            if (v62 == v55) {
              goto LABEL_73;
            }
          }
          uint64_t v57 = 0;
          unsigned int v64 = *(_DWORD *)(v5 + 88) - 1;
          if (v64 > 7)
          {
LABEL_66:
            if (a3 <= ++v47) {
              goto LABEL_48;
            }
            continue;
          }
LABEL_76:
          switch(v64)
          {
            case 0u:
              goto LABEL_65;
            case 1u:
              goto LABEL_64;
            case 2u:
              goto LABEL_63;
            case 3u:
              goto LABEL_62;
            case 4u:
              goto LABEL_61;
            case 5u:
              goto LABEL_60;
            case 6u:
              goto LABEL_59;
            case 7u:
              uint64_t v65 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v65 + 1;
              *uint64_t v65 = HIBYTE(v57);
LABEL_59:
              int8x16_t v48 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v48 + 1;
              *int8x16_t v48 = BYTE6(v57);
LABEL_60:
              int8x16_t v49 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v49 + 1;
              *int8x16_t v49 = BYTE5(v57);
LABEL_61:
              int8x16_t v50 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v50 + 1;
              unsigned char *v50 = BYTE4(v57);
LABEL_62:
              uint32x4_t v51 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v51 + 1;
              unsigned char *v51 = BYTE3(v57);
LABEL_63:
              int8x16_t v52 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v52 + 1;
              unsigned char *v52 = BYTE2(v57);
LABEL_64:
              int8x16_t v53 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v53 + 1;
              unsigned char *v53 = BYTE1(v57);
LABEL_65:
              uint32x4_t v54 = *(unsigned char **)(v5 + 128);
              *(void *)(v5 + 128) = v54 + 1;
              *uint32x4_t v54 = v57;
              break;
            default:
              goto LABEL_66;
          }
          goto LABEL_66;
        }
LABEL_73:
        int8x16_t v56 = (uint64_t *)(v57 + 16 * v61 + 8);
LABEL_74:
        uint64_t v57 = *v56;
      }
      break;
    }
    unsigned int v64 = *(_DWORD *)(v5 + 88) - 1;
    goto LABEL_76;
  }
LABEL_48:
  switch(*(_DWORD *)(v5 + 88))
  {
    case 1:
      goto LABEL_56;
    case 2:
      goto LABEL_55;
    case 3:
      goto LABEL_54;
    case 4:
      goto LABEL_53;
    case 5:
      goto LABEL_52;
    case 6:
      goto LABEL_51;
    case 7:
      goto LABEL_50;
    case 8:
      uint64_t v38 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v38;
      *uint64_t v38 = HIBYTE(v27);
LABEL_50:
      unint64_t v39 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v39;
      *unint64_t v39 = BYTE6(v27);
LABEL_51:
      int8x16_t v40 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v40;
      unsigned char *v40 = BYTE5(v27);
LABEL_52:
      int8x16_t v41 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v41;
      unsigned char *v41 = BYTE4(v27);
LABEL_53:
      int8x16_t v42 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v42;
      unsigned char *v42 = BYTE3(v27);
LABEL_54:
      int8x16_t v43 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v43;
      *int8x16_t v43 = BYTE2(v27);
LABEL_55:
      int8x16_t v44 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v44;
      *int8x16_t v44 = BYTE1(v27);
LABEL_56:
      int8x16_t v45 = (unsigned char *)(*(void *)(v5 + 144) - 1);
      *(void *)(v5 + 144) = v45;
      *int8x16_t v45 = v27;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::writeUniqueString(BinaryPropertyListSerializer *this, const char *__s)
{
  uint64_t v2 = __s;
  uint64_t v4 = *((void *)this + 17);
  switch(*((_DWORD *)this + 22))
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      uint64_t v5 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v5;
      unsigned char *v5 = HIBYTE(v4);
LABEL_3:
      uint64_t v6 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v6;
      unsigned char *v6 = BYTE6(v4);
LABEL_4:
      unsigned int v7 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v7;
      unsigned char *v7 = BYTE5(v4);
LABEL_5:
      uint64_t v8 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v8;
      unsigned char *v8 = BYTE4(v4);
LABEL_6:
      uint64_t v9 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v9;
      *uint64_t v9 = BYTE3(v4);
LABEL_7:
      unsigned int v10 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v10;
      *unsigned int v10 = BYTE2(v4);
LABEL_8:
      int v11 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v11;
      *int v11 = BYTE1(v4);
LABEL_9:
      unsigned int v12 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v12;
      unsigned char *v12 = v4;
      uint64_t v4 = *((void *)this + 17);
      break;
    default:
      break;
  }
  *((void *)this + 17) = v4 + 1;
  uint64_t v13 = *((int *)this + 26);
  uint64_t v14 = *((void *)this + 15);
  uint64_t v15 = *((void *)this + 16) - v14;
  uint64_t v16 = v14 + *((void *)this + 12) + v4 * v13 + v13;
  switch((int)v13)
  {
    case 1:
      goto LABEL_18;
    case 2:
      goto LABEL_17;
    case 3:
      goto LABEL_16;
    case 4:
      goto LABEL_15;
    case 5:
      goto LABEL_14;
    case 6:
      goto LABEL_13;
    case 7:
      goto LABEL_12;
    case 8:
      *(unsigned char *)(v16 - 8) = HIBYTE(v15);
LABEL_12:
      *(unsigned char *)(v16 - 7) = BYTE6(v15);
LABEL_13:
      *(unsigned char *)(v16 - 6) = BYTE5(v15);
LABEL_14:
      *(unsigned char *)(v16 - 5) = BYTE4(v15);
LABEL_15:
      *(unsigned char *)(v16 - 4) = BYTE3(v15);
LABEL_16:
      *(unsigned char *)(v16 - 3) = BYTE2(v15);
LABEL_17:
      *(unsigned char *)(v16 - 2) = BYTE1(v15);
LABEL_18:
      *(unsigned char *)(v16 - 1) = v15;
      break;
    default:
      break;
  }
  uint64_t result = strlen(__s);
  uint64_t v18 = result;
  if (result >= 0xFuLL)
  {
    uint64_t v20 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v20 + 1;
    unsigned char *v20 = 95;
    uint64_t result = BinaryPropertyListSerializer::appendInteger((uint64_t)this, result);
  }
  else
  {
    uint64_t v19 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v19 + 1;
    unsigned char *v19 = result | 0x50;
    if (!result) {
      return result;
    }
  }
  do
  {
    char v21 = *v2++;
    unint64_t v22 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v22 + 1;
    unsigned char *v22 = v21;
    --v18;
  }
  while (v18);
  return result;
}

uint64_t BinaryPropertyListSerializer::writeUniqueString(BinaryPropertyListSerializer *this, unsigned int **a2)
{
  uint64_t v2 = *((void *)this + 17);
  switch(*((_DWORD *)this + 22))
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      unsigned int v3 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v3;
      *unsigned int v3 = HIBYTE(v2);
LABEL_3:
      uint64_t v4 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v4;
      *uint64_t v4 = BYTE6(v2);
LABEL_4:
      uint64_t v5 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v5;
      unsigned char *v5 = BYTE5(v2);
LABEL_5:
      uint64_t v6 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v6;
      unsigned char *v6 = BYTE4(v2);
LABEL_6:
      unsigned int v7 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v7;
      unsigned char *v7 = BYTE3(v2);
LABEL_7:
      uint64_t v8 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v8;
      unsigned char *v8 = BYTE2(v2);
LABEL_8:
      uint64_t v9 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v9;
      *uint64_t v9 = BYTE1(v2);
LABEL_9:
      unsigned int v10 = (unsigned char *)(*((void *)this + 18) - 1);
      *((void *)this + 18) = v10;
      *unsigned int v10 = v2;
      break;
    default:
      return BinaryPropertyListSerializer::appendStringObject(this, a2);
  }
  return BinaryPropertyListSerializer::appendStringObject(this, a2);
}

uint64_t BinaryPropertyListSerializer::writeArrayStart(BinaryPropertyListSerializer *this)
{
  return *((void *)this + 18) - *((void *)this + 15);
}

void *BinaryPropertyListSerializer::writeArrayEnd(BinaryPropertyListSerializer *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = v4 + 1;
  uint64_t v5 = *((void *)this + 15);
  uint64_t v6 = *((int *)this + 26);
  int v7 = v6 - 1;
  uint64_t v8 = *((void *)this + 16) - v5;
  uint64_t v9 = v5 + *((void *)this + 12) + v4 * v6 + v6;
  switch(v7)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      *(unsigned char *)(v9 - 8) = HIBYTE(v8);
LABEL_3:
      *(unsigned char *)(v9 - 7) = BYTE6(v8);
LABEL_4:
      *(unsigned char *)(v9 - 6) = BYTE5(v8);
LABEL_5:
      *(unsigned char *)(v9 - 5) = BYTE4(v8);
LABEL_6:
      *(unsigned char *)(v9 - 4) = BYTE3(v8);
LABEL_7:
      *(unsigned char *)(v9 - 3) = BYTE2(v8);
LABEL_8:
      *(unsigned char *)(v9 - 2) = BYTE1(v8);
LABEL_9:
      *(unsigned char *)(v9 - 1) = v8;
      uint64_t v5 = *((void *)this + 15);
      break;
    default:
      break;
  }
  uint64_t v10 = *((void *)this + 18);
  uint64_t v11 = v5 - v10 + a2;
  unint64_t v12 = v11 / (unint64_t)*((int *)this + 22);
  if (v12 > 0xE)
  {
    uint64_t v14 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v14 + 1;
    unsigned char *v14 = -81;
    BinaryPropertyListSerializer::appendInteger((uint64_t)this, v12);
  }
  else
  {
    uint64_t v13 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v13 + 1;
    unsigned char *v13 = v12 | 0xA0;
  }
  uint64_t v15 = (char *)*((void *)this + 16);
  uint64_t v16 = *((void *)this + 15) + a2;
  *((void *)this + 18) = v16;
  uint64_t result = memmove(v15, (const void *)(v16 - v11), v5 - v10 + a2);
  if (v11 >= 2)
  {
    uint64_t v18 = &v15[~v10 + v5 + a2];
    uint64_t v19 = v5 - v10 + a2;
    do
    {
      char v20 = *v15;
      *v15++ = *v18;
      *v18-- = v20;
      v19 -= 2;
    }
    while (v19 > 1);
  }
  unint64_t v21 = *((void *)this + 17);
  *((void *)this + 16) += v11;
  if (v21 < *((void *)this + 7))
  {
    switch(*((_DWORD *)this + 22))
    {
      case 1:
        goto LABEL_25;
      case 2:
        goto LABEL_24;
      case 3:
        goto LABEL_23;
      case 4:
        goto LABEL_22;
      case 5:
        goto LABEL_21;
      case 6:
        goto LABEL_20;
      case 7:
        goto LABEL_19;
      case 8:
        unint64_t v22 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v22;
        unsigned char *v22 = HIBYTE(v4);
LABEL_19:
        int v23 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v23;
        unsigned char *v23 = BYTE6(v4);
LABEL_20:
        unint64_t v24 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v24;
        unsigned char *v24 = BYTE5(v4);
LABEL_21:
        uint64_t v25 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v25;
        unsigned char *v25 = BYTE4(v4);
LABEL_22:
        int v26 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v26;
        unsigned char *v26 = BYTE3(v4);
LABEL_23:
        uint64_t v27 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v27;
        unsigned char *v27 = BYTE2(v4);
LABEL_24:
        int v28 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v28;
        unsigned char *v28 = BYTE1(v4);
LABEL_25:
        uint64_t v29 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v29;
        unsigned char *v29 = v4;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BinaryPropertyListSerializer::appendInteger(uint64_t this, unint64_t a2)
{
  if (a2 > 0xFF)
  {
    if (a2 >> 16)
    {
      uint64_t v5 = *(unsigned char **)(this + 128);
      *(void *)(this + 128) = v5 + 1;
      if (HIDWORD(a2))
      {
        unsigned char *v5 = 19;
        uint64_t v6 = *(unsigned char **)(this + 128);
        *(void *)(this + 128) = v6 + 1;
        unsigned char *v6 = HIBYTE(a2);
        int v7 = *(unsigned char **)(this + 128);
        *(void *)(this + 128) = v7 + 1;
        unsigned char *v7 = BYTE6(a2);
        uint64_t v8 = *(unsigned char **)(this + 128);
        *(void *)(this + 128) = v8 + 1;
        unsigned char *v8 = BYTE5(a2);
        uint64_t v9 = *(unsigned char **)(this + 128);
        *(void *)(this + 128) = v9 + 1;
        *uint64_t v9 = BYTE4(a2);
      }
      else
      {
        unsigned char *v5 = 18;
      }
      uint64_t v10 = *(unsigned char **)(this + 128);
      *(void *)(this + 128) = v10 + 1;
      *uint64_t v10 = BYTE3(a2);
      uint64_t v11 = *(unsigned char **)(this + 128);
      *(void *)(this + 128) = v11 + 1;
      *uint64_t v11 = BYTE2(a2);
    }
    else
    {
      uint64_t v4 = *(unsigned char **)(this + 128);
      *(void *)(this + 128) = v4 + 1;
      *uint64_t v4 = 17;
    }
    unint64_t v12 = *(unsigned char **)(this + 128);
    *(void *)(this + 128) = v12 + 1;
    unsigned char *v12 = BYTE1(a2);
    uint64_t v13 = *(unsigned char **)(this + 128);
    *(void *)(this + 128) = v13 + 1;
    unsigned char *v13 = a2;
  }
  else
  {
    uint64_t v2 = *(unsigned char **)(this + 128);
    *(void *)(this + 128) = v2 + 1;
    *uint64_t v2 = 16;
    unsigned int v3 = *(unsigned char **)(this + 128);
    *(void *)(this + 128) = v3 + 1;
    *unsigned int v3 = a2;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::writeDictionaryStart(BinaryPropertyListSerializer *this)
{
  return *((void *)this + 18) - *((void *)this + 15);
}

void *BinaryPropertyListSerializer::writeDictionaryEnd(BinaryPropertyListSerializer *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = v4 + 1;
  uint64_t v5 = *((void *)this + 15);
  uint64_t v6 = *((int *)this + 26);
  int v7 = v6 - 1;
  uint64_t v8 = *((void *)this + 16) - v5;
  uint64_t v9 = v5 + *((void *)this + 12) + v4 * v6 + v6;
  switch(v7)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      *(unsigned char *)(v9 - 8) = HIBYTE(v8);
LABEL_3:
      *(unsigned char *)(v9 - 7) = BYTE6(v8);
LABEL_4:
      *(unsigned char *)(v9 - 6) = BYTE5(v8);
LABEL_5:
      *(unsigned char *)(v9 - 5) = BYTE4(v8);
LABEL_6:
      *(unsigned char *)(v9 - 4) = BYTE3(v8);
LABEL_7:
      *(unsigned char *)(v9 - 3) = BYTE2(v8);
LABEL_8:
      *(unsigned char *)(v9 - 2) = BYTE1(v8);
LABEL_9:
      *(unsigned char *)(v9 - 1) = v8;
      uint64_t v5 = *((void *)this + 15);
      break;
    default:
      break;
  }
  uint64_t v10 = *((void *)this + 18);
  uint64_t v11 = v5 - v10 + a2;
  unint64_t v12 = v11 / (unint64_t)(2 * *((int *)this + 22));
  if (v12 > 0xE)
  {
    uint64_t v14 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v14 + 1;
    unsigned char *v14 = -33;
    BinaryPropertyListSerializer::appendInteger((uint64_t)this, v12);
  }
  else
  {
    uint64_t v13 = (unsigned char *)*((void *)this + 16);
    *((void *)this + 16) = v13 + 1;
    unsigned char *v13 = v12 | 0xD0;
  }
  uint64_t v15 = (char *)*((void *)this + 16);
  uint64_t v16 = *((void *)this + 15) + a2;
  *((void *)this + 18) = v16;
  uint64_t result = memmove(v15, (const void *)(v16 - v11), v5 - v10 + a2);
  if (v11 >= 2)
  {
    uint64_t v18 = &v15[~v10 + v5 + a2];
    uint64_t v19 = v5 - v10 + a2;
    do
    {
      char v20 = *v15;
      *v15++ = *v18;
      *v18-- = v20;
      v19 -= 2;
    }
    while (v19 > 1);
  }
  uint64_t v21 = *((void *)this + 17);
  *((void *)this + 16) += v11;
  if (v21 != *((void *)this + 7))
  {
    switch(*((_DWORD *)this + 22))
    {
      case 1:
        goto LABEL_25;
      case 2:
        goto LABEL_24;
      case 3:
        goto LABEL_23;
      case 4:
        goto LABEL_22;
      case 5:
        goto LABEL_21;
      case 6:
        goto LABEL_20;
      case 7:
        goto LABEL_19;
      case 8:
        unint64_t v22 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v22;
        unsigned char *v22 = HIBYTE(v4);
LABEL_19:
        int v23 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v23;
        unsigned char *v23 = BYTE6(v4);
LABEL_20:
        unint64_t v24 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v24;
        unsigned char *v24 = BYTE5(v4);
LABEL_21:
        uint64_t v25 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v25;
        unsigned char *v25 = BYTE4(v4);
LABEL_22:
        int v26 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v26;
        unsigned char *v26 = BYTE3(v4);
LABEL_23:
        uint64_t v27 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v27;
        unsigned char *v27 = BYTE2(v4);
LABEL_24:
        int v28 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v28;
        unsigned char *v28 = BYTE1(v4);
LABEL_25:
        uint64_t v29 = (unsigned char *)(*((void *)this + 18) - 1);
        *((void *)this + 18) = v29;
        unsigned char *v29 = v4;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BinaryPropertyListWriter::writePropertyList(BinaryPropertyListWriter *this)
{
  uint64_t result = BinaryPropertyListSerializer::BinaryPropertyListSerializer((uint64_t)v7, (uint64_t)this);
  v7[0] = &unk_1F3C78608;
  v7[1] = &unk_1F3C78598;
  if (v10) {
    uint64_t result = WTF::fastFree((WTF *)(v10 - 16), v2);
  }
  unsigned int v3 = v9;
  if (v9)
  {
    uint64_t v4 = *((unsigned int *)v9 - 1);
    if (v4)
    {
      uint64_t v5 = v9;
      do
      {
        uint64_t v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          unsigned char *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, v2);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    uint64_t result = WTF::fastFree((WTF *)(v3 - 2), v2);
  }
  if (v8) {
    return WTF::fastFree((WTF *)(v8 - 16), v2);
  }
  return result;
}

void BinaryPropertyListSerializer::~BinaryPropertyListSerializer(BinaryPropertyListSerializer *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78608;
  *((void *)this + 1) = &unk_1F3C78598;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (WTF::StringImpl **)*((void *)this + 5);
      do
      {
        int v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          WTF::StringImpl *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t vars8;

  *(void *)this = &unk_1F3C78608;
  *((void *)this + 1) = &unk_1F3C78598;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (WTF::StringImpl **)*((void *)this + 5);
      do
      {
        int v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          WTF::StringImpl *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  JUMPOUT(0x1E4E4B240);
}

void BinaryPropertyListPlan::~BinaryPropertyListPlan(BinaryPropertyListPlan *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78598;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (WTF::StringImpl **)*((void *)this + 4);
      do
      {
        int v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          WTF::StringImpl *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t vars8;

  *(void *)this = &unk_1F3C78598;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (WTF::StringImpl **)*((void *)this + 4);
      do
      {
        int v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          WTF::StringImpl *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  JUMPOUT(0x1E4E4B240);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,unsigned long>>,WTF::DefaultHash<int>,WTF::HashMap<int,unsigned long,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (_DWORD *)(v4 + 16 * i);
      if ((*v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        int v13 = 0;
        unsigned int v14 = 9 * ((*v10 + ~(*v10 << 15)) ^ ((*v10 + ~(*v10 << 15)) >> 10));
        unsigned int v15 = ((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v16 = v15 & v12;
          unsigned int v15 = ++v13 + v16;
        }
        while (*(_DWORD *)(v11 + 16 * v16));
        *(_OWORD *)(v11 + 16 * v16) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1)
          {
            int v13 = *(_DWORD *)(v12 - 8);
            unsigned int v14 = *((_DWORD *)v11 + 4);
            if (v14 >= 0x100) {
              goto LABEL_12;
            }
LABEL_14:
            unsigned int v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          else
          {
            int v13 = 0;
            unsigned int v14 = *((_DWORD *)v11 + 4);
            if (v14 < 0x100) {
              goto LABEL_14;
            }
LABEL_12:
            unsigned int v15 = v14 >> 8;
          }
          int v16 = 0;
          do
          {
            uint64_t v17 = v15 & v13;
            unsigned int v15 = ++v16 + v17;
          }
          while (*(void *)(v12 + 16 * v17));
          uint64_t v18 = (WTF::StringImpl **)(v12 + 16 * v17);
          uint64_t v19 = *(WTF::StringImpl **)(v4 + 16 * v9 + 8);
          char *v18 = 0;
          char v20 = *v10;
          *uint64_t v10 = 0;
          char *v18 = v20;
          v18[1] = v19;
          uint64_t v21 = *v10;
          *uint64_t v10 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v8);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          goto LABEL_7;
        }
        *uint64_t v10 = 0;
      }
LABEL_7:
      if (++v9 == v5) {
        goto LABEL_23;
      }
    }
  }
  if (v4)
  {
LABEL_23:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::HashTable<IntegerArray,WTF::KeyValuePair<IntegerArray,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IntegerArray,unsigned long>>,IntegerArrayHash,WTF::HashMap<IntegerArray,unsigned long,IntegerArrayHash,IntegerArrayHashTraits,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,IntegerArrayHashTraits>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 24 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    while (1)
    {
      unsigned int v15 = (unsigned int **)(v6 + 24 * v13);
      int v16 = v15[1];
      if (v16 != (unsigned int *)-1)
      {
        uint64_t v17 = *v15;
        if (v16 || v17 != 0) {
          break;
        }
      }
LABEL_8:
      if (++v13 == v7) {
        goto LABEL_32;
      }
    }
    uint64_t v19 = *a1;
    if (*a1)
    {
      int v20 = *(_DWORD *)(v19 - 8);
      unsigned int v21 = -1640531527;
      if (!v16) {
        goto LABEL_20;
      }
    }
    else
    {
      int v20 = 0;
      unsigned int v21 = -1640531527;
      if (!v16) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 4 * (void)v16;
    do
    {
      unsigned int v23 = *v17++;
      unsigned int v21 = ((v23 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v23) << 16) ^ (v21 + (unsigned __int16)v23))
          + (((v23 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v23) << 16) ^ (v21 + (unsigned __int16)v23)) >> 11);
      v22 -= 4;
    }
    while (v22);
LABEL_20:
    int v24 = 0;
    unsigned int v25 = (v21 ^ (8 * v21)) + ((v21 ^ (8 * v21)) >> 5);
    unsigned int v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
    int v27 = v26 ^ (v26 << 10);
    if (v27) {
      int v28 = v27;
    }
    else {
      int v28 = 0x800000;
    }
    do
    {
      unsigned int v29 = v28 & v20;
      unint64_t v30 = (void *)(v19 + 24 * v29);
      uint64_t v10 = (void *)v30[1];
      int v28 = ++v24 + v29;
      if (*v30) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v10 == 0;
      }
    }
    while (!v31);
    long long v32 = *(_OWORD *)v15;
    v30[2] = v15[2];
    *(_OWORD *)unint64_t v30 = v32;
    if (v15 == a3) {
      unsigned int v14 = v30;
    }
    goto LABEL_8;
  }
  unsigned int v14 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_32:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

void HistoryPropertyListWriter::HistoryPropertyListWriter(HistoryPropertyListWriter *this)
{
  *(void *)this = &unk_1F3C78678;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 1) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 2) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 3) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 4) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 5) = v3;
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *((void *)this + 6) = v2;
  *((void *)this + 7) = 0;
}

void sub_1E134B2D4(_Unwind_Exception *exception_object, StringImpl *a2)
{
  uint64_t v4 = (WTF::StringImpl *)v2[4];
  v2[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)v2[3];
  v2[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)v2[2];
  v2[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (WTF::StringImpl *)v2[1];
  v2[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *HistoryPropertyListWriter::buffer(HistoryPropertyListWriter *this, CFIndex a2)
{
  uint64_t result = CFAllocatorAllocate(0, a2, 0);
  *((void *)this + 7) = result;
  *((void *)this + 8) = a2;
  return result;
}

uint64_t HistoryPropertyListWriter::writeObjects(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 16))(a2, &v11);
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 16))(a2, &v11);
  int v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v4);
}

void sub_1E134B5C4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t HistoryPropertyListWriter::writeHistoryItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a3) {
    uint64_t v6 = *(WebCore::HistoryItem **)(*(void *)(a3 + 8) + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v8 = WebCore::HistoryItem::title(v6);
  uint64_t v9 = WebCore::HistoryItem::alternateTitle(v6);
  uint64_t v10 = *(void *)(a3 + 8);
  double v11 = *(double *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 48);
  if (*(void *)v8 && *(_DWORD *)(*(void *)v8 + 4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 40);
  }
  if (*(void *)v9 && *(_DWORD *)(*(void *)v9 + 4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 8);
  }
  if (v11 != 0.0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 24);
  }
  if (*((unsigned char *)v6 + 144)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 16);
  }
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 32);
  }
  uint64_t v13 = WebCore::HistoryItem::urlString(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, v13);
  if (*(void *)v8 && *(_DWORD *)(*(void *)v8 + 4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v8);
  }
  if (*(void *)v9 && *(_DWORD *)(*(void *)v9 + 4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v9);
  }
  if (v11 != 0.0)
  {
    snprintf(__str, 0x20uLL, "%.1lf", v11);
    (*(void (**)(uint64_t, char *))(*(void *)a2 + 32))(a2, __str);
  }
  if (*((unsigned char *)v6 + 144)) {
    (**(void (***)(uint64_t))a2)(a2);
  }
  if (!v12) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v7);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v15 = result;
  uint64_t v16 = *(unsigned int *)(v12 + 12);
  if (!v16)
  {
LABEL_31:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v15);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v7);
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 8 * v16;
  while (v18 < *(unsigned int *)(v12 + 12))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, *(void *)v12 + v17);
    ++v18;
    v17 += 8;
    if (v19 == v17) {
      goto LABEL_31;
    }
  }
  __break(0xC471u);
  return result;
}

void InProcessIDBServer::~InProcessIDBServer(InProcessIDBServer *this)
{
  __int16 v14 = 0;
  char v15 = 0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v2 = &unk_1F3C789A8;
  v2[1] = this;
  v2[2] = &v14;
  uint64_t v16 = (uint64_t)v2;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v16);
  uint64_t v3 = v16;
  uint64_t v16 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v16 = 0x7FF0000000000000;
  int v17 = 0;
  WTF::BinarySemaphore::waitUntil();
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  uint64_t v6 = (WTF *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v6)
  {
LABEL_8:
    uint64_t v7 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)v6 + 2);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), v4);
  }
  WTF::fastFree(v6, v4);
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v7)
  {
LABEL_14:
    uint64_t v9 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_13:
  if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) != 1) {
    goto LABEL_14;
  }
  atomic_store(1u, (unsigned int *)v7);
  uint64_t v12 = *(WebCore::IDBClient::IDBConnectionProxy **)(v7 + 24);
  *(void *)(v7 + 24) = 0;
  if (v12)
  {
    WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v12, v4);
    MEMORY[0x1E4E48CF0]();
  }
  uint64_t v13 = *(atomic_uint **)(v7 + 8);
  *(void *)(v7 + 8) = 0;
  if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1)
  {
    MEMORY[0x1E4E48E80](v7);
    uint64_t v9 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    if (!v9) {
      goto LABEL_16;
    }
LABEL_15:
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    goto LABEL_16;
  }
  atomic_store(1u, (unsigned int *)v13);
  WTF::fastFree((WTF *)v13, v4);
  MEMORY[0x1E4E48E80](v7);
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v10 = *((void *)this + 1);
  if (v10)
  {
    *(void *)(v10 + 8) = 0;
    double v11 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v11)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v4);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  InProcessIDBServer::~InProcessIDBServer(this);
  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'InProcessIDBServer::~InProcessIDBServer(InProcessIDBServer *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void InProcessIDBServer::InProcessIDBServer(InProcessIDBServer *this, SessionID a2, const WTF::String *a3)
{
  *((_DWORD *)this + 6) = 1;
  *(void *)this = &unk_1F3C786B0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1F3C78860;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  WTF::WorkQueue::create();
  WebCore::IDBClient::IDBConnectionToServer::create();
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = v10;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v5);
    uint64_t v8 = *(WebCore::IDBClient::IDBConnectionProxy **)(v5 + 24);
    *(void *)(v5 + 24) = 0;
    if (v8)
    {
      WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v8, v4);
      MEMORY[0x1E4E48CF0]();
    }
    uint64_t v9 = *(unsigned int **)(v5 + 8);
    *(void *)(v5 + 8) = 0;
    if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v4);
      MEMORY[0x1E4E48E80](v5);
    }
    else
    {
      MEMORY[0x1E4E48E80](v5);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)this + 6, 1u);
  WTF::String::isolatedCopy();
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1F3C78A28;
  v6[1] = this;
  v6[2] = this;
  v6[3] = v11;
  uint64_t v12 = v6;
  (*(void (**)(void, void **))(**((void **)this + 7) + 32))(*((void *)this + 7), &v12);
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
}

unsigned int *InProcessIDBServer::deleteDatabase(atomic_uint *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v17 = this;
  unint64_t v18 = (InProcessIDBServer *)this;
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBOpenRequestData::isolatedCopy((uint64_t *)&v19, a2);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v3 = &unk_1F3C78A78;
  *(void *)(v3 + 8) = v17;
  *(void *)(v3 + 16) = v18;
  long long v4 = v19;
  *(void *)(v3 + 40) = v20;
  *(_OWORD *)(v3 + 24) = v4;
  uint64_t v5 = v21;
  unint64_t v18 = 0;
  uint64_t v21 = 0;
  *(void *)(v3 + 48) = v5;
  *(unsigned char *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 80) = -1;
  int v6 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78A90[v23])(&v15, v3 + 56, v22);
    *(_DWORD *)(v3 + 80) = v6;
  }
  *(unsigned char *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 112) = -1;
  int v7 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78A90[v25])(&v15);
    *(_DWORD *)(v3 + 112) = v7;
  }
  *(unsigned char *)(v3 + 120) = v26;
  char v8 = v28;
  *(void *)(v3 + 128) = v27;
  *(unsigned char *)(v3 + 136) = v8;
  uint64_t v15 = v3;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v15);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78930[v25])(&v16, &v24);
  }
  int v25 = -1;
  if (v23 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78930[v23])(&v16, v22);
  }
  int v23 = -1;
  double v11 = v21;
  uint64_t v21 = 0;
  if (!v11)
  {
LABEL_14:
    uint64_t result = (unsigned int *)v18;
    unint64_t v18 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t result = (unsigned int *)v18;
  unint64_t v18 = 0;
  if (!result) {
    return result;
  }
LABEL_17:
  if (atomic_fetch_add((atomic_uint *volatile)result + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
    return (unsigned int *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t InProcessIDBServer::didDeleteDatabase(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78AB0;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didDeleteDatabase(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteDatabase(this - 4, a2);
}

unsigned int *InProcessIDBServer::openDatabase(atomic_uint *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v17 = this;
  long long v18 = (InProcessIDBServer *)this;
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBOpenRequestData::isolatedCopy((uint64_t *)&v19, a2);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v3 = &unk_1F3C78AD8;
  *(void *)(v3 + 8) = v17;
  *(void *)(v3 + 16) = v18;
  long long v4 = v19;
  *(void *)(v3 + 40) = v20;
  *(_OWORD *)(v3 + 24) = v4;
  uint64_t v5 = v21;
  long long v18 = 0;
  uint64_t v21 = 0;
  *(void *)(v3 + 48) = v5;
  *(unsigned char *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 80) = -1;
  int v6 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78A90[v23])(&v15, v3 + 56, v22);
    *(_DWORD *)(v3 + 80) = v6;
  }
  *(unsigned char *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 112) = -1;
  int v7 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78A90[v25])(&v15);
    *(_DWORD *)(v3 + 112) = v7;
  }
  *(unsigned char *)(v3 + 120) = v26;
  char v8 = v28;
  *(void *)(v3 + 128) = v27;
  *(unsigned char *)(v3 + 136) = v8;
  uint64_t v15 = v3;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v15);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78930[v25])(&v16, &v24);
  }
  int v25 = -1;
  if (v23 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78930[v23])(&v16, v22);
  }
  int v23 = -1;
  double v11 = v21;
  uint64_t v21 = 0;
  if (!v11)
  {
LABEL_14:
    uint64_t result = (unsigned int *)v18;
    long long v18 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t result = (unsigned int *)v18;
  long long v18 = 0;
  if (!result) {
    return result;
  }
LABEL_17:
  if (atomic_fetch_add((atomic_uint *volatile)result + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
    return (unsigned int *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t InProcessIDBServer::didOpenDatabase(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78B00;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didOpenDatabase(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didOpenDatabase(this - 4, a2);
}

uint64_t InProcessIDBServer::didAbortTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *this)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  *(void *)&long long v8 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  *((void *)&v8 + 1) = v2;
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v3);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v4 = &unk_1F3C78B28;
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 24) = v8;
  *(_WORD *)(v4 + 40) = v9;
  *(void *)(v4 + 48) = v10;
  uint64_t v12 = v4;
  WTF::callOnMainThread();
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didAbortTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *a2)
{
  return InProcessIDBServer::didAbortTransaction(a1 - 16, a2);
}

uint64_t InProcessIDBServer::didCommitTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *this)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  *(void *)&long long v8 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  *((void *)&v8 + 1) = v2;
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v3);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v4 = &unk_1F3C78B50;
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 24) = v8;
  *(_WORD *)(v4 + 40) = v9;
  *(void *)(v4 + 48) = v10;
  uint64_t v12 = v4;
  WTF::callOnMainThread();
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didCommitTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *a2)
{
  return InProcessIDBServer::didCommitTransaction(a1 - 16, a2);
}

uint64_t InProcessIDBServer::didCreateObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78B78;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didCreateObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didCreateObjectStore(this - 4, a2);
}

uint64_t InProcessIDBServer::didDeleteObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78BA0;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didDeleteObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteObjectStore(this - 4, a2);
}

uint64_t InProcessIDBServer::didRenameObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78BC8;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didRenameObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didRenameObjectStore(this - 4, a2);
}

uint64_t InProcessIDBServer::didClearObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78BF0;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didClearObjectStore(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didClearObjectStore(this - 4, a2);
}

uint64_t InProcessIDBServer::didCreateIndex(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78C18;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didCreateIndex(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didCreateIndex(this - 4, a2);
}

uint64_t InProcessIDBServer::didDeleteIndex(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78C40;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didDeleteIndex(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteIndex(this - 4, a2);
}

uint64_t InProcessIDBServer::didRenameIndex(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78C68;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didRenameIndex(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didRenameIndex(this - 4, a2);
}

uint64_t InProcessIDBServer::didPutOrAdd(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78C90;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didPutOrAdd(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didPutOrAdd(this - 4, a2);
}

uint64_t InProcessIDBServer::didGetRecord(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78CB8;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didGetRecord(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didGetRecord(this - 4, a2);
}

uint64_t InProcessIDBServer::didGetAllRecords(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78CE0;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didGetAllRecords(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didGetAllRecords(this - 4, a2);
}

uint64_t InProcessIDBServer::didGetCount(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78D08;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didGetCount(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didGetCount(this - 4, a2);
}

uint64_t InProcessIDBServer::didDeleteRecord(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78D30;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didDeleteRecord(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteRecord(this - 4, a2);
}

uint64_t InProcessIDBServer::didOpenCursor(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78D58;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didOpenCursor(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didOpenCursor(this - 4, a2);
}

uint64_t InProcessIDBServer::didIterateCursor(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBResultData::isolatedCopy((uint64_t *)&v13, a2);
  uint64_t v2 = WTF::fastMalloc((WTF *)0x80);
  *(void *)uint64_t v2 = &unk_1F3C78D80;
  *(void *)(v2 + 8) = this;
  *(void *)(v2 + 16) = this;
  long long v3 = v13;
  *(void *)(v2 + 40) = v14;
  *(_OWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 48) = v15;
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  *(void *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 64) = v17;
  *(void *)(v2 + 80) = v18;
  uint64_t v5 = *((void *)&v18 + 1);
  long long v18 = 0u;
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = v19;
  uint64_t v6 = *((void *)&v19 + 1);
  long long v19 = 0u;
  *(void *)(v2 + 104) = v6;
  uint64_t v7 = v20;
  uint64_t v20 = 0;
  *(void *)(v2 + 112) = v7;
  *(void *)(v2 + 120) = v21;
  uint64_t v22 = v2;
  WTF::callOnMainThread();
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13, v8);
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didIterateCursor(atomic_uint *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didIterateCursor(this - 4, a2);
}

uint64_t InProcessIDBServer::abortTransaction(atomic_uint *this, const WebCore::IDBResourceIdentifier *a2)
{
  atomic_fetch_add(this + 6, 1u);
  uint64_t v3 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  uint64_t v5 = v4;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v6 = &unk_1F3C78DA8;
  v6[1] = this;
  v6[2] = this;
  v6[3] = v3;
  v6[4] = v5;
  uint64_t v8 = (uint64_t)v6;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t InProcessIDBServer::commitTransaction(atomic_uint *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3)
{
  atomic_fetch_add(this + 6, 1u);
  uint64_t v5 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v8 = &unk_1F3C78DD0;
  v8[1] = this;
  v8[2] = this;
  v8[3] = v5;
  v8[4] = v7;
  v8[5] = a3;
  uint64_t v10 = (uint64_t)v8;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t InProcessIDBServer::didFinishHandlingVersionChangeTransaction(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v5 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v8 = &unk_1F3C78DF8;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v5;
  v8[5] = v7;
  uint64_t v10 = (uint64_t)v8;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t InProcessIDBServer::createObjectStore(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v19, a2);
  WebCore::IDBObjectStoreInfo::isolatedCopy();
  uint64_t v4 = WTF::fastMalloc((WTF *)0xC0);
  uint64_t v5 = v4;
  *(void *)uint64_t v4 = &unk_1F3C78E20;
  *(void *)(v4 + 8) = this;
  *(void *)(v4 + 16) = this;
  long long v7 = v19[1];
  long long v6 = v19[2];
  *(_OWORD *)(v4 + 24) = v19[0];
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 40) = v7;
  long long v8 = v19[3];
  long long v9 = v19[4];
  long long v10 = v19[5];
  *(void *)(v4 + 120) = v20;
  *(_OWORD *)(v4 + 104) = v10;
  *(_OWORD *)(v4 + 88) = v9;
  *(_OWORD *)(v4 + 72) = v8;
  *(void *)(v4 + 128) = v21;
  uint64_t v11 = v22;
  uint64_t v22 = 0;
  *(void *)(v4 + 136) = v11;
  *(unsigned char *)(v4 + 144) = 0;
  *(unsigned char *)(v4 + 168) = 0;
  if (v25)
  {
    *(_DWORD *)(v4 + 160) = -1;
    int v12 = v24;
    if (v24 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t *))off_1F3C78E38[v24])(&v28, v4 + 144, &v23);
      *(_DWORD *)(v5 + 160) = v12;
    }
    *(unsigned char *)(v5 + 168) = 1;
  }
  *(unsigned char *)(v5 + 176) = v26;
  uint64_t v13 = v27;
  uint64_t v27 = 0;
  *(void *)(v5 + 184) = v13;
  uint64_t v28 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v28);
  uint64_t v15 = v28;
  uint64_t v28 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v21, v14);
  return 0;
}

uint64_t InProcessIDBServer::deleteObjectStore(atomic_uint *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v17, a2);
  WTF::String::isolatedCopy();
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  *(void *)uint64_t v4 = &unk_1F3C78E58;
  *(void *)(v4 + 8) = this;
  *(void *)(v4 + 16) = this;
  long long v5 = v17[2];
  long long v6 = v17[1];
  *(_OWORD *)(v4 + 24) = v17[0];
  *(_OWORD *)(v4 + 56) = v5;
  *(_OWORD *)(v4 + 40) = v6;
  long long v7 = v17[3];
  long long v8 = v17[4];
  uint64_t v9 = v18;
  *(_OWORD *)(v4 + 104) = v17[5];
  *(void *)(v4 + 120) = v9;
  *(_OWORD *)(v4 + 88) = v8;
  *(_OWORD *)(v4 + 72) = v7;
  long long v10 = v19;
  long long v19 = 0;
  *(void *)(v4 + 128) = v10;
  uint64_t v20 = v4;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v20);
  uint64_t v12 = v20;
  uint64_t v20 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v19;
  long long v19 = 0;
  if (!v13) {
    return 0;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    return 0;
  }
  WTF::StringImpl::destroy(v13, v11);
  return 0;
}

uint64_t InProcessIDBServer::renameObjectStore(uint64_t a1, WebCore::IDBRequestData *this, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, this);
  *((void *)&v19 + 1) = a3;
  WTF::String::isolatedCopy();
  uint64_t v5 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v5 = &unk_1F3C78E80;
  *(void *)(v5 + 8) = a1;
  *(void *)(v5 + 16) = a1;
  long long v6 = v18[3];
  long long v7 = v18[4];
  long long v8 = v18[5];
  *(_OWORD *)(v5 + 120) = v19;
  *(_OWORD *)(v5 + 104) = v8;
  *(_OWORD *)(v5 + 88) = v7;
  *(_OWORD *)(v5 + 72) = v6;
  long long v9 = v18[0];
  long long v10 = v18[1];
  *(_OWORD *)(v5 + 56) = v18[2];
  *(_OWORD *)(v5 + 40) = v10;
  *(_OWORD *)(v5 + 24) = v9;
  uint64_t v11 = v20;
  uint64_t v20 = 0;
  *(void *)(v5 + 136) = v11;
  uint64_t v21 = v5;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v21);
  uint64_t v13 = v21;
  uint64_t v21 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v20;
  uint64_t v20 = 0;
  if (!v14) {
    return 0;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    return 0;
  }
  WTF::StringImpl::destroy(v14, v12);
  return 0;
}

uint64_t InProcessIDBServer::clearObjectStore(uint64_t a1, WebCore::IDBRequestData *this, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v15, this);
  *((void *)&v16 + 1) = a3;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x88);
  *(void *)uint64_t v5 = &unk_1F3C78EA8;
  *(void *)(v5 + 8) = a1;
  *(void *)(v5 + 16) = a1;
  long long v6 = v15[3];
  long long v7 = v15[4];
  long long v8 = v15[5];
  *(_OWORD *)(v5 + 120) = v16;
  *(_OWORD *)(v5 + 104) = v8;
  *(_OWORD *)(v5 + 88) = v7;
  *(_OWORD *)(v5 + 72) = v6;
  long long v9 = v15[2];
  long long v10 = v15[0];
  *(_OWORD *)(v5 + 40) = v15[1];
  *(_OWORD *)(v5 + 24) = v10;
  *(_OWORD *)(v5 + 56) = v9;
  uint64_t v17 = v5;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v17);
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return 0;
}

uint64_t InProcessIDBServer::createIndex(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, a2);
  WebCore::IDBIndexInfo::isolatedCopy();
  uint64_t v4 = WTF::fastMalloc((WTF *)0xB8);
  *(void *)uint64_t v4 = &unk_1F3C78ED0;
  *(void *)(v4 + 8) = this;
  *(void *)(v4 + 16) = this;
  long long v6 = v18[1];
  long long v5 = v18[2];
  *(_OWORD *)(v4 + 24) = v18[0];
  *(_OWORD *)(v4 + 56) = v5;
  *(_OWORD *)(v4 + 40) = v6;
  long long v7 = v18[3];
  long long v8 = v18[4];
  long long v9 = v18[5];
  *(void *)(v4 + 120) = v19;
  *(_OWORD *)(v4 + 104) = v9;
  *(_OWORD *)(v4 + 88) = v8;
  *(_OWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 128) = v20;
  long long v10 = v21;
  uint64_t v21 = 0;
  *(void *)(v4 + 144) = v10;
  *(unsigned char *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 168) = -1;
  int v11 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78E38[v23])(&v25, v4 + 152, v22);
    *(_DWORD *)(v4 + 168) = v11;
  }
  *(_WORD *)(v4 + 176) = v24;
  uint64_t v25 = v4;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v25);
  uint64_t v13 = v25;
  uint64_t v25 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (v23 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78940[v23])(&v26, v22);
  }
  int v23 = -1;
  uint64_t v14 = v21;
  uint64_t v21 = 0;
  if (!v14) {
    return 0;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    return 0;
  }
  WTF::StringImpl::destroy(v14, v12);
  return 0;
}

uint64_t InProcessIDBServer::deleteIndex(uint64_t a1, WebCore::IDBRequestData *this, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, this);
  *((void *)&v19 + 1) = a3;
  WTF::String::isolatedCopy();
  uint64_t v5 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v5 = &unk_1F3C78EF8;
  *(void *)(v5 + 8) = a1;
  *(void *)(v5 + 16) = a1;
  long long v6 = v18[3];
  long long v7 = v18[4];
  long long v8 = v18[5];
  *(_OWORD *)(v5 + 120) = v19;
  *(_OWORD *)(v5 + 104) = v8;
  *(_OWORD *)(v5 + 88) = v7;
  *(_OWORD *)(v5 + 72) = v6;
  long long v9 = v18[0];
  long long v10 = v18[1];
  *(_OWORD *)(v5 + 56) = v18[2];
  *(_OWORD *)(v5 + 40) = v10;
  *(_OWORD *)(v5 + 24) = v9;
  int v11 = v20;
  long long v20 = 0;
  *(void *)(v5 + 136) = v11;
  uint64_t v21 = v5;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v21);
  uint64_t v13 = v21;
  uint64_t v21 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v20;
  long long v20 = 0;
  if (!v14) {
    return 0;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    return 0;
  }
  WTF::StringImpl::destroy(v14, v12);
  return 0;
}

uint64_t InProcessIDBServer::renameIndex(uint64_t a1, WebCore::IDBRequestData *this, uint64_t a3, uint64_t a4)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v21, this);
  *((void *)&v22 + 1) = a3;
  uint64_t v23 = a4;
  WTF::String::isolatedCopy();
  uint64_t v7 = WTF::fastMalloc((WTF *)0x98);
  *(void *)uint64_t v7 = &unk_1F3C78F20;
  *(void *)(v7 + 8) = a1;
  *(void *)(v7 + 16) = a1;
  long long v8 = v21[3];
  long long v9 = v21[2];
  long long v10 = v21[1];
  *(_OWORD *)(v7 + 24) = v21[0];
  *(_OWORD *)(v7 + 40) = v10;
  *(_OWORD *)(v7 + 56) = v9;
  *(_OWORD *)(v7 + 72) = v8;
  long long v11 = v21[4];
  long long v12 = v21[5];
  uint64_t v13 = v23;
  *(_OWORD *)(v7 + 120) = v22;
  *(void *)(v7 + 136) = v13;
  *(_OWORD *)(v7 + 104) = v12;
  *(_OWORD *)(v7 + 88) = v11;
  uint64_t v14 = v24;
  __int16 v24 = 0;
  *(void *)(v7 + 144) = v14;
  uint64_t v25 = v7;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v25);
  uint64_t v16 = v25;
  uint64_t v25 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v24;
  __int16 v24 = 0;
  if (!v17) {
    return 0;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    return 0;
  }
  WTF::StringImpl::destroy(v17, v15);
  return 0;
}

uint64_t InProcessIDBServer::putOrAdd(uint64_t a1, WebCore::IDBRequestData *this, WebCore::IDBKeyData *a3, WebCore::IDBValue *a4, char a5)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v25, this);
  WebCore::IDBKeyData::isolatedCopy(&v27, a3);
  WebCore::IDBValue::isolatedCopy(&v30, a4);
  char v35 = a5;
  uint64_t v9 = WTF::fastMalloc((WTF *)0xD0);
  *(void *)uint64_t v9 = &unk_1F3C78F48;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a1;
  long long v10 = v25[2];
  long long v11 = v25[1];
  *(_OWORD *)(v9 + 24) = v25[0];
  *(_OWORD *)(v9 + 56) = v10;
  *(_OWORD *)(v9 + 40) = v11;
  long long v12 = v25[3];
  long long v13 = v25[4];
  long long v14 = v25[5];
  *(void *)(v9 + 120) = v26;
  *(_OWORD *)(v9 + 104) = v14;
  *(_OWORD *)(v9 + 88) = v13;
  *(_OWORD *)(v9 + 72) = v12;
  *(unsigned char *)(v9 + 128) = v27;
  *(unsigned char *)(v9 + 136) = 0;
  *(_DWORD *)(v9 + 152) = -1;
  int v15 = v29;
  if (v29 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v29])(&v36, v9 + 136, v28);
    *(_DWORD *)(v9 + 152) = v15;
  }
  *(void *)(v9 + 160) = v30;
  uint64_t v16 = v31;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  *(void *)(v9 + 168) = v16;
  uint64_t v17 = v32;
  uint64_t v32 = 0;
  *(void *)(v9 + 176) = v17;
  uint64_t v18 = v33;
  uint64_t v33 = 0;
  *(void *)(v9 + 184) = v18;
  uint64_t v19 = v34;
  uint64_t v34 = 0;
  *(void *)(v9 + 192) = v19;
  *(unsigned char *)(v9 + 200) = v35;
  uint64_t v36 = v9;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v36);
  uint64_t v21 = v36;
  uint64_t v36 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v30, v20);
  if (v29 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v29])(&v37, v28);
  }
  return 0;
}

uint64_t InProcessIDBServer::getRecord(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetRecordData *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, a2);
  WebCore::IDBGetRecordData::isolatedCopy(&v20, a3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0xD0);
  *(void *)uint64_t v5 = &unk_1F3C78FB8;
  *(void *)(v5 + 8) = this;
  *(void *)(v5 + 16) = this;
  long long v6 = v18[2];
  long long v7 = v18[1];
  *(_OWORD *)(v5 + 24) = v18[0];
  *(_OWORD *)(v5 + 56) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  long long v8 = v18[3];
  long long v9 = v18[4];
  long long v10 = v18[5];
  *(void *)(v5 + 120) = v19;
  *(_OWORD *)(v5 + 104) = v10;
  *(_OWORD *)(v5 + 88) = v9;
  *(_OWORD *)(v5 + 72) = v8;
  *(unsigned char *)(v5 + 128) = v20;
  *(unsigned char *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 152) = -1;
  int v11 = v22;
  if (v22 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v22])(&v28, v5 + 136, v21);
    *(_DWORD *)(v5 + 152) = v11;
  }
  char v12 = v23;
  *(unsigned char *)(v5 + 168) = 0;
  *(unsigned char *)(v5 + 160) = v12;
  *(_DWORD *)(v5 + 184) = -1;
  int v13 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78F60[v25])(&v28);
    *(_DWORD *)(v5 + 184) = v13;
  }
  *(_WORD *)(v5 + 192) = v26;
  *(unsigned char *)(v5 + 200) = v27;
  uint64_t v28 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v28);
  uint64_t v14 = v28;
  uint64_t v28 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78950[v25])(&v29, &v24);
  }
  int v25 = -1;
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v22])(&v29, v21);
  }
  return 0;
}

uint64_t InProcessIDBServer::getAllRecords(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetAllRecordsData *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v19, a2);
  WebCore::IDBGetAllRecordsData::isolatedCopy(&v21, a3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0xE8);
  *(void *)uint64_t v5 = &unk_1F3C78FE0;
  *(void *)(v5 + 8) = this;
  *(void *)(v5 + 16) = this;
  long long v7 = v19[1];
  long long v6 = v19[2];
  *(_OWORD *)(v5 + 24) = v19[0];
  *(_OWORD *)(v5 + 56) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  long long v8 = v19[3];
  long long v9 = v19[4];
  long long v10 = v19[5];
  *(void *)(v5 + 120) = v20;
  *(_OWORD *)(v5 + 104) = v10;
  *(_OWORD *)(v5 + 88) = v9;
  *(_OWORD *)(v5 + 72) = v8;
  *(unsigned char *)(v5 + 128) = v21;
  *(unsigned char *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 152) = -1;
  int v11 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v23])(&v30, v5 + 136, v22);
    *(_DWORD *)(v5 + 152) = v11;
  }
  char v12 = v24;
  *(unsigned char *)(v5 + 168) = 0;
  *(unsigned char *)(v5 + 160) = v12;
  *(_DWORD *)(v5 + 184) = -1;
  int v13 = v26;
  if (v26 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78F60[v26])(&v30);
    *(_DWORD *)(v5 + 184) = v13;
  }
  *(_WORD *)(v5 + 192) = v27;
  long long v14 = v29;
  *(_OWORD *)(v5 + 200) = v28;
  *(_OWORD *)(v5 + 216) = v14;
  uint64_t v30 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v30);
  uint64_t v15 = v30;
  uint64_t v30 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (v26 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78950[v26])(&v31, &v25);
  }
  int v26 = -1;
  if (v23 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v23])(&v31, v22);
  }
  return 0;
}

uint64_t InProcessIDBServer::getCount(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, a2);
  WebCore::IDBKeyRangeData::isolatedCopy(&v20, a3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0xC8);
  *(void *)uint64_t v5 = &unk_1F3C79008;
  *(void *)(v5 + 8) = this;
  *(void *)(v5 + 16) = this;
  long long v7 = v18[1];
  long long v6 = v18[2];
  *(_OWORD *)(v5 + 24) = v18[0];
  *(_OWORD *)(v5 + 56) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  long long v8 = v18[3];
  long long v9 = v18[4];
  long long v10 = v18[5];
  *(void *)(v5 + 120) = v19;
  *(_OWORD *)(v5 + 104) = v10;
  *(_OWORD *)(v5 + 88) = v9;
  *(_OWORD *)(v5 + 72) = v8;
  *(unsigned char *)(v5 + 128) = v20;
  *(unsigned char *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 152) = -1;
  int v11 = v22;
  if (v22 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v22])(&v27, v5 + 136, v21);
    *(_DWORD *)(v5 + 152) = v11;
  }
  char v12 = v23;
  *(unsigned char *)(v5 + 168) = 0;
  *(unsigned char *)(v5 + 160) = v12;
  *(_DWORD *)(v5 + 184) = -1;
  int v13 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78F60[v25])(&v27);
    *(_DWORD *)(v5 + 184) = v13;
  }
  *(_WORD *)(v5 + 192) = v26;
  uint64_t v27 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v27);
  uint64_t v14 = v27;
  uint64_t v27 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78950[v25])(&v28, &v24);
  }
  int v25 = -1;
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v22])(&v28, v21);
  }
  return 0;
}

uint64_t InProcessIDBServer::deleteRecord(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, a2);
  WebCore::IDBKeyRangeData::isolatedCopy(&v20, a3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0xC8);
  *(void *)uint64_t v5 = &unk_1F3C79030;
  *(void *)(v5 + 8) = this;
  *(void *)(v5 + 16) = this;
  long long v7 = v18[1];
  long long v6 = v18[2];
  *(_OWORD *)(v5 + 24) = v18[0];
  *(_OWORD *)(v5 + 56) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  long long v8 = v18[3];
  long long v9 = v18[4];
  long long v10 = v18[5];
  *(void *)(v5 + 120) = v19;
  *(_OWORD *)(v5 + 104) = v10;
  *(_OWORD *)(v5 + 88) = v9;
  *(_OWORD *)(v5 + 72) = v8;
  *(unsigned char *)(v5 + 128) = v20;
  *(unsigned char *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 152) = -1;
  int v11 = v22;
  if (v22 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v22])(&v27, v5 + 136, v21);
    *(_DWORD *)(v5 + 152) = v11;
  }
  char v12 = v23;
  *(unsigned char *)(v5 + 168) = 0;
  *(unsigned char *)(v5 + 160) = v12;
  *(_DWORD *)(v5 + 184) = -1;
  int v13 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78F60[v25])(&v27);
    *(_DWORD *)(v5 + 184) = v13;
  }
  *(_WORD *)(v5 + 192) = v26;
  uint64_t v27 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v27);
  uint64_t v14 = v27;
  uint64_t v27 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78950[v25])(&v28, &v24);
  }
  int v25 = -1;
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v22])(&v28, v21);
  }
  return 0;
}

uint64_t InProcessIDBServer::openCursor(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBCursorInfo *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v20, a2);
  WebCore::IDBCursorInfo::isolatedCopy((uint64_t *)v22, a3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x100);
  *(void *)uint64_t v5 = &unk_1F3C79058;
  *(void *)(v5 + 8) = this;
  *(void *)(v5 + 16) = this;
  long long v6 = v20[2];
  long long v7 = v20[1];
  *(_OWORD *)(v5 + 24) = v20[0];
  *(_OWORD *)(v5 + 56) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  long long v8 = v20[3];
  long long v9 = v20[4];
  long long v10 = v20[5];
  *(void *)(v5 + 120) = v21;
  *(_OWORD *)(v5 + 104) = v10;
  *(_OWORD *)(v5 + 88) = v9;
  *(_OWORD *)(v5 + 72) = v8;
  long long v11 = v22[0];
  long long v12 = v22[2];
  *(_OWORD *)(v5 + 144) = v22[1];
  *(_OWORD *)(v5 + 160) = v12;
  *(_OWORD *)(v5 + 128) = v11;
  *(unsigned char *)(v5 + 176) = v23;
  *(unsigned char *)(v5 + 184) = 0;
  *(_DWORD *)(v5 + 200) = -1;
  int v13 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v25])(&v32, v5 + 184, v24);
    *(_DWORD *)(v5 + 200) = v13;
  }
  char v14 = v26;
  *(unsigned char *)(v5 + 216) = 0;
  *(unsigned char *)(v5 + 208) = v14;
  *(_DWORD *)(v5 + 232) = -1;
  int v15 = v28;
  if (v28 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78F60[v28])(&v32);
    *(_DWORD *)(v5 + 232) = v15;
  }
  *(_WORD *)(v5 + 240) = v29;
  *(_WORD *)(v5 + 248) = v30;
  *(unsigned char *)(v5 + 250) = v31;
  uint64_t v32 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v32);
  uint64_t v16 = v32;
  uint64_t v32 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (v28 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78950[v28])(&v33, &v27);
  }
  int v28 = -1;
  if (v25 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v25])(&v33, v24);
  }
  return 0;
}

uint64_t InProcessIDBServer::iterateCursor(atomic_uint *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIterateCursorData *a3)
{
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBRequestData::isolatedCopy((uint64_t *)v18, a2);
  WebCore::IDBIterateCursorData::isolatedCopy(&v20, a3);
  uint64_t v5 = WTF::fastMalloc((WTF *)0xC8);
  *(void *)uint64_t v5 = &unk_1F3C79080;
  *(void *)(v5 + 8) = this;
  *(void *)(v5 + 16) = this;
  long long v7 = v18[1];
  long long v6 = v18[2];
  *(_OWORD *)(v5 + 24) = v18[0];
  *(_OWORD *)(v5 + 56) = v6;
  *(_OWORD *)(v5 + 40) = v7;
  long long v8 = v18[3];
  long long v9 = v18[4];
  long long v10 = v18[5];
  *(void *)(v5 + 120) = v19;
  *(_OWORD *)(v5 + 104) = v10;
  *(_OWORD *)(v5 + 88) = v9;
  *(_OWORD *)(v5 + 72) = v8;
  *(unsigned char *)(v5 + 128) = v20;
  *(unsigned char *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 152) = -1;
  int v11 = v22;
  if (v22 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78F60[v22])(&v28, v5 + 136, v21);
    *(_DWORD *)(v5 + 152) = v11;
  }
  char v12 = v23;
  *(unsigned char *)(v5 + 168) = 0;
  *(unsigned char *)(v5 + 160) = v12;
  *(_DWORD *)(v5 + 184) = -1;
  int v13 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78F60[v25])(&v28);
    *(_DWORD *)(v5 + 184) = v13;
  }
  *(_DWORD *)(v5 + 192) = v26;
  *(unsigned char *)(v5 + 196) = v27;
  uint64_t v28 = v5;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v28);
  uint64_t v14 = v28;
  uint64_t v28 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78950[v25])(&v29, &v24);
  }
  int v25 = -1;
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78950[v22])(&v29, v21);
  }
  return 0;
}

uint64_t InProcessIDBServer::establishTransaction(uint64_t a1, uint64_t a2, WebCore::IDBTransactionInfo *this)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  WebCore::IDBTransactionInfo::isolatedCopy((uint64_t *)v14, this);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  *(void *)uint64_t v4 = &unk_1F3C790A8;
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  long long v5 = v14[1];
  *(_OWORD *)(v4 + 32) = v14[0];
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 64) = v15;
  uint64_t v6 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  *(void *)(v4 + 72) = v6;
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  *(void *)(v4 + 80) = v7;
  uint64_t v18 = v4;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v18);
  uint64_t v9 = v18;
  uint64_t v18 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)v14, v8);
  return 0;
}

uint64_t InProcessIDBServer::fireVersionChangeEvent(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this, uint64_t a4)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  uint64_t v9 = v8;
  long long v10 = (void *)WTF::fastMalloc((WTF *)0x38);
  *long long v10 = &unk_1F3C790D0;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v9;
  v10[6] = a4;
  uint64_t v12 = (uint64_t)v10;
  WTF::callOnMainThread();
  uint64_t result = v12;
  if (v12) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return result;
}

uint64_t non-virtual thunk to'InProcessIDBServer::fireVersionChangeEvent(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this, uint64_t a4)
{
  uint64_t v5 = a1 - 16;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  uint64_t v9 = v8;
  long long v10 = (void *)WTF::fastMalloc((WTF *)0x38);
  *long long v10 = &unk_1F3C790D0;
  v10[1] = v5;
  v10[2] = v5;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v9;
  v10[6] = a4;
  uint64_t v12 = (uint64_t)v10;
  WTF::callOnMainThread();
  uint64_t result = v12;
  if (v12) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return result;
}

uint64_t InProcessIDBServer::didStartTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *this)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  *(void *)&long long v8 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  *((void *)&v8 + 1) = v2;
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v3);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v4 = &unk_1F3C790F8;
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 24) = v8;
  *(_WORD *)(v4 + 40) = v9;
  *(void *)(v4 + 48) = v10;
  uint64_t v12 = v4;
  WTF::callOnMainThread();
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didStartTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *a2)
{
  return InProcessIDBServer::didStartTransaction(a1 - 16, a2);
}

uint64_t InProcessIDBServer::didCloseFromServer(uint64_t a1, uint64_t a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v7 = *(void *)(a2 + 8);
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v3 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v3 = &unk_1F3C79120;
  *(void *)(v3 + 8) = a1;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v7;
  *(_WORD *)(v3 + 32) = v8;
  *(void *)(v3 + 40) = v9;
  uint64_t v11 = v3;
  WTF::callOnMainThread();
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return 0;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didCloseFromServer(uint64_t a1, uint64_t a2)
{
  return InProcessIDBServer::didCloseFromServer(a1 - 16, a2);
}

uint64_t InProcessIDBServer::notifyOpenDBRequestBlocked(atomic_uint *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  atomic_fetch_add(this + 6, 1u);
  uint64_t v7 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  uint64_t v9 = v8;
  long long v10 = (void *)WTF::fastMalloc((WTF *)0x38);
  *long long v10 = &unk_1F3C79148;
  v10[1] = this;
  v10[2] = this;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a3;
  v10[6] = a4;
  uint64_t v12 = (uint64_t)v10;
  WTF::callOnMainThread();
  uint64_t result = v12;
  if (v12) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return result;
}

uint64_t non-virtual thunk to'InProcessIDBServer::notifyOpenDBRequestBlocked(atomic_uint *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = this - 4;
  atomic_fetch_add(this + 2, 1u);
  uint64_t v7 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  uint64_t v9 = v8;
  long long v10 = (void *)WTF::fastMalloc((WTF *)0x38);
  *long long v10 = &unk_1F3C79148;
  v10[1] = v6;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a3;
  v10[6] = a4;
  uint64_t v12 = (uint64_t)v10;
  WTF::callOnMainThread();
  uint64_t result = v12;
  if (v12) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return result;
}

uint64_t InProcessIDBServer::databaseConnectionPendingClose(uint64_t a1, uint64_t a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1F3C79170;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v6 = v4;
  (*(void (**)(void, void **))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t InProcessIDBServer::databaseConnectionClosed(uint64_t a1, uint64_t a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1F3C79198;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v6 = v4;
  (*(void (**)(void, void **))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t InProcessIDBServer::abortOpenAndUpgradeNeeded(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v6 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
    uint64_t v3 = v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v6 = 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v9 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v9 = &unk_1F3C791C0;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v3;
  *(unsigned char *)(v9 + 48) = v8;
  uint64_t v11 = v9;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v11);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t InProcessIDBServer::didFireVersionChangeEvent(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this, char a4)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  uint64_t v7 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  uint64_t v9 = v8;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v10 = &unk_1F3C791E8;
  *(void *)(v10 + 8) = a1;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;
  *(unsigned char *)(v10 + 48) = a4;
  uint64_t v12 = v10;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v12);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned int *InProcessIDBServer::openDBRequestCancelled(atomic_uint *this, const WebCore::IDBOpenRequestData *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = this;
  uint64_t v18 = (InProcessIDBServer *)this;
  atomic_fetch_add(this + 6, 1u);
  WebCore::IDBOpenRequestData::isolatedCopy((uint64_t *)&v19, a2);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v3 = &unk_1F3C79210;
  *(void *)(v3 + 8) = v17;
  *(void *)(v3 + 16) = v18;
  long long v4 = v19;
  *(void *)(v3 + 40) = v20;
  *(_OWORD *)(v3 + 24) = v4;
  uint64_t v5 = v21;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  *(void *)(v3 + 48) = v5;
  *(unsigned char *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 80) = -1;
  int v6 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78A90[v23])(&v15, v3 + 56, v22);
    *(_DWORD *)(v3 + 80) = v6;
  }
  *(unsigned char *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 112) = -1;
  int v7 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78A90[v25])(&v15);
    *(_DWORD *)(v3 + 112) = v7;
  }
  *(unsigned char *)(v3 + 120) = v26;
  char v8 = v28;
  *(void *)(v3 + 128) = v27;
  *(unsigned char *)(v3 + 136) = v8;
  uint64_t v15 = v3;
  (*(void (**)(void, uint64_t *))(**((void **)this + 7) + 32))(*((void *)this + 7), &v15);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v25 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78930[v25])(&v16, &v24);
  }
  int v25 = -1;
  if (v23 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78930[v23])(&v16, v22);
  }
  int v23 = -1;
  uint64_t v11 = v21;
  uint64_t v21 = 0;
  if (!v11)
  {
LABEL_14:
    uint64_t result = (unsigned int *)v18;
    uint64_t v18 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t result = (unsigned int *)v18;
  uint64_t v18 = 0;
  if (!result) {
    return result;
  }
LABEL_17:
  if (atomic_fetch_add((atomic_uint *volatile)result + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
    return (unsigned int *)WTF::fastFree(v13, v14);
  }
  return result;
}

unsigned int *InProcessIDBServer::getAllDatabaseNamesAndVersions(uint64_t a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a1;
  char v16 = (InProcessIDBServer *)a1;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  *(void *)uint64_t v17 = WebCore::IDBClient::IDBConnectionToServer::identifier(*(WebCore::IDBClient::IDBConnectionToServer **)(a1 + 40));
  *(_OWORD *)&v17[8] = *a2;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  uint64_t v4 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v4 = &unk_1F3C79238;
  *(void *)(v4 + 8) = v15;
  uint64_t v5 = v16;
  char v16 = 0;
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)&v17[16];
  *(_OWORD *)(v4 + 24) = *(_OWORD *)v17;
  *(void *)(v4 + 40) = v6;
  *(unsigned char *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 72) = -1;
  int v7 = v19;
  if (v19 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1F3C78A90[v19])(&v13, v4 + 48, v18);
    *(_DWORD *)(v4 + 72) = v7;
  }
  *(unsigned char *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = -1;
  int v8 = v21;
  if (v21 != -1)
  {
    ((void (*)(uint64_t *))off_1F3C78A90[v21])(&v13);
    *(_DWORD *)(v4 + 104) = v8;
  }
  uint64_t v13 = v4;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), &v13);
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (v21 != -1) {
    ((void (*)(char *, uint64_t *))off_1F3C78930[v21])(&v14, &v20);
  }
  int v21 = -1;
  if (v19 != -1) {
    ((void (*)(char *, unsigned char *))off_1F3C78930[v19])(&v14, v18);
  }
  int v19 = -1;
  uint64_t result = (unsigned int *)v16;
  char v16 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
      return (unsigned int *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t InProcessIDBServer::didGetAllDatabaseNamesAndVersions(uint64_t a1, long long *a2, unint64_t *a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 24), 1u);
  long long v15 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *((unsigned int *)a3 + 3);
  if (v6)
  {
    unint64_t v7 = v5 + 16 * v6;
    do
    {
      WTF::String::isolatedCopy();
      uint64_t v9 = v16;
      uint64_t v16 = 0;
      uint64_t v18 = *(void *)(v5 + 8);
      uint64_t v10 = *(WTF::StringImpl **)v5;
      *(void *)unint64_t v5 = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v8);
          *(void *)(v5 + 8) = v18;
          uint64_t v16 = 0;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v5 += 16;
    }
    while (v5 < v7);
    unint64_t v5 = *a3;
    int v11 = *((_DWORD *)a3 + 3);
  }
  else
  {
    int v11 = 0;
  }
  int v12 = *((_DWORD *)a3 + 2);
  *a3 = 0;
  a3[1] = 0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v13 = &unk_1F3C79260;
  *(void *)(v13 + 8) = a1;
  *(void *)(v13 + 16) = a1;
  *(_OWORD *)(v13 + 24) = v15;
  *(void *)(v13 + 40) = v5;
  *(_DWORD *)(v13 + 48) = v12;
  *(_DWORD *)(v13 + 52) = v11;
  uint64_t v17 = v13;
  WTF::callOnMainThread();
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

uint64_t non-virtual thunk to'InProcessIDBServer::didGetAllDatabaseNamesAndVersions(uint64_t a1, long long *a2, unint64_t *a3)
{
  return InProcessIDBServer::didGetAllDatabaseNamesAndVersions(a1 - 16, a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, (StringImpl *)a2);
      uint64_t result = *(WTF::StringImpl **)a2;
      *(void *)a2 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (!result) {
    return result;
  }
LABEL_7:
  if (*(_DWORD *)result == 2)
  {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
  }
  else
  {
    *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::IDBResultData::~IDBResultData(WebCore::IDBResultData *this, StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3)
  {
    if (*(unsigned char *)(v3 + 64))
    {
      uint64_t v4 = *(unsigned int *)(v3 + 56);
      if (v4 != -1) {
        ((void (*)(char *, uint64_t))off_1F3C78940[v4])(&v37, v3 + 40);
      }
      *(_DWORD *)(v3 + 56) = -1;
    }
    uint64_t v5 = *(unsigned int *)(v3 + 36);
    if (v5)
    {
      uint64_t v6 = *(WebCore::IDBValue **)(v3 + 24);
      uint64_t v7 = 40 * v5;
      do
      {
        WebCore::IDBValue::~IDBValue(v6, a2);
        uint64_t v6 = (WebCore::IDBValue *)(v8 + 40);
        v7 -= 40;
      }
      while (v7);
    }
    uint64_t v9 = *(WTF **)(v3 + 24);
    if (v9)
    {
      *(void *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    uint64_t v10 = *(unsigned int *)(v3 + 20);
    int v11 = *(WTF **)(v3 + 8);
    if (v10)
    {
      uint64_t v12 = 32 * v10;
      uint64_t v13 = (_DWORD *)((char *)v11 + 24);
      do
      {
        uint64_t v14 = *v13;
        if (v14 != -1) {
          ((void (*)(char *, _DWORD *))off_1F3C78950[v14])(&v38, v13 - 4);
        }
        _DWORD *v13 = -1;
        v13 += 8;
        v12 -= 32;
      }
      while (v12);
      int v11 = *(WTF **)(v3 + 8);
    }
    if (v11)
    {
      *(void *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v11, a2);
    }
    MEMORY[0x1E4E45C80](v3);
  }
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v15)
  {
    unsigned int v16 = *(_DWORD *)(v15 + 148);
    if (v16)
    {
      uint64_t v17 = 104 * v16;
      uint64_t v18 = (WebCore::IDBValue *)(*(void *)(v15 + 136) + 64);
      do
      {
        WebCore::IDBValue::~IDBValue(v18, a2);
        uint64_t v19 = *((unsigned int *)v18 - 2);
        if (v19 != -1) {
          ((void (*)(char *, char *))off_1F3C78950[v19])(&v39, (char *)v18 - 24);
        }
        *((_DWORD *)v18 - 2) = -1;
        uint64_t v20 = *((unsigned int *)v18 - 10);
        if (v20 != -1) {
          ((void (*)(char *, char *))off_1F3C78950[v20])(&v40, (char *)v18 - 56);
        }
        *((_DWORD *)v18 - 10) = -1;
        uint64_t v18 = (WebCore::IDBValue *)((char *)v18 + 104);
        v17 -= 104;
      }
      while (v17);
    }
    int v21 = *(WTF **)(v15 + 136);
    if (v21)
    {
      *(void *)(v15 + 136) = 0;
      *(_DWORD *)(v15 + 144) = 0;
      WTF::fastFree(v21, a2);
    }
    if (*(unsigned char *)(v15 + 128))
    {
      uint64_t v22 = *(unsigned int *)(v15 + 120);
      if (v22 != -1) {
        ((void (*)(char *, uint64_t))off_1F3C78940[v22])(&v41, v15 + 104);
      }
      *(_DWORD *)(v15 + 120) = -1;
    }
    uint64_t v23 = *(unsigned int *)(v15 + 96);
    if (v23 != -1) {
      ((void (*)(char *, uint64_t))off_1F3C78950[v23])(&v42, v15 + 80);
    }
    *(_DWORD *)(v15 + 96) = -1;
    uint64_t v24 = *(unsigned int *)(v15 + 64);
    if (v24 != -1) {
      ((void (*)(char *, uint64_t))off_1F3C78950[v24])(&v43, v15 + 48);
    }
    *(_DWORD *)(v15 + 64) = -1;
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v15, a2);
    MEMORY[0x1E4E44D20]();
  }
  int v25 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v25)
  {
    uint64_t v26 = v25[6];
    if (v26 != -1) {
      ((void (*)(char *, unsigned int *))off_1F3C78950[v26])(&v36, v25 + 2);
    }
    _OWORD v25[6] = -1;
    WTF::fastFree((WTF *)v25, a2);
  }
  uint64_t v27 = (WebCore::IDBTransactionInfo *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v27)
  {
    WebCore::IDBTransactionInfo::~IDBTransactionInfo(v27, a2);
    WTF::fastFree(v28, v29);
  }
  uint64_t v30 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v30)
  {
    uint64_t v31 = *(void *)(v30 + 24);
    if (v31)
    {
      uint64_t v32 = *(unsigned int *)(v31 - 4);
      if (v32)
      {
        char v33 = (WebCore::IDBObjectStoreInfo *)(v31 + 8);
        do
        {
          if (*((void *)v33 - 1) != -1) {
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v33, a2);
          }
          char v33 = (WebCore::IDBObjectStoreInfo *)((char *)v33 + 72);
          --v32;
        }
        while (v32);
      }
      WTF::fastFree((WTF *)(v31 - 16), a2);
    }
    uint64_t v34 = *(WTF::StringImpl **)v30;
    *(void *)uint64_t v30 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, a2);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    MEMORY[0x1E4E45C70](v30);
  }
  char v35 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, a2);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF::StringImpl ***)a2;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, (StringImpl *)a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t result = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void WebCore::IDBValue::~IDBValue(WebCore::IDBValue *this, StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 9);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 3);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = (WTF *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((unsigned int *)this + 5);
  if (v8)
  {
    uint64_t v9 = (WTF::StringImpl **)*((void *)this + 1);
    uint64_t v10 = 8 * v8;
    do
    {
      int v11 = *v9;
      *uint64_t v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, a2);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (WTF *)*((void *)this + 1);
  if (v12)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v12, a2);
  }
  uint64_t v13 = *(void *)this;
  *(void *)this = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v13);
    uint64_t v14 = *(WTF **)(v13 + 8);
    if (v14)
    {
      *(void *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 16) = 0;
      WTF::fastFree(v14, a2);
    }
    WTF::fastFree((WTF *)v13, a2);
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3 = *((unsigned int *)a2 + 3);
  uint64_t result = *a2;
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    uint64_t v6 = (_DWORD *)((char *)result + 24);
    do
    {
      uint64_t v7 = *v6;
      if (v7 != -1) {
        ((void (*)(char *, _DWORD *))off_1F3C78950[v7])(&v8, v6 - 4);
      }
      _DWORD *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    uint64_t result = *a2;
  }
  if (result)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v2);
    uint64_t v3 = *(WTF **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    WTF::fastFree((WTF *)v2, a2);
  }
}

void WebCore::IDBTransactionInfo::~IDBTransactionInfo(WebCore::IDBTransactionInfo *this, StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 - 4);
      if (v5)
      {
        uint64_t v6 = (WebCore::IDBObjectStoreInfo *)(v4 + 8);
        do
        {
          if (*((void *)v6 - 1) != -1) {
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v6, a2);
          }
          uint64_t v6 = (WebCore::IDBObjectStoreInfo *)((char *)v6 + 72);
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    uint64_t v7 = *(WTF::StringImpl **)v3;
    *(void *)uint64_t v3 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    MEMORY[0x1E4E45C70](v3);
  }
  uint64_t v8 = *((unsigned int *)this + 11);
  if (v8)
  {
    uint64_t v9 = (WTF::StringImpl **)*((void *)this + 4);
    uint64_t v10 = 8 * v8;
    do
    {
      int v11 = *v9;
      *uint64_t v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, a2);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (WTF *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v12, a2);
  }
}

void WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(WebCore::IDBObjectStoreInfo *this, StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = v3 + 24;
      do
      {
        if (*(void *)(v5 - 24) != -1)
        {
          uint64_t v6 = *(unsigned int *)(v5 + 24);
          if (v6 != -1) {
            ((void (*)(char *, uint64_t))off_1F3C78940[v6])(&v10, v5 + 8);
          }
          *(_DWORD *)(v5 + 24) = -1;
          uint64_t v7 = *(WTF::StringImpl **)v5;
          *(void *)uint64_t v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        v5 += 64;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v8 = *((unsigned int *)this + 8);
    if (v8 != -1) {
      ((void (*)(char *, char *))off_1F3C78940[v8])(&v11, (char *)this + 16);
    }
    *((_DWORD *)this + 8) = -1;
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::~InProcessIDBServer()::$_0,void>::call(uint64_t a1, void *a2)
{
  char v3 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 28), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (!v3)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    *(void *)(v4 + 32) = 0;
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  MEMORY[0x1E4E44220](v4 + 28);
  uint64_t v5 = *(void *)(v4 + 32);
  *(void *)(v4 + 32) = 0;
  if (v5) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
LABEL_4:
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 28), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 == 1)
  {
    uint64_t v7 = *(WTF **)(v4 + 48);
    *(void *)(v4 + 48) = 0;
    if (!v7) {
      goto LABEL_8;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 28));
    uint64_t v7 = *(WTF **)(v4 + 48);
    *(void *)(v4 + 48) = 0;
    if (!v7)
    {
LABEL_8:
      uint64_t v8 = *(void *)(a1 + 16);
      return MEMORY[0x1F40EB3C0](v8);
    }
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_8;
  }
  uint64_t v9 = *((void *)v7 + 2);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  WTF::fastFree(v7, a2);
  uint64_t v8 = *(void *)(a1 + 16);
  return MEMORY[0x1F40EB3C0](v8);
}

void WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(WebCore::IDBClient::IDBConnectionProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v15 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v15)
    {
      WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v15);
      MEMORY[0x1E4E48CF0]();
    }
    unsigned int v16 = *(unsigned int **)(v3 + 8);
    *(void *)(v3 + 8) = 0;
    if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
    MEMORY[0x1E4E48E80](v3);
    unint64_t v4 = *((void *)this + 11);
    unint64_t v5 = *((void *)this + 12);
    int v6 = (WTF *)*((void *)this + 13);
    BOOL v7 = v4 == v5;
    if (v4 > v5) {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v4 = *((void *)this + 11);
    unint64_t v5 = *((void *)this + 12);
    int v6 = (WTF *)*((void *)this + 13);
    BOOL v7 = v4 == v5;
    if (v4 > v5)
    {
LABEL_4:
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        do
        {
          uint64_t v9 = *(void *)v6;
          *(void *)int v6 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
          }
          int v6 = (WTF *)((char *)v6 + 8);
          v8 -= 8;
        }
        while (v8);
        int v6 = (WTF *)*((void *)this + 13);
        unint64_t v4 = *((void *)this + 11);
      }
      uint64_t v10 = *((unsigned int *)this + 28);
      if (v4 != v10)
      {
        uint64_t v11 = 8 * v4;
        uint64_t v12 = (uint64_t *)((char *)v6 + v11);
        uint64_t v13 = 8 * v10 - v11;
        do
        {
          uint64_t v14 = *v12;
          uint64_t *v12 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
LABEL_11:
      int v6 = (WTF *)*((void *)this + 13);
      goto LABEL_24;
    }
  }
  if (!v7)
  {
    uint64_t v20 = 8 * v4;
    int v21 = (uint64_t *)((char *)v6 + v20);
    uint64_t v22 = 8 * v5 - v20;
    do
    {
      uint64_t v23 = *v21;
      uint64_t *v21 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
    goto LABEL_11;
  }
LABEL_24:
  if (v6)
  {
    *((void *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v6, a2);
  }
  uint64_t v17 = *((void *)this + 9);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
    if (v18)
    {
      uint64_t v19 = (uint64_t *)(v17 + 16);
      do
      {
        if (*(v19 - 2) != -1)
        {
          uint64_t v24 = *v19;
          uint64_t *v19 = 0;
          if (v24)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v24 + 36), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v24 + 36));
              uint64_t v25 = *(void *)(v24 + 64);
              *(void *)(v24 + 64) = 0;
              if (v25) {
                (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
              }
              uint64_t v26 = *(WebCore::IDBClient::IDBConnectionProxy **)(v24 + 40);
              *(void *)(v24 + 40) = 0;
              if (v26) {
                WebCore::IDBClient::IDBConnectionProxy::deref(v26);
              }
              *(void *)uint64_t v24 = &unk_1F3C789D0;
              uint64_t v27 = *(unsigned int **)(v24 + 24);
              *(void *)(v24 + 24) = 0;
              if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v27);
                WTF::Thread::~Thread((WTF::Thread *)v27);
                WTF::fastFree(v28, v29);
              }
              WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v24);
              MEMORY[0x1E4E47870]();
            }
          }
        }
        v19 += 3;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  uint64_t v30 = *((void *)this + 8);
  if (v30)
  {
    uint64_t v31 = *(unsigned int *)(v30 - 4);
    if (v31)
    {
      uint64_t v32 = (unsigned int **)(v30 + 16);
      do
      {
        if (*(v32 - 2) != (unsigned int *)-1)
        {
          char v33 = *v32;
          _DWORD *v32 = 0;
          if (v33)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v33 + 2);
              (*(void (**)(unsigned int *))(*(void *)v33 + 8))(v33);
            }
          }
        }
        v32 += 3;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v30 - 16), a2);
  }
  uint64_t v34 = *((void *)this + 7);
  if (v34)
  {
    uint64_t v35 = *(unsigned int *)(v34 - 4);
    if (v35)
    {
      char v36 = (uint64_t *)(v34 + 16);
      do
      {
        if (*(v36 - 2) != -1)
        {
          uint64_t v37 = *v36;
          *char v36 = 0;
          if (v37)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v37 + 24), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v37 + 24));
              uint64_t v38 = MEMORY[0x1E4E45530]();
              MEMORY[0x1E4E45540](v38);
            }
          }
        }
        v36 += 3;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v34 - 16), a2);
  }
  uint64_t v39 = *((void *)this + 6);
  if (v39)
  {
    uint64_t v40 = *(unsigned int *)(v39 - 4);
    if (v40)
    {
      char v41 = (uint64_t *)(v39 + 16);
      do
      {
        if (*(v41 - 2) != -1)
        {
          uint64_t v42 = *v41;
          uint64_t *v41 = 0;
          if (v42)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v42 + 24), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v42 + 24));
              uint64_t v43 = MEMORY[0x1E4E45530]();
              MEMORY[0x1E4E45540](v43);
            }
          }
        }
        v41 += 3;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v39 - 16), a2);
  }
  uint64_t v44 = *((void *)this + 5);
  if (v44)
  {
    uint64_t v45 = *(unsigned int *)(v44 - 4);
    if (v45)
    {
      uint16x8_t v46 = (uint64_t *)(v44 + 16);
      do
      {
        if (*(v46 - 2) != -1)
        {
          uint64_t v47 = *v46;
          *uint16x8_t v46 = 0;
          if (v47)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v47 + 24), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v47 + 24));
              uint64_t v48 = MEMORY[0x1E4E45530]();
              MEMORY[0x1E4E45540](v48);
            }
          }
        }
        v46 += 3;
        --v45;
      }
      while (v45);
    }
    WTF::fastFree((WTF *)(v44 - 16), a2);
  }
  uint64_t v49 = *((void *)this + 4);
  if (v49)
  {
    uint64_t v50 = *(unsigned int *)(v49 - 4);
    if (v50)
    {
      uint32x4_t v51 = (unsigned int **)(v49 + 16);
      do
      {
        if (*(v51 - 2) != (unsigned int *)-1)
        {
          int8x16_t v52 = *v51;
          unsigned char *v51 = 0;
          if (v52)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v52 + 15, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v52 + 15);
              (*(void (**)(unsigned int *))(*(void *)v52 + 72))(v52);
            }
          }
        }
        v51 += 3;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF *)(v49 - 16), a2);
  }
  uint64_t v53 = *((void *)this + 3);
  if (v53) {
    WTF::fastFree((WTF *)(v53 - 16), a2);
  }
}

uint64_t WebCore::IDBActiveDOMObject::contextDestroyed(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 32;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](this + 32);
    uint64_t result = WebCore::ContextDestructionObserver::contextDestroyed((WebCore::ContextDestructionObserver *)this);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::ContextDestructionObserver::contextDestroyed((WebCore::ContextDestructionObserver *)this);
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v3);
}

uint64_t WebCore::ActiveDOMObject::virtualHasPendingActivity(WebCore::ActiveDOMObject *this)
{
  return 0;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78A28;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78A28;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    unint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  unint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WebCore::IDBServer::IDBConnectionToClient::create();
  uint64_t v3 = *(WTF **)(v1 + 48);
  *(void *)(v1 + 48) = v11;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      uint64_t v10 = *((void *)v3 + 2);
      if (v10) {
        WTF::fastFree((WTF *)(v10 - 16), v2);
      }
      WTF::fastFree(v3, v2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 28), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x1E4E44220](v1 + 28);
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)0x50);
  int v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(void *)int v6 = &unk_1F3C78A50;
  uint64_t v12 = v6;
  WebCore::IDBServer::IDBServer::IDBServer();
  if (v12) {
    (*(void (**)(WTF *))(*(void *)v12 + 8))(v12);
  }
  uint64_t v7 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::registerConnection();
  int v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 28), (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0::operator()(void)::{lambda(WebCore::ClientOrigin const&,unsigned long long)#1},BOOL,WebCore::ClientOrigin const&,unsigned long long>::call()
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C78A78;
  uint64_t v3 = *(unsigned int *)(a1 + 112);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v3])(&v10, a1 + 88);
  }
  *(_DWORD *)(a1 + 112) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v4])(&v11, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      int v6 = *(atomic_uint **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (!v6) {
        return a1;
      }
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  int v6 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v6) {
    return a1;
  }
LABEL_11:
  if (atomic_fetch_add(v6 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v6 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78A78;
  uint64_t v3 = *((unsigned int *)this + 28);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v3])(&v10, (char *)this + 88);
  }
  *((_DWORD *)this + 28) = -1;
  uint64_t v4 = *((unsigned int *)this + 20);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v4])(&v11, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      int v6 = (unsigned int *)*((void *)this + 2);
      *((void *)this + 2) = 0;
      if (!v6) {
        return WTF::fastFree(this, a2);
      }
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  int v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v6) {
    return WTF::fastFree(this, a2);
  }
LABEL_11:
  if (atomic_fetch_add((atomic_uint *volatile)v6 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
    WTF::fastFree(v8, v9);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::deleteDatabase();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::deleteDatabase();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78AB0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78AB0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteDatabase(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173858](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C78AD8;
  uint64_t v3 = *(unsigned int *)(a1 + 112);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v3])(&v10, a1 + 88);
  }
  *(_DWORD *)(a1 + 112) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v4])(&v11, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      int v6 = *(atomic_uint **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (!v6) {
        return a1;
      }
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  int v6 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v6) {
    return a1;
  }
LABEL_11:
  if (atomic_fetch_add(v6 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v6 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78AD8;
  uint64_t v3 = *((unsigned int *)this + 28);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v3])(&v10, (char *)this + 88);
  }
  *((_DWORD *)this + 28) = -1;
  uint64_t v4 = *((unsigned int *)this + 20);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v4])(&v11, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      int v6 = (unsigned int *)*((void *)this + 2);
      *((void *)this + 2) = 0;
      if (!v6) {
        return WTF::fastFree(this, a2);
      }
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  int v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v6) {
    return WTF::fastFree(this, a2);
  }
LABEL_11:
  if (atomic_fetch_add((atomic_uint *volatile)v6 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
    WTF::fastFree(v8, v9);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::openDatabase();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::openDatabase();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78B00;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78B00;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenDatabase(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173840](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didAbortTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78B28;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didAbortTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78B28;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didAbortTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173868](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24, a1 + 40);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didCommitTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78B50;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCommitTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78B50;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCommitTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173880](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24, a1 + 40);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78B78;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78B78;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateObjectStore(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173888](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78BA0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78BA0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteObjectStore(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173890](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78BC8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78BC8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameObjectStore(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173898](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didClearObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78BF0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didClearObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78BF0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didClearObjectStore(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173870](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C18;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C18;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateIndex(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173820](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C40;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C40;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteIndex(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173828](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C68;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C68;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameIndex(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173830](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didPutOrAdd(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C90;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didPutOrAdd(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78C90;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didPutOrAdd(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173808](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didGetRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78CB8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78CB8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetRecord(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173810](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllRecords(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78CE0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllRecords(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78CE0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllRecords(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173848](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didGetCount(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D08;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetCount(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D08;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetCount(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173800](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D30;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D30;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteRecord(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173838](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D58;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D58;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenCursor(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173818](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didIterateCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D80;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  uint64_t v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didIterateCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78D80;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didIterateCursor(WebCore::IDBResultData const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173850](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C78DA8;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C78DA8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::abortTransaction();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::abortTransaction();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C78DD0;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C78DD0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::commitTransaction();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didFinishHandlingVersionChangeTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C78DF8;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFinishHandlingVersionChangeTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C78DF8;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFinishHandlingVersionChangeTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::didFinishHandlingVersionChangeTransaction();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78E20;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 16), a2);
  int v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78E20;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 16), a2);
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::createObjectStore();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78E58;
  uint64_t v3 = (WTF::StringImpl *)a1[16];
  a1[16] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78E58;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::deleteObjectStore();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::renameObjectStore(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78E80;
  int v3 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameObjectStore(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78E80;
  int v3 = (WTF::StringImpl *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameObjectStore(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::renameObjectStore();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::clearObjectStore(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C78EA8;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::clearObjectStore(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C78EA8;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::clearObjectStore(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::clearObjectStore();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C78ED0;
  uint64_t v3 = *(unsigned int *)(a1 + 168);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78940[v3])(&v9, a1 + 152);
  }
  *(_DWORD *)(a1 + 168) = -1;
  int v4 = *(WTF::StringImpl **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      uint64_t v5 = *(atomic_uint **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (!v5) {
        return a1;
      }
      goto LABEL_9;
    }
    *(_DWORD *)v4 -= 2;
  }
  uint64_t v5 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v5) {
    return a1;
  }
LABEL_9:
  if (atomic_fetch_add(v5 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v5 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78ED0;
  uint64_t v3 = *((unsigned int *)this + 42);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78940[v3])(&v10, (char *)this + 152);
  }
  *((_DWORD *)this + 42) = -1;
  int v4 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      uint64_t v5 = (atomic_uint *)*((void *)this + 2);
      *((void *)this + 2) = 0;
      if (!v5) {
        return WTF::fastFree(this, a2);
      }
      goto LABEL_9;
    }
    *(_DWORD *)v4 -= 2;
  }
  uint64_t v5 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v5) {
    return WTF::fastFree(this, a2);
  }
LABEL_9:
  if (atomic_fetch_add(v5 + 6, 0xFFFFFFFF) != 1) {
    return WTF::fastFree(this, a2);
  }
  atomic_store(1u, (unsigned int *)v5 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
  WTF::fastFree(v7, v8);
  return WTF::fastFree(this, v9);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::createIndex();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::deleteIndex(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78EF8;
  int v3 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteIndex(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78EF8;
  int v3 = (WTF::StringImpl *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteIndex(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::deleteIndex();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::renameIndex(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C78F20;
  int v3 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameIndex(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C78F20;
  int v3 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameIndex(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned long long,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::renameIndex();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C78F48;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 160), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v8, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  int v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

{
  void *v3;
  uint64_t v4;
  atomic_uint *v5;
  WTF *v7;
  void *v8;
  void *v9;
  char v10;

  *(void *)a1 = &unk_1F3C78F48;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 160), a2);
  int v4 = *(unsigned int *)(a1 + 152);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v4])(&v10, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  uint64_t v5 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v5 || atomic_fetch_add(v5 + 6, 0xFFFFFFFF) != 1) {
    return WTF::fastFree((WTF *)a1, v3);
  }
  atomic_store(1u, (unsigned int *)v5 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
  WTF::fastFree(v7, v8);
  return WTF::fastFree((WTF *)a1, v9);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::putOrAdd();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C78FB8;
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v2])(&v8, a1 + 168);
  }
  *(_DWORD *)(a1 + 184) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v9, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  int v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C78FB8;
  uint64_t v3 = *((unsigned int *)this + 46);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v3])(&v9, (char *)this + 168);
  }
  *((_DWORD *)this + 46) = -1;
  uint64_t v4 = *((unsigned int *)this + 38);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v4])(&v10, (char *)this + 136);
  }
  *((_DWORD *)this + 38) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::getRecord();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C78FE0;
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v2])(&v8, a1 + 168);
  }
  *(_DWORD *)(a1 + 184) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v9, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C78FE0;
  uint64_t v3 = *((unsigned int *)this + 46);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v3])(&v9, (char *)this + 168);
  }
  *((_DWORD *)this + 46) = -1;
  uint64_t v4 = *((unsigned int *)this + 38);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v4])(&v10, (char *)this + 136);
  }
  *((_DWORD *)this + 38) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::getAllRecords();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C79008;
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v2])(&v8, a1 + 168);
  }
  *(_DWORD *)(a1 + 184) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v9, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79008;
  uint64_t v3 = *((unsigned int *)this + 46);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v3])(&v9, (char *)this + 168);
  }
  *((_DWORD *)this + 46) = -1;
  uint64_t v4 = *((unsigned int *)this + 38);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v4])(&v10, (char *)this + 136);
  }
  *((_DWORD *)this + 38) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::getCount();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C79030;
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v2])(&v8, a1 + 168);
  }
  *(_DWORD *)(a1 + 184) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v9, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79030;
  uint64_t v3 = *((unsigned int *)this + 46);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v3])(&v9, (char *)this + 168);
  }
  *((_DWORD *)this + 46) = -1;
  uint64_t v4 = *((unsigned int *)this + 38);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v4])(&v10, (char *)this + 136);
  }
  *((_DWORD *)this + 38) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::deleteRecord();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C79058;
  uint64_t v2 = *(unsigned int *)(a1 + 232);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v2])(&v8, a1 + 216);
  }
  *(_DWORD *)(a1 + 232) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 200);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v9, a1 + 184);
  }
  *(_DWORD *)(a1 + 200) = -1;
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79058;
  uint64_t v3 = *((unsigned int *)this + 58);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v3])(&v9, (char *)this + 216);
  }
  *((_DWORD *)this + 58) = -1;
  uint64_t v4 = *((unsigned int *)this + 50);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v4])(&v10, (char *)this + 184);
  }
  *((_DWORD *)this + 50) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::openCursor();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C79080;
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v2])(&v8, a1 + 168);
  }
  *(_DWORD *)(a1 + 184) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78950[v3])(&v9, a1 + 136);
  }
  *(_DWORD *)(a1 + 152) = -1;
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79080;
  uint64_t v3 = *((unsigned int *)this + 46);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v3])(&v9, (char *)this + 168);
  }
  *((_DWORD *)this + 46) = -1;
  uint64_t v4 = *((unsigned int *)this + 38);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78950[v4])(&v10, (char *)this + 136);
  }
  *((_DWORD *)this + 38) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::iterateCursor();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::establishTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBTransactionInfo const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C790A8;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)(a1 + 4), a2);
  int v3 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v3 || atomic_fetch_add(v3 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::establishTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBTransactionInfo const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C790A8;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)(a1 + 4), a2);
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v7, v8);
    uint64_t v5 = (WTF *)a1;
  }
  else
  {
    uint64_t v5 = (WTF *)a1;
  }
  return WTF::fastFree(v5, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::establishTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBTransactionInfo const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::establishTransaction();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::fireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C790D0;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::fireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C790D0;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::fireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::call(void *a1)
{
  return MEMORY[0x1F41738A8](*(void *)(a1[1] + 40), a1[3], a1 + 4, a1[6]);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didStartTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C790F8;
  int v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didStartTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C790F8;
  int v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  uint64_t v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didStartTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173878](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24, a1 + 40);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didCloseFromServer(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C79120;
  int v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (atomic_uint *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCloseFromServer(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79120;
  int v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = (atomic_uint *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  uint64_t v4 = (atomic_uint *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_9:
  if (atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1)
  {
LABEL_5:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCloseFromServer(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBError const&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F4173860](*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 24), a1 + 32);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::notifyOpenDBRequestBlocked(WebCore::IDBResourceIdentifier const&,unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79148;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::notifyOpenDBRequestBlocked(WebCore::IDBResourceIdentifier const&,unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79148;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::notifyOpenDBRequestBlocked(WebCore::IDBResourceIdentifier const&,unsigned long long,unsigned long long)::$_0,void>::call(void *a1)
{
  return MEMORY[0x1F41738B0](*(void *)(a1[1] + 40), a1 + 3, a1[5], a1[6]);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionPendingClose(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79170;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionPendingClose(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79170;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionPendingClose(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::databaseConnectionPendingClose();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::databaseConnectionPendingClose();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionClosed(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79198;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionClosed(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79198;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionClosed(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::databaseConnectionClosed();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::databaseConnectionClosed();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::abortOpenAndUpgradeNeeded(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::IDBResourceIdentifier> const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C791C0;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortOpenAndUpgradeNeeded(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::IDBResourceIdentifier> const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C791C0;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortOpenAndUpgradeNeeded(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::IDBResourceIdentifier> const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::abortOpenAndUpgradeNeeded();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::didFireVersionChangeEvent(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C791E8;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFireVersionChangeEvent(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C791E8;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    int v4 = this;
  }
  else
  {
    int v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFireVersionChangeEvent(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::didFireVersionChangeEvent();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDBRequestCancelled(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C79210;
  uint64_t v3 = *(unsigned int *)(a1 + 112);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v3])(&v10, a1 + 88);
  }
  *(_DWORD *)(a1 + 112) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v4])(&v11, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      int v6 = *(atomic_uint **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (!v6) {
        return a1;
      }
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  int v6 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v6) {
    return a1;
  }
LABEL_11:
  if (atomic_fetch_add(v6 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v6 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDBRequestCancelled(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79210;
  uint64_t v3 = *((unsigned int *)this + 28);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v3])(&v10, (char *)this + 88);
  }
  *((_DWORD *)this + 28) = -1;
  uint64_t v4 = *((unsigned int *)this + 20);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v4])(&v11, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      int v6 = (unsigned int *)*((void *)this + 2);
      *((void *)this + 2) = 0;
      if (!v6) {
        return WTF::fastFree(this, a2);
      }
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  int v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v6) {
    return WTF::fastFree(this, a2);
  }
LABEL_11:
  if (atomic_fetch_add((atomic_uint *volatile)v6 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
    WTF::fastFree(v8, v9);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDBRequestCancelled(WebCore::IDBOpenRequestData const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::openDBRequestCancelled();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::openDBRequestCancelled();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1F3C79238;
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v2])(&v8, a1 + 80);
  }
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1F3C78930[v3])(&v9, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  int v4 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4 || atomic_fetch_add(v4 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79238;
  uint64_t v3 = *((unsigned int *)this + 26);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v3])(&v9, (char *)this + 80);
  }
  *((_DWORD *)this + 26) = -1;
  uint64_t v4 = *((unsigned int *)this + 18);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1F3C78930[v4])(&v10, (char *)this + 48);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x1E4E44220](v2 + 28);
  }
  uint64_t result = WebCore::IDBServer::IDBServer::getAllDatabaseNamesAndVersions();
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  *(void *)a1 = &unk_1F3C79260;
  uint64_t v3 = *(unsigned int *)(a1 + 52);
  if (v3)
  {
    uint64_t v4 = *(WTF::StringImpl ***)(a1 + 40);
    uint64_t v5 = 16 * v3;
    do
    {
      int v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  char v8 = *(atomic_uint **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v8 || atomic_fetch_add(v8 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v8 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v8);
  WTF::fastFree(v10, v11);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79260;
  uint64_t v3 = *((unsigned int *)this + 13);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 5);
    uint64_t v5 = 16 * v3;
    do
    {
      int v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v7 = (WTF *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  char v8 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v8);
    WTF::fastFree(v11, v12);
    char v9 = this;
  }
  else
  {
    char v9 = this;
  }
  return WTF::fastFree(v9, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  return MEMORY[0x1F41738B8](*(void *)(*(void *)(a1 + 8) + 40), a1 + 24, a1 + 40);
}

void *WTF::Detail::CallableWrapper<InProcessIDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79288;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2 + 6, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79288;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v6, v7);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (atomic_uchar *)(v2 + 28);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 28), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    MEMORY[0x1E4E44220](v2 + 28);
    uint64_t result = WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince();
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 28));
}

uint64_t LegacyHistoryItemClient::singleton(LegacyHistoryItemClient *this)
{
    return LegacyHistoryItemClient::singleton(void)::client;
  uint64_t result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1F3C792B0;
  LegacyHistoryItemClient::singleton(void)::client = result;
  return result;
}

uint64_t LegacyHistoryItemClient::historyItemChanged(LegacyHistoryItemClient *this, const WebCore::HistoryItem *a2)
{
  return WebThreadPostNotification();
}

uint64_t PopupMenuIOS::disconnectClient(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t SearchPopupMenuIOS::popupMenu(SearchPopupMenuIOS *this)
{
  return *((void *)this + 2);
}

uint64_t SearchPopupMenuIOS::enabled(SearchPopupMenuIOS *this)
{
  return 0;
}

void SearchPopupMenuIOS::~SearchPopupMenuIOS(SearchPopupMenuIOS *this)
{
  *(void *)this = &unk_1F3C79318;
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
}

void SearchPopupMenuIOS::~SearchPopupMenuIOS(SearchPopupMenuIOS *this, void *a2)
{
  *(void *)this = &unk_1F3C79318;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = this;
    goto LABEL_6;
  }
  if (v3[2] != 1)
  {
    --v3[2];
    goto LABEL_4;
  }
  (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  int v4 = this;
LABEL_6:
  WTF::fastFree(v4, a2);
}

void WebKit::StorageAreaImpl::~StorageAreaImpl(WebKit::StorageAreaImpl *this)
{
  *(void *)this = &unk_1F3C79358;
  uint64_t v2 = (WebKit::StorageAreaImpl *)((char *)this + 64);
  *((void *)this + 8) = &unk_1F3C79440;
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(v2);
  uint64_t v5 = (WebCore::StorageSyncManager *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v5)
  {
LABEL_6:
    int v6 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    goto LABEL_6;
  }
  WebCore::StorageSyncManager::~StorageSyncManager(v5, v4);
  WTF::fastFree(v7, v8);
  int v6 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v6) {
    goto LABEL_10;
  }
LABEL_9:
  if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    unsigned int v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned int v16 = &unk_1F3C79468;
    v16[1] = v6;
    uint64_t v20 = v16;
    WTF::ensureOnMainThread();
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
  }
LABEL_10:
  char v9 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v9) {
    goto LABEL_13;
  }
  if (*(_DWORD *)v9 == 1)
  {
    uint64_t v11 = *((void *)v9 + 1);
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(v11 - 4);
      if (v12)
      {
        uint64_t v13 = (WTF::StringImpl **)*((void *)v9 + 1);
        while (1)
        {
          uint64_t v14 = *v13;
          if (*v13 == (WTF::StringImpl *)-1) {
            goto LABEL_20;
          }
          uint64_t v15 = v13[1];
          v13[1] = 0;
          if (!v15) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v15 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v15, v4);
          uint64_t v14 = *v13;
          _DWORD *v13 = 0;
          if (v14)
          {
LABEL_28:
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v4);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
LABEL_20:
          v13 += 2;
          if (!--v12) {
            goto LABEL_30;
          }
        }
        *(_DWORD *)v15 -= 2;
LABEL_25:
        _DWORD *v13 = 0;
        if (v14) {
          goto LABEL_28;
        }
        goto LABEL_20;
      }
LABEL_30:
      WTF::fastFree((WTF *)(v11 - 16), v4);
    }
    WTF::fastFree(v9, v4);
    uint64_t v10 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  --*(_DWORD *)v9;
LABEL_13:
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v10) {
    return;
  }
LABEL_14:
  if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v10);
    uint64_t v17 = *(WTF::StringImpl **)(v10 + 48);
    *(void *)(v10 + 48) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v4);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *(WTF::StringImpl **)(v10 + 40);
    *(void *)(v10 + 40) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v4);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = *(unsigned int *)(v10 + 32);
    if (v19 != -1) {
      ((void (*)(char *, uint64_t))off_1F3C793D0[v19])(&v21, v10 + 8);
    }
    *(_DWORD *)(v10 + 32) = -1;
    WTF::fastFree((WTF *)v10, v4);
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::StorageAreaImpl::~StorageAreaImpl(this);
  WTF::fastFree(v1, v2);
}

void WebCore::Timer::~Timer(WebCore::Timer *this)
{
  *(void *)this = &unk_1F3C79440;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F3C79440;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

WebCore::StorageSyncManager *WebKit::StorageAreaImpl::create@<X0>(char a1@<W0>, atomic_uint *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)uint64_t v8 = &unk_1F3C79358;
  *(unsigned char *)(v8 + 12) = a1;
  atomic_fetch_add(a2, 1u);
  *(void *)(v8 + 16) = a2;
  WebCore::StorageMap::StorageMap((WebCore::StorageMap *)(v8 + 24));
  *(void *)(v8 + 40) = 0;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(v8 + 48) = v9;
  *(_DWORD *)(v8 + 56) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v8 + 64));
  *(void *)(v8 + 64) = &unk_1F3C79440;
  uint64_t v10 = (WebKit::StorageTracker *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v10 = &unk_1F3C793F0;
  *((void *)v10 + 1) = WebKit::StorageAreaImpl::closeDatabaseTimerFired;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v8;
  *(void *)(v8 + 112) = v10;
  uint64_t result = (WebCore::StorageSyncManager *)WebKit::StorageTracker::tracker(v10);
  *a4 = v8;
  uint64_t v12 = *(WebCore::StorageSyncManager **)(v8 + 48);
  if (v12)
  {
    ++*(_DWORD *)v12;
    uint64_t v24 = (_DWORD *)v8;
    uint64_t v25 = v12;
    ++*(_DWORD *)(v8 + 8);
    WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v23, (WebCore::SecurityOriginData *)(*(void *)(v8 + 16) + 8));
    uint64_t v13 = WTF::fastMalloc((WTF *)0xC0);
    uint64_t v14 = WebKit::StorageAreaSync::StorageAreaSync(v13, (uint64_t *)&v25, (uint64_t *)&v24);
    unsigned int v16 = *(unsigned int **)(v8 + 40);
    *(void *)(v8 + 40) = v14;
    if (v16)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        char v21 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v21 = &unk_1F3C79468;
        v21[1] = v16;
        uint64_t v26 = v21;
        WTF::ensureOnMainThread();
        uint64_t v22 = v26;
        uint64_t v26 = 0;
        if (v22) {
          (*(void (**)(void *))(*v22 + 8))(v22);
        }
      }
    }
    uint64_t v17 = v23;
    uint64_t v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        uint64_t v18 = v24;
        uint64_t v24 = 0;
        if (!v18) {
          goto LABEL_12;
        }
LABEL_10:
        if (v18[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
          uint64_t result = v25;
          uint64_t v25 = 0;
          if (!result) {
            return result;
          }
          goto LABEL_13;
        }
        --v18[2];
LABEL_12:
        uint64_t result = v25;
        uint64_t v25 = 0;
        if (!result) {
          return result;
        }
LABEL_13:
        if (*(_DWORD *)result == 1)
        {
          WebCore::StorageSyncManager::~StorageSyncManager(result, v15);
          return (WebCore::StorageSyncManager *)WTF::fastFree(v19, v20);
        }
        else
        {
          --*(_DWORD *)result;
        }
        return result;
      }
      *(_DWORD *)v17 -= 2;
    }
    uint64_t v18 = v24;
    uint64_t v24 = 0;
    if (!v18) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  return result;
}

void *WebKit::StorageAreaImpl::copy@<X0>(WebKit::StorageAreaImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1F3C79358;
  *(unsigned char *)(v4 + 12) = *((unsigned char *)this + 12);
  int v6 = (atomic_uint *)*((void *)this + 2);
  atomic_fetch_add(v6, 1u);
  *(void *)(v4 + 16) = v6;
  uint64_t v7 = (_DWORD *)*((void *)this + 3);
  ++*v7;
  *(void *)(v4 + 24) = v7;
  *(_DWORD *)(v4 + 32) = *((_DWORD *)this + 8);
  *(void *)(v4 + 40) = 0;
  uint64_t v8 = (_DWORD *)*((void *)this + 6);
  if (v8) {
    ++*v8;
  }
  *(void *)(v4 + 48) = v8;
  *(_DWORD *)(v4 + 56) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v4 + 64));
  *(void *)(v5 + 64) = &unk_1F3C79440;
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t result = &unk_1F3C793F0;
  result[1] = WebKit::StorageAreaImpl::closeDatabaseTimerFired;
  result[2] = 0;
  result[3] = v5;
  *(void *)(v5 + 112) = result;
  *a2 = v5;
  return result;
}

uint64_t WebKit::StorageAreaImpl::closeDatabaseTimerFired(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (!v1) {
    return this;
  }
  uint64_t v2 = this;
  if (!*(void *)(v1 + 80)) {
    goto LABEL_10;
  }
  char v3 = 0;
  uint64_t v4 = (atomic_uchar *)(v1 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 189), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3)
  {
    MEMORY[0x1E4E44220](v1 + 189);
    if (*(unsigned char *)(v1 + 191)) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(v1 + 191))
  {
    goto LABEL_6;
  }
  do
  {
    uint64_t v8 = 0x7FF0000000000000;
    int v9 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v1 + 190, (atomic_uchar *)(v1 + 189), (WTF::TimeWithDynamicClockType *)&v8);
  }
  while (!*(unsigned char *)(v1 + 191));
LABEL_6:
  this = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  if (!this) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(this + 8) != 1)
  {
    --*(_DWORD *)(this + 8);
LABEL_9:
    int v5 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 == 1) {
      goto LABEL_10;
    }
LABEL_19:
    this = WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
    uint64_t v6 = *(void *)(v2 + 40);
    if (!v6) {
      return this;
    }
    goto LABEL_11;
  }
  this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v6 = *(void *)(v2 + 40);
  if (!v6) {
    return this;
  }
LABEL_11:
  if (*(void *)(v6 + 104))
  {
    *(unsigned char *)(v6 + 188) = 1;
    if ((*(void *)(v6 + 40) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(void *)(v6 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::storageType(WebKit::StorageAreaImpl *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t WebKit::StorageAreaImpl::length(WebKit::StorageAreaImpl *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2 && *(void *)(v2 + 80))
  {
    char v3 = 0;
    uint64_t v4 = (atomic_uchar *)(v2 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 189), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3)
    {
      MEMORY[0x1E4E44220](v2 + 189);
      if (*(unsigned char *)(v2 + 191)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v2 + 191))
    {
      goto LABEL_6;
    }
    do
    {
      uint64_t v9 = 0x7FF0000000000000;
      int v10 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (atomic_uchar *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v9);
    }
    while (!*(unsigned char *)(v2 + 191));
LABEL_6:
    int v5 = *(_DWORD **)(v2 + 80);
    *(void *)(v2 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        int v8 = 1;
        atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
        if (v8 == 1) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
      --v5[2];
    }
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 == 1) {
      goto LABEL_10;
    }
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
  }
LABEL_10:
  return WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
}

uint64_t WebKit::StorageAreaImpl::key(WebKit::StorageAreaImpl *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4 && *(void *)(v4 + 80))
  {
    char v5 = 0;
    int v6 = (atomic_uchar *)(v4 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 189), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5)
    {
      MEMORY[0x1E4E44220](v4 + 189);
      if (*(unsigned char *)(v4 + 191)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v4 + 191))
    {
      goto LABEL_6;
    }
    do
    {
      uint64_t v11 = 0x7FF0000000000000;
      int v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (atomic_uchar *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
    while (!*(unsigned char *)(v4 + 191));
LABEL_6:
    int v7 = *(_DWORD **)(v4 + 80);
    *(void *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        int v9 = 1;
        atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
        if (v9 == 1) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
      --v7[2];
    }
    int v8 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
  }
LABEL_10:
  return MEMORY[0x1F416C360]((char *)this + 24, a2);
}

uint64_t WebKit::StorageAreaImpl::item(WebKit::StorageAreaImpl *this, const WTF::String *a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4 && *(void *)(v4 + 80))
  {
    char v5 = 0;
    int v6 = (atomic_uchar *)(v4 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 189), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5)
    {
      MEMORY[0x1E4E44220](v4 + 189);
      if (*(unsigned char *)(v4 + 191)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v4 + 191))
    {
      goto LABEL_6;
    }
    do
    {
      uint64_t v11 = 0x7FF0000000000000;
      int v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (atomic_uchar *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
    while (!*(unsigned char *)(v4 + 191));
LABEL_6:
    int v7 = *(_DWORD **)(v4 + 80);
    *(void *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        int v9 = 1;
        atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
        if (v9 == 1) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
      --v7[2];
    }
    int v8 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
  }
LABEL_10:
  return MEMORY[0x1F4173F38]((char *)this + 24, a2);
}

WTF::StringImpl *WebKit::StorageAreaImpl::setItem(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, BOOL *a5)
{
  uint64_t v10 = *((void *)this + 5);
  if (v10 && *(void *)(v10 + 80))
  {
    char v11 = 0;
    int v12 = (atomic_uchar *)(v10 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 189), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x1E4E44220](v10 + 189);
      if (*(unsigned char *)(v10 + 191)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v10 + 191))
    {
      goto LABEL_6;
    }
    do
    {
      uint64_t v21 = 0x7FF0000000000000;
      int v22 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v10 + 190, (atomic_uchar *)(v10 + 189), (WTF::TimeWithDynamicClockType *)&v21);
    }
    while (!*(unsigned char *)(v10 + 191));
LABEL_6:
    uint64_t v13 = *(_DWORD **)(v10 + 80);
    *(void *)(v10 + 80) = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
        int v19 = 1;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
        if (v19 == 1) {
          goto LABEL_10;
        }
        goto LABEL_23;
      }
      --v13[2];
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1) {
      goto LABEL_10;
    }
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 189));
  }
LABEL_10:
  uint64_t v20 = 0;
  WebCore::StorageMap::setItem((WebKit::StorageAreaImpl *)((char *)this + 24), a3, a4, (WTF::String *)&v20, a5);
  if (!*a5 && (WTF::equal(v20, *(const WTF::StringImpl **)a4, v16) & 1) == 0)
  {
    uint64_t v17 = *((void *)this + 5);
    if (v17)
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(v17 + 64), (StringImpl *)a3, a4, (uint64_t)&v21);
      if ((*(void *)(v17 + 40) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(void *)(v17 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        WebCore::TimerBase::start();
      }
    }
    WebKit::StorageAreaImpl::dispatchStorageEvent((unsigned __int8 *)this, a3, (const WTF::String *)&v20, a4, a2);
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebKit::StorageAreaImpl::dispatchStorageEvent(unsigned __int8 *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, WebCore::LocalFrame *a5)
{
  uint64_t v5 = *((void *)a5 + 3);
  if (v5)
  {
    int v6 = *(WebCore::Page **)(v5 + 8);
    if (v6)
    {
      if (this[12] - 1 > 1)
      {
        int v9 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
        *(void *)int v9 = &unk_1F3C79418;
        *((void *)v9 + 1) = a5;
        char v11 = v9;
        WebCore::StorageEventDispatcher::dispatchSessionStorageEvents();
        this = v11;
        if (!v11) {
          return this;
        }
      }
      else
      {
        WebCore::Page::group(v6);
        int v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
        *(void *)int v8 = &unk_1F3C79418;
        *((void *)v8 + 1) = a5;
        uint64_t v10 = v8;
        WebCore::StorageEventDispatcher::dispatchLocalStorageEvents();
        this = v10;
        if (!v10) {
          return this;
        }
      }
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)this + 8))(this);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaImpl::removeItem(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v6 = *((void *)this + 5);
  if (v6 && *(void *)(v6 + 80))
  {
    char v7 = 0;
    int v8 = (atomic_uchar *)(v6 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 189), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7)
    {
      MEMORY[0x1E4E44220](v6 + 189);
      if (*(unsigned char *)(v6 + 191)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v6 + 191))
    {
      goto LABEL_6;
    }
    do
    {
      uint64_t v20 = (WTF::StringImpl *)0x7FF0000000000000;
      int v21 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v6 + 190, (atomic_uchar *)(v6 + 189), (WTF::TimeWithDynamicClockType *)&v20);
    }
    while (!*(unsigned char *)(v6 + 191));
LABEL_6:
    int v9 = *(_DWORD **)(v6 + 80);
    *(void *)(v6 + 80) = 0;
    if (v9)
    {
      if (v9[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
        int v15 = 1;
        atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
        if (v15 == 1) {
          goto LABEL_10;
        }
        goto LABEL_19;
      }
      --v9[2];
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1) {
      goto LABEL_10;
    }
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 189));
  }
LABEL_10:
  int v19 = 0;
  uint64_t result = (WTF::StringImpl *)WebCore::StorageMap::removeItem((WebKit::StorageAreaImpl *)((char *)this + 24), a3, (WTF::String *)&v19);
  if (!v19) {
    return result;
  }
  uint64_t v12 = *((void *)this + 5);
  if (v12)
  {
    uint64_t v18 = 0;
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(v12 + 64), (StringImpl *)a3, (const WTF::StringImpl *)&v18, (uint64_t)&v20);
    if ((*(void *)(v12 + 40) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(void *)(v12 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      WebCore::TimerBase::start();
    }
    int v14 = v18;
    uint64_t v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v20 = 0;
  WebKit::StorageAreaImpl::dispatchStorageEvent((unsigned __int8 *)this, a3, (const WTF::String *)&v19, (const WTF::String *)&v20, a2);
  uint64_t v17 = v20;
  uint64_t v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v16);
      uint64_t result = v19;
      int v19 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_27;
    }
    *(_DWORD *)v17 -= 2;
  }
  uint64_t result = v19;
  int v19 = 0;
  if (!result) {
    return result;
  }
LABEL_27:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
  }
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *WebKit::StorageAreaImpl::clear(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (!v4 || !*(void *)(v4 + 80)) {
    goto LABEL_10;
  }
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(v4 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 189), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    MEMORY[0x1E4E44220](v4 + 189);
    if (*(unsigned char *)(v4 + 191)) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(v4 + 191))
  {
    goto LABEL_6;
  }
  do
  {
    int v19 = (WTF::StringImpl *)0x7FF0000000000000;
    int v20 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (atomic_uchar *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v19);
  }
  while (!*(unsigned char *)(v4 + 191));
LABEL_6:
  char v7 = *(_DWORD **)(v4 + 80);
  *(void *)(v4 + 80) = 0;
  if (!v7) {
    goto LABEL_9;
  }
  if (v7[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    int v16 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 != 1) {
      goto LABEL_29;
    }
LABEL_10:
    int v9 = (WebKit::StorageAreaImpl *)((char *)this + 24);
    uint64_t result = (WTF::StringImpl *)WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  --v7[2];
LABEL_9:
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 == 1) {
    goto LABEL_10;
  }
LABEL_29:
  WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
  int v9 = (WebKit::StorageAreaImpl *)((char *)this + 24);
  uint64_t result = (WTF::StringImpl *)WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
  if (!result) {
    return result;
  }
LABEL_11:
  WebCore::StorageMap::clear(v9);
  uint64_t v12 = *((void *)this + 5);
  if (v12) {
    WebKit::StorageAreaSync::scheduleClear(v12, v11);
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v17 = 0;
  WebKit::StorageAreaImpl::dispatchStorageEvent((unsigned __int8 *)this, (const WTF::String *)&v19, (const WTF::String *)&v18, (const WTF::String *)&v17, a2);
  int v14 = v17;
  uint64_t v17 = 0;
  if (!v14)
  {
LABEL_16:
    int v15 = v18;
    uint64_t v18 = 0;
    if (!v15) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v14, v13);
  int v15 = v18;
  uint64_t v18 = 0;
  if (!v15) {
    goto LABEL_21;
  }
LABEL_19:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v13);
    uint64_t result = v19;
    int v19 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_24;
  }
  *(_DWORD *)v15 -= 2;
LABEL_21:
  uint64_t result = v19;
  int v19 = 0;
  if (!result) {
    return result;
  }
LABEL_24:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  }
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WebKit::StorageAreaImpl::contains(WebKit::StorageAreaImpl *this, const WTF::String *a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4 && *(void *)(v4 + 80))
  {
    char v5 = 0;
    uint64_t v6 = (atomic_uchar *)(v4 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 189), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5)
    {
      MEMORY[0x1E4E44220](v4 + 189);
      if (*(unsigned char *)(v4 + 191)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v4 + 191))
    {
      goto LABEL_6;
    }
    do
    {
      uint64_t v11 = 0x7FF0000000000000;
      int v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (atomic_uchar *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
    while (!*(unsigned char *)(v4 + 191));
LABEL_6:
    char v7 = *(_DWORD **)(v4 + 80);
    *(void *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        int v9 = 1;
        atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
        if (v9 == 1) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
      --v7[2];
    }
    int v8 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
  }
LABEL_10:
  return MEMORY[0x1F4173F40]((char *)this + 24, a2);
}

uint64_t WebKit::StorageAreaImpl::clearForOriginDeletion(WebKit::StorageAreaImpl *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2 || !*(void *)(v2 + 80)) {
    goto LABEL_10;
  }
  char v3 = 0;
  uint64_t v4 = (atomic_uchar *)(v2 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 189), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3)
  {
    MEMORY[0x1E4E44220](v2 + 189);
    while (!*(unsigned char *)(v2 + 191))
    {
LABEL_5:
      uint64_t v11 = 0x7FF0000000000000;
      int v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (atomic_uchar *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
  }
  else if (!*(unsigned char *)(v2 + 191))
  {
    goto LABEL_5;
  }
  char v5 = *(_DWORD **)(v2 + 80);
  *(void *)(v2 + 80) = 0;
  if (!v5) {
    goto LABEL_9;
  }
  if (v5[2] != 1)
  {
    --v5[2];
LABEL_9:
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 == 1) {
      goto LABEL_10;
    }
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
    WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
    uint64_t result = *((void *)this + 5);
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    goto LABEL_19;
  }
LABEL_10:
  WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
  uint64_t result = *((void *)this + 5);
  if (!result) {
    return result;
  }
LABEL_11:
  uint64_t result = WebKit::StorageAreaSync::scheduleClear(result, v7);
  uint64_t v9 = *((void *)this + 5);
  if (*(void *)(v9 + 104))
  {
    *(unsigned char *)(v9 + 188) = 1;
    if ((*(void *)(v9 + 40) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(void *)(v9 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      return WebCore::TimerBase::start();
    }
  }
  return result;
}

uint64_t WebKit::StorageAreaImpl::sync(uint64_t this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(this + 40);
  if (!v3) {
    return this;
  }
  uint64_t v4 = this;
  if (!*(void *)(v3 + 80)) {
    goto LABEL_10;
  }
  char v5 = 0;
  int v6 = (atomic_uchar *)(v3 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 189), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    MEMORY[0x1E4E44220](v3 + 189);
    if (*(unsigned char *)(v3 + 191)) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(v3 + 191))
  {
    goto LABEL_6;
  }
  do
  {
    uint64_t v10 = 0x7FF0000000000000;
    int v11 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v3 + 190, (atomic_uchar *)(v3 + 189), (WTF::TimeWithDynamicClockType *)&v10);
  }
  while (!*(unsigned char *)(v3 + 191));
LABEL_6:
  char v7 = *(_DWORD **)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  if (!v7) {
    goto LABEL_9;
  }
  if (v7[2] != 1)
  {
    --v7[2];
LABEL_9:
    int v8 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 189));
    this = *(void *)(v4 + 40);
    if (!this) {
      return this;
    }
    goto LABEL_11;
  }
  (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    goto LABEL_15;
  }
LABEL_10:
  this = *(void *)(v4 + 40);
  if (!this) {
    return this;
  }
LABEL_11:
  return WebKit::StorageAreaSync::syncTimerFired(this, a2, a3);
}

uint64_t WebKit::StorageAreaImpl::memoryBytesUsedByCache(WebKit::StorageAreaImpl *this)
{
  return 0;
}

uint64_t WebKit::StorageAreaImpl::incrementAccessCount(uint64_t this)
{
  if ((*(void *)(this + 96) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(void *)(this + 96) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 64));
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::decrementAccessCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 56) - 1;
  *(_DWORD *)(this + ++*(_DWORD *)(this + 56) = v1;
  if (!v1)
  {
    if ((*(void *)(this + 96) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(void *)(this + 96) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 64));
    }
    WebKit::StorageTracker::tracker((WebKit::StorageTracker *)this);
    return WebCore::TimerBase::start();
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::closeDatabaseIfIdle(uint64_t this)
{
  if ((*(void *)(this + 96) & 0xFFFFFFFFFFFFLL) == 0) {
    return this;
  }
  if (*(double *)((*(void *)(this + 96) & 0xFFFFFFFFFFFFLL) + 8) == 0.0) {
    return this;
  }
  uint64_t v1 = this;
  this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 64));
  uint64_t v2 = *(void *)(v1 + 40);
  if (!v2) {
    return this;
  }
  if (!*(void *)(v2 + 80)) {
    goto LABEL_12;
  }
  char v3 = 0;
  uint64_t v4 = (atomic_uchar *)(v2 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 189), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3)
  {
    MEMORY[0x1E4E44220](v2 + 189);
    if (*(unsigned char *)(v2 + 191)) {
      goto LABEL_8;
    }
  }
  else if (*(unsigned char *)(v2 + 191))
  {
    goto LABEL_8;
  }
  do
  {
    uint64_t v8 = 0x7FF0000000000000;
    int v9 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (atomic_uchar *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v8);
  }
  while (!*(unsigned char *)(v2 + 191));
LABEL_8:
  this = *(void *)(v2 + 80);
  *(void *)(v2 + 80) = 0;
  if (!this) {
    goto LABEL_11;
  }
  if (*(_DWORD *)(this + 8) != 1)
  {
    --*(_DWORD *)(this + 8);
LABEL_11:
    int v5 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 == 1) {
      goto LABEL_12;
    }
LABEL_21:
    this = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
    uint64_t v6 = *(void *)(v1 + 40);
    if (!v6) {
      return this;
    }
    goto LABEL_13;
  }
  this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v6 = *(void *)(v1 + 40);
  if (!v6) {
    return this;
  }
LABEL_13:
  if (*(void *)(v6 + 104))
  {
    *(unsigned char *)(v6 + 188) = 1;
    if ((*(void *)(v6 + 40) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(void *)(v6 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

WebCore::StorageSyncManager *WebKit::StorageAreaImpl::sessionChanged(WebKit::StorageAreaImpl *this, int a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (!v4 || !*(void *)(v4 + 80)) {
    goto LABEL_10;
  }
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(v4 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 189), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    MEMORY[0x1E4E44220](v4 + 189);
    while (!*(unsigned char *)(v4 + 191))
    {
LABEL_5:
      uint64_t v29 = 0x7FF0000000000000;
      int v30 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (atomic_uchar *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v29);
    }
  }
  else if (!*(unsigned char *)(v4 + 191))
  {
    goto LABEL_5;
  }
  int v7 = *(_DWORD **)(v4 + 80);
  *(void *)(v4 + 80) = 0;
  if (!v7) {
    goto LABEL_9;
  }
  if (v7[2] != 1)
  {
    --v7[2];
LABEL_9:
    int v8 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
    WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
    uint64_t result = (WebCore::StorageSyncManager *)*((void *)this + 5);
    if (a2) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
  (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  int v19 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    goto LABEL_22;
  }
LABEL_10:
  WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
  uint64_t result = (WebCore::StorageSyncManager *)*((void *)this + 5);
  if (a2)
  {
LABEL_11:
    if (result) {
      return result;
    }
    int v12 = (WebCore::StorageSyncManager *)*((void *)this + 6);
    if (!v12) {
      return result;
    }
    ++*(_DWORD *)v12;
    uint64_t v27 = this;
    char v28 = v12;
    ++*((_DWORD *)this + 2);
    WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v26, (WebCore::SecurityOriginData *)(*((void *)this + 2) + 8));
    uint64_t v13 = WTF::fastMalloc((WTF *)0xC0);
    uint64_t v14 = WebKit::StorageAreaSync::StorageAreaSync(v13, (uint64_t *)&v28, (uint64_t *)&v27);
    int v16 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = v14;
    if (v16)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v24 = &unk_1F3C79468;
        v24[1] = v16;
        uint64_t v29 = (uint64_t)v24;
        WTF::ensureOnMainThread();
        uint64_t v25 = v29;
        uint64_t v29 = 0;
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        }
      }
    }
    uint64_t v17 = v26;
    uint64_t v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        uint64_t v18 = v27;
        uint64_t v27 = 0;
        if (!v18) {
          goto LABEL_32;
        }
LABEL_29:
        if (*((_DWORD *)v18 + 2) == 1) {
          (*(void (**)(WebKit::StorageAreaImpl *))(*(void *)v18 + 8))(v18);
        }
        else {
          --*((_DWORD *)v18 + 2);
        }
LABEL_32:
        uint64_t result = v28;
        char v28 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::StorageSyncManager::~StorageSyncManager(result, v15);
            return (WebCore::StorageSyncManager *)WTF::fastFree(v22, v23);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        return result;
      }
      *(_DWORD *)v17 -= 2;
    }
    uint64_t v18 = v27;
    uint64_t v27 = 0;
    if (!v18) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_23:
  if (result)
  {
    uint64_t result = (WebCore::StorageSyncManager *)WebKit::StorageAreaSync::scheduleFinalSync(result, v9, v10);
    int v20 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v20)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v20);
        int v21 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v21 = &unk_1F3C79468;
        v21[1] = v20;
        uint64_t v29 = (uint64_t)v21;
        WTF::ensureOnMainThread();
        uint64_t result = (WebCore::StorageSyncManager *)v29;
        uint64_t v29 = 0;
        if (result) {
          return (WebCore::StorageSyncManager *)(*(uint64_t (**)(WebCore::StorageSyncManager *))(*(void *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Timer::fired(WebCore::Timer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 16))();
}

WebKit::StorageAreaSync *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::StorageAreaSync,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WebKit::StorageAreaSync **)(a1 + 8);
  if (result)
  {
    WebKit::StorageAreaSync::~StorageAreaSync(result, a2);
    return (WebKit::StorageAreaSync *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::StorageAreaImpl::*&)(void),WebKit::StorageAreaImpl*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  char v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

BOOL WTF::Detail::CallableWrapper<WebKit::StorageAreaImpl::dispatchStorageEvent(WTF::String const&,WTF::String const&,WTF::String const&,WebCore::LocalFrame &)::$_0,BOOL,WebCore::Storage &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::LocalDOMWindowProperty::frame((WebCore::LocalDOMWindowProperty *)(a2 + 16)) == *(void *)(a1 + 8);
}

void WebKit::StorageAreaSync::~StorageAreaSync(WebKit::StorageAreaSync *this, StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 22);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      char v5 = (WTF::StringImpl **)*((void *)this + 22);
      while (1)
      {
        uint64_t v6 = *v5;
        if (*v5 == (WTF::StringImpl *)-1) {
          goto LABEL_5;
        }
        int v7 = v5[1];
        v5[1] = 0;
        if (!v7) {
          goto LABEL_10;
        }
        if (*(_DWORD *)v7 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v7, a2);
        uint64_t v6 = *v5;
        _DWORD *v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
LABEL_5:
        v5 += 2;
        if (!--v4) {
          goto LABEL_15;
        }
      }
      *(_DWORD *)v7 -= 2;
LABEL_10:
      _DWORD *v5 = 0;
      if (v6) {
        goto LABEL_13;
      }
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  int v8 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (!v8)
  {
LABEL_19:
    WebCore::SQLiteDatabase::~SQLiteDatabase((WebKit::StorageAreaSync *)((char *)this + 96));
    uint64_t v10 = (WebCore::StorageSyncManager *)*((void *)this + 11);
    *((void *)this + 11) = 0;
    if (!v10) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v8, a2);
  WebCore::SQLiteDatabase::~SQLiteDatabase((WebKit::StorageAreaSync *)((char *)this + 96));
  uint64_t v10 = (WebCore::StorageSyncManager *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (!v10) {
    goto LABEL_24;
  }
LABEL_22:
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::StorageSyncManager::~StorageSyncManager(v10, v9);
    WTF::fastFree(v12, v13);
    int v11 = (_DWORD *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (!v11) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  --*(_DWORD *)v10;
LABEL_24:
  int v11 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (!v11)
  {
LABEL_29:
    uint64_t v14 = (WTF::StringImpl **)*((void *)this + 8);
    if (!v14) {
      goto LABEL_30;
    }
    goto LABEL_34;
  }
LABEL_27:
  if (v11[2] != 1)
  {
    --v11[2];
    goto LABEL_29;
  }
  (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
  uint64_t v14 = (WTF::StringImpl **)*((void *)this + 8);
  if (v14)
  {
LABEL_34:
    uint64_t v17 = *((unsigned int *)v14 - 1);
    if (!v17)
    {
LABEL_47:
      WTF::fastFree((WTF *)(v14 - 2), v9);
      int v15 = (WebKit::StorageAreaSync *)((char *)this + 8);
      *((void *)this + 1) = &unk_1F3C79440;
      uint64_t v16 = *((void *)this + 7);
      *((void *)this + 7) = 0;
      if (!v16) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    uint64_t v18 = v14;
    while (1)
    {
      int v19 = *v18;
      if (*v18 == (WTF::StringImpl *)-1) {
        goto LABEL_37;
      }
      int v20 = v18[1];
      v18[1] = 0;
      if (!v20) {
        goto LABEL_42;
      }
      if (*(_DWORD *)v20 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v20, v9);
      int v19 = *v18;
      WebKit::StorageAreaImpl *v18 = 0;
      if (v19)
      {
LABEL_45:
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v9);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_37:
      v18 += 2;
      if (!--v17) {
        goto LABEL_47;
      }
    }
    *(_DWORD *)v20 -= 2;
LABEL_42:
    WebKit::StorageAreaImpl *v18 = 0;
    if (v19) {
      goto LABEL_45;
    }
    goto LABEL_37;
  }
LABEL_30:
  int v15 = (WebKit::StorageAreaSync *)((char *)this + 8);
  *((void *)this + 1) = &unk_1F3C79440;
  uint64_t v16 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v16) {
LABEL_31:
  }
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
LABEL_32:
  WebCore::TimerBase::~TimerBase(v15);
}

void *WebKit::StorageAreaSync::scheduleFinalSync(WebKit::StorageAreaSync *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  if (!*((void *)this + 10))
  {
    *((void *)this + 10) = 0;
    goto LABEL_14;
  }
  char v4 = 0;
  char v5 = (char *)this + 189;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 189, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    MEMORY[0x1E4E44220]((char *)this + 189);
    if (*((unsigned char *)this + 191)) {
      goto LABEL_5;
    }
  }
  else if (*((unsigned char *)this + 191))
  {
    goto LABEL_5;
  }
  do
  {
    uint64_t v14 = 0x7FF0000000000000;
    int v15 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 190, (atomic_uchar *)this + 189, (WTF::TimeWithDynamicClockType *)&v14);
  }
  while (!*((unsigned char *)this + 191));
LABEL_5:
  uint64_t v6 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (!v6) {
    goto LABEL_8;
  }
  if (v6[2] != 1)
  {
    --v6[2];
LABEL_8:
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 == 1)
  {
LABEL_9:
    int v8 = (_DWORD *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
LABEL_25:
  WTF::Lock::unlockSlow((WebKit::StorageAreaSync *)((char *)this + 189));
  int v8 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (!v8) {
    goto LABEL_14;
  }
LABEL_10:
  if (v8[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
  }
  else {
    --v8[2];
  }
LABEL_14:
  if ((*((void *)this + 5) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((void *)this + 5) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::StorageAreaSync *)((char *)this + 8));
  }
  *((unsigned char *)this + 73) = 1;
  WebKit::StorageAreaSync::syncTimerFired((uint64_t)this, a2, a3);
  atomic_fetch_add((atomic_uint *volatile)this, 1u);
  uint64_t v9 = *((void *)this + 11);
  atomic_fetch_add((atomic_uint *volatile)this, 1u);
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  int v11 = (uint64_t (**)(void *))&unk_1F3C794F0;
  *uint64_t result = &unk_1F3C794F0;
  result[1] = this;
  uint64_t v14 = (uint64_t)result;
  if (*(void *)(v9 + 8))
  {
    WebCore::StorageThread::dispatch(*(void *)(v9 + 8), &v14);
    uint64_t result = (void *)v14;
    uint64_t v14 = 0;
    if (!result) {
      goto LABEL_22;
    }
    int v11 = (uint64_t (**)(void *))*result;
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t result = (void *)v11[1](result);
LABEL_22:
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)this);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v13 = &unk_1F3C79468;
    v13[1] = this;
    uint64_t v14 = (uint64_t)v13;
    WTF::ensureOnMainThread();
    uint64_t result = (void *)v14;
    uint64_t v14 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::StorageAreaSync::syncTimerFired(uint64_t this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = this;
  char v4 = 0;
  char v5 = (atomic_uchar *)(this + 168);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 168), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    this = MEMORY[0x1E4E44220](this + 168);
    if (!*(unsigned char *)(v3 + 186)) {
      goto LABEL_4;
    }
  }
  else if (!*(unsigned char *)(this + 186))
  {
    goto LABEL_4;
  }
  if (!*(unsigned char *)(v3 + 73))
  {
    this = WebCore::TimerBase::start();
    int v18 = 0;
    int v19 = 0;
    goto LABEL_118;
  }
LABEL_4:
  if (*(unsigned char *)(v3 + 72))
  {
    uint64_t v6 = *(WTF::StringImpl ***)(v3 + 176);
    if (v6)
    {
      *(void *)(v3 + 176) = 0;
      uint64_t v7 = *((unsigned int *)v6 - 1);
      if (v7)
      {
        int v8 = v6;
        while (1)
        {
          uint64_t v9 = *v8;
          if (*v8 == (WTF::StringImpl *)-1) {
            goto LABEL_9;
          }
          uint64_t v10 = v8[1];
          v8[1] = 0;
          if (!v10) {
            goto LABEL_14;
          }
          if (*(_DWORD *)v10 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v10, a2);
          uint64_t v9 = *v8;
          _DWORD *v8 = 0;
          if (v9)
          {
LABEL_17:
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, a2);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
LABEL_9:
          v8 += 2;
          if (!--v7) {
            goto LABEL_19;
          }
        }
        *(_DWORD *)v10 -= 2;
LABEL_14:
        _DWORD *v8 = 0;
        if (v9) {
          goto LABEL_17;
        }
        goto LABEL_9;
      }
LABEL_19:
      this = WTF::fastFree((WTF *)(v6 - 2), a2);
    }
    *(unsigned char *)(v3 + 184) = 1;
    *(unsigned char *)(v3 + 72) = 0;
  }
  int v12 = (uint64_t *)(v3 + 64);
  uint64_t v11 = *(void *)(v3 + 64);
  if (v11)
  {
    uint64_t v13 = *(unsigned int *)(v11 - 4);
    uint64_t v14 = (void *)(v11 + 16 * v13);
    if (!*(_DWORD *)(v11 - 12))
    {
      int v15 = (void *)(v11 + 16 * v13);
      uint64_t v14 = v15;
      goto LABEL_30;
    }
    int v15 = *(void **)(v3 + 64);
    if (v13)
    {
      uint64_t v16 = 16 * v13;
      int v15 = *(void **)(v3 + 64);
      do
      {
        if ((unint64_t)(*v15 + 1) > 1) {
          goto LABEL_29;
        }
        v15 += 2;
        v16 -= 16;
      }
      while (v16);
      int v15 = v14;
LABEL_30:
      uint64_t v17 = (void *)(v11 + 16 * *(unsigned int *)(v11 - 4));
      if (v17 == v15)
      {
LABEL_54:
        int v19 = 0;
        int v18 = 1;
        if (!*(unsigned char *)(v3 + 185)) {
          goto LABEL_112;
        }
        goto LABEL_118;
      }
      goto LABEL_35;
    }
  }
  else
  {
    int v15 = 0;
    uint64_t v14 = 0;
  }
LABEL_29:
  if (v11) {
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  if (!v15) {
    goto LABEL_54;
  }
LABEL_35:
  unsigned int v20 = 0;
  int v21 = (WTF::StringImpl ***)(v3 + 176);
  while (v20 < 0x64 || *(unsigned char *)(v3 + 73))
  {
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::String>((uint64_t)v55, (uint64_t *)(v3 + 176), &v57, &v56);
    int v22 = v56;
    int8x16_t v56 = 0;
    if (!v22) {
      goto LABEL_42;
    }
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
LABEL_42:
      this = (uint64_t)v57;
      uint64_t v57 = 0;
      if (!this) {
        goto LABEL_47;
      }
      goto LABEL_45;
    }
    WTF::StringImpl::destroy(v22, a2);
    this = (uint64_t)v57;
    uint64_t v57 = 0;
    if (!this) {
      goto LABEL_47;
    }
LABEL_45:
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
LABEL_47:
      uint64_t v23 = v15 + 2;
      int v15 = v14;
      if (v23 != v14) {
        goto LABEL_50;
      }
      goto LABEL_36;
    }
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    uint64_t v23 = v15 + 2;
    int v15 = v14;
    if (v23 != v14)
    {
LABEL_50:
      int v15 = v23;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        v15 += 2;
        if (v15 == v14)
        {
          int v15 = v14;
          break;
        }
      }
    }
LABEL_36:
    ++v20;
    if (v15 == v17) {
      goto LABEL_54;
    }
  }
  uint64_t v24 = *v21;
  if (!*v21)
  {
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_65;
  }
  uint64_t v25 = *((unsigned int *)v24 - 1);
  uint64_t v26 = &v24[2 * v25];
  if (!*((_DWORD *)v24 - 3))
  {
    uint64_t v27 = &v24[2 * v25];
    uint64_t v26 = v27;
    if (!v24) {
      goto LABEL_69;
    }
LABEL_66:
    uint64_t v29 = &v24[2 * *((unsigned int *)v24 - 1)];
    if (v29 != v27) {
      goto LABEL_70;
    }
    goto LABEL_111;
  }
  uint64_t v27 = *v21;
  if (!v25)
  {
LABEL_65:
    if (!v24) {
      goto LABEL_69;
    }
    goto LABEL_66;
  }
  uint64_t v28 = 16 * v25;
  uint64_t v27 = v24;
  do
  {
    if ((unint64_t)*v27 + 1 > 1) {
      goto LABEL_65;
    }
    v27 += 2;
    v28 -= 16;
  }
  while (v28);
  uint64_t v27 = v26;
  if (v24) {
    goto LABEL_66;
  }
LABEL_69:
  uint64_t v29 = 0;
  if (v27)
  {
LABEL_70:
    uint64_t v30 = *v12;
    if (*v12)
    {
LABEL_71:
      int v31 = *(_DWORD *)(v30 - 8);
      unsigned int v32 = *((_DWORD *)*v27 + 4);
      if (v32 < 0x100) {
        unsigned int v33 = WTF::StringImpl::hashSlowCase(*v27);
      }
      else {
        unsigned int v33 = v32 >> 8;
      }
      for (i = 0; ; unsigned int v33 = i + v35)
      {
        uint64_t v35 = v33 & v31;
        this = *(void *)(v30 + 16 * v35);
        if (this != -1)
        {
          if (!this) {
            goto LABEL_103;
          }
          this = WTF::equal((WTF *)this, *v27, a3);
          if (this) {
            break;
          }
        }
        ++i;
      }
      uint64_t v36 = v30 + 16 * v35;
      uint64_t v37 = *v12;
      if (!*v12 || (v37 += 16 * *(unsigned int *)(v37 - 4), v37 != v36))
      {
        if (v37 != v36)
        {
          uint64_t v38 = *(WTF::StringImpl **)v36;
          *(void *)uint64_t v36 = -1;
          if (!v38) {
            goto LABEL_87;
          }
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::destroy(v38, a2);
            this = *(void *)(v36 + 8);
            *(void *)(v36 + 8) = 0;
            if (!this) {
              goto LABEL_92;
            }
          }
          else
          {
            *(_DWORD *)v38 -= 2;
LABEL_87:
            this = *(void *)(v36 + 8);
            *(void *)(v36 + 8) = 0;
            if (!this)
            {
LABEL_92:
              ++*(_DWORD *)(*v12 - 16);
              uint64_t v39 = *v12;
              if (*v12) {
                goto LABEL_93;
              }
LABEL_96:
              *(_DWORD *)(v39 - 12) = -1;
              uint64_t v40 = *v12;
              if (!*v12) {
                goto LABEL_103;
              }
              goto LABEL_97;
            }
          }
          if (*(_DWORD *)this != 2)
          {
            *(_DWORD *)this -= 2;
            goto LABEL_92;
          }
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          ++*(_DWORD *)(*v12 - 16);
          uint64_t v39 = *v12;
          if (!*v12) {
            goto LABEL_96;
          }
LABEL_93:
          --*(_DWORD *)(v39 - 12);
          uint64_t v40 = *v12;
          if (!*v12) {
            goto LABEL_103;
          }
LABEL_97:
          unsigned int v41 = 6 * *(_DWORD *)(v40 - 12);
          unsigned int v42 = *(_DWORD *)(v40 - 4);
          if (v41 < v42 && v42 >= 9) {
            this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v3 + 64), v42 >> 1, 0);
          }
          goto LABEL_103;
        }
      }
      while (1)
      {
LABEL_103:
        uint64_t v44 = v27 + 2;
        uint64_t v27 = v26;
        if (v44 != v26)
        {
          uint64_t v27 = v44;
          while ((unint64_t)*v27 + 1 <= 1)
          {
            v27 += 2;
            if (v27 == v26)
            {
              uint64_t v27 = v26;
              break;
            }
          }
        }
        if (v27 == v29) {
          break;
        }
        uint64_t v30 = *v12;
        if (*v12) {
          goto LABEL_71;
        }
      }
    }
  }
LABEL_111:
  int v19 = 1;
  int v18 = 1;
  if (!*(unsigned char *)(v3 + 185))
  {
LABEL_112:
    *(unsigned char *)(v3 + 185) = 1;
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
    uint64_t v45 = *(void *)(v3 + 88);
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
    uint16x8_t v46 = (void *)WTF::fastMalloc((WTF *)0x10);
    uint64_t v47 = (uint64_t (**)(void))&unk_1F3C79518;
    *uint16x8_t v46 = &unk_1F3C79518;
    v46[1] = v3;
    v55[0] = (uint64_t)v46;
    if (*(void *)(v45 + 8))
    {
      WebCore::StorageThread::dispatch(*(void *)(v45 + 8), v55);
      this = v55[0];
      v55[0] = 0;
      if (this)
      {
        uint64_t v47 = *(uint64_t (***)(void))this;
        goto LABEL_116;
      }
    }
    else
    {
      v55[0] = 0;
LABEL_116:
      this = v47[1]();
    }
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v3);
      uint32x4_t v54 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint32x4_t v54 = &unk_1F3C79468;
      v54[1] = v3;
      v55[0] = (uint64_t)v54;
      WTF::ensureOnMainThread();
      this = v55[0];
      v55[0] = 0;
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
LABEL_118:
  int v48 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v48, 0, memory_order_release, memory_order_relaxed);
  if (v48 == 1)
  {
    if (v18) {
      goto LABEL_120;
    }
    return this;
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v18) {
    return this;
  }
LABEL_120:
  if (v19) {
    return WebCore::TimerBase::start();
  }
  uint64_t v49 = *(WTF::StringImpl ***)(v3 + 64);
  if (v49)
  {
    *(void *)(v3 + 64) = 0;
    uint64_t v50 = *((unsigned int *)v49 - 1);
    if (!v50) {
      return WTF::fastFree((WTF *)(v49 - 2), a2);
    }
    uint32x4_t v51 = v49;
    while (2)
    {
      int8x16_t v52 = *v51;
      if (*v51 == (WTF::StringImpl *)-1) {
        goto LABEL_126;
      }
      uint64_t v53 = v51[1];
      v51[1] = 0;
      if (!v53) {
        goto LABEL_131;
      }
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::destroy(v53, a2);
        int8x16_t v52 = *v51;
        unsigned char *v51 = 0;
        if (!v52) {
          goto LABEL_126;
        }
      }
      else
      {
        *(_DWORD *)v53 -= 2;
LABEL_131:
        unsigned char *v51 = 0;
        if (!v52)
        {
LABEL_126:
          v51 += 2;
          if (!--v50) {
            return WTF::fastFree((WTF *)(v49 - 2), a2);
          }
          continue;
        }
      }
      break;
    }
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, a2);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
    goto LABEL_126;
  }
  return this;
}

uint64_t WebKit::StorageAreaSync::scheduleClear(uint64_t this, StringImpl *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(WTF::StringImpl ***)(this + 64);
  if (v3)
  {
    *(void *)(this + 64) = 0;
    uint64_t v4 = *((unsigned int *)v3 - 1);
    if (v4)
    {
      char v5 = v3;
      while (1)
      {
        uint64_t v6 = *v5;
        if (*v5 == (WTF::StringImpl *)-1) {
          goto LABEL_5;
        }
        uint64_t v7 = v5[1];
        v5[1] = 0;
        if (!v7) {
          goto LABEL_10;
        }
        if (*(_DWORD *)v7 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v7, a2);
        uint64_t v6 = *v5;
        atomic_uchar *v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
LABEL_5:
        v5 += 2;
        if (!--v4) {
          goto LABEL_15;
        }
      }
      *(_DWORD *)v7 -= 2;
LABEL_10:
      atomic_uchar *v5 = 0;
      if (v6) {
        goto LABEL_13;
      }
      goto LABEL_5;
    }
LABEL_15:
    this = WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  *(unsigned char *)(v2 + 72) = 1;
  if ((*(void *)(v2 + 40) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(void *)(v2 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    return WebCore::TimerBase::start();
  }
  return this;
}

uint64_t WebKit::StorageAreaSync::openDatabase(uint64_t a1, int a2)
{
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)a1);
  WebCore::StorageSyncManager::fullDatabaseFilename(*(WebCore::StorageSyncManager **)(a1 + 88), (const WTF::String *)(a1 + 160), &v32);
  char v5 = (WebKit::StorageTracker *)WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v32, v4);
  if (a2 != 1 || v5)
  {
    if (!v32 || !*((_DWORD *)v32 + 1)) {
      goto LABEL_31;
    }
    uint64_t v7 = (atomic_uchar *)WebKit::StorageTracker::tracker(v5);
    if (!v7[128])
    {
LABEL_13:
      if (WebCore::SQLiteDatabase::open())
      {
        if (WebCore::SQLiteDatabase::tableExists())
        {
          WebCore::SQLiteDatabase::prepareStatement();
          if (v36
            || (int v17 = 0, (WebCore::SQLiteStatement::isColumnDeclaredAsBlob((WebCore::SQLiteStatement *)v35) & 1) == 0))
          {
            int v17 = 1;
          }
          if (v36 != -1) {
            ((void (*)(void *, void *))off_1F3C794D0[v36])(v33, v35);
          }
          if (v17)
          {
            WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)v35, (WebCore::SQLiteDatabase *)(a1 + 96));
            WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v35);
            if (WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand())
            {
              WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)v35);
            }
            else
            {
              WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v35);
              WebCore::SQLiteDatabase::executeCommand();
            }
            MEMORY[0x1E4E469D0](v35);
          }
        }
        uint64_t v18 = WebCore::SQLiteDatabase::executeCommand();
        if (v18)
        {
          uint64_t v19 = WebKit::StorageTracker::tracker((WebKit::StorageTracker *)v18);
          WebKit::StorageTracker::setOriginDetails(v19, (WTF::StringImpl **)(a1 + 160), (const WTF::String *)&v32);
          goto LABEL_35;
        }
      }
LABEL_31:
      char v20 = 0;
      int v21 = (atomic_uchar *)(a1 + 189);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 189), (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
      if (v20)
      {
        MEMORY[0x1E4E44220](a1 + 189);
        *(unsigned char *)(a1 + 191) = 1;
        uint64_t v22 = a1 + 190;
        unsigned __int8 v28 = atomic_load((unsigned __int8 *)(a1 + 190));
        if ((v28 & 1) == 0)
        {
LABEL_33:
          int v24 = 1;
          atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 == 1)
          {
LABEL_34:
            *(unsigned char *)(a1 + 187) = 1;
            goto LABEL_35;
          }
LABEL_42:
          WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 189));
          goto LABEL_34;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 191) = 1;
        uint64_t v22 = a1 + 190;
        unsigned __int8 v23 = atomic_load((unsigned __int8 *)(a1 + 190));
        if ((v23 & 1) == 0) {
          goto LABEL_33;
        }
      }
      char v34 = 0;
      v33[0] = v22;
      v33[1] = &v34;
      v35[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v35[1] = v35;
      v35[2] = v33;
      WTF::ParkingLot::unparkOneImpl();
      int v29 = 1;
      atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
      if (v29 == 1) {
        goto LABEL_34;
      }
      goto LABEL_42;
    }
    uint64_t v9 = v7;
    char v10 = 0;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10)
    {
      MEMORY[0x1E4E44220](v7);
      char v30 = 0;
      int v12 = v9 + 96;
      atomic_compare_exchange_strong_explicit(v9 + 96, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
      if (!v30)
      {
LABEL_8:
        uint64_t v13 = (uint64_t *)(v9 + 112);
        uint64_t v14 = *((void *)v9 + 14);
        if (!v14) {
          goto LABEL_11;
        }
LABEL_9:
        if (*(_DWORD *)(v14 - 12)) {
          WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(v13, (WTF::StringImpl **)(a1 + 160), v8);
        }
LABEL_11:
        int v15 = 1;
        int v16 = 1;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
        if (v16 == 1)
        {
          atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
          if (v15 == 1) {
            goto LABEL_13;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
          int v31 = 1;
          atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
          if (v31 == 1) {
            goto LABEL_13;
          }
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        goto LABEL_13;
      }
    }
    else
    {
      char v11 = 0;
      int v12 = v7 + 96;
      atomic_compare_exchange_strong_explicit(v7 + 96, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
      if (!v11) {
        goto LABEL_8;
      }
    }
    MEMORY[0x1E4E44220](v12);
    uint64_t v13 = (uint64_t *)(v9 + 112);
    uint64_t v14 = *((void *)v9 + 14);
    if (!v14) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
LABEL_35:
  uint64_t v25 = v32;
  unsigned int v32 = 0;
  if (!v25) {
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v25);
  }
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v25);
  }
  uint64_t v27 = (WebCore::SQLiteDatabaseTracker *)WTF::StringImpl::destroy(v25, v6);
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v27);
}

uint64_t WebKit::StorageAreaSync::StorageAreaSync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(_DWORD *)a1 = 1;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 8));
  *(void *)(a1 + 8) = &unk_1F3C79440;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1F3C79490;
  v6[1] = WebKit::StorageAreaSync::syncTimerFired;
  v6[2] = 0;
  v6[3] = a1;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = v6;
  *(void *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)(a1 + 88) = v8;
  WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(a1 + 96));
  WTF::String::isolatedCopy();
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  uint64_t v9 = *(void *)(a1 + 88);
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  char v10 = (void (***)(void))WTF::fastMalloc((WTF *)0x10);
  char v11 = (void (**)(void))&unk_1F3C794B8;
  *char v10 = (void (**)(void))&unk_1F3C794B8;
  v10[1] = (void (**)(void))a1;
  int v16 = v10;
  if (!*(void *)(v9 + 8))
  {
    int v16 = 0;
    goto LABEL_5;
  }
  WebCore::StorageThread::dispatch(*(void *)(v9 + 8), (uint64_t *)&v16);
  int v12 = v16;
  int v16 = 0;
  if (v12)
  {
    char v11 = *v12;
LABEL_5:
    v11[1]();
  }
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a1);
    uint64_t v14 = (void (***)(void))WTF::fastMalloc((WTF *)0x10);
    void *v14 = (void (**)(void))&unk_1F3C79468;
    v14[1] = (void (**)(void))a1;
    int v16 = v14;
    WTF::ensureOnMainThread();
    uint64_t v15 = (uint64_t)v16;
    int v16 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::StorageAreaSync::*&)(void),WebKit::StorageAreaSync*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::StorageAreaSync(WTF::RefPtr<WebCore::StorageSyncManager,WTF::RawPtrTraits<WebCore::StorageSyncManager>,WTF::DefaultRefDerefTraits<WebCore::StorageSyncManager>> &&,WTF::Ref<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (atomic_uint *)a1[1];
  *a1 = &unk_1F3C794B8;
  a1[1] = 0;
  if (!v2) {
    return a1;
  }
  if (atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1F3C79468;
  v4[1] = v2;
  char v5 = v4;
  WTF::ensureOnMainThread();
  if (!v5) {
    return a1;
  }
  (*(void (**)(void *))(*v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::StorageAreaSync(WTF::RefPtr<WebCore::StorageSyncManager,WTF::RawPtrTraits<WebCore::StorageSyncManager>,WTF::DefaultRefDerefTraits<WebCore::StorageSyncManager>> &&,WTF::Ref<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  *(void *)this = &unk_1F3C794B8;
  *((void *)this + 1) = 0;
  if (!v3) {
    return WTF::fastFree(this, a2);
  }
  if (atomic_fetch_add(v3, 0xFFFFFFFF) != 1) {
    return WTF::fastFree(this, a2);
  }
  atomic_store(1u, (unsigned int *)v3);
  char v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C79468;
  v5[1] = v3;
  uint64_t v7 = v5;
  WTF::ensureOnMainThread();
  if (!v7) {
    return WTF::fastFree(this, a2);
  }
  (*(void (**)(void *))(*v7 + 8))(v7);
  return WTF::fastFree(this, v6);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::StorageAreaSync(WTF::RefPtr<WebCore::StorageSyncManager,WTF::RawPtrTraits<WebCore::StorageSyncManager>,WTF::DefaultRefDerefTraits<WebCore::StorageSyncManager>> &&,WTF::Ref<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = 1;
  WebKit::StorageAreaSync::openDatabase(v1, 1);
  uint64_t v3 = *(void *)(v1 + 104);
  if (!v3)
  {
    uint64_t v9 = (atomic_uchar *)(v1 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 189), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if ((_BYTE)v3)
    {
      MEMORY[0x1E4E44220](v1 + 189);
      *(unsigned char *)(v1 + 191) = 1;
      uint64_t result = (WTF::StringImpl *)(v1 + 190);
      unsigned __int8 v31 = atomic_load((unsigned __int8 *)(v1 + 190));
      if ((v31 & 1) == 0)
      {
LABEL_9:
        atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v2, 0, memory_order_release, memory_order_relaxed);
        if (v2 == 1) {
          return result;
        }
        return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
      }
    }
    else
    {
      *(unsigned char *)(v1 + 191) = 1;
      uint64_t result = (WTF::StringImpl *)(v1 + 190);
      unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v1 + 190));
      if ((v10 & 1) == 0) {
        goto LABEL_9;
      }
    }
    LOBYTE(v38) = 0;
    uint64_t v40 = (uint64_t (*)(uint64_t, __int16))result;
    unsigned int v41 = &v38;
    v36[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v36[1] = v36;
    v36[2] = &v40;
    uint64_t result = (WTF::StringImpl *)WTF::ParkingLot::unparkOneImpl();
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v2, 0, memory_order_release, memory_order_relaxed);
    if (v2 == 1) {
      return result;
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (v37)
  {
    char v4 = 0;
    char v5 = (atomic_uchar *)(v1 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 189), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4)
    {
      MEMORY[0x1E4E44220](v1 + 189);
      *(unsigned char *)(v1 + 191) = 1;
      uint64_t result = (WTF::StringImpl *)(v1 + 190);
      unsigned __int8 v29 = atomic_load((unsigned __int8 *)(v1 + 190));
      if ((v29 & 1) == 0)
      {
LABEL_5:
        int v8 = 1;
        atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
        if (v8 == 1) {
          goto LABEL_52;
        }
        goto LABEL_54;
      }
    }
    else
    {
      *(unsigned char *)(v1 + 191) = 1;
      uint64_t result = (WTF::StringImpl *)(v1 + 190);
      unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v1 + 190));
      if ((v7 & 1) == 0) {
        goto LABEL_5;
      }
    }
    LOBYTE(v35) = 0;
    uint64_t v38 = result;
    uint64_t v39 = (WTF::StringImpl **)&v35;
    uint64_t v40 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    unsigned int v41 = (WTF::StringImpl **)&v40;
    unsigned int v42 = &v38;
    uint64_t result = (WTF::StringImpl *)WTF::ParkingLot::unparkOneImpl();
    int v30 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
    if (v30 == 1) {
      goto LABEL_52;
    }
LABEL_54:
    uint64_t result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
    uint64_t v25 = v37;
    if (v37 == -1) {
      return result;
    }
    return (WTF::StringImpl *)((uint64_t (*)(void, void *))off_1F3C794D0[v25])(&v40, v36);
  }
  uint64_t v35 = 0;
  while (1)
  {
    int v11 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v36);
    if (v11 != 100) {
      break;
    }
    if (v37 || (WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v36), v37))
    {
LABEL_59:
      uint64_t v32 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(v32, v33);
    }
    WebCore::SQLiteStatement::columnBlobAsString((WebCore::SQLiteStatement *)v36);
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::String>((uint64_t)&v40, &v35, &v38, &v34);
    uint64_t v14 = v34;
    char v34 = 0;
    if (!v14) {
      goto LABEL_20;
    }
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
LABEL_20:
      uint64_t v15 = v38;
      uint64_t v38 = 0;
      if (v15) {
        goto LABEL_23;
      }
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v14, v13);
    uint64_t v15 = v38;
    uint64_t v38 = 0;
    if (v15)
    {
LABEL_23:
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
LABEL_13:
    if (v37) {
      goto LABEL_59;
    }
  }
  if (v11 != 101)
  {
    char v16 = 0;
    int v17 = (atomic_uchar *)(v1 + 189);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 189), (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (!v16) {
      goto LABEL_27;
    }
LABEL_46:
    MEMORY[0x1E4E44220](v17);
    *(unsigned char *)(v1 + 191) = 1;
    uint64_t result = (WTF::StringImpl *)(v1 + 190);
    unsigned __int8 v27 = atomic_load((unsigned __int8 *)(v1 + 190));
    if (v27) {
      goto LABEL_47;
    }
LABEL_28:
    int v19 = 1;
    atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
    if (v19 == 1) {
      goto LABEL_29;
    }
LABEL_48:
    uint64_t result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
    uint64_t v20 = v35;
    if (!v35) {
      goto LABEL_52;
    }
LABEL_30:
    uint64_t v21 = *(unsigned int *)(v20 - 4);
    if (!v21)
    {
LABEL_43:
      uint64_t result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v20 - 16), v12);
      uint64_t v25 = v37;
      if (v37 == -1) {
        return result;
      }
      return (WTF::StringImpl *)((uint64_t (*)(void, void *))off_1F3C794D0[v25])(&v40, v36);
    }
    uint64_t v22 = (WTF::StringImpl **)v20;
    while (2)
    {
      unsigned __int8 v23 = *v22;
      if (*v22 == (WTF::StringImpl *)-1) {
        goto LABEL_33;
      }
      int v24 = v22[1];
      v22[1] = 0;
      if (!v24) {
        goto LABEL_38;
      }
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v12);
        unsigned __int8 v23 = *v22;
        WTF::StringImpl *v22 = 0;
        if (!v23) {
          goto LABEL_33;
        }
      }
      else
      {
        *(_DWORD *)v24 -= 2;
LABEL_38:
        WTF::StringImpl *v22 = 0;
        if (!v23)
        {
LABEL_33:
          v22 += 2;
          if (!--v21) {
            goto LABEL_43;
          }
          continue;
        }
      }
      break;
    }
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v12);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
    goto LABEL_33;
  }
  WebCore::StorageMap::importItems();
  char v26 = 0;
  int v17 = (atomic_uchar *)(v1 + 189);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 189), (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
  if (v26) {
    goto LABEL_46;
  }
LABEL_27:
  *(unsigned char *)(v1 + 191) = 1;
  uint64_t result = (WTF::StringImpl *)(v1 + 190);
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v1 + 190));
  if ((v18 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_47:
  LOBYTE(v34) = 0;
  uint64_t v38 = result;
  uint64_t v39 = &v34;
  uint64_t v40 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
  unsigned int v41 = (WTF::StringImpl **)&v40;
  unsigned int v42 = &v38;
  uint64_t result = (WTF::StringImpl *)WTF::ParkingLot::unparkOneImpl();
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    goto LABEL_48;
  }
LABEL_29:
  uint64_t v20 = v35;
  if (v35) {
    goto LABEL_30;
  }
LABEL_52:
  uint64_t v25 = v37;
  if (v37 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(void, void))off_1F3C794D0[v25])(&v40, v36);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F416E310](a2);
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, __int16 a2)
{
  int v2 = *(unsigned __int8 ***)(a1 + 16);
  if ((a2 & 0x100) == 0) {
    atomic_store(0, *v2);
  }
  *v2[1] = a2 & 1;
  return 0;
}

uint64_t WTF::Condition::waitUntilUnchecked<WTF::Lock>(uint64_t a1, atomic_uchar *a2, WTF::TimeWithDynamicClockType *this)
{
  uint64_t v15 = (uint64_t (*)(uint64_t))WTF::TimeWithDynamicClockType::nowWithSameClock(this);
  char v16 = v5;
  if (WTF::TimeWithDynamicClockType::operator<())
  {
    uint64_t v6 = 0;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(a2, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      char v8 = 0;
      atomic_compare_exchange_strong_explicit(a2, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
      if (!v8) {
        return v6;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)a2);
      uint64_t v6 = 0;
      char v11 = 0;
      atomic_compare_exchange_strong_explicit(a2, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
      if (!v11) {
        return v6;
      }
    }
  }
  else
  {
    int v12 = a2;
    uint64_t v13 = a1;
    uint64_t v15 = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
    char v16 = &v15;
    int v17 = &v13;
    v14[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
    v14[1] = v14;
    _OWORD v14[2] = &v12;
    uint64_t v6 = WTF::ParkingLot::parkConditionallyImpl() & 1;
    char v10 = 0;
    atomic_compare_exchange_strong_explicit(a2, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (!v10) {
      return v6;
    }
  }
  MEMORY[0x1E4E44220](a2);
  return v6;
}

uint64_t WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  return 1;
}

atomic_uchar *WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction(uint64_t a1)
{
  uint64_t result = **(atomic_uchar ***)(a1 + 16);
  int v2 = 1;
  atomic_compare_exchange_strong_explicit(result, (unsigned __int8 *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::scheduleFinalSync(void)::$_0,void>::~CallableWrapper(void *a1)
{
  int v2 = (atomic_uint *)a1[1];
  *a1 = &unk_1F3C794F0;
  a1[1] = 0;
  if (!v2) {
    return a1;
  }
  if (atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  char v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v4 = &unk_1F3C79468;
  v4[1] = v2;
  char v5 = v4;
  WTF::ensureOnMainThread();
  if (!v5) {
    return a1;
  }
  (*(void (**)(void *))(*v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::scheduleFinalSync(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  *(void *)this = &unk_1F3C794F0;
  *((void *)this + 1) = 0;
  if (!v3) {
    return WTF::fastFree(this, a2);
  }
  if (atomic_fetch_add(v3, 0xFFFFFFFF) != 1) {
    return WTF::fastFree(this, a2);
  }
  atomic_store(1u, (unsigned int *)v3);
  char v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C79468;
  v5[1] = v3;
  int v7 = v5;
  WTF::ensureOnMainThread();
  if (!v7) {
    return WTF::fastFree(this, a2);
  }
  (*(void (**)(void *))(*v7 + 8))(v7);
  return WTF::fastFree(this, v6);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::scheduleFinalSync(void)::$_0,void>::call(WTF::StringImpl **result)
{
  uint64_t v1 = result[1];
  if (!*((void *)v1 + 13)) {
    return result;
  }
  uint64_t result = (WTF::StringImpl **)WebCore::SQLiteDatabase::prepareStatement();
  int v2 = v17;
  if (v17)
  {
    int v3 = -1;
    if (v17 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t result = (WTF::StringImpl **)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v16);
  if (result != 100)
  {
    int v3 = -1;
    int v2 = v17;
    if (v17 == -1) {
      goto LABEL_5;
    }
LABEL_4:
    uint64_t result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1F3C794D0[v2])(&v15, v16);
    goto LABEL_5;
  }
  if (v17)
  {
    char v11 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>(v11, v12, v13, v14);
  }
  uint64_t result = (WTF::StringImpl **)WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v16);
  int v3 = (int)result;
  int v2 = v17;
  if (v17 != -1) {
    goto LABEL_4;
  }
LABEL_5:
  if (v3) {
    return result;
  }
  char v4 = (WebKit::StorageTracker *)WebCore::SQLiteDatabase::close((WTF::StringImpl *)((char *)v1 + 96));
  if (*(unsigned char *)(WebKit::StorageTracker::tracker(v4) + 128))
  {
    WTF::String::isolatedCopy();
    char v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)char v5 = &unk_1F3C79540;
    uint64_t v6 = v15;
    uint64_t v15 = 0;
    v16[0] = v5;
    *((void *)v5 + 1) = v6;
    WTF::callOnMainThread();
    char v8 = v16[0];
    v16[0] = 0;
    if (v8) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v8 + 8))(v8);
    }
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result)
    {
      int v9 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_16:
        *(_DWORD *)uint64_t result = v9;
        return result;
      }
      return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    }
  }
  else
  {
    WebCore::StorageSyncManager::fullDatabaseFilename(*((WebCore::StorageSyncManager **)v1 + 11), (WTF::StringImpl *)((char *)v1 + 160), v16);
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v16, v10);
    uint64_t result = (WTF::StringImpl **)v16[0];
    v16[0] = 0;
    if (result)
    {
      int v9 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2) {
        goto LABEL_16;
      }
      return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>@<X0>(uint64_t *a1@<X0>, StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    uint64_t v8 = *a1;
    if (!*a1)
    {
      int v9 = 0;
      char v10 = *(WTF::StringImpl **)a2;
      unsigned int v11 = *(_DWORD *)(*(void *)a2 + 16);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  char v10 = *(WTF::StringImpl **)a2;
  unsigned int v11 = *(_DWORD *)(*(void *)a2 + 16);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  uint64_t v13 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = v12 & v9;
    char v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    int v17 = *v16;
    if (*v16 == (WTF::StringImpl *)-1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!v17)
    {
      if (v13)
      {
        const WTF::StringImpl *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        char v16 = v13;
      }
      uint64_t v20 = *(WTF::StringImpl **)a2;
      if (*(void *)a2) {
        *(_DWORD *)v20 += 2;
      }
      *char v16 = v20;
      uint64_t v21 = *(WTF::StringImpl ***)a3;
      if (*(void *)a3) {
        *(_DWORD *)v21 += 2;
      }
      uint64_t result = (WTF::StringImpl **)v16[1];
      v16[1] = (WTF::StringImpl *)v21;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          uint64_t v23 = *a1;
          if (*a1)
          {
LABEL_25:
            ++*(_DWORD *)(v23 - 12);
            uint64_t v24 = *a1;
            if (*a1) {
              goto LABEL_26;
            }
            goto LABEL_39;
          }
LABEL_38:
          *(_DWORD *)(v23 - 12) = 1;
          uint64_t v24 = *a1;
          if (*a1)
          {
LABEL_26:
            uint64_t v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
            unint64_t v26 = *(unsigned int *)(v24 - 4);
            if (v26 <= 0x400) {
              goto LABEL_27;
            }
            goto LABEL_40;
          }
LABEL_39:
          uint64_t v25 = *(unsigned int *)(v24 - 16);
          unint64_t v26 = *(unsigned int *)(v24 - 4);
          if (v26 <= 0x400)
          {
LABEL_27:
            if (3 * v26 > 4 * v25)
            {
LABEL_43:
              *(void *)a4 = v16;
              *(void *)(a4 + 8) = v24 + 16 * v26;
              *(unsigned char *)(a4 + 16) = 1;
              return result;
            }
            if (!v26)
            {
              uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, v16);
              char v16 = result;
              uint64_t v24 = *a1;
              if (!*a1)
              {
LABEL_30:
                unint64_t v26 = 0;
                goto LABEL_43;
              }
LABEL_42:
              unint64_t v26 = *(unsigned int *)(v24 - 4);
              goto LABEL_43;
            }
LABEL_41:
            uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), v16);
            char v16 = result;
            uint64_t v24 = *a1;
            if (!*a1) {
              goto LABEL_30;
            }
            goto LABEL_42;
          }
LABEL_40:
          if (v26 > 2 * v25) {
            goto LABEL_43;
          }
          goto LABEL_41;
        }
        *(_DWORD *)result -= 2;
      }
      uint64_t v23 = *a1;
      if (*a1) {
        goto LABEL_25;
      }
      goto LABEL_38;
    }
    if (WTF::equal(v17, *(const WTF::StringImpl **)a2, a3)) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a1;
  if (*a1) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v18 + 16 * v19;
  *(unsigned char *)(a4 + 16) = 0;
  unsigned __int8 v27 = (WTF::StringImpl ***)(v8 + 16 * v15 + 8);
  int v28 = *(WTF::StringImpl ***)a3;
  if (*(void *)a3) {
    *(_DWORD *)v28 += 2;
  }
  uint64_t result = *v27;
  WebCore::SQLiteDatabaseTracker *v27 = v28;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1)
          {
            int v18 = *(_DWORD *)(v17 - 8);
            unsigned int v19 = *((_DWORD *)v14 + 4);
            if (v19 >= 0x100) {
              goto LABEL_18;
            }
LABEL_23:
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            int v18 = 0;
            unsigned int v19 = *((_DWORD *)v14 + 4);
            if (v19 < 0x100) {
              goto LABEL_23;
            }
LABEL_18:
            unsigned int v20 = v19 >> 8;
          }
          int v22 = 0;
          do
          {
            uint64_t v23 = v20 & v18;
            unsigned int v20 = ++v22 + v23;
          }
          while (*(void *)(v17 + 16 * v23));
          uint64_t v24 = (WTF::StringImpl **)(v17 + 16 * v23);
          uint64_t v25 = v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 != 2)
            {
              *(_DWORD *)v25 -= 2;
              goto LABEL_29;
            }
            WTF::StringImpl::destroy(v25, v10);
            unint64_t v26 = *v24;
            WTF::StringImpl *v24 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2) {
                WTF::StringImpl::destroy(v26, v10);
              }
              else {
                *(_DWORD *)v26 -= 2;
              }
            }
          }
          else
          {
LABEL_29:
            WTF::StringImpl *v24 = 0;
          }
          unsigned __int8 v27 = *v13;
          const WTF::StringImpl *v13 = 0;
          WTF::StringImpl *v24 = v27;
          uint64_t v28 = v6 + 16 * v11;
          unsigned __int8 v29 = *(WTF::StringImpl **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v24[1] = v29;
          int v30 = *(WTF::StringImpl **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 != 2)
            {
              *(_DWORD *)v30 -= 2;
              goto LABEL_38;
            }
            WTF::StringImpl::destroy(v30, v10);
            unsigned __int8 v31 = *v13;
            const WTF::StringImpl *v13 = 0;
            if (v31)
            {
LABEL_41:
              if (*(_DWORD *)v31 == 2) {
                WTF::StringImpl::destroy(v31, v10);
              }
              else {
                *(_DWORD *)v31 -= 2;
              }
            }
          }
          else
          {
LABEL_38:
            unsigned __int8 v31 = *v13;
            const WTF::StringImpl *v13 = 0;
            if (v31) {
              goto LABEL_41;
            }
          }
          if (v13 == a3) {
            unsigned int v12 = v24;
          }
          goto LABEL_9;
        }
        uint64_t v15 = v6 + 16 * v11;
        char v16 = *(WTF::StringImpl **)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v10);
            uint64_t v21 = *v13;
            const WTF::StringImpl *v13 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v10);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
            goto LABEL_9;
          }
          *(_DWORD *)v16 -= 2;
        }
        const WTF::StringImpl *v13 = 0;
      }
LABEL_9:
      if (++v11 == v7) {
        goto LABEL_44;
      }
    }
  }
  unsigned int v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::String>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      int v9 = 0;
      char v10 = *a3;
      unsigned int v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  char v10 = *a3;
  unsigned int v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  uint64_t v13 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = v12 & v9;
    char v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    if (*v16 == (WTF::StringImpl *)-1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!v17)
    {
      if (v13)
      {
        const WTF::StringImpl *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        char v16 = v13;
      }
      unsigned int v20 = *a3;
      *a3 = 0;
      uint64_t v21 = *v16;
      *char v16 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, (StringImpl *)a2);
          unint64_t v26 = *a4;
          *a4 = 0;
          uint64_t result = (WTF::StringImpl **)v16[1];
          v16[1] = v26;
          if (!result) {
            goto LABEL_29;
          }
LABEL_27:
          if (*(_DWORD *)result == 2)
          {
            uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
            uint64_t v27 = *a2;
            if (*a2)
            {
LABEL_30:
              ++*(_DWORD *)(v27 - 12);
              uint64_t v28 = *a2;
              if (*a2) {
                goto LABEL_31;
              }
              goto LABEL_38;
            }
LABEL_37:
            *(_DWORD *)(v27 - 12) = 1;
            uint64_t v28 = *a2;
            if (*a2)
            {
LABEL_31:
              uint64_t v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
              unint64_t v30 = *(unsigned int *)(v28 - 4);
              if (v30 <= 0x400) {
                goto LABEL_32;
              }
              goto LABEL_39;
            }
LABEL_38:
            uint64_t v29 = *(unsigned int *)(v28 - 16);
            unint64_t v30 = *(unsigned int *)(v28 - 4);
            if (v30 <= 0x400)
            {
LABEL_32:
              if (3 * v30 > 4 * v29)
              {
LABEL_42:
                *(void *)a1 = v16;
                *(void *)(a1 + 8) = v28 + 16 * v30;
                *(unsigned char *)(a1 + 16) = 1;
                return result;
              }
              if (!v30)
              {
                uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v16);
                char v16 = result;
                uint64_t v28 = *a2;
                if (!*a2)
                {
LABEL_35:
                  unint64_t v30 = 0;
                  goto LABEL_42;
                }
LABEL_41:
                unint64_t v30 = *(unsigned int *)(v28 - 4);
                goto LABEL_42;
              }
LABEL_40:
              uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30)), v16);
              char v16 = result;
              uint64_t v28 = *a2;
              if (!*a2) {
                goto LABEL_35;
              }
              goto LABEL_41;
            }
LABEL_39:
            if (v30 > 2 * v29) {
              goto LABEL_42;
            }
            goto LABEL_40;
          }
          *(_DWORD *)result -= 2;
LABEL_29:
          uint64_t v27 = *a2;
          if (*a2) {
            goto LABEL_30;
          }
          goto LABEL_37;
        }
        *(_DWORD *)v21 -= 2;
      }
      int v22 = *a4;
      *a4 = 0;
      uint64_t result = (WTF::StringImpl **)v16[1];
      v16[1] = v22;
      if (!result) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    if (WTF::equal(v17, *a3, (const WTF::StringImpl *)a3)) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a2;
  if (*a2) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v18 + 16 * v19;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v24 = v8 + 16 * v15;
  uint64_t v25 = *a4;
  *a4 = 0;
  uint64_t result = *(WTF::StringImpl ***)(v24 + 8);
  *(void *)(v24 + 8) = v25;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::syncTimerFired(void)::$_0,void>::~CallableWrapper(void *a1)
{
  int v2 = (atomic_uint *)a1[1];
  *a1 = &unk_1F3C79518;
  a1[1] = 0;
  if (!v2) {
    return a1;
  }
  if (atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  char v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v4 = &unk_1F3C79468;
  v4[1] = v2;
  char v5 = v4;
  WTF::ensureOnMainThread();
  if (!v5) {
    return a1;
  }
  (*(void (**)(void *))(*v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::syncTimerFired(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (atomic_uint *)*((void *)this + 1);
  *(void *)this = &unk_1F3C79518;
  *((void *)this + 1) = 0;
  if (!v3) {
    return WTF::fastFree(this, a2);
  }
  if (atomic_fetch_add(v3, 0xFFFFFFFF) != 1) {
    return WTF::fastFree(this, a2);
  }
  atomic_store(1u, (unsigned int *)v3);
  char v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C79468;
  v5[1] = v3;
  int v7 = v5;
  WTF::ensureOnMainThread();
  if (!v7) {
    return WTF::fastFree(this, a2);
  }
  (*(void (**)(void *))(*v7 + 8))(v7);
  return WTF::fastFree(this, v6);
}

WebCore::SQLiteDatabaseTracker *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::syncTimerFired(void)::$_0,void>::call(WebCore::SQLiteDatabaseTracker *result, StringImpl *a2)
{
  char v2 = 0;
  uint64_t v3 = *((void *)result + 1);
  char v4 = (atomic_uchar *)(v3 + 168);
  int v5 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 168), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)MEMORY[0x1E4E44220](v3 + 168);
  }
  int v6 = *(unsigned __int8 *)(v3 + 184);
  int v7 = *(void **)(v3 + 176);
  *(void *)(v3 + 176) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  *(_WORD *)(v3 + 185) = 256;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v7) {
      goto LABEL_5;
    }
LABEL_12:
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t result = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 168));
  if (!v7) {
    goto LABEL_12;
  }
LABEL_5:
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *((_DWORD *)v7 - 3) != 0;
  }
  if (!v8)
  {
LABEL_13:
    if (!*(unsigned char *)(v3 + 188)) {
      goto LABEL_71;
    }
  }
LABEL_14:
  if (*(unsigned char *)(v3 + 187)) {
    goto LABEL_71;
  }
  if (*(void *)(v3 + 104)) {
    goto LABEL_95;
  }
  if (*(unsigned char *)(v3 + 188))
  {
    *(unsigned char *)(v3 + 188) = 0;
    goto LABEL_71;
  }
  uint64_t result = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageAreaSync::openDatabase(v3, 0);
  if (*(void *)(v3 + 104))
  {
LABEL_95:
    if (*(unsigned char *)(v3 + 188))
    {
      *(unsigned char *)(v3 + 188) = 0;
      uint64_t result = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v3 + 96));
      goto LABEL_71;
    }
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(result);
    if (!v6) {
      goto LABEL_29;
    }
    int v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
    int v10 = v32;
    if (v32)
    {
      BOOL v11 = 1;
    }
    else
    {
      int v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v31);
      BOOL v11 = v9 != 101;
      int v10 = v32;
    }
    if (v10 != -1) {
      int v9 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C794D0[v10])(v29, v31);
    }
    if (!v11)
    {
LABEL_29:
      int v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
      int v12 = v32;
      if (!v32)
      {
        int v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
        int v13 = v30;
        if (!v30)
        {
          if (v7) {
            uint64_t v14 = &v7[2 * *((unsigned int *)v7 - 1)];
          }
          else {
            uint64_t v14 = 0;
          }
          WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)v28, (WebCore::SQLiteDatabase *)(v3 + 96));
          WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v28);
          if (v7)
          {
            uint64_t v15 = *((unsigned int *)v7 - 1);
            char v16 = &v7[2 * v15];
            if (*((_DWORD *)v7 - 3))
            {
              uint64_t v17 = v7;
              if (v15)
              {
                uint64_t v18 = 16 * v15;
                uint64_t v17 = v7;
                while ((unint64_t)(*v17 + 1) <= 1)
                {
                  v17 += 2;
                  v18 -= 16;
                  if (!v18)
                  {
                    uint64_t v17 = v16;
                    break;
                  }
                }
              }
            }
            else
            {
              uint64_t v17 = &v7[2 * v15];
              char v16 = v17;
            }
          }
          else
          {
            uint64_t v17 = 0;
            char v16 = 0;
          }
          if (v14 != v17)
          {
            while (1)
            {
              uint64_t v19 = v17 + 1;
              if (v17[1]) {
                unsigned int v20 = v31;
              }
              else {
                unsigned int v20 = v29;
              }
              if (*((_DWORD *)v20 + 6))
              {
LABEL_92:
                std::__throw_bad_variant_access[abi:sn180100]();
                return (WebCore::SQLiteDatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
              }
              if (*v17)
              {
                WebCore::SQLiteStatement::bindText();
                if (!*v19) {
                  goto LABEL_56;
                }
              }
              else
              {
                WebCore::SQLiteStatement::bindText();
                if (!*v19) {
                  goto LABEL_56;
                }
              }
              if (*((_DWORD *)v20 + 6)) {
                goto LABEL_92;
              }
              WebCore::SQLiteStatement::bindBlob((WebCore::SQLiteStatement *)v20, 2, (const WTF::String *)(v17 + 1));
LABEL_56:
              if (*((_DWORD *)v20 + 6)) {
                goto LABEL_92;
              }
              if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v20) == 101)
              {
                if (*((_DWORD *)v20 + 6)) {
                  goto LABEL_92;
                }
                WebCore::SQLiteStatement::reset((WebCore::SQLiteStatement *)v20);
                uint64_t v21 = v17 + 2;
                uint64_t v17 = v16;
                if (v21 != v16)
                {
                  uint64_t v17 = v21;
                  while ((unint64_t)(*v17 + 1) <= 1)
                  {
                    v17 += 2;
                    if (v17 == v16)
                    {
                      uint64_t v17 = v16;
                      break;
                    }
                  }
                }
                if (v17 != v14) {
                  continue;
                }
              }
              break;
            }
          }
          WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)v28);
          int v9 = (WebCore::SQLiteDatabaseTracker *)MEMORY[0x1E4E469D0](v28);
          int v13 = v30;
        }
        if (v13 != -1) {
          int v9 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C794D0[v13])(v28, v29);
        }
        int v12 = v32;
      }
      if (v12 != -1) {
        int v9 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C794D0[v12])(v29, v31);
      }
    }
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v9);
  }
LABEL_71:
  char v22 = 0;
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
  if (!v22)
  {
    *(unsigned char *)(v3 + 186) = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 168), (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 == 1) {
      goto LABEL_73;
    }
LABEL_90:
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 168));
    if (!v7) {
      return result;
    }
    goto LABEL_74;
  }
  uint64_t result = (WebCore::SQLiteDatabaseTracker *)MEMORY[0x1E4E44220](v3 + 168);
  *(unsigned char *)(v3 + 186) = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 168), (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    goto LABEL_90;
  }
LABEL_73:
  if (!v7) {
    return result;
  }
LABEL_74:
  uint64_t v24 = *((unsigned int *)v7 - 1);
  if (v24)
  {
    for (int i = (WTF::StringImpl **)v7; ; i += 2)
    {
      unint64_t v26 = *i;
      if (*i == (WTF::StringImpl *)-1) {
        goto LABEL_77;
      }
      uint64_t v27 = i[1];
      i[1] = 0;
      if (!v27) {
        goto LABEL_82;
      }
      if (*(_DWORD *)v27 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v27, a2);
      unint64_t v26 = *i;
      *int i = 0;
      if (v26)
      {
LABEL_85:
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, a2);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
LABEL_77:
      if (!--v24) {
        return (WebCore::SQLiteDatabaseTracker *)WTF::fastFree((WTF *)(v7 - 2), a2);
      }
    }
    *(_DWORD *)v27 -= 2;
LABEL_82:
    *int i = 0;
    if (v26) {
      goto LABEL_85;
    }
    goto LABEL_77;
  }
  return (WebCore::SQLiteDatabaseTracker *)WTF::fastFree((WTF *)(v7 - 2), a2);
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  return WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::~CallableWrapper();
}

void *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1F3C79540;
  a1[1] = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1F3C79540;
  *((void *)this + 1) = 0;
  if (!v3)
  {
LABEL_4:
    char v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  char v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::call(WebKit::StorageTracker *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  char v2 = (WTF::StringImpl *)WebKit::StorageTracker::tracker(a1);
  if (*((void *)a1 + 1))
  {
    uint64_t result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v7) {
      return result;
    }
  }
  else
  {
    uint64_t result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v7) {
      return result;
    }
  }
  uint64_t result = (uint64_t)WebKit::StorageTracker::deleteOrigin(v2, (const WebCore::SecurityOriginData *)v5);
  if (v7)
  {
    if (v6 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v6])(&v4, v5);
    }
  }
  return result;
}

unsigned int *WebKit::StorageNamespaceImpl::getOrCreateLocalStorageNamespace@<X0>(const WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, SessionID a3@<0:X3>, const WTF::StringImpl *a4@<X2>, uint64_t *a5@<X8>)
{
  int v5 = (int)a2;
  if ((_MergedGlobals_6 & 1) == 0)
  {
    qword_1EB3A9650 = 0;
    _MergedGlobals_6 = 1;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
    uint64_t v8 = qword_1EB3A9650;
    if (qword_1EB3A9650) {
      goto LABEL_4;
    }
LABEL_7:
    int v9 = 0;
    int v10 = *this;
    unsigned int v11 = *((_DWORD *)*this + 4);
    if (v11 >= 0x100) {
      goto LABEL_5;
    }
LABEL_8:
    unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
    goto LABEL_9;
  }
  uint64_t v8 = qword_1EB3A9650;
  if (!qword_1EB3A9650)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
    uint64_t v8 = qword_1EB3A9650;
    if (!qword_1EB3A9650) {
      goto LABEL_7;
    }
  }
LABEL_4:
  int v9 = *(_DWORD *)(v8 - 8);
  int v10 = *this;
  unsigned int v11 = *((_DWORD *)*this + 4);
  if (v11 < 0x100) {
    goto LABEL_8;
  }
LABEL_5:
  unsigned int v12 = v11 >> 8;
LABEL_9:
  int v13 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = v12 & v9;
    char v16 = (WTF **)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    if (*v16 == (WTF *)-1)
    {
      int v13 = (WTF **)(v8 + 16 * v15);
      goto LABEL_11;
    }
    if (!v17) {
      break;
    }
    uint64_t result = (unsigned int *)WTF::equal(v17, *this, a4);
    if (result)
    {
      uint64_t v19 = *(void *)(*(void *)(v8 + 16 * v15 + 8) + 8);
      ++*(_DWORD *)(v19 + 8);
      goto LABEL_37;
    }
LABEL_11:
    unsigned int v12 = i + v15;
  }
  if (v13)
  {
    const WTF::StringImpl *v13 = 0;
    v13[1] = 0;
    --*(_DWORD *)(qword_1EB3A9650 - 16);
    char v16 = v13;
  }
  unsigned int v20 = *this;
  if (*this) {
    *(_DWORD *)v20 += 2;
  }
  *char v16 = v20;
  uint64_t v19 = WTF::fastMalloc((WTF *)0x48);
  if (!*(void *)(WebKit::StorageNamespaceImpl::StorageNamespaceImpl(v19, 1, (uint64_t)this, v5, (uint64_t)a4) + 16)
    && (uint64_t v22 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)uint64_t v22 = 1,
        *(void *)(v22 + 8) = v19,
        int v23 = *(unsigned int **)(v19 + 16),
        *(void *)(v19 + 16) = v22,
        v23)
    && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v21);
    uint64_t v29 = *(atomic_uint **)(v19 + 16);
    atomic_fetch_add(v29, 1u);
    uint64_t result = (unsigned int *)v16[1];
    v16[1] = (WTF *)v29;
    if (result) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v24 = *(atomic_uint **)(v19 + 16);
    atomic_fetch_add(v24, 1u);
    uint64_t result = (unsigned int *)v16[1];
    v16[1] = (WTF *)v24;
    if (result)
    {
LABEL_24:
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
      }
    }
  }
  if (qword_1EB3A9650)
  {
    ++*(_DWORD *)(qword_1EB3A9650 - 12);
    uint64_t v25 = qword_1EB3A9650;
    if (qword_1EB3A9650)
    {
      uint64_t v26 = (*(_DWORD *)(qword_1EB3A9650 - 16) + *(_DWORD *)(qword_1EB3A9650 - 12));
      unint64_t v27 = *(unsigned int *)(qword_1EB3A9650 - 4);
      if (v27 <= 0x400) {
        goto LABEL_29;
      }
LABEL_34:
      if (v27 <= 2 * v26)
      {
LABEL_35:
        unsigned int v28 = v27 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v27));
        goto LABEL_36;
      }
      goto LABEL_37;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v25 = 0;
  }
  uint64_t v26 = *(unsigned int *)(v25 - 16);
  unint64_t v27 = *(unsigned int *)(v25 - 4);
  if (v27 > 0x400) {
    goto LABEL_34;
  }
LABEL_29:
  if (3 * v27 <= 4 * v26)
  {
    if (v27) {
      goto LABEL_35;
    }
    unsigned int v28 = 8;
LABEL_36:
    uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v28);
  }
LABEL_37:
  *a5 = v19;
  return result;
}

uint64_t WebKit::StorageNamespaceImpl::StorageNamespaceImpl(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F3C79568;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a2;
  uint64_t v8 = a1 + 40;
  WTF::String::isolatedCopy();
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 56) = a4;
  *(unsigned char *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = a5;
  if (*(unsigned __int8 *)(a1 + 32) - 1 > 1) {
    return a1;
  }
  if (!*(void *)v8) {
    return a1;
  }
  if (!*(_DWORD *)(*(void *)v8 + 4)) {
    return a1;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v9 = 1;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(unsigned char *)(v10 + 64) = 0;
  *(void *)(v9 + 8) = v10;
  WTF::String::isolatedCopy();
  WebCore::StorageThread::start(*(void *)(v9 + 8));
  unsigned int v12 = *(WebCore::StorageSyncManager **)(a1 + 48);
  *(void *)(a1 + 48) = v9;
  if (!v12) {
    return a1;
  }
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    return a1;
  }
  WebCore::StorageSyncManager::~StorageSyncManager(v12, v11);
  WTF::fastFree(v14, v15);
  return a1;
}

void WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(WebKit::StorageNamespaceImpl *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  if (*((unsigned __int8 *)this + 32) - 1 > 1) {
    goto LABEL_35;
  }
  if ((_MergedGlobals_6 & 1) == 0) {
    goto LABEL_68;
  }
  uint64_t v4 = qword_1EB3A9650;
  if (!qword_1EB3A9650) {
    goto LABEL_35;
  }
  unsigned int v5 = *(_DWORD *)(qword_1EB3A9650 - 8);
  int v6 = (WTF::StringImpl *)*((void *)this + 5);
  unsigned int v7 = *((_DWORD *)v6 + 4);
  int v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(v6) : v7 >> 8;
  for (i = 0; ; int v8 = ++i + v10)
  {
    uint64_t v10 = v8 & v5;
    unsigned int v11 = *(WTF **)(v4 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11) {
        goto LABEL_35;
      }
      if (WTF::equal(v11, *((const WTF::StringImpl **)this + 5), a3)) {
        break;
      }
    }
  }
  uint64_t v12 = v4 + 16 * v10;
  uint64_t v13 = qword_1EB3A9650;
  if (qword_1EB3A9650)
  {
    uint64_t v13 = qword_1EB3A9650 + 16 * *(unsigned int *)(qword_1EB3A9650 - 4);
    if (v13 == v12) {
      goto LABEL_35;
    }
  }
  if (v13 == v12) {
    goto LABEL_35;
  }
  uint64_t v14 = *(WTF::StringImpl **)v12;
  *(void *)uint64_t v12 = -1;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, a2);
      uint64_t v15 = *(atomic_uint **)(v12 + 8);
      *(void *)(v12 + 8) = 0;
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    *(_DWORD *)v14 -= 2;
  }
  uint64_t v15 = *(atomic_uint **)(v12 + 8);
  *(void *)(v12 + 8) = 0;
  if (!v15)
  {
LABEL_24:
    uint64_t v16 = qword_1EB3A9650;
    ++*(_DWORD *)(qword_1EB3A9650 - 16);
    if (v16) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
LABEL_23:
  if (atomic_fetch_add(v15, 0xFFFFFFFF) != 1) {
    goto LABEL_24;
  }
  atomic_store(1u, (unsigned int *)v15);
  WTF::fastFree((WTF *)v15, a2);
  uint64_t v16 = qword_1EB3A9650;
  ++*(_DWORD *)(qword_1EB3A9650 - 16);
  if (v16)
  {
LABEL_25:
    --*(_DWORD *)(v16 - 12);
    uint64_t v17 = qword_1EB3A9650;
    if (!qword_1EB3A9650) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(_DWORD *)(v16 - 12) = -1;
  uint64_t v17 = qword_1EB3A9650;
  if (!qword_1EB3A9650) {
    goto LABEL_35;
  }
LABEL_29:
  unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
  unsigned int v19 = *(_DWORD *)(v17 - 4);
  if (v18 < v19 && v19 >= 9) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v19 >> 1);
  }
LABEL_35:
  if (!*((unsigned char *)this + 60)) {
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v21 = (WebCore::StorageSyncManager *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (!v21) {
      goto LABEL_40;
    }
    if (*(_DWORD *)v21 != 1)
    {
      --*(_DWORD *)v21;
LABEL_40:
      uint64_t v22 = (WTF::StringImpl *)*((void *)this + 5);
      *((void *)this + 5) = 0;
      if (!v22) {
        goto LABEL_45;
      }
      goto LABEL_43;
    }
    WebCore::StorageSyncManager::~StorageSyncManager(v21, a2);
    WTF::fastFree(v23, v24);
    uint64_t v22 = (WTF::StringImpl *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v22) {
      goto LABEL_45;
    }
LABEL_43:
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
LABEL_45:
      uint64_t v25 = *((void *)this + 3);
      if (!v25) {
        break;
      }
      goto LABEL_51;
    }
    WTF::StringImpl::destroy(v22, a2);
    uint64_t v25 = *((void *)this + 3);
    if (!v25) {
      break;
    }
LABEL_51:
    uint64_t v28 = *(unsigned int *)(v25 - 4);
    if (!v28)
    {
LABEL_65:
      WTF::fastFree((WTF *)(v25 - 16), a2);
      uint64_t v26 = *((void *)this + 2);
      if (!v26) {
        goto LABEL_66;
      }
      goto LABEL_47;
    }
    uint64_t v29 = v25;
    while (1)
    {
      uint64_t v30 = *(unsigned int *)(v29 + 24);
      if (v30) {
        break;
      }
      if (*(void *)v29 == -1) {
        goto LABEL_56;
      }
LABEL_61:
      unsigned __int8 v31 = *(_DWORD **)(v29 + 32);
      *(void *)(v29 + 32) = 0;
      if (v31)
      {
        if (v31[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
          uint64_t v30 = *(unsigned int *)(v29 + 24);
          if (v30 == -1) {
            goto LABEL_55;
          }
        }
        else
        {
          --v31[2];
        }
      }
      ((void (*)(char *, uint64_t))off_1F3C795A8[v30])(&v32, v29);
LABEL_55:
      *(_DWORD *)(v29 + 24) = -1;
LABEL_56:
      v29 += 40;
      if (!--v28) {
        goto LABEL_65;
      }
    }
    if (v30 == 1) {
      goto LABEL_61;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_68:
    qword_1EB3A9650 = 0;
    _MergedGlobals_6 = 1;
    if (!*((unsigned char *)this + 60)) {
LABEL_36:
    }
      WebKit::StorageNamespaceImpl::close(this, a2, a3);
  }
  uint64_t v26 = *((void *)this + 2);
  if (!v26)
  {
LABEL_66:
    *((void *)this + 2) = 0;
    return;
  }
LABEL_47:
  *(void *)(v26 + 8) = 0;
  unint64_t v27 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v27)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(this, a2, a3);
  WTF::fastFree(v3, v4);
}

void WebKit::StorageNamespaceImpl::close(WebKit::StorageNamespaceImpl *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)this + 60) && *((unsigned char *)this + 32))
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 - 4);
      uint64_t v6 = v4 + 40 * v5;
      if (*(_DWORD *)(v4 - 12))
      {
        if (v5)
        {
          uint64_t v7 = 40 * v5;
          while (1)
          {
            int v8 = *(_DWORD *)(v4 + 24);
            if (v8) {
              break;
            }
            BOOL v10 = *(_OWORD *)v4 == 0 && *(unsigned char *)(v4 + 18) == 0;
            if (*(void *)v4 != -1 && !v10) {
              goto LABEL_24;
            }
            v4 += 40;
            v7 -= 40;
            if (!v7)
            {
              uint64_t v4 = v6;
              goto LABEL_24;
            }
          }
          if (v8 != 1)
          {
LABEL_47:
            unsigned int v19 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
            WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(v19);
            return;
          }
        }
LABEL_24:
        while (v4 != v6)
        {
          uint64_t v13 = *(WebKit::StorageAreaSync **)(*(void *)(v4 + 32) + 40);
          if (v13) {
            WebKit::StorageAreaSync::scheduleFinalSync(v13, a2, a3);
          }
          uint64_t v14 = v4 + 40;
          uint64_t v4 = v6;
          if (v14 != v6)
          {
            uint64_t v4 = v14;
            while (1)
            {
              int v15 = *(_DWORD *)(v4 + 24);
              if (v15) {
                break;
              }
              BOOL v17 = *(_OWORD *)v4 == 0 && *(unsigned char *)(v4 + 18) == 0;
              if (*(void *)v4 != -1 && !v17) {
                goto LABEL_29;
              }
              v4 += 40;
              if (v4 == v6)
              {
                uint64_t v4 = v6;
                goto LABEL_29;
              }
            }
            if (v15 != 1) {
              goto LABEL_47;
            }
          }
LABEL_29:
          ;
        }
      }
    }
    uint64_t v12 = (WebCore::StorageSyncManager *)*((void *)this + 6);
    if (v12) {
      WebCore::StorageSyncManager::close(v12);
    }
    *((unsigned char *)this + 60) = 1;
  }
}

_DWORD *WebKit::StorageNamespaceImpl::copy@<X0>(WebKit::StorageNamespaceImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v45 = WTF::fastMalloc((WTF *)0x48);
  uint64_t result = (_DWORD *)WebKit::StorageNamespaceImpl::StorageNamespaceImpl(v45, *((unsigned char *)this + 32), (uint64_t)this + 40, *((_DWORD *)this + 14), *((void *)this + 8));
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 40 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v9 = *((void *)this + 3);
      if (v7)
      {
        uint64_t v10 = 40 * v7;
        uint64_t v9 = v6;
        while (1)
        {
          int v11 = *(_DWORD *)(v9 + 24);
          if (v11) {
            break;
          }
          BOOL v13 = *(_OWORD *)v9 == 0 && *(unsigned char *)(v9 + 18) == 0;
          if (*(void *)v9 != -1 && !v13) {
            goto LABEL_21;
          }
          v9 += 40;
          v10 -= 40;
          if (!v10)
          {
            uint64_t v9 = v8;
            goto LABEL_21;
          }
        }
        if (v11 != 1)
        {
LABEL_92:
          unsigned int v42 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          return (_DWORD *)WebKit::StorageNamespaceImpl::storageArea(v42, v43);
        }
      }
      goto LABEL_21;
    }
    uint64_t v9 = v6 + 40 * v7;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v7) = 0;
  }
  uint64_t v8 = v6 + 40 * v7;
LABEL_21:
  uint64_t v44 = a2;
  if (v6)
  {
    uint64_t v15 = v6 + 40 * *(unsigned int *)(v6 - 4);
    if (v15 == v9) {
      goto LABEL_90;
    }
  }
  else
  {
    uint64_t v15 = 0;
    if (!v9) {
      goto LABEL_90;
    }
  }
  uint64_t v16 = (uint64_t *)(v45 + 24);
  while (2)
  {
    WebKit::StorageAreaImpl::copy(*(WebKit::StorageAreaImpl **)(v9 + 32), (uint64_t *)&v46);
    uint64_t v17 = *v16;
    if (*v16
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v16, 8u, 0), (uint64_t v17 = *v16) != 0))
    {
      int v18 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      int v18 = 0;
    }
    unsigned int v19 = WTF::computeHash<WebCore::SecurityOriginData>(v9);
    uint64_t v20 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v22 = v19 & v18;
      uint64_t v23 = v17 + 40 * (v19 & v18);
      int v24 = *(_DWORD *)(v23 + 24);
      if (v24 == 1) {
        goto LABEL_33;
      }
      if (v24) {
        goto LABEL_92;
      }
      if (*(_OWORD *)v23 == 0) {
        break;
      }
      if (*(void *)v23 != -1) {
        goto LABEL_33;
      }
      uint64_t v20 = v17 + 40 * v22;
LABEL_34:
      unsigned int v19 = i + v22;
    }
    if (!*(unsigned char *)(v23 + 18))
    {
      if (v20)
      {
        *(void *)(v20 + 32) = 0;
        *(_OWORD *)uint64_t v20 = 0u;
        *(_OWORD *)(v20 + 16) = 0u;
        --*(_DWORD *)(*v16 - 16);
        uint64_t v28 = *(unsigned int *)(v20 + 24);
        uint64_t v29 = *(unsigned int *)(v9 + 24);
        if (v28 == -1)
        {
          if (v29 == 0xFFFFFFFFLL)
          {
LABEL_55:
            uint64_t v30 = v46;
            uint16x8_t v46 = 0;
            unsigned __int8 v31 = *(_DWORD **)(v20 + 32);
            *(void *)(v20 + 32) = v30;
            if (v31)
            {
              if (v31[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
                uint64_t v32 = *v16;
                if (*v16)
                {
LABEL_59:
                  ++*(_DWORD *)(v32 - 12);
                  uint64_t v33 = *v16;
                  if (*v16) {
                    goto LABEL_60;
                  }
                  goto LABEL_66;
                }
LABEL_65:
                *(_DWORD *)(v32 - 12) = 1;
                uint64_t v33 = *v16;
                if (*v16)
                {
LABEL_60:
                  uint64_t v34 = (*(_DWORD *)(v33 - 16) + *(_DWORD *)(v33 - 12));
                  unint64_t v35 = *(unsigned int *)(v33 - 4);
                  if (v35 <= 0x400) {
                    goto LABEL_61;
                  }
                  goto LABEL_67;
                }
LABEL_66:
                uint64_t v34 = *(unsigned int *)(v33 - 16);
                unint64_t v35 = *(unsigned int *)(v33 - 4);
                if (v35 <= 0x400)
                {
LABEL_61:
                  if (3 * v35 > 4 * v34) {
                    goto LABEL_70;
                  }
                  if (!v35)
                  {
                    unsigned int v36 = 8;
LABEL_69:
                    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v16, v36, v20);
                    goto LABEL_70;
                  }
LABEL_68:
                  unsigned int v36 = v35 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v35));
                  goto LABEL_69;
                }
LABEL_67:
                if (v35 > 2 * v34) {
                  goto LABEL_70;
                }
                goto LABEL_68;
              }
              --v31[2];
            }
            uint64_t v32 = *v16;
            if (*v16) {
              goto LABEL_59;
            }
            goto LABEL_65;
          }
LABEL_54:
          uint64_t v47 = v20;
          ((void (*)(uint64_t *, uint64_t, uint64_t))off_1F3C795D8[v29])(&v47, v20, v9);
          goto LABEL_55;
        }
        if (v29 != 0xFFFFFFFFLL) {
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v29 = *(unsigned int *)(v9 + 24);
        if (v29 != -1)
        {
          uint64_t v20 = v17 + 40 * v22;
          goto LABEL_54;
        }
        uint64_t v28 = 0;
        uint64_t v20 = v17 + 40 * v22;
      }
      ((void (*)(uint64_t *, uint64_t))off_1F3C795A8[v28])(&v47, v20);
      *(_DWORD *)(v20 + 24) = -1;
      goto LABEL_55;
    }
LABEL_33:
    if (!WebCore::operator==()) {
      goto LABEL_34;
    }
    uint64_t v25 = v17 + 40 * v22;
    uint64_t v26 = v46;
    uint16x8_t v46 = 0;
    unint64_t v27 = *(_DWORD **)(v25 + 32);
    *(void *)(v25 + 32) = v26;
    if (v27)
    {
      if (v27[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
      }
      else {
        --v27[2];
      }
    }
LABEL_70:
    uint64_t result = v46;
    uint16x8_t v46 = 0;
    if (!result)
    {
LABEL_73:
      uint64_t v37 = v9 + 40;
      uint64_t v9 = v8;
      if (v37 == v8) {
        goto LABEL_27;
      }
      goto LABEL_74;
    }
    if (result[2] != 1)
    {
      --result[2];
      goto LABEL_73;
    }
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    uint64_t v37 = v9 + 40;
    uint64_t v9 = v8;
    if (v37 != v8)
    {
LABEL_74:
      uint64_t v9 = v37;
      while (1)
      {
        int v38 = *(_DWORD *)(v9 + 24);
        if (v38) {
          break;
        }
        BOOL v40 = *(_OWORD *)v9 == 0 && *(unsigned char *)(v9 + 18) == 0;
        if (*(void *)v9 != -1 && !v40) {
          goto LABEL_27;
        }
        v9 += 40;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          goto LABEL_27;
        }
      }
      if (v38 != 1) {
        goto LABEL_92;
      }
    }
LABEL_27:
    if (v9 != v15) {
      continue;
    }
    break;
  }
LABEL_90:
  *uint64_t v44 = v45;
  return result;
}

uint64_t WebKit::StorageNamespaceImpl::storageArea@<X0>(WebKit::StorageNamespaceImpl *this@<X0>, const WebCore::SecurityOrigin *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 24);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = (char *)a2 + 8;
  if (v5
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)this + 3, 8u, 0), (uint64_t v5 = *v4) != 0))
  {
    int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::computeHash<WebCore::SecurityOriginData>((uint64_t)v6);
  uint64_t v9 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v8 & v7;
    uint64_t v13 = v5 + 40 * (v8 & v7);
    int v14 = *(_DWORD *)(v13 + 24);
    if (v14 == 1) {
      goto LABEL_6;
    }
    if (v14) {
      break;
    }
    if (*(_OWORD *)v13 == 0)
    {
      if (*(unsigned char *)(v13 + 18)) {
        goto LABEL_6;
      }
      if (v9)
      {
        *(void *)(v9 + 32) = 0;
        *(_OWORD *)uint64_t v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        --*(_DWORD *)(*v4 - 16);
        int v15 = *(_DWORD *)(v9 + 24);
        uint64_t v16 = (atomic_uint *)a2;
        int v17 = *((_DWORD *)a2 + 8);
        if (v15 == -1)
        {
          if (v17 != -1) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v17 == -1)
          {
            uint64_t v13 = v9;
            goto LABEL_49;
          }
LABEL_21:
          uint64_t v37 = (WebCore::StorageSyncManager *)v9;
          ((void (*)(WebCore::StorageSyncManager **, uint64_t, char *))off_1F3C795D8[v17])(&v37, v9, v6);
        }
        char v18 = *((unsigned char *)this + 32);
        unsigned int v19 = (WebCore::StorageSyncManager *)*((void *)this + 6);
        if (v19) {
LABEL_23:
        }
          ++*(_DWORD *)v19;
      }
      else
      {
        uint64_t v16 = (atomic_uint *)a2;
        int v17 = *((_DWORD *)a2 + 8);
        if (v17 != -1)
        {
          uint64_t v9 = v5 + 40 * (v8 & v7);
          goto LABEL_21;
        }
        int v15 = 0;
        uint64_t v9 = v5 + 40 * (v8 & v7);
LABEL_49:
        ((void (*)(WebCore::StorageSyncManager **, uint64_t))off_1F3C795A8[v15])(&v37, v13);
        *(_DWORD *)(v13 + 24) = -1;
        char v18 = *((unsigned char *)this + 32);
        unsigned int v19 = (WebCore::StorageSyncManager *)*((void *)this + 6);
        if (v19) {
          goto LABEL_23;
        }
      }
      uint64_t v37 = v19;
      WebKit::StorageAreaImpl::create(v18, v16, (uint64_t *)&v37, &v36);
      uint64_t v21 = v37;
      uint64_t v37 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 != 1)
        {
          --*(_DWORD *)v21;
          goto LABEL_27;
        }
        WebCore::StorageSyncManager::~StorageSyncManager(v21, v20);
        WTF::fastFree(v23, v24);
        uint64_t v25 = v36;
        uint64_t v36 = 0;
        uint64_t result = *(void *)(v9 + 32);
        *(void *)(v9 + 32) = v25;
        if (result)
        {
LABEL_30:
          int v26 = *(_DWORD *)(result + 8) - 1;
          if (*(_DWORD *)(result + 8) != 1) {
            goto LABEL_31;
          }
          (*(void (**)(uint64_t))(*(void *)result + 8))(result);
          uint64_t result = v36;
          uint64_t v36 = 0;
          if (result)
          {
            int v26 = *(_DWORD *)(result + 8) - 1;
            if (*(_DWORD *)(result + 8) == 1) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
            else {
LABEL_31:
            }
              *(_DWORD *)(result + 8) = v26;
          }
        }
      }
      else
      {
LABEL_27:
        uint64_t v22 = v36;
        uint64_t v36 = 0;
        uint64_t result = *(void *)(v9 + 32);
        *(void *)(v9 + 32) = v22;
        if (result) {
          goto LABEL_30;
        }
      }
      if (*v4)
      {
        ++*(_DWORD *)(*v4 - 12);
        uint64_t v27 = *v4;
        if (*v4) {
          goto LABEL_34;
        }
LABEL_39:
        uint64_t v28 = *(unsigned int *)(v27 - 16);
        unint64_t v29 = *(unsigned int *)(v27 - 4);
        if (v29 > 0x400) {
          goto LABEL_40;
        }
LABEL_35:
        if (3 * v29 <= 4 * v28)
        {
          if (!v29)
          {
            unsigned int v30 = 8;
            goto LABEL_43;
          }
LABEL_42:
          unsigned int v30 = v29 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v29));
LABEL_43:
          uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v4, v30, v9);
          uint64_t v13 = result;
LABEL_44:
          uint64_t v31 = *(void *)(v13 + 32);
          ++*(_DWORD *)(v31 + 8);
          *a3 = v31;
          return result;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v27 = *v4;
        if (!*v4) {
          goto LABEL_39;
        }
LABEL_34:
        uint64_t v28 = (*(_DWORD *)(v27 - 16) + *(_DWORD *)(v27 - 12));
        unint64_t v29 = *(unsigned int *)(v27 - 4);
        if (v29 <= 0x400) {
          goto LABEL_35;
        }
LABEL_40:
        if (v29 <= 2 * v28) {
          goto LABEL_42;
        }
      }
      uint64_t v13 = v9;
      goto LABEL_44;
    }
    if (*(void *)v13 == -1)
    {
      uint64_t v9 = v5 + 40 * v12;
      goto LABEL_7;
    }
LABEL_6:
    uint64_t result = WebCore::operator==();
    if (result) {
      goto LABEL_44;
    }
LABEL_7:
    unsigned int v8 = i + v12;
  }
  uint64_t v32 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::StorageNamespaceImpl::clearOriginForDeletion(v32, v33);
}

uint64_t WebKit::StorageNamespaceImpl::clearOriginForDeletion(uint64_t this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v2 = *(void *)(this + 24);
  if (!v2) {
    return this;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  int v4 = WTF::computeHash<WebCore::SecurityOriginData>((uint64_t)a2);
  for (i = 0; ; int v4 = i + v6)
  {
    unsigned int v6 = v4 & v3;
    this = v2 + 40 * (v4 & v3);
    int v7 = *(_DWORD *)(this + 24);
    if (v7 == 1) {
      break;
    }
    if (v7)
    {
      uint64_t v10 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::StorageNamespaceImpl::clearAllOriginsForDeletion(v10);
    }
    if (*(_OWORD *)this == 0)
    {
      if (!*(unsigned char *)(this + 18)) {
        return this;
      }
      break;
    }
    if (*(void *)this != -1) {
      break;
    }
LABEL_5:
    ++i;
  }
  this = WebCore::operator==();
  if ((this & 1) == 0) {
    goto LABEL_5;
  }
  unsigned int v8 = *(WebKit::StorageAreaImpl **)(v2 + 40 * v6 + 32);
  if (v8)
  {
    ++*((_DWORD *)v8 + 2);
    this = WebKit::StorageAreaImpl::clearForOriginDeletion(v8);
    if (*((_DWORD *)v8 + 2) == 1)
    {
      uint64_t v9 = *(uint64_t (**)(WebKit::StorageAreaImpl *))(*(void *)v8 + 8);
      return v9(v8);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::clearAllOriginsForDeletion(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  uint64_t v3 = v1 + 40 * v2;
  if (!*(_DWORD *)(v1 - 12)) {
    return v1 + 40 * v2;
  }
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v4 = 40 * v2;
  while (1)
  {
    int v5 = *(_DWORD *)(v1 + 24);
    if (v5) {
      break;
    }
    BOOL v7 = *(_OWORD *)v1 == 0 && *(unsigned char *)(v1 + 18) == 0;
    if (*(void *)v1 != -1 && !v7) {
      goto LABEL_21;
    }
    v1 += 40;
    v4 -= 40;
    if (!v4)
    {
      uint64_t v1 = v3;
      goto LABEL_21;
    }
  }
  if (v5 != 1)
  {
LABEL_40:
    int v14 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageNamespaceImpl::sync(v14);
  }
  else
  {
LABEL_21:
    while (v1 != v3)
    {
      this = WebKit::StorageAreaImpl::clearForOriginDeletion(*(WebKit::StorageAreaImpl **)(v1 + 32));
      uint64_t v9 = v1 + 40;
      uint64_t v1 = v3;
      if (v9 != v3)
      {
        uint64_t v1 = v9;
        while (1)
        {
          int v10 = *(_DWORD *)(v1 + 24);
          if (v10) {
            break;
          }
          BOOL v12 = *(_OWORD *)v1 == 0 && *(unsigned char *)(v1 + 18) == 0;
          if (*(void *)v1 != -1 && !v12) {
            goto LABEL_24;
          }
          v1 += 40;
          if (v1 == v3)
          {
            uint64_t v1 = v3;
            goto LABEL_24;
          }
        }
        if (v10 != 1) {
          goto LABEL_40;
        }
      }
LABEL_24:
      ;
    }
  }
  return this;
}

SessionID *WebKit::StorageNamespaceImpl::sync(SessionID *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  unint64_t m_identifier = this[3].m_identifier;
  if (!m_identifier) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(m_identifier - 4);
  unint64_t v5 = m_identifier + 40 * v4;
  if (!*(_DWORD *)(m_identifier - 12)) {
    return (SessionID *)(m_identifier + 40 * v4);
  }
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v6 = 40 * v4;
  while (1)
  {
    int v7 = *(_DWORD *)(m_identifier + 24);
    if (v7) {
      break;
    }
    BOOL v9 = *(_OWORD *)m_identifier == 0 && *(unsigned char *)(m_identifier + 18) == 0;
    if (*(void *)m_identifier != -1 && !v9) {
      goto LABEL_21;
    }
    m_identifier += 40;
    v6 -= 40;
    if (!v6)
    {
      unint64_t m_identifier = v5;
      goto LABEL_21;
    }
  }
  if (v7 != 1)
  {
LABEL_40:
    uint64_t v16 = (SessionID *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageNamespaceImpl::closeIdleLocalStorageDatabases(v16);
  }
  else
  {
LABEL_21:
    while (m_identifier != v5)
    {
      this = (SessionID *)WebKit::StorageAreaImpl::sync(*(void *)(m_identifier + 32), a2, a3);
      unint64_t v11 = m_identifier + 40;
      unint64_t m_identifier = v5;
      if (v11 != v5)
      {
        unint64_t m_identifier = v11;
        while (1)
        {
          int v12 = *(_DWORD *)(m_identifier + 24);
          if (v12) {
            break;
          }
          BOOL v14 = *(_OWORD *)m_identifier == 0 && *(unsigned char *)(m_identifier + 18) == 0;
          if (*(void *)m_identifier != -1 && !v14) {
            goto LABEL_24;
          }
          m_identifier += 40;
          if (m_identifier == v5)
          {
            unint64_t m_identifier = v5;
            goto LABEL_24;
          }
        }
        if (v12 != 1) {
          goto LABEL_40;
        }
      }
LABEL_24:
      ;
    }
  }
  return this;
}

SessionID *WebKit::StorageNamespaceImpl::closeIdleLocalStorageDatabases(SessionID *this)
{
  unint64_t m_identifier = this[3].m_identifier;
  if (!m_identifier) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(m_identifier - 4);
  unint64_t v3 = m_identifier + 40 * v2;
  if (!*(_DWORD *)(m_identifier - 12)) {
    return (SessionID *)(m_identifier + 40 * v2);
  }
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v4 = 40 * v2;
  while (1)
  {
    int v5 = *(_DWORD *)(m_identifier + 24);
    if (v5) {
      break;
    }
    BOOL v7 = *(_OWORD *)m_identifier == 0 && *(unsigned char *)(m_identifier + 18) == 0;
    if (*(void *)m_identifier != -1 && !v7) {
      goto LABEL_21;
    }
    m_identifier += 40;
    v4 -= 40;
    if (!v4)
    {
      unint64_t m_identifier = v3;
      goto LABEL_21;
    }
  }
  if (v5 != 1)
  {
LABEL_40:
    BOOL v14 = (SessionID *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageNamespaceImpl::setSessionIDForTesting(v14, v15);
  }
  else
  {
LABEL_21:
    while (m_identifier != v3)
    {
      this = (SessionID *)(*(uint64_t (**)(void))(**(void **)(m_identifier + 32) + 104))(*(void *)(m_identifier + 32));
      unint64_t v9 = m_identifier + 40;
      unint64_t m_identifier = v3;
      if (v9 != v3)
      {
        unint64_t m_identifier = v9;
        while (1)
        {
          int v10 = *(_DWORD *)(m_identifier + 24);
          if (v10) {
            break;
          }
          BOOL v12 = *(_OWORD *)m_identifier == 0 && *(unsigned char *)(m_identifier + 18) == 0;
          if (*(void *)m_identifier != -1 && !v12) {
            goto LABEL_24;
          }
          m_identifier += 40;
          if (m_identifier == v3)
          {
            unint64_t m_identifier = v3;
            goto LABEL_24;
          }
        }
        if (v10 != 1) {
          goto LABEL_40;
        }
      }
LABEL_24:
      ;
    }
  }
  return this;
}

SessionID *WebKit::StorageNamespaceImpl::setSessionIDForTesting(SessionID *this, SessionID a2)
{
  this[8].unint64_t m_identifier = a2.m_identifier;
  unint64_t m_identifier = this[3].m_identifier;
  if (!m_identifier)
  {
    unint64_t v6 = 0;
    LODWORD(v4) = 0;
LABEL_20:
    unint64_t v5 = m_identifier + 40 * v4;
    goto LABEL_21;
  }
  uint64_t v4 = *(unsigned int *)(m_identifier - 4);
  unint64_t v5 = m_identifier + 40 * v4;
  if (!*(_DWORD *)(m_identifier - 12))
  {
    unint64_t v6 = m_identifier + 40 * v4;
    goto LABEL_20;
  }
  unint64_t v6 = this[3].m_identifier;
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v7 = 40 * v4;
  unint64_t v6 = this[3].m_identifier;
  while (1)
  {
    int v8 = *(_DWORD *)(v6 + 24);
    if (v8) {
      break;
    }
    BOOL v10 = *(_OWORD *)v6 == 0 && *(unsigned char *)(v6 + 18) == 0;
    if (*(void *)v6 != -1 && !v10) {
      goto LABEL_21;
    }
    v6 += 40;
    v7 -= 40;
    if (!v7)
    {
      unint64_t v6 = v5;
      goto LABEL_21;
    }
  }
  if (v8 != 1)
  {
LABEL_50:
    unsigned int v19 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return (SessionID *)WebKit::StorageNamespaceImpl::topLevelOrigin(v19);
  }
LABEL_21:
  if (!m_identifier)
  {
    unint64_t v12 = 0;
    if (!v6) {
      return this;
    }
    while (1)
    {
LABEL_28:
      uint64_t v13 = *(WebKit::StorageAreaImpl **)(v6 + 32);
      if (v13)
      {
        ++*((_DWORD *)v13 + 2);
        this = (SessionID *)WebKit::StorageAreaImpl::sessionChanged(v13, (uint64_t)a2.m_identifier > -2);
        if (*((_DWORD *)v13 + 2) == 1)
        {
          this = (SessionID *)(*(uint64_t (**)(WebKit::StorageAreaImpl *))(*(void *)v13 + 8))(v13);
          unint64_t v14 = v6 + 40;
          unint64_t v6 = v5;
          if (v14 != v5) {
            goto LABEL_33;
          }
        }
        else
        {
          --*((_DWORD *)v13 + 2);
          unint64_t v14 = v6 + 40;
          unint64_t v6 = v5;
          if (v14 != v5) {
            goto LABEL_33;
          }
        }
      }
      else
      {
        this = (SessionID *)WebKit::StorageAreaImpl::sessionChanged(0, (uint64_t)a2.m_identifier > -2);
        unint64_t v14 = v6 + 40;
        unint64_t v6 = v5;
        if (v14 != v5)
        {
LABEL_33:
          unint64_t v6 = v14;
          while (1)
          {
            int v15 = *(_DWORD *)(v6 + 24);
            if (v15) {
              break;
            }
            BOOL v17 = *(_OWORD *)v6 == 0 && *(unsigned char *)(v6 + 18) == 0;
            if (*(void *)v6 != -1 && !v17) {
              goto LABEL_27;
            }
            v6 += 40;
            if (v6 == v5)
            {
              unint64_t v6 = v5;
              goto LABEL_27;
            }
          }
          if (v15 != 1) {
            goto LABEL_50;
          }
        }
      }
LABEL_27:
      if (v6 == v12) {
        return this;
      }
    }
  }
  unint64_t v12 = m_identifier + 40 * *(unsigned int *)(m_identifier - 4);
  if (v12 != v6) {
    goto LABEL_28;
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::topLevelOrigin(WebKit::StorageNamespaceImpl *this)
{
  return 0;
}

uint64_t WebKit::StorageNamespaceImpl::sessionID(WebKit::StorageNamespaceImpl *this)
{
  return *((void *)this + 8);
}

uint64_t WebCore::StorageNamespace::storageAreaMapCountForTesting(WebCore::StorageNamespace *this)
{
  return 0;
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB3A9650;
  if (qword_1EB3A9650)
  {
    unsigned int v3 = *(_DWORD *)(qword_1EB3A9650 - 4);
    int v4 = *(_DWORD *)(qword_1EB3A9650 - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB3A9650 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(qword_1EB3A9650 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
    while (1)
    {
      unint64_t v9 = (WTF::StringImpl **)(v2 + 16 * v7);
      BOOL v10 = *v9;
      if (*v9 == (WTF::StringImpl *)-1) {
        goto LABEL_7;
      }
      if (v10) {
        break;
      }
      uint64_t v11 = v2 + 16 * v7;
      unint64_t v12 = *(unsigned int **)(v11 + 8);
      *(void *)(v11 + 8) = 0;
      if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v6);
        uint64_t v13 = *v9;
        *unint64_t v9 = 0;
        if (!v13) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v13 = *v9;
        *unint64_t v9 = 0;
        if (!v13) {
          goto LABEL_7;
        }
      }
      if (*(_DWORD *)v13 == 2) {
        goto LABEL_33;
      }
      *(_DWORD *)v13 -= 2;
LABEL_7:
      if (++v7 == v8) {
        goto LABEL_41;
      }
    }
    uint64_t v14 = qword_1EB3A9650;
    if (qword_1EB3A9650)
    {
      int v15 = *(_DWORD *)(qword_1EB3A9650 - 8);
      unsigned int v16 = *((_DWORD *)v10 + 4);
      if (v16 >= 0x100)
      {
LABEL_17:
        unsigned int v17 = v16 >> 8;
LABEL_20:
        int v18 = 0;
        do
        {
          uint64_t v19 = v17 & v15;
          unsigned int v17 = ++v18 + v19;
        }
        while (*(void *)(v14 + 16 * v19));
        uint64_t v20 = v14 + 16 * v19;
        uint64_t v21 = *(unsigned int **)(v20 + 8);
        *(void *)(v20 + 8) = 0;
        if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v6);
          uint64_t v22 = *(WTF::StringImpl **)v20;
          *(void *)uint64_t v20 = 0;
          if (v22)
          {
LABEL_25:
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v6);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        else
        {
          uint64_t v22 = *(WTF::StringImpl **)v20;
          *(void *)uint64_t v20 = 0;
          if (v22) {
            goto LABEL_25;
          }
        }
        uint64_t v23 = *v9;
        *unint64_t v9 = 0;
        *(void *)uint64_t v20 = v23;
        uint64_t v24 = v2 + 16 * v7;
        uint64_t v25 = *(void *)(v24 + 8);
        *(void *)(v24 + 8) = 0;
        *(void *)(v20 + 8) = v25;
        int v26 = *(unsigned int **)(v24 + 8);
        *(void *)(v24 + 8) = 0;
        if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v6);
          uint64_t v13 = *v9;
          *unint64_t v9 = 0;
          if (!v13) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v13 = *v9;
          *unint64_t v9 = 0;
          if (!v13) {
            goto LABEL_7;
          }
        }
        if (*(_DWORD *)v13 == 2)
        {
LABEL_33:
          WTF::StringImpl::destroy(v13, v6);
          goto LABEL_7;
        }
        *(_DWORD *)v13 -= 2;
        goto LABEL_7;
      }
    }
    else
    {
      int v15 = 0;
      unsigned int v16 = *((_DWORD *)v10 + 4);
      if (v16 >= 0x100) {
        goto LABEL_17;
      }
    }
    unsigned int v17 = WTF::StringImpl::hashSlowCase(v10);
    goto LABEL_20;
  }
  if (v2)
  {
LABEL_41:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 40 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v6;
    while (1)
    {
      uint64_t v15 = v5 + 40 * v12;
      int v16 = *(_DWORD *)(v15 + 24);
      if (v16)
      {
        if (v16 != 1)
        {
LABEL_51:
          uint64_t v42 = std::__throw_bad_variant_access[abi:sn180100]();
          return WTF::computeHash<WebCore::SecurityOriginData>(v42);
        }
LABEL_17:
        uint64_t v17 = *a1;
        if (*a1) {
          unsigned int v18 = *(_DWORD *)(v17 - 8);
        }
        else {
          unsigned int v18 = 0;
        }
        int v19 = WTF::computeHash<WebCore::SecurityOriginData>(v5 + 40 * v12);
        for (i = 0; ; int v19 = i + v21)
        {
          unsigned int v21 = v19 & v18;
          uint64_t v22 = v17 + 40 * (v19 & v18);
          int v23 = *(_DWORD *)(v22 + 24);
          if (v23 != 1)
          {
            if (v23) {
              goto LABEL_51;
            }
            if (*(_OWORD *)v22 == 0 && !*(unsigned char *)(v22 + 18)) {
              break;
            }
          }
          ++i;
        }
        uint64_t v24 = v17 + 40 * v21;
        uint64_t v27 = *(_DWORD **)(v24 + 32);
        int v26 = (void *)(v24 + 32);
        uint64_t v25 = v27;
        void *v26 = 0;
        if (!v27)
        {
          uint64_t v30 = 0;
          goto LABEL_30;
        }
        int v28 = v25[2];
        int v29 = v28 - 1;
        if (v28 != 1)
        {
          uint64_t v30 = 0;
          v25[2] = v29;
          goto LABEL_30;
        }
        (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
        uint64_t v30 = *(unsigned int *)(v22 + 24);
        if (v30 != -1) {
LABEL_30:
        }
          ((void (*)(char *, uint64_t))off_1F3C795A8[v30])(&v46, v22);
        *(unsigned char *)uint64_t v22 = 0;
        *(_DWORD *)(v22 + 24) = -1;
        uint64_t v31 = *(unsigned int *)(v15 + 24);
        if (v31 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1F3C795C8[v31])(&v47, v22, v5 + 40 * v12);
          *(_DWORD *)(v22 + 24) = v31;
        }
        uint64_t v32 = v5 + 40 * v12;
        uint64_t v33 = *(void *)(v32 + 32);
        *(void *)(v32 + 32) = 0;
        void *v26 = v33;
        uint64_t v34 = *(_DWORD **)(v32 + 32);
        *(void *)(v32 + 32) = 0;
        if (v34)
        {
          if (v34[2] != 1)
          {
            --v34[2];
            goto LABEL_36;
          }
          (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
          uint64_t v35 = *(unsigned int *)(v15 + 24);
          if (v35 != -1) {
LABEL_39:
          }
            ((void (*)(char *, uint64_t))off_1F3C795A8[v35])(&v45, v5 + 40 * v12);
        }
        else
        {
LABEL_36:
          uint64_t v35 = *(unsigned int *)(v15 + 24);
          if (v35 != -1) {
            goto LABEL_39;
          }
        }
        *(_DWORD *)(v15 + 24) = -1;
        if (v15 == a3) {
          uint64_t v13 = v22;
        }
        goto LABEL_10;
      }
      if (*(void *)v15 != -1) {
        break;
      }
LABEL_10:
      if (++v12 == v14) {
        goto LABEL_49;
      }
    }
    if (*(_OWORD *)v15 != 0 || *(unsigned char *)(v15 + 18)) {
      goto LABEL_17;
    }
    uint64_t v36 = v5 + 40 * v12;
    uint64_t v37 = *(_DWORD **)(v36 + 32);
    *(void *)(v36 + 32) = 0;
    if (v37)
    {
      int v38 = v37[2];
      int v39 = v38 - 1;
      if (v38 == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
        uint64_t v40 = *(unsigned int *)(v15 + 24);
        if (v40 == -1)
        {
LABEL_45:
          *(_DWORD *)(v15 + 24) = -1;
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v40 = 0;
        v37[2] = v39;
      }
    }
    else
    {
      uint64_t v40 = 0;
    }
    ((void (*)(char *, uint64_t))off_1F3C795A8[v40])(&v44, v5 + 40 * v12);
    goto LABEL_45;
  }
  uint64_t v13 = 0;
  uint64_t result = 0;
  if (v5)
  {
LABEL_49:
    WTF::fastFree((WTF *)(v5 - 16), v9);
    return v13;
  }
  return result;
}

uint64_t WTF::computeHash<WebCore::SecurityOriginData>(uint64_t a1)
{
  unsigned __int16 v13 = 0;
  char v14 = 0;
  unint64_t v1 = *(unsigned int *)(a1 + 24);
  uint64_t v15 = &v12;
  if (v1 == -1) {
    unint64_t v2 = -1;
  }
  else {
    unint64_t v2 = v1;
  }
  unsigned int v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  unsigned int v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  unsigned int v12 = v4 + (v4 >> 11);
  if (v1 == -1)
  {
    uint64_t v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SK_EEEEEEDcST_DpT0_(v11);
  }
  else
  {
    int v16 = &v15;
    ((void (*)(unsigned int ***, uint64_t))off_1F3C795B8[v1])(&v16, a1);
    unsigned int v5 = v12;
    if (v14)
    {
      unsigned int v6 = (v12 + v13) ^ ((v12 + v13) << 11);
      unsigned int v5 = v6 + (v6 >> 17);
    }
    unsigned int v7 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    unsigned int v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
    unsigned int v9 = v8 ^ (v8 << 10);
    if (v9) {
      return v9;
    }
    else {
      return 0x800000;
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SK_EEEEEEDcST_DpT0_(unsigned int ***a1, uint64_t a2)
{
  return WTF::add<WTF::String,WTF::String,std::optional<unsigned short>>(**a1, (uint64_t *)a2, (uint64_t *)(a2 + 8), (unsigned __int16 *)(a2 + 16));
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SK_EEEEEEDcST_DpT0_(unsigned int ***result, void *a2)
{
  unint64_t v2 = **result;
  int v3 = *v2 + (unsigned __int16)*a2;
  unsigned int v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  int v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  unsigned int v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  unsigned int v7 = v6 + (v6 >> 11);
  *unint64_t v2 = v7;
  unint64_t v8 = a2[1];
  unsigned int v9 = (v8 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v8) << 16) ^ (v7 + (unsigned __int16)v8);
  int v10 = v9 + WORD2(v8) + (v9 >> 11);
  LODWORD(v8) = (v8 >> 37) & 0x7FFF800 ^ (v10 << 16);
  *unint64_t v2 = (v8 ^ v10) + ((v8 ^ v10) >> 11);
  return result;
}

unsigned int *WTF::add<WTF::String,WTF::String,std::optional<unsigned short>>(unsigned int *result, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    int v5 = *(_DWORD *)(v4 + 4);
    unint64_t v6 = v5 & 0xFFFFFFFE;
    if ((v5 & 0xFFFFFFFE) != 0)
    {
      unint64_t v7 = 0;
      unsigned int v8 = *result;
      do
      {
        unint64_t v11 = *(unsigned int *)(v4 + 4);
        if (v7 >= v11)
        {
          int v13 = 0;
          unint64_t v14 = v7 + 1;
          if (v7 + 1 < v11) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(v4 + 8);
          if ((*(unsigned char *)(v4 + 16) & 4) != 0)
          {
            int v13 = *(unsigned __int8 *)(v12 + v7);
            unint64_t v14 = v7 + 1;
            if (v7 + 1 < v11)
            {
LABEL_13:
              uint64_t v15 = *(void *)(v4 + 8);
              if ((*(unsigned char *)(v4 + 16) & 4) != 0) {
                int v9 = *(unsigned __int8 *)(v15 + v7 + 1);
              }
              else {
                int v9 = *(unsigned __int16 *)(v15 + 2 * v7 + 2);
              }
              goto LABEL_5;
            }
          }
          else
          {
            int v13 = *(unsigned __int16 *)(v12 + 2 * v7);
            unint64_t v14 = v7 + 1;
            if (v7 + 1 < v11) {
              goto LABEL_13;
            }
          }
        }
        int v9 = 0;
LABEL_5:
        unsigned int v10 = (v13 << 11) ^ ((v8 + v9) << 16) ^ (v8 + v9);
        unsigned int v8 = v10 + (v10 >> 11);
        *uint64_t result = v8;
        unint64_t v7 = v14 + 1;
      }
      while (v14 + 1 < v6);
    }
    if (v5)
    {
      if (*(_DWORD *)(v4 + 4) <= v6)
      {
        int v17 = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v4 + 8);
        if ((*(unsigned char *)(v4 + 16) & 4) != 0) {
          int v17 = *(unsigned __int8 *)(v16 + v6);
        }
        else {
          int v17 = *(unsigned __int16 *)(v16 + 2 * v6);
        }
      }
      *uint64_t result = ((*result + v17) ^ ((*result + v17) << 16)) + (((*result + v17) ^ ((*result + v17) << 16)) >> 11);
    }
  }
  uint64_t v18 = *a3;
  if (*a3)
  {
    int v19 = *(_DWORD *)(v18 + 4);
    unint64_t v20 = v19 & 0xFFFFFFFE;
    if ((v19 & 0xFFFFFFFE) != 0)
    {
      unint64_t v21 = 0;
      unsigned int v22 = *result;
      do
      {
        unint64_t v25 = *(unsigned int *)(v18 + 4);
        if (v21 >= v25)
        {
          int v27 = 0;
          unint64_t v28 = v21 + 1;
          if (v21 + 1 < v25) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v26 = *(void *)(v18 + 8);
          if ((*(unsigned char *)(v18 + 16) & 4) != 0)
          {
            int v27 = *(unsigned __int8 *)(v26 + v21);
            unint64_t v28 = v21 + 1;
            if (v21 + 1 < v25)
            {
LABEL_35:
              uint64_t v29 = *(void *)(v18 + 8);
              if ((*(unsigned char *)(v18 + 16) & 4) != 0) {
                int v23 = *(unsigned __int8 *)(v29 + v21 + 1);
              }
              else {
                int v23 = *(unsigned __int16 *)(v29 + 2 * v21 + 2);
              }
              goto LABEL_27;
            }
          }
          else
          {
            int v27 = *(unsigned __int16 *)(v26 + 2 * v21);
            unint64_t v28 = v21 + 1;
            if (v21 + 1 < v25) {
              goto LABEL_35;
            }
          }
        }
        int v23 = 0;
LABEL_27:
        unsigned int v24 = (v27 << 11) ^ ((v22 + v23) << 16) ^ (v22 + v23);
        unsigned int v22 = v24 + (v24 >> 11);
        *uint64_t result = v22;
        unint64_t v21 = v28 + 1;
      }
      while (v28 + 1 < v20);
    }
    if (v19)
    {
      if (*(_DWORD *)(v18 + 4) <= v20)
      {
        int v31 = 0;
      }
      else
      {
        uint64_t v30 = *(void *)(v18 + 8);
        if ((*(unsigned char *)(v18 + 16) & 4) != 0) {
          int v31 = *(unsigned __int8 *)(v30 + v20);
        }
        else {
          int v31 = *(unsigned __int16 *)(v30 + 2 * v20);
        }
      }
      *uint64_t result = ((*result + v31) ^ ((*result + v31) << 16)) + (((*result + v31) ^ ((*result + v31) << 16)) >> 11);
    }
  }
  int v32 = *((unsigned __int8 *)a4 + 2);
  unsigned int v33 = (*result + v32) ^ ((*result + v32) << 16);
  unsigned int v34 = v33 + (v33 >> 11);
  *uint64_t result = v34;
  if (v32) {
    *uint64_t result = ((v34 + *a4) ^ ((v34 + *a4) << 16)) + (((v34 + *a4) ^ ((v34 + *a4) << 16)) >> 11);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS10_EEEDcSS_DpT0_(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1F3C795A8[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  __n128 result = *a3;
  *uint64_t v4 = *a3;
  v4[1].n128_u32[2] = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[6];
  if (v5 != -1)
  {
    if (!v5)
    {
      char v7 = *(_DWORD **)a3;
      if (*(void *)a3) {
        *v7 += 2;
      }
      unsigned int v8 = *(WTF::StringImpl **)a2;
      *(void *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, (StringImpl *)a2);
          int v9 = *(_DWORD **)(a3 + 8);
          if (!v9) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        *(_DWORD *)v8 -= 2;
      }
      int v9 = *(_DWORD **)(a3 + 8);
      if (!v9)
      {
LABEL_10:
        __n128 result = *(unsigned int **)(a2 + 8);
        *(void *)(a2 + 8) = v9;
        if (result)
        {
          if (*result == 2) {
            __n128 result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
          }
          else {
            *result -= 2;
          }
        }
        __int16 v12 = *(_WORD *)(a3 + 16);
        *(unsigned char *)(a2 + 18) = *(unsigned char *)(a3 + 18);
        *(_WORD *)(a2 + 16) = v12;
        return result;
      }
LABEL_9:
      *v9 += 2;
      goto LABEL_10;
    }
    __n128 result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1F3C795A8[v5])(&v13, result);
  }
  v4[6] = -1;
  unsigned int v10 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v10 += 2;
  }
  *(void *)uint64_t v4 = v10;
  unint64_t v11 = *(_DWORD **)(a3 + 8);
  if (v11) {
    *v11 += 2;
  }
  *((void *)v4 + 1) = v11;
  v4[4] = *(_DWORD *)(a3 + 16);
  v4[6] = 0;
  return result;
}

void WebCore::StorageSyncManager::~StorageSyncManager(WebCore::StorageSyncManager *this, StringImpl *a2)
{
  int v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v4) {
      return;
    }
LABEL_7:
    WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((uint64_t *)(v4 + 32), a2);
    unint64_t v6 = *(WTF **)(v4 + 48);
    if (v6)
    {
      *(void *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + ++*(_DWORD *)(this + 56) = 0;
      WTF::fastFree(v6, v5);
    }
    char v7 = *(unsigned int **)(v4 + 8);
    *(void *)(v4 + 8) = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::Thread::~Thread((WTF::Thread *)v7);
      WTF::fastFree(v8, v9);
      if (!*(_DWORD *)v4) {
        goto LABEL_12;
      }
    }
    else if (!*(_DWORD *)v4)
    {
LABEL_12:
      WTF::fastFree((WTF *)v4, v5);
      return;
    }
    *(void *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    return;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    goto LABEL_7;
  }
}

uint64_t WebCore::StorageSyncManager::fullDatabaseFilename@<X0>(WebCore::StorageSyncManager *this@<X0>, const WTF::String *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)((char *)this + 16);
  uint64_t result = WTF::FileSystemImpl::makeAllDirectories((WebCore::StorageSyncManager *)((char *)this + 16), a2);
  if ((result & 1) == 0)
  {
    *a3 = 0;
    return result;
  }
  if (!*v5)
  {
    uint64_t v7 = *(void *)a2;
    if (v7) {
      goto LABEL_4;
    }
LABEL_15:
    unsigned int v9 = 13;
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)a2;
  if (!v7) {
    goto LABEL_15;
  }
LABEL_4:
  int v8 = *(_DWORD *)(v7 + 4);
  *(_DWORD *)v7 += 2;
  if (v8 < 0) {
    goto LABEL_88;
  }
  unsigned int v9 = v8 + 13;
  if (__OFADD__(v8, 13)) {
    goto LABEL_88;
  }
  if ((*(unsigned char *)(v7 + 16) & 4) == 0)
  {
    if (v9 <= 0x7FFFFFEF)
    {
      uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * (v8 + 13) + 20));
      unsigned int v10 = (WTF::StringImpl *)v69;
      if (v69)
      {
        unint64_t v11 = (_WORD *)(v69 + 20);
        *(_DWORD *)uint64_t v69 = 2;
        *(_DWORD *)(v69 + 4) = v9;
        *(void *)(v69 + 8) = v69 + 20;
        *(_DWORD *)(v69 + 16) = 0;
        __int16 v12 = *(int8x16_t **)(v7 + 8);
        uint64_t v13 = *(unsigned int *)(v7 + 4);
        if ((*(unsigned char *)(v7 + 16) & 4) == 0)
        {
          if (v13)
          {
            if (v13 == 1) {
              *unint64_t v11 = v12->i16[0];
            }
            else {
              memcpy((void *)(v69 + 20), v12, 2 * v13);
            }
          }
          goto LABEL_45;
        }
        unint64_t v21 = &v11[v13];
        if (v13 < 0x40)
        {
          unint64_t v22 = v69 + 20;
          if (v11 == v21)
          {
LABEL_45:
            int v39 = &v11[*(unsigned int *)(v7 + 4)];
            *(_OWORD *)int v39 = xmmword_1E149DC80;
            *((void *)v39 + 2) = 0x6700610072006FLL;
            v39[12] = 101;
            goto LABEL_62;
          }
        }
        else
        {
          unint64_t v22 = (unint64_t)&v11[v13 & 0xFFFFFFC0];
          long long v23 = 0uLL;
          unsigned int v24 = (char *)(v69 + 20);
          do
          {
            v70.val[0] = *v12;
            int8x16_t v25 = v12[1];
            v71.val[0] = v12[2];
            int8x16_t v26 = v12[3];
            v12 += 4;
            int8x16_t v27 = v26;
            v71.val[1] = 0uLL;
            v72.val[0] = v25;
            v70.val[1] = 0uLL;
            unint64_t v28 = v24;
            vst2q_s8(v28, v70);
            v28 += 32;
            v72.val[1] = 0uLL;
            vst2q_s8(v28, v72);
            uint64_t v29 = v24 + 64;
            vst2q_s8(v29, v71);
            uint64_t v30 = v24 + 96;
            vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
            v24 += 128;
          }
          while (v24 != (char *)v22);
          if ((_WORD *)v22 == v21) {
            goto LABEL_45;
          }
        }
        unint64_t v32 = v69 + 2 * v13 - v22 + 18;
        if (v32 < 0xE
          || (v22 < (unint64_t)v12->u64 + (v32 >> 1) + 1
            ? (BOOL v33 = (unint64_t)v12 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
            : (BOOL v33 = 1),
              !v33))
        {
          uint64_t v36 = (_WORD *)v22;
          uint64_t v37 = v12;
          goto LABEL_42;
        }
        uint64_t v34 = (v32 >> 1) + 1;
        if (v32 >= 0x3E)
        {
          unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFE0;
          int v48 = (uint8x8_t *)&v12[1];
          uint64_t v49 = (uint16x8_t *)(v22 + 32);
          unint64_t v50 = v34 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v51 = *(uint8x16_t *)v48[-2].i8;
            uint16x8_t v52 = vmovl_u8(*v48);
            uint16x8_t v53 = vmovl_high_u8(*(uint8x16_t *)v48->i8);
            v49[-2] = vmovl_u8(*(uint8x8_t *)v51.i8);
            v49[-1] = vmovl_high_u8(v51);
            *uint64_t v49 = v52;
            v49[1] = v53;
            v49 += 4;
            v48 += 4;
            v50 -= 32;
          }
          while (v50);
          if (v34 == v35) {
            goto LABEL_45;
          }
          if ((v34 & 0x18) == 0)
          {
            uint64_t v37 = (int8x16_t *)((char *)v12 + v35);
            uint64_t v36 = (_WORD *)(v22 + 2 * v35);
            do
            {
LABEL_42:
              __int16 v38 = v37->u8[0];
              uint64_t v37 = (int8x16_t *)((char *)v37 + 1);
              *v36++ = v38;
            }
            while (v36 != v21);
            goto LABEL_45;
          }
        }
        else
        {
          unint64_t v35 = 0;
        }
        uint64_t v36 = (_WORD *)(v22 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v37 = (int8x16_t *)((char *)v12 + (v34 & 0xFFFFFFFFFFFFFFF8));
        uint32x4_t v54 = (uint8x8_t *)&v12->i8[v35];
        int v55 = (uint16x8_t *)(v22 + 2 * v35);
        unint64_t v56 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v57 = *v54++;
          *v55++ = vmovl_u8(v57);
          v56 += 8;
        }
        while (v56);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_45;
        }
        goto LABEL_42;
      }
    }
LABEL_88:
    __break(0xC471u);
    return result;
  }
LABEL_16:
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
  unsigned int v10 = (WTF::StringImpl *)v69;
  if (!v69) {
    goto LABEL_88;
  }
  unint64_t v14 = (unsigned char *)(v69 + 20);
  *(_DWORD *)uint64_t v69 = 2;
  *(_DWORD *)(v69 + 4) = v9;
  *(void *)(v69 + 8) = v69 + 20;
  *(_DWORD *)(v69 + 16) = 4;
  if (v7)
  {
    uint64_t v15 = *(int8x16_t **)(v7 + 8);
    size_t v16 = *(unsigned int *)(v7 + 4);
    if ((*(unsigned char *)(v7 + 16) & 4) != 0)
    {
      if (v16)
      {
        if (v16 == 1) {
          unsigned char *v14 = v15->i8[0];
        }
        else {
          memcpy((void *)(v69 + 20), v15, v16);
        }
      }
      goto LABEL_60;
    }
    int v17 = &v14[v16];
    if (v16 < 0x10)
    {
      unint64_t v18 = v69 + 20;
    }
    else
    {
      unint64_t v18 = (unint64_t)&v14[v16 & 0xFFFFFFF0];
      int v19 = (unsigned long long *)(v69 + 20);
      do
      {
        unsigned long long v20 = (unsigned __int128)vld2q_s8(v15->i8);
        v15 += 2;
        *v19++ = v20;
      }
      while (v19 != (unsigned long long *)v18);
    }
    if ((unsigned char *)v18 == v17)
    {
LABEL_60:
      uint64_t v31 = *(unsigned int *)(v7 + 4);
      goto LABEL_61;
    }
    size_t v40 = v69 + v16;
    unint64_t v41 = v69 + v16 - v18 + 20;
    if (v41 < 8
      || (v18 < (unint64_t)&v15[2].u64[1] + 2 * v40 + -2 * v18
        ? (BOOL v42 = (unint64_t)v15 >= v40 + 20)
        : (BOOL v42 = 1),
          !v42))
    {
      char v44 = (unsigned char *)v18;
      char v45 = v15;
      goto LABEL_57;
    }
    if (v41 >= 0x20)
    {
      unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v58 = v15 + 2;
      unsigned int v59 = (int8x16_t *)(v18 + 16);
      unint64_t v60 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v62 = v58[-2];
        int8x16_t v61 = v58[-1];
        int8x16_t v64 = *v58;
        int8x16_t v63 = v58[1];
        v58 += 4;
        v59[-1] = vuzp1q_s8(v62, v61);
        *unsigned int v59 = vuzp1q_s8(v64, v63);
        v59 += 2;
        v60 -= 32;
      }
      while (v60);
      if (v41 == v43) {
        goto LABEL_60;
      }
      if ((v41 & 0x18) == 0)
      {
        char v45 = (int8x16_t *)((char *)v15 + 2 * v43);
        char v44 = (unsigned char *)(v18 + v43);
        do
        {
LABEL_57:
          char v46 = v45->i8[0];
          char v45 = (int8x16_t *)((char *)v45 + 2);
          *v44++ = v46;
        }
        while (v44 != v17);
        goto LABEL_60;
      }
    }
    else
    {
      unint64_t v43 = 0;
    }
    char v44 = (unsigned char *)(v18 + (v41 & 0xFFFFFFFFFFFFFFF8));
    char v45 = (int8x16_t *)((char *)v15 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v65 = (int16x8_t *)((char *)v15 + 2 * v43);
    int8x16_t v66 = (int8x8_t *)(v18 + v43);
    unint64_t v67 = v43 - (v41 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v68 = *v65++;
      *v66++ = vmovn_s16(v68);
      v67 += 8;
    }
    while (v67);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_60;
    }
    goto LABEL_57;
  }
  uint64_t v31 = 0;
LABEL_61:
  qmemcpy(&v14[v31], ".localstorage", 13);
LABEL_62:
  uint64_t result = WTF::FileSystemImpl::pathByAppendingComponent();
  if (*(_DWORD *)v10 == 2)
  {
    uint64_t result = WTF::StringImpl::destroy(v10, v47);
    if (!v7) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (!v7) {
      return result;
    }
  }
  if (*(_DWORD *)v7 == 2) {
    return WTF::StringImpl::destroy((WTF::StringImpl *)v7, v47);
  }
  *(_DWORD *)v7 -= 2;
  return result;
}

double WebCore::StorageSyncManager::close(WebCore::StorageSyncManager *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return result;
  }
  WebCore::StorageThread::terminate(v2);
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v5) {
    return result;
  }
  WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((uint64_t *)(v5 + 32), v3);
  uint64_t v7 = *(WTF **)(v5 + 48);
  if (v7)
  {
    *(void *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + ++*(_DWORD *)(this + 56) = 0;
    WTF::fastFree(v7, v6);
  }
  int v8 = *(unsigned int **)(v5 + 8);
  *(void *)(v5 + 8) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::Thread::~Thread((WTF::Thread *)v8);
    WTF::fastFree(v9, v10);
    if (!*(_DWORD *)v5) {
      goto LABEL_8;
    }
LABEL_12:
    *(void *)(v5 + 64) = 0;
    double result = 0.0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    return result;
  }
  if (*(_DWORD *)v5) {
    goto LABEL_12;
  }
LABEL_8:
  WTF::fastFree((WTF *)v5, v6);
  return result;
}

uint64_t WebCore::StorageThread::start(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(void *)(this + 8))
  {
    if (*(_DWORD *)(this + 16))
    {
      uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v2 = &unk_1F3C79648;
    }
    else
    {
      uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v2 = &unk_1F3C79620;
    }
    v2[1] = v1;
    uint64_t v21 = (uint64_t)v2;
    WTF::Thread::create();
    int v3 = *(unsigned int **)(v1 + 8);
    *(void *)(v1 + 8) = v22;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::Thread::~Thread((WTF::Thread *)v3);
      WTF::fastFree(v19, v20);
    }
    this = v21;
    if (v21) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  if (_MergedGlobals_7)
  {
    ++*(_DWORD *)v1;
    uint64_t v4 = qword_1EB3A9660;
    if (qword_1EB3A9660) {
      goto LABEL_13;
    }
  }
  else
  {
    qword_1EB3A9660 = 0;
    _MergedGlobals_7 = 1;
    ++*(_DWORD *)v1;
    uint64_t v4 = qword_1EB3A9660;
    if (qword_1EB3A9660) {
      goto LABEL_13;
    }
  }
  this = WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(8u);
  uint64_t v4 = qword_1EB3A9660;
  if (!qword_1EB3A9660)
  {
    int v5 = 0;
    goto LABEL_14;
  }
LABEL_13:
  int v5 = *(_DWORD *)(v4 - 8);
LABEL_14:
  unint64_t v6 = 0;
  unint64_t v7 = (~(v1 << 32) + v1) ^ ((unint64_t)(~(v1 << 32) + v1) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v9 >> 31) ^ v9;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v10 & v5;
    uint64_t v13 = (uint64_t *)(v4 + 8 * (v10 & v5));
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      unint64_t v6 = (uint64_t *)(v4 + 8 * v12);
      goto LABEL_16;
    }
    if (!v14)
    {
      if (v6)
      {
        uint64_t *v6 = 0;
        --*(_DWORD *)(qword_1EB3A9660 - 16);
        uint64_t *v6 = v1;
        uint64_t v15 = qword_1EB3A9660;
        if (qword_1EB3A9660) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t *v13 = v1;
        uint64_t v15 = qword_1EB3A9660;
        if (qword_1EB3A9660)
        {
LABEL_25:
          ++*(_DWORD *)(v15 - 12);
          uint64_t v16 = qword_1EB3A9660;
          if (qword_1EB3A9660) {
            goto LABEL_26;
          }
          goto LABEL_32;
        }
      }
      *(_DWORD *)(v15 - 12) = 1;
      uint64_t v16 = qword_1EB3A9660;
      if (qword_1EB3A9660)
      {
LABEL_26:
        uint64_t v17 = (*(_DWORD *)(v16 - 16) + *(_DWORD *)(v16 - 12));
        unint64_t v18 = *(unsigned int *)(v16 - 4);
        if (v18 <= 0x400) {
          goto LABEL_27;
        }
        goto LABEL_33;
      }
LABEL_32:
      uint64_t v17 = *(unsigned int *)(v16 - 16);
      unint64_t v18 = *(unsigned int *)(v16 - 4);
      if (v18 <= 0x400)
      {
LABEL_27:
        if (3 * v18 > 4 * v17) {
          return this;
        }
        if (!v18) {
          return WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(8u);
        }
        return WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(v18 << (6 * *(_DWORD *)(v16 - 12) >= (2 * v18)));
      }
LABEL_33:
      if (v18 > 2 * v17) {
        return this;
      }
      return WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(v18 << (6 * *(_DWORD *)(v16 - 12) >= (2 * v18)));
    }
    if (v14 == v1) {
      break;
    }
LABEL_16:
    unsigned int v10 = i + v12;
  }
  if (!*(_DWORD *)v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1E135F40CLL);
  }
  --*(_DWORD *)v1;
  return this;
}

uint64_t WebCore::StorageThread::threadEntryPoint(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  int v3 = (atomic_uchar *)(this + 24);
  uint64_t v4 = this + 25;
  while (1)
  {
    char v5 = 0;
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5)
    {
      this = MEMORY[0x1E4E44220](v3);
      if (*(unsigned char *)(v2 + 64))
      {
LABEL_5:
        unint64_t v6 = 0;
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v2 + 64))
    {
      goto LABEL_5;
    }
    unint64_t v11 = *(void *)(v2 + 32);
    uint64_t v10 = *(void *)(v2 + 40);
    if (v11 == v10)
    {
      while (1)
      {
        uint64_t v26 = 0x7FF0000000000000;
        int v27 = 1;
        uint64_t v31 = (uint64_t (*)(uint64_t))WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v26);
        unint64_t v32 = v12;
        this = WTF::TimeWithDynamicClockType::operator<();
        if (this)
        {
          char v13 = 0;
          int v14 = 1;
          atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
          if (v14 == 1)
          {
            char v15 = 0;
            atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
            if (v15) {
              goto LABEL_22;
            }
          }
          else
          {
            this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
            char v13 = 0;
            char v19 = 0;
            atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
            if (v19)
            {
LABEL_22:
              this = MEMORY[0x1E4E44220](v3);
              if (*(unsigned char *)(v2 + 64)) {
                char v18 = 0;
              }
              else {
                char v18 = v13;
              }
              if ((v18 & 1) == 0) {
                goto LABEL_5;
              }
              goto LABEL_19;
            }
          }
        }
        else
        {
          unint64_t v28 = v3;
          uint64_t v29 = v4;
          uint64_t v31 = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
          unint64_t v32 = &v31;
          BOOL v33 = &v29;
          v30[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
          v30[1] = v30;
          v30[2] = &v28;
          this = WTF::ParkingLot::parkConditionallyImpl();
          char v13 = this & 1;
          char v17 = 0;
          atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
          if (v17) {
            goto LABEL_22;
          }
        }
        if (*(unsigned char *)(v2 + 64)) {
          char v16 = 0;
        }
        else {
          char v16 = v13;
        }
        if ((v16 & 1) == 0) {
          goto LABEL_5;
        }
LABEL_19:
        unint64_t v11 = *(void *)(v2 + 32);
        if (v11 != *(void *)(v2 + 40))
        {
          uint64_t v10 = *(void *)(v2 + 40);
          break;
        }
      }
    }
    uint64_t v20 = *(void *)(v2 + 48);
    unint64_t v6 = *(WTF **)(v20 + 8 * v11);
    *(void *)(v20 + 8 * v11) = 0;
    if (v10 != v11)
    {
      uint64_t v21 = *(void *)(v2 + 48);
      unint64_t v22 = (WTF **)(v21 + 8 * v11);
      long long v23 = *v22;
      WTF::Thread *v22 = 0;
      if (v23)
      {
        uint64_t v24 = *(void *)v23;
        *(void *)long long v23 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        WTF::fastFree(v23, a2);
      }
      unint64_t v25 = *(void *)(v2 + 32);
      if (v25 <= v11)
      {
        this = (uint64_t)memmove((void *)(v21 + 8 * v25 + 8), (const void *)(v21 + 8 * v25), 8 * v11 - 8 * v25);
        *(void *)(v2 + 32) = (*(void *)(v2 + 32) + 1) % (unint64_t)*(unsigned int *)(v2 + 56);
      }
      else
      {
        this = (uint64_t)memmove((void *)(v21 + 8 * v11), (const void *)(v21 + 8 * v11 + 8), 8 * *(void *)(v2 + 40) - (8 * v11 + 8));
        *(void *)(v2 + 40) = (*(void *)(v2 + 40) + (unint64_t)*(unsigned int *)(v2 + 56) - 1)
                             % *(unsigned int *)(v2 + 56);
      }
    }
LABEL_6:
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      break;
    }
    if (!v6) {
      return this;
    }
LABEL_8:
    WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)&v31);
    (*(void (**)(void))(**(void **)v6 + 16))();
    WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)&v31);
    uint64_t v9 = *(void *)v6;
    *(void *)unint64_t v6 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    this = WTF::fastFree(v6, v8);
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6) {
    goto LABEL_8;
  }
  return this;
}

uint64_t WebCore::StorageThread::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (atomic_uchar *)(a1 + 24);
  char v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  char v6 = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)char v5 = v7;
  char v16 = v5;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6)
  {
    MEMORY[0x1E4E44220](v4);
    WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(a1 + 32), (uint64_t *)&v16);
    uint64_t result = a1 + 25;
    unsigned __int8 v14 = atomic_load((unsigned __int8 *)(a1 + 25));
    if ((v14 & 1) == 0)
    {
LABEL_3:
      int v11 = 1;
      atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
      if (v11 == 1) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(a1 + 32), (uint64_t *)&v16);
    uint64_t result = a1 + 25;
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 25));
    if ((v10 & 1) == 0) {
      goto LABEL_3;
    }
  }
  char v18 = 0;
  v17[0] = result;
  v17[1] = &v18;
  v19[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
  v19[1] = v19;
  v19[2] = v17;
  uint64_t result = WTF::ParkingLot::unparkOneImpl();
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
LABEL_4:
    unsigned int v12 = v16;
    if (!v16) {
      return result;
    }
    goto LABEL_5;
  }
LABEL_11:
  uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  unsigned int v12 = v16;
  if (!v16) {
    return result;
  }
LABEL_5:
  uint64_t v13 = *(void *)v12;
  *(void *)unsigned int v12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return WTF::fastFree(v12, v8);
}

uint64_t WebCore::StorageThread::terminate(uint64_t this)
{
  uint64_t v1 = this;
  if (_MergedGlobals_7)
  {
    unsigned int v2 = *(_DWORD *)this;
    int v3 = *(_DWORD *)this + 1;
    *(_DWORD *)this = v3;
    uint64_t v4 = qword_1EB3A9660;
    if (!qword_1EB3A9660) {
      goto LABEL_21;
    }
LABEL_3:
    int v5 = *(_DWORD *)(v4 - 8);
    unint64_t v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
    for (int i = 1; ; ++i)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(void *)(v4 + 8 * v9);
      if (v12 != -1)
      {
        if (!v12) {
          goto LABEL_20;
        }
        if (v12 == this) {
          break;
        }
      }
      unsigned int v9 = (v11 + i) & v5;
    }
    if (v11 == *(_DWORD *)(v4 - 4)) {
      goto LABEL_20;
    }
    *(void *)(v4 + 8 * v11) = 0;
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1E135FBF0);
    }
    *(_DWORD *)this = v2;
    *(void *)(v4 + 8 * v11) = -1;
    uint64_t v13 = qword_1EB3A9660;
    ++*(_DWORD *)(qword_1EB3A9660 - 16);
    if (v13)
    {
      --*(_DWORD *)(v13 - 12);
      uint64_t v14 = qword_1EB3A9660;
      if (!qword_1EB3A9660) {
        goto LABEL_20;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      uint64_t v14 = qword_1EB3A9660;
      if (!qword_1EB3A9660)
      {
LABEL_20:
        int v3 = *(_DWORD *)v1;
        goto LABEL_21;
      }
    }
    unsigned int v15 = 6 * *(_DWORD *)(v14 - 12);
    unsigned int v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9) {
      this = WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(v16 >> 1);
    }
    goto LABEL_20;
  }
  qword_1EB3A9660 = 0;
  _MergedGlobals_7 = 1;
  unsigned int v2 = *(_DWORD *)this;
  int v3 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v3;
  uint64_t v4 = qword_1EB3A9660;
  if (qword_1EB3A9660) {
    goto LABEL_3;
  }
LABEL_21:
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1E135FB38);
  }
  *(_DWORD *)uint64_t v1 = v3 - 1;
  if (*(void *)(v1 + 8))
  {
    char v18 = (atomic_uchar *)(v1 + 24);
    char v19 = (WTF *)WTF::fastMalloc((WTF *)8);
    uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
    char v21 = 0;
    void *v20 = &unk_1F3C795F8;
    v20[1] = v1;
    *(void *)char v19 = v20;
    unint64_t v32 = v19;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 24), (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
    if (v21)
    {
      MEMORY[0x1E4E44220](v1 + 24);
      WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(v1 + 32), (uint64_t *)&v32);
      uint64_t v23 = v1 + 25;
      unsigned __int8 v28 = atomic_load((unsigned __int8 *)(v1 + 25));
      if ((v28 & 1) == 0)
      {
LABEL_25:
        int v25 = 1;
        atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
        if (v25 == 1) {
          goto LABEL_26;
        }
        goto LABEL_36;
      }
    }
    else
    {
      WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(v1 + 32), (uint64_t *)&v32);
      uint64_t v23 = v1 + 25;
      unsigned __int8 v24 = atomic_load((unsigned __int8 *)(v1 + 25));
      if ((v24 & 1) == 0) {
        goto LABEL_25;
      }
    }
    char v34 = 0;
    v33[0] = v23;
    v33[1] = &v34;
    v35[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v35[1] = v35;
    v35[2] = v33;
    WTF::ParkingLot::unparkOneImpl();
    int v29 = 1;
    atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
    if (v29 == 1)
    {
LABEL_26:
      uint64_t v26 = v32;
      unint64_t v32 = 0;
      if (v26)
      {
LABEL_27:
        uint64_t v27 = *(void *)v26;
        *(void *)uint64_t v26 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        WTF::fastFree(v26, v22);
      }
LABEL_30:
      WTF::Thread::waitForCompletion(*(WTF::Thread **)(v1 + 8));
      this = *(void *)(v1 + 8);
      *(void *)(v1 + 8) = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this);
          WTF::Thread::~Thread((WTF::Thread *)this);
          return WTF::fastFree(v30, v31);
        }
      }
      return this;
    }
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 24));
    uint64_t v26 = v32;
    unint64_t v32 = 0;
    if (v26) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  return this;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::StorageThread::terminate(void)::$_0,void>::call(uint64_t a1, const void *a2)
{
  char v2 = 0;
  int v3 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = v3 + 24;
  atomic_compare_exchange_strong_explicit(v3 + 24, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (!v2)
  {
    v3[64] = 1;
    uint64_t result = v3 + 25;
    unsigned __int8 v6 = atomic_load(v3 + 25);
    if ((v6 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    atomic_store(0, result);
    uint64_t result = (unsigned __int8 *)WTF::ParkingLot::unparkAll((WTF::ParkingLot *)result, a2);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1) {
      return result;
    }
    goto LABEL_7;
  }
  MEMORY[0x1E4E44220](v3 + 24);
  v3[64] = 1;
  uint64_t result = v3 + 25;
  unsigned __int8 v8 = atomic_load(v3 + 25);
  if (v8) {
    goto LABEL_6;
  }
LABEL_3:
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1) {
    return result;
  }
LABEL_7:
  return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
}

uint64_t *WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[1];
  uint64_t v4 = (WTF **)result[2];
  if (*result <= v3)
  {
    if (*result != v3)
    {
      uint64_t v9 = v2;
      unsigned __int8 v10 = &v4[v9];
      uint64_t v11 = 8 * v3 - v9 * 8;
      do
      {
        uint64_t v12 = *v10;
        *unsigned __int8 v10 = 0;
        if (v12)
        {
          uint64_t v13 = *(void *)v12;
          *(void *)uint64_t v12 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
          uint64_t result = (uint64_t *)WTF::fastFree(v12, a2);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  else
  {
    int v5 = result;
    if (v3)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        int v7 = *v4;
        *uint64_t v4 = 0;
        if (v7)
        {
          uint64_t v8 = *(void *)v7;
          *(void *)int v7 = 0;
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
          uint64_t result = (uint64_t *)WTF::fastFree(v7, a2);
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      uint64_t v4 = (WTF **)v5[2];
      uint64_t v2 = *v5;
    }
    uint64_t v14 = *((unsigned int *)v5 + 6);
    if (v2 != v14)
    {
      uint64_t v15 = v2;
      unsigned int v16 = &v4[v15];
      uint64_t v17 = 8 * v14 - v15 * 8;
      do
      {
        char v18 = *v16;
        *unsigned int v16 = 0;
        if (v18)
        {
          uint64_t v19 = *(void *)v18;
          *(void *)char v18 = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
          uint64_t result = (uint64_t *)WTF::fastFree(v18, a2);
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageThread::start(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::StorageThread::threadEntryPoint(*(void *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageThread::start(void)::$_1,void>::call(uint64_t a1, void *a2)
{
  return WebCore::StorageThread::threadEntryPoint(*(void *)(a1 + 8), a2);
}

uint64_t WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB3A9660;
  if (qword_1EB3A9660)
  {
    int v3 = *(_DWORD *)(qword_1EB3A9660 - 4);
    int v4 = *(_DWORD *)(qword_1EB3A9660 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  qword_1EB3A9660 = result + 16;
  *(_DWORD *)(result + 8) = a1 - 1;
  *(_DWORD *)(result + 12) = a1;
  *(_DWORD *)uint64_t result = 0;
  *(_DWORD *)(qword_1EB3A9660 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = qword_1EB3A9660;
    while (1)
    {
      uint64_t v9 = (void *)(v2 + 8 * v7);
      unsigned __int8 v10 = (_DWORD *)*v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          if (v8) {
            int v11 = *(_DWORD *)(v8 - 8);
          }
          else {
            int v11 = 0;
          }
          unint64_t v12 = ((unint64_t)v10 + ~((void)v10 << 32)) ^ (((unint64_t)v10 + ~((void)v10 << 32)) >> 22);
          unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
          int v16 = 1;
          do
          {
            unsigned int v17 = v15;
            uint64_t v18 = *(void *)(v8 + 8 * v15);
            unsigned int v15 = (v15 + v16++) & v11;
          }
          while (v18);
          uint64_t v19 = (void *)(v8 + 8 * v17);
          void *v19 = 0;
          uint64_t v20 = (_DWORD *)*v9;
          *uint64_t v9 = 0;
          void *v19 = v20;
          char v21 = (_DWORD *)*v9;
          *uint64_t v9 = 0;
          if (v21)
          {
            if (!*v21)
            {
              uint64_t result = 286;
              __break(0xC471u);
              return result;
            }
            --*v21;
          }
        }
        else
        {
          *uint64_t v9 = 0;
        }
      }
      if (++v7 == v3) {
        goto LABEL_20;
      }
    }
  }
  if (v2)
  {
LABEL_20:
    return WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

uint64_t *WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(uint64_t *result, uint64_t *a2)
{
  int v3 = result;
  uint64_t v4 = result[1];
  if (*result)
  {
    if (v4 + 1 != *result) {
      goto LABEL_18;
    }
    LODWORD(v5) = *((_DWORD *)result + 6);
  }
  else
  {
    uint64_t v5 = *((unsigned int *)result + 6);
    if (v4)
    {
      if (v4 != v5 - 1) {
        goto LABEL_18;
      }
    }
    else if (v5)
    {
      goto LABEL_18;
    }
  }
  uint64_t v6 = v5;
  unint64_t v7 = v5 + ((unint64_t)v5 >> 2);
  if (v7 <= 0xF) {
    unint64_t v7 = 15;
  }
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v8 = (char *)result[2];
  int v9 = v7 + 1;
  unsigned __int8 v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *((_DWORD *)v3 + 6) = v9;
  v3[2] = (uint64_t)v10;
  unint64_t v11 = v3[1];
  if (*v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    uint64_t v12 = *v3 - v6 + *((unsigned int *)v3 + 6);
    uint64_t result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v12), &v8[8 * *v3], 8 * v6 - 8 * *v3);
    *int v3 = v12;
    if (!v8) {
      goto LABEL_18;
    }
LABEL_15:
    if ((char *)v3[2] == v8)
    {
      v3[2] = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t *)memcpy(&v10[8 * *v3], &v8[8 * *v3], 8 * v11 - 8 * *v3);
  if (v8) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v15 = v3[1];
  uint64_t v14 = v3[2];
  uint64_t v16 = *a2;
  *a2 = 0;
  *(void *)(v14 + 8 * v15) = v16;
  if (v15 == *((unsigned int *)v3 + 6) - 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v15 + 1;
  }
  v3[1] = v17;
  return result;
}

void *WebKit::StorageTracker::internalInitialize(WebKit::StorageTracker *this)
{
  *((unsigned char *)this + 129) = 0;
  PAL::UTF8Encoding(this);
  uint64_t v2 = WebKit::storageTracker;
  *(unsigned char *)(WebKit::storageTracker + 128) = 1;
  WebCore::StorageThread::start(*(void *)(v2 + 120));
  uint64_t v3 = WebKit::storageTracker;
  if (*(unsigned char *)(WebKit::storageTracker + 128))
  {
    uint64_t v4 = *(void *)(WebKit::storageTracker + 120);
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v5 = &unk_1F3C796B8;
    v5[1] = v3;
    unsigned __int8 v10 = v5;
    WebCore::StorageThread::dispatch(v4, (uint64_t *)&v10);
    uint64_t v6 = (uint64_t)v10;
    unsigned __int8 v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t v7 = *((void *)this + 15);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1F3C79690;
  v8[1] = this;
  unsigned __int8 v10 = v8;
  WebCore::StorageThread::dispatch(v7, (uint64_t *)&v10);
  uint64_t result = v10;
  unsigned __int8 v10 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

uint64_t WebKit::StorageTracker::tracker(WebKit::StorageTracker *this)
{
  uint64_t v1 = WebKit::storageTracker;
  if (WebKit::storageTracker)
  {
    if (*(unsigned char *)(WebKit::storageTracker + 129))
    {
      WebKit::StorageTracker::internalInitialize((WebKit::StorageTracker *)WebKit::storageTracker);
      return WebKit::storageTracker;
    }
    return v1;
  }
  else
  {
    uint64_t v3 = WTF::fastMalloc((WTF *)0x90);
    *(unsigned char *)uint64_t v3 = 0;
    WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(v3 + 8));
    WTF::String::isolatedCopy();
    *(unsigned char *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = 0;
    *(unsigned char *)(v3 + 96) = 0;
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 112) = 0;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(unsigned char *)(v4 + 64) = 0;
    *(void *)(v3 + 120) = v4;
    *(_WORD *)(v3 + 128) = 0;
    *(void *)(v3 + 136) = 0x4072C00000000000;
    WebKit::storageTracker = v3;
    return v3;
  }
}

uint64_t WebKit::StorageTracker::openTrackerDatabase(WebKit::StorageTracker *this, int a2)
{
  uint64_t v4 = (WTF::StringImpl *)WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  if (*((void *)this + 2)) {
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (a2)
  {
    WTF::FileSystemImpl::parentPath((uint64_t *)&v12, (WTF::FileSystemImpl *)&v11, v6);
    char AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v12, v7);
    unsigned __int8 v10 = v12;
    uint64_t v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        if ((AllDirectories & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      *(_DWORD *)v10 -= 2;
    }
    if ((AllDirectories & 1) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    if (WebCore::SQLiteDatabase::open() && (WebCore::SQLiteDatabase::tableExists() & 1) == 0) {
      WebCore::SQLiteDatabase::executeCommand();
    }
    goto LABEL_15;
  }
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v11, v6)) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v4 = v11;
  unint64_t v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      uint64_t v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v8);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
}

uint64_t WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(atomic_uchar *this)
{
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
  char v3 = 0;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x1E4E44220](this);
  }
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v66, (WTF::FileSystemImpl *)(this + 72), v2);
  uint64_t v5 = v66;
  uint64_t v63 = HIDWORD(v67);
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  char v6 = 0;
  uint64_t v69 = 0;
  atomic_compare_exchange_strong_explicit(this + 96, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (!v6)
  {
    uint64_t v7 = (void *)*((void *)this + 13);
    if (v7) {
      goto LABEL_7;
    }
LABEL_18:
    int8x16_t v62 = v5;
    goto LABEL_19;
  }
  MEMORY[0x1E4E44220](this + 96);
  uint64_t v7 = (void *)*((void *)this + 13);
  if (!v7) {
    goto LABEL_18;
  }
LABEL_7:
  uint64_t v8 = *((unsigned int *)v7 - 1);
  int v9 = &v7[v8];
  if (*((_DWORD *)v7 - 3))
  {
    unsigned __int8 v10 = v7;
    if (v8)
    {
      uint64_t v11 = 8 * v8;
      unsigned __int8 v10 = v7;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          unsigned __int8 v10 = v9;
          int8x16_t v62 = v5;
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    unsigned __int8 v10 = &v7[v8];
    int v9 = v10;
  }
  int8x16_t v62 = v5;
LABEL_15:
  uint64_t v12 = &v7[*((unsigned int *)v7 - 1)];
  if (v12 != v10)
  {
    while (1)
    {
      WTF::String::isolatedCopy();
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)&v66, &v69, &v68);
      char v21 = v68;
      int16x8_t v68 = 0;
      if (!v21) {
        goto LABEL_27;
      }
      if (*(_DWORD *)v21 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v21, v20);
      unint64_t v22 = v10 + 1;
      unsigned __int8 v10 = v9;
      if (v22 != v9)
      {
LABEL_30:
        unsigned __int8 v10 = v22;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          if (++v10 == v9)
          {
            unsigned __int8 v10 = v9;
            break;
          }
        }
      }
LABEL_23:
      if (v10 == v12) {
        goto LABEL_19;
      }
    }
    *(_DWORD *)v21 -= 2;
LABEL_27:
    unint64_t v22 = v10 + 1;
    unsigned __int8 v10 = v9;
    if (v22 != v9) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
LABEL_19:
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(this + 96, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(this + 96));
  }
  int16x8_t v68 = 0;
  uint64_t v14 = WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v17 = (unsigned int *)v66;
  uint64_t v18 = v69;
  if (v63)
  {
    for (int i = (uint64_t *)v62; i != (uint64_t *)((char *)v62 + 8 * v63); ++i)
    {
      uint64_t v14 = *i;
      if (!*i) {
        continue;
      }
      if (v17)
      {
        if (*(unsigned int *)(v14 + 4) <= (unint64_t)v17[1]) {
          continue;
        }
        uint64_t v14 = WTF::StringImpl::endsWith();
        if (!v14) {
          continue;
        }
      }
      else
      {
        if (!*(_DWORD *)(v14 + 4)) {
          continue;
        }
        uint64_t v14 = WTF::StringImpl::endsWith();
        if (!v14) {
          continue;
        }
      }
      if (*((void *)this + 9))
      {
        if (*i) {
          goto LABEL_45;
        }
      }
      else if (*i)
      {
LABEL_45:
        WTF::FileSystemImpl::pathByAppendingComponent();
        unsigned __int8 v24 = (WTF::StringImpl *)*i;
        if (*i) {
          goto LABEL_46;
        }
        goto LABEL_53;
      }
      WTF::FileSystemImpl::pathByAppendingComponent();
      unsigned __int8 v24 = (WTF::StringImpl *)*i;
      if (*i)
      {
LABEL_46:
        int v25 = *((_DWORD *)v24 + 1);
        if (v17) {
          goto LABEL_47;
        }
        goto LABEL_54;
      }
LABEL_53:
      int v25 = 0;
      if (v17)
      {
LABEL_47:
        unsigned int v26 = v17[1];
        if (!v24) {
          goto LABEL_55;
        }
        goto LABEL_48;
      }
LABEL_54:
      unsigned int v26 = 0;
      if (!v24)
      {
LABEL_55:
        int8x16_t v64 = 0;
        if (!v18) {
          goto LABEL_67;
        }
        goto LABEL_58;
      }
LABEL_48:
      uint64_t v23 = (const WTF::StringImpl *)(v25 - v26);
      if (*((_DWORD *)v24 + 1) <= v23)
      {
        *(_DWORD *)v24 += 2;
        int8x16_t v64 = v24;
        if (!v18)
        {
LABEL_67:
          WebKit::StorageTracker::syncSetOriginDetails(this, &v64, (const WTF::String *)&v65);
          goto LABEL_68;
        }
      }
      else
      {
        WTF::StringImpl::substring(v24);
        if (!v18) {
          goto LABEL_67;
        }
      }
LABEL_58:
      int v27 = *(_DWORD *)(v18 - 8);
      unsigned int v28 = *((_DWORD *)v64 + 4);
      if (v28 < 0x100) {
        unsigned int v29 = WTF::StringImpl::hashSlowCase(v64);
      }
      else {
        unsigned int v29 = v28 >> 8;
      }
      for (j = 0; ; unsigned int v29 = j + v31)
      {
        int v31 = v29 & v27;
        unint64_t v32 = *(WTF **)(v18 + 8 * (v29 & v27));
        if (v32 != (WTF *)-1)
        {
          if (!v32) {
            goto LABEL_67;
          }
          if (WTF::equal(v32, v64, v23)) {
            break;
          }
        }
        ++j;
      }
LABEL_68:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v68, &v64, v23, (uint64_t)&v66);
      BOOL v33 = v64;
      int8x16_t v64 = 0;
      if (!v33) {
        goto LABEL_71;
      }
      if (*(_DWORD *)v33 != 2)
      {
        *(_DWORD *)v33 -= 2;
LABEL_71:
        uint64_t v14 = (uint64_t)v65;
        uint64_t v65 = 0;
        if (v14) {
          goto LABEL_74;
        }
        continue;
      }
      WTF::StringImpl::destroy(v33, v15);
      uint64_t v14 = (uint64_t)v65;
      uint64_t v65 = 0;
      if (v14)
      {
LABEL_74:
        if (*(_DWORD *)v14 == 2) {
          uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
  }
  if (!v18)
  {
    uint64_t v36 = 0;
    unint64_t v35 = 0;
LABEL_84:
    if (v18) {
      goto LABEL_85;
    }
    __int16 v38 = 0;
    if (!v36) {
      goto LABEL_113;
    }
LABEL_91:
    while (1)
    {
      int v39 = v68;
      if (v68) {
        break;
      }
LABEL_101:
      int8x16_t v66 = (WTF::StringImpl *)this;
      WTF::String::isolatedCopy();
      char v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v46 = &unk_1F3C79708;
      *((void *)v46 + 1) = v66;
      uint64_t v47 = v67;
      uint64_t v67 = 0;
      *((void *)v46 + 2) = v47;
      uint64_t v65 = v46;
      WTF::callOnMainThread();
      int v48 = v65;
      uint64_t v65 = 0;
      if (v48) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v48 + 8))(v48);
      }
      uint64_t v14 = v67;
      uint64_t v67 = 0;
      if (!v14) {
        goto LABEL_106;
      }
      if (*(_DWORD *)v14 != 2)
      {
        *(_DWORD *)v14 -= 2;
        goto LABEL_106;
      }
      uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
      uint64_t v49 = v36 + 1;
      uint64_t v36 = v35;
      if (v49 != v35)
      {
LABEL_109:
        uint64_t v36 = v49;
        while ((unint64_t)*v36 + 1 <= 1)
        {
          if (++v36 == v35)
          {
            uint64_t v36 = v35;
            break;
          }
        }
      }
LABEL_90:
      if (v36 == v38) {
        goto LABEL_113;
      }
    }
    int v40 = *((_DWORD *)v68 - 2);
    unsigned int v41 = *((_DWORD *)*v36 + 4);
    if (v41 < 0x100) {
      unsigned int v42 = WTF::StringImpl::hashSlowCase(*v36);
    }
    else {
      unsigned int v42 = v41 >> 8;
    }
    for (k = 0; ; unsigned int v42 = k + v44)
    {
      int v44 = v42 & v40;
      char v45 = (WTF *)*((void *)v39 + (v42 & v40));
      if (v45 != (WTF *)-1)
      {
        if (!v45) {
          goto LABEL_101;
        }
        uint64_t v14 = WTF::equal(v45, *v36, v16);
        if (v14) {
          break;
        }
      }
      ++k;
    }
LABEL_106:
    uint64_t v49 = v36 + 1;
    uint64_t v36 = v35;
    if (v49 != v35) {
      goto LABEL_109;
    }
    goto LABEL_90;
  }
  uint64_t v34 = *(unsigned int *)(v18 - 4);
  unint64_t v35 = (WTF::StringImpl **)(v18 + 8 * v34);
  if (*(_DWORD *)(v18 - 12))
  {
    uint64_t v36 = (WTF::StringImpl **)v18;
    if (v34)
    {
      uint64_t v37 = 8 * v34;
      uint64_t v36 = (WTF::StringImpl **)v18;
      do
      {
        if ((unint64_t)*v36 + 1 > 1) {
          goto LABEL_84;
        }
        ++v36;
        v37 -= 8;
      }
      while (v37);
      uint64_t v36 = v35;
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  uint64_t v36 = (WTF::StringImpl **)(v18 + 8 * v34);
  unint64_t v35 = v36;
LABEL_85:
  __int16 v38 = (WTF::StringImpl **)(v18 + 8 * *(unsigned int *)(v18 - 4));
  if (v38 != v36) {
    goto LABEL_91;
  }
LABEL_113:
  if (!v17) {
    goto LABEL_116;
  }
  if (*v17 != 2)
  {
    *v17 -= 2;
LABEL_116:
    unint64_t v50 = v68;
    if (!v68) {
      goto LABEL_117;
    }
    goto LABEL_121;
  }
  uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v17, v15);
  unint64_t v50 = v68;
  if (!v68)
  {
LABEL_117:
    uint64_t v51 = v69;
    if (!v69) {
      goto LABEL_118;
    }
    goto LABEL_130;
  }
LABEL_121:
  uint64_t v53 = *((unsigned int *)v50 - 1);
  if (v53)
  {
    uint32x4_t v54 = (WTF::StringImpl **)v50;
    do
    {
      int v55 = *v54;
      if (*v54 != (WTF::StringImpl *)-1)
      {
        *uint32x4_t v54 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v15);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      ++v54;
      --v53;
    }
    while (v53);
  }
  uint64_t v14 = WTF::fastFree((WTF::StringImpl *)((char *)v50 - 16), v15);
  uint64_t v51 = v69;
  if (!v69)
  {
LABEL_118:
    uint64_t v52 = v63;
    if (!v63) {
      goto LABEL_145;
    }
    goto LABEL_139;
  }
LABEL_130:
  uint64_t v56 = *(unsigned int *)(v51 - 4);
  if (v56)
  {
    uint8x8_t v57 = (WTF::StringImpl **)v51;
    do
    {
      unsigned int v58 = *v57;
      if (*v57 != (WTF::StringImpl *)-1)
      {
        *uint8x8_t v57 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2) {
            WTF::StringImpl::destroy(v58, v15);
          }
          else {
            *(_DWORD *)v58 -= 2;
          }
        }
      }
      ++v57;
      --v56;
    }
    while (v56);
  }
  uint64_t v14 = WTF::fastFree((WTF *)(v51 - 16), v15);
  uint64_t v52 = v63;
  if (v63)
  {
LABEL_139:
    uint64_t v59 = 8 * v52;
    unint64_t v60 = (uint64_t *)v62;
    do
    {
      uint64_t v14 = *v60;
      *unint64_t v60 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          uint64_t v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      ++v60;
      v59 -= 8;
    }
    while (v59);
  }
LABEL_145:
  if (v62) {
    uint64_t v14 = WTF::fastFree(v62, v15);
  }
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v14);
}

uint64_t WebKit::StorageTracker::syncSetOriginDetails(atomic_uchar *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
  char v5 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    MEMORY[0x1E4E44220](this);
    int v6 = 1;
    uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)this, 1);
    if (!*((void *)this + 2)) {
      goto LABEL_28;
    }
  }
  else
  {
    int v6 = 1;
    uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)this, 1);
    if (!*((void *)this + 2)) {
      goto LABEL_28;
    }
  }
  uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
  int v8 = v28;
  if (!v28)
  {
    WebCore::SQLiteStatement::bindText();
    WebCore::SQLiteStatement::bindText();
    WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v27);
    char v10 = 0;
    uint64_t v11 = this + 96;
    atomic_compare_exchange_strong_explicit(this + 96, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10)
    {
      MEMORY[0x1E4E44220](this + 96);
      uint64_t v12 = (uint64_t *)(this + 104);
      uint64_t v13 = *((void *)this + 13);
      if (v13)
      {
LABEL_6:
        int v14 = *(_DWORD *)(v13 - 8);
        unsigned int v15 = *((_DWORD *)*a2 + 4);
        if (v15 < 0x100) {
          unsigned int v16 = WTF::StringImpl::hashSlowCase(*a2);
        }
        else {
          unsigned int v16 = v15 >> 8;
        }
        for (i = 0; ; unsigned int v16 = i + v18)
        {
          int v18 = v16 & v14;
          uint64_t v19 = *(WTF **)(v13 + 8 * (v16 & v14));
          if (v19 != (WTF *)-1)
          {
            if (!v19) {
              goto LABEL_18;
            }
            if (WTF::equal(v19, *a2, v9)) {
              break;
            }
          }
          ++i;
        }
LABEL_19:
        int v20 = 1;
        atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
        if (v20 == 1)
        {
          char v21 = 0;
          unint64_t v22 = this + 80;
          atomic_compare_exchange_strong_explicit(this + 80, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
          if (!v21) {
            goto LABEL_21;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v11);
          char v25 = 0;
          unint64_t v22 = this + 80;
          atomic_compare_exchange_strong_explicit(this + 80, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
          if (!v25)
          {
LABEL_21:
            uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)*((void *)this + 11);
            if (!v7)
            {
LABEL_23:
              int v23 = 1;
              atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
              if (v23 != 1) {
                uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)v22);
              }
              int v8 = v28;
              goto LABEL_26;
            }
LABEL_22:
            uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)(*(uint64_t (**)(WebCore::SQLiteDatabaseTracker *, WTF::StringImpl **))(*(void *)v7 + 16))(v7, a2);
            goto LABEL_23;
          }
        }
        MEMORY[0x1E4E44220](v22);
        uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)*((void *)this + 11);
        if (!v7) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = (uint64_t *)(this + 104);
      uint64_t v13 = *((void *)this + 13);
      if (v13) {
        goto LABEL_6;
      }
    }
LABEL_18:
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v12, a2, v9, (uint64_t)v26);
    goto LABEL_19;
  }
LABEL_26:
  if (v8 != -1) {
    uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(unsigned char *, unsigned char *))off_1F3C79660[v8])(v26, v27);
  }
LABEL_28:
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    uint64_t v7 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v7);
}

uint64_t WebKit::StorageTracker::setOriginDetails(uint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  if (*(unsigned char *)(this + 128))
  {
    int v4 = (uint64_t *)this;
    char v5 = 0;
    int v6 = (atomic_uchar *)(this + 96);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 96), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5)
    {
      MEMORY[0x1E4E44220](this + 96, a2, a3);
      uint64_t v7 = v4 + 13;
      uint64_t v8 = v4[13];
      if (v8)
      {
LABEL_4:
        int v9 = *(_DWORD *)(v8 - 8);
        unsigned int v10 = *((_DWORD *)*a2 + 4);
        if (v10 < 0x100) {
          unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
        }
        else {
          unsigned int v11 = v10 >> 8;
        }
        for (i = 0; ; unsigned int v11 = i + v13)
        {
          int v13 = v11 & v9;
          int v14 = *(WTF **)(v8 + 8 * (v11 & v9));
          if (v14 != (WTF *)-1)
          {
            if (!v14) {
              goto LABEL_14;
            }
            this = WTF::equal(v14, *a2, a3);
            if (this) {
              break;
            }
          }
          ++i;
        }
        int v15 = 0;
LABEL_15:
        int v16 = 1;
        atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
        if (v16 == 1)
        {
          if (!v15) {
            return this;
          }
        }
        else
        {
          this = WTF::Lock::unlockSlow((WTF::Lock *)v6);
          if (!v15) {
            return this;
          }
        }
        v23[0] = (WTF::StringImpl *)v4;
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        uint64_t v17 = v24;
        long long v21 = *(_OWORD *)v23;
        v23[1] = 0;
        unsigned __int8 v24 = 0;
        uint64_t v18 = WTF::fastMalloc((WTF *)0x28);
        *(void *)uint64_t v18 = &unk_1F3C79730;
        *(void *)(v18 + 8) = v4;
        *(_OWORD *)(v18 + 16) = v21;
        *(void *)(v18 + 32) = v17;
        uint64_t v22 = v18;
        WTF::ensureOnMainThread();
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        int v20 = v24;
        unsigned __int8 v24 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::destroy(v20, v19);
            this = (uint64_t)v23[1];
            v23[1] = 0;
            if (!this) {
              return this;
            }
            goto LABEL_25;
          }
          *(_DWORD *)v20 -= 2;
        }
        this = (uint64_t)v23[1];
        v23[1] = 0;
        if (!this) {
          return this;
        }
LABEL_25:
        if (*(_DWORD *)this == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, v19);
        }
        *(_DWORD *)this -= 2;
        return this;
      }
    }
    else
    {
      uint64_t v7 = (uint64_t *)(this + 104);
      uint64_t v8 = *(void *)(this + 104);
      if (v8) {
        goto LABEL_4;
      }
    }
LABEL_14:
    this = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v7, a2, a3, (uint64_t)v23);
    int v15 = 1;
    goto LABEL_15;
  }
  return this;
}

uint64_t WebKit::StorageTracker::origins@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 128))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  uint64_t v3 = this;
  char v4 = 0;
  char v5 = (atomic_uchar *)(this + 96);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 96), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    this = MEMORY[0x1E4E44220](this + 96);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v6 = *(void *)(v3 + 104);
    if (!v6) {
      goto LABEL_33;
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v6 = *(void *)(this + 104);
    if (!v6) {
      goto LABEL_33;
    }
  }
  uint64_t v7 = *(unsigned int *)(v6 - 12);
  if (v7)
  {
    if (v7 >> 27)
    {
      __break(0xC471u);
      return this;
    }
    this = WTF::fastMalloc((WTF *)(32 * v7));
    *(_DWORD *)(a2 + 8) = v7;
    *(void *)a2 = this;
    uint64_t v8 = *(void *)(v3 + 104);
    if (v8)
    {
      if (*(_DWORD *)(v8 - 12))
      {
        uint64_t v9 = this;
        uint64_t v10 = *(unsigned int *)(v8 - 4);
        if (v10)
        {
          uint64_t v11 = 8 * v10;
          uint64_t v12 = *(uint64_t **)(v3 + 104);
          while ((unint64_t)(*v12 + 1) <= 1)
          {
            ++v12;
            v11 -= 8;
            if (!v11) {
              goto LABEL_33;
            }
          }
        }
        else
        {
          uint64_t v12 = *(uint64_t **)(v3 + 104);
        }
        int v13 = (uint64_t *)(v8 + 8 * v10);
        if (v12 != v13)
        {
          unsigned int v14 = 0;
          uint64_t v15 = *v12;
LABEL_17:
          if (v15)
          {
            this = WebCore::SecurityOriginData::fromDatabaseIdentifier();
            if (!v22) {
              goto LABEL_30;
            }
          }
          else
          {
            this = WebCore::SecurityOriginData::fromDatabaseIdentifier();
            if (!v22) {
              goto LABEL_30;
            }
          }
          if (v14 == *(_DWORD *)(a2 + 8))
          {
            this = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v14 + 1, (unint64_t)v20);
            uint64_t v9 = *(void *)a2;
            uint64_t v16 = *(void *)a2 + 32 * *(unsigned int *)(a2 + 12);
            *(unsigned char *)uint64_t v16 = 0;
            *(_DWORD *)(v16 + 24) = -1;
            uint64_t v17 = *(unsigned int *)(this + 24);
            if (v17 == -1) {
              goto LABEL_27;
            }
            this = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1F3C79770[v17])(&v19, v16, this);
          }
          else
          {
            uint64_t v16 = v9 + 32 * v14;
            *(unsigned char *)uint64_t v16 = 0;
            *(_DWORD *)(v16 + 24) = -1;
            LODWORD(v17) = v21;
            if (v21 == -1) {
              goto LABEL_27;
            }
            this = ((uint64_t (*)(char *, uint64_t, unsigned char *))off_1F3C79770[v21])(&v19, v16, v20);
          }
          *(_DWORD *)(v16 + 24) = v17;
LABEL_27:
          unsigned int v14 = *(_DWORD *)(a2 + 12) + 1;
          *(_DWORD *)(a2 + 12) = v14;
          if (v22 && v21 != -1) {
            this = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v21])(&v19, v20);
          }
LABEL_30:
          while (++v12 != v13)
          {
            uint64_t v15 = *v12;
            if ((unint64_t)(*v12 + 1) > 1)
            {
              if (v12 != v13) {
                goto LABEL_17;
              }
              break;
            }
          }
        }
      }
    }
  }
LABEL_33:
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

atomic_uchar *WebKit::StorageTracker::deleteAllOrigins(atomic_uchar *this)
{
  if (!this[128]) {
    return this;
  }
  uint64_t v1 = this;
  char v2 = 0;
  uint64_t v3 = this + 96;
  atomic_compare_exchange_strong_explicit(this + 96, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](this + 96);
    char v4 = WebKit::StorageTracker::willDeleteAllOrigins((WTF::StringImpl *)v1);
    uint64_t v6 = (WTF::StringImpl **)*((void *)v1 + 13);
    if (v6) {
      goto LABEL_4;
    }
  }
  else
  {
    char v4 = WebKit::StorageTracker::willDeleteAllOrigins((WTF::StringImpl *)this);
    uint64_t v6 = (WTF::StringImpl **)*((void *)v1 + 13);
    if (v6)
    {
LABEL_4:
      *((void *)v1 + 13) = 0;
      uint64_t v7 = *((unsigned int *)v6 - 1);
      if (v7)
      {
        uint64_t v8 = v6;
        do
        {
          uint64_t v9 = *v8;
          if (*v8 != (WTF::StringImpl *)-1)
          {
            StringImpl *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2) {
                WTF::StringImpl::destroy(v9, v5);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
          }
          ++v8;
          --v7;
        }
        while (v7);
      }
      char v4 = (WebKit::WebStorageNamespaceProvider *)WTF::fastFree((WTF *)(v6 - 2), v5);
    }
  }
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    char v4 = (WebKit::WebStorageNamespaceProvider *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  WebKit::WebStorageNamespaceProvider::clearLocalStorageForAllOrigins(v4);
  uint64_t v11 = *((void *)v1 + 15);
  uint64_t v12 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v12 = &unk_1F3C797A0;
  *((void *)v12 + 1) = v1;
  int v13 = v12;
  WebCore::StorageThread::dispatch(v11, (uint64_t *)&v13);
  this = v13;
  int v13 = 0;
  if (this) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)this + 8))(this);
  }
  return this;
}

WTF::StringImpl *WebKit::StorageTracker::willDeleteAllOrigins(WTF::StringImpl *this)
{
  uint64_t v1 = (void *)*((void *)this + 13);
  if (v1)
  {
    uint64_t v2 = *((unsigned int *)v1 - 1);
    uint64_t v3 = &v1[v2];
    if (*((_DWORD *)v1 - 3))
    {
      if (v2)
      {
        uint64_t v4 = 8 * v2;
        while ((unint64_t)(*v1 + 1) <= 1)
        {
          ++v1;
          v4 -= 8;
          if (!v4)
          {
            uint64_t v1 = v3;
            break;
          }
        }
      }
      if (v3 != v1)
      {
        char v5 = (uint64_t *)((char *)this + 112);
        while (1)
        {
          WTF::String::isolatedCopy();
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)&v8, v5, &v9);
          this = v9;
          uint64_t v9 = 0;
          if (!this) {
            goto LABEL_17;
          }
          if (*(_DWORD *)this != 2) {
            break;
          }
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
          uint64_t v7 = v1 + 1;
          uint64_t v1 = v3;
          if (v7 != v3)
          {
LABEL_20:
            uint64_t v1 = v7;
            while ((unint64_t)(*v1 + 1) <= 1)
            {
              if (++v1 == v3)
              {
                uint64_t v1 = v3;
                break;
              }
            }
          }
LABEL_13:
          if (v1 == v3) {
            return this;
          }
        }
        *(_DWORD *)this -= 2;
LABEL_17:
        uint64_t v7 = v1 + 1;
        uint64_t v1 = v3;
        if (v7 != v3) {
          goto LABEL_20;
        }
        goto LABEL_13;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::StorageTracker::deleteOrigin(WTF::StringImpl *this, const WebCore::SecurityOriginData *a2)
{
  if (*((unsigned char *)this + 128))
  {
    uint64_t v3 = this;
    WebKit::WebStorageNamespaceProvider::clearLocalStorageForOrigin(a2, a2);
    WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v15, a2);
    char v5 = 0;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3 + 96, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x1E4E44220]((char *)v3 + 96);
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v3 + 14, &v15, v4, (uint64_t)&v16);
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)v3 + 13, &v15, v7);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3 + 96, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v3 + 96));
    }
    uint64_t v8 = *((void *)v3 + 15);
    uint64_t v16 = v3;
    WTF::String::isolatedCopy();
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1F3C797C8;
    v9[1] = v16;
    int v10 = v17;
    uint64_t v17 = 0;
    v9[2] = v10;
    unsigned int v14 = v9;
    WebCore::StorageThread::dispatch(v8, (uint64_t *)&v14);
    uint64_t v12 = (uint64_t)v14;
    unsigned int v14 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    int v13 = v17;
    uint64_t v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        this = v15;
        uint64_t v15 = 0;
        if (!this) {
          return this;
        }
        goto LABEL_14;
      }
      *(_DWORD *)v13 -= 2;
    }
    this = v15;
    uint64_t v15 = 0;
    if (!this) {
      return this;
    }
LABEL_14:
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; int v8 = ++i + v10)
  {
    uint64_t v10 = v8 & v6;
    uint64_t v11 = *(WTF **)(v3 + 8 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11) {
        return 0;
      }
      if (WTF::equal(v11, *a2, a3)) {
        break;
      }
    }
  }
  int v13 = (WTF::StringImpl **)(v3 + 8 * v10);
  unsigned int v14 = (WTF::StringImpl **)*a1;
  if (*a1)
  {
    v14 += *((unsigned int *)v14 - 1);
    if (v14 == v13) {
      return 0;
    }
  }
  if (v14 == v13) {
    return 1;
  }
  uint64_t v15 = *v13;
  WTF::StringImpl *v13 = (WTF::StringImpl *)-1;
  if (!v15)
  {
LABEL_18:
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v16 = *a1;
    if (*a1) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v15, v12);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v16 = *a1;
  if (*a1)
  {
LABEL_19:
    --*(_DWORD *)(v16 - 12);
    uint64_t v17 = *a1;
    if (!*a1) {
      return 1;
    }
    goto LABEL_24;
  }
LABEL_23:
  *(_DWORD *)(v16 - 12) = -1;
  uint64_t v17 = *a1;
  if (!*a1) {
    return 1;
  }
LABEL_24:
  unsigned int v19 = 6 * *(_DWORD *)(v17 - 12);
  unsigned int v20 = *(_DWORD *)(v17 - 4);
  if (v19 >= v20 || v20 < 9) {
    return 1;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v20 >> 1, 0);
  return 1;
}

WebCore::SQLiteDatabaseTracker *WebKit::StorageTracker::databasePathForOrigin@<X0>(WebCore::SQLiteDatabaseTracker *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 2))
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
    uint64_t v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
    int v5 = v9;
    if (v9)
    {
      *a2 = 0;
      if (v5 == -1) {
        return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      }
LABEL_4:
      uint64_t v4 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(char *, unsigned char *))off_1F3C79660[v5])(&v10, v8);
      return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
    }
    WebCore::SQLiteStatement::bindText();
    uint64_t v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v8);
    if (v4 != 100)
    {
      *a2 = 0;
      int v5 = v9;
      if (v9 == -1) {
        return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      }
      goto LABEL_4;
    }
    if (!v9)
    {
      uint64_t v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v8);
      int v5 = v9;
      if (v9 == -1) {
        return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      }
      goto LABEL_4;
    }
    unsigned int v6 = (WebKit::StorageTracker *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::diskUsageForOrigin(v6, v7);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::StorageTracker::diskUsageForOrigin(WebKit::StorageTracker *this, WebCore::SecurityOrigin *a2)
{
  if (!*((unsigned char *)this + 128)) {
    return 0;
  }
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x1E4E44220](this);
  }
  WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v15, (WebCore::SecurityOrigin *)((char *)a2 + 8));
  WebKit::StorageTracker::databasePathForOrigin(this, &v16);
  unsigned int v6 = v15;
  uint64_t v15 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      unsigned int v7 = v16;
      if (v16) {
        goto LABEL_8;
      }
LABEL_19:
      uint64_t v9 = 0;
      goto LABEL_20;
    }
    *(_DWORD *)v6 -= 2;
  }
  unsigned int v7 = v16;
  if (!v16) {
    goto LABEL_19;
  }
LABEL_8:
  if (!*((_DWORD *)v7 + 1))
  {
    uint64_t v9 = 0;
    uint64_t v16 = 0;
    int v10 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2)
    {
LABEL_14:
      *(_DWORD *)unsigned int v7 = v10;
      int v11 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
      if (v11 != 1) {
        goto LABEL_21;
      }
      return v9;
    }
LABEL_23:
    WTF::StringImpl::destroy(v7, v5);
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      goto LABEL_21;
    }
    return v9;
  }
  uint64_t v8 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v16, (const WTF::String *)v5);
  if ((_BYTE)v5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v7 = v16;
  uint64_t v16 = 0;
  if (v7)
  {
    int v10 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_20:
  int v13 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 == 1) {
    return v9;
  }
LABEL_21:
  WTF::Lock::unlockSlow(this);
  return v9;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::StorageTracker::internalInitialize(void)::$_0,void>::call()
{
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v3, v0);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::SQLiteDatabaseTracker *WTF::Detail::CallableWrapper<WebKit::StorageTracker::importOriginIdentifiers(void)::$_0,void>::call(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v3);
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)v3, 0);
    if (!*(void *)(v3 + 16)) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)v3, 0);
    if (!*(void *)(v3 + 16)) {
      goto LABEL_25;
    }
  }
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(result);
  int v5 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
  int v6 = v30;
  BOOL v7 = 1;
  if (v30) {
    goto LABEL_20;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 96), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if ((_BYTE)v6) {
    MEMORY[0x1E4E44220](v3 + 96);
  }
  while (1)
  {
    int v5 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v29);
    if (v5 != 100) {
      break;
    }
    if (v30)
    {
LABEL_60:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_61;
    }
    WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v29);
    WTF::String::isolatedCopy();
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)v26, (uint64_t *)(v3 + 104), &v28);
    uint64_t v9 = v28;
    int v28 = 0;
    if (!v9) {
      goto LABEL_13;
    }
    if (*(_DWORD *)v9 != 2)
    {
      *(_DWORD *)v9 -= 2;
LABEL_13:
      int v10 = v27;
      int v27 = 0;
      if (v10) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    WTF::StringImpl::destroy(v9, v8);
    int v10 = v27;
    int v27 = 0;
    if (v10)
    {
LABEL_16:
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
LABEL_7:
    if (v30) {
      goto LABEL_60;
    }
  }
  int v1 = (int)v5;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 96), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 == 1) {
    goto LABEL_19;
  }
LABEL_61:
  int v5 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 96));
LABEL_19:
  BOOL v7 = v1 != 101;
  int v6 = v30;
LABEL_20:
  if (v6 != -1) {
    int v5 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(unsigned char *, void *))off_1F3C79660[v6])(v26, v29);
  }
  uint64_t result = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v5);
  if (v7)
  {
    int v12 = 0;
    goto LABEL_26;
  }
LABEL_25:
  int v12 = 1;
LABEL_26:
  int v13 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1)
  {
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v12) {
      return result;
    }
LABEL_28:
    WebKit::StorageTracker::syncFileSystemAndTrackerDatabase((atomic_uchar *)v3);
    char v14 = 0;
    uint64_t v15 = (atomic_uchar *)(v3 + 80);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 80), (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
    if (v14)
    {
      MEMORY[0x1E4E44220](v3 + 80);
      if (!*(void *)(v3 + 88)) {
        goto LABEL_47;
      }
    }
    else if (!*(void *)(v3 + 88))
    {
      goto LABEL_47;
    }
    char v16 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 96), (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16)
    {
      MEMORY[0x1E4E44220](v3 + 96);
      uint64_t v17 = *(void **)(v3 + 104);
      if (!v17) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v17 = *(void **)(v3 + 104);
      if (!v17) {
        goto LABEL_46;
      }
    }
    uint64_t v18 = *((unsigned int *)v17 - 1);
    unsigned int v19 = &v17[v18];
    if (*((_DWORD *)v17 - 3))
    {
      if (v18)
      {
        uint64_t v20 = 8 * v18;
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          ++v17;
          v20 -= 8;
          if (!v20)
          {
            uint64_t v17 = v19;
            break;
          }
        }
      }
      while (v17 != v19)
      {
        (*(void (**)(void, void *))(**(void **)(v3 + 88) + 16))(*(void *)(v3 + 88), v17);
        unsigned __int8 v24 = v17 + 1;
        uint64_t v17 = v19;
        if (v24 != v19)
        {
          uint64_t v17 = v24;
          while ((unint64_t)(*v17 + 1) <= 1)
          {
            if (++v17 == v19)
            {
              uint64_t v17 = v19;
              break;
            }
          }
        }
      }
    }
LABEL_46:
    int v21 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 96), (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
    if (v21 != 1)
    {
      WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 96));
      int v25 = 1;
      atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
      if (v25 == 1) {
        goto LABEL_48;
      }
      goto LABEL_58;
    }
LABEL_47:
    int v22 = 1;
    atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1) {
      goto LABEL_48;
    }
LABEL_58:
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 80));
LABEL_48:
    uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v23 = &unk_1F3C796E0;
    v23[1] = v3;
    v29[0] = v23;
    WTF::callOnMainThread();
    uint64_t result = (WebCore::SQLiteDatabaseTracker *)v29[0];
    v29[0] = 0;
    if (result) {
      return (WebCore::SQLiteDatabaseTracker *)(*(uint64_t (**)(WebCore::SQLiteDatabaseTracker *))(*(void *)result + 8))(result);
    }
    return result;
  }
  if (v12) {
    goto LABEL_28;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v6 = *a2;
    if (!*a2)
    {
      int v7 = 0;
      uint64_t v8 = *a3;
      unsigned int v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  int v7 = *(_DWORD *)(v6 - 8);
  uint64_t v8 = *a3;
  unsigned int v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v10 = v9 >> 8;
LABEL_7:
  int v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v7;
    char v14 = (WTF::StringImpl **)(v6 + 8 * (v10 & v7));
    uint64_t v15 = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      int v11 = (WTF::StringImpl **)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!v15)
    {
      if (v11)
      {
        *int v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        char v14 = v11;
      }
      unsigned int v19 = *a3;
      *a3 = 0;
      uint64_t result = (WTF::StringImpl **)*v14;
      void *v14 = v19;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
          uint64_t v20 = *a2;
          if (*a2)
          {
LABEL_21:
            ++*(_DWORD *)(v20 - 12);
            uint64_t v21 = *a2;
            if (*a2) {
              goto LABEL_22;
            }
            goto LABEL_31;
          }
LABEL_30:
          *(_DWORD *)(v20 - 12) = 1;
          uint64_t v21 = *a2;
          if (*a2)
          {
LABEL_22:
            uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
            unint64_t v23 = *(unsigned int *)(v21 - 4);
            if (v23 <= 0x400) {
              goto LABEL_23;
            }
            goto LABEL_32;
          }
LABEL_31:
          uint64_t v22 = *(unsigned int *)(v21 - 16);
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400)
          {
LABEL_23:
            if (3 * v23 > 4 * v22)
            {
LABEL_35:
              uint64_t v25 = v21 + 8 * v23;
              char v24 = 1;
              goto LABEL_36;
            }
            if (!v23)
            {
              uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
              char v14 = result;
              uint64_t v21 = *a2;
              if (!*a2)
              {
LABEL_26:
                unint64_t v23 = 0;
                goto LABEL_35;
              }
LABEL_34:
              unint64_t v23 = *(unsigned int *)(v21 - 4);
              goto LABEL_35;
            }
LABEL_33:
            uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v14);
            char v14 = result;
            uint64_t v21 = *a2;
            if (!*a2) {
              goto LABEL_26;
            }
            goto LABEL_34;
          }
LABEL_32:
          if (v23 > 2 * v22) {
            goto LABEL_35;
          }
          goto LABEL_33;
        }
        *(_DWORD *)result -= 2;
      }
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_21;
      }
      goto LABEL_30;
    }
    uint64_t result = (WTF::StringImpl **)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v10 = i + v13;
  }
  uint64_t v17 = *a2;
  if (*a2) {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
  }
  else {
    uint64_t v18 = 0;
  }
  char v24 = 0;
  uint64_t v25 = v17 + 8 * v18;
LABEL_36:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    while (1)
    {
      unsigned int v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      char v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1)
          {
            int v16 = *(_DWORD *)(v15 - 8);
            unsigned int v17 = *((_DWORD *)v14 + 4);
            if (v17 >= 0x100) {
              goto LABEL_12;
            }
LABEL_14:
            unsigned int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            int v16 = 0;
            unsigned int v17 = *((_DWORD *)v14 + 4);
            if (v17 < 0x100) {
              goto LABEL_14;
            }
LABEL_12:
            unsigned int v18 = v17 >> 8;
          }
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v16;
            unsigned int v18 = ++v19 + v20;
          }
          while (*(void *)(v15 + 8 * v20));
          uint64_t v21 = (WTF::StringImpl **)(v15 + 8 * v20);
          WTF::StringImpl *v21 = 0;
          uint64_t v22 = *v13;
          WTF::StringImpl *v13 = 0;
          WTF::StringImpl *v21 = v22;
          unint64_t v23 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v10);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          if (v13 == a3) {
            int v12 = v21;
          }
          goto LABEL_7;
        }
        WTF::StringImpl *v13 = 0;
      }
LABEL_7:
      if (++v11 == v7) {
        goto LABEL_25;
      }
    }
  }
  int v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncImportOriginIdentifiers(void)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (!v1)
  {
    uint64_t result = *(void *)(v2 + 88);
    if (!result) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  MEMORY[0x1E4E44220](v2);
  uint64_t result = *(void *)(v2 + 88);
  if (result) {
LABEL_3:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
LABEL_4:
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    uint64_t v7 = *a1;
    if (!*a1)
    {
      int v8 = 0;
      uint64_t v9 = *a2;
      unsigned int v10 = *((_DWORD *)*a2 + 4);
      if (v10 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v11 = WTF::StringImpl::hashSlowCase(v9);
      goto LABEL_7;
    }
  }
  int v8 = *(_DWORD *)(v7 - 8);
  uint64_t v9 = *a2;
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v11 = v10 >> 8;
LABEL_7:
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v8;
    uint64_t v15 = (WTF::StringImpl **)(v7 + 8 * (v11 & v8));
    uint64_t result = *v15;
    if (*v15 == (WTF::StringImpl *)-1)
    {
      int v12 = (WTF::StringImpl **)(v7 + 8 * v14);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v12)
      {
        uint64_t result = 0;
        StringImpl *v12 = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v15 = v12;
      }
      int v19 = *a2;
      if (*a2) {
        *(_DWORD *)v19 += 2;
      }
      WTF *v15 = v19;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        uint64_t v20 = *a1;
        if (*a1) {
          goto LABEL_21;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v20 = *a1;
        if (*a1)
        {
LABEL_21:
          uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
          unint64_t v22 = *(unsigned int *)(v20 - 4);
          if (v22 <= 0x400) {
            goto LABEL_22;
          }
          goto LABEL_30;
        }
      }
      uint64_t v21 = *(unsigned int *)(v20 - 16);
      unint64_t v22 = *(unsigned int *)(v20 - 4);
      if (v22 <= 0x400)
      {
LABEL_22:
        if (3 * v22 > 4 * v21)
        {
LABEL_33:
          uint64_t v24 = v20 + 8 * v22;
          char v23 = 1;
          goto LABEL_34;
        }
        if (!v22)
        {
          uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, v15);
          uint64_t v15 = (WTF::StringImpl **)result;
          uint64_t v20 = *a1;
          if (!*a1)
          {
LABEL_25:
            unint64_t v22 = 0;
            goto LABEL_33;
          }
LABEL_32:
          unint64_t v22 = *(unsigned int *)(v20 - 4);
          goto LABEL_33;
        }
LABEL_31:
        uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v15);
        uint64_t v15 = (WTF::StringImpl **)result;
        uint64_t v20 = *a1;
        if (!*a1) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
LABEL_30:
      if (v22 > 2 * v21) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    uint64_t result = (WTF *)WTF::equal(result, *a2, a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v11 = i + v14;
  }
  uint64_t v17 = *a1;
  if (*a1) {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
  }
  else {
    uint64_t v18 = 0;
  }
  char v23 = 0;
  uint64_t v24 = v17 + 8 * v18;
LABEL_34:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 16) = v23;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(void)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C79708;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(void)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79708;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 16))
  {
    char v1 = *(WTF::StringImpl **)(a1 + 8);
    uint64_t result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v6) {
      return result;
    }
  }
  else
  {
    char v1 = *(WTF::StringImpl **)(a1 + 8);
    uint64_t result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v6) {
      return result;
    }
  }
  uint64_t result = (uint64_t)WebKit::StorageTracker::deleteOrigin(v1, (const WebCore::SecurityOriginData *)v4);
  if (v6)
  {
    if (v5 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v5])(&v3, v4);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_1,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C79730;
  char v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = (WTF::StringImpl *)a1[3];
    a1[3] = 0;
    if (!v4) {
      return a1;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_1,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79730;
  char v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      int v4 = (WTF::StringImpl *)*((void *)this + 3);
      *((void *)this + 3) = 0;
      if (!v4) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v4)
  {
LABEL_9:
    int v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v4, a2);
  int v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_1,void>::call(void *a1)
{
  uint64_t v2 = *(void *)(a1[1] + 120);
  char v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v4 = a1[2];
  *char v3 = &unk_1F3C79758;
  v3[1] = v4;
  uint64_t v5 = a1[3];
  a1[3] = 0;
  v3[2] = v5;
  uint64_t v6 = a1[4];
  a1[4] = 0;
  v3[3] = v6;
  int v8 = v3;
  WebCore::StorageThread::dispatch(v2, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C79758;
  char v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = (WTF::StringImpl *)a1[2];
    a1[2] = 0;
    if (!v4) {
      return a1;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79758;
  char v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
      *((void *)this + 2) = 0;
      if (!v4) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4)
  {
LABEL_9:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v4, a2);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::StorageTracker::syncSetOriginDetails(*(atomic_uchar **)(a1 + 8), (WTF::StringImpl **)(a1 + 16), (const WTF::String *)(a1 + 24));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v3 += 2;
  }
  *(void *)a2 = v3;
  uint64_t v4 = *(_DWORD **)(a3 + 8);
  if (v4) {
    *v4 += 2;
  }
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

unint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      __n128 result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t v8 = 32 * v5;
        uint64_t v9 = v4;
        do
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          uint64_t v10 = *((unsigned int *)v9 + 6);
          if (v10 != -1)
          {
            __n128 result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1F3C79780[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 24) = v10;
            uint64_t v11 = *((unsigned int *)v9 + 6);
            if (v11 != -1) {
              __n128 result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v11])(&v13, v9);
            }
          }
          *((_DWORD *)v9 + 6) = -1;
          v7 += 32;
          uint64_t v9 = (WTF *)((char *)v9 + 32);
          v8 -= 32;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteAllOrigins(void)::$_0,void>::call(WebCore::SQLiteDatabaseTracker *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(a1);
  char v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](v1);
    uint64_t v3 = (sqlite3 *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)v1, 0);
    if (!*(void *)(v1 + 16)) {
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v3 = (sqlite3 *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)v1, 0);
    if (!*(void *)(v1 + 16)) {
      goto LABEL_51;
    }
  }
  uint64_t v3 = (sqlite3 *)WebCore::SQLiteDatabase::prepareStatement();
  int v4 = v33;
  if (v33) {
    goto LABEL_49;
  }
  uint64_t v5 = (atomic_uchar *)(v1 + 96);
  uint64_t v6 = (atomic_uchar *)(v1 + 80);
  while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v32) == 100)
  {
    if (v33) {
      goto LABEL_56;
    }
    WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v32);
    char v10 = 0;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (!v10)
    {
      uint64_t v11 = *(void *)(v1 + 112);
      if (!v11) {
        goto LABEL_23;
      }
LABEL_13:
      int v12 = *(_DWORD *)(v11 - 8);
      unsigned int v13 = *((_DWORD *)v31 + 4);
      if (v13 < 0x100) {
        unsigned int v14 = WTF::StringImpl::hashSlowCase(v31);
      }
      else {
        unsigned int v14 = v13 >> 8;
      }
      for (i = 0; ; unsigned int v14 = i + v16)
      {
        int v16 = v14 & v12;
        uint64_t v17 = *(WTF **)(v11 + 8 * (v14 & v12));
        if (v17 != (WTF *)-1)
        {
          if (!v17)
          {
            LODWORD(v11) = 0;
            goto LABEL_23;
          }
          if (WTF::equal(v17, v31, v9))
          {
            LODWORD(v11) = 1;
            goto LABEL_23;
          }
        }
        ++i;
      }
    }
    MEMORY[0x1E4E44220](v1 + 96);
    uint64_t v11 = *(void *)(v1 + 112);
    if (v11) {
      goto LABEL_13;
    }
LABEL_23:
    int v18 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
    if (v18 == 1)
    {
      int v19 = v31;
      int v31 = 0;
      if (!v19) {
        goto LABEL_28;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 96));
      int v19 = v31;
      int v31 = 0;
      if (!v19) {
        goto LABEL_28;
      }
    }
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v8);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
LABEL_28:
    if (v11)
    {
      if (v33) {
        goto LABEL_56;
      }
      WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v32);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v31, v20);
      unint64_t v22 = v31;
      int v31 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 != 2)
        {
          *(_DWORD *)v22 -= 2;
          goto LABEL_33;
        }
        WTF::StringImpl::destroy(v22, v21);
        char v27 = 0;
        atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
        if (v27)
        {
LABEL_40:
          MEMORY[0x1E4E44220](v1 + 80);
          uint64_t v24 = *(void *)(v1 + 88);
          if (!v24)
          {
LABEL_6:
            int v7 = 1;
            atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
            if (v7 != 1) {
              WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 80));
            }
            goto LABEL_8;
          }
LABEL_35:
          if (v33)
          {
LABEL_56:
            uint64_t v30 = std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::~CallableWrapper(v30);
          }
          WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v32);
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v24 + 16))(v24, &v31);
          unsigned int v26 = v31;
          int v31 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v25);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          goto LABEL_6;
        }
      }
      else
      {
LABEL_33:
        char v23 = 0;
        atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
        if (v23) {
          goto LABEL_40;
        }
      }
      uint64_t v24 = *(void *)(v1 + 88);
      if (!v24) {
        goto LABEL_6;
      }
      goto LABEL_35;
    }
LABEL_8:
    if (v33) {
      goto LABEL_56;
    }
  }
  uint64_t v3 = *(sqlite3 **)(v1 + 16);
  if (v3)
  {
    sqlite3_file_control(v3, 0, 101, 0);
    uint64_t v3 = (sqlite3 *)WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v1 + 8));
  }
  int v4 = v33;
LABEL_49:
  if (v4 != -1) {
    uint64_t v3 = (sqlite3 *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1F3C79660[v4])(&v31, v32);
  }
LABEL_51:
  int v28 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    uint64_t v3 = (sqlite3 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::~CallableWrapper(void *a1, StringImpl *a2)
{
  *a1 = &unk_1F3C797C8;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C797C8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    int v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  int v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::call(WTF::StringImpl **a1)
{
  char v2 = a1[1];
  uint64_t v3 = WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)a1);
  char v5 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    uint64_t v3 = MEMORY[0x1E4E44220](v2);
    char v23 = 0;
    int v7 = (char *)v2 + 96;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2 + 96, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (!v23)
    {
LABEL_3:
      uint64_t v8 = a1 + 2;
      uint64_t v9 = *((void *)v2 + 14);
      if (!v9) {
        goto LABEL_14;
      }
      goto LABEL_4;
    }
  }
  else
  {
    char v6 = 0;
    int v7 = (char *)v2 + 96;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2 + 96, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (!v6) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = MEMORY[0x1E4E44220](v7);
  uint64_t v8 = a1 + 2;
  uint64_t v9 = *((void *)v2 + 14);
  if (v9)
  {
LABEL_4:
    int v10 = *(_DWORD *)(v9 - 8);
    unsigned int v11 = *((_DWORD *)*v8 + 4);
    if (v11 < 0x100) {
      unsigned int v12 = WTF::StringImpl::hashSlowCase(*v8);
    }
    else {
      unsigned int v12 = v11 >> 8;
    }
    for (i = 0; ; unsigned int v12 = i + v14)
    {
      int v14 = v12 & v10;
      uint64_t v3 = *(void *)(v9 + 8 * (v12 & v10));
      if (v3 != -1)
      {
        if (!v3)
        {
          LODWORD(v9) = 0;
          break;
        }
        uint64_t v3 = WTF::equal((WTF *)v3, *v8, v4);
        if (v3)
        {
          LODWORD(v9) = 1;
          break;
        }
      }
      ++i;
    }
  }
LABEL_14:
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
    if (!v9) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v3 = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (!v9) {
      goto LABEL_46;
    }
  }
  uint64_t v3 = WebKit::StorageTracker::openTrackerDatabase(v2, 0);
  if (*((void *)v2 + 2))
  {
    uint64_t v3 = (uint64_t)WebKit::StorageTracker::databasePathForOrigin(v2, &v34);
    if (v34)
    {
      if (!*((_DWORD *)v34 + 1)) {
        goto LABEL_42;
      }
      WebCore::SQLiteDatabase::prepareStatement();
      if (v33 == -1) {
        goto LABEL_42;
      }
      if (v33)
      {
        ((void (*)(char *, unsigned char *))off_1F3C79660[v33])(&v35, v32);
        uint64_t v3 = (uint64_t)v34;
        uint64_t v34 = 0;
        if (!v3) {
          goto LABEL_46;
        }
        goto LABEL_43;
      }
      WebCore::SQLiteStatement::bindText();
      int v17 = WebCore::SQLiteStatement::executeCommand((WebCore::SQLiteStatement *)v32);
      if (v33 != -1) {
        ((void (*)(char *, unsigned char *))off_1F3C79660[v33])(&v35, v32);
      }
      if (!v17)
      {
LABEL_42:
        uint64_t v3 = (uint64_t)v34;
        uint64_t v34 = 0;
        if (!v3) {
          goto LABEL_46;
        }
LABEL_43:
        if (*(_DWORD *)v3 == 2) {
          uint64_t v3 = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v16);
        }
        else {
          *(_DWORD *)v3 -= 2;
        }
        goto LABEL_46;
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v34, (const WTF::String *)v16);
      char v19 = 0;
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
      if (v19)
      {
        MEMORY[0x1E4E44220](v7);
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)v2 + 13, v8, v24);
        uint64_t v20 = *((void *)v2 + 13);
        int v21 = 1;
        if (v20) {
          goto LABEL_28;
        }
      }
      else
      {
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)v2 + 13, v8, v18);
        uint64_t v20 = *((void *)v2 + 13);
        int v21 = 1;
        if (v20)
        {
LABEL_28:
          BOOL v22 = *(_DWORD *)(v20 - 12) == 0;
          goto LABEL_36;
        }
      }
      BOOL v22 = 1;
LABEL_36:
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
      if (v21 == 1)
      {
        if (!v22) {
          goto LABEL_38;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        if (!v22)
        {
LABEL_38:
          char v25 = 0;
          unsigned int v26 = (char *)v2 + 80;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2 + 80, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
          if (!v25) {
            goto LABEL_39;
          }
          goto LABEL_51;
        }
      }
      sqlite3_file_control(*((sqlite3 **)v2 + 2), 0, 101, 0);
      WebCore::SQLiteDatabase::close((WTF::StringImpl *)((char *)v2 + 8));
      char v31 = 0;
      unsigned int v26 = (char *)v2 + 80;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2 + 80, (unsigned __int8 *)&v31, 1u, memory_order_acquire, memory_order_acquire);
      if (!v31)
      {
LABEL_39:
        uint64_t v27 = *((void *)v2 + 11);
        if (!v27) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
LABEL_51:
      MEMORY[0x1E4E44220](v26);
      uint64_t v27 = *((void *)v2 + 11);
      if (!v27)
      {
LABEL_41:
        int v28 = 1;
        atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
        if (v28 != 1)
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v26);
          uint64_t v3 = (uint64_t)v34;
          uint64_t v34 = 0;
          if (!v3) {
            goto LABEL_46;
          }
          goto LABEL_43;
        }
        goto LABEL_42;
      }
LABEL_40:
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v27 + 16))(v27, v8);
      goto LABEL_41;
    }
  }
LABEL_46:
  int v29 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
  if (v29 != 1) {
    uint64_t v3 = WTF::Lock::unlockSlow(v2);
  }
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
}

uint64_t kitClass(WebCore::Node *a1)
{
  uint64_t result = 0;
  unsigned int v3 = *((unsigned __int16 *)a1 + 16);
  switch(v3 >> 12)
  {
    case 1u:
      if ((v3 & 0x10) == 0) {
        goto LABEL_12;
      }
      uint64_t v4 = objc_opt_class();
      char v5 = (uint64_t *)elementClassMap;
      if (!elementClassMap)
      {
        char v6 = (void *)WTF::fastMalloc((WTF *)8);
        void *v6 = 0;
        elementClassMap = (uint64_t)v6;
        uint64_t v7 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB67E0];
        uint64_t v97 = v7;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v8 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A68];
        uint64_t v97 = v8;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v9 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68D0];
        uint64_t v97 = v9;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v10 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68D8];
        uint64_t v97 = v10;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v11 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB65E8];
        uint64_t v97 = v11;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v12 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68E0];
        uint64_t v97 = v12;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v13 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB67F8];
        uint64_t v97 = v13;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v14 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A70];
        uint64_t v97 = v14;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v15 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A78];
        uint64_t v97 = v15;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v16 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6548];
        uint64_t v97 = v16;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v17 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6878];
        uint64_t v97 = v17;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v18 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6618];
        uint64_t v97 = v18;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v19 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6880];
        uint64_t v97 = v19;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v20 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6888];
        uint64_t v97 = v20;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v21 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6890];
        uint64_t v97 = v21;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v22 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6800];
        uint64_t v97 = v22;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v23 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6988];
        uint64_t v97 = v23;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v24 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6648];
        uint64_t v97 = v24;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v25 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68E8];
        uint64_t v97 = v25;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v26 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68F8];
        uint64_t v97 = v26;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v27 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6998];
        uint64_t v97 = v27;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v28 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6650];
        uint64_t v97 = v28;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v29 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6808];
        uint64_t v97 = v29;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v30 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6810];
        uint64_t v97 = v30;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v31 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6818];
        uint64_t v97 = v31;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v32 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6820];
        uint64_t v97 = v32;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v33 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6828];
        uint64_t v97 = v33;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v34 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6830];
        uint64_t v97 = v34;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v35 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6900];
        uint64_t v97 = v35;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v36 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6838];
        uint64_t v97 = v36;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v37 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6908];
        uint64_t v97 = v37;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v38 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6AB0];
        uint64_t v97 = v38;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v39 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68A0];
        uint64_t v97 = v39;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v40 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB69A8];
        uint64_t v97 = v40;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v41 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68A8];
        uint64_t v97 = v41;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v42 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB69B0];
        uint64_t v97 = v42;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v43 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6AC8];
        uint64_t v97 = v43;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v44 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6840];
        uint64_t v97 = v44;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v45 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6910];
        uint64_t v97 = v45;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v46 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6570];
        uint64_t v97 = v46;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v47 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68B0];
        uint64_t v97 = v47;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v48 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6580];
        uint64_t v97 = v48;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v49 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6920];
        uint64_t v97 = v49;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v50 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6928];
        uint64_t v97 = v50;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v51 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6AE8];
        uint64_t v97 = v51;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v52 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6848];
        uint64_t v97 = v52;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v53 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6668];
        uint64_t v97 = v53;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v54 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6AF0];
        uint64_t v97 = v54;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v55 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB67E8];
        uint64_t v97 = v55;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v56 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB69D8];
        uint64_t v97 = v56;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v57 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68B8];
        uint64_t v97 = v57;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v58 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB67F0];
        uint64_t v97 = v58;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v59 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6B00];
        uint64_t v97 = v59;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v60 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6B08];
        uint64_t v97 = v60;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v61 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A08];
        uint64_t v97 = v61;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v62 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A10];
        uint64_t v97 = v62;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v63 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A18];
        uint64_t v97 = v63;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v64 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6850];
        uint64_t v97 = v64;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v65 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6690];
        uint64_t v97 = v65;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v66 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A28];
        uint64_t v97 = v66;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v67 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6858];
        uint64_t v97 = v67;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v68 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A30];
        uint64_t v97 = v68;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v69 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A38];
        uint64_t v97 = v69;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v70 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6860];
        uint64_t v97 = v70;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v71 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6868];
        uint64_t v97 = v71;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v72 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB6A48];
        uint64_t v97 = v72;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        uint64_t v73 = objc_opt_class();
        uint64_t v96 = *MEMORY[0x1E4FB68C0];
        uint64_t v97 = v73;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        char v5 = (uint64_t *)elementClassMap;
      }
      uint64_t v74 = *((void *)a1 + 13);
      if (*(void *)(v74 + 16))
      {
        MEMORY[0x1E4E451C0](&v95, MEMORY[0x1E4F30968], v74 + 24, v74 + 32);
        int8x16_t v75 = (_DWORD *)v95;
        uint64_t v76 = *v5;
        if (*v5)
        {
          unsigned int v77 = *(_DWORD *)(v76 - 8);
          uint64_t v78 = (~((void)v95 << 32) + v95) ^ ((~((void)v95 << 32) + (void)v95) >> 22);
          unint64_t v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((unint64_t)(v78 + ~(v78 << 13)) >> 8));
          unint64_t v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
          uint64_t v81 = v77 & ((v80 >> 31) ^ v80);
          uint64_t v82 = *(void *)(v76 + 16 * v81);
          if (v82 == (void)v95)
          {
LABEL_11:
            uint64_t v84 = *(void *)(v76 + 16 * v81 + 8);
            goto LABEL_22;
          }
          int v83 = 1;
          while (v82)
          {
            uint64_t v81 = (v81 + v83) & v77;
            uint64_t v82 = *(void *)(v76 + 16 * v81);
            ++v83;
            if (v82 == (void)v95) {
              goto LABEL_11;
            }
          }
        }
        uint64_t v84 = 0;
LABEL_22:
        *(void *)&long long v95 = 0;
        if (v75)
        {
          if (*v75 == 1)
          {
            int8x16_t v93 = (WTF *)MEMORY[0x1E4E451B0]();
            WTF::fastFree(v93, v94);
          }
          else
          {
            --*v75;
          }
        }
        goto LABEL_27;
      }
      uint64_t v85 = *v5;
      if (*v5)
      {
        unsigned int v86 = *(_DWORD *)(v85 - 8);
        unint64_t v87 = (~(v74 << 32) + v74) ^ ((unint64_t)(~(v74 << 32) + v74) >> 22);
        unint64_t v88 = 9 * ((v87 + ~(v87 << 13)) ^ ((v87 + ~(v87 << 13)) >> 8));
        unint64_t v89 = (v88 ^ (v88 >> 15)) + ~((v88 ^ (v88 >> 15)) << 27);
        uint64_t v90 = v86 & ((v89 >> 31) ^ v89);
        uint64_t v91 = *(void *)(v85 + 16 * v90);
        if (v91 == v74)
        {
LABEL_20:
          uint64_t v84 = *(void *)(v85 + 16 * v90 + 8);
          goto LABEL_27;
        }
        int v92 = 1;
        while (v91)
        {
          uint64_t v90 = (v90 + v92) & v86;
          uint64_t v91 = *(void *)(v85 + 16 * v90);
          ++v92;
          if (v91 == v74) {
            goto LABEL_20;
          }
        }
      }
      uint64_t v84 = 0;
LABEL_27:
      if (v84) {
        return v84;
      }
      else {
        return v4;
      }
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
LABEL_12:
      return objc_opt_class();
    default:
      return result;
  }
}

void sub_1E1364A98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1364CBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9) {
    _Unwind_Resume(exception_object);
  }
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1E1364E00(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1364FC4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13650F8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E136575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1365770(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  uint64_t v15 = a13;
  if (!a13)
  {
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
    _Unwind_Resume(a1);
  }
  a13 = 0;
  a14 = 0;
  WTF::fastFree(v15, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void WebCore::SimpleRange::~SimpleRange(WebCore::SimpleRange *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
}

void sub_1E1365CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WebCore::TextIndicator *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a18)
  {
    WTF::RefCounted<WebCore::TextIndicator>::deref(a18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1365E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E1365EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E1365EB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a13);
  _Unwind_Resume(a1);
}

void sub_1E1366064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void *)(v10 - 24);
  *(void *)(v10 - 24) = 0;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1366224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E1366238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E136624C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  if (!a9)
  {
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
    _Unwind_Resume(a1);
  }
  WTF::fastFree(a9, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
  _Unwind_Resume(a1);
}

void sub_1E13666A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a10)
  {
    if (*a10 != 1)
    {
      --*a10;
      _Unwind_Resume(exception_object);
    }
    uint64_t v13 = (WTF *)MEMORY[0x1E4E46070]();
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1366810(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

DOMObjectInternal *kit(DOMObjectInternal *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMNodeFilter alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)(v1 + 16);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMBlob alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 4);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  uint64_t v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  uint64_t v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMCSSRuleList alloc] _init];
      v3[2] = v1;
      (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
      char v4 = 0;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  uint64_t v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  uint64_t v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMCSSStyleDeclaration alloc] _init];
      v3[2] = v1;
      (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
      char v4 = 0;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  NSObject *v5;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      char v4 = (void *)CFMakeCollectable(v3);
    }
    else
    {
      int v5 = [(WebScriptObject *)[DOMCounter alloc] _init];
      v5[2].isa = v1;
      ++*(_DWORD *)v1;
      addDOMWrapper(v5, v1);
      char v4 = (void *)CFMakeCollectable(v5);
    }
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMFileList alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 2);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMHTMLOptionsCollection alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 4);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMImplementation alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      *(_DWORD *)(*(void *)(*((void *)v1 + 1) + 8) + 28) += 2;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  void *v5;
  char v6;
  int v7;
  unsigned char v8[24];
  DOMObjectInternal *v9;
  void *v10;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      char v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    else
    {
      int v5 = [(WebScriptObject *)[DOMMediaError alloc] _init];
      char v6 = 0;
      v5[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v10 = v5;
      uint64_t v9 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v9, (uint64_t *)&v10, (uint64_t)v8);
      uint64_t v7 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
      return (DOMObjectInternal *)(id)CFMakeCollectable(v5);
    }
  }
  return result;
}

{
  DOMObjectInternal *v1;
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  void *v5;
  char v6;
  int v7;
  unsigned char v8[24];
  DOMObjectInternal *v9;
  void *v10;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      char v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    else
    {
      int v5 = [(WebScriptObject *)[DOMMediaList alloc] _init];
      char v6 = 0;
      v5[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v10 = v5;
      uint64_t v9 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v9, (uint64_t *)&v10, (uint64_t)v8);
      uint64_t v7 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
      return (DOMObjectInternal *)(id)CFMakeCollectable(v5);
    }
  }
  return result;
}

{
  WebCore::NamedNodeMap *v1;
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  void *v5;
  char v6;
  int v7;
  unsigned char v8[24];
  WebCore::NamedNodeMap *v9;
  void *v10;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      char v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    else
    {
      int v5 = [(WebScriptObject *)[DOMNamedNodeMap alloc] _init];
      v5[2] = v1;
      WebCore::NamedNodeMap::ref(v1);
      char v6 = 0;
      uint64_t v10 = v5;
      uint64_t v9 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v9, (uint64_t *)&v10, (uint64_t)v8);
      uint64_t v7 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
      return (DOMObjectInternal *)(id)CFMakeCollectable(v5);
    }
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMNodeIterator alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 2);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  uint64_t v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  uint64_t v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMNodeList alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)(v1 + 16);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMRGBColor alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMRange alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 2);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMRect alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMStyleSheetList alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMTimeRanges alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMTokenList alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      *(_DWORD *)(*(void *)v1 + 28) += 2;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMTreeWalker alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 2);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMNativeXPathNSResolver alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*((_DWORD *)v1 + 2);
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMXPathResult alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  void *DOMWrapper;
  void *v3;
  char v4;
  int v5;
  void *v6;
  unsigned char v7[24];
  DOMObjectInternal *v8;
  void *v9;
  uint64_t vars8;

  if (result)
  {
    uint64_t v1 = result;
    DOMWrapper = (void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      uint64_t v3 = [(WebScriptObject *)[DOMXPathExpression alloc] _init];
      char v4 = 0;
      v3[2] = v1;
      ++*(_DWORD *)v1;
      uint64_t v9 = v3;
      uint64_t v8 = v1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      int v5 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
    }
    char v6 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v6;
  }
  return result;
}

void sub_1E1366C18(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1366C2C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

id kit(WebCore::LocalDOMWindow *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (DOMObjectInternal *)WebCore::LocalDOMWindow::frame(a1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (uint64_t)v1;
  DOMWrapper = (void *)getDOMWrapper(v1);
  if (DOMWrapper)
  {
    char v4 = DOMWrapper;
    CFRetain(DOMWrapper);
  }
  else
  {
    char v4 = [(WebScriptObject *)[DOMAbstractView alloc] _init];
    char v6 = 0;
    v4[2] = v2;
    uint64_t v11 = v4;
    uint64_t v10 = v2;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x1E4E44220](wrapperCacheLock);
    }
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v10, (uint64_t *)&v11, (uint64_t)v9);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    }
  }
  uint64_t v8 = (void *)CFMakeCollectable(v4);
  return v8;
}

void sub_1E1366F40(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1366F54(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

id kit(WebCore::WindowProxy *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (WebCore::LocalDOMWindow *)WebCore::WindowProxy::window(a1);
  if (!v1 || *((unsigned char *)v1 + 56)) {
    return 0;
  }
  return kit(v1);
}

void sub_1E13677BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v13);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v10 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1367818(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v12);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v10 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1367914(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1367A48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E1367B04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1367BFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1367D04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1367D7C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1367EB0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1367EC4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t kitClass(uint64_t a1)
{
  (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return objc_opt_class();
}

uint64_t kitClass(WebCore::CSSRule *a1)
{
  if ((*(unsigned int (**)(WebCore::CSSRule *))(*(void *)a1 + 16))(a1) > 6)
  {
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return objc_opt_class();
}

uint64_t kitClass(WebCore::DeprecatedCSSOMValue *a1)
{
  WebCore::DeprecatedCSSOMValue::cssValueType(a1);
  return objc_opt_class();
}

void sub_1E1369218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, void *a4)
{
  int v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = ~(*a3 << 32) + *a3;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (void *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *uint64_t v16 = v11;
    v16[1] = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v20 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(unsigned int *)(v20 - 16);
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(void *)int v7 = v16;
        *((void *)v7 + 1) = v20 + 16 * v22;
        *((unsigned char *)v7 + 16) = 1;
        return result;
      }
      if (!v22)
      {
        uint64_t result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(a2, 8u, v16);
        uint64_t v16 = result;
        uint64_t v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          unint64_t v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(a2, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      uint64_t v16 = result;
      uint64_t v20 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    uint64_t v16 = (void *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        void *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(unsigned int *)(v8 - 4);
  }
  *(void *)int v7 = v16;
  *((void *)v7 + 1) = v8 + 16 * v23;
  *((unsigned char *)v7 + 16) = 0;
  v16[1] = *a4;
  return result;
}

_OWORD *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (void *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
        int v20 = 1;
        do
        {
          unsigned int v21 = v19;
          uint64_t v22 = *(void *)(v14 + 16 * v19);
          unsigned int v19 = (v19 + v20++) & v15;
        }
        while (v22);
        uint64_t v23 = (_OWORD *)(v14 + 16 * v21);
        _OWORD *v23 = *(_OWORD *)v13;
        if (v13 == a3) {
          unint64_t v12 = v23;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::JSMainThreadNullState *WebCore::JSMainThreadNullState::JSMainThreadNullState(WebCore::JSMainThreadNullState *this)
{
  uint64_t v1 = this;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 736);
  if (!v3 || (this = *(WebCore::JSMainThreadNullState **)(v3 + 96)) == 0) {
    this = (WebCore::JSMainThreadNullState *)WebCore::threadGlobalDataSlow(this);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)v1 + 1) = (char *)v1 + 24;
  *(void *)uint64_t v1 = v4;
  *((void *)v1 + 2) = 4;
  int v5 = (void *)MEMORY[0x1E4FB6500];
  *((unsigned char *)v1 + ++*(_DWORD *)(this + 56) = 0;
  *((void *)v1 + 8) = *v5;
  *((void *)v1 + 9) = v4;
  void *v5 = (char *)v1 + 8;
  uint64_t v6 = *(void *)(StatusReg + 736);
  if (!v6 || (this = *(WebCore::JSMainThreadNullState **)(v6 + 96)) == 0) {
    this = (WebCore::JSMainThreadNullState *)WebCore::threadGlobalDataSlow(this);
  }
  *((void *)this + 8) = 0;
  return v1;
}

void sub_1E136962C(_Unwind_Exception *a1, void *a2)
{
  if (*(_DWORD *)(v2 + 20)) {
    WebCore::CustomElementQueue::processQueue();
  }
  *uint64_t v4 = *(void *)(v2 + 64);
  WebCore::CustomElementQueue::~CustomElementQueue(v3, a2);
  _Unwind_Resume(a1);
}

void sub_1E1369660(_Unwind_Exception *a1, void *a2)
{
  WebCore::CustomElementQueue::~CustomElementQueue(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::CustomElementQueue::~CustomElementQueue(WTF **this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 3);
  if (v3)
  {
    uint64_t v4 = *this;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 28) == 2)
        {
          if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
          }
        }
        else
        {
          *(_DWORD *)(v6 + 28) -= 2;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  int v7 = *this;
  if (this + 2 != (WTF **)*this && v7 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v7, a2);
  }
}

void WebCore::JSMainThreadNullState::~JSMainThreadNullState(WebCore::JSMainThreadNullState *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (this = *(WebCore::JSMainThreadNullState **)(v4 + 96)) == 0) {
    this = (WebCore::JSMainThreadNullState *)WebCore::threadGlobalDataSlow(this);
  }
  *((void *)this + 8) = v3;
  if (*((_DWORD *)v2 + 5))
  {
    WebCore::CustomElementQueue::processQueue();
    uint64_t v7 = *((unsigned int *)v2 + 5);
    *MEMORY[0x1E4FB6500] = *((void *)v2 + 8);
    if (v7)
    {
      int v8 = (uint64_t *)*((void *)v2 + 1);
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *v8;
        uint64_t *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 28) == 2)
          {
            if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
          }
          else
          {
            *(_DWORD *)(v10 + 28) -= 2;
          }
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else
  {
    *MEMORY[0x1E4FB6500] = *((void *)v2 + 8);
  }
  uint64_t v5 = (WTF *)*((void *)v2 + 1);
  if ((WebCore::JSMainThreadNullState *)((char *)v2 + 24) != v5 && v5 != 0)
  {
    *((void *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
    WTF::fastFree(v5, a2);
  }
}

void sub_1E13697FC(_Unwind_Exception *a1, void *a2)
{
  WebCore::CustomElementQueue::~CustomElementQueue(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E1369810(_Unwind_Exception *a1, void *a2)
{
  if (*(_DWORD *)(v2 + 20)) {
    WebCore::CustomElementQueue::processQueue();
  }
  *MEMORY[0x1E4FB6500] = *(void *)(v2 + 64);
  WebCore::CustomElementQueue::~CustomElementQueue((WTF **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

atomic_uchar *volatile *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(atomic_uchar *volatile *result, void *a2)
{
  char v2 = 0;
  atomic_uchar *volatile v3 = *result;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x1E4E44220](v3);
    uint64_t v9 = *((void *)v3 + 1);
    int v5 = 1;
    uint64_t v6 = v9 - 1;
    *((void *)v3 + 1) = v9 - 1;
    if (v9 != 1)
    {
LABEL_3:
      uint64_t v7 = 0;
      BOOL v8 = 1;
      atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 == 1) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t result = (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6) {
        return result;
      }
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *((void *)v3 + 1);
    int v5 = 1;
    uint64_t v6 = v4 - 1;
    *((void *)v3 + 1) = v4 - 1;
    if (v4 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = *((void *)v3 + 2);
  uint64_t v7 = *((void *)v3 + 3);
  *((void *)v3 + 3) = 0;
  BOOL v8 = v10 != 0;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    goto LABEL_14;
  }
LABEL_4:
  if (v6) {
    return result;
  }
LABEL_5:
  if (v7) {
    uint64_t result = (atomic_uchar *volatile *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *volatile *)WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

WebCore::TextIndicator *WTF::RefCounted<WebCore::TextIndicator>::deref(WebCore::TextIndicator *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::TextIndicator::~TextIndicator(result);
    return (WebCore::TextIndicator *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    char v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)char v2 = &unk_1F3C797F0;
    *((void *)v2 + 1) = v1;
    atomic_uchar *volatile v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

void sub_1E1369A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

uint64_t LegacySocketProvider::createWebSocketChannel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x168);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)uint64_t v8 = &unk_1F3C79CD0;
  WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel((WebCore::ThreadableWebSocketChannel *)(v8 + 16));
  *(void *)uint64_t v8 = &unk_1F3C79980;
  *(void *)(v8 + 16) = &unk_1F3C79A88;
  *(void *)(v8 + 32) = &unk_1F3C79B48;
  *(void *)(v8 + 40) = 0;
  if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL) == 0
    && (uint64_t v9 = WTF::fastCompactMalloc((WTF *)0x28),
        *(_DWORD *)uint64_t v9 = 1,
        *(void *)(v9 + 8) = a2,
        WebCore::EventListenerMap::EventListenerMap((WebCore::EventListenerMap *)(v9 + 16)),
        uint64_t v11 = *(void *)(a2 + 16),
        *(void *)(a2 + 16) = v11 & 0xFFFF000000000000 | v9,
        uint64_t v12 = v11 & 0xFFFFFFFFFFFFLL,
        (v11 & 0xFFFFFFFFFFFFLL) != 0)
    && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v12);
    uint64_t v20 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFLL) + 0x1C);
    if (v20) {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (StringImpl *)(*(void *)(v12 + 16) + 32 * v20));
    }
    unsigned int v21 = *(WTF **)(v12 + 16);
    if (v21)
    {
      *(void *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      WTF::fastFree(v21, v10);
    }
    WTF::fastFree((WTF *)v12, v10);
    unint64_t v13 = (atomic_uint *)(*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
    if (!v13) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v13 = (atomic_uint *)(*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
    if (!v13) {
      goto LABEL_6;
    }
  }
  atomic_fetch_add(v13, 1u);
LABEL_6:
  *(void *)(v8 + 48) = v13;
  uint64_t v14 = *(void *)(a3 + 8);
  if (v14) {
    goto LABEL_10;
  }
  uint64_t v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)(v14 + 8) = a3;
  uint64_t v16 = *(unsigned int **)(a3 + 8);
  *(void *)(a3 + 8) = v14;
  if (!v16) {
    goto LABEL_10;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
    uint64_t v14 = *(void *)(a3 + 8);
    if (!v14) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(a3 + 8);
  if (v14) {
LABEL_10:
  }
    atomic_fetch_add((atomic_uint *volatile)v14, 1u);
LABEL_11:
  *(void *)(v8 + ++*(_DWORD *)(this + 56) = v14;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v8 + 96));
  *(void *)(v8 + 96) = &unk_1F3C79440;
  unint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v17 = &unk_1F3C79E70;
  v17[1] = WebCore::WebSocketChannel::resumeTimerFired;
  void v17[2] = 0;
  v17[3] = v8;
  *(void *)(v8 + 144) = v17;
  *(_DWORD *)(v8 + 152) = 0x1000000;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v8 + 160));
  *(void *)(v8 + 160) = &unk_1F3C79440;
  unint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v18 = &unk_1F3C79E70;
  v18[1] = WebCore::WebSocketChannel::closingTimerFired;
  v18[2] = 0;
  v18[3] = v8;
  *(void *)(v8 + 208) = v18;
  *(_WORD *)(v8 + 216) = 0;
  *(_DWORD *)(v8 + 220) = 0;
  uint64_t result = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(v8 + 224) = result;
  *(unsigned char *)(v8 + 232) = 0;
  *(void *)(v8 + 240) = 0;
  *(void *)(v8 + 248) = 0;
  *(_WORD *)(v8 + 2++*(_DWORD *)(this + 56) = 1006;
  *(void *)(v8 + 312) = 0;
  *(_DWORD *)(v8 + 320) = 0;
  *(unsigned char *)(v8 + 328) = 0;
  *(void *)(v8 + 336) = 0;
  *(void *)(v8 + 344) = 0;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 292) = 0u;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  *(void *)(v8 + 352) = a1;
  *a4 = v8 + 16;
  return result;
}

uint64_t LegacySocketProvider::initializeWebTransportSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = 0;
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v6);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t NetworkStorageSessionMap::storageSession(NetworkStorageSessionMap *this, SessionID a2)
{
  if (this == (NetworkStorageSessionMap *)1)
  {
    {
      uint64_t result = defaultNetworkStorageSession(void)::session;
      if (defaultNetworkStorageSession(void)::session) {
        return result;
      }
    }
    else
    {
      defaultNetworkStorageSession(void)::session = 0;
    }
    uint64_t v10 = (WebCore::NetworkStorageSession *)WTF::fastMalloc((WTF *)0x128);
    v11.unint64_t m_identifier = 1;
    uint64_t result = WebCore::NetworkStorageSession::NetworkStorageSession(v10, v11);
    {
      defaultNetworkStorageSession(void)::session = result;
      return result;
    }
    uint64_t v12 = defaultNetworkStorageSession(void)::session;
    defaultNetworkStorageSession(void)::session = result;
    if (v12)
    {
      MEMORY[0x1E4E470D0](v12);
      if (*(_DWORD *)(v12 + 8))
      {
        *(void *)(v12 + 288) = 0;
        *(_OWORD *)(v12 + 2++*(_DWORD *)(this + 56) = 0u;
        *(_OWORD *)(v12 + 272) = 0u;
        *(_OWORD *)(v12 + 224) = 0u;
        *(_OWORD *)(v12 + 240) = 0u;
        *(_OWORD *)(v12 + 192) = 0u;
        *(_OWORD *)(v12 + 208) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)uint64_t v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
          return defaultNetworkStorageSession(void)::session;
      }
      else
      {
        WTF::fastFree((WTF *)v12, v13);
          return defaultNetworkStorageSession(void)::session;
      }
      uint64_t result = 0;
      defaultNetworkStorageSession(void)::session = 0;
    }
  }
  {
    if (globalSessionMap(void)::map)
    {
      unsigned int v3 = *(_DWORD *)(globalSessionMap(void)::map - 8);
      unint64_t v4 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
      unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
      unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
      uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
      uint64_t v8 = *(NetworkStorageSessionMap **)(globalSessionMap(void)::map + 16 * v7);
      if (v8 == this) {
        return *(void *)(globalSessionMap(void)::map + 16 * v7 + 8);
      }
      int v9 = 1;
      while (v8)
      {
        uint64_t v7 = (v7 + v9) & v3;
        uint64_t v8 = *(NetworkStorageSessionMap **)(globalSessionMap(void)::map + 16 * v7);
        ++v9;
        if (v8 == this) {
          return *(void *)(globalSessionMap(void)::map + 16 * v7 + 8);
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t result = 0;
    globalSessionMap(void)::map = 0;
  }
  return result;
}

void NetworkStorageSessionMap::switchToNewTestingSession(NetworkStorageSessionMap *this)
{
  v27[2] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  pid_t v1 = getpid();
  unsigned int v2 = v1;
  if (v1 < 0)
  {
    unsigned int v6 = -v1;
    int v3 = 1;
    do
    {
      ++v3;
      BOOL v7 = v6 >= 0xA;
      v6 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    int v3 = 0;
    unsigned int v4 = v1;
    do
    {
      ++v3;
      BOOL v5 = v4 > 9;
      v4 /= 0xAu;
    }
    while (v5);
  }
  if (v3 < 0
    || (uint64_t v8 = (v3 + 12), __OFADD__(v3, 12))
    || (WTF::tryFastCompactMalloc((WTF *)(v8 + 20)), (int v9 = (char *)v27[0]) == 0))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)v27[0] = 2;
  *((_DWORD *)v9 + 1) = v8;
  *(void *)(v9 + 20) = *(void *)"WebKit Test-";
  *((void *)v9 + 1) = v9 + 20;
  *((_DWORD *)v9 + 4) = 4;
  *((_DWORD *)v9 + 7) = 762606437;
  uint64_t v10 = 0;
  if ((v2 & 0x80000000) != 0)
  {
    unsigned int v13 = -v2;
    do
    {
      *((unsigned char *)&v27[1] + v10-- + 4) = (v13 % 0xA) | 0x30;
      BOOL v5 = v13 > 9;
      v13 /= 0xAu;
    }
    while (v5);
    uint64_t v14 = v10 + 12;
    SessionID v11 = (char *)&v27[1] + v10 + 4;
    *SessionID v11 = 45;
    if (v10 + 14 <= 14)
    {
      if (v14 <= 12) {
        uint64_t v14 = 12;
      }
      size_t v12 = v14 - v10 - 11;
      goto LABEL_20;
    }
  }
  else
  {
    do
    {
      *((unsigned char *)&v27[1] + v10-- + 4) = (v2 % 0xA) | 0x30;
      BOOL v5 = v2 > 9;
      v2 /= 0xAu;
    }
    while (v5);
    if (v10 + 14 <= 13)
    {
      SessionID v11 = (char *)&v27[1] + v10 + 5;
      size_t v12 = -v10;
LABEL_20:
      memcpy(v9 + 32, v11, v12);
    }
  }
  uint64_t v25 = (WTF::StringImpl *)v9;
  WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)&v25);
  WebCore::createPrivateStorageSession();
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  unint64_t v17 = v25;
  uint64_t v25 = 0;
  if (!v17)
  {
LABEL_26:
    CFTypeRef cf = 0;
    if (!WebCore::NetworkStorageSession::processMayUseCookieAPI(v17)) {
      goto LABEL_31;
    }
LABEL_29:
    if (v27[0]) {
      CFTypeRef cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
    }
    goto LABEL_31;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_26;
  }
  unint64_t v18 = (WebCore::NetworkStorageSession *)WTF::StringImpl::destroy(v17, v15);
  CFTypeRef cf = 0;
  if (WebCore::NetworkStorageSession::processMayUseCookieAPI(v18)) {
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v19 = WTF::fastMalloc((WTF *)0x128);
  MEMORY[0x1E4E470C0](v19, 1, v27, &cf, 0);
  {
    uint64_t v20 = defaultNetworkStorageSession(void)::session;
    defaultNetworkStorageSession(void)::session = v19;
    if (v20)
    {
      uint64_t v21 = MEMORY[0x1E4E470D0]();
      if (*(_DWORD *)(v21 + 8))
      {
        *(void *)(v21 + 288) = 0;
        *(_OWORD *)(v21 + 2++*(_DWORD *)(this + 56) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)uint64_t v21 = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, v22);
      }
    }
  }
  else
  {
    defaultNetworkStorageSession(void)::session = v19;
  }
  CFTypeRef v23 = cf;
  CFTypeRef cf = 0;
  if (v23) {
    CFRelease(v23);
  }
  CFTypeRef v24 = v27[0];
  v27[0] = 0;
  if (v24) {
    CFRelease(v24);
  }
}

void NetworkStorageSessionMap::ensureSession(uint64_t this, SessionID a2, const WTF::String *a3)
{
  __n[1] = *MEMORY[0x1E4F143B8];
  {
    uint64_t v5 = globalSessionMap(void)::map;
    if (globalSessionMap(void)::map)
    {
LABEL_4:
      int v6 = *(_DWORD *)(v5 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    globalSessionMap(void)::map = 0;
  }
  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(&globalSessionMap(void)::map, 8u, 0);
  uint64_t v5 = globalSessionMap(void)::map;
  if (globalSessionMap(void)::map) {
    goto LABEL_4;
  }
  int v6 = 0;
LABEL_5:
  unint64_t v7 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  SessionID v11 = (uint64_t *)(v5 + 16 * v10);
  size_t v12 = (NetworkStorageSessionMap *)*v11;
  if (!*v11)
  {
LABEL_13:
    uint64_t v15 = v11[1];
    *SessionID v11 = this;
    v11[1] = 0;
    if (v15)
    {
      uint64_t v16 = MEMORY[0x1E4E470D0](v15, a2.m_identifier, a3);
      if (*(_DWORD *)(v16 + 8))
      {
        *(void *)(v16 + 288) = 0;
        *(_OWORD *)(v16 + 2++*(_DWORD *)(this + 56) = 0u;
        *(_OWORD *)(v16 + 272) = 0u;
        *(_OWORD *)(v16 + 224) = 0u;
        *(_OWORD *)(v16 + 240) = 0u;
        *(_OWORD *)(v16 + 192) = 0u;
        *(_OWORD *)(v16 + 208) = 0u;
        *(_OWORD *)(v16 + 160) = 0u;
        *(_OWORD *)(v16 + 176) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)uint64_t v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        uint64_t v18 = globalSessionMap(void)::map;
        if (globalSessionMap(void)::map)
        {
LABEL_17:
          ++*(_DWORD *)(v18 - 12);
          uint64_t v19 = globalSessionMap(void)::map;
          if (globalSessionMap(void)::map) {
            goto LABEL_18;
          }
          goto LABEL_25;
        }
LABEL_24:
        *(_DWORD *)(v18 - 12) = 1;
        uint64_t v19 = globalSessionMap(void)::map;
        if (globalSessionMap(void)::map)
        {
LABEL_18:
          uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          unint64_t v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400) {
            goto LABEL_19;
          }
          goto LABEL_26;
        }
LABEL_25:
        uint64_t v20 = *(unsigned int *)(v19 - 16);
        unint64_t v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400)
        {
LABEL_19:
          if (3 * v21 > 4 * v20) {
            goto LABEL_29;
          }
          if (!v21)
          {
            unsigned int v22 = 8;
LABEL_28:
            SessionID v11 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(&globalSessionMap(void)::map, v22, v11);
LABEL_29:
            uint64_t v23 = *(void *)a2.m_identifier;
            if (v23)
            {
              *(_DWORD *)v23 += 2;
              WTF::UUID::UUID((WTF::UUID *)&v180);
              int v24 = *(_DWORD *)(v23 + 4);
            }
            else
            {
              WTF::UUID::UUID((WTF::UUID *)&v180);
              int v24 = 0;
            }
            WTF::Internal::appendHex();
            LODWORD(__n[0]) = v25;
            WTF::Internal::appendHex();
            LODWORD(v179) = v26;
            WTF::Internal::appendHex();
            LODWORD(v177) = v27;
            WTF::Internal::appendHex();
            v176[0] = v28;
            WTF::Internal::appendHex();
            if (v29 < 0) {
              goto LABEL_220;
            }
            int v30 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_220;
            }
            if ((v176[0] & 0x80000000) != 0) {
              goto LABEL_220;
            }
            int v31 = v176[0] + v30;
            if (__OFADD__(v176[0], v30)) {
              goto LABEL_220;
            }
            BOOL v32 = __OFADD__(v31, 1);
            int v33 = v31 + 1;
            BOOL v34 = v32;
            if ((v177 & 0x80000000) != 0) {
              goto LABEL_220;
            }
            if (v34) {
              goto LABEL_220;
            }
            BOOL v32 = __OFADD__(v177, v33);
            int v35 = v177 + v33;
            if (v32) {
              goto LABEL_220;
            }
            BOOL v32 = __OFADD__(v35, 1);
            int v36 = v35 + 1;
            BOOL v37 = v32;
            if ((v179 & 0x80000000) != 0) {
              goto LABEL_220;
            }
            if (v37) {
              goto LABEL_220;
            }
            BOOL v32 = __OFADD__(v179, v36);
            int v38 = v179 + v36;
            if (v32) {
              goto LABEL_220;
            }
            BOOL v32 = __OFADD__(v38, 1);
            int v39 = v38 + 1;
            BOOL v40 = v32;
            if ((__n[0] & 0x80000000) != 0) {
              goto LABEL_220;
            }
            if (v40) {
              goto LABEL_220;
            }
            int v41 = LODWORD(__n[0]) + v39;
            if (__OFADD__(__n[0], v39) || v41 < 0) {
              goto LABEL_220;
            }
            BOOL v32 = __OFADD__(v41, 17);
            int v42 = v41 + 17;
            BOOL v43 = v32;
            if (v24 < 0) {
              goto LABEL_220;
            }
            if (v43) {
              goto LABEL_220;
            }
            uint64_t v44 = (v24 + v42);
            if (__OFADD__(v24, v42)) {
              goto LABEL_220;
            }
            if (v23 && (*(unsigned char *)(v23 + 16) & 4) == 0)
            {
              if (v44 <= 0x7FFFFFEF)
              {
                WTF::tryFastCompactMalloc((WTF *)(2 * (v24 + v42) + 20));
                uint64_t v45 = v180;
                if (v180)
                {
                  uint64_t v46 = (char *)v180 + 20;
                  *(_DWORD *)CFTypeRef v180 = 2;
                  v45[1] = v44;
                  *((void *)v45 + 1) = v45 + 5;
                  v45[4] = 0;
                  unint64_t v47 = *(void *)(v23 + 8);
                  uint64_t v48 = *(unsigned int *)(v23 + 4);
                  if ((*(unsigned char *)(v23 + 16) & 4) != 0)
                  {
                    uint64_t v57 = (uint64_t)&v46[2 * v48];
                    if (v48 < 0x40)
                    {
                      unint64_t v58 = (unint64_t)(v45 + 5);
                    }
                    else
                    {
                      unint64_t v58 = (unint64_t)&v46[2 * (v48 & 0xFFFFFFC0)];
                      long long v59 = 0uLL;
                      uint64_t v60 = (char *)(v45 + 5);
                      do
                      {
                        v182.val[0] = *(int8x16_t *)v47;
                        int8x16_t v61 = *(int8x16_t *)(v47 + 16);
                        v183.val[0] = *(int8x16_t *)(v47 + 32);
                        long long v62 = *(_OWORD *)(v47 + 48);
                        v47 += 64;
                        long long v63 = v62;
                        v183.val[1] = 0uLL;
                        v184.val[0] = v61;
                        v182.val[1] = 0uLL;
                        uint64_t v64 = v60;
                        vst2q_s8(v64, v182);
                        v64 += 32;
                        v184.val[1] = 0uLL;
                        vst2q_s8(v64, v184);
                        uint64_t v65 = v60 + 64;
                        vst2q_s8(v65, v183);
                        uint64_t v66 = v60 + 96;
                        vst2q_s8(v66, *(int8x16x2_t *)(&v59 - 1));
                        v60 += 128;
                      }
                      while (v60 != (char *)v58);
                    }
                    if (v58 == v57) {
                      goto LABEL_138;
                    }
                    unint64_t v74 = (unint64_t)v45 + 2 * v48 - v58 + 18;
                    if (v74 < 0xE
                      || (v58 < v47 + (v74 >> 1) + 1 ? (BOOL v75 = v47 >= (v74 & 0xFFFFFFFFFFFFFFFELL) + v58 + 2) : (BOOL v75 = 1),
                          !v75))
                    {
                      uint64_t v78 = (_WORD *)v58;
                      unint64_t v79 = (unsigned __int8 *)v47;
                      goto LABEL_108;
                    }
                    uint64_t v76 = (v74 >> 1) + 1;
                    if (v74 >= 0x3E)
                    {
                      unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFE0;
                      v150 = (uint8x8_t *)(v47 + 16);
                      v151 = (uint16x8_t *)(v58 + 32);
                      unint64_t v152 = v76 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        uint8x16_t v153 = *(uint8x16_t *)v150[-2].i8;
                        uint16x8_t v154 = vmovl_u8(*v150);
                        uint16x8_t v155 = vmovl_high_u8(*(uint8x16_t *)v150->i8);
                        v151[-2] = vmovl_u8(*(uint8x8_t *)v153.i8);
                        v151[-1] = vmovl_high_u8(v153);
                        uint16x8_t *v151 = v154;
                        v151[1] = v155;
                        v151 += 4;
                        v150 += 4;
                        v152 -= 32;
                      }
                      while (v152);
                      if (v76 == v77) {
                        goto LABEL_138;
                      }
                      if ((v76 & 0x18) == 0) {
                        goto LABEL_215;
                      }
                    }
                    else
                    {
                      unint64_t v77 = 0;
                    }
                    uint64_t v78 = (_WORD *)(v58 + 2 * (v76 & 0xFFFFFFFFFFFFFFF8));
                    unint64_t v79 = (unsigned __int8 *)(v47 + (v76 & 0xFFFFFFFFFFFFFFF8));
                    v156 = (uint8x8_t *)(v47 + v77);
                    v157 = (uint16x8_t *)(v58 + 2 * v77);
                    unint64_t v158 = v77 - (v76 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint8x8_t v159 = *v156++;
                      *v157++ = vmovl_u8(v159);
                      v158 += 8;
                    }
                    while (v158);
                    if (v76 != (v76 & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_108;
                    }
                  }
                  else if (v48)
                  {
                    if (v48 == 1) {
                      *(_WORD *)uint64_t v46 = *(_WORD *)v47;
                    }
                    else {
                      memcpy(v45 + 5, (const void *)v47, 2 * v48);
                    }
                  }
LABEL_138:
                  while (1)
                  {
                    uint64_t v173 = *(unsigned int *)(v23 + 4);
                    v46 += 2 * v173;
                    *(_OWORD *)uint64_t v46 = xmmword_1E149DCA0;
                    *((_OWORD *)v46 + 1) = xmmword_1E149DCB0;
                    *((_WORD *)v46 + 16) = 46;
                    WTF::Internal::appendHex();
                    LODWORD(__n[0]) = v99;
                    WTF::Internal::appendHex();
                    LODWORD(v179) = v100;
                    WTF::Internal::appendHex();
                    LODWORD(v177) = v101;
                    WTF::Internal::appendHex();
                    v176[0] = v102;
                    WTF::Internal::appendHex();
                    int v175 = v47;
                    uint64_t v57 = LODWORD(__n[0]);
                    if (LODWORD(__n[0]) < 0x11)
                    {
                      int8x16_t v103 = v46 + 34;
                      int8x16_t v104 = &v46[2 * LODWORD(__n[0]) + 34];
                      if (LODWORD(__n[0]))
                      {
                        uint32x4_t v105 = (unsigned __int8 *)__n - LODWORD(__n[0]);
                        uint64_t v106 = 2 * LODWORD(__n[0]);
                        do
                        {
                          unsigned int v107 = *v105++;
                          unint64_t v77 = v107;
                          *v103++ = v107;
                          v106 -= 2;
                        }
                        while (v106);
                      }
                      *(_WORD *)int8x16_t v104 = 45;
                      int8x16_t v108 = v104 + 2;
                      unint64_t v58 = v179;
                      if (v179 < 0x11)
                      {
                        int8x16_t v109 = &v108[v179];
                        if (v179)
                        {
                          int8x16_t v110 = (unsigned __int8 *)&v179 - v179;
                          unint64_t v77 = 2 * v179;
                          do
                          {
                            __int16 v111 = *v110++;
                            *v108++ = v111;
                            v77 -= 2;
                          }
                          while (v77);
                        }
                        *int8x16_t v109 = 45;
                        unsigned int v112 = v109 + 1;
                        uint64_t v113 = v177;
                        if (v177 < 0x11)
                        {
                          v114 = &v112[v177];
                          if (v177)
                          {
                            v115 = (unsigned __int8 *)&cf[-1] - v177;
                            uint64_t v116 = 2 * v177;
                            do
                            {
                              __int16 v117 = *v115++;
                              *v112++ = v117;
                              v116 -= 2;
                            }
                            while (v116);
                          }
                          _WORD *v114 = 45;
                          v118 = v114 + 1;
                          unint64_t v77 = v176[0];
                          if (v176[0] < 0x11u)
                          {
                            v119 = &v118[v176[0]];
                            if (v176[0])
                            {
                              v120 = (unsigned __int8 *)v176 - v176[0];
                              uint64_t v121 = 2 * v176[0];
                              do
                              {
                                __int16 v122 = *v120++;
                                *v118++ = v122;
                                v121 -= 2;
                              }
                              while (v121);
                            }
                            _WORD *v119 = 45;
                            v123 = v119 + 1;
                            if (v47 < 0x11) {
                              break;
                            }
                          }
                        }
                      }
                    }
LABEL_214:
                    __break(1u);
LABEL_215:
                    unint64_t v79 = (unsigned __int8 *)(v47 + v77);
                    uint64_t v78 = (_WORD *)(v58 + 2 * v77);
                    do
                    {
LABEL_108:
                      __int16 v80 = *v79++;
                      *v78++ = v80;
                    }
                    while (v78 != (_WORD *)v57);
                  }
                  if (v47)
                  {
                    v124 = (unsigned __int8 *)((char *)v176 - v47 + 12);
                    unint64_t v125 = (v47 - 1) & 0x7FFFFFFFFFFFFFFFLL;
                    if (v125 < 7)
                    {
                      v126 = v123;
                      goto LABEL_187;
                    }
                    if (v123 < (_WORD *)&v174[((v47 + 0x7FFFFFFFFFFFFFFFLL) & 0x7FFFFFFFFFFFFFFFLL)
                                             - v47
                                             + 17])
                    {
                      v126 = v123;
                      if (v124 < (unsigned __int8 *)v45
                                + 2 * v47
                                + 2 * v77
                                + 2 * v113
                                + 2 * v58
                                + 2 * v57
                                + 2 * v173
                                + 62)
                        goto LABEL_187;
                    }
                    unint64_t v127 = v125 + 1;
                    if (v125 >= 0x1F)
                    {
                      unint64_t v128 = v127 & 0xFFFFFFFFFFFFFFE0;
                      v129 = (uint8x8_t *)&v174[-v47 + 32];
                      v130 = (uint16x8_t *)((char *)v45 + 2 * v77 + 2 * v113 + 2 * v58 + 2 * v57 + 2 * v173 + 94);
                      unint64_t v131 = v127 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        uint8x16_t v132 = *(uint8x16_t *)v129[-2].i8;
                        uint16x8_t v133 = vmovl_u8(*v129);
                        uint16x8_t v134 = vmovl_high_u8(*(uint8x16_t *)v129->i8);
                        v130[-2] = vmovl_u8(*(uint8x8_t *)v132.i8);
                        v130[-1] = vmovl_high_u8(v132);
                        uint16x8_t *v130 = v133;
                        v130[1] = v134;
                        v130 += 4;
                        v129 += 4;
                        v131 -= 32;
                      }
                      while (v131);
                      if (v127 == v128) {
                        goto LABEL_188;
                      }
                      if ((v127 & 0x18) == 0)
                      {
                        v124 += v128;
                        v126 = &v123[v128];
                        do
                        {
LABEL_187:
                          __int16 v160 = *v124++;
                          *v126++ = v160;
                        }
                        while (v126 != &v123[v47]);
                        goto LABEL_188;
                      }
                    }
                    else
                    {
                      unint64_t v128 = 0;
                    }
                    v126 = &v123[v127 & 0xFFFFFFFFFFFFFFF8];
                    v124 += v127 & 0xFFFFFFFFFFFFFFF8;
                    v135 = (uint8x8_t *)&v174[v128 - v47 + 16];
                    v136 = (uint16x8_t *)((char *)v45 + 2 * v128
                                                      + 2 * v77
                                                      + 2 * v113
                                                      + 2 * v58
                                                      + 2 * v57
                                                      + 2 * v173
                                                      + 62);
                    unint64_t v137 = v128 - (v127 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint8x8_t v138 = *v135++;
                      *v136++ = vmovl_u8(v138);
                      v137 += 8;
                    }
                    while (v137);
                    if (v127 != (v127 & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_187;
                    }
                  }
LABEL_188:
                  cf[0] = v45;
                  WTF::String::createCFString((uint64_t *)&v180, (WTF::String *)cf);
                  v162 = (WTF::StringImpl *)cf[0];
                  cf[0] = 0;
                  if (v162)
                  {
                    if (*(_DWORD *)v162 == 2)
                    {
                      WTF::StringImpl::destroy(v162, v161);
                      if (!v23) {
                        goto LABEL_196;
                      }
LABEL_194:
                      if (*(_DWORD *)v23 == 2)
                      {
                        WTF::StringImpl::destroy((WTF::StringImpl *)v23, v161);
                        if (this <= -2)
                        {
LABEL_197:
                          PrivateStorageSession = (WebCore::NetworkStorageSession *)WebCore::createPrivateStorageSession();
                          CFTypeRef v164 = cf[0];
                          *(void *)&v176[1] = 0;
                          if (!WebCore::NetworkStorageSession::processMayUseCookieAPI(PrivateStorageSession)) {
                            goto LABEL_203;
                          }
                          goto LABEL_201;
                        }
LABEL_200:
                        CFStorageSessionForIdentifier = (WebCore::NetworkStorageSession *)WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier();
                        CFTypeRef v164 = cf[0];
                        *(void *)&v176[1] = 0;
                        if (!WebCore::NetworkStorageSession::processMayUseCookieAPI(CFStorageSessionForIdentifier)) {
                          goto LABEL_203;
                        }
LABEL_201:
                        if (v164) {
                          *(void *)&v176[1] = _CFURLStorageSessionCopyCookieStorage();
                        }
LABEL_203:
                        uint64_t v166 = WTF::fastMalloc((WTF *)0x128);
                        MEMORY[0x1E4E470C0](v166, this, cf, &v176[1], 0);
                        uint64_t v167 = v11[1];
                        v11[1] = v166;
                        if (v167)
                        {
                          uint64_t v168 = MEMORY[0x1E4E470D0]();
                          if (*(_DWORD *)(v168 + 8))
                          {
                            *(void *)(v168 + 288) = 0;
                            *(_OWORD *)(v168 + 2++*(_DWORD *)(this + 56) = 0u;
                            *(_OWORD *)(v168 + 272) = 0u;
                            *(_OWORD *)(v168 + 224) = 0u;
                            *(_OWORD *)(v168 + 240) = 0u;
                            *(_OWORD *)(v168 + 192) = 0u;
                            *(_OWORD *)(v168 + 208) = 0u;
                            *(_OWORD *)(v168 + 160) = 0u;
                            *(_OWORD *)(v168 + 176) = 0u;
                            *(_OWORD *)(v168 + 128) = 0u;
                            *(_OWORD *)(v168 + 144) = 0u;
                            *(_OWORD *)(v168 + 96) = 0u;
                            *(_OWORD *)(v168 + 112) = 0u;
                            *(_OWORD *)(v168 + 64) = 0u;
                            *(_OWORD *)(v168 + 80) = 0u;
                            *(_OWORD *)(v168 + 32) = 0u;
                            *(_OWORD *)(v168 + 48) = 0u;
                            *(_OWORD *)uint64_t v168 = 0u;
                            *(_OWORD *)(v168 + 16) = 0u;
                            v170 = *(const void **)&v176[1];
                            *(void *)&v176[1] = 0;
                            if (!v170) {
                              goto LABEL_208;
                            }
                            goto LABEL_207;
                          }
                          WTF::fastFree((WTF *)v168, v169);
                        }
                        v170 = *(const void **)&v176[1];
                        *(void *)&v176[1] = 0;
                        if (!v170)
                        {
LABEL_208:
                          CFTypeRef v171 = cf[0];
                          cf[0] = 0;
                          if (v171) {
                            CFRelease(v171);
                          }
                          CFTypeRef v172 = v180;
                          CFTypeRef v180 = 0;
                          if (v172) {
                            CFRelease(v172);
                          }
                          return;
                        }
LABEL_207:
                        CFRelease(v170);
                        goto LABEL_208;
                      }
                      *(_DWORD *)v23 -= 2;
LABEL_196:
                      if (this <= -2) {
                        goto LABEL_197;
                      }
                      goto LABEL_200;
                    }
                    *(_DWORD *)v162 -= 2;
                  }
                  if (!v23) {
                    goto LABEL_196;
                  }
                  goto LABEL_194;
                }
              }
LABEL_220:
              __break(0xC471u);
              return;
            }
            if ((v44 & 0x80000000) != 0) {
              goto LABEL_220;
            }
            WTF::tryFastCompactMalloc((WTF *)(v44 + 20));
            uint64_t v45 = v180;
            if (!v180) {
              goto LABEL_220;
            }
            uint64_t v49 = (char *)v180 + 20;
            *(_DWORD *)CFTypeRef v180 = 2;
            v45[1] = v44;
            *((void *)v45 + 1) = v45 + 5;
            v45[4] = 4;
            if (!v23)
            {
              uint64_t v56 = 0;
              goto LABEL_112;
            }
            uint64_t v50 = *(int8x16_t **)(v23 + 8);
            size_t v51 = *(unsigned int *)(v23 + 4);
            if ((*(unsigned char *)(v23 + 16) & 4) != 0)
            {
              if (v51)
              {
                if (v51 == 1) {
                  *uint64_t v49 = v50->i8[0];
                }
                else {
                  memcpy(v45 + 5, v50, v51);
                }
              }
              goto LABEL_111;
            }
            uint64_t v52 = &v49[v51];
            if (v51 < 0x10)
            {
              unint64_t v53 = (unint64_t)(v45 + 5);
              if (v49 == v52)
              {
LABEL_111:
                uint64_t v56 = *(unsigned int *)(v23 + 4);
LABEL_112:
                uint64_t v46 = &v49[v56];
                *(_OWORD *)uint64_t v46 = *(_OWORD *)".PrivateBrowsing.";
                v46[16] = 46;
                WTF::Internal::appendHex();
                LODWORD(__n[0]) = v81;
                WTF::Internal::appendHex();
                LODWORD(v179) = v82;
                WTF::Internal::appendHex();
                LODWORD(v177) = v83;
                WTF::Internal::appendHex();
                v176[0] = v84;
                WTF::Internal::appendHex();
                unsigned int v85 = v47;
                int v175 = v47;
                uint64_t v86 = LODWORD(__n[0]);
                if (LODWORD(__n[0]) >= 0x11) {
                  goto LABEL_214;
                }
                unint64_t v87 = v46 + 17;
                if (LODWORD(__n[0]))
                {
                  unint64_t v47 = (unint64_t)__n - LODWORD(__n[0]);
                  if (LODWORD(__n[0]) == 1) {
                    *unint64_t v87 = *(unsigned char *)v47;
                  }
                  else {
                    memcpy(v46 + 17, (const void *)v47, LODWORD(__n[0]));
                  }
                }
                unint64_t v88 = &v87[v86];
                uint64_t v57 = 45;
                *unint64_t v88 = 45;
                unint64_t v89 = v88 + 1;
                uint64_t v90 = v179;
                if (v179 >= 0x11) {
                  goto LABEL_214;
                }
                if (v179)
                {
                  unint64_t v47 = (unint64_t)&v179 - v179;
                  if (v179 == 1) {
                    unsigned char *v89 = *(unsigned char *)v47;
                  }
                  else {
                    memcpy(v89, (const void *)v47, v179);
                  }
                }
                uint64_t v91 = &v89[v90];
                uint64_t v57 = 45;
                *uint64_t v91 = 45;
                int v92 = v91 + 1;
                uint64_t v93 = v177;
                if (v177 >= 0x11) {
                  goto LABEL_214;
                }
                if (v177)
                {
                  unint64_t v47 = (unint64_t)&cf[-1] - v177;
                  if (v177 == 1) {
                    *int v92 = *(unsigned char *)v47;
                  }
                  else {
                    memcpy(v92, (const void *)v47, v177);
                  }
                }
                int8x16_t v94 = &v92[v93];
                uint64_t v57 = 45;
                *int8x16_t v94 = 45;
                long long v95 = v94 + 1;
                uint64_t v96 = v176[0];
                if (v176[0] >= 0x11u) {
                  goto LABEL_214;
                }
                if (v176[0])
                {
                  unint64_t v47 = (unint64_t)v176 - v176[0];
                  if (v176[0] == 1) {
                    *long long v95 = *(unsigned char *)v47;
                  }
                  else {
                    memcpy(v95, (const void *)v47, v176[0]);
                  }
                }
                uint64_t v57 = 45;
                v95[v96] = 45;
                uint64_t v97 = &v95[v96 + 1];
                if (v85 >= 0x11) {
                  goto LABEL_214;
                }
                if (v85)
                {
                  uint32x4_t v98 = (char *)v176 - v85 + 12;
                  if (v85 == 1) {
                    *uint64_t v97 = *v98;
                  }
                  else {
                    memcpy(v97, v98, v85);
                  }
                }
                goto LABEL_188;
              }
            }
            else
            {
              unint64_t v53 = (unint64_t)&v49[v51 & 0xFFFFFFF0];
              uint64_t v54 = (unsigned long long *)(v45 + 5);
              do
              {
                unsigned long long v55 = (unsigned __int128)vld2q_s8(v50->i8);
                v50 += 2;
                *v54++ = v55;
              }
              while (v54 != (unsigned long long *)v53);
              if ((unsigned char *)v53 == v52) {
                goto LABEL_111;
              }
            }
            uint64_t v67 = (char *)v45 + v51;
            unint64_t v68 = (unint64_t)v45 + v51 - v53 + 20;
            if (v68 < 8
              || (v53 < (unint64_t)&v50[2].u64[1] + 2 * (void)v67 + -2 * v53
                ? (BOOL v69 = v50 >= (int8x16_t *)(v67 + 20))
                : (BOOL v69 = 1),
                  !v69))
            {
              uint64_t v71 = (unsigned char *)v53;
              uint64_t v72 = v50;
              goto LABEL_95;
            }
            if (v68 >= 0x20)
            {
              unint64_t v70 = v68 & 0xFFFFFFFFFFFFFFE0;
              v139 = v50 + 2;
              v140 = (int8x16_t *)(v53 + 16);
              unint64_t v141 = v68 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v143 = v139[-2];
                int8x16_t v142 = v139[-1];
                int8x16_t v145 = *v139;
                int8x16_t v144 = v139[1];
                v139 += 4;
                v140[-1] = vuzp1q_s8(v143, v142);
                int8x16_t *v140 = vuzp1q_s8(v145, v144);
                v140 += 2;
                v141 -= 32;
              }
              while (v141);
              if (v68 == v70) {
                goto LABEL_111;
              }
              if ((v68 & 0x18) == 0)
              {
                uint64_t v72 = (int8x16_t *)((char *)v50 + 2 * v70);
                uint64_t v71 = (unsigned char *)(v53 + v70);
                do
                {
LABEL_95:
                  char v73 = v72->i8[0];
                  uint64_t v72 = (int8x16_t *)((char *)v72 + 2);
                  *v71++ = v73;
                }
                while (v71 != v52);
                goto LABEL_111;
              }
            }
            else
            {
              unint64_t v70 = 0;
            }
            uint64_t v71 = (unsigned char *)(v53 + (v68 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v72 = (int8x16_t *)((char *)v50 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
            v146 = (int16x8_t *)((char *)v50 + 2 * v70);
            v147 = (int8x8_t *)(v53 + v70);
            unint64_t v148 = v70 - (v68 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v149 = *v146++;
              *v147++ = vmovn_s16(v149);
              v148 += 8;
            }
            while (v148);
            if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_111;
            }
            goto LABEL_95;
          }
LABEL_27:
          unsigned int v22 = v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
          goto LABEL_28;
        }
LABEL_26:
        if (v21 > 2 * v20) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      WTF::fastFree((WTF *)v16, v17);
    }
    uint64_t v18 = globalSessionMap(void)::map;
    if (globalSessionMap(void)::map) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  unsigned int v13 = 0;
  int v14 = 1;
  while (v12 != (NetworkStorageSessionMap *)this)
  {
    if (v12 == (NetworkStorageSessionMap *)-1) {
      unsigned int v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    SessionID v11 = (uint64_t *)(v5 + 16 * v10);
    size_t v12 = (NetworkStorageSessionMap *)*v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        uint64_t *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v5 - 16);
        SessionID v11 = v13;
      }
      goto LABEL_13;
    }
  }
}

uint64_t WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  unint64_t v5 = *a2 + ~(*a2 << 32);
  unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  uint64_t v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
  uint64_t v9 = *(void *)(v2 + 16 * v8);
  if (v9 != *a2)
  {
    int v10 = 1;
    while (v9)
    {
      uint64_t v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(v2 + 16 * v8);
      ++v10;
      if (v9 == *a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (v8 == *(_DWORD *)(v2 - 4)) {
    return 0;
  }
  size_t v12 = (void *)(v2 + 16 * v8);
  uint64_t v13 = v12[1];
  void *v12 = -1;
  v12[1] = 0;
  if (!v13)
  {
LABEL_12:
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v16 = *a1;
    if (*a1) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  uint64_t v14 = MEMORY[0x1E4E470D0]();
  if (!*(_DWORD *)(v14 + 8))
  {
    WTF::fastFree((WTF *)v14, v15);
    goto LABEL_12;
  }
  *(void *)(v14 + 288) = 0;
  *(_OWORD *)(v14 + 2++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 240) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v16 = *a1;
  if (*a1)
  {
LABEL_13:
    --*(_DWORD *)(v16 - 12);
    uint64_t v17 = *a1;
    if (!*a1) {
      return 1;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(v16 - 12) = -1;
  uint64_t v17 = *a1;
  if (!*a1) {
    return 1;
  }
LABEL_17:
  unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
  unsigned int v19 = *(_DWORD *)(v17 - 4);
  if (v18 >= v19 || v19 < 9) {
    return 1;
  }
  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v19 >> 1, 0);
  return 1;
}

uint64_t WebCore::SocketStreamHandleImpl::platformSend(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a3;
  unint64_t v6 = (const UInt8 *)a2;
  uint64_t v9 = (void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 168);
  if (v8)
  {
    if (v8 + a3 < 0x6400001)
    {
      int v10 = (void *)(a1 + 168);
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 64) != 1)
  {
    unint64_t v15 = 0;
    if (a3 >= 0x6400001) {
      goto LABEL_10;
    }
LABEL_15:
    if (v5 <= v15) {
      goto LABEL_18;
    }
    a2 = (char *)&v6[v15];
    int v10 = v9;
LABEL_17:
    WTF::StreamBuffer<unsigned char,1048576ul>::append(v10, a2, a3);
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), a1, *(void *)(a1 + 168));
LABEL_18:
    uint64_t v16 = *(uint64_t (**)(void))(**(void **)a4 + 16);
    return v16();
  }
  SessionID v11 = *(__CFWriteStream **)(a1 + 128);
  if (v11 && CFWriteStreamCanAcceptBytes(v11))
  {
    CFIndex v12 = CFWriteStreamWrite(*(CFWriteStreamRef *)(a1 + 128), v6, v5);
    if (v12 == -1) {
      goto LABEL_10;
    }
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFF00;
    uint64_t v14 = v12;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v13 = 0;
  }
  unint64_t v15 = v13 | v14;
  a3 = v5 - v15;
  if (v5 - v15 + *v9 < 0x6400001) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v16 = *(uint64_t (**)(void))(**(void **)a4 + 16);
  return v16();
}

void *WTF::StreamBuffer<unsigned char,1048576ul>::append(void *result, char *__src, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = a3;
    unint64_t v5 = result;
    *result += a3;
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v6 = v5[3];
      unint64_t v8 = v6;
      if (v7 > v6) {
        unint64_t v8 = v6 + *((unsigned int *)v5 + 10);
      }
      if (v8 != v7)
      {
        if (v7 == v6)
        {
          __break(0xC471u);
          JUMPOUT(0x1E136B7E0);
        }
        if (v6)
        {
          uint64_t v9 = v5[4];
          if (*(_DWORD *)(*(void *)(v9 + 8 * v6 - 8) + 12) != 0x100000) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v9 = v5[4];
          if (*(_DWORD *)(*(void *)(v9 + 8 * *((unsigned int *)v5 + 10) - 8) + 12) != 0x100000) {
            goto LABEL_33;
          }
        }
      }
      uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
      int v10 = result;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v12 = v5[2];
      uint64_t v11 = v5[3];
      if (v12)
      {
        if (v11 + 1 != v12) {
          goto LABEL_29;
        }
        unint64_t v13 = *((unsigned int *)v5 + 10);
      }
      else
      {
        unint64_t v13 = *((unsigned int *)v5 + 10);
        if (v11)
        {
          if (v11 != v13 - 1) {
            goto LABEL_29;
          }
        }
        else if (*((_DWORD *)v5 + 10))
        {
          goto LABEL_29;
        }
      }
      unint64_t v14 = v13 + (v13 >> 2);
      if (v14 <= 0xF) {
        unint64_t v14 = 15;
      }
      if (v14 >= 0x1FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x1E136B7F0);
      }
      unint64_t v15 = (WTF *)v5[4];
      int v16 = v14 + 1;
      uint64_t v17 = (char *)WTF::fastMalloc((WTF *)(8 * (v14 + 1)));
      *((_DWORD *)v5 + 10) = v16;
      v5[4] = v17;
      unint64_t v19 = v5[2];
      unint64_t v18 = v5[3];
      if (v19 <= v18)
      {
        uint64_t result = memcpy(&v17[8 * v19], (char *)v15 + 8 * v19, 8 * v18 - 8 * v19);
        if (v15)
        {
LABEL_26:
          if ((WTF *)v5[4] == v15)
          {
            v5[4] = 0;
            *((_DWORD *)v5 + 10) = 0;
          }
          uint64_t result = (void *)WTF::fastFree(v15, v22);
        }
      }
      else
      {
        memcpy(v17, v15, 8 * v18);
        uint64_t v20 = v5[2];
        uint64_t v21 = v20 - v13 + *((unsigned int *)v5 + 10);
        uint64_t result = memcpy((void *)(v5[4] + 8 * v21), (char *)v15 + 8 * v20, 8 * v13 - 8 * v20);
        v5[2] = v21;
        if (v15) {
          goto LABEL_26;
        }
      }
LABEL_29:
      uint64_t v23 = v5[3];
      uint64_t v9 = v5[4];
      unint64_t v7 = v5[2];
      *(void *)(v9 + 8 * v23) = v10;
      if (v23 == *((unsigned int *)v5 + 10) - 1) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = v23 + 1;
      }
      v5[3] = v6;
LABEL_33:
      if (v7 == v6) {
        goto LABEL_59;
      }
      if (!v6) {
        unint64_t v6 = *((unsigned int *)v5 + 10);
      }
      uint64_t v24 = *(void *)(v9 + 8 * v6 - 8);
      if (v3 >= 0x100000 - (unint64_t)*(unsigned int *)(v24 + 12)) {
        size_t v25 = 0x100000 - *(unsigned int *)(v24 + 12);
      }
      else {
        size_t v25 = v3;
      }
      if (v25)
      {
        size_t v26 = *(unsigned int *)(v24 + 8);
        size_t v27 = *(unsigned int *)(v24 + 12);
        unint64_t v28 = v25 + v27;
        if (v25 + v27 > v26)
        {
          unint64_t v29 = v26 + (v26 >> 2);
          if (v29 >= 0x10) {
            unint64_t v30 = v29 + 1;
          }
          else {
            unint64_t v30 = 16;
          }
          if (v30 <= v28) {
            unint64_t v31 = v25 + v27;
          }
          else {
            unint64_t v31 = v30;
          }
          if (HIDWORD(v31))
          {
LABEL_59:
            __break(0xC471u);
            JUMPOUT(0x1E136B7C0);
          }
          BOOL v32 = *(void **)v24;
          int v33 = (void *)WTF::fastMalloc((WTF *)v31);
          *(_DWORD *)(v24 + 8) = v31;
          *(void *)uint64_t v24 = v33;
          memcpy(v33, v32, v27);
          if (v32)
          {
            if (*(void **)v24 == v32)
            {
              *(void *)uint64_t v24 = 0;
              *(_DWORD *)(v24 + 8) = 0;
            }
            WTF::fastFree((WTF *)v32, v34);
          }
        }
        unint64_t v35 = *(unsigned int *)(v24 + 12);
        if (v28 < v35)
        {
          __break(0xC471u);
          JUMPOUT(0x1E136B7E8);
        }
        uint64_t result = memcpy((void *)(*(void *)v24 + v35), __src, v25);
        *(_DWORD *)(v24 + 12) = v28;
      }
      __src += v25;
      v3 -= v25;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SocketStreamHandleImpl::bufferedAmount(WebCore::SocketStreamHandleImpl *this)
{
  return *((void *)this + 21);
}

unint64_t WebCore::SocketStreamHandleImpl::platformSendHandshake(uint64_t a1, StringImpl *__src, unint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v7 = (char *)__src;
  if (!*(unsigned char *)(a4 + 136))
  {
    LODWORD(v25) = 0;
    unint64_t v29 = 0;
    int v30 = 0;
    goto LABEL_56;
  }
  uint64_t v9 = *(uint64_t (****)(void))(a1 + 160);
  if (v9)
  {
    uint64_t v11 = (**v9)(v9);
    if (!*(unsigned char *)(a4 + 136)) {
      goto LABEL_124;
    }
    if (v11)
    {
      WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue();
      uint64_t v12 = v64;
      if (!v64 || !*((_DWORD *)v64 + 1))
      {
        unint64_t v31 = 0;
        LODWORD(v25) = 0;
        int v30 = v65;
        if (!v64) {
          goto LABEL_52;
        }
        goto LABEL_50;
      }
      unint64_t v13 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(void *)unint64_t v13 = 0x203A65696B6F6F43;
      WTF::String::utf8();
      unint64_t v15 = v63;
      if (!v63)
      {
        size_t v24 = 8;
        unint64_t v25 = 12;
        unint64_t v26 = 8;
        goto LABEL_30;
      }
      size_t v16 = *((void *)v63 + 1);
      if (v16)
      {
        unint64_t v17 = v16 + 8;
        if (v16 + 8 < 9)
        {
          __break(0xC471u);
          JUMPOUT(0x1E136BF10);
        }
        __srca = v7;
        if (v17 <= 0x10) {
          unint64_t v18 = 16;
        }
        else {
          unint64_t v18 = v16 + 8;
        }
        if (HIDWORD(v18))
        {
          __break(0xC471u);
          JUMPOUT(0x1E136BF18);
        }
        unint64_t v19 = (WTF *)WTF::fastMalloc((WTF *)v18);
        *(void *)unint64_t v19 = *(void *)v13;
        if (v19 == v13) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v19;
        }
        if (v19 == v13) {
          unsigned int v22 = 0;
        }
        else {
          unsigned int v22 = v18;
        }
        WTF::fastFree(v13, v20);
        memcpy((char *)v21 + 8, (char *)v63 + 16, v16);
        unint64_t v15 = v63;
        unint64_t v13 = v21;
        unint64_t v7 = __srca;
        int v23 = *(_DWORD *)v63 - 1;
        if (*(_DWORD *)v63 != 1)
        {
LABEL_21:
          *(_DWORD *)unint64_t v15 = v23;
          size_t v24 = v17;
          unint64_t v25 = v17 + 4;
          unint64_t v26 = v22;
          if (v25 <= v22)
          {
LABEL_46:
            *(_DWORD *)((char *)v13 + v24) = 168626701;
            if (v25)
            {
              unint64_t v31 = (void *)WTF::fastMalloc((WTF *)v25);
              memcpy(v31, v13, v25);
            }
            else
            {
              unint64_t v31 = 0;
            }
            int v30 = v65;
            WTF::fastFree(v13, v14);
            uint64_t v12 = v64;
LABEL_50:
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::destroy(v12, __src);
              if (v25)
              {
LABEL_53:
                unint64_t v29 = (void *)WTF::fastMalloc((WTF *)v25);
                memcpy(v29, v31, v25);
                if (a3 > 1)
                {
                  a3 -= 2;
                  if (!v31) {
                    goto LABEL_56;
                  }
                  goto LABEL_55;
                }
LABEL_124:
                __break(1u);
                goto LABEL_130;
              }
LABEL_82:
              unint64_t v29 = 0;
              if (!v31)
              {
LABEL_56:
                uint64_t v37 = *(void *)(a1 + 168);
                if (v37)
                {
                  if (a3 + v25 + v37 >= 0x6400001) {
                    goto LABEL_80;
                  }
                  WTF::StreamBuffer<unsigned char,1048576ul>::append((void *)(a1 + 168), v7, a3);
                  WTF::StreamBuffer<unsigned char,1048576ul>::append((void *)(a1 + 168), (char *)v29, v25);
                  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), a1, *(void *)(a1 + 168));
LABEL_117:
                  unint64_t v47 = *(uint64_t (**)(void))(*(void *)*a5 + 16);
                  goto LABEL_118;
                }
                size_t __n = v25;
                unint64_t v38 = a3 + v25;
                int v62 = v30;
                if (*(_DWORD *)(a1 + 64) != 1)
                {
                  unint64_t v46 = 0;
                  if (v38 >= 0x6400001)
                  {
LABEL_80:
                    unint64_t v47 = *(uint64_t (**)(void))(*(void *)*a5 + 16);
LABEL_118:
                    unint64_t result = v47();
LABEL_119:
                    if (v29) {
                      return WTF::fastFree((WTF *)v29, __src);
                    }
                    return result;
                  }
                  goto LABEL_113;
                }
                unint64_t v58 = a5;
                __srcb = v7;
                if (v38)
                {
                  if (HIDWORD(v38)) {
                    goto LABEL_130;
                  }
                  int v39 = (WTF *)WTF::fastMalloc((WTF *)(a3 + v25));
                  LODWORD(v40) = a3 + v25;
                  if (a3)
                  {
LABEL_63:
                    if (a3 > v40)
                    {
                      unint64_t v41 = v40 + ((unint64_t)v40 >> 2);
                      if (v41 >= 0x10) {
                        unint64_t v42 = v41 + 1;
                      }
                      else {
                        unint64_t v42 = 16;
                      }
                      if (v42 <= a3) {
                        unint64_t v40 = a3;
                      }
                      else {
                        unint64_t v40 = v42;
                      }
                      if (HIDWORD(v40))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1E136BF20);
                      }
                      uint64_t v43 = WTF::fastMalloc((WTF *)v40);
                      if (v39)
                      {
                        if ((WTF *)v43 == v39) {
                          uint64_t v45 = 0;
                        }
                        else {
                          uint64_t v45 = (WTF *)v43;
                        }
                        if ((WTF *)v43 == v39) {
                          LODWORD(v40) = 0;
                        }
                        WTF::fastFree(v39, v44);
                        int v39 = v45;
                      }
                      else
                      {
                        int v39 = (WTF *)v43;
                      }
                    }
                    memcpy(v39, __srcb, a3);
                    LODWORD(v48) = a3;
                    if (v25) {
                      goto LABEL_90;
                    }
                    goto LABEL_86;
                  }
                }
                else
                {
                  int v39 = 0;
                  LODWORD(v40) = 0;
                  if (a3) {
                    goto LABEL_63;
                  }
                }
                LODWORD(v48) = 0;
                if (v25)
                {
LABEL_90:
                  size_t v49 = v48;
                  unint64_t v48 = v48 + (unint64_t)v25;
                  if (v48 <= v40) {
                    goto LABEL_104;
                  }
                  unint64_t v50 = v40 + ((unint64_t)v40 >> 2);
                  if (v50 >= 0x10) {
                    unint64_t v51 = v50 + 1;
                  }
                  else {
                    unint64_t v51 = 16;
                  }
                  if (v51 <= v48) {
                    unint64_t v52 = v48;
                  }
                  else {
                    unint64_t v52 = v51;
                  }
                  if (!HIDWORD(v52))
                  {
                    unint64_t v53 = (WTF *)WTF::fastMalloc((WTF *)v52);
                    memcpy(v53, v39, v49);
                    if (v39)
                    {
                      if (v53 == v39) {
                        unsigned long long v55 = 0;
                      }
                      else {
                        unsigned long long v55 = v53;
                      }
                      WTF::fastFree(v39, v54);
                      int v39 = v55;
                    }
                    else
                    {
                      int v39 = v53;
                    }
LABEL_104:
                    a5 = v58;
                    memcpy((char *)v39 + v49, v29, __n);
                    unint64_t result = *(void *)(a1 + 128);
                    if (!result) {
                      goto LABEL_109;
                    }
LABEL_105:
                    unint64_t result = CFWriteStreamCanAcceptBytes((CFWriteStreamRef)result);
                    if (result)
                    {
                      unint64_t result = CFWriteStreamWrite(*(CFWriteStreamRef *)(a1 + 128), (const UInt8 *)v39, v48);
                      if (result == -1)
                      {
                        unint64_t result = (*(uint64_t (**)(void, void, BOOL))(*(void *)*a5 + 16))(*a5, 0, v62 != 0);
                        int v56 = 0;
                        unint64_t v46 = 0;
                        if (!v39)
                        {
LABEL_111:
                          if (!v56) {
                            goto LABEL_119;
                          }
                          unint64_t v7 = __srcb;
                          if (*(void *)(a1 + 168) + v38 - v46 >= 0x6400001) {
                            goto LABEL_80;
                          }
LABEL_113:
                          if (v46 < v38)
                          {
                            unint64_t v57 = v46 - a3;
                            if (v46 < a3)
                            {
                              WTF::StreamBuffer<unsigned char,1048576ul>::append((void *)(a1 + 168), &v7[v46], a3 - v46);
                              unint64_t v57 = 0;
                            }
                            WTF::StreamBuffer<unsigned char,1048576ul>::append((void *)(a1 + 168), (char *)v29 + v57, __n - v57);
                            (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), a1, *(void *)(a1 + 168));
                          }
                          goto LABEL_117;
                        }
                      }
                      else
                      {
                        unint64_t v46 = result;
                        int v56 = 1;
                        if (!v39) {
                          goto LABEL_111;
                        }
                      }
LABEL_110:
                      unint64_t result = WTF::fastFree(v39, __src);
                      goto LABEL_111;
                    }
LABEL_109:
                    unint64_t v46 = 0;
                    int v56 = 1;
                    if (!v39) {
                      goto LABEL_111;
                    }
                    goto LABEL_110;
                  }
LABEL_130:
                  __break(0xC471u);
                  JUMPOUT(0x1E136BF00);
                }
LABEL_86:
                a5 = v58;
                unint64_t result = *(void *)(a1 + 128);
                if (!result) {
                  goto LABEL_109;
                }
                goto LABEL_105;
              }
LABEL_55:
              WTF::fastFree((WTF *)v31, __src);
              goto LABEL_56;
            }
            *(_DWORD *)v12 -= 2;
LABEL_52:
            if (v25) {
              goto LABEL_53;
            }
            goto LABEL_82;
          }
LABEL_30:
          unint64_t v32 = v26 + (v26 >> 2);
          if (v32 >= 0x10) {
            unint64_t v33 = v32 + 1;
          }
          else {
            unint64_t v33 = 16;
          }
          if (v33 <= v25) {
            unint64_t v34 = v25;
          }
          else {
            unint64_t v34 = v33;
          }
          if (HIDWORD(v34))
          {
            __break(0xC471u);
            JUMPOUT(0x1E136BF08);
          }
          unint64_t v35 = (WTF *)WTF::fastMalloc((WTF *)v34);
          memcpy(v35, v13, v24);
          if (v13)
          {
            if (v35 == v13) {
              int v36 = 0;
            }
            else {
              int v36 = v35;
            }
            WTF::fastFree(v13, v14);
            unint64_t v13 = v36;
          }
          else
          {
            unint64_t v13 = v35;
          }
          goto LABEL_46;
        }
      }
      else
      {
        LODWORD(v17) = 8;
        unsigned int v22 = 8;
        int v23 = *(_DWORD *)v63 - 1;
        if (*(_DWORD *)v63 != 1) {
          goto LABEL_21;
        }
      }
      WTF::fastFree(v15, v14);
      size_t v24 = v17;
      unint64_t v25 = v17 + 4;
      unint64_t v26 = v22;
      if (v25 <= v22) {
        goto LABEL_46;
      }
      goto LABEL_30;
    }
  }
  size_t v27 = *(uint64_t (**)(void))(*(void *)*a5 + 16);
  return v27();
}

void WebCore::SocketStreamHandleImpl::createStreams(WebCore::SocketStreamHandleImpl *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 21)) {
    goto LABEL_2;
  }
  CFDictionaryRef v13 = CFNetworkCopySystemProxySettings();
  if (!v13)
  {
    *((_DWORD *)this + 21) = 1;
    goto LABEL_2;
  }
  CFDictionaryRef v14 = v13;
  CFArrayRef v15 = CFNetworkCopyProxiesForURL(*((CFURLRef *)this + 17), v13);
  WebCore::SocketStreamHandleImpl::chooseProxyFromArray((CFRunLoopSourceRef *)this, v15);
  if (v15) {
    CFRelease(v15);
  }
  CFRelease(v14);
  if (*((_DWORD *)this + 21))
  {
LABEL_2:
    keys = (void *)WTF::URL::host((WebCore::SocketStreamHandleImpl *)((char *)this + 16));
    uint64_t v32 = v2;
    WTF::StringView::createCFString((uint64_t *)&cf, (WTF::StringView *)&keys);
    CFWriteStreamRef writeStream = 0;
    CFReadStreamRef readStream = 0;
    CFStringRef v3 = (const __CFString *)cf;
    uint64_t v4 = WTF::URL::port((WebCore::SocketStreamHandleImpl *)((char *)this + 16));
    if ((v4 & 0xFF0000) == 0)
    {
      if (WTF::URL::protocolIs()) {
        LOWORD(v4) = 443;
      }
      else {
        LOWORD(v4) = 80;
      }
    }
    CFStreamCreatePairWithSocketToHost(0, v3, (unsigned __int16)v4, &readStream, &writeStream);
    unint64_t v5 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    CFWriteStreamSetProperty(writeStream, (CFStreamPropertyKey)*MEMORY[0x1E4F18F20], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    unint64_t v6 = (const void *)*((void *)this + 19);
    if (v6)
    {
      CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F19118];
      CFReadStreamSetProperty(readStream, (CFStreamPropertyKey)*MEMORY[0x1E4F19118], v6);
      CFWriteStreamSetProperty(writeStream, v7, *((CFTypeRef *)this + 19));
    }
    unint64_t v8 = (const void *)*((void *)this + 15);
    *((void *)this + 15) = readStream;
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = (const void *)*((void *)this + 16);
    *((void *)this + 16) = writeStream;
    if (v9) {
      CFRelease(v9);
    }
    int v10 = *((_DWORD *)this + 21);
    if (v10 == 3)
    {
      size_t v16 = (__CFReadStream *)*((void *)this + 15);
      uint64_t v17 = *MEMORY[0x1E4F19090];
      keys = (void *)*MEMORY[0x1E4F19088];
      uint64_t v32 = v17;
      *(_OWORD *)values = *(_OWORD *)((char *)this + 88);
      CFDictionaryRef v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFReadStreamSetProperty(v16, (CFStreamPropertyKey)*MEMORY[0x1E4F19080], v12);
      if (!v12)
      {
LABEL_23:
        unint64_t v18 = (WebCore::DeprecatedGlobalSettings *)WTF::URL::protocolIs();
        if (v18)
        {
          unint64_t v19 = (uint64_t *)MEMORY[0x1E4F1CFC8];
          if ((WebCore::DeprecatedGlobalSettings::allowsAnySSLCertificate(v18) & 1) == 0 && !*((unsigned char *)this + 113)) {
            unint64_t v19 = v5;
          }
          uint64_t v20 = *v19;
          uint64_t v21 = *MEMORY[0x1E4F19130];
          keys = (void *)*MEMORY[0x1E4F19138];
          uint64_t v32 = v21;
          uint64_t v33 = *MEMORY[0x1E4F19140];
          unsigned int v22 = (void *)*MEMORY[0x1E4F19150];
          values[0] = (void *)cf;
          values[1] = v22;
          uint64_t v30 = v20;
          CFDictionaryRef v23 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFStringRef v24 = (const __CFString *)*MEMORY[0x1E4F19110];
          CFReadStreamSetProperty(*((CFReadStreamRef *)this + 15), (CFStreamPropertyKey)*MEMORY[0x1E4F19110], v23);
          CFWriteStreamSetProperty(*((CFWriteStreamRef *)this + 16), v24, v23);
          if (v23) {
            CFRelease(v23);
          }
        }
        CFTypeRef v25 = cf;
        CFTypeRef cf = 0;
        if (v25) {
          CFRelease(v25);
        }
        return;
      }
    }
    else
    {
      if (v10 != 2) {
        goto LABEL_23;
      }
      uint64_t v11 = *MEMORY[0x1E4F1D468];
      keys = (void *)*MEMORY[0x1E4F1D460];
      uint64_t v32 = v11;
      *(_OWORD *)values = *(_OWORD *)((char *)this + 88);
      CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFReadStreamSetProperty(*((CFReadStreamRef *)this + 15), (CFStreamPropertyKey)*MEMORY[0x1E4F1D458], v12);
      if (!v12) {
        goto LABEL_23;
      }
    }
    CFRelease(v12);
    goto LABEL_23;
  }
}

void WebCore::SocketStreamHandleImpl::scheduleStreams(CFRunLoopSourceRef *this)
{
  clientContext.version = 0;
  clientContext.info = this;
  clientContext.retain = (void *(__cdecl *)(void *))WebCore::SocketStreamHandleImpl::retainSocketStreamHandle;
  clientContext.release = (void (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::releaseSocketStreamHandle;
  clientContext.copyDescription = (CFStringRef (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::copyCFStreamDescription;
  CFReadStreamSetClient(this[15], 0xFFFFFFFFFFFFFFFFLL, (CFReadStreamClientCallBack)WebCore::SocketStreamHandleImpl::readStreamCallback, &clientContext);
  CFWriteStreamSetClient(this[16], 0xFFFFFFFFFFFFFFFFLL, (CFWriteStreamClientCallBack)WebCore::SocketStreamHandleImpl::writeStreamCallback, &clientContext);
  uint64_t v2 = this[15];
  CFStringRef v3 = (__CFRunLoop *)WebThreadRunLoop();
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D410];
  CFReadStreamScheduleWithRunLoop(v2, v3, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  unint64_t v5 = this[16];
  unint64_t v6 = (__CFRunLoop *)WebThreadRunLoop();
  CFWriteStreamScheduleWithRunLoop(v5, v6, v4);
  CFReadStreamOpen(this[15]);
  CFWriteStreamOpen(this[16]);
  CFStringRef v7 = this[9];
  if (v7)
  {
    CFRunLoopSourceInvalidate(v7);
    unint64_t v8 = (__CFRunLoop *)WebThreadRunLoop();
    CFRunLoopRemoveSource(v8, this[9], v4);
    CFRunLoopSourceRef v9 = this[9];
    this[9] = 0;
    if (v9) {
      CFRelease(v9);
    }
  }
  *((_DWORD *)this + 20) = 3;
  int v10 = *(NSObject **)(MEMORY[0x1E4FB6498] + 32);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1E1345000, v10, OS_LOG_TYPE_DEFAULT, "SocketStreamHandleImpl::scheduleStreams - m_connectionSubState is WaitingForConnect", v11, 2u);
  }
}

uint64_t WebCore::SocketStreamHandleImpl::retainSocketStreamHandle(uint64_t this, void *a2)
{
  return this;
}

uint64_t WebCore::SocketStreamHandleImpl::releaseSocketStreamHandle(uint64_t this, void *a2)
{
  uint64_t v2 = (unsigned int *)(this + 8);
  if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    CFStringRef v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    *CFStringRef v3 = &unk_1F3C79D48;
    v3[1] = v2;
    uint64_t v4 = (uint64_t)v3;
    WTF::ensureOnMainThread();
    this = v4;
    if (v4) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return this;
}

unint64_t WebCore::SocketStreamHandleImpl::copyCFStreamDescription(unint64_t this, void *a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 4);
    *(_DWORD *)v2 += 2;
    if (v3 < 0) {
      goto LABEL_17;
    }
    unsigned int v4 = v3 + 22;
    if (__OFADD__(v3, 22)) {
      goto LABEL_17;
    }
    int v5 = (*(unsigned __int8 *)(v2 + 16) >> 2) & 1;
  }
  else
  {
    int v5 = 1;
    unsigned int v4 = 22;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((unint64_t)&v9, v4, v5, (int8x16_t *)"WebKit socket stream, ", 0x16u, v2);
  if (!v9)
  {
LABEL_17:
    __break(0xC471u);
    return this;
  }
  WTF::String::createCFString(&v10, (WTF::String *)&v9);
  CFStringRef v7 = v9;
  uint64_t v8 = v10;
  CFRunLoopSourceRef v9 = 0;
  uint64_t v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v6);
      if (!v2) {
        return v8;
      }
      goto LABEL_12;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (!v2) {
    return v8;
  }
LABEL_12:
  if (*(_DWORD *)v2 != 2)
  {
    *(_DWORD *)v2 -= 2;
    return v8;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v2, v6);
  return v8;
}

void WebCore::SocketStreamHandleImpl::readStreamCallback(WebCore::SocketStreamHandleImpl *this, __CFReadStream *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  if (*(void *)(a3 + 120))
  {
    unsigned int v4 = (unsigned int *)(a3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v5 = &unk_1F3C79D98;
    v5[1] = &v9;
    v5[2] = &v10;
    uint64_t v11 = v5;
    WTF::callOnMainThreadAndWait();
    unint64_t v6 = v11;
    uint64_t v11 = 0;
    if (v6) {
      (*(void (**)(void *))(*v6 + 8))(v6);
    }
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      CFStringRef v7 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v7 = &unk_1F3C79D48;
      v7[1] = v4;
      uint64_t v11 = v7;
      WTF::ensureOnMainThread();
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
  }
}

void WebCore::SocketStreamHandleImpl::writeStreamCallback(WebCore::SocketStreamHandleImpl *this, __CFWriteStream *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  if (*(void *)(a3 + 128))
  {
    unsigned int v4 = (unsigned int *)(a3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v5 = &unk_1F3C79DC0;
    v5[1] = &v9;
    v5[2] = &v10;
    uint64_t v11 = v5;
    WTF::callOnMainThreadAndWait();
    unint64_t v6 = v11;
    uint64_t v11 = 0;
    if (v6) {
      (*(void (**)(void *))(*v6 + 8))(v6);
    }
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      CFStringRef v7 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v7 = &unk_1F3C79D48;
      v7[1] = v4;
      uint64_t v11 = v7;
      WTF::ensureOnMainThread();
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
  }
}

__CFString *WebCore::SocketStreamHandleImpl::copyPACExecutionDescription(WebCore::SocketStreamHandleImpl *this, void *a2)
{
  return @"WebSocket proxy PAC file execution";
}

uint64_t WebCore::SocketStreamHandleImpl::pacExecutionCallback(atomic_uint *this, void *a2, const __CFArray *a3, __CFError *a4)
{
  uint64_t v9 = this;
  uint64_t v10 = a2;
  if (this) {
    atomic_fetch_add(this + 2, 1u);
  }
  int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v5 = &unk_1F3C79D70;
  v5[1] = &v9;
  v5[2] = &v10;
  uint64_t v11 = (uint64_t)v5;
  WTF::callOnMainThreadAndWait();
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (this)
  {
    CFStringRef v7 = (unsigned int *)(this + 2);
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v8 = &unk_1F3C79D48;
      v8[1] = v7;
      uint64_t v11 = (uint64_t)v8;
      WTF::ensureOnMainThread();
      uint64_t result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void WebCore::SocketStreamHandleImpl::chooseProxyFromArray(CFRunLoopSourceRef *this, CFArrayRef theArray)
{
  if (!theArray) {
    goto LABEL_38;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count) {
    goto LABEL_38;
  }
  uint64_t v5 = Count;
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex)
  {
    CFDictionaryRef v7 = ValueAtIndex;
    CFTypeID v8 = CFGetTypeID(ValueAtIndex);
    if (v8 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F19000]);
      if (Value)
      {
        uint64_t v10 = Value;
        CFTypeID v11 = CFGetTypeID(Value);
        if (v11 == CFStringGetTypeID())
        {
          if (CFEqual(v10, (CFTypeRef)*MEMORY[0x1E4F18FF0]))
          {
            CFURLRef v12 = (const __CFURL *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F18FD8]);
            if (v12)
            {
              CFURLRef v13 = v12;
              CFTypeID v14 = CFGetTypeID(v12);
              if (v14 == CFURLGetTypeID())
              {
                clientContext.version = 0;
                clientContext.info = this;
                clientContext.retain = (void *(__cdecl *)(void *))WebCore::SocketStreamHandleImpl::retainSocketStreamHandle;
                clientContext.release = (void (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::releaseSocketStreamHandle;
                clientContext.copyDescription = (CFStringRef (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::copyPACExecutionDescription;
                CFRunLoopSourceRef v15 = CFNetworkExecuteProxyAutoConfigurationURL(v13, this[17], (CFProxyAutoConfigurationResultCallback)WebCore::SocketStreamHandleImpl::pacExecutionCallback, &clientContext);
                CFRunLoopSourceRef v16 = this[9];
                this[9] = v15;
                if (v16) {
                  CFRelease(v16);
                }
                uint64_t v17 = (__CFRunLoop *)WebThreadRunLoop();
                CFRunLoopAddSource(v17, this[9], (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
                *((_DWORD *)this + 20) = 1;
                return;
              }
            }
          }
        }
      }
    }
  }
  if (v5 < 1) {
    goto LABEL_38;
  }
  uint64_t v37 = this;
  CFIndex v18 = 0;
  CFDictionaryRef v19 = 0;
  uint64_t v20 = (const void *)*MEMORY[0x1E4F19000];
  uint64_t v21 = (const void *)*MEMORY[0x1E4F19008];
  unsigned int v22 = (const void *)*MEMORY[0x1E4F18FF8];
  do
  {
    CFDictionaryRef v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v18);
    if (v23)
    {
      CFDictionaryRef v24 = v23;
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 == CFDictionaryGetTypeID())
      {
        unint64_t v26 = CFDictionaryGetValue(v24, v20);
        if (v26)
        {
          size_t v27 = v26;
          CFTypeID v28 = CFGetTypeID(v26);
          if (v28 == CFStringGetTypeID())
          {
            if (CFEqual(v27, v21))
            {
              this = v37;
              *((_DWORD *)v37 + 21) = 2;
              CFDictionaryRef v19 = v24;
              goto LABEL_24;
            }
            if (CFEqual(v27, v22))
            {
              *((_DWORD *)v37 + 21) = 3;
              CFDictionaryRef v19 = v24;
            }
          }
        }
      }
    }
    ++v18;
  }
  while (v5 != v18);
  this = v37;
  if (!v19) {
    goto LABEL_38;
  }
LABEL_24:
  unint64_t v29 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F18FE0]);
  uint64_t v30 = v29;
  if (v29)
  {
    CFTypeID v31 = CFGetTypeID(v29);
    if (v31 != CFStringGetTypeID()) {
      uint64_t v30 = 0;
    }
  }
  uint64_t v32 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F18FE8]);
  if (!v32) {
    goto LABEL_38;
  }
  uint64_t v33 = v32;
  CFTypeID v34 = CFGetTypeID(v32);
  if (v34 != CFNumberGetTypeID()) {
    uint64_t v33 = 0;
  }
  if (!v30 || !v33)
  {
LABEL_38:
    *((_DWORD *)this + 21) = 1;
    return;
  }
  CFRetain(v30);
  CFRunLoopSourceRef v35 = this[11];
  this[11] = (CFRunLoopSourceRef)v30;
  if (v35) {
    CFRelease(v35);
  }
  CFRetain(v33);
  CFRunLoopSourceRef v36 = this[12];
  this[12] = (CFRunLoopSourceRef)v33;
  if (v36)
  {
    CFRelease(v36);
  }
}

WTF::StringImpl **WTF::String::operator=(WTF::StringImpl **a1, StringImpl *a2)
{
  int v3 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *(_DWORD *)v3 += 2;
  }
  unsigned int v4 = *a1;
  *a1 = v3;
  if (!v4) {
    return a1;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

void WebCore::SocketStreamHandleImpl::platformClose(WebCore::SocketStreamHandleImpl *this)
{
  uint64_t v2 = (__CFRunLoopSource *)*((void *)this + 9);
  int v3 = (CFRunLoopMode *)MEMORY[0x1E4F1D410];
  if (v2)
  {
    CFRunLoopSourceInvalidate(v2);
    unsigned int v4 = (__CFRunLoop *)WebThreadRunLoop();
    CFRunLoopRemoveSource(v4, *((CFRunLoopSourceRef *)this + 9), *v3);
    uint64_t v5 = (const void *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  unint64_t v6 = (__CFReadStream *)*((void *)this + 15);
  if (v6)
  {
    CFDictionaryRef v7 = (__CFRunLoop *)WebThreadRunLoop();
    CFStringRef v8 = *v3;
    CFReadStreamUnscheduleFromRunLoop(v6, v7, v8);
    uint64_t v9 = (__CFWriteStream *)*((void *)this + 16);
    uint64_t v10 = (__CFRunLoop *)WebThreadRunLoop();
    CFWriteStreamUnscheduleFromRunLoop(v9, v10, v8);
    CFReadStreamClose(*((CFReadStreamRef *)this + 15));
    CFWriteStreamClose(*((CFWriteStreamRef *)this + 16));
    CFTypeID v11 = (const void *)*((void *)this + 15);
    *((void *)this + 15) = 0;
    if (v11) {
      CFRelease(v11);
    }
    CFURLRef v12 = (const void *)*((void *)this + 16);
    *((void *)this + 16) = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  else if (*((_DWORD *)this + 20) >= 2u)
  {
    return;
  }
  CFURLRef v13 = *(void (**)(void))(**((void **)this + 7) + 24);
  v13();
}

WTF::StringImpl *WebCore::SocketStreamHandleImpl::reportErrorToClient(WebCore::SocketStreamHandleImpl *this, CFErrorRef err)
{
  int Code = CFErrorGetCode(err);
  CFStringRef v5 = CFErrorCopyDescription(err);
  MEMORY[0x1E4E442D0](&v12, v5);
  unint64_t v6 = v12;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v7 = *((void *)this + 7);
  LODWORD(v12) = Code;
  CFStringRef v8 = (WTF::StringImpl *)*((void *)this + 2);
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  CFURLRef v13 = v8;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  CFTypeID v14 = v6;
  char v15 = 0;
  (*(void (**)(uint64_t, WebCore::SocketStreamHandleImpl *, WTF::StringImpl **))(*(void *)v7 + 56))(v7, this, &v12);
  uint64_t v10 = v14;
  CFTypeID v14 = 0;
  if (!v10)
  {
LABEL_10:
    uint64_t result = v13;
    CFURLRef v13 = 0;
    if (!result) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v10, v9);
  uint64_t result = v13;
  CFURLRef v13 = 0;
  if (!result) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    if (!v6) {
      return result;
    }
    goto LABEL_18;
  }
  *(_DWORD *)result -= 2;
LABEL_15:
  if (!v6) {
    return result;
  }
LABEL_18:
  if (*(_DWORD *)v6 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v9);
  }
  *(_DWORD *)v6 -= 2;
  return result;
}

void WebCore::SocketStreamHandleImpl::~SocketStreamHandleImpl(WebCore::SocketStreamHandleImpl *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79858;
  unint64_t v3 = *((void *)this + 23);
  unint64_t v4 = *((void *)this + 24);
  CFStringRef v5 = (WTF *)*((void *)this + 25);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_19;
    }
    uint64_t v9 = 8 * v3;
    uint64_t v10 = (WTF **)((char *)v5 + v9);
    uint64_t v11 = 8 * v4 - v9;
    do
    {
      CFURLRef v12 = *v10;
      *uint64_t v10 = 0;
      if (v12)
      {
        CFURLRef v13 = *(WTF **)v12;
        if (*(void *)v12)
        {
          *(void *)CFURLRef v12 = 0;
          *((_DWORD *)v12 + 2) = 0;
          WTF::fastFree(v13, a2);
        }
        WTF::fastFree(v12, a2);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(WTF **)v5;
        *(void *)CFStringRef v5 = 0;
        if (v7)
        {
          CFStringRef v8 = *(WTF **)v7;
          if (*(void *)v7)
          {
            *(void *)uint64_t v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v7, a2);
        }
        CFStringRef v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      CFStringRef v5 = (WTF *)*((void *)this + 25);
      unint64_t v3 = *((void *)this + 23);
    }
    uint64_t v14 = *((unsigned int *)this + 52);
    if (v3 != v14)
    {
      uint64_t v26 = 8 * v3;
      size_t v27 = (WTF **)((char *)v5 + v26);
      uint64_t v28 = 8 * v14 - v26;
      do
      {
        unint64_t v29 = *v27;
        const void *v27 = 0;
        if (v29)
        {
          uint64_t v30 = *(WTF **)v29;
          if (*(void *)v29)
          {
            *(void *)unint64_t v29 = 0;
            *((_DWORD *)v29 + 2) = 0;
            WTF::fastFree(v30, a2);
          }
          WTF::fastFree(v29, a2);
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  CFStringRef v5 = (WTF *)*((void *)this + 25);
LABEL_19:
  if (v5)
  {
    *((void *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v5, a2);
  }
  char v15 = (atomic_uint *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (!v15 || atomic_fetch_add(v15 + 2, 0xFFFFFFFF) != 1)
  {
    CFRunLoopSourceRef v16 = (const void *)*((void *)this + 19);
    *((void *)this + 19) = 0;
    if (!v16) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  atomic_store(1u, (unsigned int *)v15 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
  CFRunLoopSourceRef v16 = (const void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v16) {
LABEL_24:
  }
    CFRelease(v16);
LABEL_25:
  uint64_t v17 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (!v17) {
    goto LABEL_28;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
LABEL_28:
    CFIndex v18 = (const void *)*((void *)this + 17);
    *((void *)this + 17) = 0;
    if (!v18) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  WTF::StringImpl::destroy(v17, a2);
  CFIndex v18 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v18) {
LABEL_29:
  }
    CFRelease(v18);
LABEL_30:
  CFDictionaryRef v19 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v21) {
    CFRelease(v21);
  }
  unsigned int v22 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v22) {
    CFRelease(v22);
  }
  CFDictionaryRef v23 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v23) {
    CFRelease(v23);
  }
  CFDictionaryRef v24 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v24) {
    CFRelease(v24);
  }
  *(void *)this = &unk_1F3C79818;
  CFTypeID v25 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, a2);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebCore::SocketStreamHandleImpl::~SocketStreamHandleImpl(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebBroadcastChannelRegistry::getOrCreate@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  {
    WebBroadcastChannelRegistry::getOrCreate(BOOL)::defaultSessionRegistry = 0;
      goto LABEL_3;
LABEL_22:
    WebBroadcastChannelRegistry::getOrCreate(BOOL)::privateSessionRegistry = 0;
    goto LABEL_3;
  }
    goto LABEL_22;
LABEL_3:
  if (this) {
    unint64_t v3 = &WebBroadcastChannelRegistry::getOrCreate(BOOL)::privateSessionRegistry;
  }
  else {
    unint64_t v3 = &WebBroadcastChannelRegistry::getOrCreate(BOOL)::defaultSessionRegistry;
  }
  if (*v3)
  {
    uint64_t v4 = *(void *)(*v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      *a2 = v4;
      return this;
    }
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v5 + 8) = 1;
  *(void *)uint64_t v5 = &unk_1F3C79BC0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *a2 = v5;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  *(void *)(this + 8) = v5;
  uint64_t v7 = *(unsigned int **)(v5 + 16);
  *(void *)(v5 + 16) = this;
  if (!v7) {
    goto LABEL_12;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
    this = *(void *)(v5 + 16);
    if (!this) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  this = *(void *)(v5 + 16);
  if (this) {
LABEL_12:
  }
    atomic_fetch_add((atomic_uint *volatile)this, 1u);
LABEL_13:
  CFStringRef v8 = (unsigned int *)*v3;
  *unint64_t v3 = this;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    return WTF::fastFree((WTF *)v8, v6);
  }
  return this;
}

char *WebBroadcastChannelRegistry::registerChannel(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v63 = a4;
  uint64_t v6 = (uint64_t *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7
    || (WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (uint64_t v7 = *v6) != 0))
  {
    unsigned int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    unsigned int v8 = 0;
  }
  int v64 = -1640531527;
  unsigned __int16 v65 = 0;
  char v66 = 0;
  WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(&v64, *a2, a2[1]);
  int v11 = v64;
  if (v66)
  {
    unsigned int v12 = (v64 + v65) ^ ((v64 + v65) << 11);
    int v11 = v12 + (v12 >> 17);
  }
  CFURLRef v13 = 0;
  unsigned int v14 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
  unsigned int v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  int v16 = v15 ^ (v15 << 10);
  if (!v16) {
    int v16 = 0x800000;
  }
  for (int i = 1; ; ++i)
  {
    unsigned int v18 = v16 & v8;
    CFDictionaryRef v19 = (StringImpl **)(v7 + 24 * (v16 & v8));
    uint64_t v20 = (WebCore::SecurityOrigin *)*v19;
    if (*v19 == (StringImpl *)-1)
    {
      CFURLRef v13 = (StringImpl **)(v7 + 24 * v18);
      goto LABEL_10;
    }
    if (!v20) {
      break;
    }
    if (WebCore::SecurityOrigin::isSameOriginAs(v20, (const WebCore::SecurityOrigin *)*a2)
      && (WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v19[1], (const WebCore::SecurityOrigin *)a2[1]) & 1) != 0)
    {
      goto LABEL_45;
    }
LABEL_10:
    int v16 = i + v18;
  }
  if (v13)
  {
    WTF *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    --*(_DWORD *)(*v6 - 16);
    CFDictionaryRef v19 = v13;
  }
  uint64_t v21 = *a2;
  atomic_fetch_add((atomic_uint *volatile)*a2, 1u);
  unsigned int v22 = *v19;
  const void *v19 = (StringImpl *)v21;
  if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v22);
    int v56 = (WTF::StringImpl *)*((void *)v22 + 6);
    *((void *)v22 + 6) = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, v9);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
    unint64_t v58 = (WTF::StringImpl *)*((void *)v22 + 5);
    *((void *)v22 + 5) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2) {
        WTF::StringImpl::destroy(v58, v9);
      }
      else {
        *(_DWORD *)v58 -= 2;
      }
    }
    uint64_t v60 = *((unsigned int *)v22 + 8);
    if (v60 != -1) {
      ((void (*)(int *, char *))off_1F3C79CB0[v60])(&v64, (char *)v22 + 8);
    }
    *((_DWORD *)v22 + 8) = -1;
    WTF::fastFree((WTF *)v22, v9);
    int8x16_t v61 = (atomic_uint *)a2[1];
    atomic_fetch_add(v61, 1u);
    CFDictionaryRef v24 = v19[1];
    v19[1] = (StringImpl *)v61;
    if (v24)
    {
LABEL_21:
      if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v24);
        unint64_t v57 = (WTF::StringImpl *)*((void *)v24 + 6);
        *((void *)v24 + 6) = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2) {
            WTF::StringImpl::destroy(v57, v9);
          }
          else {
            *(_DWORD *)v57 -= 2;
          }
        }
        long long v59 = (WTF::StringImpl *)*((void *)v24 + 5);
        *((void *)v24 + 5) = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2) {
            WTF::StringImpl::destroy(v59, v9);
          }
          else {
            *(_DWORD *)v59 -= 2;
          }
        }
        uint64_t v62 = *((unsigned int *)v24 + 8);
        if (v62 != -1) {
          ((void (*)(int *, char *))off_1F3C79CB0[v62])(&v64, (char *)v24 + 8);
        }
        *((_DWORD *)v24 + 8) = -1;
        WTF::fastFree((WTF *)v24, v9);
      }
    }
  }
  else
  {
    CFDictionaryRef v23 = (atomic_uint *)a2[1];
    atomic_fetch_add(v23, 1u);
    CFDictionaryRef v24 = v19[1];
    v19[1] = (StringImpl *)v23;
    if (v24) {
      goto LABEL_21;
    }
  }
  CFTypeID v25 = v19[2];
  v19[2] = 0;
  if (v25)
  {
    uint64_t v26 = *((unsigned int *)v25 - 1);
    if (v26)
    {
      size_t v27 = v25;
      do
      {
        uint64_t v28 = *(WTF::StringImpl **)v27;
        if (*(void *)v27 != -1)
        {
          unint64_t v29 = (WTF *)*((void *)v27 + 1);
          if (v29)
          {
            *((void *)v27 + 1) = 0;
            *((_DWORD *)v27 + 4) = 0;
            WTF::fastFree(v29, v9);
            uint64_t v28 = *(WTF::StringImpl **)v27;
          }
          *(void *)size_t v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v9);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
        }
        size_t v27 = (StringImpl *)((char *)v27 + 24);
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)((char *)v25 - 16), v9);
  }
  if (*v6)
  {
    ++*(_DWORD *)(*v6 - 12);
    uint64_t v30 = *v6;
    if (*v6) {
      goto LABEL_36;
    }
LABEL_41:
    uint64_t v31 = *(unsigned int *)(v30 - 16);
    unint64_t v32 = *(unsigned int *)(v30 - 4);
    if (v32 > 0x400) {
      goto LABEL_42;
    }
LABEL_37:
    if (3 * v32 <= 4 * v31)
    {
      if (!v32)
      {
        unsigned int v33 = 8;
        goto LABEL_44;
      }
LABEL_43:
      unsigned int v33 = v32 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v32));
LABEL_44:
      CFDictionaryRef v19 = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(v6, v33, (uint64_t)v19);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v30 = *v6;
    if (!*v6) {
      goto LABEL_41;
    }
LABEL_36:
    uint64_t v31 = (*(_DWORD *)(v30 - 16) + *(_DWORD *)(v30 - 12));
    unint64_t v32 = *(unsigned int *)(v30 - 4);
    if (v32 <= 0x400) {
      goto LABEL_37;
    }
LABEL_42:
    if (v32 <= 2 * v31) {
      goto LABEL_43;
    }
  }
LABEL_45:
  CFRunLoopSourceRef v36 = v19[2];
  CFTypeID v34 = (uint64_t *)(v19 + 2);
  uint64_t v35 = (uint64_t)v36;
  if (v36
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v34, 8u, 0), (uint64_t v35 = *v34) != 0))
  {
    int v37 = *(_DWORD *)(v35 - 8);
    unint64_t v38 = *a3;
    unsigned int v39 = *((_DWORD *)*a3 + 4);
    if (v39 >= 0x100) {
      goto LABEL_48;
    }
LABEL_51:
    unsigned int v40 = WTF::StringImpl::hashSlowCase(v38);
  }
  else
  {
    int v37 = 0;
    unint64_t v38 = *a3;
    unsigned int v39 = *((_DWORD *)*a3 + 4);
    if (v39 < 0x100) {
      goto LABEL_51;
    }
LABEL_48:
    unsigned int v40 = v39 >> 8;
  }
  unint64_t v41 = 0;
  int v42 = 1;
  while (2)
  {
    unsigned int v43 = v40 & v37;
    uint64_t v44 = v35 + 24 * (v40 & v37);
    uint64_t v45 = *(WTF **)v44;
    if (*(void *)v44 == -1)
    {
      unint64_t v41 = (void *)(v35 + 24 * v43);
LABEL_54:
      unsigned int v40 = v42 + v43;
      ++v42;
      continue;
    }
    break;
  }
  if (v45)
  {
    if (WTF::equal(v45, *a3, v10)) {
      goto LABEL_76;
    }
    goto LABEL_54;
  }
  if (v41)
  {
    void *v41 = 0;
    v41[1] = 0;
    v41[2] = 0;
    --*(_DWORD *)(*v34 - 16);
    uint64_t v44 = (uint64_t)v41;
  }
  unint64_t v46 = *a3;
  if (*a3) {
    *(_DWORD *)v46 += 2;
  }
  *(void *)uint64_t v44 = v46;
  unint64_t v47 = *(WTF **)(v44 + 8);
  if (v47)
  {
    *(void *)(v44 + 8) = 0;
    *(_DWORD *)(v44 + 16) = 0;
    WTF::fastFree(v47, v9);
  }
  *(void *)(v44 + 8) = 0;
  *(void *)(v44 + 16) = 0;
  if (*v34)
  {
    ++*(_DWORD *)(*v34 - 12);
    uint64_t v48 = *v34;
    if (*v34) {
      goto LABEL_67;
    }
LABEL_72:
    uint64_t v49 = *(unsigned int *)(v48 - 16);
    unint64_t v50 = *(unsigned int *)(v48 - 4);
    if (v50 > 0x400) {
      goto LABEL_73;
    }
LABEL_68:
    if (3 * v50 <= 4 * v49)
    {
      if (!v50)
      {
        unsigned int v51 = 8;
        goto LABEL_75;
      }
LABEL_74:
      unsigned int v51 = v50 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v50));
LABEL_75:
      uint64_t v44 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v34, v51, (WTF::StringImpl **)v44);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v48 = *v34;
    if (!*v34) {
      goto LABEL_72;
    }
LABEL_67:
    uint64_t v49 = (*(_DWORD *)(v48 - 16) + *(_DWORD *)(v48 - 12));
    unint64_t v50 = *(unsigned int *)(v48 - 4);
    if (v50 <= 0x400) {
      goto LABEL_68;
    }
LABEL_73:
    if (v50 <= 2 * v49) {
      goto LABEL_74;
    }
  }
LABEL_76:
  uint64_t result = (char *)(v44 + 8);
  uint64_t v53 = *(unsigned int *)(v44 + 20);
  if (v53 == *(_DWORD *)(v44 + 16))
  {
    uint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v53 + 1, (unint64_t)&v63);
    uint64_t v53 = *(unsigned int *)(v44 + 20);
    uint64_t v54 = *(void *)(v44 + 8);
    uint64_t v55 = *(void *)result;
  }
  else
  {
    uint64_t v54 = *(void *)result;
    uint64_t v55 = v63;
  }
  *(void *)(v54 + 8 * v53) = v55;
  ++*(_DWORD *)(v44 + 20);
  return result;
}

uint64_t WebBroadcastChannelRegistry::unregisterChannel(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t result = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 24), a2);
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10) {
    v10 += 24 * *(unsigned int *)(v10 - 4);
  }
  if (v10 == result) {
    return result;
  }
  uint64_t v11 = *(void *)(result + 16);
  if (!v11)
  {
LABEL_18:
    uint64_t v17 = 0;
    uint64_t v18 = MEMORY[0x14];
    if (!MEMORY[0x14]) {
      return result;
    }
    goto LABEL_19;
  }
  int v12 = *(_DWORD *)(v11 - 8);
  unsigned int v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100) {
    unsigned int v14 = WTF::StringImpl::hashSlowCase(*a3);
  }
  else {
    unsigned int v14 = v13 >> 8;
  }
  for (i = 0; ; unsigned int v14 = i + v16)
  {
    int v16 = v14 & v12;
    uint64_t v17 = v11 + 24 * (v14 & v12);
    uint64_t result = *(void *)v17;
    if (*(void *)v17 == -1) {
      goto LABEL_9;
    }
    if (!result) {
      break;
    }
    uint64_t result = WTF::equal((WTF *)result, *a3, v8);
    if (result)
    {
      uint64_t v18 = *(unsigned int *)(v17 + 20);
      if (v18) {
        goto LABEL_19;
      }
      return result;
    }
LABEL_9:
    ++i;
  }
  uint64_t v19 = *(void *)(v9 + 16);
  if (!v19) {
    goto LABEL_18;
  }
  uint64_t v17 = v19 + 24 * *(unsigned int *)(v19 - 4);
  uint64_t v18 = *(unsigned int *)(v17 + 20);
  if (v18)
  {
LABEL_19:
    uint64_t v20 = *(void **)(v17 + 8);
    if (*v20 == a4)
    {
      uint64_t v21 = 0;
LABEL_24:
      uint64_t result = (uint64_t)&v20[v21];
      if ((void *)(result + 8) != &v20[v18])
      {
        uint64_t result = (uint64_t)memmove((void *)result, (const void *)(result + 8), 8 * (v18 - v21) - 8);
        LODWORD(v18) = *(_DWORD *)(v17 + 20);
      }
      *(_DWORD *)(v17 + 20) = v18 - 1;
    }
    else
    {
      uint64_t v21 = 0;
      while (v18 - 1 != v21)
      {
        uint64_t v22 = v20[++v21];
        if (v22 == a4) {
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

uint64_t WebBroadcastChannelRegistry::postMessage(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, atomic_uint *volatile *a5, uint64_t *a6)
{
  uint64_t v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v12 = 1;
  uint64_t v13 = *a6;
  *a6 = 0;
  *(void *)(v12 + 8) = v13;
  uint64_t result = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 24), a2);
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17) {
    v17 += 24 * *(unsigned int *)(v17 - 4);
  }
  if (v17 == result) {
    goto LABEL_23;
  }
  uint64_t v34 = result;
  uint64_t v18 = *(void *)(result + 16);
  int v19 = *(_DWORD *)(v18 - 8);
  unsigned int v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100) {
    unsigned int v21 = WTF::StringImpl::hashSlowCase(*a3);
  }
  else {
    unsigned int v21 = v20 >> 8;
  }
  for (i = 0; ; unsigned int v21 = i + v23)
  {
    int v23 = v21 & v19;
    uint64_t v24 = v18 + 24 * (v21 & v19);
    uint64_t result = *(void *)v24;
    if (*(void *)v24 == -1) {
      goto LABEL_8;
    }
    if (!result) {
      break;
    }
    uint64_t result = WTF::equal((WTF *)result, *a3, v16);
    if (result)
    {
      uint64_t v25 = *(unsigned int *)(v24 + 20);
      if (!v25) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
LABEL_8:
    ++i;
  }
  uint64_t v24 = *(void *)(v34 + 16) + 24 * *(unsigned int *)(*(void *)(v34 + 16) - 4);
  uint64_t v25 = *(unsigned int *)(v24 + 20);
  if (!v25) {
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v26 = *(void **)(v24 + 8);
  uint64_t v27 = 8 * v25;
  do
  {
    if (*v26 != a4)
    {
      atomic_uint *volatile v28 = *a5;
      atomic_fetch_add(*a5, 1u);
      CFRunLoopSourceRef v36 = (unsigned int *)v28;
      atomic_fetch_add((atomic_uint *volatile)v12, 1u);
      unint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v29 = &unk_1F3C79DF8;
      v29[1] = v12;
      uint64_t v35 = v29;
      WebCore::BroadcastChannel::dispatchMessageTo();
      if (v35) {
        (*(void (**)(void *))(*v35 + 8))(v35);
      }
      uint64_t result = (uint64_t)v36;
      if (v36 && atomic_fetch_add((atomic_uint *volatile)v36, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v36);
        WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v36);
        uint64_t result = WTF::fastFree(v30, v31);
      }
    }
    ++v26;
    v27 -= 8;
  }
  while (v27);
LABEL_23:
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v12);
    uint64_t v32 = *(void *)(v12 + 8);
    *(void *)(v12 + 8) = 0;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      uint64_t v33 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = 0;
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

WTF::StringImpl *WebResourceLoadScheduler::hostForURL(WTF::StringImpl *result, uint64_t a2, WTF::URL *this, int a4)
{
  uint64_t v4 = (uint64_t *)result;
  if ((*((unsigned char *)this + 8) & 2) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)uint64_t result = v5;
    if (v5) {
      ++*(_DWORD *)(v5 + 8);
    }
    return result;
  }
  uint64_t v7 = (uint64_t *)(a2 + 8);
  WTF::URL::host(this);
  if ((v8 & 0xFF00000000) != 0)
  {
    WTF::String::String();
    uint64_t v11 = *v7;
    if (!*v7) {
      goto LABEL_18;
    }
  }
  else
  {
    WTF::String::String();
    uint64_t v11 = *v7;
    if (!*v7)
    {
LABEL_18:
      *uint64_t v4 = 0;
      goto LABEL_19;
    }
  }
  int v12 = *(_DWORD *)(v11 - 8);
  unsigned int v13 = *((_DWORD *)v40 + 4);
  if (v13 < 0x100) {
    unsigned int v14 = WTF::StringImpl::hashSlowCase(v40);
  }
  else {
    unsigned int v14 = v13 >> 8;
  }
  for (i = 0; ; unsigned int v14 = i + v16)
  {
    uint64_t v16 = v14 & v12;
    uint64_t v17 = *(WTF **)(v11 + 16 * v16);
    if (v17 != (WTF *)-1)
    {
      if (!v17) {
        goto LABEL_18;
      }
      if (WTF::equal(v17, v40, v10)) {
        break;
      }
    }
    ++i;
  }
  uint64_t v18 = *(void *)(v11 + 16 * v16 + 8);
  *uint64_t v4 = v18;
  if (v18)
  {
    ++*(_DWORD *)(v18 + 8);
    goto LABEL_56;
  }
LABEL_19:
  if (!a4)
  {
    uint64_t v19 = WTF::fastMalloc((WTF *)0xC8);
    uint64_t v21 = v19;
    int v22 = maxRequestsInFlightPerHost;
    *(void *)uint64_t v19 = 0;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 128) = 0u;
    *(_OWORD *)(v19 + 144) = 0u;
    *(_OWORD *)(v19 + 160) = 0u;
    *(void *)(v19 + 176) = 0;
    if (v40) {
      *(_DWORD *)v40 += 2;
    }
    *(void *)(v19 + 184) = v40;
    *(_DWORD *)(v19 + 192) = v22;
    *(_DWORD *)(v19 + 8) = 1;
    *uint64_t v4 = v19;
    uint64_t v23 = *v7;
    if (*v7
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v7, 8u), (uint64_t v23 = *v7) != 0))
    {
      int v24 = *(_DWORD *)(v23 - 8);
      uint64_t v25 = v40;
      unsigned int v26 = *((_DWORD *)v40 + 4);
      if (v26 >= 0x100)
      {
LABEL_25:
        unsigned int v27 = v26 >> 8;
LABEL_28:
        atomic_uint *volatile v28 = 0;
        for (int j = 1; ; ++j)
        {
          unsigned int v30 = v27 & v24;
          uint64_t v31 = (WTF **)(v23 + 16 * (v27 & v24));
          uint64_t v32 = *v31;
          if (*v31 == (WTF *)-1)
          {
            atomic_uint *volatile v28 = (WTF **)(v23 + 16 * v30);
          }
          else
          {
            if (!v32)
            {
              if (v28)
              {
                WTF::StringImpl *v28 = 0;
                v28[1] = 0;
                --*(_DWORD *)(*v7 - 16);
                uint64_t v31 = v28;
              }
              if (v40) {
                *(_DWORD *)v40 += 2;
              }
              void *v31 = v40;
              uint64_t v33 = v31[1];
              v31[1] = (WTF *)v21;
              if (v33)
              {
                WebResourceLoadScheduler::HostInformation::~HostInformation(v33, v9);
                if (!*(_DWORD *)(v34 + 8))
                {
                  WTF::fastFree((WTF *)v34, v9);
                  goto LABEL_43;
                }
                *(void *)(v34 + 192) = 0;
                *(_OWORD *)(v34 + 160) = 0u;
                *(_OWORD *)(v34 + 176) = 0u;
                *(_OWORD *)(v34 + 128) = 0u;
                *(_OWORD *)(v34 + 144) = 0u;
                *(_OWORD *)(v34 + 96) = 0u;
                *(_OWORD *)(v34 + 112) = 0u;
                *(_OWORD *)(v34 + 64) = 0u;
                *(_OWORD *)(v34 + 80) = 0u;
                *(_OWORD *)(v34 + 32) = 0u;
                *(_OWORD *)(v34 + 48) = 0u;
                *(_OWORD *)uint64_t v34 = 0u;
                *(_OWORD *)(v34 + 16) = 0u;
                uint64_t v35 = *v7;
                if (!*v7)
                {
LABEL_51:
                  *(_DWORD *)(v35 - 12) = 1;
                  uint64_t v36 = *v7;
                  if (!*v7)
                  {
LABEL_52:
                    uint64_t v37 = *(unsigned int *)(v36 - 16);
                    unint64_t v38 = *(unsigned int *)(v36 - 4);
                    if (v38 > 0x400) {
                      goto LABEL_53;
                    }
LABEL_46:
                    if (3 * v38 > 4 * v37) {
                      goto LABEL_56;
                    }
                    if (!v38)
                    {
                      unsigned int v39 = 8;
LABEL_55:
                      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v7, v39);
                      goto LABEL_56;
                    }
LABEL_54:
                    unsigned int v39 = v38 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v38));
                    goto LABEL_55;
                  }
LABEL_45:
                  uint64_t v37 = (*(_DWORD *)(v36 - 16) + *(_DWORD *)(v36 - 12));
                  unint64_t v38 = *(unsigned int *)(v36 - 4);
                  if (v38 <= 0x400) {
                    goto LABEL_46;
                  }
LABEL_53:
                  if (v38 > 2 * v37) {
                    goto LABEL_56;
                  }
                  goto LABEL_54;
                }
              }
              else
              {
LABEL_43:
                uint64_t v35 = *v7;
                if (!*v7) {
                  goto LABEL_51;
                }
              }
              ++*(_DWORD *)(v35 - 12);
              uint64_t v36 = *v7;
              if (!*v7) {
                goto LABEL_52;
              }
              goto LABEL_45;
            }
            if (WTF::equal(v32, v40, v20))
            {
              WebResourceLoadScheduler::HostInformation::~HostInformation((WebResourceLoadScheduler::HostInformation *)v21, v9);
              if (*(_DWORD *)(v21 + 8))
              {
                *(void *)(v21 + 192) = 0;
                *(_OWORD *)(v21 + 160) = 0u;
                *(_OWORD *)(v21 + 176) = 0u;
                *(_OWORD *)(v21 + 128) = 0u;
                *(_OWORD *)(v21 + 144) = 0u;
                *(_OWORD *)(v21 + 96) = 0u;
                *(_OWORD *)(v21 + 112) = 0u;
                *(_OWORD *)(v21 + 64) = 0u;
                *(_OWORD *)(v21 + 80) = 0u;
                *(_OWORD *)(v21 + 32) = 0u;
                *(_OWORD *)(v21 + 48) = 0u;
                *(_OWORD *)uint64_t v21 = 0u;
                *(_OWORD *)(v21 + 16) = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v21, v9);
              }
              goto LABEL_56;
            }
          }
          unsigned int v27 = j + v30;
        }
      }
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = v40;
      unsigned int v26 = *((_DWORD *)v40 + 4);
      if (v26 >= 0x100) {
        goto LABEL_25;
      }
    }
    unsigned int v27 = WTF::StringImpl::hashSlowCase(v25);
    goto LABEL_28;
  }
LABEL_56:
  uint64_t result = v40;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v40, v9);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  return result;
}

uint64_t WebResourceLoadScheduler::requestTimerFired(WebResourceLoadScheduler *this)
{
  return WebResourceLoadScheduler::servePendingRequests((uint64_t)this, 0);
}

void WebResourceLoadScheduler::WebResourceLoadScheduler(WebResourceLoadScheduler *this)
{
  *(void *)this = &unk_1F3C79898;
  *((void *)this + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0xC8);
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_DWORD *)(v2 + 192) = 10000;
  *((void *)this + 2) = v2;
  WebCore::TimerBase::TimerBase((WebResourceLoadScheduler *)((char *)this + 24));
  *((void *)this + 3) = &unk_1F3C79440;
  unint64_t v3 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(void *)unint64_t v3 = &unk_1F3C79E20;
  *((void *)v3 + 1) = WebResourceLoadScheduler::requestTimerFired;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = this;
  *((void *)this + 9) = v3;
  *((_DWORD *)this + 20) = 0;
  *((unsigned char *)this + 84) = 0;
  maxRequestsInFlightPerHost = WebCore::initializeMaximumHTTPConnectionCountPerHost(v3);
}

void WebResourceLoadScheduler::~WebResourceLoadScheduler(WebResourceLoadScheduler *this)
{
  uint64_t v2 = (WebResourceLoadScheduler *)((char *)this + 24);
  *((void *)this + 3) = &unk_1F3C79440;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(v2);
  uint64_t v5 = (WebResourceLoadScheduler::HostInformation *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    WebResourceLoadScheduler::HostInformation::~HostInformation(v5, v4);
    if (*(_DWORD *)(v6 + 8))
    {
      *(void *)(v6 + 192) = 0;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)uint64_t v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      uint64_t v7 = (WTF::StringImpl **)*((void *)this + 1);
      if (!v7) {
        goto LABEL_21;
      }
      goto LABEL_7;
    }
    WTF::fastFree((WTF *)v6, v4);
  }
  uint64_t v7 = (WTF::StringImpl **)*((void *)this + 1);
  if (!v7) {
    goto LABEL_21;
  }
LABEL_7:
  uint64_t v8 = *((unsigned int *)v7 - 1);
  if (v8)
  {
    uint64_t v9 = v7;
    while (1)
    {
      if (*v9 == (WTF::StringImpl *)-1) {
        goto LABEL_10;
      }
      uint64_t v10 = v9[1];
      v9[1] = 0;
      if (!v10) {
        goto LABEL_15;
      }
      WebResourceLoadScheduler::HostInformation::~HostInformation(v10, v4);
      if (!*(_DWORD *)(v11 + 8)) {
        break;
      }
      *(void *)(v11 + 192) = 0;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 176) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      int v12 = *v9;
      *uint64_t v9 = 0;
      if (v12)
      {
LABEL_16:
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v4);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
LABEL_10:
      v9 += 2;
      if (!--v8) {
        goto LABEL_20;
      }
    }
    WTF::fastFree((WTF *)v11, v4);
LABEL_15:
    int v12 = *v9;
    *uint64_t v9 = 0;
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
LABEL_20:
  WTF::fastFree((WTF *)(v7 - 2), v4);
LABEL_21:
  MEMORY[0x1F416D9E8](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebResourceLoadScheduler::~WebResourceLoadScheduler(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebResourceLoadScheduler::loadResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *a6;
  *a6 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1F3C79E48;
  v8[1] = a1;
  v8[2] = v7;
  uint64_t v10 = v8;
  WebCore::SubresourceLoader::create();
  uint64_t result = (uint64_t)v10;
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebResourceLoadScheduler::loadResourceSynchronously(int a1, WebCore::FrameLoader *this, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = *(void *)(WebCore::FrameLoader::frame(this) + 296);
  if (v14) {
    uint64_t v15 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v14 + 208));
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = WebCore::FrameLoader::networkingContext(this);
  BOOL v17 = *(unsigned char *)(a6 + 2) != 0;
  return MEMORY[0x1F416DC68](v16, a4, v17, v15, a8, a9, a10);
}

uint64_t WebResourceLoadScheduler::scheduleLoad(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2)
{
  uint64_t v3 = this;
  if (*((_DWORD *)this + 20)
    || (uint64_t v16 = (WebCore::DocumentLoader *)*((void *)a2 + 5),
        BOOL v17 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)a2 + 160))(a2),
        uint64_t v18 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v17),
        !WebCore::DocumentLoader::archiveResourceForURL(v16, v18)))
  {
    uint64_t v4 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)a2 + 160))(a2);
    uint64_t v5 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
    WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v41, (uint64_t)v3, v5, 0);
    uint64_t v6 = v41;
    uint64_t v42 = v41;
    uint64_t result = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)a2 + 336));
    uint64_t v8 = *(void *)(v6 + 176);
    BOOL v9 = v8 && *(_DWORD *)(v8 - 12)
      || *(void *)(v6 + 16) != *(void *)(v6 + 24)
      || *(void *)(v6 + 48) != *(void *)(v6 + 56)
      || *(void *)(v6 + 80) != *(void *)(v6 + 88)
      || *(void *)(v6 + 112) != *(void *)(v6 + 120)
      || *(void *)(v6 + 144) != *(void *)(v6 + 152);
    char v39 = v9;
    unsigned int v40 = result;
    if ((((_BYTE)result - 1) & 0xFC) != 0) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = (result - 1) + 1;
    }
    uint64_t v11 = v6 + 16;
    uint64_t v12 = v6 + 16 + 32 * v10;
    uint64_t v14 = (uint64_t *)(v12 + 8);
    uint64_t v13 = *(void *)(v12 + 8);
    if (*(void *)v12)
    {
      if (v13 + 1 != *(void *)v12) {
        goto LABEL_35;
      }
      LODWORD(v15) = *(_DWORD *)(v11 + 32 * v10 + 24);
    }
    else
    {
      uint64_t v15 = *(unsigned int *)(v12 + 24);
      if (v13)
      {
        if (v13 != v15 - 1) {
          goto LABEL_35;
        }
      }
      else if (v15)
      {
        goto LABEL_35;
      }
    }
    unint64_t v38 = v3;
    uint64_t v37 = v15;
    unint64_t v20 = v15 + ((unint64_t)v15 >> 2);
    if (v20 <= 0xF) {
      unint64_t v20 = 15;
    }
    if (v20 >= 0x1FFFFFFF) {
      goto LABEL_53;
    }
    uint64_t v21 = v11 + 32 * v10;
    int v24 = *(char **)(v21 + 16);
    uint64_t v22 = v21 + 16;
    uint64_t v23 = v24;
    int v25 = v20 + 1;
    unsigned int v26 = (char *)WTF::fastMalloc((WTF *)(8 * (v20 + 1)));
    *(_DWORD *)(v22 + 8) = v25;
    *(void *)uint64_t v22 = v26;
    uint64_t v27 = *v14;
    if (*(void *)v12 > (unint64_t)*v14)
    {
      memcpy(v26, v23, 8 * v27);
      uint64_t v28 = *(void *)v12 - v37 + *(unsigned int *)(v22 + 8);
      uint64_t result = (uint64_t)memcpy((void *)(*(void *)v22 + 8 * v28), &v23[8 * *(void *)v12], 8 * v37 - 8 * *(void *)v12);
      *(void *)uint64_t v12 = v28;
      uint64_t v3 = v38;
      if (!v23) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t result = (uint64_t)memcpy(&v26[8 * *(void *)v12], &v23[8 * *(void *)v12], 8 * v27 - 8 * *(void *)v12);
      uint64_t v3 = v38;
      if (!v23) {
        goto LABEL_35;
      }
    }
    if (*(char **)v22 == v23)
    {
      *(void *)uint64_t v22 = 0;
      *(_DWORD *)(v22 + 8) = 0;
    }
    uint64_t result = WTF::fastFree((WTF *)v23, v29);
LABEL_35:
    uint64_t v30 = v11 + 32 * v10;
    uint64_t v31 = *(void *)(v30 + 16);
    uint64_t v32 = *v14;
    ++*((_DWORD *)a2 + 4);
    *(void *)(v31 + 8 * v32) = a2;
    if (v32 == *(unsigned int *)(v30 + 24) - 1) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32 + 1;
    }
    uint64_t *v14 = v33;
    if (*((_DWORD *)v3 + 20))
    {
      if (v40 <= 1)
      {
        uint64_t v34 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)a2 + 160))(a2);
        uint64_t result = WebCore::ResourceRequestBase::url(v34);
        char v35 = v39;
        if (v40 != 1) {
          char v35 = 1;
        }
        if (((*(unsigned char *)(result + 8) & 2) == 0 || (v35 & 1) == 0) && !*((_DWORD *)v3 + 20))
        {
          uint64_t result = WebResourceLoadScheduler::servePendingRequests((uint64_t)&v42, v40);
          int v36 = *(_DWORD *)(v6 + 8);
          if (v36) {
            goto LABEL_51;
          }
          goto LABEL_53;
        }
      }
      if ((*((void *)v3 + 7) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((void *)v3 + 7) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        uint64_t result = WebCore::TimerBase::start();
        int v36 = *(_DWORD *)(v6 + 8);
        if (!v36) {
          goto LABEL_53;
        }
LABEL_51:
        *(_DWORD *)(v6 + 8) = v36 - 1;
        return result;
      }
    }
    else
    {
      uint64_t result = WebResourceLoadScheduler::servePendingRequests((uint64_t)&v42, 0);
    }
    int v36 = *(_DWORD *)(v6 + 8);
    if (v36) {
      goto LABEL_51;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x1E136E988);
  }
  uint64_t v19 = *(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)a2 + 152);
  return v19(a2);
}

uint64_t WebResourceLoadScheduler::servePendingRequests(uint64_t result, int a2)
{
  uint64_t v2 = result;
  int v3 = 4;
  while (1)
  {
    uint64_t v5 = ((v3 - 1) & 0xFC) != 0 ? 0 : (v3 - 1) + 1;
    uint64_t v6 = *(void *)v2 + 16 + 32 * v5;
    uint64_t v7 = (void *)(v6 + 8);
    uint64_t v8 = *(void *)v6;
    if (*(void *)v6 != *(void *)(v6 + 8)) {
      break;
    }
LABEL_2:
    if (a2 == v3--) {
      return result;
    }
  }
  BOOL v9 = (void *)(v6 + 16);
  while (1)
  {
    uint64_t v10 = *(WebCore::ResourceLoader **)(*v9 + 8 * v8);
    if (v10) {
      ++*((_DWORD *)v10 + 4);
    }
    uint64_t result = WebCore::ResourceLoader::frameLoader(v10);
    if (result)
    {
      uint64_t v11 = (WebCore::FrameLoader *)WebCore::ResourceLoader::frameLoader(v10);
      uint64_t result = WebCore::FrameLoader::frame(v11);
      uint64_t v12 = *(void *)v2;
      if (!*(void *)(*(void *)v2 + 184))
      {
        uint64_t result = *(void *)(result + 296);
        if (!result) {
          goto LABEL_31;
        }
        if (!*(unsigned char *)(result + 3443))
        {
          uint64_t result = WebCore::Document::haveStylesheetsLoaded((WebCore::Document *)result);
          if (result) {
            goto LABEL_31;
          }
          uint64_t v12 = *(void *)v2;
        }
      }
    }
    else
    {
      uint64_t v12 = *(void *)v2;
      if (!*(void *)(*(void *)v2 + 184)) {
        goto LABEL_31;
      }
    }
    uint64_t v13 = *(void *)(v12 + 176);
    if (!(_BYTE)v3) {
      break;
    }
    if (v13)
    {
      unsigned int v14 = *(_DWORD *)(v13 - 12);
      uint64_t v15 = (void *)WebCore::platformStrategies((WebCore *)result);
      uint64_t result = v15[1];
      if (result) {
        goto LABEL_26;
      }
      goto LABEL_29;
    }
LABEL_25:
    unsigned int v14 = 0;
    uint64_t v15 = (void *)WebCore::platformStrategies((WebCore *)result);
    uint64_t result = v15[1];
    if (result)
    {
LABEL_26:
      if (*(unsigned char *)(result + 84)) {
        goto LABEL_27;
      }
      goto LABEL_30;
    }
LABEL_29:
    uint64_t result = (*(uint64_t (**)(void *))(*v15 + 16))(v15);
    v15[1] = result;
    if (*(unsigned char *)(result + 84))
    {
LABEL_27:
      if (v14) {
        goto LABEL_51;
      }
      goto LABEL_31;
    }
LABEL_30:
    if (v14 >= *(_DWORD *)(v12 + 192)) {
      goto LABEL_51;
    }
LABEL_31:
    uint64_t v16 = *(void *)v6;
    if (*(void *)v6 == *v7)
    {
      uint64_t result = 512;
      __break(0xC471u);
      return result;
    }
    BOOL v17 = *(_DWORD **)(*v9 + 8 * v16);
    *(void *)(*v9 + 8 * v16) = 0;
    if (v17)
    {
      if (v17[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
        uint64_t v16 = *(void *)v6;
      }
      else
      {
        --v17[4];
      }
    }
    if (v16 == *(unsigned int *)(v6 + 24) - 1) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v16 + 1;
    }
    *(void *)uint64_t v6 = v18;
    uint64_t v19 = *(void *)v2;
    if (v10) {
      ++*((_DWORD *)v10 + 4);
    }
    int v25 = v10;
    WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::add(v24, (uint64_t *)(v19 + 176), &v25);
    unint64_t v20 = v25;
    if (!v25) {
      goto LABEL_44;
    }
    if (*((_DWORD *)v25 + 4) != 1)
    {
      --*((_DWORD *)v25 + 4);
LABEL_44:
      if ((WebCore::IOSApplication::isWebProcess(v20) & 1) == 0) {
        goto LABEL_50;
      }
      goto LABEL_47;
    }
    uint64_t v21 = (WebCore::IOSApplication *)(*(uint64_t (**)(void))(*(void *)v25 + 8))();
    if ((WebCore::IOSApplication::isWebProcess(v21) & 1) == 0)
    {
LABEL_50:
      uint64_t result = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)v10 + 152))(v10);
      goto LABEL_52;
    }
LABEL_47:
    uint64_t result = WebCore::ResourceLoader::start(v10);
    if (v10)
    {
      if (*((_DWORD *)v10 + 4) == 1) {
        uint64_t result = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)v10 + 8))(v10);
      }
      else {
        --*((_DWORD *)v10 + 4);
      }
    }
    uint64_t v8 = *(void *)v6;
    if (*(void *)v6 == *v7) {
      goto LABEL_2;
    }
  }
  if (!v13 || !*(_DWORD *)(v13 - 12)) {
    goto LABEL_25;
  }
LABEL_51:
  if (!v10) {
    return result;
  }
LABEL_52:
  if (*((_DWORD *)v10 + 4) == 1)
  {
    uint64_t v22 = *(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)v10 + 8);
    return v22(v10);
  }
  else
  {
    --*((_DWORD *)v10 + 4);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  StringImpl *v5;
  const WTF::StringImpl *v6;
  int v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  atomic_uint *v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  int v33;
  int v34;
  int i;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WebResourceLoadScheduler::HostInformation *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t vars8;

  if (*(_DWORD *)(result + 80)) {
    return result;
  }
  int v3 = result;
  if ((*(void *)(result + 56) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(result + 24));
  }
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v54 = v4;
  ++*(_DWORD *)(v4 + 8);
  uint64_t result = WebResourceLoadScheduler::servePendingRequests((uint64_t)&v54, a2);
  uint64_t v7 = *(_DWORD *)(v4 + 8);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1E136FCCCLL);
  }
  *(_DWORD *)(v4 + 8) = v7 - 1;
  uint64_t v10 = *(void **)(v3 + 8);
  BOOL v9 = (uint64_t *)(v3 + 8);
  uint64_t v8 = v10;
  if (!v10)
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *((unsigned int *)v8 - 1);
  uint64_t v12 = &v8[2 * v11];
  if (!*((_DWORD *)v8 - 3))
  {
    uint64_t v13 = &v8[2 * v11];
    uint64_t v12 = v13;
    uint64_t v53 = a2;
    if (v8) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t v15 = 0;
LABEL_22:
    BOOL v17 = 0;
    if (v15 == v13) {
      goto LABEL_97;
    }
    goto LABEL_23;
  }
  uint64_t v13 = v8;
  if (!v11)
  {
LABEL_15:
    uint64_t v53 = a2;
    if (v8) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  unsigned int v14 = 16 * v11;
  uint64_t v13 = v8;
  do
  {
    if ((unint64_t)(*v13 + 1) > 1) {
      goto LABEL_15;
    }
    v13 += 2;
    v14 -= 16;
  }
  while (v14);
  uint64_t v13 = v12;
  uint64_t v53 = a2;
  if (!v8) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v15 = &v8[2 * *((unsigned int *)v8 - 1)];
  uint64_t v16 = *((unsigned int *)v8 - 3);
  if (!v16) {
    goto LABEL_22;
  }
  if (v16 >> 29)
  {
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x1E136FCACLL);
  }
  uint64_t result = WTF::fastMalloc((WTF *)(8 * v16));
  BOOL v17 = (WTF *)result;
  if (v15 != v13)
  {
LABEL_23:
    uint64_t v18 = 0;
    uint64_t v19 = 1;
    while (1)
    {
      unint64_t v20 = v19;
      uint64_t v21 = (uint64_t *)v13[1];
      if (!v21)
      {
        uint64_t result = 0;
        goto LABEL_32;
      }
      uint64_t result = *v21;
      if (*v21) {
        goto LABEL_30;
      }
      uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t result = 1;
      *(void *)(result + 8) = v21;
      uint64_t v22 = (atomic_uint *)*v21;
      WebCore::IOSApplication *v21 = result;
      if (!v22) {
        goto LABEL_30;
      }
      if (atomic_fetch_add(v22, 0xFFFFFFFF) == 1) {
        break;
      }
      uint64_t result = *v21;
      if (*v21) {
        goto LABEL_30;
      }
LABEL_32:
      *((void *)v17 + v18) = result;
      uint64_t v23 = v13 + 2;
      uint64_t v13 = v12;
      if (v23 != v12)
      {
        uint64_t v13 = v23;
        do
        {
          if ((unint64_t)(*v13 + 1) > 1) {
            goto LABEL_24;
          }
          v13 += 2;
        }
        while (v13 != v12);
        uint64_t v13 = v12;
      }
LABEL_24:
      ++v18;
      uint64_t v19 = v20 + 1;
      if (v13 == v15)
      {
        if (!v18) {
          goto LABEL_97;
        }
        int v24 = (WTF *)((char *)v17 + 8 * v18);
        int v25 = v17;
        unsigned int v26 = v53;
        while (2)
        {
          if (!*(void *)v25) {
            goto LABEL_42;
          }
          uint64_t v27 = *(void *)(*(void *)v25 + 8);
          if (!v27) {
            goto LABEL_42;
          }
          uint64_t v28 = *(void *)(v27 + 176);
          if (v28 && *(_DWORD *)(v28 - 12)
            || *(void *)(v27 + 16) != *(void *)(v27 + 24)
            || *(void *)(v27 + 48) != *(void *)(v27 + 56)
            || *(void *)(v27 + 80) != *(void *)(v27 + 88)
            || *(void *)(v27 + 112) != *(void *)(v27 + 120)
            || *(void *)(v27 + 144) != *(void *)(v27 + 152))
          {
            uint64_t v54 = *(void *)(*(void *)v25 + 8);
            ++*(_DWORD *)(v27 + 8);
            WebResourceLoadScheduler::servePendingRequests((uint64_t)&v54, v26);
            uint64_t v34 = *(_DWORD *)(v27 + 8);
            if (!v34) {
              goto LABEL_103;
            }
            *(_DWORD *)(v27 + 8) = v34 - 1;
            goto LABEL_42;
          }
          unint64_t v29 = *v9;
          if (!*v9) {
            goto LABEL_42;
          }
          uint64_t v30 = *(_DWORD *)(v29 - 8);
          uint64_t v31 = *(WTF::StringImpl **)(v27 + 184);
          uint64_t v32 = *((_DWORD *)v31 + 4);
          uint64_t v33 = v32 < 0x100 ? WTF::StringImpl::hashSlowCase(v31) : v32 >> 8;
          for (i = 0; ; uint64_t v33 = ++i + v36)
          {
            int v36 = v33 & v30;
            uint64_t v37 = *(WTF **)(v29 + 16 * v36);
            if (v37 != (WTF *)-1)
            {
              if (!v37)
              {
                char v39 = *v9;
                unsigned int v26 = v53;
                if (!*v9) {
                  goto LABEL_42;
                }
                unsigned int v40 = *(unsigned int *)(v39 - 4);
                unint64_t v38 = (WTF::StringImpl **)(v39 + 16 * v40);
                goto LABEL_67;
              }
              if (WTF::equal(v37, *(const WTF::StringImpl **)(v27 + 184), v6)) {
                break;
              }
            }
          }
          unint64_t v38 = (WTF::StringImpl **)(v29 + 16 * v36);
          char v39 = *v9;
          if (*v9)
          {
            unsigned int v40 = *(unsigned int *)(v39 - 4);
            unsigned int v26 = v53;
LABEL_67:
            v39 += 16 * v40;
            goto LABEL_69;
          }
          unsigned int v26 = v53;
LABEL_69:
          if ((WTF::StringImpl **)v39 == v38) {
            goto LABEL_42;
          }
          uint64_t v41 = v38[1];
          v38[1] = 0;
          uint64_t v42 = *v9;
          if (*v9)
          {
            v42 += 16 * *(unsigned int *)(v42 - 4);
            if ((WTF::StringImpl **)v42 == v38) {
              goto LABEL_88;
            }
          }
          if ((WTF::StringImpl **)v42 == v38) {
            goto LABEL_88;
          }
          unsigned int v43 = *v38;
          *unint64_t v38 = (WTF::StringImpl *)-1;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v5);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          uint64_t v44 = v38[1];
          v38[1] = 0;
          if (v44)
          {
            WebResourceLoadScheduler::HostInformation::~HostInformation(v44, v5);
            if (!*(_DWORD *)(v45 + 8))
            {
              WTF::fastFree((WTF *)v45, v5);
              goto LABEL_80;
            }
            *(void *)(v45 + 192) = 0;
            *(_OWORD *)(v45 + 160) = 0u;
            *(_OWORD *)(v45 + 176) = 0u;
            *(_OWORD *)(v45 + 128) = 0u;
            *(_OWORD *)(v45 + 144) = 0u;
            *(_OWORD *)(v45 + 96) = 0u;
            *(_OWORD *)(v45 + 112) = 0u;
            *(_OWORD *)(v45 + 64) = 0u;
            *(_OWORD *)(v45 + 80) = 0u;
            *(_OWORD *)(v45 + 32) = 0u;
            *(_OWORD *)(v45 + 48) = 0u;
            *(_OWORD *)uint64_t v45 = 0u;
            *(_OWORD *)(v45 + 16) = 0u;
            ++*(_DWORD *)(*v9 - 16);
            unint64_t v46 = *v9;
            if (!*v9)
            {
LABEL_83:
              unint64_t v47 = -1;
LABEL_84:
              *(_DWORD *)(v46 - 12) = v47;
              uint64_t v48 = *v9;
              if (*v9)
              {
                uint64_t v49 = 6 * *(_DWORD *)(v48 - 12);
                unint64_t v50 = *(_DWORD *)(v48 - 4);
                if (v49 < v50 && v50 >= 9) {
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, v50 >> 1);
                }
              }
LABEL_88:
              if (v41)
              {
                WebResourceLoadScheduler::HostInformation::~HostInformation(v41, v5);
                if (*((_DWORD *)v41 + 2))
                {
                  *((void *)v41 + 24) = 0;
                  *((_OWORD *)v41 + 10) = 0u;
                  *((_OWORD *)v41 + 11) = 0u;
                  *((_OWORD *)v41 + 8) = 0u;
                  *((_OWORD *)v41 + 9) = 0u;
                  *((_OWORD *)v41 + 6) = 0u;
                  *((_OWORD *)v41 + 7) = 0u;
                  *((_OWORD *)v41 + 4) = 0u;
                  *((_OWORD *)v41 + 5) = 0u;
                  *((_OWORD *)v41 + 2) = 0u;
                  *((_OWORD *)v41 + 3) = 0u;
                  *(_OWORD *)uint64_t v41 = 0u;
                  *((_OWORD *)v41 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v41, v5);
                }
              }
LABEL_42:
              int v25 = (WTF *)((char *)v25 + 8);
              if (v25 == v24)
              {
                unsigned int v51 = 8 * v20;
                unint64_t v52 = (uint64_t *)v17;
                do
                {
                  while (1)
                  {
                    uint64_t result = *v52;
                    unsigned char *v52 = 0;
                    if (result)
                    {
                      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1) {
                        break;
                      }
                    }
                    ++v52;
                    v51 -= 8;
                    if (!v51) {
                      goto LABEL_97;
                    }
                  }
                  atomic_store(1u, (unsigned int *)result);
                  uint64_t result = WTF::fastFree((WTF *)result, v5);
                  ++v52;
                  v51 -= 8;
                }
                while (v51);
                goto LABEL_97;
              }
              continue;
            }
          }
          else
          {
LABEL_80:
            ++*(_DWORD *)(*v9 - 16);
            unint64_t v46 = *v9;
            if (!*v9) {
              goto LABEL_83;
            }
          }
          break;
        }
        unint64_t v47 = *(_DWORD *)(v46 - 12) - 1;
        goto LABEL_84;
      }
    }
    atomic_store(1u, (unsigned int *)v22);
    WTF::fastFree((WTF *)v22, v5);
    uint64_t result = *v21;
    if (!*v21) {
      goto LABEL_32;
    }
LABEL_30:
    atomic_fetch_add((atomic_uint *volatile)result, 1u);
    goto LABEL_32;
  }
LABEL_97:
  if (v17)
  {
    return WTF::fastFree(v17, v5);
  }
  return result;
}

uint64_t WebResourceLoadScheduler::remove(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2)
{
  uint64_t v4 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
  WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v14, (uint64_t)this, v4, 1);
  uint64_t v5 = v14;
  if (v14) {
    WebResourceLoadScheduler::HostInformation::remove((uint64_t *)v14, a2);
  }
  uint64_t v6 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)a2 + 160))(a2);
  uint64_t result = WebCore::ResourceRequestBase::isNull(v6);
  if ((result & 1) == 0)
  {
    uint64_t v8 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)a2 + 160))(a2);
    BOOL v9 = (WTF::URL *)WebCore::ResourceRequestBase::url(v8);
    uint64_t result = (uint64_t)WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v13, (uint64_t)this, v9, 1);
    uint64_t v10 = v13;
    if (v13)
    {
      if (v13 != v5) {
        uint64_t result = (uint64_t)WebResourceLoadScheduler::HostInformation::remove((uint64_t *)v13, a2);
      }
      int v11 = *((_DWORD *)v10 + 2);
      if (!v11) {
        goto LABEL_16;
      }
      *((_DWORD *)v10 + 2) = v11 - 1;
    }
  }
  if ((*((void *)this + 7) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((void *)this + 7) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    uint64_t result = WebCore::TimerBase::start();
  }
  if (v5)
  {
    int v12 = *((_DWORD *)v5 + 2);
    if (v12)
    {
      *((_DWORD *)v5 + 2) = v12 - 1;
      return result;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1E136EE94);
  }
  return result;
}

uint64_t *WebResourceLoadScheduler::HostInformation::remove(uint64_t *this, WebCore::ResourceLoader *a2)
{
  int v3 = this + 22;
  uint64_t v2 = this[22];
  if (v2)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    unint64_t v5 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
    BOOL v9 = *(WebCore::ResourceLoader **)(v2 + 8 * v8);
    if (v9 != a2)
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        BOOL v9 = *(WebCore::ResourceLoader **)(v2 + 8 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_6;
        }
      }
      goto LABEL_7;
    }
LABEL_6:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      uint64_t v25 = 8 * v8;
      this = *(uint64_t **)(v2 + v25);
      *(void *)(v2 + v25) = -1;
      if (this)
      {
        if (*((_DWORD *)this + 4) == 1)
        {
          this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
          ++*(_DWORD *)(*v3 - 16);
          uint64_t v26 = *v3;
          if (*v3)
          {
LABEL_48:
            --*(_DWORD *)(v26 - 12);
            uint64_t v27 = *v3;
            if (!*v3) {
              return this;
            }
            goto LABEL_54;
          }
LABEL_53:
          *(_DWORD *)(v26 - 12) = -1;
          uint64_t v27 = *v3;
          if (!*v3) {
            return this;
          }
LABEL_54:
          unsigned int v28 = 6 * *(_DWORD *)(v27 - 12);
          unsigned int v29 = *(_DWORD *)(v27 - 4);
          if (v28 < v29 && v29 >= 9)
          {
            return WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(v3, v29 >> 1, 0);
          }
          return this;
        }
        --*((_DWORD *)this + 4);
      }
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v26 = *v3;
      if (*v3) {
        goto LABEL_48;
      }
      goto LABEL_53;
    }
  }
LABEL_7:
  unint64_t v11 = this[2];
  uint64_t v12 = this[3];
  uint64_t v13 = (unint64_t *)(this + 2);
  if (v11 != v12)
  {
    uint64_t v14 = this[4];
    unint64_t v15 = this[2];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      unint64_t v16 = *((unsigned int *)this + 10);
      v15 += v16 + 1;
      do
        v15 -= v16;
      while (v15 >= v16);
      if (v12 == v15) {
        goto LABEL_13;
      }
    }
LABEL_38:
    *(void *)(v14 + 8 * v15) = 0;
    if (a2)
    {
      if (*((_DWORD *)a2 + 4) == 1)
      {
        (*(void (**)(WebCore::ResourceLoader *))(*(void *)a2 + 8))(a2);
        unint64_t v11 = *v13;
        if (*v13 > v15) {
          goto LABEL_42;
        }
LABEL_51:
        this = (uint64_t *)memmove((void *)(v14 + 8 * v11 + 8), (const void *)(v14 + 8 * v11), 8 * v15 - 8 * v11);
        unint64_t *v13 = (*v13 + 1) % *((unsigned int *)v13 + 6);
        return this;
      }
      --*((_DWORD *)a2 + 4);
    }
    if (v11 > v15)
    {
LABEL_42:
      this = (uint64_t *)memmove((void *)(v14 + 8 * v15), (const void *)(v14 + 8 * v15 + 8), 8 * v13[1] - (8 * v15 + 8));
      v13[1] = (v13[1] + *((unsigned int *)v13 + 6) - 1) % *((unsigned int *)v13 + 6);
      return this;
    }
    goto LABEL_51;
  }
LABEL_13:
  unint64_t v11 = this[6];
  uint64_t v17 = this[7];
  uint64_t v13 = (unint64_t *)(this + 6);
  if (v11 != v17)
  {
    uint64_t v14 = this[8];
    unint64_t v15 = this[6];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      unint64_t v18 = *((unsigned int *)this + 18);
      v15 += v18 + 1;
      do
        v15 -= v18;
      while (v15 >= v18);
      if (v17 == v15) {
        goto LABEL_19;
      }
    }
    goto LABEL_38;
  }
LABEL_19:
  unint64_t v11 = this[10];
  uint64_t v19 = this[11];
  uint64_t v13 = (unint64_t *)(this + 10);
  if (v11 != v19)
  {
    uint64_t v14 = this[12];
    unint64_t v15 = this[10];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      unint64_t v20 = *((unsigned int *)this + 26);
      v15 += v20 + 1;
      do
        v15 -= v20;
      while (v15 >= v20);
      if (v19 == v15) {
        goto LABEL_25;
      }
    }
    goto LABEL_38;
  }
LABEL_25:
  unint64_t v11 = this[14];
  uint64_t v21 = this[15];
  uint64_t v13 = (unint64_t *)(this + 14);
  if (v11 != v21)
  {
    uint64_t v14 = this[16];
    unint64_t v15 = this[14];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      unint64_t v22 = *((unsigned int *)this + 34);
      v15 += v22 + 1;
      do
        v15 -= v22;
      while (v15 >= v22);
      if (v21 == v15) {
        goto LABEL_31;
      }
    }
    goto LABEL_38;
  }
LABEL_31:
  unint64_t v11 = this[18];
  uint64_t v23 = this[19];
  uint64_t v13 = (unint64_t *)(this + 18);
  if (v11 != v23)
  {
    uint64_t v14 = this[20];
    unint64_t v15 = this[18];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      unint64_t v24 = *((unsigned int *)this + 42);
      v15 += v24 + 1;
      do
        v15 -= v24;
      while (v15 >= v24);
      if (v23 == v15) {
        return this;
      }
    }
    goto LABEL_38;
  }
  return this;
}

uint64_t WebResourceLoadScheduler::isResourceLoadFinished(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a2 + 384);
  if (v4)
  {
    unint64_t v6 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 336));
    WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v12, a1, v6, 1);
    uint64_t v7 = v12;
    if (v12)
    {
      int v8 = *(_DWORD *)(v12 + 8);
      if (!v8)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v12 + 8) = v8 - 1;
    }
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 16))(v9, v7 == 0);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 1);
  }
  int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
  return v10(v9);
}

void WebResourceLoadScheduler::setDefersLoading(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v4 = (char *)a2 + 768;
    if ((WebCore::ResourceRequestBase::isNull((WebCore::ResourceLoader *)((char *)a2 + 768)) & 1) == 0)
    {
      uint64_t v23 = 0;
      WTF::URL::invalidate((WTF::URL *)&v23);
      unint64_t v5 = v23;
      if (v23) {
        *(_DWORD *)v23 += 2;
      }
      long long v44 = v24;
      long long v45 = v25;
      unsigned int v43 = v5;
      v46[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v46);
      v46[5] = *MEMORY[0x1E4FB64E0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v46[6] = v57;
      WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)v47);
      v47[4] = 0;
      v47[5] = 0;
      int v48 = 0x10000;
      char v49 = 4;
      uint64_t v50 = 0;
      uint64_t v7 = (_DWORD *)*MEMORY[0x1E4F30980];
      if (*MEMORY[0x1E4F30980])
      {
        *v7 += 2;
        char v8 = v49 | 2;
      }
      else
      {
        char v8 = 6;
      }
      unsigned int v51 = v7;
      uint64_t v52 = 0;
      char v53 = 0;
      char v54 = 0;
      char v55 = v55 & 0xE0 | 5;
      char v49 = v8;
      uint64_t v9 = v23;
      uint64_t v23 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v6);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v56 = 0;
      int v10 = (WTF::StringImpl *)*((void *)a2 + 96);
      *((void *)a2 + 96) = 0;
      uint64_t v23 = v10;
      long long v11 = *(_OWORD *)((char *)a2 + 792);
      long long v24 = *(_OWORD *)((char *)a2 + 776);
      long long v25 = v11;
      *((_DWORD *)a2 + 194) = v24 & 0xFFFFFFFE;
      uint64_t v12 = *((void *)a2 + 101);
      *((void *)a2 + 101) = 0;
      uint64_t v26 = v12;
      long long v13 = *((_OWORD *)a2 + 52);
      long long v27 = *((_OWORD *)a2 + 51);
      long long v28 = v13;
      *((_DWORD *)a2 + 204) = v27 & 0xFFFFFFFE;
      uint64_t v29 = *((void *)a2 + 106);
      long long v14 = *(_OWORD *)((char *)a2 + 856);
      *(_OWORD *)((char *)a2 + 8++*(_DWORD *)(this + 56) = 0u;
      long long v30 = v14;
      *(void *)&long long v14 = *((void *)a2 + 109);
      *((void *)a2 + 109) = 0;
      uint64_t v31 = v14;
      uint64_t v15 = *((void *)a2 + 110);
      *((void *)a2 + 110) = 0;
      uint64_t v32 = v15;
      *(void *)&long long v14 = *((void *)a2 + 111);
      *((void *)a2 + 111) = 0;
      uint64_t v33 = v14;
      uint64_t v16 = *((void *)a2 + 112);
      *((void *)a2 + 112) = 0;
      uint64_t v34 = v16;
      *(void *)&long long v14 = *((void *)a2 + 113);
      *((void *)a2 + 113) = 0;
      uint64_t v35 = v14;
      LODWORD(v16) = *((_DWORD *)a2 + 228);
      char v37 = *((unsigned char *)a2 + 916);
      int v36 = v16;
      long long v17 = *(_OWORD *)((char *)a2 + 920);
      *(_OWORD *)((char *)a2 + 920) = 0u;
      long long v38 = v17;
      uint64_t v18 = *((void *)a2 + 117);
      *((void *)a2 + 117) = 0;
      uint64_t v19 = *((void *)a2 + 118);
      char v41 = *((unsigned char *)a2 + 952);
      uint64_t v39 = v18;
      uint64_t v40 = v19;
      uint64_t v20 = *((void *)a2 + 120);
      *((void *)a2 + 120) = 0;
      uint64_t v42 = v20;
      WebCore::ResourceRequest::operator=((uint64_t)v4, (uint64_t)&v43);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v43, v21);
      WebCore::ResourceRequest::operator=((uint64_t)a2 + 336, (uint64_t)&v23);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v23, v22);
      WebCore::ResourceLoader::start(a2);
    }
  }
}

uint64_t WebResourceLoadScheduler::crossOriginRedirectReceived(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2, const WTF::URL *a3)
{
  unint64_t v6 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
  uint64_t result = (uint64_t)WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v14, (uint64_t)this, v6, 1);
  uint64_t v8 = v14;
  if (v14)
  {
    WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v13, (uint64_t)this, a3, 0);
    uint64_t v9 = v13;
    uint64_t result = WTF::equal(*(WTF **)(v8 + 184), *(const WTF::StringImpl **)(v13 + 184), v10);
    if ((result & 1) == 0)
    {
      if (a2) {
        ++*((_DWORD *)a2 + 4);
      }
      uint64_t v16 = a2;
      WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::add(v15, (uint64_t *)(v9 + 176), &v16);
      if (v16)
      {
        if (*((_DWORD *)v16 + 4) == 1) {
          (*(void (**)(void))(*(void *)v16 + 8))();
        }
        else {
          --*((_DWORD *)v16 + 4);
        }
      }
      uint64_t result = (uint64_t)WebResourceLoadScheduler::HostInformation::remove((uint64_t *)v8, a2);
    }
    int v11 = *(_DWORD *)(v9 + 8);
    if (!v11 || (*(_DWORD *)(v9 + 8) = v11 - 1, (int v12 = *(_DWORD *)(v8 + 8)) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1E136F738);
    }
    *(_DWORD *)(v8 + 8) = v12 - 1;
  }
  return result;
}

uint64_t WebResourceLoadScheduler::suspendPendingRequests(uint64_t this)
{
  return this;
}

uint64_t WebResourceLoadScheduler::resumePendingRequests(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 80) - 1;
  *(_DWORD *)(this + ++*(_DWORD *)(this + 80) = v1;
  if (!v1)
  {
    if ((uint64_t v2 = *(void *)(this + 8)) != 0 && *(_DWORD *)(v2 - 12)
      || (int v3 = *(void **)(this + 16), (v4 = v3[22]) != 0) && *(_DWORD *)(v4 - 12)
      || v3[2] != v3[3]
      || v3[6] != v3[7]
      || v3[10] != v3[11]
      || v3[14] != v3[15]
      || v3[18] != v3[19])
    {
      if ((*(void *)(this + 56) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(void *)(this + 56) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        return WebCore::TimerBase::start();
      }
    }
  }
  return this;
}

void WebResourceLoadScheduler::HostInformation::~HostInformation(WebResourceLoadScheduler::HostInformation *this, StringImpl *a2)
{
  int v3 = (WTF::StringImpl *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = (_DWORD **)*((void *)this + 22);
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  uint64_t v4 = (_DWORD **)*((void *)this + 22);
  if (!v4) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v5 = *((unsigned int *)v4 - 1);
  if (v5)
  {
    unint64_t v6 = v4;
    do
    {
      uint64_t v7 = *v6;
      if (*v6 != (_DWORD *)-1)
      {
        WTF::URL *v6 = 0;
        if (v7)
        {
          if (v7[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[4];
          }
        }
      }
      ++v6;
      --v5;
    }
    while (v5);
  }
  WTF::fastFree((WTF *)(v4 - 2), a2);
LABEL_16:
  WTF::Deque<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,0ul>::~Deque((unint64_t *)this + 18, a2);
  WTF::Deque<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,0ul>::~Deque((unint64_t *)this + 14, v8);
  WTF::Deque<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,0ul>::~Deque((unint64_t *)this + 10, v9);
  WTF::Deque<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,0ul>::~Deque((unint64_t *)this + 6, v10);
  WTF::Deque<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,0ul>::~Deque((unint64_t *)this + 2, v11);
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    uint64_t v13 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v13)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t WebResourceLoadScheduler::startPingLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11 = WTF::fastMalloc((WTF *)0x120);
  WebCore::FrameLoader::networkingContext(*(WebCore::FrameLoader **)(a2 + 280));
  BOOL v12 = *(unsigned char *)(a5 + 2) != 0;
  BOOL v13 = *(unsigned char *)(a5 + 4) == 0;
  uint64_t v14 = *a7;
  *a7 = 0;
  WebCore::ResourceHandleClient::ResourceHandleClient((WebCore::ResourceHandleClient *)v11);
  *(void *)uint64_t v11 = &unk_1F3C79BF8;
  *(void *)(v11 + 8) = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData(v11 + 16, a3);
  uint64_t v15 = *(_DWORD **)(a3 + 152);
  if (v15) {
    *v15 += 2;
  }
  *(void *)(v11 + 168) = v15;
  uint64_t v16 = *(_DWORD **)(a3 + 160);
  if (v16) {
    *v16 += 2;
  }
  *(void *)(v11 + 176) = v16;
  long long v17 = *(_DWORD **)(a3 + 168);
  if (v17) {
    ++*v17;
  }
  *(void *)(v11 + 184) = v17;
  uint64_t v18 = *(void *)(a3 + 176);
  *(unsigned char *)(v11 + 200) = *(unsigned char *)(a3 + 184);
  *(void *)(v11 + 192) = v18;
  uint64_t v19 = *(const void **)(a3 + 192);
  *(void *)(v11 + 208) = v19;
  if (v19) {
    CFRetain(v19);
  }
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v11 + 216));
  *(void *)(v11 + 216) = &unk_1F3C79440;
  uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v20 = &unk_1F3C79C98;
  v20[1] = PingHandle::timeoutTimerFired;
  v20[2] = 0;
  v20[3] = v11;
  *(void *)(v11 + 264) = v20;
  *(unsigned char *)(v11 + 272) = v12;
  *(unsigned char *)(v11 + 273) = v13;
  *(void *)(v11 + 2++*(_DWORD *)(this + 80) = v14;
  WebCore::ResourceHandle::create();
  uint64_t v21 = *(_DWORD **)(v11 + 8);
  *(void *)(v11 + 8) = v23;
  if (v21)
  {
    if (v21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v21 + 48))(v21);
    }
    else {
      --v21[2];
    }
  }
  return WebCore::TimerBase::start();
}

uint64_t WebResourceLoadScheduler::isOnLine(WebResourceLoadScheduler *this)
{
  uint64_t v1 = WebCore::NetworkStateNotifier::singleton(this);
  return MEMORY[0x1F416FB40](v1);
}

uint64_t WebResourceLoadScheduler::addOnlineStateChangeListener(WebCore::NetworkStateNotifier *a1, uint64_t a2)
{
  uint64_t v3 = WebCore::NetworkStateNotifier::singleton(a1);
  return MEMORY[0x1F416FB38](v3, a2);
}

uint64_t WebCore::WebSocketChannel::resumeTimerFired(uint64_t this, WebCore::SocketStreamHandle *a2)
{
  uint64_t v2 = this;
  ++*(_DWORD *)(this + 8);
  while (!*(unsigned char *)(v2 + 152))
  {
    uint64_t v3 = *(void *)(v2 + 56);
    if (!v3) {
      break;
    }
    if (!*(void *)(v3 + 8) || !*(_DWORD *)(v2 + 92)) {
      goto LABEL_9;
    }
    this = WebCore::WebSocketChannel::processBuffer((WebCore::WebSocketChannel *)v2);
    if ((this & 1) == 0)
    {
      if (*(unsigned char *)(v2 + 152)) {
        break;
      }
      uint64_t v3 = *(void *)(v2 + 56);
      if (!v3) {
        break;
      }
LABEL_9:
      if (*(void *)(v3 + 8) && *(unsigned char *)(v2 + 216) && *(void *)(v2 + 72)) {
        this = WebCore::WebSocketChannel::didCloseSocketStream((WebCore::WebSocketChannel *)v2, a2);
      }
      break;
    }
  }
  if (*(_DWORD *)(v2 + 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v2);
    return WTF::fastFree(v4, v5);
  }
  else
  {
    --*(_DWORD *)(v2 + 8);
  }
  return this;
}

uint64_t WebCore::WebSocketChannel::closingTimerFired(uint64_t this)
{
  uint64_t v1 = *(atomic_uint **)(this + 72);
  if (v1)
  {
    uint64_t v2 = (unsigned int *)(v1 + 2);
    atomic_fetch_add(v1 + 2, 1u);
    this = (*(uint64_t (**)(atomic_uint *))(*(void *)v1 + 40))(v1);
    v1[16] = 3;
    if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v3 = &unk_1F3C79D48;
      v3[1] = v2;
      uint64_t v4 = (uint64_t)v3;
      WTF::ensureOnMainThread();
      this = v4;
      if (v4) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return this;
}

void WebCore::WebSocketChannel::~WebSocketChannel(WebCore::WebSocketChannel *this)
{
  uint64_t v2 = (atomic_uint *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (!v2 || atomic_fetch_add(v2 + 2, 0xFFFFFFFF) != 1)
  {
    uint64_t v3 = (WebCore::WebSocketInflater *)*((void *)this + 43);
    *((void *)this + 43) = 0;
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  atomic_store(1u, (unsigned int *)v2 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
  uint64_t v3 = (WebCore::WebSocketInflater *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v3)
  {
LABEL_4:
    WebCore::WebSocketInflater::~WebSocketInflater(v3);
    WTF::fastFree(v4, v5);
  }
LABEL_5:
  unint64_t v6 = (WebCore::WebSocketDeflater *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v6)
  {
    WebCore::WebSocketDeflater::~WebSocketDeflater(v6);
    WTF::fastFree(v7, v8);
  }
  uint64_t v9 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 64))(v9);
  }
  unint64_t v10 = *((void *)this + 34);
  unint64_t v11 = *((void *)this + 35);
  uint64_t v12 = *((void *)this + 36);
  if (v10 <= v11)
  {
    WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(v12 + 8 * v10, (uint64_t *)(v12 + 8 * v11));
    uint64_t v14 = (WTF *)*((void *)this + 36);
    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(v12, (uint64_t *)(v12 + 8 * v11));
  WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(*((void *)this + 36) + 8 * *((void *)this + 34), (uint64_t *)(*((void *)this + 36) + 8 * *((unsigned int *)this + 74)));
  uint64_t v14 = (WTF *)*((void *)this + 36);
  if (v14)
  {
LABEL_13:
    *((void *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v14, v13);
  }
LABEL_14:
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (!v15) {
    goto LABEL_17;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_17:
    uint64_t v16 = (WTF *)*((void *)this + 30);
    if (!v16) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v15, v13);
  uint64_t v16 = (WTF *)*((void *)this + 30);
  if (v16)
  {
LABEL_18:
    *((void *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v16, v13);
  }
LABEL_19:
  *((void *)this + 20) = &unk_1F3C79440;
  uint64_t v17 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  WebCore::TimerBase::~TimerBase((WebCore::WebSocketChannel *)((char *)this + 160));
  *((void *)this + 12) = &unk_1F3C79440;
  uint64_t v18 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WebCore::TimerBase::~TimerBase((WebCore::WebSocketChannel *)((char *)this + 96));
  uint64_t v20 = (WTF *)*((void *)this + 10);
  if (v20)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v20, v19);
  }
  uint64_t v21 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v21)
  {
    unint64_t v22 = (unsigned int *)(v21 + 8);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      long long v30 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v30 = &unk_1F3C79D48;
      v30[1] = v22;
      uint64_t v33 = v30;
      WTF::ensureOnMainThread();
      if (v33) {
        (*(void (**)(void *))(*v33 + 8))(v33);
      }
    }
  }
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v23)
  {
    long long v24 = (WTF *)MEMORY[0x1E4E46C60]();
    WTF::fastFree(v24, v25);
  }
  uint64_t v26 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v26);
    WTF::fastFree((WTF *)v26, v19);
    uint64_t v27 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (!v27) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v27 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (!v27) {
      goto LABEL_33;
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v27);
    uint64_t v31 = *(unsigned int *)(v27 + 28);
    if (v31) {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (StringImpl *)(*(void *)(v27 + 16) + 32 * v31));
    }
    uint64_t v32 = *(WTF **)(v27 + 16);
    if (v32)
    {
      *(void *)(v27 + 16) = 0;
      *(_DWORD *)(v27 + 24) = 0;
      WTF::fastFree(v32, v19);
    }
    WTF::fastFree((WTF *)v27, v19);
  }
LABEL_33:
  uint64_t v28 = *((void *)this + 5);
  if (v28)
  {
    *(void *)(v28 + 8) = 0;
    uint64_t v29 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v29)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v19);
      }
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebCore::WebSocketChannel::~WebSocketChannel(this);
  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebCore::WebSocketChannel::~WebSocketChannel(WebCore::WebSocketChannel *this)
{
}

{
  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

unsigned char *WebCore::WebSocketChannel::connect(WebCore::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  uint64_t v5 = (uint64_t)this;
  WebCore::ThreadableWebSocketChannel::validateURL((uint64_t *)v63, *(WebCore::ThreadableWebSocketChannel **)(*((void *)this + 6) + 8), a2, a3);
  if (!v65) {
    return 0;
  }
  uint64_t v7 = WTF::equal(v63[0], *(const WTF::StringImpl **)a2, v6);
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = *(void *)(v5 + 56);
    if (v9)
    {
      uint64_t v7 = *(void *)(v9 + 8);
      if (v7) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
      }
    }
  }
  if (!v65) {
    goto LABEL_59;
  }
  *(unsigned char *)(v5 + 155) = v64;
  uint64_t v10 = *(void *)(v5 + 48);
  if (v10)
  {
    WebCore::Document::userAgent((uint64_t *)&v62, *(WebCore::Document **)(v10 + 8), (const WTF::URL *)(*(void *)(v10 + 8) + 768));
    uint64_t v11 = *(void *)(v5 + 48);
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  WebCore::Document::userAgent((uint64_t *)&v62, 0, (const WTF::URL *)0x300);
  uint64_t v11 = *(void *)(v5 + 48);
  if (v11) {
LABEL_9:
  }
    uint64_t v11 = *(void *)(v11 + 8);
LABEL_10:
  uint64_t v12 = (WebCore::SecurityOrigin *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 208));
  WebCore::SecurityOrigin::toString((uint64_t *)&v61, v12);
  uint64_t v13 = *(void *)(v5 + 48);
  if (v13)
  {
    uint64_t v7 = WebCore::Document::loader(*(WebCore::Document **)(v13 + 8));
    if (v7) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = WebCore::Document::loader(0);
    if (v7)
    {
LABEL_12:
      int v14 = *(unsigned __int8 *)(v7 + 3535);
      if (!v65) {
        goto LABEL_59;
      }
      goto LABEL_19;
    }
  }
  int v14 = 1;
  if (!v65) {
    goto LABEL_59;
  }
LABEL_19:
  uint64_t v15 = WTF::fastMalloc((WTF *)0x198);
  uint64_t v16 = (WebCore::WebSocketHandshake *)MEMORY[0x1E4E46C50](v15, v63, a3, &v62, &v61, *(unsigned __int8 *)(v5 + 155), v14 != 0);
  uint64_t v17 = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = v16;
  if (v17)
  {
    uint64_t v18 = (WTF *)MEMORY[0x1E4E46C60](v17);
    WTF::fastFree(v18, v19);
    uint64_t v16 = *(WebCore::WebSocketHandshake **)(v5 + 64);
  }
  WebCore::WebSocketHandshake::reset(v16);
  WebCore::WebSocketDeflateFramer::createExtensionProcessor(&v60, (WebCore::WebSocketDeflateFramer *)(v5 + 328));
  WebCore::WebSocketHandshake::addExtensionProcessor();
  uint64_t v20 = v60;
  uint64_t v60 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v8 = *(StringImpl **)(v5 + 224);
  if (v8)
  {
    uint64_t v21 = *(void *)(v5 + 48);
    if (v21)
    {
      uint64_t v7 = *(void *)(v21 + 8);
      if (v65)
      {
LABEL_26:
        WebCore::LegacyWebSocketInspectorInstrumentation::didCreateWebSocket();
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if (v65) {
        goto LABEL_26;
      }
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_27:
  uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8);
  uint64_t v23 = *(void *)(v22 + 544);
  if (!v23
    || (uint64_t v24 = *(void *)(v23 + 8)) == 0
    || (uint64_t v25 = *(void *)(v24 + 24)) == 0
    || (uint64_t v26 = *(WebCore::Page **)(v25 + 8)) == 0)
  {
    uint64_t v5 = 0;
    unsigned int v43 = v61;
    int8x16_t v61 = 0;
    if (!v43) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  ++*(_DWORD *)(v5 + 8);
  WebCore::ScriptExecutionContext::domainForCachePartition((uint64_t *)&v59, (WebCore::ScriptExecutionContext *)(v22 + 208));
  uint64_t v27 = WebCore::WebSocketHandshake::url(*(WebCore::WebSocketHandshake **)(v5 + 64));
  uint64_t v28 = WebCore::Page::sessionID(v26);
  uint64_t v29 = WebCore::FrameLoader::networkingContext(*(WebCore::FrameLoader **)(v24 + 280));
  uint64_t v30 = WTF::fastMalloc((WTF *)0xD8);
  uint64_t v31 = v30;
  *(_DWORD *)(v30 + 8) = 1;
  *(void *)uint64_t v30 = &unk_1F3C79818;
  uint64_t v32 = *(_DWORD **)v27;
  if (*(void *)v27) {
    *v32 += 2;
  }
  *(void *)(v30 + 16) = v32;
  uint64_t v33 = (WTF::URL *)(v30 + 16);
  long long v34 = *(_OWORD *)(v27 + 8);
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(v27 + 24);
  *(_OWORD *)(v31 + 24) = v34;
  *(void *)(v31 + ++*(_DWORD *)(this + 56) = v5;
  *(_DWORD *)(v31 + 64) = 0;
  *(void *)uint64_t v31 = &unk_1F3C79858;
  *(void *)(v31 + 128) = 0;
  *(void *)(v31 + 136) = 0;
  *(void *)(v31 + 120) = 0;
  *(_OWORD *)(v31 + 72) = 0u;
  *(_OWORD *)(v31 + 88) = 0u;
  *(_OWORD *)(v31 + 98) = 0u;
  uint64_t v35 = v59;
  if (v59) {
    *(_DWORD *)v59 += 2;
  }
  *(void *)(v31 + 144) = v35;
  *(void *)(v31 + 152) = 0;
  if (v29) {
    atomic_fetch_add((atomic_uint *volatile)(v29 + 8), 1u);
  }
  *(void *)(v31 + 160) = v29;
  *(_OWORD *)(v31 + 168) = 0uLL;
  *(_OWORD *)(v31 + 184) = 0uLL;
  *(_OWORD *)(v31 + 200) = 0uLL;
  uint64_t result = (unsigned char *)WTF::URL::host(v33);
  unsigned int v38 = v37;
  if ((v37 & 0x80000000) == 0)
  {
    uint64_t v39 = (v37 + 8);
    if (!__OFADD__(v37, 8))
    {
      uint64_t v40 = result;
      if ((v37 & 0xFF00000000) != 0)
      {
        uint64_t result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
        char v41 = v67[0];
        if (v67[0])
        {
          *(_DWORD *)v67[0] = 2;
          *((_DWORD *)v41 + 1) = v39;
          *(void *)((char *)v41 + 20) = 0x2F2F3A7370747468;
          *((void *)v41 + 1) = (char *)v41 + 20;
          *((_DWORD *)v41 + 4) = 4;
          if (!v38) {
            goto LABEL_70;
          }
          uint64_t v42 = (char *)v41 + 28;
          if (v38 == 1)
          {
            unsigned char *v42 = *v40;
            goto LABEL_70;
          }
          size_t v45 = v38;
          goto LABEL_69;
        }
      }
      else if (v39 <= 0x7FFFFFEF)
      {
        uint64_t result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(2 * v39 + 20));
        char v41 = v67[0];
        if (v67[0])
        {
          *(_DWORD *)v67[0] = 2;
          *((_DWORD *)v41 + 1) = v39;
          *(_OWORD *)((char *)v41 + 20) = xmmword_1E149DCC0;
          *((void *)v41 + 1) = (char *)v41 + 20;
          *((_DWORD *)v41 + 4) = 0;
          if (!v38) {
            goto LABEL_70;
          }
          uint64_t v42 = (char *)v41 + 36;
          if (v38 == 1)
          {
            *(_WORD *)uint64_t v42 = *(_WORD *)v40;
            goto LABEL_70;
          }
          size_t v45 = 2 * v38;
LABEL_69:
          memcpy(v42, v40, v45);
LABEL_70:
          CFTypeRef cf = v41;
          MEMORY[0x1E4E441E0](v67, &cf, 0);
          unint64_t v47 = (WTF::StringImpl *)cf;
          CFTypeRef cf = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2) {
              WTF::StringImpl::destroy(v47, v46);
            }
            else {
              *(_DWORD *)v47 -= 2;
            }
          }
          WTF::URL::createCFURL((uint64_t *)&cf, (WTF::URL *)v67);
          CFTypeRef v48 = cf;
          CFTypeRef cf = 0;
          char v49 = *(const void **)(v31 + 136);
          *(void *)(v31 + 136) = v48;
          if (v49)
          {
            CFRelease(v49);
            CFTypeRef v50 = cf;
            CFTypeRef cf = 0;
            if (v50) {
              CFRelease(v50);
            }
          }
          if (WTF::URL::protocolIs() && v28 >= -1 && _CFNetworkIsKnownHSTSHostWithSession())
          {
            atomic_fetch_add((atomic_uint *volatile)(v31 + 8), 1u);
            unsigned int v51 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v51 = &unk_1F3C79D20;
            v51[1] = v31;
            v51[2] = v31;
            CFTypeRef cf = v51;
            WTF::callOnMainThread();
            CFTypeRef v52 = cf;
            CFTypeRef cf = 0;
            if (v52) {
              (*(void (**)(CFTypeRef))(*(void *)v52 + 8))(v52);
            }
          }
          else
          {
            WebCore::SocketStreamHandleImpl::createStreams((WebCore::SocketStreamHandleImpl *)v31);
            if (*(void *)(v31 + 120)) {
              WebCore::SocketStreamHandleImpl::scheduleStreams((CFRunLoopSourceRef *)v31);
            }
          }
          char v53 = v67[0];
          v67[0] = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::destroy(v53, v8);
              uint64_t v54 = *(void *)(v5 + 72);
              *(void *)(v5 + 72) = v31;
              if (!v54)
              {
LABEL_91:
                uint64_t v56 = v59;
                long long v59 = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                  {
                    WTF::StringImpl::destroy(v56, v8);
                    uint64_t v5 = 1;
                    unsigned int v43 = v61;
                    int8x16_t v61 = 0;
                    if (!v43) {
                      goto LABEL_47;
                    }
                    goto LABEL_45;
                  }
                  *(_DWORD *)v56 -= 2;
                }
                uint64_t v5 = 1;
                unsigned int v43 = v61;
                int8x16_t v61 = 0;
                if (!v43) {
                  goto LABEL_47;
                }
LABEL_45:
                if (*(_DWORD *)v43 == 2)
                {
                  WTF::StringImpl::destroy(v43, v8);
                  long long v44 = v62;
                  uint64_t v62 = 0;
                  if (!v44) {
                    goto LABEL_52;
                  }
LABEL_50:
                  if (*(_DWORD *)v44 == 2)
                  {
                    WTF::StringImpl::destroy(v44, v8);
                    if (!v65) {
                      return (unsigned char *)v5;
                    }
                    goto LABEL_55;
                  }
                  *(_DWORD *)v44 -= 2;
LABEL_52:
                  if (!v65) {
                    return (unsigned char *)v5;
                  }
LABEL_55:
                  uint64_t v7 = (uint64_t)v63[0];
                  v63[0] = 0;
                  if (v7)
                  {
                    if (*(_DWORD *)v7 == 2)
                    {
LABEL_60:
                      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v8);
                      return (unsigned char *)v5;
                    }
                    *(_DWORD *)v7 -= 2;
                  }
                  return (unsigned char *)v5;
                }
                *(_DWORD *)v43 -= 2;
LABEL_47:
                long long v44 = v62;
                uint64_t v62 = 0;
                if (!v44) {
                  goto LABEL_52;
                }
                goto LABEL_50;
              }
LABEL_90:
              char v55 = (unsigned int *)(v54 + 8);
              if (atomic_fetch_add((atomic_uint *volatile)(v54 + 8), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v55);
                uint64_t v57 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(void *)uint64_t v57 = &unk_1F3C79D48;
                *((void *)v57 + 1) = v55;
                v67[0] = v57;
                WTF::ensureOnMainThread();
                unint64_t v58 = v67[0];
                v67[0] = 0;
                if (v58) {
                  (*(void (**)(WTF::StringImpl *))(*(void *)v58 + 8))(v58);
                }
              }
              goto LABEL_91;
            }
            *(_DWORD *)v53 -= 2;
          }
          uint64_t v54 = *(void *)(v5 + 72);
          *(void *)(v5 + 72) = v31;
          if (!v54) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

unsigned char *non-virtual thunk to'WebCore::WebSocketChannel::connect(WebCore::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  return WebCore::WebSocketChannel::connect((WebCore::WebSocketChannel *)((char *)this - 16), a2, a3);
}

WebCore::WebSocketHandshake *WebCore::WebSocketChannel::subprotocol@<X0>(WebCore::WebSocketChannel *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (WebCore::WebSocketHandshake *)*((void *)this + 8);
  if (result
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), result == 3)
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::serverWebSocketProtocol((uint64_t *)&v6, *((WebCore::WebSocketHandshake **)this + 8)), (v5 = v6) != 0)|| (v5 = (_DWORD *)*MEMORY[0x1E4F30980]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

WebCore::WebSocketHandshake *non-virtual thunk to'WebCore::WebSocketChannel::subprotocol@<X0>(WebCore::WebSocketChannel *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (WebCore::WebSocketHandshake *)*((void *)this + 6);
  if (result
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), result == 3)
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::serverWebSocketProtocol((uint64_t *)&v6, *((WebCore::WebSocketHandshake **)this + 6)), (v5 = v6) != 0)|| (v5 = (_DWORD *)*MEMORY[0x1E4F30980]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

WebCore::WebSocketHandshake *WebCore::WebSocketChannel::extensions@<X0>(WebCore::WebSocketChannel *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (WebCore::WebSocketHandshake *)*((void *)this + 8);
  if (result
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), result == 3)
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::acceptedExtensions((uint64_t *)&v6, *((WebCore::WebSocketHandshake **)this + 8)), (v5 = v6) != 0)|| (v5 = (_DWORD *)*MEMORY[0x1E4F30980]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

WebCore::WebSocketHandshake *non-virtual thunk to'WebCore::WebSocketChannel::extensions@<X0>(WebCore::WebSocketChannel *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (WebCore::WebSocketHandshake *)*((void *)this + 6);
  if (result
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), result == 3)
    && (uint64_t result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::acceptedExtensions((uint64_t *)&v6, *((WebCore::WebSocketHandshake **)this + 6)), (v5 = v6) != 0)|| (v5 = (_DWORD *)*MEMORY[0x1E4F30980]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::send(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 304))
  {
    WebCore::WebSocketChannel::enqueueTextFrame(a1, a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(a1);
  }
  return 0;
}

uint64_t *WebCore::WebSocketChannel::enqueueTextFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  uint64_t v15 = (WTF *)v5;
  *(void *)uint64_t v5 = 1;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(WTF **)(v5 + 8);
  *(void *)(v5 + 8) = v6;
  if (!v7)
  {
LABEL_4:
    uint64_t result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(a1 + 272), (uint64_t *)&v15);
    uint64_t v10 = v15;
    if (v15) {
      goto LABEL_5;
    }
    return result;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_4;
  }
  WTF::fastFree(v7, v4);
  uint64_t result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(a1 + 272), (uint64_t *)&v15);
  uint64_t v10 = v15;
  if (v15)
  {
LABEL_5:
    uint64_t v11 = (_DWORD *)*((void *)v10 + 4);
    *((void *)v10 + 4) = 0;
    if (v11)
    {
      if (v11[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
        uint64_t v12 = (WTF *)*((void *)v10 + 2);
        if (!v12)
        {
LABEL_10:
          uint64_t v13 = (WTF *)*((void *)v10 + 1);
          *((void *)v10 + 1) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              WTF::fastFree(v13, v9);
              int v14 = v10;
              return (uint64_t *)WTF::fastFree(v14, v9);
            }
            --*(_DWORD *)v13;
          }
          int v14 = v10;
          return (uint64_t *)WTF::fastFree(v14, v9);
        }
LABEL_9:
        *((void *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        WTF::fastFree(v12, v9);
        goto LABEL_10;
      }
      --v11[4];
    }
    uint64_t v12 = (WTF *)*((void *)v10 + 2);
    if (!v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::processOutgoingFrameQueue(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 304);
  if (v1 != 2)
  {
    uint64_t v2 = this;
    ++*(_DWORD *)(this + 8);
    uint64_t v3 = *(void *)(this + 272);
    if (v3 != *(void *)(this + 280))
    {
      uint64_t v4 = MEMORY[0x1E4F309C0];
      uint64_t v5 = (unsigned char *)MEMORY[0x1E4F309B8];
      while (1)
      {
        uint64_t v7 = *(void *)(v2 + 288);
        uint64_t v8 = 8 * v3;
        uint64_t v9 = *(unsigned int **)(v7 + v8);
        *(void *)(v7 + v8) = 0;
        this = WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(*(void *)(v2 + 288) + v8, (uint64_t *)(*(void *)(v2 + 288) + v8 + 8));
        uint64_t v10 = *(void *)(v2 + 272);
        uint64_t v11 = *(unsigned int *)(v2 + 296);
        if (v10 == v11 - 1) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = v10 + 1;
        }
        *(void *)(v2 + 272) = v12;
        unsigned int v13 = v9[1];
        switch(v13)
        {
          case 2u:
            switch(*(_DWORD *)(v2 + 320))
            {
              case 0:
                ++*(_DWORD *)(v2 + 8);
                uint64_t v55 = WTF::fastMalloc((WTF *)0xD0);
                uint64_t v56 = MEMORY[0x1E4E46050](v55, 0, v2 + 32);
                uint64_t v57 = *(void *)(v2 + 312);
                *(void *)(v2 + 312) = v56;
                if (v57) {
                  (*(void (**)(uint64_t))(*(void *)v57 + 64))(v57);
                }
                *(_DWORD *)(v2 + 320) = 1;
                this = WebCore::FileReaderLoader::start();
                uint64_t v58 = *(void *)(v2 + 272);
                uint64_t v59 = *(void *)(v2 + 280);
                if (v58)
                {
                  if (v59 + 1 != v58) {
                    goto LABEL_115;
                  }
                  LODWORD(v60) = *(_DWORD *)(v2 + 296);
                }
                else
                {
                  uint64_t v60 = *(unsigned int *)(v2 + 296);
                  if (v59)
                  {
                    if (v59 != v60 - 1) {
                      goto LABEL_115;
                    }
                  }
                  else if (v60)
                  {
                    goto LABEL_115;
                  }
                }
                uint64_t v71 = v60;
                unint64_t v72 = v60 + ((unint64_t)v60 >> 2);
                if (v72 <= 0xF) {
                  unint64_t v72 = 15;
                }
                if (v72 >= 0x1FFFFFFF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1E1371BFCLL);
                }
                uint64_t v63 = *(char **)(v2 + 288);
                int v73 = v72 + 1;
                unint64_t v74 = (char *)WTF::fastMalloc((WTF *)(8 * (v72 + 1)));
                *(_DWORD *)(v2 + 296) = v73;
                *(void *)(v2 + 288) = v74;
                unint64_t v76 = *(void *)(v2 + 272);
                unint64_t v75 = *(void *)(v2 + 280);
                if (v76 <= v75)
                {
                  this = (uint64_t)memcpy(&v74[8 * v76], &v63[8 * v76], 8 * v75 - 8 * v76);
                }
                else
                {
                  memcpy(v74, v63, 8 * v75);
                  uint64_t v77 = *(void *)(v2 + 272);
                  uint64_t v78 = v77 - v71 + *(unsigned int *)(v2 + 296);
                  this = (uint64_t)memcpy((void *)(*(void *)(v2 + 288) + 8 * v78), &v63[8 * v77], 8 * v71 - 8 * v77);
                  *(void *)(v2 + 272) = v78;
                }
                if (v63) {
                  goto LABEL_112;
                }
                goto LABEL_115;
              case 1:
              case 3:
                uint64_t v54 = *(void *)(v2 + 280);
                if (v12)
                {
                  if (v54 + 1 != v12) {
                    goto LABEL_115;
                  }
                }
                else if (v54)
                {
                  if (v54 != v11 - 1) {
                    goto LABEL_115;
                  }
                }
                else if (v11)
                {
                  goto LABEL_115;
                }
                uint64_t v61 = v11;
                unint64_t v62 = v11 + ((unint64_t)v11 >> 2);
                if (v62 <= 0xF) {
                  unint64_t v62 = 15;
                }
                if (v62 >= 0x1FFFFFFF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1E1371BF4);
                }
                uint64_t v63 = *(char **)(v2 + 288);
                int v64 = v62 + 1;
                char v65 = (char *)WTF::fastMalloc((WTF *)(8 * (v62 + 1)));
                *(_DWORD *)(v2 + 296) = v64;
                *(void *)(v2 + 288) = v65;
                unint64_t v67 = *(void *)(v2 + 272);
                unint64_t v66 = *(void *)(v2 + 280);
                if (v67 <= v66)
                {
                  this = (uint64_t)memcpy(&v65[8 * v67], &v63[8 * v67], 8 * v66 - 8 * v67);
                  if (!v63) {
                    goto LABEL_115;
                  }
                }
                else
                {
                  memcpy(v65, v63, 8 * v66);
                  uint64_t v68 = *(void *)(v2 + 272);
                  uint64_t v69 = v68 - v61 + *(unsigned int *)(v2 + 296);
                  this = (uint64_t)memcpy((void *)(*(void *)(v2 + 288) + 8 * v69), &v63[8 * v68], 8 * v61 - 8 * v68);
                  *(void *)(v2 + 272) = v69;
                  if (!v63) {
                    goto LABEL_115;
                  }
                }
LABEL_112:
                if (*(char **)(v2 + 288) == v63)
                {
                  *(void *)(v2 + 288) = 0;
                  *(_DWORD *)(v2 + 296) = 0;
                }
                this = WTF::fastFree((WTF *)v63, v70);
LABEL_115:
                uint64_t v79 = *(void *)(v2 + 272);
                if (!v79) {
                  uint64_t v79 = *(unsigned int *)(v2 + 296);
                }
                uint64_t v80 = v79 - 1;
                *(void *)(v2 + 272) = v80;
                *(void *)(*(void *)(v2 + 288) + 8 * v++*(_DWORD *)(this + 80) = v9;
                goto LABEL_118;
              case 2:
                WebCore::FileReaderLoader::arrayBufferResult((uint64_t *)&v86, *(WebCore::FileReaderLoader **)(v2 + 312));
                uint64_t v22 = *(void *)(v2 + 312);
                *(void *)(v2 + 312) = 0;
                if (v22) {
                  (*(void (**)(uint64_t))(*(void *)v22 + 64))(v22);
                }
                *(_DWORD *)(v2 + 320) = 0;
                uint64_t v23 = *v9;
                uint64_t v24 = *((void *)v86 + 2);
                if (v24 && (uint64_t v25 = *(void *)(v4 + 56)) != 0 && (*(unsigned char *)(v4 + 34) || !*v5))
                {
                  uint64_t v24 = (v24 & 0x3FFFFFFFFLL) + v25;
                  if (!*((unsigned char *)v86 + 64)) {
                    goto LABEL_40;
                  }
                }
                else if (!*((unsigned char *)v86 + 64))
                {
                  goto LABEL_40;
                }
                uint64_t v26 = *((void *)v86 + 4);
                if (v26)
                {
                  uint64_t v27 = *(void *)(v26 + 32);
                  goto LABEL_41;
                }
LABEL_40:
                uint64_t v27 = *((void *)v86 + 6);
LABEL_41:
                ++*(_DWORD *)(v2 + 8);
                uint64_t v33 = (void *)WTF::fastMalloc((WTF *)0x18);
                *uint64_t v33 = &unk_1F3C79F38;
                v33[1] = v2;
                void v33[2] = v2;
                int v83 = v33;
                WebCore::WebSocketChannel::sendFrame(v2, v23, v24, v27, &v83);
                uint64_t v35 = v83;
                int v83 = 0;
                if (v35) {
                  (*(void (**)(void *))(*v35 + 8))(v35);
                }
                int v36 = v86;
                uint64_t v86 = 0;
                if (!v36) {
                  goto LABEL_29;
                }
                BOOL v37 = *(_DWORD *)v36 == 2;
                *(_DWORD *)v36 -= 2;
                if (!v37) {
                  goto LABEL_29;
                }
                uint64_t v38 = *((void *)v36 + 10);
                if (v38)
                {
                  *(void *)(v38 + 8) = 3;
                  *((void *)v36 + 10) = 0;
                }
                if ((*((unsigned char *)v36 + 72) & 1) == 0) {
                  JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v36 + 72));
                }
                uint64_t v39 = *((void *)v36 + 3);
                if (v39)
                {
                  uint64_t v40 = *((void *)v36 + 2);
                  if (v40)
                  {
                    uint64_t v41 = *(void *)(v4 + 56);
                    if (v41)
                    {
                      if (*(unsigned char *)(v4 + 34) || !*v5) {
                        uint64_t v40 = (v40 & 0x3FFFFFFFFLL) + v41;
                      }
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v40);
                }
                uint64_t v42 = (unsigned int *)*((void *)v36 + 5);
                *((void *)v36 + 5) = 0;
                if (v42 && atomic_fetch_add((atomic_uint *volatile)v42, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v42);
                  unint64_t v47 = (WTF *)MEMORY[0x1E4E43B30](v42, v6, v34);
                  WTF::fastFree(v47, v48);
                  unsigned int v43 = (unsigned int *)*((void *)v36 + 4);
                  *((void *)v36 + 4) = 0;
                  if (!v43) {
                    goto LABEL_62;
                  }
                }
                else
                {
                  unsigned int v43 = (unsigned int *)*((void *)v36 + 4);
                  *((void *)v36 + 4) = 0;
                  if (!v43) {
                    goto LABEL_62;
                  }
                }
                if (atomic_fetch_add((atomic_uint *volatile)v43, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v43);
                  char v49 = (WTF *)MEMORY[0x1E4E43B60](v43, v6, v34);
                  WTF::fastFree(v49, v50);
                }
LABEL_62:
                long long v44 = (unsigned int *)*((void *)v36 + 3);
                *((void *)v36 + 3) = 0;
                if (v44 && atomic_fetch_add((atomic_uint *volatile)v44 + 2, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v44 + 2);
                  (*(void (**)(unsigned int *))(*(void *)v44 + 8))(v44);
                  size_t v45 = (WTF *)*((void *)v36 + 1);
                  if (v45) {
                    goto LABEL_69;
                  }
                }
                else
                {
                  size_t v45 = (WTF *)*((void *)v36 + 1);
                  if (v45) {
                    goto LABEL_69;
                  }
                }
                if (v45)
                {
                  unint64_t v46 = *(WTF **)v45;
                  if (*(void *)v45)
                  {
                    *(void *)size_t v45 = 0;
                    *((_DWORD *)v45 + 2) = 0;
                    WTF::fastFree(v46, v6);
                  }
                  WTF::fastFree(v45, v6);
                }
LABEL_69:
                WTF::fastFree(v36, v6);
                break;
              default:
                goto LABEL_29;
            }
            break;
          case 1u:
            uint64_t v17 = *v9;
            uint64_t v18 = *((void *)v9 + 2);
            uint64_t v19 = v9[7];
            ++*(_DWORD *)(v2 + 8);
            uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v20 = &unk_1F3C79F10;
            v20[1] = v2;
            v20[2] = v2;
            int v84 = v20;
            WebCore::WebSocketChannel::sendFrame(v2, v17, v18, v19, &v84);
            uint64_t v21 = v84;
            int v84 = 0;
            if (v21) {
              goto LABEL_28;
            }
            break;
          case 0u:
            uint64_t v14 = *((void *)v9 + 1);
            if (v14)
            {
              uint64_t v15 = v14 + 16;
              uint64_t v16 = *(void *)(v14 + 8);
            }
            else
            {
              uint64_t v16 = 0;
              uint64_t v15 = 0;
            }
            uint64_t v28 = *v9;
            ++*(_DWORD *)(v2 + 8);
            uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v29 = &unk_1F3C79EE8;
            v29[1] = v2;
            v29[2] = v2;
            unsigned int v85 = v29;
            WebCore::WebSocketChannel::sendFrame(v2, v28, v15, v16, &v85);
            uint64_t v21 = v85;
            unsigned int v85 = 0;
            if (v21) {
LABEL_28:
            }
              (*(void (**)(void *))(*v21 + 8))(v21);
            break;
        }
LABEL_29:
        uint64_t v30 = (_DWORD *)*((void *)v9 + 4);
        *((void *)v9 + 4) = 0;
        if (v30)
        {
          if (v30[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            uint64_t v31 = (WTF *)*((void *)v9 + 2);
            if (!v31) {
              goto LABEL_34;
            }
LABEL_33:
            *((void *)v9 + 2) = 0;
            v9[6] = 0;
            WTF::fastFree(v31, v6);
            goto LABEL_34;
          }
          --v30[4];
        }
        uint64_t v31 = (WTF *)*((void *)v9 + 2);
        if (v31) {
          goto LABEL_33;
        }
LABEL_34:
        uint64_t v32 = (WTF *)*((void *)v9 + 1);
        *((void *)v9 + 1) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1) {
            WTF::fastFree(v32, v6);
          }
          else {
            --*(_DWORD *)v32;
          }
        }
        this = WTF::fastFree((WTF *)v9, v6);
        uint64_t v3 = *(void *)(v2 + 272);
        if (v3 == *(void *)(v2 + 280))
        {
          int v1 = *(_DWORD *)(v2 + 304);
          break;
        }
      }
    }
    if (v1 == 1)
    {
      *(_DWORD *)(v2 + 304) = 2;
      unsigned int v51 = *(atomic_uint **)(v2 + 72);
      if (v51[16] != 3)
      {
        v51[16] = 2;
        this = (*(uint64_t (**)(atomic_uint *))(*(void *)v51 + 16))(v51);
        if (!this)
        {
          CFTypeRef v52 = (unsigned int *)(v51 + 2);
          atomic_fetch_add(v51 + 2, 1u);
          this = (*(uint64_t (**)(atomic_uint *))(*(void *)v51 + 40))(v51);
          v51[16] = 3;
          if (atomic_fetch_add(v51 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v52);
            char v53 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(void *)char v53 = &unk_1F3C79D48;
            *((void *)v53 + 1) = v52;
            uint64_t v86 = v53;
            WTF::ensureOnMainThread();
            this = (uint64_t)v86;
            uint64_t v86 = 0;
            if (this) {
              this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
            }
          }
        }
      }
    }
LABEL_118:
    if (*(_DWORD *)(v2 + 8) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v2);
      return WTF::fastFree(v81, v82);
    }
    else
    {
      --*(_DWORD *)(v2 + 8);
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::send(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 288))
  {
    uint64_t v3 = a1 - 16;
    WebCore::WebSocketChannel::enqueueTextFrame(a1 - 16, a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(v3);
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::send(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (*(_DWORD *)(result + 304)) {
    return 0;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(MEMORY[0x1E4F309C0] + 56);
    if (v6)
    {
      BOOL v7 = *(unsigned char *)(MEMORY[0x1E4F309C0] + 34) || *MEMORY[0x1E4F309B8] == 0;
      uint64_t v8 = (v5 & 0x3FFFFFFFFLL) + v6;
      if (v7) {
        uint64_t v5 = v8;
      }
    }
  }
  if (*(unsigned char *)(a2 + 64) && (uint64_t v9 = *(void *)(a2 + 32)) != 0) {
    unint64_t v10 = *(void *)(v9 + 32);
  }
  else {
    unint64_t v10 = *(void *)(a2 + 48);
  }
  BOOL v11 = v10 >= a3;
  unint64_t v12 = v10 - a3;
  if (v11 && v12 >= a4)
  {
    WebCore::WebSocketChannel::enqueueRawFrame(result, 2, v5 + a3, a4);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(v4);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::enqueueRawFrame(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  uint64_t v9 = result;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  uint64_t v31 = (WTF *)result;
  *(_DWORD *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = 1;
  if (!a4)
  {
    uint64_t v13 = 0;
    goto LABEL_21;
  }
  if (HIDWORD(a4))
  {
    __break(0xC471u);
    return result;
  }
  unint64_t v10 = (char *)a3;
  uint64_t v11 = WTF::fastMalloc((WTF *)a4);
  uint64_t v13 = v11;
  if (a4 < 8)
  {
    uint64_t v14 = (unsigned char *)v11;
    goto LABEL_18;
  }
  uint64_t v14 = (unsigned char *)v11;
  if ((unint64_t)(v11 - a3) < 0x20) {
    goto LABEL_18;
  }
  if (a4 < 0x20)
  {
    unint64_t v15 = 0;
    goto LABEL_13;
  }
  unint64_t v15 = a4 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v16 = (long long *)(a3 + 16);
  uint64_t v17 = (_OWORD *)(v11 + 16);
  unint64_t v18 = a4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v19 = *v16;
    *(v17 - 1) = *(v16 - 1);
    _OWORD *v17 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (a4 != v15)
  {
    if ((a4 & 0x18) == 0)
    {
      unint64_t v10 = (char *)(a3 + v15);
      uint64_t v14 = (unsigned char *)(v11 + v15);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v14 = (unsigned char *)(v11 + (a4 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v10 = (char *)(a3 + (a4 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v20 = (uint64_t *)(a3 + v15);
    uint64_t v21 = (void *)(v11 + v15);
    unint64_t v22 = v15 - (a4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v23 = *v20++;
      *v21++ = v23;
      v22 += 8;
    }
    while (v22);
    if (a4 == (a4 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_19;
    }
    do
    {
LABEL_18:
      char v24 = *v10++;
      *v14++ = v24;
    }
    while (v10 != (char *)(a3 + a4));
  }
LABEL_19:
  uint64_t v25 = *(WTF **)(v9 + 16);
  if (v25)
  {
    *(void *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 24) = 0;
    WTF::fastFree(v25, v12);
  }
LABEL_21:
  *(void *)(v9 + 16) = v13;
  *(_DWORD *)(v9 + 24) = a4;
  *(_DWORD *)(v9 + 28) = a4;
  uint64_t result = (uint64_t)WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(a1 + 272), (uint64_t *)&v31);
  uint64_t v27 = v31;
  if (!v31) {
    return result;
  }
  uint64_t v28 = (_DWORD *)*((void *)v31 + 4);
  *((void *)v31 + 4) = 0;
  if (v28)
  {
    if (v28[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
      uint64_t v29 = (WTF *)*((void *)v27 + 2);
      if (!v29) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    --v28[4];
  }
  uint64_t v29 = (WTF *)*((void *)v27 + 2);
  if (v29)
  {
LABEL_26:
    *((void *)v27 + 2) = 0;
    *((_DWORD *)v27 + 6) = 0;
    WTF::fastFree(v29, v26);
  }
LABEL_27:
  uint64_t v30 = (WTF *)*((void *)v27 + 1);
  *((void *)v27 + 1) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1) {
      WTF::fastFree(v30, v26);
    }
    else {
      --*(_DWORD *)v30;
    }
  }
  return WTF::fastFree(v27, v26);
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::send(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (*(_DWORD *)(result + 288)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(MEMORY[0x1E4F309C0] + 56);
    if (v5)
    {
      BOOL v6 = *(unsigned char *)(MEMORY[0x1E4F309C0] + 34) || *MEMORY[0x1E4F309B8] == 0;
      uint64_t v7 = (v4 & 0x3FFFFFFFFLL) + v5;
      if (v6) {
        uint64_t v4 = v7;
      }
    }
  }
  if (*(unsigned char *)(a2 + 64) && (uint64_t v8 = *(void *)(a2 + 32)) != 0) {
    unint64_t v9 = *(void *)(v8 + 32);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 48);
  }
  BOOL v10 = v9 >= a3;
  unint64_t v11 = v9 - a3;
  if (v10 && v11 >= a4)
  {
    uint64_t v12 = result - 16;
    WebCore::WebSocketChannel::enqueueRawFrame(result - 16, 2, v4 + a3, a4);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(v12);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::send(WebCore::WebSocketChannel *this, WebCore::Blob *a2)
{
  if (!*((_DWORD *)this + 76))
  {
    WebCore::WebSocketChannel::enqueueBlobFrame((uint64_t)this, (uint64_t)a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this);
  }
  return 0;
}

uint64_t *WebCore::WebSocketChannel::enqueueBlobFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  uint64_t v12 = (WTF *)v4;
  *(void *)uint64_t v4 = 0x200000002;
  ++*(_DWORD *)(a2 + 16);
  *(void *)(v4 + 32) = a2;
  uint64_t result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>((uint64_t *)(a1 + 272), (uint64_t *)&v12);
  uint64_t v7 = v12;
  if (v12)
  {
    uint64_t v8 = (_DWORD *)*((void *)v12 + 4);
    *((void *)v12 + 4) = 0;
    if (v8)
    {
      if (v8[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
        unint64_t v9 = (WTF *)*((void *)v7 + 2);
        if (!v9)
        {
LABEL_7:
          BOOL v10 = (WTF *)*((void *)v7 + 1);
          *((void *)v7 + 1) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
            {
              WTF::fastFree(v10, v6);
              unint64_t v11 = v7;
              return (uint64_t *)WTF::fastFree(v11, v6);
            }
            --*(_DWORD *)v10;
          }
          unint64_t v11 = v7;
          return (uint64_t *)WTF::fastFree(v11, v6);
        }
LABEL_6:
        *((void *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = 0;
        WTF::fastFree(v9, v6);
        goto LABEL_7;
      }
      --v8[4];
    }
    unint64_t v9 = (WTF *)*((void *)v7 + 2);
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  return result;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::send(WebCore::WebSocketChannel *this, WebCore::Blob *a2)
{
  if (!*((_DWORD *)this + 72))
  {
    uint64_t v3 = (char *)this - 16;
    WebCore::WebSocketChannel::enqueueBlobFrame((uint64_t)this - 16, (uint64_t)a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)v3);
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::bufferedAmount(WebCore::WebSocketChannel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 16))(*((void *)this + 9));
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::bufferedAmount(WebCore::WebSocketChannel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
}

uint64_t WebCore::WebSocketChannel::close(uint64_t this, int a2, const WTF::String *a3)
{
  if (*(void *)(this + 72))
  {
    uint64_t v3 = this;
    ++*(_DWORD *)(this + 8);
    this = (uint64_t)WebCore::WebSocketChannel::startClosingHandshake((unsigned char *)this, a2, a3);
    if (*(unsigned char *)(v3 + 153)
      && ((*(void *)(v3 + 192) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(void *)(v3 + 192) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      this = WebCore::TimerBase::start();
    }
    if (*(_DWORD *)(v3 + 8) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v3);
      return WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)(v3 + 8);
    }
  }
  return this;
}

unsigned char *WebCore::WebSocketChannel::startClosingHandshake(unsigned char *this, int a2, const WTF::String *a3)
{
  if (this[153]) {
    return this;
  }
  char v3 = a2;
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (a2 == -1)
  {
    unint64_t v6 = 0;
    goto LABEL_27;
  }
  unint64_t v6 = 0;
  if (this[154]) {
    goto LABEL_27;
  }
  __int16 v30 = a2;
  uint64_t v7 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v31, (WTF *)1, (unint64_t)&v30 + 1);
  uint64_t v8 = v31;
  int v10 = v32;
  int v9 = HIDWORD(v32);
  v31[HIDWORD(v32)] = *v7;
  uint64_t v11 = (v9 + 1);
  HIDWORD(v32) = v11;
  if (v11 == v10)
  {
    uint64_t v12 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v31, (WTF *)(v11 + 1), (unint64_t)&v30);
    LODWORD(v11) = HIDWORD(v32);
    uint64_t v8 = v31;
    v31[HIDWORD(v32)] = *v12;
  }
  else
  {
    v8[v11] = v3;
  }
  size_t v13 = (v11 + 1);
  WTF::String::utf8();
  unint64_t v15 = v29;
  if (v29)
  {
    size_t v16 = *((void *)v29 + 1);
    if (!v16)
    {
      int v23 = *(_DWORD *)v29 - 1;
      if (*(_DWORD *)v29 != 1) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
    size_t v17 = v16 + v13;
    if (v16 + v13 > v32)
    {
      unint64_t v18 = v32 + ((unint64_t)v32 >> 2);
      if (v18 >= 0x10) {
        unint64_t v19 = v18 + 1;
      }
      else {
        unint64_t v19 = 16;
      }
      if (v19 <= v17) {
        unint64_t v20 = v16 + v13;
      }
      else {
        unint64_t v20 = v19;
      }
      if (HIDWORD(v20)) {
        goto LABEL_37;
      }
      uint64_t v21 = (char *)WTF::fastMalloc((WTF *)v20);
      uint64_t v31 = v21;
      memcpy(v21, v8, v13);
      if (v21 == v8)
      {
        uint64_t v21 = 0;
        uint64_t v31 = 0;
      }
      WTF::fastFree((WTF *)v8, v22);
      uint64_t v8 = v21;
    }
    if (v17 >= v13)
    {
      memcpy(&v8[v13], (char *)v29 + 16, v16);
      unint64_t v15 = v29;
      LODWORD(v13) = v16 + v13;
      int v23 = *(_DWORD *)v29 - 1;
      if (*(_DWORD *)v29 != 1)
      {
LABEL_23:
        *(_DWORD *)unint64_t v15 = v23;
        goto LABEL_26;
      }
LABEL_25:
      WTF::fastFree(v15, v14);
      goto LABEL_26;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1E137255CLL);
  }
LABEL_26:
  unsigned int v24 = v13;
  uint64_t v5 = (WTF *)v31;
  unint64_t v6 = v24;
LABEL_27:
  WebCore::WebSocketChannel::enqueueRawFrame(v4, 8, (uint64_t)v5, v6);
  ++*(_DWORD *)(v4 + 8);
  this = (unsigned char *)WebCore::WebSocketChannel::processOutgoingFrameQueue(v4);
  if (!*(unsigned char *)(v4 + 216))
  {
    *(unsigned char *)(v4 + 153) = 1;
    uint64_t v26 = *(void *)(v4 + 56);
    if (v26)
    {
      this = *(unsigned char **)(v26 + 8);
      if (this) {
        this = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)this + 56))(this);
      }
    }
  }
  if (*(_DWORD *)(v4 + 8) != 1)
  {
    --*(_DWORD *)(v4 + 8);
    if (!v5) {
      return this;
    }
    return (unsigned char *)WTF::fastFree(v5, v25);
  }
  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v4);
  this = (unsigned char *)WTF::fastFree(v27, v28);
  if (v5) {
    return (unsigned char *)WTF::fastFree(v5, v25);
  }
  return this;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::close(uint64_t this, int a2, const WTF::String *a3)
{
  if (*(void *)(this + 56))
  {
    uint64_t v3 = this;
    uint64_t v4 = (WebCore::WebSocketChannel *)(this - 16);
    ++*(_DWORD *)(this - 8);
    this = (uint64_t)WebCore::WebSocketChannel::startClosingHandshake((unsigned char *)(this - 16), a2, a3);
    if (*(unsigned char *)(v3 + 137)
      && ((*(void *)(v3 + 176) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(void *)(v3 + 176) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      this = WebCore::TimerBase::start();
    }
    if (*(_DWORD *)(v3 - 8) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel(v4);
      return WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 - 8);
    }
  }
  return this;
}

WTF *WebCore::WebSocketChannel::fail(uint64_t a1, uint64_t *a2)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(MEMORY[0x1E4FB6498] + 32);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_8;
  }
  WTF::String::utf8();
  uint64_t v5 = v150 ? (char *)v150 + 16 : 0;
  *(_DWORD *)buf = 134218242;
  *(void *)&buf[4] = a1;
  __int16 v152 = 2080;
  uint8x16_t v153 = v5;
  _os_log_impl(&dword_1E1345000, v4, OS_LOG_TYPE_DEFAULT, "WebSocketChannel %p fail() reason='%s'", buf, 0x16u);
  uint64_t v7 = v150;
  v150 = 0;
  if (!v7)
  {
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 48);
    if (!v8) {
      goto LABEL_71;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_8;
  }
  WTF::fastFree(v7, v6);
  uint64_t v8 = *(void *)(a1 + 48);
  if (!v8) {
    goto LABEL_71;
  }
LABEL_9:
  if (!*(void *)(v8 + 8)) {
    goto LABEL_71;
  }
  WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError();
  int v9 = *(WebCore::WebSocketHandshake **)(a1 + 64);
  if (!v9)
  {
    uint64_t v18 = *a2;
    if (*a2)
    {
      int v19 = *(_DWORD *)(v18 + 4);
      *(_DWORD *)v18 += 2;
      if (v19 < 0) {
        goto LABEL_218;
      }
      unsigned int v20 = v19 + 29;
      if (__OFADD__(v19, 29)) {
        goto LABEL_218;
      }
      int v21 = (*(unsigned __int8 *)(v18 + 16) >> 2) & 1;
    }
    else
    {
      int v21 = 1;
      unsigned int v20 = 29;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((unint64_t)&v150, v20, v21, (int8x16_t *)"WebSocket connection failed: ", 0x1Du, v18);
    if (v150)
    {
      *(void *)buf = v150;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy((WTF::StringImpl *)v18, v22);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      goto LABEL_67;
    }
LABEL_218:
    __break(0xC471u);
LABEL_219:
    JUMPOUT(0x1E13731CCLL);
  }
  int v10 = (WTF::URL *)WebCore::WebSocketHandshake::url(v9);
  WTF::URL::stringCenterEllipsizedToLength(v10);
  uint64_t v13 = *a2;
  if (*a2) {
    *(_DWORD *)v13 += 2;
  }
  if (!v149)
  {
    int v14 = 0;
    if (v13) {
      goto LABEL_15;
    }
LABEL_32:
    int v16 = 10;
    char v17 = v11;
    if (v14 < 0) {
      goto LABEL_217;
    }
    goto LABEL_36;
  }
  int v14 = *((_DWORD *)v149 + 1);
  if (!v13) {
    goto LABEL_32;
  }
LABEL_15:
  int v15 = *(_DWORD *)(v13 + 4);
  if (v15 < 0) {
    goto LABEL_217;
  }
  BOOL v11 = __OFADD__(v15, 10);
  int v16 = v15 + 10;
  char v17 = v11;
  if (v14 < 0) {
    goto LABEL_217;
  }
LABEL_36:
  if (v17) {
    goto LABEL_217;
  }
  BOOL v11 = __OFADD__(v14, v16);
  int v23 = v14 + v16;
  if (v11) {
    goto LABEL_217;
  }
  unsigned int v24 = v23 + 25;
  if (__OFADD__(v23, 25)) {
    goto LABEL_217;
  }
  if (!v149)
  {
    if (!v13)
    {
      if (v23 == -25) {
        goto LABEL_55;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v26 = v24;
      goto LABEL_89;
    }
    goto LABEL_45;
  }
  int v25 = *((_DWORD *)v149 + 4);
  if (v13 && (v25 & 4) != 0)
  {
LABEL_45:
    uint64_t v26 = v24;
    BOOL v27 = v24 == 0;
    uint64_t v28 = (uint64_t)v149;
    if ((*(unsigned char *)(v13 + 16) & 4) == 0)
    {
LABEL_46:
      if (!v27)
      {
        if (v24 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v26 + 20));
          uint64_t v29 = *(void *)buf;
          if (*(void *)buf)
          {
            *(_OWORD *)(*(void *)buf + 20) = xmmword_1E149DCD0;
            *(_DWORD *)uint64_t v29 = 2;
            *(_DWORD *)(v29 + 4) = v24;
            *(void *)(v29 + 8) = v29 + 20;
            *(_DWORD *)(v29 + 16) = 0;
            __int16 v30 = (_WORD *)(v29 + 70);
            *(_OWORD *)(v29 + 36) = xmmword_1E149DCE0;
            *(_OWORD *)(v29 + 52) = xmmword_1E149DCF0;
            *(_WORD *)(v29 + 68) = 39;
            if (!v28)
            {
              uint64_t v51 = 0;
LABEL_157:
              unint64_t v89 = &v30[v51];
              *(_OWORD *)unint64_t v89 = xmmword_1E149DD00;
              *((_DWORD *)v89 + 4) = 2097210;
              if (v13)
              {
                unint64_t v74 = (unint64_t)(v89 + 10);
                unint64_t v12 = *(void *)(v13 + 8);
                uint64_t v90 = *(unsigned int *)(v13 + 4);
                if ((*(unsigned char *)(v13 + 16) & 4) == 0)
                {
                  if (v90)
                  {
                    if (v90 == 1)
                    {
                      *(_WORD *)unint64_t v74 = *(_WORD *)v12;
                      *(void *)buf = v29;
                      goto LABEL_57;
                    }
                    size_t v75 = 2 * v90;
                    goto LABEL_174;
                  }
LABEL_175:
                  *(void *)buf = v29;
                  goto LABEL_57;
                }
                uint64_t v91 = (_WORD *)(v74 + 2 * v90);
                if (v90 >= 0x40)
                {
                  unint64_t v92 = v74 + 2 * (v90 & 0xFFFFFFC0);
                  long long v93 = 0uLL;
                  do
                  {
                    v156.val[0] = *(int8x16_t *)v12;
                    int8x16_t v94 = *(int8x16_t *)(v12 + 16);
                    v158.val[0] = *(int8x16_t *)(v12 + 32);
                    long long v95 = *(_OWORD *)(v12 + 48);
                    v12 += 64;
                    long long v96 = v95;
                    v158.val[1] = 0uLL;
                    v160.val[0] = v94;
                    v156.val[1] = 0uLL;
                    uint64_t v97 = (char *)v74;
                    vst2q_s8(v97, v156);
                    v97 += 32;
                    v160.val[1] = 0uLL;
                    vst2q_s8(v97, v160);
                    uint32x4_t v98 = (char *)(v74 + 64);
                    vst2q_s8(v98, v158);
                    int v99 = (char *)(v74 + 96);
                    vst2q_s8(v99, *(int8x16x2_t *)(&v93 - 1));
                    v74 += 128;
                  }
                  while (v74 != v92);
                  unint64_t v74 = v92;
                }
                if ((_WORD *)v74 != v91)
                {
                  unint64_t v100 = v29 + 2 * (v51 + v90) - v74 + 88;
                  if (v100 < 0xE || v74 < v12 + (v100 >> 1) + 1 && v12 < (v100 & 0xFFFFFFFFFFFFFFFELL) + v74 + 2)
                  {
                    int v101 = (_WORD *)v74;
                    int v102 = (unsigned __int8 *)v12;
                    goto LABEL_171;
                  }
                  uint64_t v104 = (v100 >> 1) + 1;
                  if (v100 >= 0x3E)
                  {
                    unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFE0;
                    uint8x8_t v138 = (uint8x8_t *)(v12 + 16);
                    v139 = (uint16x8_t *)(v74 + 32);
                    unint64_t v140 = v104 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      uint8x16_t v141 = *(uint8x16_t *)v138[-2].i8;
                      uint16x8_t v142 = vmovl_u8(*v138);
                      uint16x8_t v143 = vmovl_high_u8(*(uint8x16_t *)v138->i8);
                      v139[-2] = vmovl_u8(*(uint8x8_t *)v141.i8);
                      v139[-1] = vmovl_high_u8(v141);
                      uint16x8_t *v139 = v142;
                      v139[1] = v143;
                      v139 += 4;
                      v138 += 4;
                      v140 -= 32;
                    }
                    while (v140);
                    if (v104 == v105) {
                      goto LABEL_56;
                    }
                    if ((v104 & 0x18) == 0)
                    {
                      int v102 = (unsigned __int8 *)(v12 + v105);
                      int v101 = (_WORD *)(v74 + 2 * v105);
                      do
                      {
LABEL_171:
                        __int16 v103 = *v102++;
                        *v101++ = v103;
                      }
                      while (v101 != v91);
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    unint64_t v105 = 0;
                  }
                  int v101 = (_WORD *)(v74 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
                  int v102 = (unsigned __int8 *)(v12 + (v104 & 0xFFFFFFFFFFFFFFF8));
                  int8x16_t v144 = (uint8x8_t *)(v12 + v105);
                  int8x16_t v145 = (uint16x8_t *)(v74 + 2 * v105);
                  unint64_t v146 = v105 - (v104 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint8x8_t v147 = *v144++;
                    *v145++ = vmovl_u8(v147);
                    v146 += 8;
                  }
                  while (v146);
                  if (v104 != (v104 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_171;
                  }
                }
              }
LABEL_56:
              *(void *)buf = v29;
              if (!v13) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            unint64_t v12 = *((void *)v149 + 1);
            uint64_t v31 = *((unsigned int *)v149 + 1);
            if ((*((unsigned char *)v149 + 16) & 4) == 0)
            {
              if (v31)
              {
                if (v31 == 1) {
                  _WORD *v30 = *(_WORD *)v12;
                }
                else {
                  memcpy((void *)(v29 + 70), (const void *)v12, 2 * v31);
                }
              }
              goto LABEL_156;
            }
            CFTypeRef v52 = &v30[v31];
            if (v31 < 0x40)
            {
              unint64_t v53 = v29 + 70;
            }
            else
            {
              unint64_t v53 = (unint64_t)&v30[v31 & 0xFFFFFFC0];
              long long v54 = 0uLL;
              uint64_t v55 = (char *)(v29 + 70);
              do
              {
                v155.val[0] = *(int8x16_t *)v12;
                int8x16_t v56 = *(int8x16_t *)(v12 + 16);
                v157.val[0] = *(int8x16_t *)(v12 + 32);
                long long v57 = *(_OWORD *)(v12 + 48);
                v12 += 64;
                long long v58 = v57;
                v157.val[1] = 0uLL;
                v159.val[0] = v56;
                v155.val[1] = 0uLL;
                uint64_t v59 = v55;
                vst2q_s8(v59, v155);
                v59 += 32;
                v159.val[1] = 0uLL;
                vst2q_s8(v59, v159);
                uint64_t v60 = v55 + 64;
                vst2q_s8(v60, v157);
                uint64_t v61 = v55 + 96;
                vst2q_s8(v61, *(int8x16x2_t *)(&v54 - 1));
                v55 += 128;
              }
              while (v55 != (char *)v53);
            }
            if ((_WORD *)v53 == v52)
            {
LABEL_156:
              uint64_t v51 = *((unsigned int *)v149 + 1);
              goto LABEL_157;
            }
            unint64_t v69 = v29 + 2 * v31 - v53 + 68;
            if (v69 < 0xE
              || (v53 < v12 + (v69 >> 1) + 1 ? (BOOL v70 = v12 >= (v69 & 0xFFFFFFFFFFFFFFFELL) + v53 + 2) : (BOOL v70 = 1), !v70))
            {
              uint64_t v86 = (_WORD *)v53;
              unint64_t v87 = (unsigned __int8 *)v12;
              goto LABEL_153;
            }
            uint64_t v71 = (v69 >> 1) + 1;
            if (v69 >= 0x3E)
            {
              unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v128 = (uint8x8_t *)(v12 + 16);
              v129 = (uint16x8_t *)(v53 + 32);
              unint64_t v130 = v71 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v131 = *(uint8x16_t *)v128[-2].i8;
                uint16x8_t v132 = vmovl_u8(*v128);
                uint16x8_t v133 = vmovl_high_u8(*(uint8x16_t *)v128->i8);
                v129[-2] = vmovl_u8(*(uint8x8_t *)v131.i8);
                v129[-1] = vmovl_high_u8(v131);
                uint16x8_t *v129 = v132;
                v129[1] = v133;
                v129 += 4;
                v128 += 4;
                v130 -= 32;
              }
              while (v130);
              if (v71 == v72) {
                goto LABEL_156;
              }
              if ((v71 & 0x18) == 0)
              {
                unint64_t v87 = (unsigned __int8 *)(v12 + v72);
                uint64_t v86 = (_WORD *)(v53 + 2 * v72);
                do
                {
LABEL_153:
                  __int16 v88 = *v87++;
                  *v86++ = v88;
                }
                while (v86 != v52);
                goto LABEL_156;
              }
            }
            else
            {
              unint64_t v72 = 0;
            }
            uint64_t v86 = (_WORD *)(v53 + 2 * (v71 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v87 = (unsigned __int8 *)(v12 + (v71 & 0xFFFFFFFFFFFFFFF8));
            uint16x8_t v134 = (uint8x8_t *)(v12 + v72);
            v135 = (uint16x8_t *)(v53 + 2 * v72);
            unint64_t v136 = v72 - (v71 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v137 = *v134++;
              *v135++ = vmovl_u8(v137);
              v136 += 8;
            }
            while (v136);
            if (v71 == (v71 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_156;
            }
            goto LABEL_153;
          }
        }
LABEL_217:
        __break(0xC471u);
        goto LABEL_219;
      }
LABEL_55:
      uint64_t v29 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  uint64_t v26 = v24;
  BOOL v27 = v24 == 0;
  if ((v25 & 4) == 0)
  {
    uint64_t v28 = 1;
    goto LABEL_46;
  }
LABEL_54:
  uint64_t v32 = v149;
  uint64_t v33 = v13;
  if (v27) {
    goto LABEL_55;
  }
LABEL_89:
  if ((v24 & 0x80000000) != 0) {
    goto LABEL_217;
  }
  WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
  uint64_t v29 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_217;
  }
  **(_DWORD **)buf = 2;
  *(_DWORD *)(v29 + 4) = v24;
  *(void *)(v29 + 8) = v29 + 20;
  *(_DWORD *)(v29 + 16) = 4;
  qmemcpy((void *)(v29 + 20), "WebSocket connection to '", 25);
  long long v44 = (unsigned char *)(v29 + 45);
  if (!v32)
  {
    uint64_t v50 = 0;
    goto LABEL_131;
  }
  unint64_t v12 = *((void *)v149 + 1);
  size_t v45 = *((unsigned int *)v149 + 1);
  if ((*((unsigned char *)v149 + 16) & 4) != 0)
  {
    if (v45)
    {
      if (v45 == 1) {
        *long long v44 = *(unsigned char *)v12;
      }
      else {
        memcpy((void *)(v29 + 45), (const void *)v12, v45);
      }
    }
    goto LABEL_130;
  }
  unint64_t v46 = &v44[v45];
  if (v45 < 0x10)
  {
    unint64_t v47 = v29 + 45;
  }
  else
  {
    unint64_t v47 = (unint64_t)&v44[v45 & 0xFFFFFFF0];
    CFTypeRef v48 = (unsigned long long *)(v29 + 45);
    do
    {
      unsigned long long v49 = (unsigned __int128)vld2q_s8((const char *)v12);
      v12 += 32;
      *v48++ = v49;
    }
    while (v48 != (unsigned long long *)v47);
  }
  if ((unsigned char *)v47 != v46)
  {
    size_t v62 = v29 + v45;
    unint64_t v63 = v29 + v45 - v47 + 45;
    if (v63 < 8 || (v47 < v12 - 2 * v47 + 2 * v62 + 90 ? (BOOL v64 = v12 >= v62 + 45) : (BOOL v64 = 1), !v64))
    {
      unint64_t v66 = (unsigned char *)v47;
      unint64_t v67 = (char *)v12;
      goto LABEL_117;
    }
    if (v63 >= 0x20)
    {
      unint64_t v65 = v63 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v106 = (int8x16_t *)(v12 + 32);
      unsigned int v107 = (int8x16_t *)(v47 + 16);
      unint64_t v108 = v63 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v110 = v106[-2];
        int8x16_t v109 = v106[-1];
        int8x16_t v112 = *v106;
        int8x16_t v111 = v106[1];
        v106 += 4;
        v107[-1] = vuzp1q_s8(v110, v109);
        *unsigned int v107 = vuzp1q_s8(v112, v111);
        v107 += 2;
        v108 -= 32;
      }
      while (v108);
      if (v63 == v65) {
        goto LABEL_130;
      }
      if ((v63 & 0x18) == 0)
      {
        unint64_t v67 = (char *)(v12 + 2 * v65);
        unint64_t v66 = (unsigned char *)(v47 + v65);
        do
        {
LABEL_117:
          char v68 = *v67;
          v67 += 2;
          *v66++ = v68;
        }
        while (v66 != v46);
        goto LABEL_130;
      }
    }
    else
    {
      unint64_t v65 = 0;
    }
    unint64_t v66 = (unsigned char *)(v47 + (v63 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v67 = (char *)(v12 + 2 * (v63 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v113 = (int16x8_t *)(v12 + 2 * v65);
    v114 = (int8x8_t *)(v47 + v65);
    unint64_t v115 = v65 - (v63 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v116 = *v113++;
      *v114++ = vmovn_s16(v116);
      v115 += 8;
    }
    while (v115);
    if (v63 == (v63 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_130;
    }
    goto LABEL_117;
  }
LABEL_130:
  uint64_t v50 = *((unsigned int *)v149 + 1);
LABEL_131:
  int v73 = &v44[v50];
  *(void *)int v73 = *(void *)"' failed: ";
  *((_WORD *)v73 + 4) = 8250;
  if (!v33) {
    goto LABEL_56;
  }
  unint64_t v74 = (unint64_t)(v73 + 10);
  unint64_t v12 = *(void *)(v13 + 8);
  size_t v75 = *(unsigned int *)(v13 + 4);
  if ((*(unsigned char *)(v13 + 16) & 4) == 0)
  {
    unint64_t v76 = (unsigned char *)(v74 + v75);
    if (v75 >= 0x10)
    {
      unint64_t v77 = v74 + (v75 & 0xFFFFFFF0);
      do
      {
        unsigned long long v78 = (unsigned __int128)vld2q_s8((const char *)v12);
        v12 += 32;
        *(_OWORD *)unint64_t v74 = v78;
        v74 += 16;
      }
      while (v74 != v77);
      unint64_t v74 = v77;
    }
    if ((unsigned char *)v74 == v76) {
      goto LABEL_56;
    }
    size_t v79 = v50 + v29 + v75;
    unint64_t v80 = v79 - v74 + 55;
    if (v80 < 8 || (v74 < v12 - 2 * v74 + 2 * v79 + 110 ? (BOOL v81 = v12 >= v79 + 55) : (BOOL v81 = 1), !v81))
    {
      int v83 = (unsigned char *)v74;
      int v84 = (char *)v12;
      goto LABEL_150;
    }
    if (v80 >= 0x20)
    {
      unint64_t v82 = v80 & 0xFFFFFFFFFFFFFFE0;
      __int16 v117 = (int8x16_t *)(v12 + 32);
      v118 = (int8x16_t *)(v74 + 16);
      unint64_t v119 = v80 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v121 = v117[-2];
        int8x16_t v120 = v117[-1];
        int8x16_t v123 = *v117;
        int8x16_t v122 = v117[1];
        v117 += 4;
        v118[-1] = vuzp1q_s8(v121, v120);
        int8x16_t *v118 = vuzp1q_s8(v123, v122);
        v118 += 2;
        v119 -= 32;
      }
      while (v119);
      if (v80 == v82) {
        goto LABEL_56;
      }
      if ((v80 & 0x18) == 0)
      {
        int v84 = (char *)(v12 + 2 * v82);
        int v83 = (unsigned char *)(v74 + v82);
        goto LABEL_150;
      }
    }
    else
    {
      unint64_t v82 = 0;
    }
    int v83 = (unsigned char *)(v74 + (v80 & 0xFFFFFFFFFFFFFFF8));
    int v84 = (char *)(v12 + 2 * (v80 & 0xFFFFFFFFFFFFFFF8));
    v124 = (int16x8_t *)(v12 + 2 * v82);
    unint64_t v125 = (int8x8_t *)(v74 + v82);
    unint64_t v126 = v82 - (v80 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v127 = *v124++;
      *v125++ = vmovn_s16(v127);
      v126 += 8;
    }
    while (v126);
    if (v80 == (v80 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_56;
    }
    do
    {
LABEL_150:
      char v85 = *v84;
      v84 += 2;
      *v83++ = v85;
    }
    while (v83 != v76);
    goto LABEL_56;
  }
  if (!v75) {
    goto LABEL_175;
  }
  if (v75 != 1)
  {
LABEL_174:
    memcpy((void *)v74, (const void *)v12, v75);
    goto LABEL_175;
  }
  *(unsigned char *)unint64_t v74 = *(unsigned char *)v12;
  *(void *)buf = v29;
LABEL_57:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v13, (StringImpl *)v12);
    uint64_t v34 = v149;
    if (!v149) {
      goto LABEL_67;
    }
    goto LABEL_62;
  }
  *(_DWORD *)v13 -= 2;
LABEL_59:
  uint64_t v34 = v149;
  if (!v149) {
    goto LABEL_67;
  }
LABEL_62:
  if (*(_DWORD *)v34 == 2) {
    WTF::StringImpl::destroy(v34, (StringImpl *)v12);
  }
  else {
    *(_DWORD *)v34 -= 2;
  }
LABEL_67:
  WebCore::Document::addConsoleMessage();
  int v36 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v35);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
LABEL_71:
  ++*(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 217) = 1;
  if (*(_DWORD *)(a1 + 92)) {
    *(_DWORD *)(a1 + 92) = 0;
  }
  uint64_t result = (WTF *)WebCore::WebSocketDeflateFramer::didFail((WebCore::WebSocketDeflateFramer *)(a1 + 328));
  *(unsigned char *)(a1 + 232) = 0;
  if (*(_DWORD *)(a1 + 248))
  {
    if (*(_DWORD *)(a1 + 252)) {
      *(_DWORD *)(a1 + 252) = 0;
    }
    uint64_t result = *(WTF **)(a1 + 240);
    if (result)
    {
      *(void *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 248) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v38);
    }
  }
  uint64_t v39 = *(void *)(a1 + 56);
  if (v39)
  {
    uint64_t result = *(WTF **)(v39 + 8);
    if (result) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t *))(*(void *)result + 40))(result, a2);
    }
  }
  uint64_t v40 = *(atomic_uint **)(a1 + 72);
  if (v40)
  {
    if (!*(unsigned char *)(a1 + 216))
    {
      uint64_t v41 = (unsigned int *)(v40 + 2);
      atomic_fetch_add(v40 + 2, 1u);
      uint64_t result = (WTF *)(*(uint64_t (**)(atomic_uint *))(*(void *)v40 + 40))(v40);
      v40[16] = 3;
      if (atomic_fetch_add(v40 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        unint64_t v148 = (void *)WTF::fastMalloc((WTF *)0x10);
        *unint64_t v148 = &unk_1F3C79D48;
        v148[1] = v41;
        *(void *)buf = v148;
        WTF::ensureOnMainThread();
        uint64_t result = *(WTF **)buf;
        *(void *)buf = 0;
        if (result) {
          uint64_t result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)a1);
    return (WTF *)WTF::fastFree(v42, v43);
  }
  else
  {
    --*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12)) {
      *(_DWORD *)(result + 12) = 0;
    }
    uint64_t v2 = *(WTF **)result;
    if (*(void *)result)
    {
      *(void *)uint64_t result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

WTF *non-virtual thunk to'WebCore::WebSocketChannel::fail(uint64_t a1, uint64_t *a2)
{
  return WebCore::WebSocketChannel::fail(a1 - 16, a2);
}

unsigned int *WebCore::WebSocketChannel::disconnect(WebCore::WebSocketChannel *this)
{
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    if (v3)
    {
      if (*(void *)(v3 + 8)) {
        WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket();
      }
    }
  }
  uint64_t result = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v2);
    uint64_t v5 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v5);
    uint64_t v8 = *(unsigned int *)(v5 + 28);
    if (v8) {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (StringImpl *)(*(void *)(v5 + 16) + 32 * v8));
    }
    int v9 = *(WTF **)(v5 + 16);
    if (v9)
    {
      *(void *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      WTF::fastFree(v9, v2);
    }
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)v5, v2);
  }
LABEL_9:
  unint64_t v6 = (atomic_uint *)*((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = (unsigned int *)(v6 + 2);
    atomic_fetch_add(v6 + 2, 1u);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 40))(v6);
    v6[16] = 3;
    if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      int v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v10 = &unk_1F3C79D48;
      *((void *)v10 + 1) = v7;
      BOOL v11 = v10;
      WTF::ensureOnMainThread();
      uint64_t result = v11;
      if (v11) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
    }
  }
  return result;
}

unsigned int *non-virtual thunk to'WebCore::WebSocketChannel::disconnect(WebCore::WebSocketChannel *this)
{
  return WebCore::WebSocketChannel::disconnect((WebCore::WebSocketChannel *)((char *)this - 16));
}

uint64_t WebCore::WebSocketChannel::suspend(uint64_t this)
{
  *(unsigned char *)(this + 152) = 1;
  return this;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::suspend(uint64_t this)
{
  *(unsigned char *)(this + 136) = 1;
  return this;
}

uint64_t WebCore::WebSocketChannel::resume(uint64_t this)
{
  *(unsigned char *)(this + 152) = 0;
  if (*(_DWORD *)(this + 92) || *(unsigned char *)(this + 216))
  {
    uint64_t v1 = *(void *)(this + 56);
    if (v1
      && *(void *)(v1 + 8)
      && ((*(void *)(this + 128) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(void *)(this + 128) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::resume(uint64_t this)
{
  *(unsigned char *)(this + 136) = 0;
  if (*(_DWORD *)(this + 76) || *(unsigned char *)(this + 200))
  {
    uint64_t v1 = *(void *)(this + 40);
    if (v1
      && *(void *)(v1 + 8)
      && ((*(void *)(this + 112) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(void *)(this + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

WTF *WebCore::WebSocketChannel::didOpenSocketStream(WTF *this, WebCore::SocketStreamHandle *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = (uint64_t)this;
    if (*((void *)this + 28) && WebCore::LegacyWebSocketInspectorInstrumentation::hasFrontends(this))
    {
      int v19 = *(atomic_uint **)(v4 + 48);
      if (v19)
      {
        uint64_t v20 = *(void *)(v4 + 48);
        atomic_fetch_add(v19, 1u);
      }
      else
      {
        uint64_t v20 = 0;
      }
      int v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v21 = &unk_1F3C79E98;
      *((void *)v21 + 1) = v20;
      BOOL v27 = 0;
      v26[0] = v21;
      WebCore::WebSocketHandshake::clientHandshakeRequest();
      WebCore::LegacyWebSocketInspectorInstrumentation::willSendWebSocketHandshakeRequest();
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v38, v22);
      unsigned int v24 = v26[0];
      v26[0] = 0;
      if (v24) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v24 + 8))(v24);
      }
      WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0::~$_0(&v27, v23);
    }
    WebCore::WebSocketHandshake::clientHandshakeMessage((uint64_t *)&v37, *(WebCore::WebSocketHandshake **)(v4 + 64));
    LOBYTE(v38) = 0;
    char v48 = 0;
    if (*(unsigned char *)(v4 + 155))
    {
      uint64_t v5 = *(void *)(v4 + 48);
      unint64_t v6 = v5 ? *(WebCore::CookieJar **)(v5 + 8) : 0;
      WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies((uint64_t *)v26, *(WebCore::WebSocketHandshake **)(v4 + 64));
      WebCore::CookieJar::cookieRequestHeaderFieldProxy((uint64_t *)&v27, v6, (const WebCore::Document *)v26, v7);
      uint64_t v38 = v27;
      long long v39 = v28;
      long long v40 = v29;
      LODWORD(v28) = v28 & 0xFFFFFFFE;
      __int16 v41 = v30;
      char v42 = v31;
      unsigned int v43 = v32;
      long long v44 = v33;
      long long v45 = v34;
      LODWORD(v33) = v33 & 0xFFFFFFFE;
      *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)((char *)v36 + 9);
      v47[0] = v36[0];
      long long v46 = v35;
      char v48 = 1;
      uint64_t v32 = 0;
      BOOL v27 = 0;
      int v9 = v26[0];
      v26[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    ++*(_DWORD *)(v4 + 8);
    int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v10 = &unk_1F3C79EC0;
    v10[1] = v4;
    v10[2] = v4;
    int v25 = v10;
    if ((*((_DWORD *)a2 + 16) | 2) == 2)
    {
      BOOL v11 = v10;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::WebSocketChannel::fail(v4, (uint64_t *)&v27);
      uint64_t v13 = v27;
      BOOL v27 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v12);
          int v25 = 0;
          goto LABEL_23;
        }
        *(_DWORD *)v13 -= 2;
      }
      int v25 = 0;
    }
    else
    {
      if (v37)
      {
        int v14 = (char *)v37 + 16;
        uint64_t v15 = *((void *)v37 + 1);
      }
      else
      {
        uint64_t v15 = 0;
        int v14 = 0;
      }
      (*(void (**)(WebCore::SocketStreamHandle *, char *, uint64_t, WTF::StringImpl **, void **))(*(void *)a2 + 32))(a2, v14, v15, &v38, &v25);
      BOOL v11 = v25;
      int v25 = 0;
      if (!v11)
      {
LABEL_24:
        if (!v48) {
          goto LABEL_33;
        }
        char v17 = v43;
        unsigned int v43 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v16);
            uint64_t v18 = v38;
            uint64_t v38 = 0;
            if (!v18) {
              goto LABEL_33;
            }
LABEL_31:
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::destroy(v18, v16);
              this = v37;
              BOOL v37 = 0;
              if (!this) {
                return this;
              }
              goto LABEL_34;
            }
            *(_DWORD *)v18 -= 2;
LABEL_33:
            this = v37;
            BOOL v37 = 0;
            if (!this) {
              return this;
            }
LABEL_34:
            if (*(_DWORD *)this == 1) {
              return (WTF *)WTF::fastFree(this, v16);
            }
            --*(_DWORD *)this;
            return this;
          }
          *(_DWORD *)v17 -= 2;
        }
        uint64_t v18 = v38;
        uint64_t v38 = 0;
        if (!v18) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
LABEL_23:
    (*(void (**)(void *))(*v11 + 8))(v11);
    goto LABEL_24;
  }
  return this;
}

void *WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0::~$_0(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(unsigned int *)(v3 + 28);
    if (v4) {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (StringImpl *)(*(void *)(v3 + 16) + 32 * v4));
    }
    uint64_t v5 = *(WTF **)(v3 + 16);
    if (v5)
    {
      *(void *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::didCloseSocketStream(WebCore::WebSocketChannel *this, WebCore::SocketStreamHandle *a2)
{
  if (*((void *)this + 28))
  {
    uint64_t v3 = *((void *)this + 6);
    if (v3)
    {
      if (*(void *)(v3 + 8)) {
        WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket();
      }
    }
  }
  *((unsigned char *)this + 216) = 1;
  if ((*((void *)this + 24) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((void *)this + 24) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::WebSocketChannel *)((char *)this + 160));
  }
  if (*((_DWORD *)this + 76) != 2)
  {
    uint64_t v4 = (void *)((char *)this + 272);
    unint64_t v5 = *((void *)this + 34);
    unint64_t v6 = *((void *)this + 35);
    uint64_t v7 = *((void *)this + 36);
    if (v5 <= v6)
    {
      WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(v7 + 8 * v5, (uint64_t *)(v7 + 8 * v6));
      *uint64_t v4 = 0;
      *((void *)this + 35) = 0;
      int v9 = (WTF *)*((void *)this + 36);
      if (!v9) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(v7, (uint64_t *)(v7 + 8 * v6));
      WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(*((void *)this + 36) + 8 * *((void *)this + 34), (uint64_t *)(*((void *)this + 36) + 8 * *((unsigned int *)this + 74)));
      *uint64_t v4 = 0;
      *((void *)this + 35) = 0;
      int v9 = (WTF *)*((void *)this + 36);
      if (!v9)
      {
LABEL_14:
        *((_DWORD *)this + 76) = 2;
        if (*((_DWORD *)this + 80) == 1)
        {
          WebCore::FileReaderLoader::cancel(*((WebCore::FileReaderLoader **)this + 39));
          WebCore::WebSocketChannel::didFail((uint64_t)this, 0x10u);
        }
        goto LABEL_16;
      }
    }
    *((void *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v9, v8);
    goto LABEL_14;
  }
LABEL_16:
  uint64_t result = *((void *)this + 9);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *((_DWORD *)this + 55) = result;
    if (*((unsigned char *)this + 152)) {
      return result;
    }
    uint64_t v12 = *((void *)this + 7);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      *((void *)this + 7) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v12);
        WTF::fastFree((WTF *)v12, v11);
      }
    }
    else
    {
      uint64_t v13 = 0;
      *((void *)this + 7) = 0;
    }
    uint64_t result = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t v18 = *(unsigned int *)(result + 28);
      unint64_t v22 = (WTF *)result;
      if (v18)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (StringImpl *)(*(void *)(result + 16) + 32 * v18));
        uint64_t result = (uint64_t)v22;
      }
      int v19 = *(WTF **)(result + 16);
      if (v19)
      {
        *(void *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        WTF::fastFree(v19, v11);
        uint64_t result = (uint64_t)v22;
      }
      uint64_t result = WTF::fastFree((WTF *)result, v11);
      uint64_t v14 = *((void *)this + 9);
      *((void *)this + 9) = 0;
      if (!v14) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v14 = *((void *)this + 9);
      *((void *)this + 9) = 0;
      if (!v14)
      {
LABEL_26:
        if (v13) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, char *))(*(void *)v13 + 64))(v13, *((unsigned int *)this + 55), *((unsigned __int8 *)this + 154), *((unsigned __int16 *)this + 128), (char *)this + 264);
        }
        goto LABEL_28;
      }
    }
    uint64_t v15 = (unsigned int *)(v14 + 8);
    if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      uint64_t v20 = v15;
      int v21 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v21 = &unk_1F3C79D48;
      v21[1] = v20;
      uint64_t v23 = (uint64_t)v21;
      WTF::ensureOnMainThread();
      uint64_t result = v23;
      if (v23) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    goto LABEL_26;
  }
LABEL_28:
  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(this);
    return WTF::fastFree(v16, v17);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::didReceiveSocketStreamData(uint64_t this, atomic_uint *a2, void *__src, size_t __n)
{
  uint64_t v4 = this;
  ++*(_DWORD *)(this + 8);
  uint64_t v5 = *(void *)(this + 48);
  if (!v5 || !*(void *)(v5 + 8)) {
    goto LABEL_15;
  }
  if (!__n)
  {
    uint64_t v12 = a2 + 2;
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(this + 56);
  if (!v8 || !*(void *)(v8 + 8))
  {
    *(unsigned char *)(this + 217) = 1;
    uint64_t v12 = a2 + 2;
LABEL_14:
    atomic_fetch_add(v12, 1u);
    this = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 40))(a2);
    a2[16] = 3;
    if (atomic_fetch_add(v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v12);
      int v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v25 = &unk_1F3C79D48;
      *((void *)v25 + 1) = v12;
      uint64_t v26 = v25;
      WTF::ensureOnMainThread();
      this = (uint64_t)v26;
      uint64_t v26 = 0;
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(this + 217)) {
    goto LABEL_15;
  }
  size_t v9 = *(unsigned int *)(this + 92);
  unint64_t v10 = __n + v9;
  if (!__CFADD__(__n, v9))
  {
    unint64_t v16 = *(unsigned int *)(this + 88);
    if (v10 > v16)
    {
      unint64_t v17 = v16 + (v16 >> 2);
      if (v17 >= 0x10) {
        unint64_t v18 = v17 + 1;
      }
      else {
        unint64_t v18 = 16;
      }
      if (v18 <= v10) {
        unint64_t v19 = __n + v9;
      }
      else {
        unint64_t v19 = v18;
      }
      if (HIDWORD(v19)) {
        goto LABEL_41;
      }
      uint64_t v20 = *(void **)(this + 80);
      int v21 = (void *)WTF::fastMalloc((WTF *)v19);
      *(_DWORD *)(v4 + 88) = v19;
      *(void *)(v4 + ++*(_DWORD *)(this + 80) = v21;
      memcpy(v21, v20, v9);
      if (v20)
      {
        if (*(void **)(v4 + 80) == v20)
        {
          *(void *)(v4 + ++*(_DWORD *)(this + 80) = 0;
          *(_DWORD *)(v4 + 88) = 0;
        }
        WTF::fastFree((WTF *)v20, v22);
      }
    }
    unint64_t v23 = *(unsigned int *)(v4 + 92);
    if (v10 >= v23)
    {
      this = (uint64_t)memcpy((void *)(*(void *)(v4 + 80) + v23), __src, __n);
      *(_DWORD *)(v4 + 92) = v10;
      do
      {
        if (*(unsigned char *)(v4 + 152)) {
          break;
        }
        uint64_t v24 = *(void *)(v4 + 56);
        if (!v24) {
          break;
        }
        if (!*(void *)(v24 + 8)) {
          break;
        }
        if (!*(_DWORD *)(v4 + 92)) {
          break;
        }
        this = WebCore::WebSocketChannel::processBuffer((WebCore::WebSocketChannel *)v4);
      }
      while ((this & 1) != 0);
      goto LABEL_15;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x1E1373E40);
  }
  *(unsigned char *)(this + 217) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::WebSocketChannel::fail(v4, (uint64_t *)&v26);
  this = (uint64_t)v26;
  uint64_t v26 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v11);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_15:
  if (*(_DWORD *)(v4 + 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v4);
    return WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)(v4 + 8);
  }
  return this;
}

BOOL WebCore::WebSocketChannel::processBuffer(WebCore::WebSocketChannel *this)
{
  if (!*((unsigned char *)this + 217))
  {
    if (*((unsigned char *)this + 154))
    {
      BOOL v1 = 0;
      *((_DWORD *)this + 23) = 0;
      return v1;
    }
    ++*((_DWORD *)this + 2);
    if (WebCore::WebSocketHandshake::mode(*((WebCore::WebSocketHandshake **)this + 8)))
    {
      if (WebCore::WebSocketHandshake::mode(*((WebCore::WebSocketHandshake **)this + 8)) == 3)
      {
        WebCore::WebSocketFrame::WebSocketFrame();
        long long v93 = 0;
        int8x16_t v94 = 0;
        int v3 = WebCore::WebSocketFrame::parseFrame();
        if (v3 == 1)
        {
          BOOL v1 = 0;
          goto LABEL_40;
        }
        if (v3 == 2)
        {
          WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v93);
          BOOL v1 = 0;
          goto LABEL_40;
        }
        WebCore::WebSocketDeflateFramer::inflate((uint64_t *)&v92, (WebCore::WebSocketChannel *)((char *)this + 328), (WebCore::WebSocketFrame *)&v83);
        if (*((unsigned char *)v92 + 8))
        {
          int v12 = (int)v83;
          if (v83 > 0xA || ((1 << (char)v83) & 0x707) == 0)
          {
            WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v89, "Unrecognized frame opcode: ", 28, v83);
            if (!v89)
            {
              __break(0xC471u);
              JUMPOUT(0x1E1374B08);
            }
LABEL_67:
            WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v89);
            uint64_t v15 = v89;
            unint64_t v89 = 0;
            if (!v15) {
              goto LABEL_38;
            }
            goto LABEL_34;
          }
          char v13 = BYTE6(v83);
          char v14 = HIBYTE(v83);
          if (!(BYTE6(v83) | HIBYTE(v83)))
          {
            if (v84) {
              goto LABEL_25;
            }
            BOOL v33 = (v83 & 0xFFFFFFFE) == 8 || v83 == 10;
            if (v33 && !BYTE4(v83))
            {
              WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v89, "Received fragmented control frame: opcode = ", 45, v83);
              if (!v89)
              {
                __break(0xC471u);
                JUMPOUT(0x1E13742FCLL);
              }
              goto LABEL_67;
            }
            unsigned int v34 = v83 - 8;
            if ((v83 - 8) <= 2)
            {
              if (WebCore::WebSocketFrame::needsExtendedLengthField((WebCore::WebSocketFrame *)__n))
              {
                WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)&v89, __n);
                WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v89);
                uint64_t v15 = v89;
                unint64_t v89 = 0;
                if (!v15)
                {
LABEL_38:
                  BOOL v1 = 0;
                  unint64_t v17 = v92;
                  unint64_t v92 = 0;
                  if (!v17) {
                    goto LABEL_40;
                  }
                  goto LABEL_39;
                }
LABEL_34:
                if (*(_DWORD *)v15 == 2)
                {
                  WTF::StringImpl::destroy(v15, v4);
                  goto LABEL_38;
                }
                *(_DWORD *)v15 -= 2;
                BOOL v1 = 0;
                unint64_t v17 = v92;
                unint64_t v92 = 0;
                if (v17)
                {
LABEL_39:
                  WebCore::InflateResultHolder::~InflateResultHolder(v17);
                  WTF::fastFree(v18, v19);
                }
LABEL_40:
                uint64_t v20 = v93;
                long long v93 = 0;
                if (!v20) {
                  goto LABEL_43;
                }
                int v21 = *(_DWORD *)v20 - 2;
                if (*(_DWORD *)v20 != 2) {
                  goto LABEL_42;
                }
                goto LABEL_100;
              }
              int v12 = (int)v83;
              unsigned int v34 = v83 - 8;
            }
            if (*((unsigned char *)this + 232) && v12 && v34 >= 3)
            {
LABEL_25:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v89);
              uint64_t v15 = v89;
              unint64_t v89 = 0;
              if (!v15) {
                goto LABEL_38;
              }
              goto LABEL_34;
            }
            WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrame();
            switch((int)v83)
            {
              case 0:
                if (!*((unsigned char *)this + 232)) {
                  goto LABEL_25;
                }
                size_t v36 = __n;
                if (__n)
                {
                  BOOL v37 = __src;
                  size_t v38 = *((unsigned int *)this + 63);
                  size_t v39 = __n + v38;
                  if (__n + v38 > *((unsigned int *)this + 62))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((const void **)this + 30, (WTF *)(__n + v38));
                    size_t v38 = *((unsigned int *)this + 63);
                  }
                  if (v39 < v38)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1E1374B10);
                  }
                  memcpy((void *)(*((void *)this + 30) + v38), v37, v36);
                  *((_DWORD *)this + 63) = v39;
                }
                long long v40 = (void *)*((void *)this + 10);
                int v41 = v94 - v40;
                memmove(v40, v94, *((unsigned int *)this + 23) - ((unsigned char *)v94 - (unsigned char *)v40));
                int v42 = *((_DWORD *)this + 23) - v41;
                *((_DWORD *)this + 23) = v42;
                if (!BYTE4(v83)) {
                  goto LABEL_134;
                }
                unsigned int v43 = (WTF::StringImpl *)*((void *)this + 30);
                unint64_t v89 = v43;
                int v44 = *((_DWORD *)this + 62);
                uint64_t v4 = (StringImpl *)*((unsigned int *)this + 63);
                *((void *)this + 30) = 0;
                *((void *)this + 31) = 0;
                int v90 = v44;
                int v91 = (int)v4;
                *((unsigned char *)this + 232) = 0;
                int v45 = *((_DWORD *)this + 59);
                if (v45 == 2)
                {
                  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 7) + 8) + 32))(*(void *)(*((void *)this + 7) + 8), &v89);
                  unsigned int v43 = v89;
                  goto LABEL_170;
                }
                if (v45 != 1) {
                  goto LABEL_170;
                }
                __int16 v88 = 0;
                if (v4)
                {
                  WTF::String::fromUTF8();
                  char v48 = v87;
                  unint64_t v47 = v88;
                  unint64_t v87 = 0;
                  __int16 v88 = v48;
                  if (v47)
                  {
                    int v49 = *(_DWORD *)v47 - 2;
                    if (*(_DWORD *)v47 != 2) {
                      goto LABEL_92;
                    }
                    WTF::StringImpl::destroy(v47, v46);
                    unint64_t v47 = v87;
                    unint64_t v87 = 0;
                    if (v47)
                    {
                      int v49 = *(_DWORD *)v47 - 2;
                      if (*(_DWORD *)v47 != 2)
                      {
LABEL_92:
                        *(_DWORD *)unint64_t v47 = v49;
                        if (!v88) {
                          goto LABEL_93;
                        }
LABEL_165:
                        (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 7) + 8)
                                                                           + 24))(*(void *)(*((void *)this + 7) + 8), &v88);
LABEL_166:
                        CFTypeRef v52 = v88;
                        __int16 v88 = 0;
                        if (v52) {
                          goto LABEL_167;
                        }
LABEL_170:
                        if (!v43) {
                          goto LABEL_111;
                        }
                        unint64_t v89 = 0;
                        int v90 = 0;
                        WTF::fastFree(v43, v4);
                        int v42 = *((_DWORD *)this + 23);
                        goto LABEL_134;
                      }
                      WTF::StringImpl::destroy(v47, v50);
                      if (v88) {
                        goto LABEL_165;
                      }
LABEL_93:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v87);
                      uint64_t v51 = v87;
                      unint64_t v87 = 0;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2)
                        {
                          WTF::StringImpl::destroy(v51, v4);
                          CFTypeRef v52 = v88;
                          __int16 v88 = 0;
                          if (!v52) {
                            goto LABEL_170;
                          }
                        }
                        else
                        {
                          *(_DWORD *)v51 -= 2;
                          CFTypeRef v52 = v88;
                          __int16 v88 = 0;
                          if (!v52) {
                            goto LABEL_170;
                          }
                        }
LABEL_167:
                        if (*(_DWORD *)v52 == 2) {
                          WTF::StringImpl::destroy(v52, v4);
                        }
                        else {
                          *(_DWORD *)v52 -= 2;
                        }
                        goto LABEL_170;
                      }
                      goto LABEL_166;
                    }
                  }
                }
                else
                {
                  WTF::String::operator=(&v88, v4);
                }
                if (v88) {
                  goto LABEL_165;
                }
                goto LABEL_93;
              case 1:
                if (!BYTE4(v83))
                {
                  *((unsigned char *)this + 232) = 1;
                  *((_DWORD *)this + 59) = 1;
                  size_t v66 = __n;
                  if (!__n) {
                    goto LABEL_133;
                  }
                  unint64_t v67 = __src;
                  size_t v68 = *((unsigned int *)this + 63);
                  size_t v69 = __n + v68;
                  if (__n + v68 > *((unsigned int *)this + 62))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((const void **)this + 30, (WTF *)(__n + v68));
                    size_t v68 = *((unsigned int *)this + 63);
                  }
                  if (v69 < v68)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1E13747ACLL);
                  }
                  goto LABEL_132;
                }
                unint64_t v89 = 0;
                if (__n)
                {
                  WTF::String::fromUTF8();
                  uint64_t v55 = v88;
                  long long v54 = v89;
                  __int16 v88 = 0;
                  unint64_t v89 = v55;
                  if (!v54) {
                    goto LABEL_144;
                  }
                  int v56 = *(_DWORD *)v54 - 2;
                  if (*(_DWORD *)v54 != 2) {
                    goto LABEL_108;
                  }
                  WTF::StringImpl::destroy(v54, v53);
                  long long v54 = v88;
                  __int16 v88 = 0;
                  if (!v54) {
                    goto LABEL_144;
                  }
                  int v56 = *(_DWORD *)v54 - 2;
                  if (*(_DWORD *)v54 == 2) {
                    WTF::StringImpl::destroy(v54, v57);
                  }
                  else {
LABEL_108:
                  }
                    *(_DWORD *)long long v54 = v56;
                }
                else
                {
                  WTF::String::operator=(&v89, 0);
                }
LABEL_144:
                unint64_t v74 = (void *)*((void *)this + 10);
                int v75 = v94 - v74;
                memmove(v74, v94, *((unsigned int *)this + 23) - ((unsigned char *)v94 - (unsigned char *)v74));
                *((_DWORD *)this + 23) -= v75;
                if (v89)
                {
                  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 7) + 8) + 24))(*(void *)(*((void *)this + 7) + 8), &v89);
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v88);
                  unint64_t v76 = v88;
                  __int16 v88 = 0;
                  if (v76)
                  {
                    if (*(_DWORD *)v76 == 2) {
                      WTF::StringImpl::destroy(v76, v4);
                    }
                    else {
                      *(_DWORD *)v76 -= 2;
                    }
                  }
                }
                unint64_t v77 = v89;
                unint64_t v89 = 0;
                if (v77)
                {
                  if (*(_DWORD *)v77 == 2) {
                    WTF::StringImpl::destroy(v77, v4);
                  }
                  else {
                    *(_DWORD *)v77 -= 2;
                  }
                  int v42 = *((_DWORD *)this + 23);
                  goto LABEL_134;
                }
                goto LABEL_111;
              case 2:
                if (BYTE4(v83))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)&v89, (long long *)__src, (WTF *)__n);
                  uint64_t v60 = (void *)*((void *)this + 10);
                  int v61 = v94 - v60;
                  memmove(v60, v94, *((unsigned int *)this + 23) - ((unsigned char *)v94 - (unsigned char *)v60));
                  *((_DWORD *)this + 23) -= v61;
                  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 7) + 8) + 32))(*(void *)(*((void *)this + 7) + 8), &v89);
                  size_t v62 = v89;
                  if (!v89) {
                    goto LABEL_111;
                  }
                  unint64_t v89 = 0;
                  int v90 = 0;
                  WTF::fastFree(v62, v4);
                  int v42 = *((_DWORD *)this + 23);
                }
                else
                {
                  *((unsigned char *)this + 232) = 1;
                  *((_DWORD *)this + 59) = 2;
                  size_t v66 = __n;
                  if (__n)
                  {
                    unint64_t v67 = __src;
                    size_t v68 = *((unsigned int *)this + 63);
                    size_t v69 = __n + v68;
                    if (__n + v68 > *((unsigned int *)this + 62))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((const void **)this + 30, (WTF *)(__n + v68));
                      size_t v68 = *((unsigned int *)this + 63);
                    }
                    if (v69 < v68)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1E1374B18);
                    }
LABEL_132:
                    memcpy((void *)(*((void *)this + 30) + v68), v67, v66);
                    *((_DWORD *)this + 63) = v69;
                  }
LABEL_133:
                  BOOL v70 = (void *)*((void *)this + 10);
                  int v71 = v94 - v70;
                  memmove(v70, v94, *((unsigned int *)this + 23) - ((unsigned char *)v94 - (unsigned char *)v70));
                  int v42 = *((_DWORD *)this + 23) - v71;
                  *((_DWORD *)this + 23) = v42;
                }
                goto LABEL_134;
              case 8:
                size_t v63 = __n;
                if (__n == 1)
                {
                  *((_WORD *)this + 128) = 1006;
                  goto LABEL_25;
                }
                if (!__n)
                {
                  *((_WORD *)this + 128) = 1005;
LABEL_118:
                  WTF::String::operator=((WTF::StringImpl **)this + 33, v35);
                  goto LABEL_119;
                }
                unsigned int v72 = __rev16(*(unsigned __int16 *)__src);
                *((_WORD *)this + 128) = v72;
                unsigned int v73 = v72 - 1005;
                if (v73 <= 0xA && ((1 << v73) & 0x403) != 0)
                {
                  *((_WORD *)this + 128) = 1006;
                  goto LABEL_25;
                }
                if (v63 < 3) {
                  goto LABEL_118;
                }
                WTF::String::fromUTF8();
                size_t v79 = v89;
                unint64_t v89 = 0;
                unint64_t v80 = (WTF::StringImpl *)*((void *)this + 33);
                *((void *)this + 33) = v79;
                if (!v80) {
                  goto LABEL_119;
                }
                int v81 = *(_DWORD *)v80 - 2;
                if (*(_DWORD *)v80 != 2) {
                  goto LABEL_161;
                }
                WTF::StringImpl::destroy(v80, v78);
                unint64_t v80 = v89;
                unint64_t v89 = 0;
                if (v80)
                {
                  int v81 = *(_DWORD *)v80 - 2;
                  if (*(_DWORD *)v80 == 2) {
                    WTF::StringImpl::destroy(v80, v82);
                  }
                  else {
LABEL_161:
                  }
                    *(_DWORD *)unint64_t v80 = v81;
                }
LABEL_119:
                BOOL v64 = (void *)*((void *)this + 10);
                int v65 = v94 - v64;
                memmove(v64, v94, *((unsigned int *)this + 23) - ((unsigned char *)v94 - (unsigned char *)v64));
                *((_DWORD *)this + 23) -= v65;
                *((unsigned char *)this + 154) = 1;
                WebCore::WebSocketChannel::startClosingHandshake(this, *((unsigned __int16 *)this + 128), (WebCore::WebSocketChannel *)((char *)this + 264));
                if (*((unsigned char *)this + 153))
                {
                  if (!*((_DWORD *)this + 76)) {
                    *((_DWORD *)this + 76) = 1;
                  }
LABEL_110:
                  WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this);
                }
LABEL_111:
                int v42 = *((_DWORD *)this + 23);
LABEL_134:
                if (v42)
                {
                  BOOL v1 = 1;
                  unint64_t v17 = v92;
                  unint64_t v92 = 0;
                  if (v17) {
                    goto LABEL_39;
                  }
                }
                else
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)this + 80, v4);
                  BOOL v1 = 0;
                  unint64_t v17 = v92;
                  unint64_t v92 = 0;
                  if (v17) {
                    goto LABEL_39;
                  }
                }
                goto LABEL_40;
              case 9:
                WebCore::WebSocketChannel::enqueueRawFrame((uint64_t)this, 10, (uint64_t)__src, __n);
                long long v58 = (void *)*((void *)this + 10);
                int v59 = v94 - v58;
                memmove(v58, v94, *((unsigned int *)this + 23) - ((unsigned char *)v94 - (unsigned char *)v58));
                *((_DWORD *)this + 23) -= v59;
                goto LABEL_110;
              default:
                goto LABEL_133;
            }
          }
          WTF::tryFastCompactMalloc((WTF *)0x52);
          unint64_t v16 = v89;
          if (!v89)
          {
            __break(0xC471u);
            JUMPOUT(0x1E1374B00);
          }
          *(void *)unint64_t v89 = 0x3E00000002;
          qmemcpy((char *)v16 + 20, "One or more reserved bits are on: reserved2 = ", 46);
          *((void *)v16 + 1) = (char *)v16 + 20;
          *((_DWORD *)v16 + 4) = 4;
          *((unsigned char *)v16 + 66) = v13 | 0x30;
          qmemcpy((char *)v16 + 67, ", reserved3 = ", 14);
          *((unsigned char *)v16 + 81) = v14 | 0x30;
        }
        else
        {
          unint64_t v16 = (WTF::StringImpl *)*((void *)v92 + 2);
          if (v16) {
            *(_DWORD *)v16 += 2;
          }
        }
        unint64_t v89 = v16;
        WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v89);
        uint64_t v15 = v89;
        unint64_t v89 = 0;
        if (!v15) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
    }
    else
    {
      int ServerHandshake = WebCore::WebSocketHandshake::readServerHandshake();
      if (ServerHandshake >= 1)
      {
        unsigned int v6 = ServerHandshake;
        if (WebCore::WebSocketHandshake::mode(*((WebCore::WebSocketHandshake **)this + 8)) == 3)
        {
          if (*((void *)this + 28))
          {
            WebCore::WebSocketHandshake::serverHandshakeResponse(*((WebCore::WebSocketHandshake **)this + 8));
            WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketHandshakeResponse();
          }
          WebCore::WebSocketHandshake::serverSetCookie((uint64_t *)&v89, *((WebCore::WebSocketHandshake **)this + 8));
          if (v89)
          {
            if (*((_DWORD *)v89 + 1))
            {
              uint64_t v23 = *((void *)this + 6);
              if (v23)
              {
                uint64_t v24 = *(void *)(v23 + 8);
                if (v24)
                {
                  uint64_t v25 = *(void *)(v24 + 544);
                  if (v25)
                  {
                    uint64_t v26 = *(void *)(v25 + 8);
                    if (v26)
                    {
                      uint64_t v27 = *(void *)(v26 + 24);
                      if (v27)
                      {
                        uint64_t v28 = *(void *)(v27 + 8);
                        if (v28)
                        {
                          if ((*(unsigned int (**)(void))(**(void **)(v28 + 888) + 16))(*(void *)(v28 + 888)))
                          {
                            uint64_t v29 = *(void *)(*((void *)this + 6) + 8);
                            uint64_t v30 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v29 + 544) + 8) + 24)
                                                        + 8)
                                            + 888);
                            WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies((uint64_t *)&v83, *((WebCore::WebSocketHandshake **)this + 8));
                            (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v30 + 8))(v30, v29, &v83, &v89);
                            uint64_t v32 = v83;
                            int v83 = 0;
                            if (v32)
                            {
                              if (*(_DWORD *)v32 == 2) {
                                WTF::StringImpl::destroy(v32, v31);
                              }
                              else {
                                *(_DWORD *)v32 -= 2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          memmove(*((void **)this + 10), (const void *)(*((void *)this + 10) + v6), *((unsigned int *)this + 23) - (unint64_t)v6);
          *((_DWORD *)this + 23) -= v6;
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 8) + 16))(*(void *)(*((void *)this + 7) + 8));
          BOOL v1 = *((_DWORD *)this + 23) != 0;
          uint64_t v20 = v89;
          unint64_t v89 = 0;
          if (!v20)
          {
LABEL_43:
            int v9 = *((_DWORD *)this + 2) - 1;
            if (*((_DWORD *)this + 2) != 1) {
              goto LABEL_44;
            }
LABEL_18:
            WebCore::WebSocketChannel::~WebSocketChannel(this);
            WTF::fastFree(v10, v11);
            return v1;
          }
          int v21 = *(_DWORD *)v20 - 2;
          if (*(_DWORD *)v20 != 2)
          {
LABEL_42:
            *(_DWORD *)uint64_t v20 = v21;
            goto LABEL_43;
          }
LABEL_100:
          WTF::StringImpl::destroy(v20, v4);
          int v9 = *((_DWORD *)this + 2) - 1;
          if (*((_DWORD *)this + 2) != 1) {
            goto LABEL_44;
          }
          goto LABEL_18;
        }
        memmove(*((void **)this + 10), (const void *)(*((void *)this + 10) + v6), *((unsigned int *)this + 23) - (unint64_t)v6);
        *((_DWORD *)this + 23) -= v6;
        *((unsigned char *)this + 217) = 1;
        WebCore::WebSocketHandshake::failureReason((uint64_t *)&v83, *((WebCore::WebSocketHandshake **)this + 8));
        WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v83);
        uint64_t v8 = v83;
        int v83 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::destroy(v8, v7);
            BOOL v1 = 0;
            int v9 = *((_DWORD *)this + 2) - 1;
            if (*((_DWORD *)this + 2) == 1) {
              goto LABEL_18;
            }
            goto LABEL_44;
          }
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    BOOL v1 = 0;
    int v9 = *((_DWORD *)this + 2) - 1;
    if (*((_DWORD *)this + 2) == 1) {
      goto LABEL_18;
    }
LABEL_44:
    *((_DWORD *)this + 2) = v9;
    return v1;
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::didFailToReceiveSocketStreamData(WebCore::WebSocketChannel *this, atomic_uint *a2)
{
  int v3 = (unsigned int *)(a2 + 2);
  atomic_fetch_add(a2 + 2, 1u);
  uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 40))(a2);
  a2[16] = 3;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v5 = &unk_1F3C79D48;
    v5[1] = v3;
    uint64_t v6 = (uint64_t)v5;
    WTF::ensureOnMainThread();
    uint64_t result = v6;
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return result;
}

void *WebCore::WebSocketChannel::didUpdateBufferedAmount(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[7];
  if (v3)
  {
    uint64_t result = *(void **)(v3 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 48))(result, a3);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocketChannel::didFailSocketStream(uint64_t a1, atomic_uint *a2, uint64_t a3)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v29 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_3;
  }
  uint64_t v6 = *(WTF::StringImpl **)(a3 + 16);
  if (!v6)
  {
    unsigned int v14 = *(_DWORD *)a3;
    if ((*(_DWORD *)a3 & 0x80000000) != 0)
    {
      unsigned int v18 = -v14;
      int v15 = 1;
      do
      {
        ++v15;
        BOOL v19 = v18 >= 0xA;
        v18 /= 0xAu;
      }
      while (v19);
    }
    else
    {
      int v15 = 0;
      unsigned int v16 = *(_DWORD *)a3;
      do
      {
        ++v15;
        BOOL v17 = v16 > 9;
        v16 /= 0xAu;
      }
      while (v17);
    }
    if (v15 < 0
      || (uint64_t v20 = (v15 + 36), __OFADD__(v15, 36))
      || (WTF::tryFastCompactMalloc((WTF *)(v20 + 20)), (uint64_t v21 = v30[0]) == 0))
    {
      __break(0xC471u);
LABEL_47:
      JUMPOUT(0x1E1375070);
    }
    *(_OWORD *)(v30[0] + 20) = *(_OWORD *)"WebSocket network error: error code ";
    *(_DWORD *)uint64_t v21 = 2;
    *(_DWORD *)(v21 + 4) = v20;
    *(void *)(v21 + 8) = v21 + 20;
    *(_DWORD *)(v21 + 16) = 4;
    *(_DWORD *)(v21 + 52) = 543515759;
    *(_OWORD *)(v21 + 36) = *(_OWORD *)"k error: error code ";
    uint64_t v22 = 0;
    if ((v14 & 0x80000000) != 0)
    {
      unsigned int v25 = -v14;
      do
      {
        *((unsigned char *)&v30[1] + v22-- + 4) = (v25 % 0xA) | 0x30;
        BOOL v17 = v25 > 9;
        v25 /= 0xAu;
      }
      while (v17);
      uint64_t v26 = v22 + 12;
      uint64_t v23 = (char *)&v30[1] + v22 + 4;
      unsigned char *v23 = 45;
      if (v22 + 14 > 14) {
        goto LABEL_42;
      }
      if (v26 <= 12) {
        uint64_t v26 = 12;
      }
      size_t v24 = v26 - v22 - 11;
    }
    else
    {
      do
      {
        *((unsigned char *)&v30[1] + v22-- + 4) = (v14 % 0xA) | 0x30;
        BOOL v17 = v14 > 9;
        v14 /= 0xAu;
      }
      while (v17);
      if (v22 + 14 > 13) {
        goto LABEL_42;
      }
      uint64_t v23 = (char *)&v30[1] + v22 + 5;
      size_t v24 = -v22;
    }
    memcpy((void *)(v21 + 56), v23, v24);
LABEL_42:
    uint64_t v29 = (WTF::StringImpl *)v21;
    goto LABEL_3;
  }
  int v7 = *((_DWORD *)v6 + 1);
  *(_DWORD *)v6 += 2;
  if (v7 < 0
    || __OFADD__(v7, 25)
    || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((unint64_t)v30, v7 + 25, (*((_DWORD *)v6 + 4) >> 2) & 1, (int8x16_t *)"WebSocket network error: ", 0x19u, (uint64_t)v6), !v30[0]))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  uint64_t v29 = (WTF::StringImpl *)v30[0];
  if (*(_DWORD *)v6 == 2) {
    WTF::StringImpl::destroy(v6, v8);
  }
  else {
    *(_DWORD *)v6 -= 2;
  }
LABEL_3:
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5 && *(void *)(v5 + 8))
  {
    WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError();
    WebCore::Document::addConsoleMessage();
  }
  *(unsigned char *)(a1 + 217) = 1;
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v10 + 40))(v10, &v29);
    }
  }
  BOOL v11 = (unsigned int *)(a2 + 2);
  atomic_fetch_add(a2 + 2, 1u);
  (*(void (**)(atomic_uint *))(*(void *)a2 + 40))(a2);
  a2[16] = 3;
  if (atomic_fetch_add(a2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    uint64_t v27 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v27 = &unk_1F3C79D48;
    v27[1] = v11;
    v30[0] = v27;
    WTF::ensureOnMainThread();
    uint64_t v28 = v30[0];
    v30[0] = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::didFinishLoading(WebCore::WebSocketChannel *this)
{
  *((_DWORD *)this + ++*(_DWORD *)(this + 80) = 2;
  uint64_t result = WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this);
  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(this);
    return WTF::fastFree(v3, v4);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return result;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::didFinishLoading(WebCore::WebSocketChannel *this)
{
  uint64_t v2 = (WebCore::WebSocketChannel *)((char *)this - 32);
  *((_DWORD *)this + 72) = 2;
  uint64_t result = WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this - 32);
  if (*((_DWORD *)this - 6) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(v2);
    return WTF::fastFree(v4, v5);
  }
  else
  {
    --*((_DWORD *)this - 6);
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocketChannel::didFail(uint64_t a1, unsigned int a2)
{
  v15[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t result = *(WTF::StringImpl **)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 64))(result);
  }
  int v5 = 0;
  *(_DWORD *)(a1 + 320) = 3;
  unsigned int v6 = a2;
  do
  {
    ++v5;
    BOOL v7 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v7);
  if ((v5 & 0x80000000) == 0)
  {
    uint64_t v8 = (v5 + 34);
    if (!__OFADD__(v5, 34))
    {
      uint64_t result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
      uint64_t v9 = v15[0];
      if (v15[0])
      {
        uint64_t v10 = 0;
        *(_OWORD *)((char *)v15[0] + 20) = *(_OWORD *)"Failed to load Blob: error code = ";
        *(_DWORD *)uint64_t v9 = 2;
        *((_DWORD *)v9 + 1) = v8;
        *((void *)v9 + 1) = (char *)v9 + 20;
        *((_DWORD *)v9 + 4) = 4;
        *((_WORD *)v9 + 26) = 8253;
        *(_OWORD *)((char *)v9 + 36) = *(_OWORD *)"lob: error code = ";
        do
        {
          *((unsigned char *)&v15[1] + v10-- + 4) = (a2 % 0xA) | 0x30;
          BOOL v7 = a2 > 9;
          a2 /= 0xAu;
        }
        while (v7);
        if (v10 + 14 <= 13) {
          memcpy((char *)v9 + 54, (char *)&v15[1] + v10 + 5, -v10);
        }
        v15[0] = v9;
        WebCore::WebSocketChannel::fail(a1, (uint64_t *)v15);
        uint64_t result = v15[0];
        v15[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            int v12 = *(_DWORD *)(a1 + 8) - 1;
            if (*(_DWORD *)(a1 + 8) != 1) {
              goto LABEL_16;
            }
LABEL_18:
            WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)a1);
            return (WTF::StringImpl *)WTF::fastFree(v13, v14);
          }
          *(_DWORD *)result -= 2;
        }
        int v12 = *(_DWORD *)(a1 + 8) - 1;
        if (*(_DWORD *)(a1 + 8) != 1)
        {
LABEL_16:
          *(_DWORD *)(a1 + 8) = v12;
          return result;
        }
        goto LABEL_18;
      }
    }
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebCore::WebSocketChannel::didFail(uint64_t a1, unsigned int a2)
{
  return WebCore::WebSocketChannel::didFail(a1 - 32, a2);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = (void *)result;
  int v4 = 0;
  v15[4] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a2;
  do
  {
    ++v4;
    BOOL v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (v4 < 0
    || (BOOL v7 = __OFADD__(v4, 6), v8 = v4 + 6, v7)
    || (uint64_t v9 = (v8 + 48), __OFADD__(v8, 48))
    || (uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20)), (v10 = v15[0]) == 0))
  {
    *uint64_t v3 = 0;
    __break(0xC471u);
  }
  else
  {
    uint64_t v11 = 0;
    *(_OWORD *)(v15[0] + 20) = *(_OWORD *)"Received control frame having too long payload: ";
    *(_DWORD *)uint64_t v10 = 2;
    *(_DWORD *)(v10 + 4) = v9;
    *(void *)(v10 + 8) = v10 + 20;
    *(_DWORD *)(v10 + 16) = 4;
    qmemcpy((void *)(v10 + 36), " frame having too long payload: ", 32);
    unint64_t v12 = v2;
    do
    {
      *((unsigned char *)&v15[3] + v11--) = (v12 % 0xA) | 0x30;
      BOOL v6 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v6);
    if (v11 + 26 <= 25) {
      uint64_t result = (uint64_t)memcpy((void *)(v10 + 68), (char *)&v15[3] + v11 + 1, -v11);
    }
    unsigned int v13 = 0;
    do
    {
      ++v13;
      BOOL v6 = v2 > 9;
      v2 /= 0xAuLL;
    }
    while (v6);
    uint64_t v14 = v10 + 68 + v13;
    *(_WORD *)(v14 + 4) = 29541;
    *(_DWORD *)uint64_t v14 = 1954112032;
    *uint64_t v3 = v10;
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t result, long long *a2, WTF *this)
{
  uint64_t v4 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = this;
  if (!this) {
    return v4;
  }
  if (!((unint64_t)this >> 32))
  {
    BOOL v6 = (WTF *)a2;
    BOOL v7 = (unsigned char *)WTF::fastMalloc(this);
    *(_DWORD *)(v4 + 8) = this;
    *(void *)uint64_t v4 = v7;
    if ((unint64_t)this >= 8 && (unint64_t)(v7 - (unsigned char *)a2) >= 0x20)
    {
      if ((unint64_t)this < 0x20)
      {
        unint64_t v8 = 0;
        goto LABEL_11;
      }
      unint64_t v8 = (unint64_t)this & 0xFFFFFFFFFFFFFFE0;
      uint64_t v9 = a2 + 1;
      uint64_t v10 = v7 + 16;
      unint64_t v11 = (unint64_t)this & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v12 = *v9;
        *(v10 - 1) = *(v9 - 1);
        *uint64_t v10 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 32;
      }
      while (v11);
      if (this == (WTF *)v8) {
        return v4;
      }
      if ((this & 0x18) != 0)
      {
LABEL_11:
        BOOL v6 = (WTF *)((char *)a2 + ((unint64_t)this & 0xFFFFFFFFFFFFFFF8));
        unsigned int v13 = (uint64_t *)((char *)a2 + v8);
        uint64_t v14 = &v7[v8];
        unint64_t v15 = v8 - ((unint64_t)this & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v16 = *v13++;
          *v14++ = v16;
          v15 += 8;
        }
        while (v15);
        v7 += (unint64_t)this & 0xFFFFFFFFFFFFFFF8;
        if (this == (WTF *)((unint64_t)this & 0xFFFFFFFFFFFFFFF8)) {
          return v4;
        }
        goto LABEL_16;
      }
      BOOL v6 = (WTF *)((char *)a2 + v8);
      v7 += v8;
    }
    do
    {
LABEL_16:
      char v17 = *(unsigned char *)v6;
      BOOL v6 = (WTF *)((char *)v6 + 1);
      *v7++ = v17;
    }
    while (v6 != (WTF *)((char *)this + (void)a2));
    return v4;
  }
  __break(0xC471u);
  return result;
}

WebCore::DeflateResultHolder *WebCore::WebSocketChannel::sendFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::LegacyWebSocketInspectorInstrumentation::didSendWebSocketFrame();
  WebCore::WebSocketDeflateFramer::deflate((uint64_t *)&v20, (WebCore::WebSocketDeflateFramer *)(a1 + 328), (WebCore::WebSocketFrame *)v21);
  if (!*((unsigned char *)v20 + 8))
  {
    uint64_t v9 = (WTF::StringImpl *)*((void *)v20 + 2);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    unsigned int v18 = v9;
    WebCore::WebSocketChannel::fail(a1, (uint64_t *)&v18);
    unint64_t v11 = v18;
    unsigned int v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    (*(void (**)(void, void))(*(void *)*a5 + 16))(*a5, 0);
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result) {
      goto LABEL_14;
    }
    return result;
  }
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  WebCore::WebSocketFrame::makeFrameData();
  BOOL v7 = *(_DWORD **)(a1 + 72);
  uint64_t v8 = *a5;
  *a5 = 0;
  uint64_t v17 = v8;
  if ((v7[16] | 2) == 2)
  {
    (*(void (**)(uint64_t, void, void))(*(void *)v8 + 16))(v8, 0, 0);
    uint64_t v17 = 0;
  }
  else
  {
    (*(void (**)(_DWORD *, void, void, uint64_t *))(*(void *)v7 + 24))(v7, 0, 0, &v17);
    uint64_t v8 = v17;
    uint64_t v17 = 0;
    if (!v8) {
      goto LABEL_11;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
LABEL_11:
  unsigned int v13 = v18;
  if (v18)
  {
    unsigned int v18 = 0;
    LODWORD(v19) = 0;
    WTF::fastFree(v13, v12);
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
LABEL_14:
    WebCore::DeflateResultHolder::~DeflateResultHolder(result);
    return (WebCore::DeflateResultHolder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::clientHandshakeRequest()
{
  return WebCore::WebSocketHandshake::clientHandshakeRequest();
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::clientHandshakeRequest()
{
  return WebCore::WebSocketHandshake::clientHandshakeRequest();
}

uint64_t WebCore::WebSocketChannel::serverHandshakeResponse(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::serverHandshakeResponse(this[8]);
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::serverHandshakeResponse(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::serverHandshakeResponse(this[6]);
}

void WebBroadcastChannelRegistry::~WebBroadcastChannelRegistry(WebBroadcastChannelRegistry *this, StringImpl *a2)
{
  *(void *)this = &unk_1F3C79BC0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    unint64_t v5 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  WTF *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F3C79BC0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    unint64_t v5 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      BOOL v6 = this;
    }
    else
    {
      BOOL v6 = this;
    }
  }
  else
  {
    *((void *)this + 2) = 0;
    BOOL v6 = this;
  }
  WTF::fastFree(v6, a2);
}

uint64_t WebCore::LoaderStrategy::usePingLoad(WebCore::LoaderStrategy *this)
{
  return 1;
}

uint64_t WebCore::LoaderStrategy::shouldPerformSecurityChecks(WebCore::LoaderStrategy *this)
{
  return 0;
}

uint64_t WebCore::LoaderStrategy::havePerformedSecurityChecks()
{
  return 0;
}

void WebCore::LoaderStrategy::ongoingLoads(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::WebSocketChannel::progressIdentifier(WebCore::WebSocketChannel *this)
{
  return *((void *)this + 28);
}

BOOL WebCore::WebSocketChannel::hasCreatedHandshake(WebCore::WebSocketChannel *this)
{
  return *((void *)this + 8) != 0;
}

BOOL WebCore::WebSocketChannel::isConnected(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::mode(this[8]) == 3;
}

uint64_t WebCore::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  return this;
}

WebCore::WebSocketChannel *WebCore::WebSocketChannel::derefThreadableWebSocketChannel(WebCore::WebSocketChannel *this)
{
  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(this);
    return (WebCore::WebSocketChannel *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return this;
}

uint64_t WebCore::ThreadableWebSocketChannel::channelInspector(WebCore::ThreadableWebSocketChannel *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::progressIdentifier(WebCore::WebSocketChannel *this)
{
  return *((void *)this + 26);
}

BOOL non-virtual thunk to'WebCore::WebSocketChannel::hasCreatedHandshake(WebCore::WebSocketChannel *this)
{
  return *((void *)this + 6) != 0;
}

BOOL non-virtual thunk to'WebCore::WebSocketChannel::isConnected(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::mode(this[6]) == 3;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebCore::WebSocketChannel::derefThreadableWebSocketChannel(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)(this - 16));
    return WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t WebCore::ResourceRequest::operator=(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, (uint64_t *)a2);
  WTF::URL::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  *(void *)(a1 + ++*(_DWORD *)(this + 80) = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a2 + 8++*(_DWORD *)(this - 8) = 0;
  BOOL v6 = *(WTF::StringImpl **)(a1 + 88);
  *(void *)(a1 + 8++*(_DWORD *)(this - 8) = v5;
  if (!v6)
  {
LABEL_4:
    uint64_t v7 = *(unsigned int *)(a1 + 108);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v6, v4);
  uint64_t v7 = *(unsigned int *)(a1 + 108);
  if (!v7) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v8 = 16 * v7;
  uint64_t v9 = (WTF::StringImpl **)(*(void *)(a1 + 96) + 8);
  do
  {
    uint64_t v10 = *v9;
    *uint64_t v9 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v4);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    v9 += 2;
    v8 -= 16;
  }
  while (v8);
LABEL_13:
  unint64_t v11 = *(WTF **)(a1 + 96);
  if (v11)
  {
    *(void *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v11, v4);
  }
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 10++*(_DWORD *)(this - 8) = 0;
  *(_DWORD *)(a1 + 10++*(_DWORD *)(this - 8) = v12;
  uint64_t v13 = *(unsigned int *)(a1 + 124);
  if (v13)
  {
    uint64_t v14 = 16 * v13;
    unint64_t v15 = (WTF::StringImpl **)(*(void *)(a1 + 112) + 8);
    while (1)
    {
      uint64_t v16 = *v15;
      WTF *v15 = 0;
      if (!v16) {
        goto LABEL_22;
      }
      if (*(_DWORD *)v16 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v16, v4);
      uint64_t v17 = *(v15 - 1);
      *(v15 - 1) = 0;
      if (v17)
      {
LABEL_25:
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v4);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
LABEL_18:
      v15 += 2;
      v14 -= 16;
      if (!v14) {
        goto LABEL_27;
      }
    }
    *(_DWORD *)v16 -= 2;
LABEL_22:
    uint64_t v17 = *(v15 - 1);
    *(v15 - 1) = 0;
    if (v17) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
LABEL_27:
  unsigned int v18 = *(WTF **)(a1 + 112);
  if (v18)
  {
    *(void *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v18, v4);
  }
  uint64_t v19 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v19;
  uint64_t v20 = *(unsigned int *)(a1 + 140);
  if (v20)
  {
    uint64_t v21 = *(WTF::StringImpl ***)(a1 + 128);
    uint64_t v22 = 8 * v20;
    do
    {
      uint64_t v23 = *v21;
      void *v21 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v4);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  size_t v24 = *(WTF **)(a1 + 128);
  if (v24)
  {
    *(void *)(a1 + 12++*(_DWORD *)(this - 8) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v24, v4);
  }
  uint64_t v25 = *(void *)(a2 + 128);
  *(void *)(a2 + 12++*(_DWORD *)(this - 8) = 0;
  *(void *)(a1 + 12++*(_DWORD *)(this - 8) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 14++*(_DWORD *)(this - 8) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v25;
  uint64_t v26 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v27 = *(WTF::StringImpl **)(a1 + 152);
  *(void *)(a1 + 152) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v4);
      uint64_t v30 = *(void *)(a2 + 160);
      *(void *)(a2 + 160) = 0;
      uint64_t v29 = *(WTF::StringImpl **)(a1 + 160);
      *(void *)(a1 + 160) = v30;
      if (!v29) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
    *(_DWORD *)v27 -= 2;
  }
  uint64_t v28 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v29 = *(WTF::StringImpl **)(a1 + 160);
  *(void *)(a1 + 160) = v28;
  if (!v29)
  {
LABEL_46:
    uint64_t v31 = *(void *)(a2 + 168);
    *(void *)(a2 + 16++*(_DWORD *)(this - 8) = 0;
    uint64_t v32 = *(_DWORD **)(a1 + 168);
    *(void *)(a1 + 16++*(_DWORD *)(this - 8) = v31;
    if (!v32) {
      goto LABEL_52;
    }
    goto LABEL_49;
  }
LABEL_44:
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v29, v4);
  uint64_t v33 = *(void *)(a2 + 168);
  *(void *)(a2 + 16++*(_DWORD *)(this - 8) = 0;
  uint64_t v32 = *(_DWORD **)(a1 + 168);
  *(void *)(a1 + 16++*(_DWORD *)(this - 8) = v33;
  if (!v32) {
    goto LABEL_52;
  }
LABEL_49:
  if (*v32 == 1)
  {
    uint64_t v34 = MEMORY[0x1E4E48940]();
    MEMORY[0x1E4E48950](v34);
  }
  else
  {
    --*v32;
  }
LABEL_52:
  uint64_t v35 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v35;
  uint64_t v36 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  BOOL v37 = *(const void **)(a1 + 192);
  *(void *)(a1 + 192) = v36;
  if (v37) {
    CFRelease(v37);
  }
  return a1;
}

uint64_t WTF::URL::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(WTF::StringImpl **)a1;
  *(void *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  unsigned int v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  unsigned int v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v7;
  unsigned int v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v8;
  unsigned int v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v9;
  *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(void *)(a1 + 2++*(_DWORD *)(this - 8) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  return a1;
}

void WebCore::ResourceRequest::~ResourceRequest(WebCore::ResourceRequest *this, StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = (WTF::StringImpl *)*((void *)this + 20);
    *((void *)this + 20) = 0;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*v4 != 1)
  {
    --*v4;
    goto LABEL_6;
  }
  uint64_t v6 = MEMORY[0x1E4E48940]();
  MEMORY[0x1E4E48950](v6);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (!v5) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    unsigned int v7 = (WTF::StringImpl *)*((void *)this + 19);
    *((void *)this + 19) = 0;
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  unsigned int v7 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (!v7)
  {
LABEL_16:
    unsigned int v8 = this;
    goto LABEL_18;
  }
LABEL_14:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v7, a2);
  unsigned int v8 = this;
LABEL_18:
  WebCore::ResourceRequestBase::RequestData::~RequestData(v8, a2);
}

void WebCore::ResourceRequestBase::RequestData::~RequestData(WebCore::ResourceRequestBase::RequestData *this, StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 35);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 16);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v7 = (WTF *)*((void *)this + 16);
  if (v7)
  {
    *((void *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96), a2);
  unsigned int v9 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (!v9)
  {
LABEL_13:
    uint64_t v10 = (WTF::StringImpl *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v10) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v9, v8);
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v10) {
    goto LABEL_18;
  }
LABEL_16:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v8);
    unint64_t v11 = *(WTF::StringImpl **)this;
    *(void *)this = 0;
    if (!v11) {
      return;
    }
    goto LABEL_21;
  }
  *(_DWORD *)v10 -= 2;
LABEL_18:
  unint64_t v11 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (!v11) {
    return;
  }
LABEL_21:
  if (*(_DWORD *)v11 == 2) {
    WTF::StringImpl::destroy(v11, v8);
  }
  else {
    *(_DWORD *)v11 -= 2;
  }
}

void WebCore::HTTPHeaderMap::~HTTPHeaderMap(WebCore::HTTPHeaderMap *this, StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 7);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (WTF::StringImpl **)(*((void *)this + 2) + 8);
    while (1)
    {
      uint64_t v6 = *v5;
      WTF::StringImpl *v5 = 0;
      if (!v6) {
        goto LABEL_8;
      }
      if (*(_DWORD *)v6 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v6, a2);
      unsigned int v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
LABEL_11:
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
LABEL_4:
      v5 += 2;
      v4 -= 16;
      if (!v4) {
        goto LABEL_13;
      }
    }
    *(_DWORD *)v6 -= 2;
LABEL_8:
    unsigned int v7 = *(v5 - 1);
    *(v5 - 1) = 0;
    if (v7) {
      goto LABEL_11;
    }
    goto LABEL_4;
  }
LABEL_13:
  unsigned int v8 = (WTF *)*((void *)this + 2);
  if (v8)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  uint64_t v9 = *((unsigned int *)this + 3);
  if (v9)
  {
    uint64_t v10 = 16 * v9;
    unint64_t v11 = (WTF::StringImpl **)(*(void *)this + 8);
    do
    {
      uint64_t v12 = *v11;
      *unint64_t v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, a2);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  uint64_t v13 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v13, a2);
  }
}

unint64_t *WTF::Deque<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,0ul>::~Deque(unint64_t *a1, void *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (WTF *)a1[2];
  if (*a1 <= v4)
  {
    if (*a1 == v4) {
      goto LABEL_19;
    }
    uint64_t v8 = 8 * v3;
    uint64_t v9 = (_DWORD **)((char *)v5 + v8);
    uint64_t v10 = 8 * v4 - v8;
    do
    {
      unint64_t v11 = *v9;
      *uint64_t v9 = 0;
      if (v11)
      {
        if (v11[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
        }
        else {
          --v11[4];
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        unsigned int v7 = *(_DWORD **)v5;
        *(void *)uint64_t v5 = 0;
        if (v7)
        {
          if (v7[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[4];
          }
        }
        uint64_t v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      uint64_t v5 = (WTF *)a1[2];
      unint64_t v3 = *a1;
    }
    uint64_t v12 = *((unsigned int *)a1 + 6);
    if (v3 != v12)
    {
      uint64_t v14 = 8 * v3;
      unint64_t v15 = (_DWORD **)((char *)v5 + v14);
      uint64_t v16 = 8 * v12 - v14;
      do
      {
        uint64_t v17 = *v15;
        WTF *v15 = 0;
        if (v17)
        {
          if (v17[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
          }
          else {
            --v17[4];
          }
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
  uint64_t v5 = (WTF *)a1[2];
LABEL_19:
  if (v5)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

WTF::StringImpl *PingHandle::timeoutTimerFired(PingHandle *this)
{
  uint64_t v2 = WebCore::ResourceRequestBase::url((PingHandle *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unint64_t v3 = (WTF::StringImpl *)v16[0];
  uint64_t v20 = 0;
  unint64_t v4 = *(WTF::StringImpl **)v2;
  if (*(void *)v2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v21 = v4;
  long long v5 = *(_OWORD *)(v2 + 24);
  long long v22 = *(_OWORD *)(v2 + 8);
  long long v23 = v5;
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  size_t v24 = v3;
  int v25 = 0;
  __int16 v26 = 4;
  uint64_t v27 = 0;
  char v28 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v16);
  CFTypeRef cf = 0;
  char v19 = 0;
  char v17 = v17 & 0xF1 | 4;
  uint64_t v6 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)v6 + 16))(v6, &v20, v16);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  PingHandle::~PingHandle(this);
  WTF::fastFree(v7, v8);
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v16, v9);
  uint64_t v12 = v27;
  uint64_t v27 = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = v24;
  size_t v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      if (!v14) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    *(_DWORD *)v13 -= 2;
  }
  uint64_t v14 = v21;
  uint64_t v21 = 0;
  if (!v14)
  {
LABEL_19:
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (!result) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v14, v11);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (!result) {
    goto LABEL_24;
  }
LABEL_22:
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    if (!v3) {
      return result;
    }
    goto LABEL_27;
  }
  *(_DWORD *)result -= 2;
LABEL_24:
  if (!v3) {
    return result;
  }
LABEL_27:
  if (*(_DWORD *)v3 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v11);
  }
  *(_DWORD *)v3 -= 2;
  return result;
}

void PingHandle::~PingHandle(PingHandle *this)
{
  PingHandle::~PingHandle(this);
  WTF::fastFree(v1, v2);
}

{
  WebCore::ResourceHandle *v2;
  uint64_t v3;
  uint64_t v4;
  StringImpl *v5;
  _DWORD *v6;
  PingHandle *v7;
  uint64_t vars8;

  uint64_t v2 = (WebCore::ResourceHandle *)*((void *)this + 1);
  if (v2)
  {
    WebCore::ResourceHandle::clearClient(v2);
    (*(void (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  }
  unint64_t v3 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 27) = &unk_1F3C79440;
  unint64_t v4 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WebCore::TimerBase::~TimerBase((PingHandle *)((char *)this + 216));
  WebCore::ResourceRequest::~ResourceRequest((PingHandle *)((char *)this + 16), v5);
  uint64_t v6 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v6) {
    goto LABEL_10;
  }
  if (v6[2] != 1)
  {
    --v6[2];
LABEL_10:
    unsigned int v7 = this;
    goto __ZN7WebCore20ResourceHandleClientD2Ev;
  }
  (*(void (**)(_DWORD *))(*(void *)v6 + 48))(v6);
  unsigned int v7 = this;
__ZN7WebCore20ResourceHandleClientD2Ev:
  MEMORY[0x1F416FBE8](v7);
}

WTF::StringImpl *PingHandle::didReceiveData(PingHandle *this, WebCore::ResourceHandle *a2, const WebCore::SharedBuffer *a3)
{
  unsigned int v18 = 0;
  char v19 = 0;
  WTF::URL::invalidate((WTF::URL *)&v19);
  uint64_t v21 = 0;
  v20[0] = 0;
  *(void *)((char *)v20 + 6) = 0;
  char v22 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v14);
  CFTypeRef cf = 0;
  char v17 = 0;
  char v15 = v15 & 0xF1 | 4;
  uint64_t v4 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, unsigned char *))(*(void *)v4 + 16))(v4, &v18, v14);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PingHandle::~PingHandle(this);
  WTF::fastFree(v5, v6);
  CFTypeRef v8 = cf;
  CFTypeRef cf = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v14, v7);
  CFTypeRef v10 = v21;
  uint64_t v21 = 0;
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = (WTF::StringImpl *)v20[0];
  v20[0] = 0;
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = v19;
    char v19 = 0;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  uint64_t v12 = v19;
  char v19 = 0;
  if (!v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    uint64_t result = v18;
    unsigned int v18 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  uint64_t result = v18;
  unsigned int v18 = 0;
  if (!result) {
    return result;
  }
LABEL_18:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  }
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *PingHandle::didFinishLoading(PingHandle *a1)
{
  uint64_t v16 = 0;
  char v17 = 0;
  WTF::URL::invalidate((WTF::URL *)&v17);
  char v19 = 0;
  v18[0] = 0;
  *(void *)((char *)v18 + 6) = 0;
  char v20 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v12);
  CFTypeRef cf = 0;
  char v15 = 0;
  char v13 = v13 & 0xF1 | 4;
  uint64_t v2 = *((void *)a1 + 35);
  *((void *)a1 + 35) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, unsigned char *))(*(void *)v2 + 16))(v2, &v16, v12);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PingHandle::~PingHandle(a1);
  WTF::fastFree(v3, v4);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v12, v5);
  CFTypeRef v8 = v19;
  char v19 = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (WTF::StringImpl *)v18[0];
  v18[0] = 0;
  if (!v9)
  {
LABEL_10:
    CFTypeRef v10 = v17;
    char v17 = 0;
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v9, v7);
  CFTypeRef v10 = v17;
  char v17 = 0;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_13:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v7);
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_18;
  }
  *(_DWORD *)v10 -= 2;
LABEL_15:
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (!result) {
    return result;
  }
LABEL_18:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void PingHandle::didFail(PingHandle *this, WebCore::ResourceHandle *a2, const WebCore::ResourceError *a3)
{
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v10);
  CFTypeRef cf = 0;
  char v13 = 0;
  char v11 = v11 & 0xF1 | 4;
  uint64_t v5 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t, const WebCore::ResourceError *, unsigned char *))(*(void *)v5 + 16))(v5, a3, v10);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PingHandle::~PingHandle(this);
  WTF::fastFree(v6, v7);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v8);
}

uint64_t WebCore::ResourceHandleClient::loadingSynchronousXHR(WebCore::ResourceHandleClient *this)
{
  return 0;
}

void PingHandle::willSendRequestAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v7 = (WebCore::ResourceRequestBase *)(a1 + 16);
  WebCore::ResourceRequest::operator=(a1 + 16, a3);
  if (!*(unsigned char *)(a1 + 273))
  {
    CFTypeRef v52 = 0;
    WTF::URL::invalidate((WTF::URL *)&v52);
    char v15 = v52;
    if (v52) {
      *(_DWORD *)v52 += 2;
    }
    uint64_t v36 = v15;
    long long v37 = *(_OWORD *)v53;
    long long v38 = *(_OWORD *)&v53[16];
    v39[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v39);
    v39[5] = *MEMORY[0x1E4FB64E0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39[6] = v59;
    WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)v40);
    v40[4] = 0;
    uint64_t v41 = 0;
    int v42 = 0x10000;
    char v43 = 4;
    int v44 = 0;
    char v17 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980])
    {
      *v17 += 2;
      char v18 = v43 | 2;
    }
    else
    {
      char v18 = 6;
    }
    int v45 = v17;
    long long v46 = 0;
    LOBYTE(v47) = 0;
    BYTE4(v47) = 0;
    char v48 = v48 & 0xE0 | 5;
    char v43 = v18;
    char v19 = v52;
    CFTypeRef v52 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v49 = 0;
    uint64_t v20 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v20 + 16))(v20, &v36);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v36, v21);
    uint64_t v22 = WebCore::ResourceRequestBase::url(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    long long v23 = v36;
    CFTypeRef v52 = 0;
    size_t v24 = *(_DWORD **)v22;
    if (*(void *)v22) {
      *v24 += 2;
    }
    *(void *)unint64_t v53 = v24;
    long long v25 = *(_OWORD *)(v22 + 8);
    *(_OWORD *)&v53[24] = *(_OWORD *)(v22 + 24);
    *(_OWORD *)&v53[8] = v25;
    if (v23) {
      *(_DWORD *)v23 += 2;
    }
    long long v54 = v23;
    int v55 = 0;
    __int16 v56 = 2;
    long long v57 = 0;
    char v58 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v36);
    CFTypeRef cf = 0;
    char v51 = 0;
    BYTE2(v41) = BYTE2(v41) & 0xF1 | 4;
    uint64_t v26 = *(void *)(a1 + 280);
    *(void *)(a1 + 2++*(_DWORD *)(this + 80) = 0;
    if (v26)
    {
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v26 + 16))(v26, &v52, &v36);
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    PingHandle::~PingHandle((PingHandle *)a1);
    WTF::fastFree(v27, v28);
    CFTypeRef v30 = cf;
    CFTypeRef cf = 0;
    if (v30) {
      CFRelease(v30);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v36, v29);
    uint64_t v32 = v57;
    long long v57 = 0;
    if (v32) {
      CFRelease(v32);
    }
    uint64_t v33 = v54;
    long long v54 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::destroy(v33, v31);
        uint64_t v34 = *(WTF::StringImpl **)v53;
        *(void *)unint64_t v53 = 0;
        if (!v34) {
          goto LABEL_38;
        }
LABEL_36:
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::destroy(v34, v31);
          uint64_t v35 = v52;
          CFTypeRef v52 = 0;
          if (!v35) {
            goto LABEL_43;
          }
LABEL_41:
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::destroy(v35, v31);
            if (!v23) {
              return;
            }
LABEL_46:
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v31);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
            return;
          }
          *(_DWORD *)v35 -= 2;
LABEL_43:
          if (!v23) {
            return;
          }
          goto LABEL_46;
        }
        *(_DWORD *)v34 -= 2;
LABEL_38:
        uint64_t v35 = v52;
        CFTypeRef v52 = 0;
        if (!v35) {
          goto LABEL_43;
        }
        goto LABEL_41;
      }
      *(_DWORD *)v33 -= 2;
    }
    uint64_t v34 = *(WTF::StringImpl **)v53;
    *(void *)unint64_t v53 = 0;
    if (!v34) {
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)&v36, (uint64_t)v7);
  CFTypeRef v8 = *(_DWORD **)(a1 + 168);
  if (v8) {
    *v8 += 2;
  }
  int v44 = v8;
  CFTypeRef v9 = *(_DWORD **)(a1 + 176);
  if (v9) {
    *v9 += 2;
  }
  int v45 = v9;
  CFTypeRef v10 = *(_DWORD **)(a1 + 184);
  if (v10) {
    ++*v10;
  }
  uint64_t v11 = *(void *)(a1 + 192);
  long long v46 = v10;
  uint64_t v47 = v11;
  char v48 = *(unsigned char *)(a1 + 200);
  uint64_t v12 = *(const void **)(a1 + 208);
  int v49 = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v13 + 16))(v13, &v36);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v36, v14);
}

WTF::StringImpl *PingHandle::didReceiveResponseAsync(PingHandle *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  char v15 = 0;
  uint64_t v16 = 0;
  WTF::URL::invalidate((WTF::URL *)&v16);
  CFTypeRef cf = 0;
  v17[0] = 0;
  *(void *)((char *)v17 + 6) = 0;
  char v19 = 1;
  uint64_t v7 = *((void *)a1 + 35);
  *((void *)a1 + 35) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v7 + 16))(v7, &v15, a3);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  PingHandle::~PingHandle(a1);
  WTF::fastFree(v8, v9);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (WTF::StringImpl *)v17[0];
  v17[0] = 0;
  if (!v12)
  {
LABEL_8:
    uint64_t v13 = v16;
    uint64_t v16 = 0;
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v12, v10);
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (!v13) {
    goto LABEL_13;
  }
LABEL_11:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy(v13, v10);
    uint64_t result = v15;
    char v15 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  *(_DWORD *)v13 -= 2;
LABEL_13:
  uint64_t result = v15;
  char v15 = 0;
  if (!result) {
    return result;
  }
LABEL_16:
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  }
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *PingHandle::canAuthenticateAgainstProtectionSpaceAsync(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  uint64_t v6 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 2));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v7 = (WTF::StringImpl *)v20[0];
  size_t v24 = 0;
  CFTypeRef v8 = *(WTF::StringImpl **)v6;
  if (*(void *)v6) {
    *(_DWORD *)v8 += 2;
  }
  long long v25 = v8;
  long long v9 = *(_OWORD *)(v6 + 24);
  long long v26 = *(_OWORD *)(v6 + 8);
  long long v27 = v9;
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  char v28 = v7;
  int v29 = 0;
  __int16 v30 = 2;
  uint64_t v31 = 0;
  char v32 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v20);
  CFTypeRef cf = 0;
  char v23 = 0;
  char v21 = v21 & 0xF1 | 4;
  uint64_t v10 = a1[35];
  a1[35] = 0;
  if (v10)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)v10 + 16))(v10, &v24, v20);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  PingHandle::~PingHandle((PingHandle *)a1);
  WTF::fastFree(v11, v12);
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v20, v13);
  uint64_t v16 = v31;
  uint64_t v31 = 0;
  if (v16) {
    CFRelease(v16);
  }
  char v17 = v28;
  char v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v15);
      char v18 = v25;
      long long v25 = 0;
      if (!v18) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    *(_DWORD *)v17 -= 2;
  }
  char v18 = v25;
  long long v25 = 0;
  if (!v18)
  {
LABEL_19:
    uint64_t result = v24;
    size_t v24 = 0;
    if (!result) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v18, v15);
  uint64_t result = v24;
  size_t v24 = 0;
  if (!result) {
    goto LABEL_24;
  }
LABEL_22:
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    if (!v7) {
      return result;
    }
    goto LABEL_27;
  }
  *(_DWORD *)result -= 2;
LABEL_24:
  if (!v7) {
    return result;
  }
LABEL_27:
  if (*(_DWORD *)v7 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v15);
  }
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::ResourceHandleClient::willCacheResponseAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

uint64_t PingHandle::shouldUseCredentialStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 272);
}

void WebCore::ResourceHandleClient::connectionProperties(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this - 8) = v5;
  uint64_t v6 = *(_DWORD **)(a2 + 40);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a1 + 40) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4++*(_DWORD *)(this - 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + ++*(_DWORD *)(this + 80) = *(void *)(a2 + 80);
  CFTypeRef v8 = *(_DWORD **)(a2 + 88);
  if (v8) {
    *v8 += 2;
  }
  uint64_t v9 = *(unsigned int *)(a2 + 108);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this - 8) = v8;
  *(_DWORD *)(a1 + 10++*(_DWORD *)(this - 8) = v9;
  if (v9)
  {
    if (v9 >> 28) {
      goto LABEL_33;
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(a1 + 104) = v9;
    *(void *)(a1 + 96) = v10;
    uint64_t v11 = *(unsigned int *)(a2 + 108);
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 96);
      uint64_t v13 = v12 + 16 * v11;
      do
      {
        *(_WORD *)uint64_t v10 = *(_WORD *)v12;
        CFTypeRef v14 = *(_DWORD **)(v12 + 8);
        if (v14) {
          *v14 += 2;
        }
        *(void *)(v10 + ++*(_DWORD *)(this - 8) = v14;
        v12 += 16;
        v10 += 16;
      }
      while (v12 != v13);
    }
  }
  uint64_t v15 = *(unsigned int *)(a2 + 124);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = v15;
  if (v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1E1377544);
    }
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)(16 * v15));
    *(_DWORD *)(a1 + 120) = v15;
    *(void *)(a1 + 112) = v16;
    uint64_t v17 = *(unsigned int *)(a2 + 124);
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 112);
      uint64_t v19 = v18 + 16 * v17;
      do
      {
        uint64_t v20 = *(_DWORD **)v18;
        if (*(void *)v18) {
          *v20 += 2;
        }
        *uint64_t v16 = v20;
        char v21 = *(_DWORD **)(v18 + 8);
        if (v21) {
          *v21 += 2;
        }
        v16[1] = v21;
        v18 += 16;
        v16 += 2;
      }
      while (v18 != v19);
    }
  }
  uint64_t v22 = *(unsigned int *)(a2 + 140);
  *(void *)(a1 + 12++*(_DWORD *)(this - 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = v22;
  if (v22)
  {
    if (!(v22 >> 29))
    {
      char v23 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
      *(_DWORD *)(a1 + 136) = v22;
      *(void *)(a1 + 12++*(_DWORD *)(this - 8) = v23;
      uint64_t v24 = *(unsigned int *)(a2 + 140);
      if (v24)
      {
        long long v25 = *(_DWORD ***)(a2 + 128);
        uint64_t v26 = 8 * v24;
        do
        {
          long long v27 = *v25;
          if (*v25) {
            *v27 += 2;
          }
          *v23++ = v27;
          ++v25;
          v26 -= 8;
        }
        while (v26);
      }
      goto LABEL_30;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1E137753CLL);
  }
LABEL_30:
  int v28 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 14++*(_DWORD *)(this - 8) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v28;
  return a1;
}

void WebCore::ResourceResponseBase::~ResourceResponseBase(WebCore::ResourceResponseBase *this, StringImpl *a2)
{
  if (*((unsigned char *)this + 128))
  {
    unint64_t v3 = (const void *)*((void *)this + 15);
    *((void *)this + 15) = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (!v4 || atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) != 1)
  {
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceResponseBase *)((char *)this + 80), a2);
    uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  atomic_store(1u, (unsigned int *)v4);
  uint64_t v11 = *(_DWORD **)(v4 + 128);
  *(void *)(v4 + 12++*(_DWORD *)(this - 8) = 0;
  if (v11) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v11, a2);
  }
  uint64_t v12 = *(WTF::StringImpl **)(v4 + 96);
  *(void *)(v4 + 96) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::fastFree((WTF *)v4, a2);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceResponseBase *)((char *)this + 80), v13);
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6)
  {
LABEL_7:
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
LABEL_10:
  long long v7 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this - 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      CFTypeRef v8 = (WTF::StringImpl *)*((void *)this + 7);
      *((void *)this + 7) = 0;
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    *(_DWORD *)v7 -= 2;
  }
  CFTypeRef v8 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (!v8)
  {
LABEL_18:
    uint64_t v9 = (WTF::StringImpl *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v9) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
LABEL_16:
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v8, v5);
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v9) {
    goto LABEL_23;
  }
LABEL_21:
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, v5);
    uint64_t v10 = *(WTF::StringImpl **)this;
    *(void *)this = 0;
    if (!v10) {
      return;
    }
    goto LABEL_26;
  }
  *(_DWORD *)v9 -= 2;
LABEL_23:
  uint64_t v10 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (!v10) {
    return;
  }
LABEL_26:
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, v5);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
}

_DWORD *WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(_DWORD *result, StringImpl *a2)
{
  uint64_t v2 = (WTF *)result;
  if (*result != 1)
  {
    --*result;
    return result;
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(result + 10), a2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)v2 + 4);
  *((void *)v2 + 4) = 0;
  if (!v4)
  {
LABEL_6:
    long long v5 = (WTF::StringImpl *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, v3);
  long long v5 = (WTF::StringImpl *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (!v5) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, v3);
    uint64_t v6 = (WTF::StringImpl *)*((void *)v2 + 2);
    *((void *)v2 + 2) = 0;
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  uint64_t v6 = (WTF::StringImpl *)*((void *)v2 + 2);
  *((void *)v2 + 2) = 0;
  if (!v6)
  {
LABEL_16:
    long long v7 = (WTF::StringImpl *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_14:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v6, v3);
  long long v7 = (WTF::StringImpl *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (!v7) {
    goto LABEL_21;
  }
LABEL_19:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v3);
    CFTypeRef v8 = v2;
    return (_DWORD *)WTF::fastFree(v8, v3);
  }
  *(_DWORD *)v7 -= 2;
LABEL_21:
  CFTypeRef v8 = v2;
  return (_DWORD *)WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (PingHandle::*&)(void),PingHandle*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  unint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl *result, StringImpl *a2)
{
  if (result != (WTF::StringImpl *)a2)
  {
    unint64_t v3 = result;
    do
    {
      uint64_t v4 = *((unsigned int *)v3 + 5);
      if (v4)
      {
        long long v5 = (WTF **)*((void *)v3 + 1);
        uint64_t v6 = 8 * v4;
        do
        {
          long long v7 = *v5;
          WTF::StringImpl *v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              CFTypeRef v8 = (_DWORD *)*((void *)v7 + 1);
              *((void *)v7 + 1) = 0;
              if (v8)
              {
                if (v8[4] == 1) {
                  (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
                }
                else {
                  --v8[4];
                }
              }
              WTF::fastFree(v7, a2);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
      uint64_t v9 = (WTF *)*((void *)v3 + 1);
      if ((WTF::StringImpl *)((char *)v3 + 24) != v9 && v9 != 0)
      {
        *((void *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      uint64_t result = *(WTF::StringImpl **)v3;
      *(void *)unint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      unint64_t v3 = (WTF::StringImpl *)((char *)v3 + 32);
    }
    while (v3 != (WTF::StringImpl *)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(uint64_t a1, StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v6 = (void *)(a1 + 24 * i);
      if (*v6 != -1)
      {
        uint64_t v7 = a1 + 24 * i;
        uint64_t v8 = *(void *)(v7 + 16);
        if (v8)
        {
          uint64_t v9 = *(unsigned int *)(v8 - 4);
          if (v9)
          {
            uint64_t v10 = *(void *)(v7 + 16);
            do
            {
              uint64_t v11 = *(WTF::StringImpl **)v10;
              if (*(void *)v10 != -1)
              {
                uint64_t v12 = *(WTF **)(v10 + 8);
                if (v12)
                {
                  *(void *)(v10 + ++*(_DWORD *)(this - 8) = 0;
                  *(_DWORD *)(v10 + 16) = 0;
                  WTF::fastFree(v12, a2);
                  uint64_t v11 = *(WTF::StringImpl **)v10;
                }
                *(void *)uint64_t v10 = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2) {
                    WTF::StringImpl::destroy(v11, a2);
                  }
                  else {
                    *(_DWORD *)v11 -= 2;
                  }
                }
              }
              v10 += 24;
              --v9;
            }
            while (v9);
          }
          WTF::fastFree((WTF *)(v8 - 16), a2);
        }
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v6 + 1, a2);
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((void *)(a1 + 24 * i), v5);
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(void *result, StringImpl *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(WTF::StringImpl **)(v3 + 48);
    *(void *)(v3 + 4++*(_DWORD *)(this - 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    long long v5 = *(WTF::StringImpl **)(v3 + 40);
    *(void *)(v3 + 40) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(unsigned int *)(v3 + 32);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))off_1F3C79CB0[v6])(&v7, v3 + 8);
    }
    *(_DWORD *)(v3 + 32) = -1;
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    size_t v9 = 16 * a2;
    uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    uint64_t v12 = (void *)(v11 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v7 = 0;
  int v8 = 0;
  size_t v9 = 16 * a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  uint64_t v12 = (void *)(v11 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v12, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    CFTypeRef v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v17 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v18 = *v17;
      if (*v17 != -1)
      {
        if (v18)
        {
          uint64_t v22 = *a1;
          if (*a1) {
            int v23 = *(_DWORD *)(v22 - 8);
          }
          else {
            int v23 = 0;
          }
          unint64_t v24 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
          unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          unsigned int v27 = v23 & ((v26 >> 31) ^ v26);
          int v28 = 1;
          do
          {
            unsigned int v29 = v27;
            uint64_t v30 = *(void *)(v22 + 16 * v27);
            unsigned int v27 = (v27 + v28++) & v23;
          }
          while (v30);
          uint64_t v31 = (uint64_t *)(v22 + 16 * v29);
          uint64_t v32 = v31[1];
          v31[1] = 0;
          if (v32)
          {
            uint64_t v33 = MEMORY[0x1E4E470D0]();
            if (*(_DWORD *)(v33 + 8))
            {
              *(void *)(v33 + 28++*(_DWORD *)(this - 8) = 0;
              *(_OWORD *)(v33 + 2++*(_DWORD *)(this + 56) = 0u;
              *(_OWORD *)(v33 + 272) = 0u;
              *(_OWORD *)(v33 + 224) = 0u;
              *(_OWORD *)(v33 + 240) = 0u;
              *(_OWORD *)(v33 + 192) = 0u;
              *(_OWORD *)(v33 + 20++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)(v33 + 160) = 0u;
              *(_OWORD *)(v33 + 176) = 0u;
              *(_OWORD *)(v33 + 12++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)(v33 + 144) = 0u;
              *(_OWORD *)(v33 + 96) = 0u;
              *(_OWORD *)(v33 + 112) = 0u;
              *(_OWORD *)(v33 + 64) = 0u;
              *(_OWORD *)(v33 + ++*(_DWORD *)(this + 80) = 0u;
              *(_OWORD *)(v33 + 32) = 0u;
              *(_OWORD *)(v33 + 4++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)uint64_t v33 = 0u;
              *(_OWORD *)(v33 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v33, v10);
            }
          }
          uint64_t *v31 = *v17;
          uint64_t v34 = v6 + 16 * v13;
          uint64_t v35 = *(void *)(v34 + 8);
          *(void *)(v34 + ++*(_DWORD *)(this - 8) = 0;
          v31[1] = v35;
          uint64_t v36 = *(void *)(v34 + 8);
          *(void *)(v34 + ++*(_DWORD *)(this - 8) = 0;
          if (v36)
          {
            uint64_t v37 = MEMORY[0x1E4E470D0]();
            if (*(_DWORD *)(v37 + 8))
            {
              *(void *)(v37 + 28++*(_DWORD *)(this - 8) = 0;
              *(_OWORD *)(v37 + 2++*(_DWORD *)(this + 56) = 0u;
              *(_OWORD *)(v37 + 272) = 0u;
              *(_OWORD *)(v37 + 224) = 0u;
              *(_OWORD *)(v37 + 240) = 0u;
              *(_OWORD *)(v37 + 192) = 0u;
              *(_OWORD *)(v37 + 20++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)(v37 + 160) = 0u;
              *(_OWORD *)(v37 + 176) = 0u;
              *(_OWORD *)(v37 + 12++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)(v37 + 144) = 0u;
              *(_OWORD *)(v37 + 96) = 0u;
              *(_OWORD *)(v37 + 112) = 0u;
              *(_OWORD *)(v37 + 64) = 0u;
              *(_OWORD *)(v37 + ++*(_DWORD *)(this + 80) = 0u;
              *(_OWORD *)(v37 + 32) = 0u;
              *(_OWORD *)(v37 + 4++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)uint64_t v37 = 0u;
              *(_OWORD *)(v37 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v37, v10);
            }
          }
          if (v17 == a3) {
            CFTypeRef v14 = v31;
          }
        }
        else
        {
          uint64_t v19 = v6 + 16 * v13;
          uint64_t v20 = *(void *)(v19 + 8);
          *(void *)(v19 + ++*(_DWORD *)(this - 8) = 0;
          if (v20)
          {
            uint64_t v21 = MEMORY[0x1E4E470D0]();
            if (*(_DWORD *)(v21 + 8))
            {
              *(void *)(v21 + 28++*(_DWORD *)(this - 8) = 0;
              *(_OWORD *)(v21 + 2++*(_DWORD *)(this + 56) = 0u;
              *(_OWORD *)(v21 + 272) = 0u;
              *(_OWORD *)(v21 + 224) = 0u;
              *(_OWORD *)(v21 + 240) = 0u;
              *(_OWORD *)(v21 + 192) = 0u;
              *(_OWORD *)(v21 + 20++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)(v21 + 160) = 0u;
              *(_OWORD *)(v21 + 176) = 0u;
              *(_OWORD *)(v21 + 12++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)(v21 + 144) = 0u;
              *(_OWORD *)(v21 + 96) = 0u;
              *(_OWORD *)(v21 + 112) = 0u;
              *(_OWORD *)(v21 + 64) = 0u;
              *(_OWORD *)(v21 + ++*(_DWORD *)(this + 80) = 0u;
              *(_OWORD *)(v21 + 32) = 0u;
              *(_OWORD *)(v21 + 4++*(_DWORD *)(this - 8) = 0u;
              *(_OWORD *)uint64_t v21 = 0u;
              *(_OWORD *)(v21 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v21, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    CFTypeRef v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

const void **WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(const void **result, WTF *a2)
{
  unint64_t v2 = *((unsigned int *)result + 2);
  unint64_t v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 16;
  }
  if (v4 <= (unint64_t)a2) {
    unint64_t v5 = (unint64_t)a2;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > v2)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v6 = result;
      unsigned int v7 = (void *)*result;
      size_t v8 = *((unsigned int *)result + 3);
      size_t v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *((_DWORD *)v6 + 2) = v5;
      void *v6 = v9;
      uint64_t result = (const void **)memcpy(v9, v7, v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          void *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          uint64_t v11 = (WTF *)v7;
        }
        else
        {
          uint64_t v11 = (WTF *)v7;
        }
        return (const void **)WTF::fastFree(v11, v10);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl(WTF::URL const&,WebCore::SocketStreamHandleClient &,PAL::SessionID,WTF::String const&,WebCore::SourceApplicationAuditToken &&,WebCore::StorageSessionProvider const*,BOOL)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79D20;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (!v2) {
    return a1;
  }
  unint64_t v3 = (unsigned int *)(v2 + 8);
  if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, v3);
  unint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C79D48;
  v5[1] = v3;
  uint64_t v6 = v5;
  WTF::ensureOnMainThread();
  if (!v6) {
    return a1;
  }
  (*(void (**)(void *))(*v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl(WTF::URL const&,WebCore::SocketStreamHandleClient &,PAL::SessionID,WTF::String const&,WebCore::SourceApplicationAuditToken &&,WebCore::StorageSessionProvider const*,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79D20;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3) {
    return WTF::fastFree(this, a2);
  }
  unint64_t v4 = (unsigned int *)(v3 + 8);
  if (atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF) != 1) {
    return WTF::fastFree(this, a2);
  }
  atomic_store(1u, v4);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1F3C79D48;
  v6[1] = v4;
  size_t v8 = v6;
  WTF::ensureOnMainThread();
  if (!v8) {
    return WTF::fastFree(this, a2);
  }
  (*(void (**)(void *))(*v8 + 8))(v8);
  return WTF::fastFree(this, v7);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl(WTF::URL const&,WebCore::SocketStreamHandleClient &,PAL::SessionID,WTF::String const&,WebCore::SourceApplicationAuditToken &&,WebCore::StorageSessionProvider const*,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 56);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v3 = v8;
  LODWORD(v++*(_DWORD *)(this - 8) = 0;
  unint64_t v4 = *(WTF::StringImpl **)(v1 + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  size_t v9 = v4;
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  uint64_t v10 = v3;
  char v11 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v2 + 56))(v2, v1, &v8);
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (!v6)
  {
LABEL_8:
    uint64_t result = v9;
    size_t v9 = 0;
    if (!result) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v6, v5);
  uint64_t result = v9;
  size_t v9 = 0;
  if (!result) {
    goto LABEL_13;
  }
LABEL_11:
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    if (!v3) {
      return result;
    }
    goto LABEL_16;
  }
  *(_DWORD *)result -= 2;
LABEL_13:
  if (!v3) {
    return result;
  }
LABEL_16:
  if (*(_DWORD *)v3 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v5);
  }
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::SocketStreamHandle,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

void WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::pacExecutionCallback(void *,__CFArray const*,__CFError *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  if (!*(_DWORD *)(v2 + 64))
  {
    WebCore::SocketStreamHandleImpl::chooseProxyFromArray((CFRunLoopSourceRef *)v2, **(CFArrayRef **)(a1 + 16));
    WebCore::SocketStreamHandleImpl::createStreams(**(WebCore::SocketStreamHandleImpl ***)(a1 + 8));
    uint64_t v3 = **(CFRunLoopSourceRef ***)(a1 + 8);
    WebCore::SocketStreamHandleImpl::scheduleStreams(v3);
  }
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(unint64_t result, unsigned int a2, int a3, int8x16_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v10 = (void *)result;
  if (!a3)
  {
    if (a2 > 0x7FFFFFEF) {
      goto LABEL_10;
    }
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    uint64_t v11 = v88;
    if (!v88) {
      goto LABEL_11;
    }
    unint64_t v13 = v88 + 20;
    *(_DWORD *)uint64_t v88 = 2;
    *(_DWORD *)(v88 + 4) = a2;
    *(void *)(v88 + ++*(_DWORD *)(this - 8) = v88 + 20;
    *(_DWORD *)(v88 + 16) = 0;
    uint64_t result = v88 + 20 + 2 * a5;
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      unint64_t v14 = v13 + 2 * (a5 & 0xFFFFFFC0);
      long long v15 = 0uLL;
      do
      {
        v89.val[0] = *a4;
        int8x16_t v16 = a4[1];
        v91.val[0] = a4[2];
        int8x16_t v17 = a4[3];
        a4 += 4;
        int8x16_t v18 = v17;
        v91.val[1] = 0uLL;
        v93.val[0] = v16;
        v89.val[1] = 0uLL;
        uint64_t v19 = (char *)v13;
        vst2q_s8(v19, v89);
        v19 += 32;
        v93.val[1] = 0uLL;
        vst2q_s8(v19, v93);
        uint64_t v20 = (char *)(v13 + 64);
        vst2q_s8(v20, v91);
        uint64_t v21 = (char *)(v13 + 96);
        vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
        v13 += 128;
      }
      while (v13 != v14);
      unint64_t v13 = v14;
    }
    if (v13 != result)
    {
      unint64_t v22 = v88 + 2 * a5 - v13 + 18;
      if (v22 < 0xE
        || (v13 < (unint64_t)a4->u64 + (v22 >> 1) + 1
          ? (BOOL v23 = (unint64_t)a4 >= (v22 & 0xFFFFFFFFFFFFFFFELL) + v13 + 2)
          : (BOOL v23 = 1),
            !v23))
      {
        unint64_t v26 = (_WORD *)v13;
        unsigned int v27 = a4;
        goto LABEL_27;
      }
      uint64_t v24 = (v22 >> 1) + 1;
      if (v22 >= 0x3E)
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFE0;
        int v55 = (uint8x8_t *)&a4[1];
        __int16 v56 = (uint16x8_t *)(v13 + 32);
        unint64_t v57 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v58 = *(uint8x16_t *)v55[-2].i8;
          uint16x8_t v59 = vmovl_u8(*v55);
          uint16x8_t v60 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
          v56[-2] = vmovl_u8(*(uint8x8_t *)v58.i8);
          v56[-1] = vmovl_high_u8(v58);
          *__int16 v56 = v59;
          v56[1] = v60;
          v56 += 4;
          v55 += 4;
          v57 -= 32;
        }
        while (v57);
        if (v24 == v25) {
          goto LABEL_28;
        }
        if ((v24 & 0x18) == 0)
        {
          unsigned int v27 = (int8x16_t *)((char *)a4 + v25);
          unint64_t v26 = (_WORD *)(v13 + 2 * v25);
          do
          {
LABEL_27:
            __int16 v28 = v27->u8[0];
            unsigned int v27 = (int8x16_t *)((char *)v27 + 1);
            *v26++ = v28;
          }
          while (v26 != (_WORD *)result);
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v25 = 0;
      }
      unint64_t v26 = (_WORD *)(v13 + 2 * (v24 & 0xFFFFFFFFFFFFFFF8));
      unsigned int v27 = (int8x16_t *)((char *)a4 + (v24 & 0xFFFFFFFFFFFFFFF8));
      int v61 = (uint8x8_t *)&a4->i8[v25];
      size_t v62 = (uint16x8_t *)(v13 + 2 * v25);
      unint64_t v63 = v25 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v64 = *v61++;
        *v62++ = vmovl_u8(v64);
        v63 += 8;
      }
      while (v63);
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_27;
      }
    }
LABEL_28:
    if (!a6) {
      goto LABEL_11;
    }
    unsigned int v29 = *(int8x16_t **)(a6 + 8);
    uint64_t v30 = *(unsigned int *)(a6 + 4);
    if ((*(unsigned char *)(a6 + 16) & 4) == 0)
    {
      if (!v30) {
        goto LABEL_11;
      }
      if (v30 == 1)
      {
        *(_WORD *)uint64_t result = v29->i16[0];
        goto LABEL_11;
      }
      size_t v31 = 2 * v30;
LABEL_66:
      uint64_t result = (unint64_t)memcpy((void *)result, v29, v31);
      goto LABEL_11;
    }
    size_t v39 = (_WORD *)(result + 2 * v30);
    if (v30 >= 0x40)
    {
      unint64_t v40 = result + 2 * (v30 & 0xFFFFFFC0);
      long long v41 = 0uLL;
      do
      {
        v90.val[0] = *v29;
        int8x16_t v42 = v29[1];
        v92.val[0] = v29[2];
        int8x16_t v43 = v29[3];
        v29 += 4;
        int8x16_t v44 = v43;
        v92.val[1] = 0uLL;
        v94.val[0] = v42;
        v90.val[1] = 0uLL;
        int v45 = (char *)result;
        vst2q_s8(v45, v90);
        v45 += 32;
        v94.val[1] = 0uLL;
        vst2q_s8(v45, v94);
        long long v46 = (char *)(result + 64);
        vst2q_s8(v46, v92);
        uint64_t v47 = (char *)(result + 96);
        vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
        result += 128;
      }
      while (result != v40);
      uint64_t result = v40;
    }
    if ((_WORD *)result == v39) {
      goto LABEL_11;
    }
    unint64_t v48 = v88 + 2 * (a5 + v30) - result + 18;
    if (v48 < 0xE
      || result < (unint64_t)v29->u64 + (v48 >> 1) + 1
      && (unint64_t)v29 < (v48 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
    {
      int v49 = (_WORD *)result;
      uint64_t v50 = v29;
      goto LABEL_60;
    }
    uint64_t v65 = (v48 >> 1) + 1;
    if (v48 >= 0x3E)
    {
      unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFE0;
      unsigned long long v78 = (uint8x8_t *)&v29[1];
      size_t v79 = (uint16x8_t *)(result + 32);
      unint64_t v80 = v65 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v81 = *(uint8x16_t *)v78[-2].i8;
        uint16x8_t v82 = vmovl_u8(*v78);
        uint16x8_t v83 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
        v79[-2] = vmovl_u8(*(uint8x8_t *)v81.i8);
        v79[-1] = vmovl_high_u8(v81);
        *size_t v79 = v82;
        v79[1] = v83;
        v79 += 4;
        v78 += 4;
        v80 -= 32;
      }
      while (v80);
      if (v65 == v66) {
        goto LABEL_11;
      }
      if ((v65 & 0x18) == 0)
      {
        uint64_t v50 = (int8x16_t *)((char *)v29 + v66);
        int v49 = (_WORD *)(result + 2 * v66);
        goto LABEL_60;
      }
    }
    else
    {
      unint64_t v66 = 0;
    }
    int v49 = (_WORD *)(result + 2 * (v65 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v50 = (int8x16_t *)((char *)v29 + (v65 & 0xFFFFFFFFFFFFFFF8));
    char v84 = (uint8x8_t *)&v29->i8[v66];
    char v85 = (uint16x8_t *)(result + 2 * v66);
    unint64_t v86 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v87 = *v84++;
      *v85++ = vmovl_u8(v87);
      v86 += 8;
    }
    while (v86);
    if (v65 == (v65 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    do
    {
LABEL_60:
      __int16 v51 = v50->u8[0];
      uint64_t v50 = (int8x16_t *)((char *)v50 + 1);
      *v49++ = v51;
    }
    while (v49 != v39);
    goto LABEL_11;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v11 = v88;
  if (!v88) {
    goto LABEL_11;
  }
  uint64_t v12 = (unsigned char *)(v88 + 20);
  *(_DWORD *)uint64_t v88 = 2;
  *(_DWORD *)(v88 + 4) = a2;
  *(void *)(v88 + ++*(_DWORD *)(this - 8) = v88 + 20;
  *(_DWORD *)(v88 + 16) = 4;
  if (!a5) {
    goto LABEL_7;
  }
  if (a5 == 1)
  {
    unsigned char *v12 = a4->i8[0];
LABEL_7:
    if (!a6) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
  uint64_t result = (unint64_t)memcpy((void *)(v88 + 20), a4, a5);
  if (!a6) {
    goto LABEL_11;
  }
LABEL_34:
  uint64_t result = (unint64_t)&v12[a5];
  unsigned int v29 = *(int8x16_t **)(a6 + 8);
  size_t v31 = *(unsigned int *)(a6 + 4);
  if ((*(unsigned char *)(a6 + 16) & 4) != 0)
  {
    if (!v31) {
      goto LABEL_11;
    }
    if (v31 == 1)
    {
      *(unsigned char *)uint64_t result = v29->i8[0];
      goto LABEL_11;
    }
    goto LABEL_66;
  }
  uint64_t v32 = (unsigned char *)(result + v31);
  if (v31 >= 0x10)
  {
    unint64_t v33 = result + (v31 & 0xFFFFFFF0);
    do
    {
      unsigned long long v34 = (unsigned __int128)vld2q_s8(v29->i8);
      v29 += 2;
      *(_OWORD *)uint64_t result = v34;
      result += 16;
    }
    while (result != v33);
    uint64_t result = v33;
  }
  if ((unsigned char *)result != v32)
  {
    size_t v35 = v88 + v31 + a5;
    unint64_t v36 = v35 - result + 20;
    if (v36 < 8
      || (result < (unint64_t)&v29[2].u64[1] + 2 * v35 + -2 * result
        ? (BOOL v37 = (unint64_t)v29 >= v35 + 20)
        : (BOOL v37 = 1),
          !v37))
    {
      CFTypeRef v52 = (unsigned char *)result;
      unint64_t v53 = v29;
      goto LABEL_63;
    }
    if (v36 >= 0x20)
    {
      unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v67 = v29 + 2;
      size_t v68 = (int8x16_t *)(result + 16);
      unint64_t v69 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v71 = v67[-2];
        int8x16_t v70 = v67[-1];
        int8x16_t v73 = *v67;
        int8x16_t v72 = v67[1];
        v67 += 4;
        v68[-1] = vuzp1q_s8(v71, v70);
        *size_t v68 = vuzp1q_s8(v73, v72);
        v68 += 2;
        v69 -= 32;
      }
      while (v69);
      if (v36 == v38) {
        goto LABEL_11;
      }
      if ((v36 & 0x18) == 0)
      {
        unint64_t v53 = (int8x16_t *)((char *)v29 + 2 * v38);
        CFTypeRef v52 = (unsigned char *)(result + v38);
        do
        {
LABEL_63:
          char v54 = v53->i8[0];
          unint64_t v53 = (int8x16_t *)((char *)v53 + 2);
          *v52++ = v54;
        }
        while (v52 != v32);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v38 = 0;
    }
    CFTypeRef v52 = (unsigned char *)(result + (v36 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v53 = (int8x16_t *)((char *)v29 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v74 = (int16x8_t *)((char *)v29 + 2 * v38);
    int v75 = (int8x8_t *)(result + v38);
    unint64_t v76 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v77 = *v74++;
      *v75++ = vmovn_s16(v77);
      v76 += 8;
    }
    while (v76);
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_63;
    }
  }
LABEL_11:
  *uint64_t v10 = v11;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::readStreamCallback(__CFReadStream *,unsigned long,void *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  unint64_t v4 = *(__CFReadStream **)(*v2 + 120);
  if (!v4) {
    return;
  }
  uint64_t v5 = **(void **)(a1 + 16);
  switch(v5)
  {
    case 16:
      WebCore::SocketStreamHandleImpl::platformClose((WebCore::SocketStreamHandleImpl *)v3);
      break;
    case 8:
      int8x16_t v18 = CFReadStreamCopyError(v4);
      WebCore::SocketStreamHandleImpl::reportErrorToClient((WebCore::SocketStreamHandleImpl *)v3, v18);
      if (v18)
      {
        CFRelease(v18);
      }
      break;
    case 2:
      int v6 = *(_DWORD *)(v3 + 80);
      if (v6 == 2) {
        return;
      }
      if (v6 != 3) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v3 + 84) != 3)
      {
LABEL_28:
        uint64_t v19 = *(NSObject **)(MEMORY[0x1E4FB6498] + 32);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1E1345000, v19, OS_LOG_TYPE_DEFAULT, "SocketStreamHandleImpl::readStreamCallback - m_connectionSubState is Connected", buf, 2u);
        }
        *(_DWORD *)(v3 + ++*(_DWORD *)(this + 80) = 4;
        *(_DWORD *)(v3 + 64) = 1;
        (*(void (**)(void, uint64_t))(**(void **)(v3 + 56) + 16))(*(void *)(v3 + 56), v3);
LABEL_31:
        if (*(_DWORD *)(v3 + 64) != 3)
        {
          CFIndex numBytesRead = 0;
          Buffer = CFReadStreamGetBuffer(*(CFReadStreamRef *)(v3 + 120), 0, &numBytesRead);
          if (Buffer)
          {
            uint64_t v21 = (uint8_t *)Buffer;
            CFIndex v22 = numBytesRead;
          }
          else
          {
            uint64_t v21 = buf;
            CFIndex v22 = CFReadStreamRead(*(CFReadStreamRef *)(v3 + 120), buf, 1024);
            CFIndex numBytesRead = v22;
          }
          if (v22)
          {
            if (v22 == -1) {
              (*(void (**)(void, uint64_t))(**(void **)(v3 + 56) + 40))(*(void *)(v3 + 56), v3);
            }
            else {
              (*(void (**)(void, uint64_t, uint8_t *))(**(void **)(v3 + 56) + 32))(*(void *)(v3 + 56), v3, v21);
            }
          }
        }
        return;
      }
      unsigned int v7 = (__CFHTTPMessage *)CFReadStreamCopyProperty(v4, (CFStreamPropertyKey)*MEMORY[0x1E4F19098]);
      if (v7)
      {
        size_t v8 = v7;
        CFTypeID v9 = CFGetTypeID(v7);
        if (v9 != CFHTTPMessageGetTypeID())
        {
          __break(0xC471u);
          JUMPOUT(0x1E13797E8);
        }
        _CFHTTPMessageSetResponseURL();
        ResponseStatusint Code = CFHTTPMessageGetResponseStatusCode(v8);
        if (ResponseStatusCode != 200)
        {
          int v11 = ResponseStatusCode;
          if (ResponseStatusCode != 407)
          {
            uint64_t v23 = *(void *)(v3 + 56);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v24 = *(WTF::StringImpl **)buf;
            *(_DWORD *)buf = v11;
            unint64_t v25 = *(WTF::StringImpl **)(v3 + 16);
            if (v25) {
              *(_DWORD *)v25 += 2;
            }
            __int16 v117 = v25;
            if (v24) {
              *(_DWORD *)v24 += 2;
            }
            v118 = v24;
            LOBYTE(v119) = 0;
            (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v23 + 56))(v23, v3, buf);
            unsigned int v27 = v118;
            v118 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2) {
                WTF::StringImpl::destroy(v27, v26);
              }
              else {
                *(_DWORD *)v27 -= 2;
              }
            }
            unint64_t v33 = v117;
            __int16 v117 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2) {
                WTF::StringImpl::destroy(v33, v26);
              }
              else {
                *(_DWORD *)v33 -= 2;
              }
            }
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, v26);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
            WebCore::SocketStreamHandleImpl::platformClose((WebCore::SocketStreamHandleImpl *)v3);
            goto LABEL_244;
          }
          uint64_t v12 = CFHTTPAuthenticationCreateFromResponse(0, v8);
          if (!CFHTTPAuthenticationRequiresUserNameAndPassword(v12))
          {
            uint64_t v28 = *(void *)(v3 + 56);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            unsigned int v29 = *(WTF::StringImpl **)buf;
            *(_DWORD *)buf = 0;
            uint64_t v30 = *(WTF::StringImpl **)(v3 + 16);
            if (v30) {
              *(_DWORD *)v30 += 2;
            }
            __int16 v117 = v30;
            if (v29) {
              *(_DWORD *)v29 += 2;
            }
            v118 = v29;
            LOBYTE(v119) = 0;
            (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v28 + 56))(v28, v3, buf);
            uint64_t v32 = v118;
            v118 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2) {
                WTF::StringImpl::destroy(v32, v31);
              }
              else {
                *(_DWORD *)v32 -= 2;
              }
            }
            size_t v39 = v117;
            __int16 v117 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2) {
                WTF::StringImpl::destroy(v39, v31);
              }
              else {
                *(_DWORD *)v39 -= 2;
              }
            }
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v31);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
            goto LABEL_242;
          }
          unsigned int valuePtr = 0;
          CFNumberGetValue(*(CFNumberRef *)(v3 + 96), kCFNumberIntType, &valuePtr);
          CFStringRef v13 = CFHTTPAuthenticationCopyMethod(v12);
          CFStringRef v14 = CFHTTPAuthenticationCopyRealm(v12);
          CFStringRef v15 = v14;
          if (v13 && v14)
          {
            MEMORY[0x1E4E442D0](buf, *(void *)(v3 + 88));
            uint64_t v16 = valuePtr;
            MEMORY[0x1E4E442D0](&numBytesRead, v15);
            if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E4F18F60]))
            {
              uint64_t v17 = 2;
            }
            else if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E4F18F68]))
            {
              uint64_t v17 = 3;
            }
            else if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E4F18F70]))
            {
              uint64_t v17 = 5;
            }
            else if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E4F18F78]))
            {
              uint64_t v17 = 6;
            }
            else
            {
              uint64_t v17 = 100;
            }
            LOBYTE(cf) = 0;
            char v111 = 0;
            MEMORY[0x1E4E45CC0](&v112, buf, v16, 6, &numBytesRead, v17, &cf);
            if (v111)
            {
              CFTypeRef v42 = cf;
              CFTypeRef cf = 0;
              if (v42) {
                CFRelease(v42);
              }
            }
            int8x16_t v43 = (WTF::StringImpl *)numBytesRead;
            CFIndex numBytesRead = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2) {
                WTF::StringImpl::destroy(v43, v41);
              }
              else {
                *(_DWORD *)v43 -= 2;
              }
            }
            int8x16_t v44 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2) {
                WTF::StringImpl::destroy(v44, v41);
              }
              else {
                *(_DWORD *)v44 -= 2;
              }
            }
            unint64_t v108 = 0;
            int8x16_t v109 = 0;
            if (*(unsigned char *)(v3 + 112)) {
              goto LABEL_174;
            }
            WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
            CFTypeRef v119 = 0;
            int v45 = *(uint64_t (****)(void))(v3 + 160);
            if (v45 && (**v45)(v45))
            {
              WebCore::CredentialStorage::getFromPersistentStorage();
              CFIndex v47 = numBytesRead;
              CFIndex numBytesRead = 0;
              unint64_t v48 = *(WTF::StringImpl **)buf;
              *(void *)buf = v47;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2) {
                  WTF::StringImpl::destroy(v48, v46);
                }
                else {
                  *(_DWORD *)v48 -= 2;
                }
              }
              int v49 = v121;
              int8x16_t v121 = 0;
              uint64_t v50 = v117;
              __int16 v117 = v49;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2) {
                  WTF::StringImpl::destroy(v50, v46);
                }
                else {
                  *(_DWORD *)v50 -= 2;
                }
              }
              LOBYTE(v11++*(_DWORD *)(this - 8) = v122;
              __int16 v51 = v123;
              int8x16_t v123 = 0;
              CFTypeRef v52 = v119;
              CFTypeRef v119 = v51;
              if (v52)
              {
                CFRelease(v52);
                unint64_t v53 = v123;
                int8x16_t v123 = 0;
                if (v53) {
                  CFRelease(v53);
                }
              }
              char v54 = v121;
              int8x16_t v121 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2) {
                  WTF::StringImpl::destroy(v54, v46);
                }
                else {
                  *(_DWORD *)v54 -= 2;
                }
              }
              int v55 = (WTF::StringImpl *)numBytesRead;
              CFIndex numBytesRead = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2) {
                  WTF::StringImpl::destroy(v55, v46);
                }
                else {
                  *(_DWORD *)v55 -= 2;
                }
              }
              if (WebCore::Credential::isEmpty((WebCore::Credential *)buf))
              {
                WebCore::CredentialStorage::get();
                CFIndex v57 = numBytesRead;
                CFIndex numBytesRead = 0;
                uint8x16_t v58 = *(WTF::StringImpl **)buf;
                *(void *)buf = v57;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2) {
                    WTF::StringImpl::destroy(v58, v56);
                  }
                  else {
                    *(_DWORD *)v58 -= 2;
                  }
                }
                uint16x8_t v59 = v121;
                int8x16_t v121 = 0;
                uint16x8_t v60 = v117;
                __int16 v117 = v59;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2) {
                    WTF::StringImpl::destroy(v60, v56);
                  }
                  else {
                    *(_DWORD *)v60 -= 2;
                  }
                }
                LOBYTE(v11++*(_DWORD *)(this - 8) = v122;
                int v61 = v123;
                int8x16_t v123 = 0;
                CFTypeRef v62 = v119;
                CFTypeRef v119 = v61;
                if (v62)
                {
                  CFRelease(v62);
                  unint64_t v63 = v123;
                  int8x16_t v123 = 0;
                  if (v63) {
                    CFRelease(v63);
                  }
                }
                uint8x8_t v64 = v121;
                int8x16_t v121 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2) {
                    WTF::StringImpl::destroy(v64, v56);
                  }
                  else {
                    *(_DWORD *)v64 -= 2;
                  }
                }
                uint64_t v65 = (WTF::StringImpl *)numBytesRead;
                CFIndex numBytesRead = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2) {
                    WTF::StringImpl::destroy(v65, v56);
                  }
                  else {
                    *(_DWORD *)v65 -= 2;
                  }
                }
              }
            }
            char isEmpty = WebCore::Credential::isEmpty((WebCore::Credential *)buf);
            if ((isEmpty & 1) == 0)
            {
              unint64_t v69 = *(WTF::StringImpl **)WebCore::CredentialBase::user((WebCore::CredentialBase *)buf);
              if (v69) {
                *(_DWORD *)v69 += 2;
              }
              int8x16_t v70 = v109;
              int8x16_t v109 = v69;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2) {
                  WTF::StringImpl::destroy(v70, v68);
                }
                else {
                  *(_DWORD *)v70 -= 2;
                }
              }
              int8x16_t v71 = *(WTF::StringImpl **)WebCore::CredentialBase::password((WebCore::CredentialBase *)buf);
              if (v71) {
                *(_DWORD *)v71 += 2;
              }
              int8x16_t v72 = v108;
              unint64_t v108 = v71;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2) {
                  WTF::StringImpl::destroy(v72, v66);
                }
                else {
                  *(_DWORD *)v72 -= 2;
                }
              }
            }
            CFTypeRef v73 = v119;
            CFTypeRef v119 = 0;
            if (v73) {
              CFRelease(v73);
            }
            unint64_t v74 = v117;
            __int16 v117 = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 2) {
                WTF::StringImpl::destroy(v74, v66);
              }
              else {
                *(_DWORD *)v74 -= 2;
              }
            }
            int v75 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2) {
                WTF::StringImpl::destroy(v75, v66);
              }
              else {
                *(_DWORD *)v75 -= 2;
              }
            }
            if (isEmpty)
            {
LABEL_174:
              uint64_t v76 = *(void *)(v3 + 56);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              int16x8_t v77 = *(WTF::StringImpl **)buf;
              *(_DWORD *)buf = 0;
              unsigned long long v78 = *(WTF::StringImpl **)(v3 + 16);
              if (v78) {
                *(_DWORD *)v78 += 2;
              }
              __int16 v117 = v78;
              if (v77) {
                *(_DWORD *)v77 += 2;
              }
              v118 = v77;
              LOBYTE(v119) = 0;
              (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v76 + 56))(v76, v3, buf);
              unint64_t v80 = v118;
              v118 = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 == 2) {
                  WTF::StringImpl::destroy(v80, v79);
                }
                else {
                  *(_DWORD *)v80 -= 2;
                }
              }
              uint8x16_t v81 = v117;
              __int16 v117 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2) {
                  WTF::StringImpl::destroy(v81, v79);
                }
                else {
                  *(_DWORD *)v81 -= 2;
                }
              }
              if (v77)
              {
                if (*(_DWORD *)v77 == 2) {
                  WTF::StringImpl::destroy(v77, v79);
                }
                else {
                  *(_DWORD *)v77 -= 2;
                }
              }
            }
            else
            {
              Request = CFHTTPMessageCreateRequest(0, @"GET", *(CFURLRef *)(v3 + 136), (CFStringRef)*MEMORY[0x1E4F18F90]);
              WTF::String::createCFString((uint64_t *)buf, (WTF::String *)&v109);
              CFStringRef v83 = *(const __CFString **)buf;
              WTF::String::createCFString(&numBytesRead, (WTF::String *)&v108);
              CFHTTPMessageApplyCredentials(Request, v12, v83, (CFStringRef)numBytesRead, 0);
              char v84 = (const void *)numBytesRead;
              CFIndex numBytesRead = 0;
              if (v84) {
                CFRelease(v84);
              }
              char v85 = *(WTF::StringImpl **)buf;
              *(void *)buf = 0;
              if (v85) {
                CFRelease(v85);
              }
              unsigned int v107 = Request;
              CFStringRef v86 = CFHTTPMessageCopyHeaderFieldValue(Request, @"Proxy-Authorization");
              if (v86)
              {
                CFStringRef v87 = v86;
                uint64_t v88 = *(__CFReadStream **)(v3 + 120);
                CFStringRef v89 = (const __CFString *)*MEMORY[0x1E4F19080];
                CFDictionaryRef v90 = (const __CFDictionary *)CFReadStreamCopyProperty(v88, (CFStreamPropertyKey)*MEMORY[0x1E4F19080]);
                CFAllocatorRef v91 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                CFDictionaryRef v106 = v90;
                MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v90);
                *(void *)buf = @"Proxy-Authorization";
                CFIndex numBytesRead = (CFIndex)v87;
                CFDictionaryRef v93 = CFDictionaryCreate(v91, (const void **)buf, (const void **)&numBytesRead, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F19078], v93);
                CFReadStreamSetProperty(v88, v89, MutableCopy);
                if (v93) {
                  CFRelease(v93);
                }
                if (MutableCopy) {
                  CFRelease(MutableCopy);
                }
                int8x16x2_t v94 = v107;
                if (v106) {
                  CFRelease(v106);
                }
                *(unsigned char *)(v3 + 112) = 1;
                CFRelease(v87);
              }
              else
              {
                uint64_t v95 = *(void *)(v3 + 56);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                long long v96 = *(WTF::StringImpl **)buf;
                *(_DWORD *)buf = 0;
                uint64_t v97 = *(WTF::StringImpl **)(v3 + 16);
                if (v97) {
                  *(_DWORD *)v97 += 2;
                }
                __int16 v117 = v97;
                if (v96) {
                  *(_DWORD *)v96 += 2;
                }
                uint32x4_t v98 = v96;
                v118 = v96;
                LOBYTE(v119) = 0;
                (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v95 + 56))(v95, v3, buf);
                int v99 = v118;
                v118 = 0;
                if (v99)
                {
                  if (*(_DWORD *)v99 == 2) {
                    WTF::StringImpl::destroy(v99, v79);
                  }
                  else {
                    *(_DWORD *)v99 -= 2;
                  }
                }
                unint64_t v100 = v117;
                __int16 v117 = 0;
                if (v100)
                {
                  if (*(_DWORD *)v100 == 2) {
                    WTF::StringImpl::destroy(v100, v79);
                  }
                  else {
                    *(_DWORD *)v100 -= 2;
                  }
                }
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2) {
                    WTF::StringImpl::destroy(v98, v79);
                  }
                  else {
                    *(_DWORD *)v98 -= 2;
                  }
                }
                int8x16x2_t v94 = v107;
              }
              if (v94) {
                CFRelease(v94);
              }
            }
            int v101 = v108;
            unint64_t v108 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2) {
                WTF::StringImpl::destroy(v101, v79);
              }
              else {
                *(_DWORD *)v101 -= 2;
              }
            }
            int v102 = v109;
            int8x16_t v109 = 0;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2) {
                WTF::StringImpl::destroy(v102, v79);
              }
              else {
                *(_DWORD *)v102 -= 2;
              }
            }
            CFTypeRef v103 = v114;
            CFTypeRef v114 = 0;
            if (v103) {
              CFRelease(v103);
            }
            uint64_t v104 = v113;
            uint64_t v113 = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 2) {
                WTF::StringImpl::destroy(v104, v79);
              }
              else {
                *(_DWORD *)v104 -= 2;
              }
            }
            unint64_t v105 = v112;
            int8x16_t v112 = 0;
            if (v105)
            {
              if (*(_DWORD *)v105 == 2) {
                WTF::StringImpl::destroy(v105, v79);
              }
              else {
                *(_DWORD *)v105 -= 2;
              }
            }
          }
          else
          {
            uint64_t v34 = *(void *)(v3 + 56);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            size_t v35 = *(WTF::StringImpl **)buf;
            *(_DWORD *)buf = 0;
            unint64_t v36 = *(WTF::StringImpl **)(v3 + 16);
            if (v36) {
              *(_DWORD *)v36 += 2;
            }
            __int16 v117 = v36;
            if (v35) {
              *(_DWORD *)v35 += 2;
            }
            v118 = v35;
            LOBYTE(v119) = 0;
            (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v34 + 56))(v34, v3, buf);
            unint64_t v38 = v118;
            v118 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2) {
                WTF::StringImpl::destroy(v38, v37);
              }
              else {
                *(_DWORD *)v38 -= 2;
              }
            }
            unint64_t v40 = v117;
            __int16 v117 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2) {
                WTF::StringImpl::destroy(v40, v37);
              }
              else {
                *(_DWORD *)v40 -= 2;
              }
            }
            if (v35)
            {
              if (*(_DWORD *)v35 == 2) {
                WTF::StringImpl::destroy(v35, v37);
              }
              else {
                *(_DWORD *)v35 -= 2;
              }
            }
            if (!v15) {
              goto LABEL_240;
            }
          }
          CFRelease(v15);
LABEL_240:
          if (v13) {
            CFRelease(v13);
          }
LABEL_242:
          if (v12) {
            CFRelease(v12);
          }
LABEL_244:
          CFRelease(v8);
          return;
        }
        CFRelease(v8);
        goto LABEL_28;
      }
      _CFHTTPMessageSetResponseURL();
      break;
    default:
      return;
  }
}

void WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::writeStreamCallback(__CFWriteStream *,unsigned long,void *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  unint64_t v4 = *(__CFWriteStream **)(*v2 + 128);
  if (!v4) {
    return;
  }
  uint64_t v5 = **(void **)(a1 + 16);
  if (v5 == 8)
  {
    size_t v35 = CFWriteStreamCopyError(v4);
    WebCore::SocketStreamHandleImpl::reportErrorToClient((WebCore::SocketStreamHandleImpl *)v3, v35);
    if (v35)
    {
      CFRelease(v35);
    }
  }
  else
  {
    if (v5 != 4) {
      return;
    }
    if (!CFWriteStreamCanAcceptBytes(v4)) {
      return;
    }
    int v7 = *(_DWORD *)(v3 + 80);
    if (v7 == 2) {
      return;
    }
    if (v7 == 3)
    {
      if (*(_DWORD *)(v3 + 84) == 3)
      {
        size_t v8 = (__CFHTTPMessage *)CFReadStreamCopyProperty(*(CFReadStreamRef *)(v3 + 120), (CFStreamPropertyKey)*MEMORY[0x1E4F19098]);
        if (!v8)
        {
          _CFHTTPMessageSetResponseURL();
          return;
        }
        CFTypeID v9 = v8;
        CFTypeID v10 = CFGetTypeID(v8);
        if (v10 != CFHTTPMessageGetTypeID())
        {
          __break(0xC471u);
          JUMPOUT(0x1E1379BA8);
        }
        _CFHTTPMessageSetResponseURL();
        ResponseStatusint Code = CFHTTPMessageGetResponseStatusCode(v9);
        CFRelease(v9);
        if (ResponseStatusCode != 200) {
          return;
        }
      }
      *(_DWORD *)(v3 + ++*(_DWORD *)(this + 80) = 4;
      *(_DWORD *)(v3 + 64) = 1;
      (*(void (**)(void, uint64_t))(**(void **)(v3 + 56) + 16))(*(void *)(v3 + 56), v3);
    }
    int v12 = *(_DWORD *)(v3 + 64);
    if ((v12 - 1) <= 1)
    {
      uint64_t v13 = *(void *)(v3 + 168);
      if (v13) {
        goto LABEL_14;
      }
      if (v12 != 1)
      {
        if (v12 == 2)
        {
          unint64_t v36 = (unsigned int *)(v3 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
          (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
          *(_DWORD *)(v3 + 64) = 3;
          if (atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v36);
            unint64_t v38 = (void *)WTF::fastMalloc((WTF *)0x10);
            *unint64_t v38 = &unk_1F3C79D48;
            v38[1] = v36;
            size_t v39 = v38;
            WTF::ensureOnMainThread();
            if (v39) {
              (*(void (**)(void *))(*v39 + 8))(v39);
            }
          }
          return;
        }
        while (1)
        {
LABEL_14:
          if (v13)
          {
            uint64_t v14 = *(void *)(v3 + 184);
            if (v14 == *(void *)(v3 + 192))
            {
              __break(0xC471u);
              JUMPOUT(0x1E1379B88);
            }
            uint64_t v15 = *(void *)(*(void *)(v3 + 200) + 8 * v14);
            uint64_t v16 = *(void *)(v3 + 176);
            uint64_t v17 = (const UInt8 *)(*(void *)v15 + v16);
            CFIndex v18 = *(unsigned int *)(v15 + 12) - v16;
            uint64_t v19 = *(__CFWriteStream **)(v3 + 128);
            if (!v19) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v17 = 0;
            CFIndex v18 = 0;
            uint64_t v19 = *(__CFWriteStream **)(v3 + 128);
            if (!v19) {
              goto LABEL_22;
            }
          }
          if (CFWriteStreamCanAcceptBytes(v19))
          {
            CFIndex v20 = CFWriteStreamWrite(*(CFWriteStreamRef *)(v3 + 128), v17, v18);
            if (v20 == -1) {
              return;
            }
            unint64_t v21 = v20 & 0xFFFFFFFFFFFFFF00;
            uint64_t v22 = v20;
            goto LABEL_23;
          }
LABEL_22:
          uint64_t v22 = 0;
          unint64_t v21 = 0;
LABEL_23:
          unint64_t v23 = v21 | v22;
          if (!(v21 | v22)) {
            return;
          }
          uint64_t v24 = *(void *)(v3 + 168);
          if (v24)
          {
            uint64_t v25 = *(void *)(v3 + 184);
            if (v25 == *(void *)(v3 + 192))
            {
              __break(0xC471u);
              JUMPOUT(0x1E1379B68);
            }
            uint64_t v26 = *(void *)(v3 + 200);
            unsigned int v27 = *(WTF **)(v26 + 8 * v25);
            unint64_t v28 = *((unsigned int *)v27 + 3);
            uint64_t v29 = *(void *)(v3 + 176);
            uint64_t v30 = v28 - v29;
            unint64_t v31 = v29 + v23;
            uint64_t v13 = v24 - v23;
            *(void *)(v3 + 16++*(_DWORD *)(this - 8) = v24 - v23;
            *(void *)(v3 + 176) = v31;
            if (v31 >= v28)
            {
              *(void *)(v3 + 176) = 0;
              *(void *)(v26 + 8 * v25) = 0;
              uint64_t v32 = *(WTF **)v27;
              if (*(void *)v27)
              {
                *(void *)unsigned int v27 = 0;
                *((_DWORD *)v27 + 2) = 0;
                WTF::fastFree(v32, v6);
              }
              WTF::fastFree(v27, v6);
              uint64_t v33 = *(void *)(v3 + 184);
              if (v33 == *(unsigned int *)(v3 + 208) - 1) {
                uint64_t v34 = 0;
              }
              else {
                uint64_t v34 = v33 + 1;
              }
              *(void *)(v3 + 184) = v34;
              uint64_t v13 = *(void *)(v3 + 168);
            }
            if (v23 == v30 && v13) {
              continue;
            }
          }
          BOOL v37 = *(void (**)(void))(**(void **)(v3 + 56) + 48);
          v37();
          return;
        }
      }
    }
  }
}

StringImpl **WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = v5;
    uint64_t v55 = v5;
    do
    {
      uint64_t v16 = v4 + 24 * v11;
      size_t v8 = *(StringImpl **)v16;
      if (*(void *)v16 != -1)
      {
        if (v8)
        {
          uint64_t v23 = *a1;
          if (*a1) {
            unsigned int v24 = *(_DWORD *)(v23 - 8);
          }
          else {
            unsigned int v24 = 0;
          }
          int v58 = -1640531527;
          unsigned __int16 v59 = 0;
          char v60 = 0;
          WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(&v58, (uint64_t)v8, *(void *)(v16 + 8));
          int v27 = v58;
          if (v60)
          {
            unsigned int v28 = (v58 + v59) ^ ((v58 + v59) << 11);
            int v27 = v28 + (v28 >> 17);
          }
          int v29 = 0;
          unsigned int v30 = (v27 ^ (8 * v27)) + ((v27 ^ (8 * v27)) >> 5);
          unsigned int v31 = (v30 ^ (4 * v30)) + ((v30 ^ (4 * v30)) >> 15);
          int v32 = v31 ^ (v31 << 10);
          if (v32) {
            int v33 = v32;
          }
          else {
            int v33 = 0x800000;
          }
          do
          {
            unsigned int v34 = v33 & v24;
            size_t v35 = (StringImpl **)(v23 + 24 * (v33 & v24));
            int v33 = ++v29 + (v33 & v24);
          }
          while (*v35);
          uint64_t v36 = v23 + 24 * v34;
          uint64_t v39 = *(void *)(v36 + 16);
          BOOL v37 = (void *)(v36 + 16);
          uint64_t v38 = v39;
          if (v39)
          {
            uint64_t v40 = *(unsigned int *)(v38 - 4);
            if (v40)
            {
              uint64_t v41 = v38;
              do
              {
                CFTypeRef v42 = *(WTF::StringImpl **)v41;
                if (*(void *)v41 != -1)
                {
                  int8x16_t v43 = *(WTF **)(v41 + 8);
                  if (v43)
                  {
                    *(void *)(v41 + ++*(_DWORD *)(this - 8) = 0;
                    *(_DWORD *)(v41 + 16) = 0;
                    WTF::fastFree(v43, v26);
                    CFTypeRef v42 = *(WTF::StringImpl **)v41;
                  }
                  *(void *)uint64_t v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2) {
                      WTF::StringImpl::destroy(v42, v26);
                    }
                    else {
                      *(_DWORD *)v42 -= 2;
                    }
                  }
                }
                v41 += 24;
                --v40;
              }
              while (v40);
            }
            WTF::fastFree((WTF *)(v38 - 16), v26);
          }
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v35 + 1, v26);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v35, v44);
          int v45 = *(StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          *size_t v35 = v45;
          long long v46 = *(StringImpl **)(v16 + 8);
          *(void *)(v16 + ++*(_DWORD *)(this - 8) = 0;
          v35[1] = v46;
          uint64_t v47 = v4 + 24 * v11;
          *BOOL v37 = 0;
          uint64_t v48 = *(void *)(v47 + 16);
          *(void *)(v47 + 16) = 0;
          *BOOL v37 = v48;
          uint64_t v49 = *(void *)(v47 + 16);
          if (v49)
          {
            uint64_t v50 = *(unsigned int *)(v49 - 4);
            if (v50)
            {
              uint64_t v51 = *(void *)(v47 + 16);
              do
              {
                CFTypeRef v52 = *(WTF::StringImpl **)v51;
                if (*(void *)v51 != -1)
                {
                  unint64_t v53 = *(WTF **)(v51 + 8);
                  if (v53)
                  {
                    *(void *)(v51 + ++*(_DWORD *)(this - 8) = 0;
                    *(_DWORD *)(v51 + 16) = 0;
                    WTF::fastFree(v53, v14);
                    CFTypeRef v52 = *(WTF::StringImpl **)v51;
                  }
                  *(void *)uint64_t v51 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2) {
                      WTF::StringImpl::destroy(v52, v14);
                    }
                    else {
                      *(_DWORD *)v52 -= 2;
                    }
                  }
                }
                v51 += 24;
                --v50;
              }
              while (v50);
            }
            WTF::fastFree((WTF *)(v49 - 16), v14);
          }
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((void *)(v16 + 8), v14);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((void *)(v4 + 24 * v11), v15);
          if (v16 == a3) {
            int v12 = v35;
          }
          uint64_t v13 = v55;
        }
        else
        {
          uint64_t v17 = v4 + 24 * v11;
          uint64_t v18 = *(void *)(v17 + 16);
          if (v18)
          {
            uint64_t v19 = *(unsigned int *)(v18 - 4);
            if (v19)
            {
              uint64_t v20 = *(void *)(v17 + 16);
              do
              {
                unint64_t v21 = *(WTF::StringImpl **)v20;
                if (*(void *)v20 != -1)
                {
                  uint64_t v22 = *(WTF **)(v20 + 8);
                  if (v22)
                  {
                    *(void *)(v20 + ++*(_DWORD *)(this - 8) = 0;
                    *(_DWORD *)(v20 + 16) = 0;
                    WTF::fastFree(v22, v8);
                    unint64_t v21 = *(WTF::StringImpl **)v20;
                  }
                  *(void *)uint64_t v20 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2) {
                      WTF::StringImpl::destroy(v21, v8);
                    }
                    else {
                      *(_DWORD *)v21 -= 2;
                    }
                  }
                }
                v20 += 24;
                --v19;
              }
              while (v19);
            }
            WTF::fastFree((WTF *)(v18 - 16), v8);
          }
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((void *)(v16 + 8), v8);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((void *)(v4 + 24 * v11), v25);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    int v12 = 0;
  }
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return v12;
}

uint64_t WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3 == -1) {
    unint64_t v3 = -1;
  }
  unsigned int v4 = (v3 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v3) << 16) ^ (*a1 + (unsigned __int16)v3);
  unsigned int v5 = (v3 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(v3) + (v4 >> 11)) << 16) ^ (v4 + WORD2(v3) + (v4 >> 11));
  *a1 = v5 + (v5 >> 11);
  uint64_t v15 = a1;
  uint64_t v6 = *(unsigned int *)(a2 + 32);
  if (v6 == -1) {
    goto LABEL_8;
  }
  uint64_t v16 = &v15;
  ((void (*)(void **, uint64_t))off_1F3C79DD8[v6])(&v16, a2 + 8);
  unint64_t v9 = *(unsigned int *)(a3 + 32);
  if (v9 == -1) {
    unint64_t v9 = -1;
  }
  unsigned int v10 = (v9 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v9) << 16) ^ (*a1 + (unsigned __int16)v9);
  unsigned int v11 = (v9 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v9) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v9) + (v10 >> 11));
  *a1 = v11 + (v11 >> 11);
  uint64_t v15 = a1;
  uint64_t v12 = *(unsigned int *)(a3 + 32);
  if (v12 == -1)
  {
LABEL_8:
    uint64_t v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v14);
  }
  else
  {
    uint64_t v16 = &v15;
    return ((uint64_t (*)(void **, uint64_t))off_1F3C79DD8[v12])(&v16, a3 + 8);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    while (1)
    {
      uint64_t v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v18 = *a1;
          if (*a1)
          {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
            unsigned int v20 = *((_DWORD *)v13 + 4);
            if (v20 >= 0x100) {
              goto LABEL_19;
            }
LABEL_22:
            int v21 = WTF::StringImpl::hashSlowCase(v13);
          }
          else
          {
            unsigned int v19 = 0;
            unsigned int v20 = *((_DWORD *)v13 + 4);
            if (v20 < 0x100) {
              goto LABEL_22;
            }
LABEL_19:
            int v21 = v20 >> 8;
          }
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v19;
            unsigned int v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            int v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          uint64_t v25 = v18 + 24 * v23;
          unsigned int v28 = *(WTF **)(v25 + 8);
          int v27 = (void *)(v25 + 8);
          uint64_t v26 = v28;
          if (v28)
          {
            void *v27 = 0;
            *(_DWORD *)(v18 + 24 * v23 + 16) = 0;
            WTF::fastFree(v26, v8);
            int v29 = *v24;
            WTF::StringImpl *v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v8);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
          }
          else
          {
            WTF::StringImpl *v24 = 0;
          }
          unsigned int v30 = *v12;
          _CFHTTPAuthentication *v12 = 0;
          WTF::StringImpl *v24 = v30;
          uint64_t v31 = v4 + 24 * v9;
          void *v27 = 0;
          v27[1] = 0;
          uint64_t v33 = *(void *)(v31 + 8);
          uint64_t v32 = v31 + 8;
          *(void *)uint64_t v32 = 0;
          void *v27 = v33;
          int v34 = *(_DWORD *)(v32 + 8);
          *(_DWORD *)(v32 + ++*(_DWORD *)(this - 8) = 0;
          uint64_t v35 = v18 + 24 * v23;
          *(_DWORD *)(v35 + 16) = v34;
          int v36 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 12) = 0;
          *(_DWORD *)(v35 + 20) = v36;
          BOOL v37 = *(WTF **)v32;
          if (*(void *)v32)
          {
            *(void *)uint64_t v32 = 0;
            *(_DWORD *)(v32 + ++*(_DWORD *)(this - 8) = 0;
            WTF::fastFree(v37, v8);
          }
          uint64_t v38 = *v12;
          _CFHTTPAuthentication *v12 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2) {
              WTF::StringImpl::destroy(v38, v8);
            }
            else {
              *(_DWORD *)v38 -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v18 + 24 * v23;
          }
          goto LABEL_9;
        }
        uint64_t v14 = v4 + 24 * v9;
        uint64_t v17 = *(WTF **)(v14 + 8);
        uint64_t v16 = (void *)(v14 + 8);
        uint64_t v15 = v17;
        if (v17)
        {
          *uint64_t v16 = 0;
          *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
          WTF::fastFree(v15, v8);
          uint64_t v13 = *v12;
        }
        _CFHTTPAuthentication *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v8);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_9:
      if (++v9 == v11) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

char *WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v5 = *(WTF **)a1;
  if (*(void *)a1 > a3
    || (v6 = *(unsigned int *)(a1 + 12), uint64_t v7 = (WTF *)((char *)v5 + 8 * v6), (unint64_t)v7 <= a3))
  {
    unint64_t v23 = *(unsigned int *)(a1 + 8);
    unint64_t v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10) {
      unint64_t v25 = v24 + 1;
    }
    else {
      unint64_t v25 = 16;
    }
    if (v25 <= a2) {
      unint64_t v26 = a2;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26 <= v23) {
      return (char *)a3;
    }
    if (v26 >> 29) {
      goto LABEL_47;
    }
    uint64_t v27 = *(unsigned int *)(a1 + 12);
    unsigned int v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v26;
    *(void *)a1 = v28;
    if (v27)
    {
      unint64_t v30 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v30 < 3)
      {
        uint64_t v31 = v5;
      }
      else
      {
        uint64_t v31 = v5;
        if ((unint64_t)((char *)v28 - (char *)v5) >= 0x20)
        {
          unint64_t v32 = v30 + 1;
          uint64_t v33 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          int v34 = &v28[v33];
          uint64_t v31 = (WTF *)((char *)v5 + v33 * 8);
          uint64_t v35 = (long long *)((char *)v5 + 16);
          int v36 = v28 + 2;
          uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v38 = *v35;
            *(v36 - 1) = *(v35 - 1);
            *int v36 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 4;
          }
          while (v37);
          unsigned int v28 = v34;
          if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_35;
          }
        }
      }
      do
      {
        uint64_t v40 = *(void *)v31;
        uint64_t v31 = (WTF *)((char *)v31 + 8);
        *v28++ = v40;
      }
      while (v31 != (WTF *)((char *)v5 + 8 * v27));
    }
LABEL_35:
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
      }
      WTF::fastFree(v5, v29);
    }
    return (char *)a3;
  }
  unint64_t v8 = *(unsigned int *)(a1 + 8);
  unint64_t v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = 16;
  }
  if (v10 <= a2) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > v8)
  {
    if (!(v11 >> 29))
    {
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v11;
      *(void *)a1 = v12;
      unint64_t v14 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v14 < 3)
      {
        uint64_t v15 = v5;
      }
      else
      {
        uint64_t v15 = v5;
        if ((unint64_t)((char *)v12 - (char *)v5) >= 0x20)
        {
          unint64_t v16 = v14 + 1;
          uint64_t v17 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v18 = &v12[v17];
          uint64_t v15 = (WTF *)((char *)v5 + v17 * 8);
          unsigned int v19 = (long long *)((char *)v5 + 16);
          unsigned int v20 = v12 + 2;
          uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v22 = *v19;
            *(v20 - 1) = *(v19 - 1);
            _OWORD *v20 = v22;
            v19 += 2;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          uint64_t v12 = v18;
          if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_42:
            uint64_t v39 = *(WTF **)a1;
            if (v5)
            {
              if (v39 == v5)
              {
                *(void *)a1 = 0;
                *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
              }
              WTF::fastFree(v5, v13);
              uint64_t v39 = *(WTF **)a1;
            }
            return (char *)v39 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
          }
        }
      }
      do
      {
        uint64_t v42 = *(void *)v15;
        uint64_t v15 = (WTF *)((char *)v15 + 8);
        *v12++ = v42;
      }
      while (v15 != v7);
      goto LABEL_42;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1E137A554);
  }
  uint64_t v39 = *(WTF **)a1;
  return (char *)v39 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v16 = -1640531527;
  unsigned __int16 v17 = 0;
  char v18 = 0;
  WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(&v16, *a2, a2[1]);
  int v6 = v16;
  if (v18)
  {
    unsigned int v7 = (v16 + v17) ^ ((v16 + v17) << 11);
    int v6 = v7 + (v7 >> 17);
  }
  int v8 = 0;
  unsigned int v9 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  unsigned int v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  int v11 = v10 ^ (v10 << 10);
  if (!v11) {
    int v11 = 0x800000;
  }
  while (1)
  {
    int v12 = v11 & v5;
    uint64_t v13 = (WebCore::SecurityOrigin **)(v2 + 24 * (v11 & v5));
    unint64_t v14 = *v13;
    if (*v13 == (WebCore::SecurityOrigin *)-1) {
      goto LABEL_7;
    }
    if (!v14) {
      break;
    }
    if (WebCore::SecurityOrigin::isSameOriginAs(v14, (const WebCore::SecurityOrigin *)*a2)
      && (WebCore::SecurityOrigin::isSameOriginAs(v13[1], (const WebCore::SecurityOrigin *)a2[1]) & 1) != 0)
    {
      return (uint64_t)v13;
    }
LABEL_7:
    int v11 = ++v8 + v12;
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 24 * *(unsigned int *)(*a1 - 4);
}

void *WTF::Detail::CallableWrapper<WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  *uint64_t result = &unk_1F3C79DF8;
  result[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(void *)(v3 + 8);
    *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v5 = *(void *)(v3 + 8);
      *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1F3C79DF8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v5 = *(void *)(v3 + 8);
    *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      uint64_t v6 = *(void *)(v3 + 8);
      *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    WTF::fastFree((WTF *)v3, a2);
    this = v2;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unsigned int v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      int v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1) {
        goto LABEL_7;
      }
      if (!v11)
      {
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(WebResourceLoadScheduler::HostInformation **)(v12 + 8);
        *(void *)(v12 + ++*(_DWORD *)(this - 8) = 0;
        if (v13)
        {
          WebResourceLoadScheduler::HostInformation::~HostInformation(v13, v8);
          if (!*(_DWORD *)(v14 + 8))
          {
            WTF::fastFree((WTF *)v14, v8);
            goto LABEL_13;
          }
          *(void *)(v14 + 192) = 0;
          *(_OWORD *)(v14 + 160) = 0u;
          *(_OWORD *)(v14 + 176) = 0u;
          *(_OWORD *)(v14 + 12++*(_DWORD *)(this - 8) = 0u;
          *(_OWORD *)(v14 + 144) = 0u;
          *(_OWORD *)(v14 + 96) = 0u;
          *(_OWORD *)(v14 + 112) = 0u;
          *(_OWORD *)(v14 + 64) = 0u;
          *(_OWORD *)(v14 + ++*(_DWORD *)(this + 80) = 0u;
          *(_OWORD *)(v14 + 32) = 0u;
          *(_OWORD *)(v14 + 4++*(_DWORD *)(this - 8) = 0u;
          *(_OWORD *)uint64_t v14 = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          uint64_t v15 = *v10;
          *unsigned int v10 = 0;
          if (!v15) {
            goto LABEL_7;
          }
        }
        else
        {
LABEL_13:
          uint64_t v15 = *v10;
          *unsigned int v10 = 0;
          if (!v15) {
            goto LABEL_7;
          }
        }
        if (*(_DWORD *)v15 == 2) {
          goto LABEL_36;
        }
        *(_DWORD *)v15 -= 2;
        goto LABEL_7;
      }
      uint64_t v16 = *a1;
      if (*a1)
      {
        int v17 = *(_DWORD *)(v16 - 8);
        unsigned int v18 = *((_DWORD *)v11 + 4);
        if (v18 < 0x100) {
          goto LABEL_20;
        }
      }
      else
      {
        int v17 = 0;
        unsigned int v18 = *((_DWORD *)v11 + 4);
        if (v18 < 0x100)
        {
LABEL_20:
          unsigned int v19 = WTF::StringImpl::hashSlowCase(v11);
          goto LABEL_21;
        }
      }
      unsigned int v19 = v18 >> 8;
LABEL_21:
      int v20 = 0;
      do
      {
        uint64_t v21 = v19 & v17;
        unsigned int v19 = ++v20 + v21;
      }
      while (*(void *)(v16 + 16 * v21));
      long long v22 = (WTF::StringImpl **)(v16 + 16 * v21);
      unint64_t v23 = v22[1];
      v22[1] = 0;
      if (v23)
      {
        WebResourceLoadScheduler::HostInformation::~HostInformation(v23, v8);
        if (*(_DWORD *)(v24 + 8))
        {
          *(void *)(v24 + 192) = 0;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_OWORD *)(v24 + 176) = 0u;
          *(_OWORD *)(v24 + 12++*(_DWORD *)(this - 8) = 0u;
          *(_OWORD *)(v24 + 144) = 0u;
          *(_OWORD *)(v24 + 96) = 0u;
          *(_OWORD *)(v24 + 112) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + ++*(_DWORD *)(this + 80) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)(v24 + 4++*(_DWORD *)(this - 8) = 0u;
          *(_OWORD *)uint64_t v24 = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          unint64_t v25 = *v22;
          WTF *v22 = 0;
          if (!v25) {
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        WTF::fastFree((WTF *)v24, v8);
      }
      unint64_t v25 = *v22;
      WTF *v22 = 0;
      if (!v25) {
        goto LABEL_31;
      }
LABEL_27:
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v8);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
LABEL_31:
      unint64_t v26 = *v10;
      *unsigned int v10 = 0;
      WTF *v22 = v26;
      uint64_t v27 = v4 + 16 * v9;
      unsigned int v28 = *(WTF::StringImpl **)(v27 + 8);
      *(void *)(v27 + ++*(_DWORD *)(this - 8) = 0;
      v22[1] = v28;
      int v29 = *(WebResourceLoadScheduler::HostInformation **)(v27 + 8);
      *(void *)(v27 + ++*(_DWORD *)(this - 8) = 0;
      if (!v29) {
        goto LABEL_34;
      }
      WebResourceLoadScheduler::HostInformation::~HostInformation(v29, v8);
      if (!*(_DWORD *)(v30 + 8))
      {
        WTF::fastFree((WTF *)v30, v8);
LABEL_34:
        uint64_t v15 = *v10;
        *unsigned int v10 = 0;
        if (!v15) {
          goto LABEL_7;
        }
        goto LABEL_35;
      }
      *(void *)(v30 + 192) = 0;
      *(_OWORD *)(v30 + 160) = 0u;
      *(_OWORD *)(v30 + 176) = 0u;
      *(_OWORD *)(v30 + 12++*(_DWORD *)(this - 8) = 0u;
      *(_OWORD *)(v30 + 144) = 0u;
      *(_OWORD *)(v30 + 96) = 0u;
      *(_OWORD *)(v30 + 112) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + ++*(_DWORD *)(this + 80) = 0u;
      *(_OWORD *)(v30 + 32) = 0u;
      *(_OWORD *)(v30 + 4++*(_DWORD *)(this - 8) = 0u;
      *(_OWORD *)uint64_t v30 = 0u;
      *(_OWORD *)(v30 + 16) = 0u;
      uint64_t v15 = *v10;
      *unsigned int v10 = 0;
      if (!v15) {
        goto LABEL_7;
      }
LABEL_35:
      if (*(_DWORD *)v15 == 2)
      {
LABEL_36:
        WTF::StringImpl::destroy(v15, v8);
        goto LABEL_7;
      }
      *(_DWORD *)v15 -= 2;
LABEL_7:
      if (++v9 == v5) {
        goto LABEL_44;
      }
    }
  }
  if (v4)
  {
LABEL_44:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebResourceLoadScheduler::*&)(void),WebResourceLoadScheduler*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebResourceLoadScheduler::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79E48;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebResourceLoadScheduler::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79E48;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebResourceLoadScheduler::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, WebCore::ResourceLoader **a2)
{
  uint64_t v4 = *a2;
  if (v4
    && (WebResourceLoadScheduler::scheduleLoad(*(WebResourceLoadScheduler **)(a1 + 8), v4), *a2)
    && !*((unsigned char *)*a2 + 752))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, WebCore::ResourceLoader **))(*(void *)v7 + 16))(v7, a2);
    int v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return (_DWORD *)v8(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(void *)v5 + 16))(v5, &v9);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (result[4] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[4];
      }
    }
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::add(_DWORD *result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = (_DWORD *)*a3;
  unint64_t v10 = ~(*a3 << 32) + *a3;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (void *)(v6 + 8 * v13);
  uint64_t v15 = (_DWORD *)*v14;
  if (!*v14)
  {
LABEL_12:
    *a3 = 0;
    uint64_t result = (_DWORD *)*v14;
    void *v14 = v9;
    if (result)
    {
      if (result[4] == 1)
      {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        uint64_t v18 = *a2;
        if (*a2)
        {
LABEL_16:
          ++*(_DWORD *)(v18 - 12);
          uint64_t v19 = *a2;
          if (*a2) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
LABEL_25:
        *(_DWORD *)(v18 - 12) = 1;
        uint64_t v19 = *a2;
        if (*a2)
        {
LABEL_17:
          uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          unint64_t v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400) {
            goto LABEL_18;
          }
          goto LABEL_27;
        }
LABEL_26:
        uint64_t v20 = *(unsigned int *)(v19 - 16);
        unint64_t v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400)
        {
LABEL_18:
          if (3 * v21 > 4 * v20)
          {
LABEL_30:
            *(void *)uint64_t v5 = v14;
            *((void *)v5 + 1) = v19 + 8 * v21;
            *((unsigned char *)v5 + 16) = 1;
            return result;
          }
          if (!v21)
          {
            uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a2, 8u, v14);
            uint64_t v14 = result;
            uint64_t v19 = *a2;
            if (!*a2)
            {
LABEL_21:
              unint64_t v21 = 0;
              goto LABEL_30;
            }
LABEL_29:
            unint64_t v21 = *(unsigned int *)(v19 - 4);
            goto LABEL_30;
          }
LABEL_28:
          uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a2, v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v14);
          uint64_t v14 = result;
          uint64_t v19 = *a2;
          if (!*a2) {
            goto LABEL_21;
          }
          goto LABEL_29;
        }
LABEL_27:
        if (v21 > 2 * v20) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      --result[4];
    }
    uint64_t v18 = *a2;
    if (*a2) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v9)
  {
    if (v15 == (_DWORD *)-1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v8;
    uint64_t v14 = (void *)(v6 + 8 * v13);
    uint64_t v15 = (_DWORD *)*v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *uint64_t v16 = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v9 = (_DWORD *)*a3;
        uint64_t v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if (v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v6 - 4);
  }
  *(void *)uint64_t v5 = v14;
  *((void *)v5 + 1) = v6 + 8 * v22;
  *((unsigned char *)v5 + 16) = 0;
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (void *)(v6 + 8 * v11);
      uint64_t v14 = (_DWORD *)*v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ((unint64_t)v14 + ~((void)v14 << 32)) ^ (((unint64_t)v14 + ~((void)v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = (void *)(v15 + 8 * v22);
          void *v24 = 0;
          unint64_t v25 = (_DWORD *)*v13;
          void *v13 = 0;
          void *v24 = v25;
          unint64_t v26 = (_DWORD *)*v13;
          void *v13 = 0;
          if (v26)
          {
            if (v26[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
            }
            else {
              --v26[4];
            }
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
        else
        {
          void *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::WebSocketChannel::*&)(void),WebCore::WebSocketChannel*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::VectorDestructor<true,std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>>::destruct(uint64_t result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v3 = (uint64_t *)result;
    while (1)
    {
      uint64_t v4 = *v3;
      *uint64_t v3 = 0;
      if (v4) {
        break;
      }
LABEL_5:
      if (++v3 == a2) {
        return result;
      }
    }
    uint64_t v5 = *(_DWORD **)(v4 + 32);
    *(void *)(v4 + 32) = 0;
    if (v5)
    {
      if (v5[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        uint64_t v6 = *(WTF **)(v4 + 16);
        if (!v6) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      --v5[4];
    }
    uint64_t v6 = *(WTF **)(v4 + 16);
    if (!v6)
    {
LABEL_12:
      int v7 = *(WTF **)(v4 + 8);
      *(void *)(v4 + ++*(_DWORD *)(this - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1) {
          WTF::fastFree(v7, a2);
        }
        else {
          --*(_DWORD *)v7;
        }
      }
      uint64_t result = WTF::fastFree((WTF *)v4, a2);
      goto LABEL_5;
    }
LABEL_11:
    *(void *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    WTF::fastFree(v6, a2);
    goto LABEL_12;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0,WTF::String,WTF::URL const&>::~CallableWrapper(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  *uint64_t result = &unk_1F3C79E98;
  result[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(unsigned int *)(v3 + 28);
    if (v4) {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (StringImpl *)(*(void *)(v3 + 16) + 32 * v4));
    }
    uint64_t v5 = *(WTF **)(v3 + 16);
    if (v5)
    {
      *(void *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0,WTF::String,WTF::URL const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1F3C79E98;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v5 = *(unsigned int *)(v3 + 28);
    if (v5) {
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (StringImpl *)(*(void *)(v3 + 16) + 32 * v5));
    }
    uint64_t v6 = *(WTF **)(v3 + 16);
    if (v6)
    {
      *(void *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v6, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
    this = v2;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0,WTF::String,WTF::URL const&>::call@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 544);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 24);
          if (v6)
          {
            uint64_t v7 = *(void *)(v6 + 8);
            if (v7) {
              return MEMORY[0x1F4176370](*(void *)(v7 + 888));
            }
          }
        }
      }
    }
  }
  *a2 = 0;
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_1,void,BOOL,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79EC0;
  uint64_t v2 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v2) {
    return a1;
  }
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_1,void,BOOL,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79EC0;
  uint64_t v3 = (WebCore::WebSocketChannel *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    goto LABEL_4;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3);
  WTF::fastFree(v6, v7);
  uint64_t v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_1,void,BOOL,BOOL>::call(WTF::StringImpl *result, char a2, int a3)
{
  uint64_t v4 = *((void *)result + 1);
  if ((a2 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v4, (uint64_t *)&v8);
    uint64_t result = v8;
    int v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!a3) {
          return result;
        }
        goto LABEL_6;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!a3) {
    return result;
  }
LABEL_6:
  uint64_t v6 = *(void *)(v4 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      *(unsigned char *)(v7 + 28++*(_DWORD *)(this - 8) = 1;
    }
  }
  return result;
}

char *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  uint64_t v5 = *a1;
  if ((unint64_t)*a1 > a3 || (size_t v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[v6] <= a3))
  {
    unint64_t v14 = *((unsigned int *)a1 + 2);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= (unint64_t)a2) {
      unint64_t v17 = (unint64_t)a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (HIDWORD(v17)) {
        goto LABEL_30;
      }
      size_t v18 = *((unsigned int *)a1 + 3);
      unint64_t v19 = (char *)WTF::fastMalloc((WTF *)v17);
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
      memcpy(v19, v5, v18);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return (char *)a3;
  }
  unint64_t v7 = *((unsigned int *)a1 + 2);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= (unint64_t)a2) {
    unint64_t v10 = (unint64_t)a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!HIDWORD(v10))
    {
      uint64_t v11 = (char *)WTF::fastMalloc((WTF *)v10);
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, v6);
      unsigned int v13 = *a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        unsigned int v13 = *a1;
      }
      return &v13[a3 - (void)v5];
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1E137B824);
  }
  unsigned int v13 = *a1;
  return &v13[a3 - (void)v5];
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(uint64_t result, unsigned char *a2, uint64_t a3, unsigned int a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v4 = a3 - 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1E137B9E4);
  }
  unsigned int v6 = a4;
  unint64_t v8 = (void *)result;
  unsigned int v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    BOOL v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0) {
    goto LABEL_10;
  }
  uint64_t v11 = (v4 + v5);
  if (__OFADD__(v4, v5)) {
    goto LABEL_10;
  }
  if (!v11)
  {
    uint64_t v12 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_23;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_10:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    uint64_t v12 = v15[0];
    if (v15[0])
    {
      unsigned int v13 = (unsigned char *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(void *)(v12 + ++*(_DWORD *)(this - 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if (v4)
      {
        if (v4 == 1) {
          unsigned char *v13 = *a2;
        }
        else {
          uint64_t result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
        }
      }
      uint64_t v14 = 0;
      do
      {
        *((unsigned char *)&v15[1] + v14-- + 4) = (v6 % 0xA) | 0x30;
        BOOL v10 = v6 > 9;
        v6 /= 0xAu;
      }
      while (v10);
      if (v14 + 14 <= 13) {
        uint64_t result = (uint64_t)memcpy(&v13[v4], (char *)&v15[1] + v14 + 5, -v14);
      }
    }
  }
LABEL_23:
  void *v8 = v12;
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79EE8;
  uint64_t v2 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v2) {
    return a1;
  }
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79EE8;
  uint64_t v3 = (WebCore::WebSocketChannel *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    unint64_t v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    goto LABEL_4;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3);
  WTF::fastFree(v6, v7);
  unint64_t v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *((void *)result + 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v2, (uint64_t *)&v4);
    uint64_t result = v4;
    unint64_t v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_1,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79F10;
  uint64_t v2 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v2) {
    return a1;
  }
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79F10;
  uint64_t v3 = (WebCore::WebSocketChannel *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    unint64_t v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    goto LABEL_4;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3);
  WTF::fastFree(v6, v7);
  unint64_t v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_1,void,BOOL>::call(WTF::StringImpl *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *((void *)result + 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v2, (uint64_t *)&v4);
    uint64_t result = v4;
    unint64_t v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_2,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1F3C79F38;
  uint64_t v2 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v2) {
    return a1;
  }
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_2,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1F3C79F38;
  uint64_t v3 = (WebCore::WebSocketChannel *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    unint64_t v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    goto LABEL_4;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3);
  WTF::fastFree(v6, v7);
  unint64_t v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_2,void,BOOL>::call(WTF::StringImpl *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *((void *)result + 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v2, (uint64_t *)&v4);
    uint64_t result = v4;
    unint64_t v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1E137BEF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137BF9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137C004(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137C06C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137C0D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137C224(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E137C34C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C79F50[a12])(v14 - 48, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E137C47C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E137C4B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ExceptionOr<void>::~ExceptionOr(uint64_t a1, StringImpl *a2)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return a1;
  }
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this - 8) = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

void sub_1E137C5BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137C6AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137C758(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137C8A8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E137C940(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137C988(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137CA38(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C79F60[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E137CAF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 2)
    {
      *(_DWORD *)a10 -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    WTF::StringImpl::destroy(a10, a2);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137CB34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E137CC4C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C79F70[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E137CD94(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C79F80[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E137CEE8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C79F90[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E137D03C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C79FA0[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E137D1C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137D284(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137D3A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E137D488(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137D500(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id kit(WebCore::CSSRule *a1)
{
  if (!a1) {
    return 0;
  }
  DOMWrapper = (const void *)getDOMWrapper(a1);
  if (!DOMWrapper)
  {
    uint64_t v4 = [objc_alloc((Class)kitClass(a1)) _init];
    if (v4)
    {
      uint64_t v3 = (const void *)v4;
      char v5 = 0;
      *(void *)(v4 + 16) = a1;
      ++*((_DWORD *)a1 + 2);
      uint64_t v11 = v4;
      BOOL v10 = a1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
      if (v5) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v3 = DOMWrapper;
  CFRetain(DOMWrapper);
LABEL_11:
  unint64_t v7 = (void *)CFMakeCollectable(v3);
  return v7;
}

void sub_1E137D63C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E137D650(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E137D794(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137D824(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137D978(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137DAB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E137DBAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137DC34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137DD50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137DEBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10, char a11)
{
  if (a10)
  {
    if (*a10 == 1) {
      WebCore::DeprecatedCSSOMValue::operator delete();
    }
    else {
      --*a10;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137E0A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C79F70[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E137E26C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137E450(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v17);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1E137E5E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137E748(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137E878(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137E964(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137EA54(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137EB00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJjN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJjS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJfS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22DeprecatedCSSOMCounterENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl ***)a2;
  *(void *)a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::DeprecatedCSSOMCounter>::deref(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22DeprecatedCSSOMCounterENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19DeprecatedCSSOMRectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19DeprecatedCSSOMRectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore23DeprecatedCSSOMRGBColorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore23DeprecatedCSSOMRGBColorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::DeprecatedCSSOMCounter>::deref(WTF::StringImpl **this, StringImpl *a2)
{
  uint64_t v2 = (WTF *)this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  uint64_t v3 = this[3];
  *((void *)v2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = (WTF::StringImpl *)*((void *)v2 + 2);
      *((void *)v2 + 2) = 0;
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)v2 + 2);
  *((void *)v2 + 2) = 0;
  if (!v4)
  {
LABEL_11:
    int v5 = (WTF::StringImpl *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
LABEL_9:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v4, a2);
  int v5 = (WTF::StringImpl *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (!v5) {
    goto LABEL_16;
  }
LABEL_14:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    int v6 = v2;
    return (WTF::StringImpl **)WTF::fastFree(v6, a2);
  }
  *(_DWORD *)v5 -= 2;
LABEL_16:
  int v6 = v2;
  return (WTF::StringImpl **)WTF::fastFree(v6, a2);
}

WTF *WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(WTF *this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  uint64_t v3 = (_DWORD *)*((void *)this + 4);
  *((void *)v2 + 4) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      WebCore::DeprecatedCSSOMValue::operator delete();
      uint64_t v4 = (_DWORD *)*((void *)v2 + 3);
      *((void *)v2 + 3) = 0;
      if (!v4) {
        goto LABEL_12;
      }
      goto LABEL_7;
    }
    --*v3;
  }
  uint64_t v4 = (_DWORD *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (!v4) {
    goto LABEL_12;
  }
LABEL_7:
  if (*v4 == 1) {
    WebCore::DeprecatedCSSOMValue::operator delete();
  }
  else {
    --*v4;
  }
LABEL_12:
  int v5 = (_DWORD *)*((void *)v2 + 2);
  *((void *)v2 + 2) = 0;
  if (v5)
  {
    if (*v5 == 1)
    {
      WebCore::DeprecatedCSSOMValue::operator delete();
      int v6 = (_DWORD *)*((void *)v2 + 1);
      *((void *)v2 + 1) = 0;
      if (!v6) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    --*v5;
  }
  int v6 = (_DWORD *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (!v6) {
    goto LABEL_18;
  }
LABEL_16:
  if (*v6 == 1)
  {
    WebCore::DeprecatedCSSOMValue::operator delete();
    unint64_t v7 = v2;
    return (WTF *)WTF::fastFree(v7, a2);
  }
  --*v6;
LABEL_18:
  unint64_t v7 = v2;
  return (WTF *)WTF::fastFree(v7, a2);
}

void sub_1E137EEAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137EF4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F030(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F168(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C79FD8[a12])(v14 - 48, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F298(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E137F2D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F410(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, int a14, int a15, char a16)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C79FE8[a14])(v16 - 48, &a12);
  }
  a14 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F56C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E137F5A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F6D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F7A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E137F80C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id kit(WebCore::DeprecatedCSSOMValue *a1)
{
  if (a1)
  {
    DOMWrapper = (const void *)getDOMWrapper(a1);
    if (DOMWrapper)
    {
      uint64_t v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      uint64_t v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
    int v6 = [objc_alloc((Class)kitClass(a1)) _init];
    if (v6)
    {
      unint64_t v7 = v6;
      v6[2].isa = a1;
      ++*(_DWORD *)a1;
      addDOMWrapper(v6, a1);
      uint64_t v4 = (void *)CFMakeCollectable(v7);
      return v4;
    }
  }
  return 0;
}

void sub_1E137F8D8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E137F9A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137FA20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137FACC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137FBD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137FC3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E137FD6C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C79FF8[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E137FE80(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E137FF98(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13800AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13800E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13801C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13802C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13802FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1380420(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13804EC(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13805B8(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13806A4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void DOMCustomXPathNSResolver::~DOMCustomXPathNSResolver(DOMCustomXPathNSResolver *this)
{
  WebCore::XPathNSResolver::~XPathNSResolver(this);
  WTF::fastFree(v1, v2);
}

uint64_t *DOMCustomXPathNSResolver::lookupNamespaceURI@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (*a2) {
    int v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int v5 = &stru_1F3C7DA90;
  }
  uint64_t v6 = (WTF::AtomStringImpl *)[v4 lookupNamespaceURI:v5];
  uint64_t result = WTF::AtomStringImpl::add(&v9, v6, v7);
  *a3 = v9;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJiN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJiS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E13807F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138085C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13808C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1380968(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1380A50(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E1380B1C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E1380C1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E1380D48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1380DEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1380EDC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1380FA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138100C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13810B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138116C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1381218(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13812D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138138C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1381474(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138155C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138161C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1381734(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A008[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E1381874(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E1381950(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1381A44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E1381B14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1381BC8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1381CE0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1381DF8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1381F10(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382028(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382130(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382238(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v12);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v10 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382274(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382320(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382414(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1382544(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382604(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13826A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382764(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13827EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382870(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13828E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382968(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13829E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382A44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382AF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382B9C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382C48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382CFC(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1382DC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382E30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382E94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1382FE0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A018[a13])(v19 - 32, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)(v2 + 28) != 2)
  {
    *(_DWORD *)(v2 + 28) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v2 + 34) & 0x400) != 0) {
    return a1;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v2);
  return a1;
}

void sub_1E1383188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1E13831A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E138327C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
  _Unwind_Resume(a1);
}

void sub_1E13833A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
  _Unwind_Resume(a1);
}

void sub_1E1383540(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A028[a13])(v19 - 32, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E1383780(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A038[a13])(v19 - 48, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E13839A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A048[a13])(v19 - 32, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E1383B88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  if (a11)
  {
    if (a11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[4];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E1383D3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A058[a11])(v13 - 48, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E1383F60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A018[a13])(v19 - 48, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E13841E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A048[a13])(v19 - 48, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E1384428(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  if (a11)
  {
    if (a11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[4];
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E13845F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A058[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13847E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A068[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

id kit(DOMObjectInternal *a1)
{
  if (!a1) {
    return 0;
  }
  DOMWrapper = (const void *)getDOMWrapper(a1);
  if (DOMWrapper)
  {
    uint64_t v3 = DOMWrapper;
    CFRetain(DOMWrapper);
  }
  else
  {
    switch((*((_DWORD *)a1 + 5) >> 15) & 0x7F)
    {
      case 'J':
      case 'b':
        uint64_t v4 = [objc_alloc((Class)objc_opt_class()) _init];
        if (!v4) {
          return 0;
        }
        break;
      case 'M':
        uint64_t v4 = [objc_alloc((Class)objc_opt_class()) _init];
        if (!v4) {
          return 0;
        }
        break;
      case 'N':
        uint64_t v4 = [objc_alloc((Class)objc_opt_class()) _init];
        if (!v4) {
          return 0;
        }
        break;
      case 'V':
      case 'c':
        uint64_t v4 = [objc_alloc((Class)objc_opt_class()) _init];
        if (!v4) {
          return 0;
        }
        break;
      case '_':
        uint64_t v4 = [objc_alloc((Class)objc_opt_class()) _init];
        if (!v4) {
          return 0;
        }
        break;
      default:
        (*(uint64_t (**)(DOMObjectInternal *))(*(void *)a1 + 128))(a1);
        uint64_t v4 = [objc_alloc((Class)objc_opt_class()) _init];
        if (!v4) {
          return 0;
        }
        break;
    }
    uint64_t v3 = (const void *)v4;
    char v5 = 0;
    *(void *)(v4 + 16) = a1;
    ++*((_DWORD *)a1 + 4);
    uint64_t v11 = v4;
    BOOL v10 = a1;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x1E4E44220](wrapperCacheLock);
    }
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    }
  }
  CFStringRef v7 = (void *)CFMakeCollectable(v3);
  return v7;
}

{
  const void *DOMWrapper;
  const void *v3;
  uint64_t v4;
  char v5;
  int v6;
  void *v7;
  unsigned char v9[24];
  DOMObjectInternal *v10;
  uint64_t v11;
  uint64_t vars8;

  if (!a1) {
    return 0;
  }
  DOMWrapper = (const void *)getDOMWrapper(a1);
  if (!DOMWrapper)
  {
    uint64_t v4 = [objc_alloc((Class)kitClass()) _init];
    if (v4)
    {
      uint64_t v3 = (const void *)v4;
      char v5 = 0;
      *(void *)(v4 + 16) = a1;
      ++*((_DWORD *)a1 + 4);
      uint64_t v11 = v4;
      BOOL v10 = a1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
      if (v5) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v3 = DOMWrapper;
  CFRetain(DOMWrapper);
LABEL_11:
  CFStringRef v7 = (void *)CFMakeCollectable(v3);
  return v7;
}

{
  const void *DOMWrapper;
  const void *v3;
  uint64_t v4;
  char v5;
  int v6;
  void *v7;
  unsigned char v9[24];
  DOMObjectInternal *v10;
  uint64_t v11;
  uint64_t vars8;

  if (!a1) {
    return 0;
  }
  DOMWrapper = (const void *)getDOMWrapper(a1);
  if (!DOMWrapper)
  {
    uint64_t v4 = [objc_alloc((Class)kitClass((uint64_t)a1)) _init];
    if (v4)
    {
      uint64_t v3 = (const void *)v4;
      char v5 = 0;
      *(void *)(v4 + 16) = a1;
      ++*((_DWORD *)a1 + 2);
      uint64_t v11 = v4;
      BOOL v10 = a1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
      if (v5) {
        MEMORY[0x1E4E44220](wrapperCacheLock);
      }
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      }
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v3 = DOMWrapper;
  CFRetain(DOMWrapper);
LABEL_11:
  CFStringRef v7 = (void *)CFMakeCollectable(v3);
  return v7;
}

void sub_1E1384B1C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1384B30(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1384C7C(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1384F1C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, char a11)
{
  WTF::fastFree(v11, a2);
  if (a10)
  {
    if (a10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
      _Unwind_Resume(a1);
    }
    --a10[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>::~Ref(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)(v2 + 8) != 1)
  {
    --*(_DWORD *)(v2 + 8);
    return a1;
  }
  uint64_t v4 = MEMORY[0x1E4E44DC0]();
  MEMORY[0x1E4E44DD0](v4);
  return a1;
}

void sub_1E13852EC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, char a11)
{
  WTF::fastFree(v11, a2);
  if (a10)
  {
    if (a10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
      _Unwind_Resume(a1);
    }
    --a10[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
  _Unwind_Resume(a1);
}

void sub_1E1385678(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A078[a13])(v19 - 48, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 8))(a9);
    }
    else {
      --a9[2];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

WebCore::XPathExpression **WTF::Ref<WebCore::XPathExpression,WTF::RawPtrTraits<WebCore::XPathExpression>,WTF::DefaultRefDerefTraits<WebCore::XPathExpression>>::~Ref(WebCore::XPathExpression **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::XPathExpression::~XPathExpression(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1E1385894(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1385B68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A088[a13])(v19 - 80, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 8))(a9);
    }
    else {
      --a9[2];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

_DWORD **WTF::Ref<WebCore::XPathResult,WTF::RawPtrTraits<WebCore::XPathResult>,WTF::DefaultRefDerefTraits<WebCore::XPathResult>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*v2 != 1)
  {
    --*v2;
    return a1;
  }
  uint64_t v4 = (WTF *)MEMORY[0x1E4E44B30]();
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1E1385DF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A098[a12])(v17 - 33, &a10);
  }
  uint64_t v19 = a13;
  a13 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E1385F5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386088(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13861B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13862E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386460(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy(v14, a2);
  }
  else {
    *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
  {
    ((void (*)(WTF::StringImpl **, char *))off_1F3C7A008[a12])(&a9, &a10);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13865FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  if (a11)
  {
    if (a11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[4];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386748(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386864(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386968(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386AD8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

uint64_t core(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 16);
    if ((*(_WORD *)(result + 32) & 8) == 0)
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

{
  if (result)
  {
    uint64_t result = *(void *)(result + 16);
    if ((*(_WORD *)(result + 32) & 0x10) == 0
      || *(void *)(*(void *)(result + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6690] + 24))
    {
      uint64_t result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_1E1386CD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386E50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  if (a11)
  {
    if (a11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[4];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E1386F44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1386FB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138700C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13870EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387274(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0B8[a12])(v15 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387478(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0C8[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387644(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387710(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1387778(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13877DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1387888(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E138789C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13879DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0B8[a12])(v15 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387BE0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0C8[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387D40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1387DC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1387E40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1387ED4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E1387F10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1387FFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13880E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138816C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13881F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388284(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388310(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138839C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388428(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13884B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388540(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13885F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13886A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138875C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388810(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13888C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388978(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1388A3C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1388B54(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1388C8C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a14, a2);
  if (a12 != -1)
  {
    ((void (*)(uint64_t, char *))off_1F3C7A0D8[a12])(v18 - 32, &a10);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v20);
  _Unwind_Resume(a1);
}

void sub_1E1388DC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1388EF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a14, a2);
  if (a12 != -1)
  {
    ((void (*)(uint64_t, char *))off_1F3C7A0D8[a12])(v18 - 32, &a10);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v20);
  _Unwind_Resume(a1);
}

void sub_1E138900C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13890F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13891C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1389290(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1389380(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1389464(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1389538(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13895C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13896A4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1389798(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1389828(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13898B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1389970(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1389A64(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1389A78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1389BF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1E1389D6C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1389EB8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138A068(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A0E8[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E138A248(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A048[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E138A3EC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  uint64_t v13 = v12;
  if (v13)
  {
    uint64_t v15 = v13;
    int v16 = v13[4] - 1;
    if (!v16)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v17);
      _Unwind_Resume(a1);
    }
    v15[4] = v16;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138A5DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138A7E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v17);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1E138A9C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138ABB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  uint64_t v13 = v12;
  if (v13)
  {
    uint64_t v15 = v13;
    int v16 = v13[4] - 1;
    if (!v16)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v17);
      _Unwind_Resume(a1);
    }
    v15[4] = v16;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138ADE4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138AFC0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A0E8[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E138B134(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138B29C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138B3C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E138B470(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138B4FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138B588(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138B6A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  uint64_t v13 = v12;
  if (v13)
  {
    uint64_t v15 = v13;
    int v16 = v13[4] - 1;
    if (!v16)
    {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v17);
      _Unwind_Resume(a1);
    }
    v15[4] = v16;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E138B860(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0A8[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E138BA38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0B8[a12])(v15 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E138BBEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0A8[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E138BD10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138BD94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138BE44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E138BE80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E138BFB8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0B8[a12])(v15 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E138C1E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A0C8[a12])(v14 - 32, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E138C424(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138C4A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138C51C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138C6DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E138C7F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138CAC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12CDATASectionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12CDATASectionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21ProcessingInstructionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21ProcessingInstructionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore5EventENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[4];
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore5EventENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::XPathExpression *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15XPathExpressionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::XPathExpression **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::XPathExpression::~XPathExpression(result);
      return (WebCore::XPathExpression *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15XPathExpressionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XPathResultENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
    {
      uint64_t v3 = (WTF *)MEMORY[0x1E4E44B30]();
      return (_DWORD *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XPathResultENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  *(void *)a2 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) != 1)
    {
      --*((_DWORD *)v2 + 2);
      return;
    }
    uint64_t v3 = (WTF::StringImpl *)v2[2];
    v2[2] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, a2);
        uint64_t v4 = *v2;
        if (!*v2)
        {
LABEL_10:
          JUMPOUT(0x1E4E44AE0);
        }
LABEL_9:
        *(void *)(v4 + ++*(_DWORD *)(this - 8) = 3;
        *uint64_t v2 = 0;
        goto LABEL_10;
      }
      *(_DWORD *)v3 -= 2;
    }
    uint64_t v4 = *v2;
    if (!*v2) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore7ElementENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8NodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[4];
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8NodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  *(void *)a2 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) != 1)
    {
      --*((_DWORD *)v2 + 2);
      return;
    }
    uint64_t v3 = (WTF::StringImpl *)v2[2];
    v2[2] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, a2);
        uint64_t v4 = *v2;
        if (!*v2)
        {
LABEL_10:
          JUMPOUT(0x1E4E44AE0);
        }
LABEL_9:
        *(void *)(v4 + ++*(_DWORD *)(this - 8) = 3;
        *uint64_t v2 = 0;
        goto LABEL_10;
      }
      *(_DWORD *)v3 -= 2;
    }
    uint64_t v4 = *v2;
    if (!*v2) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::RefCounted<WebCore::TreeWalker>::deref(void *result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v2 = result[4];
    v1[4] = 0;
    if (v2)
    {
      if (*(_DWORD *)(v2 + 28) == 2)
      {
        if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
        }
      }
      else
      {
        *(_DWORD *)(v2 + 28) -= 2;
      }
    }
    uint64_t v3 = v1 - 1;
    uint64_t v4 = (_DWORD *)v1[2];
    v1[2] = 0;
    if (v4)
    {
      if (v4[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
        uint64_t v5 = v1[1];
        v1[1] = 0;
        if (!v5) {
          goto LABEL_18;
        }
LABEL_14:
        if (*(_DWORD *)(v5 + 28) == 2)
        {
          if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
        }
        else
        {
          *(_DWORD *)(v5 + 28) -= 2;
        }
LABEL_18:
        if (*v3)
        {
          *(void *)(*v3 + ++*(_DWORD *)(this - 8) = 3;
          *uint64_t v3 = 0;
        }
        JUMPOUT(0x1E4E44700);
      }
      --v4[4];
    }
    uint64_t v5 = v1[1];
    v1[1] = 0;
    if (!v5) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  --*(_DWORD *)result;
  return result;
}

void sub_1E138D258(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138D2BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138D494(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138D5C8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E138D5DC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E138DA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E138DBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v10 - 24));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v12);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a10);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a10);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a10);
  _Unwind_Resume(a1);
}

void sub_1E138DD40(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E138DF84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E138E074(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t kitClass()
{
  return objc_opt_class();
}

void sub_1E138E120(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138E1DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138E2A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138E360(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138E428(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138E4E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138E5AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138E668(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138E7B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138E874(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138E93C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138E9F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138EAC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138EB7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138EC44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138ED00(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138EDC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138EE84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138EF4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138F008(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F0D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138F18C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F254(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138F310(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F3F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F4A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138F508(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E138F5B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F6B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F79C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F888(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138F974(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138FA60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138FB4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138FC38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138FD24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138FE10(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E138FF5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1390018(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13900E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139019C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390318(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139039C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1390458(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390520(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13905DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13906A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1390760(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390828(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13908E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13909AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1390A68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390B10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1390B78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1390C24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390D24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390E0C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390EF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1390FE4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13910D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13911BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13912A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391394(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391480(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391548(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1391604(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13916EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13917E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13918AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1391968(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391A30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1391AEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391BB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1391C70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391D38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1391DF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1391EBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1391F78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392040(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13920FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13921C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392280(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392348(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392404(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13924CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392588(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392650(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139270C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392888(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13929C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392A38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392AE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392B9C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392CEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392DA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392E70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1392F2C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1392FD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139305C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1393118(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13931B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13932AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13933A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13934F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16)
{
  if (a14 != -1)
  {
    ((void (*)(WTF::StringImpl **, char *))off_1F3C7A0F8[a14])(&a10, &a12);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1E13936CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139375C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1393828(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E139383C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1393990(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  if (a11)
  {
    if (a11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[4];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E1393B5C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1393B70(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E1393CD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1393E10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1393E94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1393F50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14UncachedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14UncachedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E1394090(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13941A8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13942C0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13943B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1394464(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139454C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139463C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394724(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13947E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1394898(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394958(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1394A0C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394ACC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1394B80(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394C40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1394CF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394DB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1394E68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394F50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1394FAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395140(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::FixedVector<WTF::String>::~FixedVector(&a9, a2);
  int v16 = *(WTF::StringImpl **)(v13 - 48);
  *(void *)(v13 - 4++*(_DWORD *)(this - 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

WTF **WTF::FixedVector<WTF::String>::~FixedVector(WTF **a1, StringImpl *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    int v5 = (WTF::StringImpl **)((char *)v3 + 8);
    uint64_t v4 = *(unsigned int *)v3;
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        CFStringRef v7 = *v5;
        void *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void sub_1E13953B0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::FixedVector<WTF::String>::~FixedVector(&a9, a2);
  int v16 = *(WTF::StringImpl **)(v13 - 48);
  *(void *)(v13 - 4++*(_DWORD *)(this - 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E1395510(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13955CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1395694(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395750(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13957F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139585C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13958D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139598C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1395A5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395AC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395B4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395BB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395C34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395CF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1395E6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395EF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1395FAC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1396094(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13961B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13962C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13963E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13964FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1396618(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13966F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1396754(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13967B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13968C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1396984(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1396A7C(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1396BD4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1396D78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A108[a12])(v15 - 48, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E1396F38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A118[a10])(v16 - 48, &a9);
  }
  uint64_t v19 = a11;
  a11 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v18);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
  _Unwind_Resume(a1);
}

void sub_1E13970E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1E13971E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397270(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13972D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397350(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397404(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13974CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397588(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1397638(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13976A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13977B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139786C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139795C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E1397A5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1397B24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397BE0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1397C90(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397CFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397D74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397DF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1397EB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1397F7C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1398038(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398100(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13981BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398284(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1398340(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398430(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398530(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13985F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13986A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139878C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398868(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398950(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398A2C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398B14(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398C0C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398D5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1398E18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1398F94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1399018(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13990D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13991CC(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1399294(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13992F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139934C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13993B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1399434(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13994F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13995B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1399674(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139973C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13997F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13998C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139997C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1399ACC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1399B88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1399D04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1399D88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1399E44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E1399F34(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E139A034(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139A0E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A164(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A214(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A2D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139A398(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A454(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139A51C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A5D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139A754(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A7D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139A894(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139A95C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139AA18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139AB3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139ABF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139ACC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139AD7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139AE68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139AF24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139AFEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139B0A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139B170(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139B22C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139B2F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139B3B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139B478(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139B534(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139B5FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139B6B8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139B808(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139B8C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139B98C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139BA48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139BB10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139BBCC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139BCBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E139BDBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139BE84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139BF40(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139C008(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C0C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139C170(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C1F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C300(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C3BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139C484(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C540(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139C608(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C6C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139C78C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139C848(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139C930(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139CA28(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139CAD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139CB34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139CBA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139CC0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139CD44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139CDF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E139CEF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139CFE0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E139D0E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139D1A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D264(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139D32C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D3E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139D4A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D52C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D5E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139D698(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D704(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D768(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D7CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D830(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139D8DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E139D9DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139DA84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DAE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DB4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DBB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DC5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139DD04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DD88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DE44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139DF0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139DFC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139E0B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139E1A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139E324(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E45C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E514(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E598(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E654(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139E7D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E848(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E8B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139E9F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4) {
    WTF::RefCounted<WebCore::FileList>::deref(a4 + 8, a2);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E139EAB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139EBA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139EC90(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139ED88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139EE70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139EF68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139F0E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F168(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F224(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139F2CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F330(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F3E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F480(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E139F550(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F60C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139F72C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E139F768(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E139F7EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139F8A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139FA24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139FB30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139FBEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139FCB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139FD70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E139FE38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E139FEF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0070(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A01A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0250(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0348(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A03F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A04F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A05BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0678(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A076C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0820(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A08E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0994(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0A7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0BB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0C68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0D08(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A0D44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0DB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0E4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A0E88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A0EEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0F50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A0FB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A105C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A1154(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A121C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1280(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A12E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1348(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A13C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1470(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A1538(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A15F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A16BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1778(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A184C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1908(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A1A40(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A1B84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1CBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1D4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A1D88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A1E18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A1E54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A1EC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A1F6C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A2018(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A2114(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A22E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1E13A2410(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A246C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A255C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A2754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A2774(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A296C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a18, v19);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a18, v20);
    _Unwind_Resume(a1);
  }
  std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a18, v21);
  _Unwind_Resume(a1);
}

void sub_1E13A2AC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A2B48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A2C04(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A2CB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A2D20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 24)) {
    return a1;
  }
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (!v4) {
    return a1;
  }
  if (*(_DWORD *)(v4 + 28) != 2)
  {
    *(_DWORD *)(v4 + 28) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v4 + 34) & 0x400) != 0) {
    return a1;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v4);
  return a1;
}

uint64_t WTF::RefCounted<WebCore::FileList>::deref(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v3 = result - 8;
    uint64_t v4 = *(unsigned int *)(result + 20);
    if (v4)
    {
      int v5 = *(_DWORD ***)(result + 8);
      uint64_t v6 = 8 * v4;
      do
      {
        CFStringRef v7 = *v5;
        void *v5 = 0;
        if (v7)
        {
          if (v7[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[4];
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    uint64_t v8 = *(WTF **)(v2 + 8);
    if (v8)
    {
      *(void *)(v2 + ++*(_DWORD *)(this - 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    if (*(void *)v3)
    {
      *(void *)(*(void *)v3 + ++*(_DWORD *)(this - 8) = 3;
      *(void *)uint64_t v3 = 0;
    }
    JUMPOUT(0x1E4E48930);
  }
  --*(_DWORD *)result;
  return result;
}

void sub_1E13A2F30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A2FB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A3070(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3150(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3220(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A32DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3388(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A340C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A34C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3590(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A364C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A37C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A384C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A3908(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A39F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3AF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3BC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A3C7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3D44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A3E00(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A3EC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A3F84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A404C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4108(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A41D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A428C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4354(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4410(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A44D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4594(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A467C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4774(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4820(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4884(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A48EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A49A0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4B10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4BCC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4C94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4D50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4E18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A4ED4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A4F9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5058(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A5120(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A51DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A528C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A52F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A535C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A53EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A5428(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A548C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A54F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5554(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A55B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A56F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A575C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A57C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A584C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5908(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A59A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5A04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5A6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5B18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A5C18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A5CD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5D78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A5E70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A5F18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A5FBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A60B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A61D8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref((uint64_t *)va, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v4);
  _Unwind_Resume(a1);
}

void sub_1E13A61F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void *WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      uint64_t v4 = *(WTF **)(v3 + 8);
      if (v4)
      {
        *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v4, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return result;
}

void sub_1E13A62EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6350(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A63E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A647C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A64B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A654C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A65D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A666C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6700(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6794(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6828(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6908(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref((uint64_t *)va, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v4);
  _Unwind_Resume(a1);
}

void sub_1E13A6924(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A6A04(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref((uint64_t *)va, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v4);
  _Unwind_Resume(a1);
}

void sub_1E13A6A20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A6A84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6BBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6CF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6D58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6DBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6E50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A6F1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13A6F58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A6FE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7070(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A71A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A720C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7270(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A72FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7388(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7414(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7498(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7554(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A75F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A76F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A77D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7858(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A78DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7948(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7A80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7B04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7BC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A7C88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7D44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A7E94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A7F50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A8018(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A80D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A81C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A82C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A838C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8448(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A85C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8684(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A87BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8840(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A88FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A89B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8A3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8AF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A8BC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8C7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A8D44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8E00(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A8EC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A8F84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A904C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9108(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A91D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A928C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A937C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A947C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A95F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A967C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9738(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A97E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9854(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9960(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9A1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A9AE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9BA0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A9C68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9D24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A9DEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9EA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13A9F58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13A9FC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA048(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA104(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AA1B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA284(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA3BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA440(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA4FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AA678(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA6E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AA784(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AA87C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AA9F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AAA60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AAAC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AAB68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AAC60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AAD48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AADF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AAEF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AAF5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AAFC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AB050(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13AB08C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AB138(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AB14C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AB2A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a20, a2);
  if (a12 && a10 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A128[a10])(v24 - 48, &a9);
  }
  if (a18 != -1)
  {
    ((void (*)(uint64_t *, __int16 *))off_1F3C7A138[a18])(&a9, &a14);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a23, v27);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a23, v26);
  _Unwind_Resume(a1);
}

void sub_1E13AB39C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AB40C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AB540(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13AB554(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13AB608(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AB6C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AB814(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AB8D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AB998(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ABA54(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ABB1C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ABBD8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ABCA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ABD5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11HTMLElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSG_iEEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLOptionElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19HTMLOptGroupElementENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLOptionElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19HTMLOptGroupElementENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

void sub_1E13ABEA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ABF0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AC044(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AC0F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC1F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC2DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC3CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC494(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AC550(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC618(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AC6D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC79C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AC858(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AC900(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AC964(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ACA9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ACB48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ACC48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ACD10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ACDCC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ACEB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ACFAC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AD074(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD130(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AD2AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD3E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD45C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD514(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD620(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD6DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AD7D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD880(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AD934(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AD9FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ADA60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ADAC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ADB68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ADC58(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ADD34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ADDA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13ADE50(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13ADE64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE070(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  if (v15 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *))off_1F3C7A158[v15])((uint64_t *)va, (uint64_t *)va1);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va2, v8);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE16C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE1D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE238(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE29C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE320(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE3DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE4A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE560(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE60C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE690(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE74C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE814(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE8D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AE978(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AE9FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AEAB8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AEB80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AEC3C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AED04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AEDC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AEE88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AEF44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AF00C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF0C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AF170(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF1D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF238(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF29C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF320(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF3DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AF4A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF560(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AF6DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF760(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF81C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AF8E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AF9A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AFA68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AFB24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AFBE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AFC98(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AFD60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AFE1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13AFEE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13AFFA0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0068(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B0124(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B029C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B0358(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0420(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B04DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B05BC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B06FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B0800(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0940(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B0A44(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0B84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B0CA0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0DB8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B0EA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B0F5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1024(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B10E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B11A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B1264(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B132C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B13E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B14B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B156C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1634(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B16F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B17B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B1874(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B193C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B19F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1AC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B1B7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1E13B1C78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1CD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B1D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1E13B1D8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1DE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B1E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1E13B1EA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1E13B1F58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B1FB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B20BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A168[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B21BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B21F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B225C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B22C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B2374(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B245C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B2518(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B25E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B269C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B2764(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B2820(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B28E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B29A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B2A6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B2B28(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B2C74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A178[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B2D74(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B2DB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B2E34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B2EF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B2FB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B3074(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B313C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B31F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B32C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B337C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B3474(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B35E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A188[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B36E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B371C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B3940(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B3A0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B3B10(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B3D1C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B3DDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B3F48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B3F84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B40D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B41DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B42EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B43F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B45FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B47C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B4904(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B4A44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B4B10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B4C14(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B4D44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B4E30(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B4F68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5098(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5214(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5334(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B53E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B54E0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B55F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B569C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B5748(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B57F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B58B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B59AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5ABC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B5BC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5CF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5E30(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B5F24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B6068(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B6284(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v17);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1E13B63F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B6538(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B65DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B66CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B6848(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B68CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6988(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B6A38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6AA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6B10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6B7C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6BE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6C44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6CF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B6DF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B6F6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B6FD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B7034(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B70BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B70F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B7154(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B73D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13, uint64_t a14, int a15, int a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A198[a15])(v21 - 48, &a13);
  }
  a15 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a19, v23);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a19, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a19, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B769C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A1A8[a13])(v19 - 64, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B7898(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, _DWORD *a12, char a13)
{
  if (a12)
  {
    if (a12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a12 + 8))(a12);
    }
    else {
      --a12[2];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B7A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
  _Unwind_Resume(a1);
}

void sub_1E13B7BCC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13B7BE0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11HTMLElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11HTMLElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20HTMLTableCellElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20HTMLTableCellElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19HTMLTableRowElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19HTMLTableRowElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12DocumentTypeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12DocumentTypeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XMLDocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XMLDocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t getDOMWrapper(DOMObjectInternal *a1)
{
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (!v2)
  {
      goto LABEL_3;
LABEL_13:
    uint64_t v10 = 0;
    wrapperCache(void)::map = 0;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1) {
      return v10;
    }
    goto LABEL_9;
  }
  MEMORY[0x1E4E44220](wrapperCacheLock);
    goto LABEL_13;
LABEL_3:
  if (!wrapperCache(void)::map) {
    goto LABEL_10;
  }
  unsigned int v3 = *(_DWORD *)(wrapperCache(void)::map - 8);
  unint64_t v4 = ((unint64_t)a1 + ~((void)a1 << 32)) ^ (((unint64_t)a1 + ~((void)a1 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = *(DOMObjectInternal **)(wrapperCache(void)::map + 16 * v7);
  if (v8 != a1)
  {
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(DOMObjectInternal **)(wrapperCache(void)::map + 16 * v7);
      ++v9;
      if (v8 == a1) {
        goto LABEL_8;
      }
    }
LABEL_10:
    uint64_t v10 = 0;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1) {
      return v10;
    }
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    return v10;
  }
LABEL_8:
  uint64_t v10 = *(void *)(wrapperCache(void)::map + 16 * v7 + 8);
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    goto LABEL_9;
  }
  return v10;
}

uint64_t *addDOMWrapper(NSObject *a1, DOMObjectInternal *a2)
{
  char v2 = 0;
  uint64_t v7 = a1;
  unint64_t v6 = a2;
  atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    MEMORY[0x1E4E44220](wrapperCacheLock);
      goto LABEL_3;
  }
  {
    goto LABEL_3;
  }
  wrapperCache(void)::map = 0;
LABEL_3:
  uint64_t result = WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v6, (uint64_t *)&v7, (uint64_t)v5);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  }
  return result;
}

void sub_1E13B7FDC(_Unwind_Exception *exception_object)
{
  char v2 = v1;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  _Unwind_Resume(exception_object);
}

_OWORD *removeDOMWrapper(_OWORD *result)
{
  uint64_t v1 = result;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (!v2)
  {
      goto LABEL_3;
LABEL_24:
    wrapperCache(void)::map = 0;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1) {
      return result;
    }
    goto LABEL_25;
  }
  uint64_t result = (_OWORD *)MEMORY[0x1E4E44220](wrapperCacheLock);
    goto LABEL_24;
LABEL_3:
  if (wrapperCache(void)::map)
  {
    unsigned int v3 = *(_DWORD *)(wrapperCache(void)::map - 8);
    unint64_t v4 = ((unint64_t)v1 + ~((void)v1 << 32)) ^ (((unint64_t)v1 + ~((void)v1 << 32)) >> 22);
    unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
    uint64_t v8 = *(_OWORD **)(wrapperCache(void)::map + 16 * v7);
    if (v8 == v1)
    {
LABEL_8:
      if (v7 != *(_DWORD *)(wrapperCache(void)::map - 4))
      {
        *(void *)(wrapperCache(void)::map + 16 * v7) = -1;
        ++*(_DWORD *)(wrapperCache(void)::map - 16);
        if (wrapperCache(void)::map)
        {
          --*(_DWORD *)(wrapperCache(void)::map - 12);
          if (wrapperCache(void)::map)
          {
            unsigned int v10 = *(_DWORD *)(wrapperCache(void)::map - 4);
            if (6 * *(_DWORD *)(wrapperCache(void)::map - 12) < v10 && v10 >= 9) {
              uint64_t result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(&wrapperCache(void)::map, v10 >> 1, 0);
            }
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        }
      }
    }
    else
    {
      int v9 = 1;
      while (v8)
      {
        uint64_t v7 = (v7 + v9) & v3;
        uint64_t v8 = *(_OWORD **)(wrapperCache(void)::map + 16 * v7);
        ++v9;
        if (v8 == v1) {
          goto LABEL_8;
        }
      }
    }
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1)
  {
LABEL_25:
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  }
  return result;
}

void sub_1E13B81DC(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  _Unwind_Resume(exception_object);
}

void sub_1E13B8464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, _DWORD *a10)
{
  if (a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 8))(a9);
    }
    else {
      --a9[2];
    }
  }
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::toJS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 2;
  }
  if (*(unsigned char *)(a2 + 3416))
  {
    uint64_t v4 = *(void *)(a3 + 8);
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 8) & 3) == 0)
      {
        uint64_t Wrapper = *(void *)v4;
        if (*(void *)v4) {
          return Wrapper;
        }
      }
    }
  }
  else
  {
    uint64_t result = WebCore::getOutOfLineCachedWrapper();
    if (result) {
      return result;
    }
  }
  *(_DWORD *)(a3 + 28) += 2;
  uint64_t Wrapper = WebCore::createWrapper();
  if (*(_DWORD *)(a3 + 28) != 2)
  {
    *(_DWORD *)(a3 + 28) -= 2;
    return Wrapper;
  }
  if ((*(_WORD *)(a3 + 34) & 0x400) != 0) {
    return Wrapper;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)a3);
  return Wrapper;
}

void sub_1E13B8608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13B86A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B88EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B8950(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B89F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B8BF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B8E3C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B9084(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B92CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B9588(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13B959C(_Unwind_Exception *a1)
{
  int v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13B96F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B97E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B9890(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13B993C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B9A58(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13B9B78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13B9CF8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13B9D0C(_Unwind_Exception *a1)
{
  int v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BA094(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BA0F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BA15C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BA2D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

WebCore::Node *kit(WebCore::Node *result)
{
  if (result)
  {
    uint64_t v1 = result;
    DOMuint64_t Wrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      int v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      uint64_t v4 = (void *)CFMakeCollectable(v3);
      return (WebCore::Node *)v4;
    }
    else
    {
      uint64_t result = (WebCore::Node *)[objc_alloc((Class)kitClass(v1)) _init];
      if (result)
      {
        int v5 = result;
        char v6 = 0;
        *((void *)result + 2) = v1;
        *((_DWORD *)v1 + 7) += 2;
        unsigned int v10 = result;
        int v9 = v1;
        atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
        if (v6) {
          MEMORY[0x1E4E44220](wrapperCacheLock);
        }
        {
          wrapperCache(void)::map = 0;
        }
        WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v9, (uint64_t *)&v10, (uint64_t)v8);
        int v7 = 1;
        atomic_compare_exchange_strong_explicit(wrapperCacheLock, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
        }
        return (WebCore::Node *)(id)CFMakeCollectable(v5);
      }
    }
  }
  return result;
}

void sub_1E13BA45C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BA470(_Unwind_Exception *a1)
{
  int v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BA55C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BA754(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BA85C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BA900(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BA9CC(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BAA98(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BACB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  uint64_t v16 = *(WTF::StringImpl **)(v14 - 72);
  *(void *)(v14 - 72) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BAE64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BAF44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BB15C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A1B8[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BB360(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A1C8[a13])(v19 - 32, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BB4B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) != 2)
    {
      *((_DWORD *)a10 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BB634(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BB87C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A1C8[a13])(v19 - 48, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BBA98(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BBC1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BBD24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BBE70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BBF6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC020(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BC108(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC18C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC1F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC260(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC2CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC368(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC404(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC504(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BC614(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC698(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC714(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BC7BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BC8E8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BC9FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BCA60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BCB60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) != 2)
    {
      *((_DWORD *)a9 + 7) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a9 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a9);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BCC90(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BCCCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BCCE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BCD80(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BCDBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BCDD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BCE70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BCEAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BCEC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD038(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A1D8[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD104(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BD18C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BD268(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BD334(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD348(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD444(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD458(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD530(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BD5EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BD668(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BD6C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BD810(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, uint64_t a13, _DWORD *a14, WTF::StringImpl *a15, char a16)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A1E8[a12])(v16 - 33, &a10);
  }
  uint64_t v18 = a14;
  a14 = 0;
  if (v18)
  {
    if (v18[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[4];
    }
  }
  uint64_t v19 = a15;
  a15 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BDA14(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, uint64_t a13, _DWORD *a14, WTF::StringImpl *a15, char a16)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A1E8[a12])(v16 - 33, &a10);
  }
  uint64_t v18 = a14;
  a14 = 0;
  if (v18)
  {
    if (v18[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[4];
    }
  }
  uint64_t v19 = a15;
  a15 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BDBF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v14 = *(_DWORD **)(v12 - 40);
  *(void *)(v12 - 40) = 0;
  if (v14)
  {
    if (v14[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
    }
    else {
      --v14[4];
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BDDB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v14 = *(_DWORD **)(v12 - 40);
  *(void *)(v12 - 40) = 0;
  if (v14)
  {
    if (v14[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
    }
    else {
      --v14[4];
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BDEF8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A1F8[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23AddEventListenerOptionsEbEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_bEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 1)
    {
      MEMORY[0x1E4E44740]();
      JUMPOUT(0x1E4E44750);
    }
    --*(_DWORD *)(result + 24);
  }
  return result;
}

uint64_t *WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = ~(*a2 << 32) + *a2;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *uint64_t v16 = v11;
    v16[1] = *a3;
    if (*v6)
    {
      ++*(_DWORD *)(*v6 - 12);
      uint64_t v20 = *v6;
      if (*v6) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v20 = *v6;
      if (*v6)
      {
LABEL_14:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(unsigned int *)(v20 - 16);
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(void *)a4 = v16;
        *(void *)(a4 + ++*(_DWORD *)(this - 8) = v20 + 16 * v22;
        *(unsigned char *)(a4 + 16) = 1;
        return result;
      }
      if (!v22)
      {
        uint64_t result = (uint64_t *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(v6, 8u, v16);
        uint64_t v16 = result;
        uint64_t v20 = *v6;
        if (!*v6)
        {
LABEL_18:
          unint64_t v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = (uint64_t *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(v6, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      uint64_t v16 = result;
      uint64_t v20 = *v6;
      if (!*v6) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        uint64_t *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v11 = *a2;
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + ++*(_DWORD *)(this - 8) = v8 + 16 * v23;
  *(unsigned char *)(a4 + 16) = 0;
  v16[1] = *a3;
  return result;
}

WebCore::WindowProxy *WTF::RefCounted<WebCore::WindowProxy>::deref(WebCore::WindowProxy *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::WindowProxy::~WindowProxy(result);
    return (WebCore::WindowProxy *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_1E13BE314(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BE3C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BE438(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BE560(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)(v13 + 28) == 2)
    {
      if ((*(_WORD *)(v13 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
    }
    else
    {
      *(_DWORD *)(v13 + 28) -= 2;
    }
  }
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A208[a11])(v14 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BE69C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)(v13 + 28) == 2)
    {
      if ((*(_WORD *)(v13 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
    }
    else
    {
      *(_DWORD *)(v13 + 28) -= 2;
    }
  }
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A208[a11])(v14 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BE85C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BE870(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BE9C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BEA58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BEB8C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BEBA0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BEE3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BEEA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF060(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF0C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF130(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF198(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF260(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a9 & 0x8000000000000) != 0)
  {
    unint64_t v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BF3E0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BF3F4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13BF530(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF5E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF6FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BF83C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
  _Unwind_Resume(a1);
}

void sub_1E13BF8B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BF99C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BF9E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFAD4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BFB20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFBBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BFBF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFC0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFCA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BFCE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFCF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFD94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BFDD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFDE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFE80(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13BFEBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFED0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13BFF34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13BFFD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13C000C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0020(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C00BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13C00F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C010C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C01D0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A218[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C02CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13C0308(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0408(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A228[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0578(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A228[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C06D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13C0724(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C07C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13C07FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0810(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C08C4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0A5C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C0A70(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C0B44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0D00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12, uint64_t a13, int a14, uint64_t a15, char a16)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A228[a14])(v16 - 32, &a12);
  }
  a14 = -1;
  if (a10 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A238[a10])(v16 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v18);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0E58(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A248[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C0F44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1008(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A218[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C1140(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A258[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C128C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

DOMObjectInternal *kit()
{
  WebCore::createLiveRange();
  v0 = kit(v2);
  if (!v2) {
    return v0;
  }
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return v0;
  }
  (*(void (**)())(*(void *)v2 + 8))();
  return v0;
}

void sub_1E13C13B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJsN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJsS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore5Range14CompareResultsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E13C15C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1628(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1690(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C16F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C182C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C1840(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C19D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C1AA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1B24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1BAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1C34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C1D70(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C1D84(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C1E78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C1F80(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C204C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C2138(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C21A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C22DC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C22F0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C23C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2510(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A268[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2660(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)(v11 + 28) == 2)
    {
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 28) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2764(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2920(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2AA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C2B58(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A278[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2C68(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A278[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C2DFC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C2E10(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C2F34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C2FB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C3064(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3144(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C31EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3338(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A288[a12])(v14 - 48, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3510(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C3524(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C3630(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C36E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C3754(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C37C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C3874(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3958(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3A3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3B20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3C04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3CE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3DCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A298[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C3F38(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C3F4C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E13C40A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C41D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C42C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C4344(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C43C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C444C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C44D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C4554(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C46AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C4A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_1E13C4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_1E13C4F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C5214(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C56DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v4 = *(_DWORD **)(v2 - 24);
  *(void *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1E13C576C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a13)
  {
    if (*((_DWORD *)a13 + 7) != 2)
    {
      *((_DWORD *)a13 + 7) -= 2;
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a13 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a13);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x1E13C5764);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>@<X0>(WebCore *a1@<X0>, VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::makeBoundaryPoint((uint64_t *)&v11, a1, a2);
  uint64_t result = WebCore::makeBoundaryPoint((uint64_t *)&v9, (WebCore *)a2, v5);
  int v7 = v10;
  if (v12) {
    BOOL v8 = v10 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    if (!v7) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)WebCore::SimpleRange::SimpleRange();
    *(void *)a3 = v13;
    *(_DWORD *)(a3 + ++*(_DWORD *)(this - 8) = v14;
    *(void *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 24) = v16;
    *(unsigned char *)(a3 + 32) = 1;
    if (!v10) {
      goto LABEL_14;
    }
  }
  uint64_t result = (uint64_t *)v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 7) == 2)
    {
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        uint64_t result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *((_DWORD *)result + 7) -= 2;
    }
  }
LABEL_14:
  if (v12)
  {
    uint64_t result = (uint64_t *)v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 7) == 2)
      {
        if ((*((_WORD *)result + 17) & 0x400) == 0) {
          return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
      else
      {
        *((_DWORD *)result + 7) -= 2;
      }
    }
  }
  return result;
}

void sub_1E13C58C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E13C58E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::optional<WebCore::SimpleRange>::~optional(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 32)) {
    return a1;
  }
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)(v3 + 28) != 2)
  {
    *(_DWORD *)(v3 + 28) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v3 + 34) & 0x400) != 0) {
    return a1;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v3);
  return a1;
}

void sub_1E13C6004(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C61A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C61B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t initializeDOMWrapperHooks(void)
{
  return MEMORY[0x1F4171580](createDOMWrapper, disconnectWindowWrapper);
}

WebCore::Node *createDOMWrapper()
{
  v0 = (WebCore::CSSRule *)WebCore::JSCSSRule::toWrapped();
  if (v0)
  {
    return (WebCore::Node *)kit(v0);
  }
  uint64_t v2 = (DOMObjectInternal *)WebCore::JSCSSRuleList::toWrapped();
  if (v2)
  {
    return kit(v2);
  }
  uint64_t v3 = (DOMObjectInternal *)WebCore::JSCSSStyleDeclaration::toWrapped();
  if (v3)
  {
    return kit(v3);
  }
  uint64_t v4 = (WebCore::DeprecatedCSSOMValue *)WebCore::JSDeprecatedCSSOMValue::toWrapped();
  if (v4)
  {
    return (WebCore::Node *)kit(v4);
  }
  uint64_t v5 = (DOMObjectInternal *)WebCore::JSDeprecatedCSSOMCounter::toWrapped();
  if (v5)
  {
    return kit(v5);
  }
  uint64_t v6 = (DOMObjectInternal *)WebCore::JSDOMImplementation::toWrapped();
  if (v6)
  {
    return kit(v6);
  }
  int v7 = (DOMObjectInternal *)WebCore::JSEvent::toWrapped();
  if (v7)
  {
    return (WebCore::Node *)kit(v7);
  }
  uint64_t result = (WebCore::Node *)WebCore::JSHTMLOptionsCollection::toWrapped();
  if (result) {
    goto LABEL_30;
  }
  BOOL v8 = (DOMObjectInternal *)WebCore::JSMediaList::toWrapped();
  if (v8)
  {
    return kit(v8);
  }
  else
  {
    uint64_t v9 = (DOMObjectInternal *)WebCore::JSNamedNodeMap::toWrapped();
    if (v9)
    {
      return kit(v9);
    }
    else
    {
      unsigned __int8 v10 = (WebCore::Node *)WebCore::JSNode::toWrapped();
      if (v10)
      {
        return kit(v10);
      }
      else
      {
        CFTypeRef v11 = (DOMObjectInternal *)WebCore::JSNodeIterator::toWrapped();
        if (v11)
        {
          return kit(v11);
        }
        else
        {
          char v12 = (DOMObjectInternal *)WebCore::JSNodeList::toWrapped();
          if (v12)
          {
            return kit(v12);
          }
          else
          {
            uint64_t v13 = (DOMObjectInternal *)WebCore::JSDeprecatedCSSOMRGBColor::toWrapped();
            if (v13)
            {
              return kit(v13);
            }
            else
            {
              int v14 = (DOMObjectInternal *)WebCore::JSRange::toWrapped();
              if (v14)
              {
                return kit(v14);
              }
              else
              {
                uint64_t v15 = (DOMObjectInternal *)WebCore::JSDeprecatedCSSOMRect::toWrapped();
                if (v15)
                {
                  return kit(v15);
                }
                else
                {
                  int v16 = (DOMObjectInternal *)WebCore::JSStyleSheet::toWrapped();
                  if (v16)
                  {
                    return (WebCore::Node *)kit(v16);
                  }
                  else
                  {
                    uint64_t v17 = (DOMObjectInternal *)WebCore::JSStyleSheetList::toWrapped();
                    if (v17)
                    {
                      return kit(v17);
                    }
                    else
                    {
                      uint64_t v18 = (DOMObjectInternal *)WebCore::JSTreeWalker::toWrapped();
                      if (v18)
                      {
                        return kit(v18);
                      }
                      else
                      {
                        int v19 = (WebCore::WindowProxy *)WebCore::JSWindowProxy::toWrapped();
                        if (v19)
                        {
                          return (WebCore::Node *)kit(v19);
                        }
                        else
                        {
                          uint64_t v20 = (DOMObjectInternal *)WebCore::JSXPathExpression::toWrapped();
                          if (v20)
                          {
                            return kit(v20);
                          }
                          else
                          {
                            uint64_t v21 = (DOMObjectInternal *)WebCore::JSXPathResult::toWrapped();
                            if (!v21)
                            {
                              uint64_t result = (WebCore::Node *)WebCore::JSHTMLCollection::toWrapped();
                              if (!result) {
                                return result;
                              }
LABEL_30:
                              return (WebCore::Node *)kit(result);
                            }
                            return kit(v21);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1E13C6AD0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C6C50(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C6C64(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C6E70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A2A8[a11])(v13 - 48, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C7014(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C7028(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C7190(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C71A4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13C72C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C7368(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A2B8[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C74E0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A2C8[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C75E8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A2D8[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C7714(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A2E8[a12])(v15 - 32, &a10);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C77D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13C7878(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1F3C7A2F8[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C79A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A2E8[a12])(v15 - 32, &a10);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1E13C7AD8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1F3C7A2E8[a12])(v15 - 32, &a10);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void raiseTypeErrorException(void)
{
}

void raiseDOMErrorException()
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = WebCore::DOMException::description();
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned __int8 *)(v0 + 32);
  id v3 = [NSString alloc];
  if (v1) {
    uint64_t v4 = [v3 initWithFormat:@"*** %s: %@ %d", v1, @"DOMException", v2];
  }
  else {
    uint64_t v4 = [v3 initWithFormat:@"*** %@ %d", @"DOMException", v2, v7];
  }
  uint64_t v5 = v4;
  uint64_t v8 = @"DOMException";
  v9[0] = [NSNumber numberWithUnsignedChar:v2];
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA00], "exceptionWithName:reason:userInfo:", @"DOMException", v5, v6), "raise");
  __break(0xC471u);
}

{
  raiseDOMErrorException();
}

void sub_1E13C7C44(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void raiseNotSupportedErrorException(void)
{
}

void WebCore::VisibleSelection::~VisibleSelection(WebCore::VisibleSelection *this)
{
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this - 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 28) == 2)
    {
      if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 28) -= 2;
    }
  }
  uint64_t v7 = *(void *)this;
  *(void *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 28) == 2)
    {
      if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      *(_DWORD *)(v7 + 28) -= 2;
    }
  }
}

uint64_t *std::optional<WebCore::BoundaryPoint>::~optional(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 16)) {
    return a1;
  }
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)(v2 + 28) != 2)
  {
    *(_DWORD *)(v2 + 28) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v2 + 34) & 0x400) != 0) {
    return a1;
  }
  WebCore::Node::removedLastRef((WebCore::Node *)v2);
  return a1;
}

void *WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(unsigned int *)(v3 + 20);
    if (v4)
    {
      uint64_t v5 = 16 * v4;
      uint64_t v6 = (unsigned int **)(*(void *)(v3 + 8) + 8);
      do
      {
        uint64_t v7 = *v6;
        DOMObjectInternal *v6 = 0;
        if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
        {
          uint64_t v11 = v5;
          char v12 = v6;
          atomic_store(1u, v7);
          uint64_t v13 = (WTF *)v7;
          uint64_t v8 = v7[6];
          if (v8 != -1) {
            ((void (*)(char *, unsigned int *))off_1F3C7A308[v8])(&v14, v7 + 2);
          }
          *((_DWORD *)v13 + 6) = -1;
          WTF::fastFree(v13, a2);
          uint64_t v5 = v11;
          uint64_t v6 = v12;
        }
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
    }
    uint64_t v9 = *(WTF **)(v3 + 8);
    if ((WTF *)(v3 + 24) != v9 && v9 != 0)
    {
      *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40EB1B8](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebCore::ObjCEventListener::wrap@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v3 = (const void *)result;
    if (WebCore::listenerMap)
    {
      uint64_t v4 = *(void *)WebCore::listenerMap;
      if (*(void *)WebCore::listenerMap)
      {
        unsigned int v5 = *(_DWORD *)(v4 - 8);
        unint64_t v6 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
        unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
        uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
        uint64_t v10 = *(void *)(v4 + 16 * v9);
        if (v10 == result)
        {
LABEL_8:
          uint64_t v12 = *(void *)(v4 + 16 * v9 + 8);
          if (v12)
          {
            ++*(_DWORD *)(v12 + 16);
LABEL_10:
            *a2 = v12;
            return result;
          }
        }
        else
        {
          int v11 = 1;
          while (v10)
          {
            uint64_t v9 = (v9 + v11) & v5;
            uint64_t v10 = *(void *)(v4 + 16 * v9);
            ++v11;
            if (v10 == result) {
              goto LABEL_8;
            }
          }
        }
      }
    }
    *a2 = 0;
    uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = WebCore::ObjCEventListener::ObjCEventListener(v12, v3);
    goto LABEL_10;
  }
  *a2 = 0;
  return result;
}

void sub_1E13C8118(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ObjCEventListener::ObjCEventListener(uint64_t a1, CFTypeRef cf)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 20) = 2;
  *(void *)a1 = &unk_1F3C7A338;
  *(void *)(a1 + ++*(_DWORD *)(this - 8) = 0;
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (uint64_t *)WebCore::listenerMap;
  if (!WebCore::listenerMap)
  {
    uint64_t v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *uint64_t v4 = 0;
    WebCore::listenerMap = (uint64_t)v4;
  }
  uint64_t v7 = a1;
  CFTypeRef v8 = cf;
  WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(v4, (uint64_t *)&v8, &v7, (uint64_t)v6);
  return a1;
}

void sub_1E13C81D0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = (const void *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::EventListener::~EventListener(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::EventListener::~EventListener(WebCore::EventListener *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
    uint64_t v4 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v4)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

void WebCore::ObjCEventListener::~ObjCEventListener(WebCore::ObjCEventListener *this)
{
  *(void *)this = &unk_1F3C7A338;
  uint64_t v2 = (uint64_t *)WebCore::listenerMap;
  uint64_t v3 = *(void *)WebCore::listenerMap;
  if (*(void *)WebCore::listenerMap)
  {
    uint64_t v4 = *((void *)this + 3);
    unsigned int v5 = *(_DWORD *)(v3 - 8);
    unint64_t v6 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
    uint64_t v10 = *(void *)(v3 + 16 * v9);
    if (v10 == v4)
    {
LABEL_6:
      if (v9 == *(_DWORD *)(v3 - 4)) {
        goto LABEL_19;
      }
      *(void *)(v3 + 16 * v9) = -1;
      ++*(_DWORD *)(*v2 - 16);
      if (*v2)
      {
        --*(_DWORD *)(*v2 - 12);
        uint64_t v12 = *v2;
        if (!*v2) {
          goto LABEL_19;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        uint64_t v12 = *v2;
        if (!*v2) {
          goto LABEL_19;
        }
      }
      unsigned int v13 = 6 * *(_DWORD *)(v12 - 12);
      unsigned int v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9) {
        WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(v2, v14 >> 1, 0);
      }
    }
    else
    {
      int v11 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v11) & v5;
        uint64_t v10 = *(void *)(v3 + 16 * v9);
        ++v11;
        if (v10 == v4) {
          goto LABEL_6;
        }
      }
    }
  }
LABEL_19:
  CFRetain(*((CFTypeRef *)this + 3));
  CFAutorelease(*((CFTypeRef *)this + 3));
  uint64_t v17 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *((void *)this + 1);
  if (v18)
  {
    *(void *)(v18 + ++*(_DWORD *)(this - 8) = 0;
    int v19 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v19)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v16);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebCore::ObjCEventListener::~ObjCEventListener(this);
  WTF::fastFree(v1, v2);
}

void sub_1E13C8450(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = (const void *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::EventListener::~EventListener(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ObjCEventListener::handleEvent(uint64_t a1, uint64_t a2, DOMObjectInternal *a3)
{
  uint64_t v3 = *(void **)(a1 + 24);
  id v4 = kit(a3);
  return [v3 handleEvent:v4];
}

BOOL WebCore::ObjCEventListener::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 20) == 2 && *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t WebCore::ObjCNodeFilterCondition::acceptNode(id *this, WebCore::Node *a2)
{
  return (unsigned __int16)[this[2] acceptNode:kit(a2)];
}

void sub_1E13C8718(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *(_DWORD **)(v13 - 24);
  *(void *)(v13 - 24) = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  uint64_t v16 = a13;
  a13 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(*(WTF::StringImpl **)a1, (StringImpl *)(*(void *)a1 + 24 * v3));
  }
  id v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1E13C89AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  uint64_t v16 = a13;
  a13 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

void sub_1E13C8F74(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C8FF8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    id v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)id v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 28) == 2)
        {
          if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
          }
        }
        else
        {
          *(_DWORD *)(v6 + 28) -= 2;
        }
      }
      id v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E13C92EC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C94BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  id v4 = *(_DWORD **)(v2 - 24);
  *(void *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
      _Unwind_Resume(a1);
    }
    --v4[2];
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E13C9720(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (*(_DWORD *)v12 == 2) {
    WTF::StringImpl::destroy(v12, a2);
  }
  else {
    *(_DWORD *)v12 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
  _Unwind_Resume(a1);
}

CFTypeRef kit(BackForwardList *a1)
{
  if (!a1) {
    return 0;
  }
  if (_MergedGlobals_8)
  {
    if (qword_1EB3A9670)
    {
      int v2 = *(_DWORD *)(qword_1EB3A9670 - 8);
      unint64_t v3 = ((unint64_t)a1 + ~((void)a1 << 32)) ^ (((unint64_t)a1 + ~((void)a1 << 32)) >> 22);
      unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
      for (int i = 1; ; ++i)
      {
        uint64_t v8 = v6;
        uint64_t v9 = *(void *)(qword_1EB3A9670 + 16 * v6);
        if (v9 != -1)
        {
          if (!v9) {
            goto LABEL_13;
          }
          if (*(BackForwardList **)(v9 + 8) == a1) {
            break;
          }
        }
        unsigned int v6 = (v8 + i) & v2;
      }
      CFTypeRef v10 = *(CFTypeRef *)(qword_1EB3A9670 + 16 * v8 + 8);
      if (v10) {
        return v10;
      }
    }
  }
  else
  {
    qword_1EB3A9670 = 0;
    _MergedGlobals_8 = 1;
  }
LABEL_13:
  uint64_t v12 = [WebBackForwardList alloc];
  ++*((_DWORD *)a1 + 2);
  unsigned int v14 = a1;
  CFTypeRef v10 = (id)CFMakeCollectable([(WebBackForwardList *)v12 initWithBackForwardList:&v14]);
  uint64_t v13 = v14;
  unsigned int v14 = 0;
  if (!v13) {
    return v10;
  }
  if (*((_DWORD *)v13 + 2) == 1) {
    (*(void (**)(BackForwardList *))(*(void *)v13 + 8))(v13);
  }
  else {
    --*((_DWORD *)v13 + 2);
  }
  return v10;
}

void sub_1E13C9BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C9ED4(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13C9FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CA330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E13CA598(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CA7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  if (v2)
  {
    CFRelease(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1E13CAA10(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CAAF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CABEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CAD10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13CAD2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    CFRelease(v9);
  }
  WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v8 = *(_DWORD **)v4;
      *(void *)unint64_t v4 = 0;
      if (v8)
      {
        if (*v8 == 1)
        {
          unsigned int v6 = (WTF *)MEMORY[0x1E4E44A30]();
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*v8;
        }
      }
      unint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v9 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void sub_1E13CAEDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13CAEF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    CFRelease(v9);
  }
  WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1E13CB240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CBC24(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl **a39,int a40,unsigned int a41,WTF::StringImpl *a42)
{
  if (a42)
  {
    if (*(_DWORD *)a42 == 2) {
      WTF::StringImpl::destroy(a42, a2);
    }
    else {
      *(_DWORD *)a42 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a41)
  {
    int8x16_t v43 = a39;
    uint64_t v44 = 8 * a41;
    do
    {
      int v45 = *v43;
      *int8x16_t v43 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, a2);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      ++v43;
      v44 -= 8;
    }
    while (v44);
  }
  if (a39) {
    WTF::fastFree((WTF *)a39, a2);
  }
  if (a38)
  {
    if (*(_DWORD *)a38 == 2) {
      WTF::StringImpl::destroy(a38, a2);
    }
    else {
      *(_DWORD *)a38 -= 2;
    }
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
    {
      WTF::StringImpl::destroy(a37, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a37 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CC0AC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CC188(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CC4C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (v14 != a13 && a13 != 0) {
    WTF::fastFree(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CCC48(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::EventListener::isAttribute(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::jsFunction(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::wrapper(WebCore::EventListener *this)
{
  return 0;
}

void WebCore::ObjCNodeFilterCondition::~ObjCNodeFilterCondition(WebCore::ObjCNodeFilterCondition *this)
{
  int v2 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WebCore::ObjCNodeFilterCondition::~ObjCNodeFilterCondition(WebCore::ObjCNodeFilterCondition *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(WTF::StringImpl *result, StringImpl *a2)
{
  if (result != (WTF::StringImpl *)a2)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = *((unsigned int *)v3 + 5);
      if (v4) {
        break;
      }
LABEL_17:
      uint64_t v9 = (WTF *)*((void *)v3 + 1);
      if (v9)
      {
        *((void *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      uint64_t result = *(WTF::StringImpl **)v3;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v3 = (WTF::StringImpl *)((char *)v3 + 24);
      if (v3 == (WTF::StringImpl *)a2) {
        return result;
      }
    }
    uint64_t v5 = 16 * v4;
    unsigned int v6 = (WTF::StringImpl **)(*((void *)v3 + 1) + 8);
    while (1)
    {
      uint64_t v7 = *v6;
      WTF *v6 = 0;
      if (!v7) {
        goto LABEL_12;
      }
      if (*(_DWORD *)v7 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v7, a2);
      uint64_t v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
LABEL_15:
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
LABEL_8:
      v6 += 2;
      v5 -= 16;
      if (!v5) {
        goto LABEL_17;
      }
    }
    *(_DWORD *)v7 -= 2;
LABEL_12:
    uint64_t v8 = *(v6 - 1);
    *(v6 - 1) = 0;
    if (v8) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  return result;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  int v7 = result;
  if (!a2)
  {
    if (!result) {
      goto LABEL_14;
    }
    if (result > 0x7FFFFFEF) {
      goto LABEL_13;
    }
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    uint64_t v9 = v116;
    if (!v116) {
      goto LABEL_15;
    }
    uint64_t v17 = (_WORD *)(v116 + 20);
    *(_DWORD *)uint64_t v116 = 2;
    *(_DWORD *)(v116 + 4) = v7;
    *(void *)(v116 + ++*(_DWORD *)(this - 8) = v116 + 20;
    *(_DWORD *)(v116 + 16) = 0;
    if (!a3)
    {
      uint64_t v21 = 0;
      goto LABEL_82;
    }
    uint64_t v18 = *(int8x16_t **)(a3 + 8);
    uint64_t v19 = *(unsigned int *)(a3 + 4);
    if ((*(unsigned char *)(a3 + 16) & 4) == 0)
    {
      if (v19)
      {
        if (v19 == 1) {
          _WORD *v17 = v18->i16[0];
        }
        else {
          uint64_t result = (unint64_t)memcpy((void *)(v116 + 20), v18, 2 * v19);
        }
      }
      goto LABEL_81;
    }
    unint64_t v22 = &v17[v19];
    if (v19 < 0x40)
    {
      unint64_t v23 = v116 + 20;
    }
    else
    {
      unint64_t v23 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      long long v24 = 0uLL;
      unint64_t v25 = (char *)(v116 + 20);
      do
      {
        v117.val[0] = *v18;
        int8x16_t v26 = v18[1];
        v119.val[0] = v18[2];
        int8x16_t v27 = v18[3];
        v18 += 4;
        int8x16_t v28 = v27;
        v119.val[1] = 0uLL;
        v121.val[0] = v26;
        v117.val[1] = 0uLL;
        int v29 = v25;
        vst2q_s8(v29, v117);
        v29 += 32;
        v121.val[1] = 0uLL;
        vst2q_s8(v29, v121);
        uint64_t v30 = v25 + 64;
        vst2q_s8(v30, v119);
        uint64_t v31 = v25 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
        v25 += 128;
      }
      while (v25 != (char *)v23);
    }
    if ((_WORD *)v23 == v22)
    {
LABEL_81:
      uint64_t v21 = *(unsigned int *)(a3 + 4);
LABEL_82:
      if (!a4) {
        goto LABEL_15;
      }
      uint64_t result = (unint64_t)&v17[v21];
      long long v46 = *(int8x16_t **)(a4 + 8);
      uint64_t v58 = *(unsigned int *)(a4 + 4);
      if ((*(unsigned char *)(a4 + 16) & 4) == 0)
      {
        if (!v58) {
          goto LABEL_15;
        }
        if (v58 == 1)
        {
          *(_WORD *)uint64_t result = v46->i16[0];
          goto LABEL_15;
        }
        size_t v47 = 2 * v58;
        goto LABEL_99;
      }
      unsigned __int16 v59 = (_WORD *)(result + 2 * v58);
      if (v58 >= 0x40)
      {
        unint64_t v60 = result + 2 * (v58 & 0xFFFFFFC0);
        long long v61 = 0uLL;
        do
        {
          v118.val[0] = *v46;
          int8x16_t v62 = v46[1];
          v120.val[0] = v46[2];
          int8x16_t v63 = v46[3];
          v46 += 4;
          int8x16_t v64 = v63;
          v120.val[1] = 0uLL;
          v122.val[0] = v62;
          v118.val[1] = 0uLL;
          uint64_t v65 = (char *)result;
          vst2q_s8(v65, v118);
          v65 += 32;
          v122.val[1] = 0uLL;
          vst2q_s8(v65, v122);
          unint64_t v66 = (char *)(result + 64);
          vst2q_s8(v66, v120);
          unint64_t v67 = (char *)(result + 96);
          vst2q_s8(v67, *(int8x16x2_t *)(&v61 - 1));
          result += 128;
        }
        while (result != v60);
        uint64_t result = v60;
      }
      if ((_WORD *)result == v59) {
        goto LABEL_15;
      }
      unint64_t v68 = v116 + 2 * (v21 + v58) - result + 18;
      if (v68 < 0xE
        || result < (unint64_t)v46->u64 + (v68 >> 1) + 1
        && (unint64_t)v46 < (v68 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
      {
        unint64_t v69 = (_WORD *)result;
        int8x16_t v70 = v46;
        goto LABEL_96;
      }
      uint64_t v72 = (v68 >> 1) + 1;
      if (v68 >= 0x3E)
      {
        unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFE0;
        CFDictionaryRef v106 = (uint8x8_t *)&v46[1];
        unsigned int v107 = (uint16x8_t *)(result + 32);
        unint64_t v108 = v72 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v109 = *(uint8x16_t *)v106[-2].i8;
          uint16x8_t v110 = vmovl_u8(*v106);
          uint16x8_t v111 = vmovl_high_u8(*(uint8x16_t *)v106->i8);
          v107[-2] = vmovl_u8(*(uint8x8_t *)v109.i8);
          v107[-1] = vmovl_high_u8(v109);
          *unsigned int v107 = v110;
          v107[1] = v111;
          v107 += 4;
          v106 += 4;
          v108 -= 32;
        }
        while (v108);
        if (v72 == v73) {
          goto LABEL_15;
        }
        if ((v72 & 0x18) == 0)
        {
          int8x16_t v70 = (int8x16_t *)((char *)v46 + v73);
          unint64_t v69 = (_WORD *)(result + 2 * v73);
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v73 = 0;
      }
      unint64_t v69 = (_WORD *)(result + 2 * (v72 & 0xFFFFFFFFFFFFFFF8));
      int8x16_t v70 = (int8x16_t *)((char *)v46 + (v72 & 0xFFFFFFFFFFFFFFF8));
      int8x16_t v112 = (uint8x8_t *)&v46->i8[v73];
      uint64_t v113 = (uint16x8_t *)(result + 2 * v73);
      unint64_t v114 = v73 - (v72 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v115 = *v112++;
        *v113++ = vmovl_u8(v115);
        v114 += 8;
      }
      while (v114);
      if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_15;
      }
      do
      {
LABEL_96:
        __int16 v71 = v70->u8[0];
        int8x16_t v70 = (int8x16_t *)((char *)v70 + 1);
        *v69++ = v71;
      }
      while (v69 != v59);
      goto LABEL_15;
    }
    unint64_t v39 = v116 + 2 * v19 - v23 + 18;
    if (v39 < 0xE
      || (v23 < (unint64_t)v18->u64 + (v39 >> 1) + 1
        ? (BOOL v40 = (unint64_t)v18 >= (v39 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
        : (BOOL v40 = 1),
          !v40))
    {
      int8x16_t v43 = (_WORD *)v23;
      uint64_t v44 = v18;
      goto LABEL_55;
    }
    uint64_t v41 = (v39 >> 1) + 1;
    if (v39 >= 0x3E)
    {
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFE0;
      long long v96 = (uint8x8_t *)&v18[1];
      uint64_t v97 = (uint16x8_t *)(v23 + 32);
      unint64_t v98 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v99 = *(uint8x16_t *)v96[-2].i8;
        uint16x8_t v100 = vmovl_u8(*v96);
        uint16x8_t v101 = vmovl_high_u8(*(uint8x16_t *)v96->i8);
        v97[-2] = vmovl_u8(*(uint8x8_t *)v99.i8);
        v97[-1] = vmovl_high_u8(v99);
        *uint64_t v97 = v100;
        v97[1] = v101;
        v97 += 4;
        v96 += 4;
        v98 -= 32;
      }
      while (v98);
      if (v41 == v42) {
        goto LABEL_81;
      }
      if ((v41 & 0x18) == 0)
      {
        uint64_t v44 = (int8x16_t *)((char *)v18 + v42);
        int8x16_t v43 = (_WORD *)(v23 + 2 * v42);
        do
        {
LABEL_55:
          __int16 v45 = v44->u8[0];
          uint64_t v44 = (int8x16_t *)((char *)v44 + 1);
          *v43++ = v45;
        }
        while (v43 != v22);
        goto LABEL_81;
      }
    }
    else
    {
      unint64_t v42 = 0;
    }
    int8x16_t v43 = (_WORD *)(v23 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v44 = (int8x16_t *)((char *)v18 + (v41 & 0xFFFFFFFFFFFFFFF8));
    int v102 = (uint8x8_t *)&v18->i8[v42];
    CFTypeRef v103 = (uint16x8_t *)(v23 + 2 * v42);
    unint64_t v104 = v42 - (v41 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v105 = *v102++;
      *v103++ = vmovl_u8(v105);
      v104 += 8;
    }
    while (v104);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_81;
    }
    goto LABEL_55;
  }
  if (!result)
  {
LABEL_14:
    uint64_t v9 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_15;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_13:
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  uint64_t v9 = v116;
  if (!v116) {
    goto LABEL_15;
  }
  CFTypeRef v10 = (unsigned char *)(v116 + 20);
  *(_DWORD *)uint64_t v116 = 2;
  *(_DWORD *)(v116 + 4) = v7;
  *(void *)(v116 + ++*(_DWORD *)(this - 8) = v116 + 20;
  *(_DWORD *)(v116 + 16) = 4;
  if (!a3)
  {
    uint64_t v20 = 0;
    goto LABEL_59;
  }
  int v11 = *(int8x16_t **)(a3 + 8);
  size_t v12 = *(unsigned int *)(a3 + 4);
  if ((*(unsigned char *)(a3 + 16) & 4) != 0)
  {
    if (v12)
    {
      if (v12 == 1) {
        *CFTypeRef v10 = v11->i8[0];
      }
      else {
        uint64_t result = (unint64_t)memcpy((void *)(v116 + 20), v11, v12);
      }
    }
    goto LABEL_58;
  }
  uint64_t v13 = &v10[v12];
  if (v12 < 0x10)
  {
    unint64_t v14 = v116 + 20;
  }
  else
  {
    unint64_t v14 = (unint64_t)&v10[v12 & 0xFFFFFFF0];
    uint64_t v15 = (unsigned long long *)(v116 + 20);
    do
    {
      unsigned long long v16 = (unsigned __int128)vld2q_s8(v11->i8);
      v11 += 2;
      *v15++ = v16;
    }
    while (v15 != (unsigned long long *)v14);
  }
  if ((unsigned char *)v14 != v13)
  {
    size_t v32 = v116 + v12;
    unint64_t v33 = v116 + v12 - v14 + 20;
    if (v33 < 8
      || (v14 < (unint64_t)&v11[2].u64[1] + 2 * v32 + -2 * v14
        ? (BOOL v34 = (unint64_t)v11 >= v32 + 20)
        : (BOOL v34 = 1),
          !v34))
    {
      int v36 = (unsigned char *)v14;
      uint64_t v37 = v11;
      goto LABEL_42;
    }
    if (v33 >= 0x20)
    {
      unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v74 = v11 + 2;
      int v75 = (int8x16_t *)(v14 + 16);
      unint64_t v76 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v78 = v74[-2];
        int8x16_t v77 = v74[-1];
        int8x16_t v80 = *v74;
        int8x16_t v79 = v74[1];
        v74 += 4;
        v75[-1] = vuzp1q_s8(v78, v77);
        *int v75 = vuzp1q_s8(v80, v79);
        v75 += 2;
        v76 -= 32;
      }
      while (v76);
      if (v33 == v35) {
        goto LABEL_58;
      }
      if ((v33 & 0x18) == 0)
      {
        uint64_t v37 = (int8x16_t *)((char *)v11 + 2 * v35);
        int v36 = (unsigned char *)(v14 + v35);
        do
        {
LABEL_42:
          char v38 = v37->i8[0];
          uint64_t v37 = (int8x16_t *)((char *)v37 + 2);
          *v36++ = v38;
        }
        while (v36 != v13);
        goto LABEL_58;
      }
    }
    else
    {
      unint64_t v35 = 0;
    }
    int v36 = (unsigned char *)(v14 + (v33 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v37 = (int8x16_t *)((char *)v11 + 2 * (v33 & 0xFFFFFFFFFFFFFFF8));
    uint8x16_t v81 = (int16x8_t *)((char *)v11 + 2 * v35);
    uint16x8_t v82 = (int8x8_t *)(v14 + v35);
    unint64_t v83 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v84 = *v81++;
      *v82++ = vmovn_s16(v84);
      v83 += 8;
    }
    while (v83);
    if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_58;
    }
    goto LABEL_42;
  }
LABEL_58:
  uint64_t v20 = *(unsigned int *)(a3 + 4);
LABEL_59:
  if (!a4) {
    goto LABEL_15;
  }
  uint64_t result = (unint64_t)&v10[v20];
  long long v46 = *(int8x16_t **)(a4 + 8);
  size_t v47 = *(unsigned int *)(a4 + 4);
  if ((*(unsigned char *)(a4 + 16) & 4) != 0)
  {
    if (!v47) {
      goto LABEL_15;
    }
    if (v47 == 1)
    {
      *(unsigned char *)uint64_t result = v46->i8[0];
      goto LABEL_15;
    }
LABEL_99:
    uint64_t result = (unint64_t)memcpy((void *)result, v46, v47);
    goto LABEL_15;
  }
  uint64_t v48 = (__int8 *)(result + v47);
  if (v47 >= 0x10)
  {
    unint64_t v49 = result + (v47 & 0xFFFFFFF0);
    do
    {
      unsigned long long v50 = (unsigned __int128)vld2q_s8(v46->i8);
      v46 += 2;
      *(_OWORD *)uint64_t result = v50;
      result += 16;
    }
    while (result != v49);
    uint64_t result = v49;
  }
  if ((__int8 *)result != v48)
  {
    size_t v51 = v20 + v116 + v47;
    unint64_t v52 = v51 - result + 20;
    if (v52 < 8
      || (result < (unint64_t)&v46[2].u64[1] + 2 * v51 + -2 * result
        ? (BOOL v53 = (unint64_t)v46 >= v51 + 20)
        : (BOOL v53 = 1),
          !v53))
    {
      uint64_t v55 = (__int8 *)result;
      __int16 v56 = v46;
      goto LABEL_78;
    }
    if (v52 >= 0x20)
    {
      unint64_t v54 = v52 & 0xFFFFFFFFFFFFFFE0;
      char v85 = v46 + 2;
      CFStringRef v86 = (int8x16_t *)(result + 16);
      unint64_t v87 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v89 = v85[-2];
        int8x16_t v88 = v85[-1];
        int8x16_t v91 = *v85;
        int8x16_t v90 = v85[1];
        v85 += 4;
        v86[-1] = vuzp1q_s8(v89, v88);
        *CFStringRef v86 = vuzp1q_s8(v91, v90);
        v86 += 2;
        v87 -= 32;
      }
      while (v87);
      if (v52 == v54) {
        goto LABEL_15;
      }
      if ((v52 & 0x18) == 0)
      {
        __int16 v56 = (int8x16_t *)((char *)v46 + 2 * v54);
        uint64_t v55 = (__int8 *)(result + v54);
        do
        {
LABEL_78:
          __int8 v57 = v56->i8[0];
          __int16 v56 = (int8x16_t *)((char *)v56 + 2);
          *v55++ = v57;
        }
        while (v55 != v48);
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v54 = 0;
    }
    uint64_t v55 = (__int8 *)(result + (v52 & 0xFFFFFFFFFFFFFFF8));
    __int16 v56 = (int8x16_t *)((char *)v46 + 2 * (v52 & 0xFFFFFFFFFFFFFFF8));
    int8x16x2_t v92 = (int16x8_t *)((char *)v46 + 2 * v54);
    CFDictionaryRef v93 = (int8x8_t *)(result + v54);
    unint64_t v94 = v54 - (v52 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v95 = *v92++;
      *v93++ = vmovn_s16(v95);
      v94 += 8;
    }
    while (v94);
    if (v52 != (v52 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_78;
    }
  }
LABEL_15:
  *a5 = v9;
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WebBackForwardList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WebBackForwardList *>>,WTF::DefaultHash<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WebBackForwardList *,WTF::DefaultHash<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WebBackForwardList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB3A9670;
  if (qword_1EB3A9670)
  {
    int v3 = *(_DWORD *)(qword_1EB3A9670 - 4);
    int v4 = *(_DWORD *)(qword_1EB3A9670 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB3A9670 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(qword_1EB3A9670 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v8 = (unsigned int **)(v2 + 16 * i);
      uint64_t v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1EB3A9670) {
            int v10 = *(_DWORD *)(qword_1EB3A9670 - 8);
          }
          else {
            int v10 = 0;
          }
          unint64_t v11 = ~(*((void *)v9 + 1) << 32) + *((void *)v9 + 1);
          unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          unsigned int v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27)));
          int v15 = 1;
          do
          {
            unsigned int v16 = v14;
            uint64_t v17 = *(void *)(qword_1EB3A9670 + 16 * v14);
            unsigned int v14 = (v14 + v15++) & v10;
          }
          while (v17);
          uint64_t v18 = (void *)(qword_1EB3A9670 + 16 * v16);
          void *v18 = 0;
          long long v19 = *(_OWORD *)v8;
          WTF::StringImpl *v8 = 0;
          *(_OWORD *)uint64_t v18 = v19;
          uint64_t v20 = *v8;
          WTF::StringImpl *v8 = 0;
          if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v6);
          }
        }
        else
        {
          WTF::StringImpl *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

char *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(WTF::StringImpl **)a1;
  if (*(void *)a1 > a3
    || (unsigned int v6 = (StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1E13CDAE4);
      }
      uint64_t v18 = (StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      uint64_t v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v17;
      *(void *)a1 = v19;
      WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
    return (char *)a3;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(a1 + 8);
    unint64_t v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = 16;
    }
    if (v9 <= a2) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 <= v7)
    {
      unint64_t v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1E13CDAECLL);
      }
      uint64_t v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = v10;
      *(void *)a1 = v11;
      WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v5, v6, v11);
      unint64_t v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
        }
        WTF::fastFree(v5, v12);
        unint64_t v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(a3 - (void)v5) >> 5);
  }
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MimeClassInfo>::move(WTF::StringImpl *result, StringImpl *a2, uint64_t a3)
{
  if (result != (WTF::StringImpl *)a2)
  {
    uint64_t v5 = result;
    while (1)
    {
      unsigned int v6 = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + ++*(_DWORD *)(this - 8) = v7;
      uint64_t v8 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v8;
      LODWORD(v++*(_DWORD *)(this - 8) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v8;
      LODWORD(v++*(_DWORD *)(this - 8) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 2++*(_DWORD *)(this - 8) = v8;
      uint64_t v9 = *((unsigned int *)v5 + 7);
      if (v9)
      {
        unint64_t v10 = (WTF::StringImpl **)*((void *)v5 + 2);
        uint64_t v11 = 8 * v9;
        do
        {
          unint64_t v12 = *v10;
          *unint64_t v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, a2);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      unint64_t v13 = (WTF *)*((void *)v5 + 2);
      if (v13)
      {
        *((void *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v13, a2);
      }
      unint64_t v14 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (!v14) {
        goto LABEL_17;
      }
      if (*(_DWORD *)v14 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v14, a2);
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
LABEL_20:
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
LABEL_4:
      a3 += 32;
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 32);
      if (v5 == (WTF::StringImpl *)a2) {
        return result;
      }
    }
    *(_DWORD *)v14 -= 2;
LABEL_17:
    uint64_t result = *(WTF::StringImpl **)v5;
    *(void *)uint64_t v5 = 0;
    if (result) {
      goto LABEL_20;
    }
    goto LABEL_4;
  }
  return result;
}

void sub_1E13CDF54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CDF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CE59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1E13CED5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ResourceError::~ResourceError(WebCore::ResourceError *this, StringImpl *a2)
{
  int v3 = (const void *)*((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this - 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v5) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    unsigned int v6 = *(WTF::StringImpl **)this;
    *(void *)this = 0;
    if (!v6) {
      return;
    }
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  unsigned int v6 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (!v6) {
    return;
  }
LABEL_14:
  if (*(_DWORD *)v6 == 2) {
    WTF::StringImpl::destroy(v6, a2);
  }
  else {
    *(_DWORD *)v6 -= 2;
  }
}

void sub_1E13CF198(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t PluginPackageCandidates::update(id *this, WebBasePluginPackage *a2)
{
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t result = (uint64_t)*this;
  if (!*this)
  {
    *this = a2;
    return result;
  }
  [(id)result bundleIdentifier];
  [(WebBasePluginPackage *)a2 bundleIdentifier];
  if (!WTF::equal(v13, v12, v5))
  {
    uint64_t v11 = v12;
    unint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v6);
        uint64_t result = (uint64_t)v13;
        unint64_t v13 = 0;
        if (!result) {
          return result;
        }
LABEL_17:
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        }
        *(_DWORD *)result -= 2;
        return result;
      }
      *(_DWORD *)v11 -= 2;
    }
    uint64_t result = (uint64_t)v13;
    unint64_t v13 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_17;
  }
  unsigned int v7 = [(WebBasePluginPackage *)a2 versionNumber];
  unsigned int v9 = [*this versionNumber];
  unint64_t v10 = v12;
  unint64_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      uint64_t result = (uint64_t)v13;
      unint64_t v13 = 0;
      if (!result) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
    *(_DWORD *)v10 -= 2;
  }
  uint64_t result = (uint64_t)v13;
  unint64_t v13 = 0;
  if (!result)
  {
LABEL_23:
    if (v7 > v9) {
      goto LABEL_26;
    }
    return result;
  }
LABEL_21:
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_23;
  }
  uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
  if (v7 > v9) {
LABEL_26:
  }
    *this = a2;
  return result;
}

void sub_1E13CF354(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CF504(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CFA04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CFD5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13CFF80(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13D00C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(void *result, void *a2)
{
  uint64_t v2 = result;
  if (*result)
  {
    *(void *)(*result + ++*(_DWORD *)(this - 8) = 0;
    int v3 = (unsigned int *)*result;
    *uint64_t v2 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    *uint64_t result = 0;
  }
  return result;
}

void WebFrameLoaderClient::~WebFrameLoaderClient(id *this)
{
  *this = &unk_1F3C7A3E0;
  [this[2] _clearCoreFrame];
  objc_destroyWeak(this + 3);
  id v3 = this[2];
  this[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  int v4 = this[1];
  if (v4)
  {
    v4[1] = 0;
    uint64_t v5 = (unsigned int *)this[1];
    this[1] = 0;
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v2);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebFrameLoaderClient::~WebFrameLoaderClient(this);
  WTF::fastFree(v1, v2);
}

void sub_1E13D021C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 + 24));
  int v4 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((void *)(v1 + 8), v3);
  _Unwind_Resume(a1);
}

BOOL WebFrameLoaderClient::hasWebView(id *this)
{
  return [this[2] webView] != 0;
}

uint64_t WebFrameLoaderClient::makeRepresentation(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2)
{
  if (a2) {
    uint64_t v2 = (void *)*((void *)a2 + 446);
  }
  else {
    uint64_t v2 = 0;
  }
  return [v2 _makeRepresentation];
}

uint64_t WebFrameLoaderClient::hasHTMLView(WebFrameLoaderClient *this)
{
  return objc_opt_isKindOfClass() & 1;
}

uint64_t WebFrameLoaderClient::forceLayoutOnRestoreFromBackForwardCache(WebFrameLoaderClient *this)
{
  uint64_t v2 = (void *)[*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) documentView];
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5)
      {
        Weaint k = *(void **)(v5 + 8);
        if (Weak)
        {
          if ((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16))) {
            goto LABEL_6;
          }
          Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
          uint64_t v7 = [Weak mainFrame];
          uint64_t v8 = *((void *)this + 2);
          if (v8) {
            goto LABEL_11;
          }
LABEL_7:
          uint64_t v9 = 0;
          if (v7 != v8) {
            goto LABEL_14;
          }
          goto LABEL_12;
        }
      }
      else
      {
        Weaint k = 0;
      }
      uint64_t v7 = [Weak mainFrame];
      uint64_t v8 = *((void *)this + 2);
      if (v8) {
        goto LABEL_11;
      }
      goto LABEL_7;
    }
  }
LABEL_6:
  Weaint k = 0;
  uint64_t v7 = [0 mainFrame];
  uint64_t v8 = *((void *)this + 2);
  if (!v8) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v9 = *(void *)(*(void *)(v8 + 8) + 8);
  if (v7 != v8) {
    goto LABEL_14;
  }
LABEL_12:
  if (*(void *)(v9 + 288))
  {
    [Weak _fixedLayoutSize];
    v13.width = v10;
    v13.height = v11;
    WebCore::IntSize::IntSize((WebCore::IntSize *)&v14, &v13);
    WebCore::ScrollView::setFixedLayoutSize();
    WebCore::ScrollView::setUseFixedLayout(*(WebCore::ScrollView **)(v9 + 288));
  }
LABEL_14:
  [v2 setNeedsLayout:1];
  [v2 layout];
  return 1;
}

void WebFrameLoaderClient::forceLayoutForNonHTML(WebFrameLoaderClient *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3) {
    CFRetain(*(CFTypeRef *)(v2 + 16));
  }
  uint64_t v4 = (void *)[v3 documentView];
  if ((objc_msgSend((id)objc_msgSend(*((id *)this + 2), "_dataSource"), "_isDocumentHTML") & 1) == 0)
  {
    [v4 setNeedsLayout:1];
    [v4 layout];
    [v4 setNeedsDisplay:1];
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_1E13D0504(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::setCopiesOnScroll(WebFrameLoaderClient *this)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(*((void *)this + 2) + 8) + 16), "_scrollView"), "contentView");
  return [v1 setCopiesOnScroll:1];
}

void (*WebFrameLoaderClient::detachedFromParent2(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4)
  {
    Weaint k = 0;
    goto LABEL_10;
  }
  Weaint k = *(WebView **)(v4 + 8);
  if (!Weak)
  {
LABEL_10:
    [*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) _setWebFrame:0];
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**((void **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2)))
  {
LABEL_6:
    Weaint k = 0;
    [*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) _setWebFrame:0];
    goto LABEL_7;
  }
  Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  [*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) _setWebFrame:0];
  if (Weak)
  {
    uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didRemoveFrameFromHierarchyFunc;
    if (!result) {
      return result;
    }
    goto LABEL_12;
  }
LABEL_7:
  uint64_t result = (void (*)(void))qword_1EAD7FFA0;
  if (!qword_1EAD7FFA0) {
    return result;
  }
LABEL_12:
  uint64_t v7 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didRemoveFrameFromHierarchy_, v7);
}

void WebFrameLoaderClient::detachedFromParent3(WebFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  uint64_t v2 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

id WebFrameLoaderClient::convertMainResourceLoadToDownload(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8)
      {
        Weaint k = *(void **)(v8 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(void, WebCore::DocumentLoader *, const WebCore::ResourceRequest *))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16), a2, a3) & 1) == 0)
          {
            Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
            uint64_t v10 = WebCore::DocumentLoader::mainResourceLoader(a2);
            if (!v10) {
              goto LABEL_7;
            }
            goto LABEL_12;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weaint k = 0;
      }
      uint64_t v10 = WebCore::DocumentLoader::mainResourceLoader(a2);
      if (!v10) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
LABEL_6:
  Weaint k = 0;
  uint64_t v10 = WebCore::DocumentLoader::mainResourceLoader(a2);
  if (!v10)
  {
LABEL_7:
    CGFloat v11 = -[WebDownload initWithRequest:delegate:]([WebDownload alloc], "initWithRequest:delegate:", WebCore::ResourceRequest::nsURLRequest(), [Weak downloadDelegate]);
    unint64_t v12 = (void *)CFMakeCollectable(v11);
    return v12;
  }
LABEL_12:
  uint64_t v14 = WebCore::ResourceHandle::connection(*(WebCore::ResourceHandle **)(v10 + 24));
  uint64_t v15 = WebCore::ResourceRequest::nsURLRequest();
  uint64_t v16 = WebCore::ResourceResponse::nsURLResponse(a4);
  uint64_t v17 = [Weak downloadDelegate];
  return +[NSURLDownload _downloadWithLoadingConnection:v14 request:v15 response:v16 delegate:v17 proxy:0];
}

uint64_t WebFrameLoaderClient::dispatchDidLoadResourceFromMemoryCache(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4, int a5)
{
  uint64_t v8 = *((void *)this + 2);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 8) + 8);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(v9 + 24);
  if (!v10) {
    goto LABEL_6;
  }
  CGFloat v11 = *(WebView **)(v10 + 8);
  if (!v11) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void, WebCore::DocumentLoader *, const WebCore::ResourceRequest *))(**((void **)v11->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)v11->super.viewContext.invalidateGStateCallback + 2), a2, a3) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)v11->super.viewContext.invalidateGStateCallback + 2) + 16));
    CGFloat v11 = Weak;
    if (Weak)
    {
      p_resourceLoadDelegateImplementations = (uint64_t *)&Weak->_private->resourceLoadDelegateImplementations;
      webThreadDidLoadResourceFromMemoryCacheFunc = (void (*)(id, char *, WebView *, uint64_t, uint64_t, void, uint64_t))Weak->_private->resourceLoadDelegateImplementations.webThreadDidLoadResourceFromMemoryCacheFunc;
      if (webThreadDidLoadResourceFromMemoryCacheFunc) {
        goto LABEL_8;
      }
LABEL_15:
      uint64_t v19 = (void (*)(void))p_resourceLoadDelegateImplementations[17];
      if (!v19) {
        return 0;
      }
      uint64_t v20 = (objc_object *)WebCore::ResourceRequest::nsURLRequest();
      uint64_t v21 = (objc_object *)WebCore::ResourceResponse::nsURLResponse(a4);
      if (a2) {
        unint64_t v22 = (objc_object *)*((void *)a2 + 446);
      }
      else {
        unint64_t v22 = 0;
      }
      CallResourceLoadDelegate(v19, v11, (objc_selector *)sel_webView_didLoadResourceFromMemoryCache_response_length_fromDataSource_, v20, v21, a5, v22);
      return 1;
    }
  }
  else
  {
LABEL_6:
    CGFloat v11 = 0;
  }
LABEL_7:
  p_resourceLoadDelegateImplementations = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
  webThreadDidLoadResourceFromMemoryCacheFunc = (void (*)(id, char *, WebView *, uint64_t, uint64_t, void, uint64_t))off_1EAD7FE40;
  if (!off_1EAD7FE40) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v14 = WebCore::ResourceRequest::nsURLRequest();
  uint64_t v15 = WebCore::ResourceResponse::nsURLResponse(a4);
  if (a2)
  {
    uint64_t v16 = *((void *)a2 + 446);
    id resourceProgressDelegate = v11->_private->resourceProgressDelegate;
    if (!resourceProgressDelegate) {
      return 1;
    }
    goto LABEL_12;
  }
  uint64_t v16 = 0;
  id resourceProgressDelegate = v11->_private->resourceProgressDelegate;
  if (resourceProgressDelegate) {
LABEL_12:
  }
    webThreadDidLoadResourceFromMemoryCacheFunc(resourceProgressDelegate, sel_webThreadWebView_didLoadResourceFromMemoryCache_response_length_fromDataSource_, v11, v14, v15, a5, v16);
  return 1;
}

void WebFrameLoaderClient::assignIdentifierToInitialRequest(uint64_t a1, uint64_t a2, objc_object *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void **)(v7 + 8);
  if (!v8) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v8[6] + 16) + 1368))(*(void *)(v8[6] + 16)))
  {
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v8[6] + 16) + 16));
  uint64_t v8 = Weak;
  if (!Weak)
  {
LABEL_7:
    uint64_t v9 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    uint64_t v10 = (uint64_t (*)(uint64_t, char *, void *, uint64_t, Class))off_1EAD7FE38;
    if (off_1EAD7FE38) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  uint64_t v9 = (uint64_t *)(Weak[10] + 240);
  uint64_t v10 = *(uint64_t (**)(uint64_t, char *, void *, uint64_t, Class))(Weak[10] + 280);
  if (v10)
  {
LABEL_8:
    uint64_t v11 = WebCore::ResourceRequest::nsURLRequest();
    if (a3)
    {
      Class isa = a3[446].isa;
      uint64_t v13 = *(void *)(v8[10] + 40);
      if (v13) {
        goto LABEL_10;
      }
    }
    else
    {
      Class isa = 0;
      uint64_t v13 = *(void *)(v8[10] + 40);
      if (v13)
      {
LABEL_10:
        id v14 = (id)v10(v13, sel_webThreadWebView_identifierForInitialRequest_fromDataSource_, v8, v11, isa);
        if (!v14) {
          goto LABEL_22;
        }
LABEL_20:
        CFRetain(v14);
        goto LABEL_22;
      }
    }
    id v14 = 0;
    goto LABEL_22;
  }
LABEL_16:
  if (!v9[11])
  {
    id v14 = objc_alloc_init(MEMORY[0x1E4FBA8A8]);
    goto LABEL_22;
  }
  uint64_t v16 = (objc_selector *)WebCore::ResourceRequest::nsURLRequest();
  if (a3) {
    a3 = (objc_object *)a3[446].isa;
  }
  uint64_t v17 = (WebView *)[v8 _resourceLoadDelegateForwarder];
  id v14 = (id)CallDelegate((void (*)(void))v8, v17, (objc_object *)sel_webView_identifierForInitialRequest_fromDataSource_, v16, a3, v18);
  if (v14) {
    goto LABEL_20;
  }
LABEL_22:
  [v8 _addObject:v14 forIdentifier:a2];
  if (v14)
  {
    CFRelease(v14);
  }
}

void WebFrameLoaderClient::dispatchWillSendRequest(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, WebCore::ResourceResponse *a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 8) + 8);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(v9 + 24);
  if (!v10) {
    goto LABEL_6;
  }
  uint64_t v11 = *(void **)(v10 + 8);
  if (!v11) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v11[6] + 16) + 1368))(*(void *)(v11[6] + 16)))
  {
LABEL_6:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v11[6] + 16) + 16));
  uint64_t v11 = Weak;
  if (!Weak)
  {
LABEL_7:
    unint64_t v12 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if ((*((unsigned char *)a5 + 138) & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v12 = (uint64_t *)(Weak[10] + 240);
  if (*((unsigned char *)a5 + 138)) {
LABEL_8:
  }
    WebDocumentLoaderMac::increaseLoadCount(a2, a3);
LABEL_9:
  uint64_t v13 = (objc_object *)WebCore::ResourceRequest::nsURLRequest();
  id v14 = (uint64_t (*)(uint64_t, char *, void *, uint64_t, objc_object *, uint64_t, uint64_t))v12[7];
  if (v14)
  {
    uint64_t v15 = [v11 _objectForIdentifier:a3];
    uint64_t v16 = WebCore::ResourceResponse::nsURLResponse(a5);
    if (a2)
    {
      uint64_t v17 = a2[446];
      uint64_t v18 = *(void *)(v11[10] + 40);
      if (v18) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(v11[10] + 40);
      if (v18)
      {
LABEL_12:
        if ((objc_object *)v14(v18, sel_webThreadWebView_resource_willSendRequest_redirectResponse_fromDataSource_, v11, v15, v13, v16, v17) == v13)return; {
        goto LABEL_21;
        }
      }
    }
    if (!v13) {
      return;
    }
    goto LABEL_21;
  }
  if (v12[12])
  {
    uint64_t v19 = (objc_selector *)[v11 _objectForIdentifier:a3];
    uint64_t v20 = (objc_object *)WebCore::ResourceResponse::nsURLResponse(a5);
    if (a2) {
      a2 = (uint64_t *)a2[446];
    }
    uint64_t v21 = (WebView *)[v11 _resourceLoadDelegateForwarder];
    if ((objc_object *)CallDelegate((void (*)(void))v11, v21, (objc_object *)sel_webView_resource_willSendRequest_redirectResponse_fromDataSource_, v19, v13, v20, (objc_object *)a2, v22) != v13)
    {
LABEL_21:
      MEMORY[0x1E4E45D10](v25);
      WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties();
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v25, v23);
    }
  }
}

uint64_t WebFrameLoaderClient::shouldUseCredentialStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void **)(v7 + 8);
  if (!v8) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v8[6] + 16) + 1368))(*(void *)(v8[6] + 16)))
  {
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v8[6] + 16) + 16));
  uint64_t v8 = Weak;
  if (!Weak)
  {
LABEL_7:
    if (qword_1EAD7FEB0) {
      goto LABEL_8;
    }
    return 1;
  }
  if (!*(void *)(Weak[10] + 400)) {
    return 1;
  }
LABEL_8:
  uint64_t v9 = [v8 _objectForIdentifier:a3];
  if (!v9) {
    return 1;
  }
  if (a2) {
    uint64_t v10 = *(void *)(a2 + 3568);
  }
  else {
    uint64_t v10 = 0;
  }
  return (uint64_t)objc_msgSend(*(id *)(v8[10] + 40), sel_webView_resource_shouldUseCredentialStorageForDataSource_, v8, v9, v10);
}

void sub_1E13D1088(_Unwind_Exception *a1)
{
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveAuthenticationChallenge(uint64_t a1, objc_object *isa, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void **)(v7 + 8);
  if (!v8) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(v8[6] + 16) + 1368))(*(void *)(v8[6] + 16)) & 1) == 0)
  {
    Weaint k = objc_loadWeak((id *)(*(void *)(v8[6] + 16) + 16));
    uint64_t v8 = Weak;
    if (Weak)
    {
      uint64_t v15 = (void *)(Weak[10] + 240);
      uint64_t result = WebCore::mac();
      if (!*v15) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    uint64_t v8 = 0;
  }
LABEL_7:
  uint64_t result = WebCore::mac();
  if (!WebViewGetResourceLoadDelegateImplementations(WebView *)::empty) {
    return result;
  }
LABEL_8:
  uint64_t v10 = (objc_object *)result;
  uint64_t result = [v8 _objectForIdentifier:a3];
  if (result)
  {
    uint64_t v11 = (objc_selector *)result;
    if (isa) {
      Class isa = (objc_object *)isa[446].isa;
    }
    unint64_t v12 = (WebView *)[v8 _resourceLoadDelegateForwarder];
    return CallDelegate((void (*)(void))v8, v12, (objc_object *)sel_webView_resource_didReceiveAuthenticationChallenge_fromDataSource_, v11, v10, isa, v13);
  }
  return result;
}

id WebFrameLoaderClient::canAuthenticateAgainstProtectionSpace(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ProtectionSpace *this)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void **)(v9 + 8);
  if (!v10) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(v10[6] + 16) + 1368))(*(void *)(v10[6] + 16)) & 1) == 0)
  {
    Weaint k = objc_loadWeak((id *)(*(void *)(v10[6] + 16) + 16));
    uint64_t v10 = Weak;
    if (Weak)
    {
      uint64_t v17 = Weak[10] + 240;
      uint64_t v11 = WebCore::ProtectionSpace::nsSpace(this);
      if (!*(void *)(v17 + 8)) {
        return (id)(*((unsigned __int8 *)this + 21) < 7u);
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    uint64_t v10 = 0;
  }
LABEL_7:
  uint64_t v11 = WebCore::ProtectionSpace::nsSpace(this);
  if (!qword_1EAD7FE18) {
    return (id)(*((unsigned __int8 *)this + 21) < 7u);
  }
LABEL_8:
  uint64_t v12 = v11;
  uint64_t v13 = [v10 _objectForIdentifier:a3];
  if (!v13) {
    return (id)(*((unsigned __int8 *)this + 21) < 7u);
  }
  if (a2) {
    uint64_t v14 = *(void *)(a2 + 3568);
  }
  else {
    uint64_t v14 = 0;
  }
  return objc_msgSend(*(id *)(v10[10] + 40), sel_webView_resource_canAuthenticateAgainstProtectionSpace_forDataSource_, v10, v13, v12, v14);
}

void sub_1E13D1380(_Unwind_Exception *a1)
{
}

objc_selector *WebFrameLoaderClient::connectionProperties@<X0>(uint64_t a1@<X0>, objc_object *isa@<X1>, uint64_t a3@<X2>, objc_selector **a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7 || (uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8)) == 0)
  {
LABEL_6:
    Weaint k = 0;
    uint64_t result = (objc_selector *)[0 _objectForIdentifier:a3];
    if (!result) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9)
  {
    Weaint k = 0;
LABEL_9:
    uint64_t result = (objc_selector *)[Weak _objectForIdentifier:a3];
    if (!result) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  Weaint k = *(void **)(v9 + 8);
  if (!Weak) {
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16))) {
    goto LABEL_6;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  uint64_t result = (objc_selector *)[Weak _objectForIdentifier:a3];
  if (!result) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v12 = result;
  if (!Weak)
  {
    if (qword_1EAD7FE20) {
      goto LABEL_14;
    }
LABEL_21:
    *a4 = 0;
    return result;
  }
  if (!*(void *)(Weak[10] + 256)) {
    goto LABEL_21;
  }
LABEL_14:
  if (isa) {
    Class isa = (objc_object *)isa[446].isa;
  }
  uint64_t v13 = (WebView *)[Weak _resourceLoadDelegateForwarder];
  uint64_t result = (objc_selector *)CallDelegate((void (*)(void))Weak, v13, (objc_object *)sel_webView_connectionPropertiesForResource_dataSource_, v12, isa, v14);
  *a4 = result;
  if (result)
  {
    return (objc_selector *)CFRetain(result);
  }
  return result;
}

uint64_t WebFrameLoaderClient::shouldPaintBrokenImage(WebFrameLoaderClient *this, const WTF::URL *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void **)(v4 + 8);
  if (!v5) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void, const WTF::URL *))(**(void **)(v5[6] + 16) + 1368))(*(void *)(v5[6] + 16), a2) & 1) == 0)
  {
    Weaint k = objc_loadWeak((id *)(*(void *)(v5[6] + 16) + 16));
    uint64_t v5 = Weak;
    if (Weak)
    {
      if (*(void *)(Weak[10] + 408)) {
        return (uint64_t)objc_msgSend(*(id *)(v5[10] + 40), sel_webView_shouldPaintBrokenImageForURL_, v5, WTF::URL::operator NSURL *());
      }
      return 1;
    }
  }
  else
  {
LABEL_6:
    uint64_t v5 = 0;
  }
LABEL_7:
  if (qword_1EAD7FEB8) {
    return (uint64_t)objc_msgSend(*(id *)(v5[10] + 40), sel_webView_shouldPaintBrokenImageForURL_, v5, WTF::URL::operator NSURL *());
  }
  return 1;
}

void sub_1E13D1638(_Unwind_Exception *a1)
{
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveResponse(uint64_t result, objc_object *a2, uint64_t a3, WebCore::ResourceResponse *a4)
{
  uint64_t v7 = *(void *)(result + 16);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void **)(v9 + 8);
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v10[6] + 16) + 1368))(*(void *)(v10[6] + 16));
  if (result)
  {
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)objc_loadWeak((id *)(*(void *)(v10[6] + 16) + 16));
  uint64_t v10 = (void *)result;
  if (!result)
  {
LABEL_7:
    uint64_t v11 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1EAD7FE50) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  uint64_t v11 = (uint64_t *)(*(void *)(result + 80) + 240);
  if (*(void *)(*(void *)(result + 80) + 304))
  {
LABEL_8:
    uint64_t result = [v10 _objectForIdentifier:a3];
    if (!result) {
      return result;
    }
    uint64_t v12 = result;
    uint64_t v13 = (uint64_t (*)(uint64_t, char *, void *, uint64_t, uint64_t, Class))v11[8];
    uint64_t v14 = WebCore::ResourceResponse::nsURLResponse(a4);
    if (a2)
    {
      Class isa = a2[446].isa;
      uint64_t result = *(void *)(v10[10] + 40);
      if (!result) {
        return result;
      }
    }
    else
    {
      Class isa = 0;
      uint64_t result = *(void *)(v10[10] + 40);
      if (!result) {
        return result;
      }
    }
    return v13(result, sel_webThreadWebView_resource_didReceiveResponse_fromDataSource_, v10, v12, v14, isa);
  }
LABEL_16:
  if (v11[13])
  {
    uint64_t result = [v10 _objectForIdentifier:a3];
    if (result)
    {
      uint64_t v16 = (objc_selector *)result;
      uint64_t v17 = (objc_object *)WebCore::ResourceResponse::nsURLResponse(a4);
      if (a2) {
        a2 = (objc_object *)a2[446].isa;
      }
      uint64_t v18 = (WebView *)[v10 _resourceLoadDelegateForwarder];
      return CallDelegate((void (*)(void))v10, v18, (objc_object *)sel_webView_resource_didReceiveResponse_fromDataSource_, v16, v17, a2, v19);
    }
  }
  return result;
}

uint64_t WebFrameLoaderClient::willCacheResponse(uint64_t a1, objc_object *a2, uint64_t a3, objc_object *a4, uint64_t *a5)
{
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + 8) + 8);
  if (!v10) {
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v10 + 24);
  if (!v11) {
    goto LABEL_6;
  }
  uint64_t v12 = *(void **)(v11 + 8);
  if (!v12) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v12[6] + 16) + 1368))(*(void *)(v12[6] + 16)))
  {
LABEL_6:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v12[6] + 16) + 16));
  uint64_t v12 = Weak;
  if (!Weak)
  {
LABEL_7:
    uint64_t v13 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1EAD7FE60) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  uint64_t v13 = (uint64_t *)(Weak[10] + 240);
  if (*(void *)(Weak[10] + 320))
  {
LABEL_8:
    uint64_t v14 = [v12 _objectForIdentifier:a3];
    if (v14)
    {
      uint64_t v15 = v14;
      if (a2)
      {
        Class isa = a2[446].isa;
        uint64_t v17 = *(void *)(v12[10] + 40);
        if (!v17) {
          goto LABEL_22;
        }
      }
      else
      {
        Class isa = 0;
        uint64_t v17 = *(void *)(v12[10] + 40);
        if (!v17)
        {
LABEL_22:
          uint64_t v18 = 0;
          goto LABEL_23;
        }
      }
      uint64_t v18 = ((uint64_t (*)(uint64_t, char *, void *, uint64_t, objc_object *, Class))v13[10])(v17, sel_webThreadWebView_resource_willCacheResponse_fromDataSource_, v12, v15, a4, isa);
LABEL_23:
      uint64_t v25 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v18);
      goto LABEL_24;
    }
LABEL_21:
    uint64_t v25 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, objc_object *))(*(void *)v25 + 16))(v25, a4);
    goto LABEL_24;
  }
LABEL_16:
  if (!v13[18]) {
    goto LABEL_21;
  }
  uint64_t v20 = [v12 _objectForIdentifier:a3];
  if (!v20) {
    goto LABEL_21;
  }
  uint64_t v21 = (objc_selector *)v20;
  if (a2) {
    a2 = (objc_object *)a2[446].isa;
  }
  unint64_t v22 = (WebView *)[v12 _resourceLoadDelegateForwarder];
  uint64_t v24 = CallDelegate((void (*)(void))v12, v22, (objc_object *)sel_webView_resource_willCacheResponse_fromDataSource_, v21, a4, a2, v23);
  uint64_t v25 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v24);
LABEL_24:
  int8x16_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v25 + 8);
  return v26(v25);
}

void sub_1E13D1B14()
{
}

void sub_1E13D1B24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveContentLength(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(result + 16);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(WebView **)(v9 + 8);
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)v10->super.viewContext.invalidateGStateCallback + 2)
                                             + 1368))(*((void *)v10->super.viewContext.invalidateGStateCallback + 2));
  if (result)
  {
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)objc_loadWeak((id *)(*((void *)v10->super.viewContext.invalidateGStateCallback + 2) + 16));
  uint64_t v10 = (WebView *)result;
  if (!result)
  {
LABEL_7:
    uint64_t v11 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1EAD7FE58) {
      goto LABEL_8;
    }
LABEL_16:
    if (v11[14])
    {
      uint64_t result = [(WebView *)v10 _objectForIdentifier:a3];
      if (result)
      {
        uint64_t v14 = (objc_object *)result;
        uint64_t v15 = (void (*)(void))v11[14];
        if (a2) {
          uint64_t v16 = *(objc_object **)(a2 + 3568);
        }
        else {
          uint64_t v16 = 0;
        }
        return (uint64_t)CallResourceLoadDelegate(v15, v10, (objc_selector *)sel_webView_resource_didReceiveContentLength_fromDataSource_, v14, a4, v16);
      }
    }
    return result;
  }
  uint64_t v11 = (uint64_t *)(*(void *)(result + 80) + 240);
  if (!*(void *)(*(void *)(result + 80) + 312)) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t result = [(WebView *)v10 _objectForIdentifier:a3];
  if (result)
  {
    uint64_t v12 = result;
    if (a2)
    {
      uint64_t v13 = *(void *)(a2 + 3568);
      uint64_t result = (uint64_t)v10->_private->resourceProgressDelegate;
      if (!result) {
        return result;
      }
      return ((uint64_t (*)(uint64_t, char *, WebView *, uint64_t, void, uint64_t))v11[9])(result, sel_webThreadWebView_resource_didReceiveContentLength_fromDataSource_, v10, v12, a4, v13);
    }
    uint64_t v13 = 0;
    uint64_t result = (uint64_t)v10->_private->resourceProgressDelegate;
    if (result) {
      return ((uint64_t (*)(uint64_t, char *, WebView *, uint64_t, void, uint64_t))v11[9])(result, sel_webThreadWebView_resource_didReceiveContentLength_fromDataSource_, v10, v12, a4, v13);
    }
  }
  return result;
}

void WebFrameLoaderClient::dispatchDidFinishLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void **)(v7 + 8);
  if (!v8) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v8[6] + 16) + 1368))(*(void *)(v8[6] + 16)))
  {
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v8[6] + 16) + 16));
  uint64_t v8 = Weak;
  if (!Weak)
  {
LABEL_7:
    uint64_t v9 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1EAD7FE28) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  uint64_t v9 = (uint64_t *)(Weak[10] + 240);
  if (*(void *)(Weak[10] + 264))
  {
LABEL_8:
    uint64_t v10 = [v8 _objectForIdentifier:a3];
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v11 = v10;
    if (a2)
    {
      uint64_t v12 = *(void *)(a2 + 3568);
      uint64_t v13 = *(void *)(v8[10] + 40);
      if (!v13) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8[10] + 40);
      if (!v13) {
        goto LABEL_22;
      }
    }
    ((void (*)(uint64_t, char *, void *, uint64_t, uint64_t))v9[3])(v13, sel_webThreadWebView_resource_didFinishLoadingFromDataSource_, v8, v11, v12);
    goto LABEL_22;
  }
LABEL_16:
  if (v9[15])
  {
    uint64_t v15 = [v8 _objectForIdentifier:a3];
    if (v15)
    {
      uint64_t v16 = (objc_selector *)v15;
      if (a2) {
        uint64_t v17 = *(objc_object **)(a2 + 3568);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (WebView *)[v8 _resourceLoadDelegateForwarder];
      CallDelegate((void (*)(void))v8, v18, (objc_object *)sel_webView_resource_didFinishLoadingFromDataSource_, v16, v17, v19);
    }
  }
LABEL_22:
  [v8 _removeObjectForIdentifier:a3];
  WebDocumentLoaderMac::decreaseLoadCount(a2, a3);
}

void WebFrameLoaderClient::dispatchDidFailLoading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void **)(v9 + 8);
  if (!v10) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v10[6] + 16) + 1368))(*(void *)(v10[6] + 16)))
  {
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v10[6] + 16) + 16));
  uint64_t v10 = Weak;
  if (!Weak)
  {
LABEL_7:
    uint64_t v11 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1EAD7FE30) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  uint64_t v11 = (uint64_t *)(Weak[10] + 240);
  if (*(void *)(Weak[10] + 272))
  {
LABEL_8:
    uint64_t v12 = [v10 _objectForIdentifier:a3];
    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v13 = v12;
    uint64_t v14 = (void (*)(uint64_t, char *, void *, uint64_t, uint64_t, uint64_t))v11[4];
    uint64_t v15 = MEMORY[0x1E4E49B20](a4);
    if (a2)
    {
      uint64_t v16 = *(void *)(a2 + 3568);
      uint64_t v17 = *(void *)(v10[10] + 40);
      if (!v17) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(v10[10] + 40);
      if (!v17) {
        goto LABEL_22;
      }
    }
    v14(v17, sel_webThreadWebView_resource_didFailLoadingWithError_fromDataSource_, v10, v13, v15, v16);
    goto LABEL_22;
  }
LABEL_16:
  if (v11[16])
  {
    uint64_t v19 = [v10 _objectForIdentifier:a3];
    if (v19)
    {
      uint64_t v20 = (objc_selector *)v19;
      uint64_t v21 = (objc_object *)MEMORY[0x1E4E49B20](a4);
      if (a2) {
        unint64_t v22 = *(objc_object **)(a2 + 3568);
      }
      else {
        unint64_t v22 = 0;
      }
      unint64_t v23 = (WebView *)[v10 _resourceLoadDelegateForwarder];
      CallDelegate((void (*)(void))v10, v23, (objc_object *)sel_webView_resource_didFailLoadingWithError_fromDataSource_, v20, v21, v22, v24);
    }
  }
LABEL_22:
  [v10 _removeObjectForIdentifier:a3];
  WebDocumentLoaderMac::decreaseLoadCount(a2, a3);
}

void (*WebFrameLoaderClient::dispatchDidDispatchOnloadEvents(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2
    && (uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8)) != 0
    && (uint64_t v4 = *(void *)(v3 + 24)) != 0
    && (uint64_t v5 = *(void *)(v4 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 48) + 16) + 1368))(*(void *)(*(void *)(v5 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v5 + 48) + 16) + 16));
    uint64_t v6 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didHandleOnloadEventsForFrameFunc;
      if (!result) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FEE8;
  if (!qword_1EAD7FEE8) {
    return result;
  }
LABEL_8:
  uint64_t v8 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, v6, (objc_selector *)sel_webView_didHandleOnloadEventsForFrame_, v8);
}

void (*WebFrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad(WebFrameLoaderClient *this))(void)
{
  if (!*(void *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 8) + 280)
                                                                                                + 96)
                                                                                    + 872)))
  {
    uint64_t v3 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 64);
    uint64_t v2 = &stru_1F3C7DA90;
LABEL_16:
    CFRetain(v2);
    uint64_t v4 = *v3;
    *uint64_t v3 = v2;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  uint64_t v3 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 64);
  if (v2) {
    goto LABEL_16;
  }
  uint64_t v4 = *v3;
  *uint64_t v3 = 0;
  if (v4) {
LABEL_4:
  }
    CFRelease(v4);
LABEL_5:
  uint64_t v5 = *((void *)this + 2);
  if (v5
    && (uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v8 + 48) + 16) + 1368))(*(void *)(*(void *)(v8 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v8 + 48) + 16) + 16));
    uint64_t v9 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didReceiveServerRedirectForProvisionalLoadForFrameFunc;
      if (!result) {
        return result;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FEF0;
  if (!qword_1EAD7FEF0) {
    return result;
  }
LABEL_12:
  uint64_t v11 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, v9, (objc_selector *)sel_webView_didReceiveServerRedirectForProvisionalLoadForFrame_, v11);
}

void (*WebFrameLoaderClient::dispatchDidCancelClientRedirect(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2
    && (uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8)) != 0
    && (uint64_t v4 = *(void *)(v3 + 24)) != 0
    && (uint64_t v5 = *(void *)(v4 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 48) + 16) + 1368))(*(void *)(*(void *)(v5 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v5 + 48) + 16) + 16));
    uint64_t v6 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didCancelClientRedirectForFrameFunc;
      if (!result) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FEF8;
  if (!qword_1EAD7FEF8) {
    return result;
  }
LABEL_8:
  uint64_t v8 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, v6, (objc_selector *)sel_webView_didCancelClientRedirectForFrame_, v8);
}

uint64_t WebFrameLoaderClient::dispatchWillPerformClientRedirect(uint64_t result, double a2, double a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(WebView **)(v8 + 8);
  if (!v9) {
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)v9->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)v9->super.viewContext.invalidateGStateCallback + 2));
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)objc_loadWeak((id *)(*((void *)v9->super.viewContext.invalidateGStateCallback + 2) + 16));
    uint64_t v9 = (WebView *)result;
    if (result)
    {
      uint64_t v10 = (uint64_t *)(*(void *)(result + 80) + 416);
      if (!*(void *)(*(void *)(result + 80) + 480)) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    uint64_t v9 = 0;
  }
LABEL_7:
  uint64_t v10 = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  if (!qword_1EAD7FF00) {
    return result;
  }
LABEL_8:
  uint64_t v11 = (objc_object *)WTF::URL::operator NSURL *();
  uint64_t v12 = (void (*)(void))v10[8];
  uint64_t v13 = (objc_object *)[MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:a3];
  uint64_t v14 = *(objc_object **)(v5 + 16);
  return (uint64_t)CallFrameLoadDelegate(v12, v9, (objc_selector *)sel_webView_willPerformClientRedirectToURL_delay_fireDate_forFrame_, v11, a2, v13, v14);
}

uint64_t WebFrameLoaderClient::dispatchDidChangeLocationWithinPage(WebFrameLoaderClient *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (*(void *)(*(void *)(*(void *)(v2 + 8) + 296) + 768))
  {
    uint64_t v3 = (__CFString *)WTF::StringImpl::operator NSString *();
    uint64_t v4 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 56);
    if (!v3)
    {
      uint64_t v5 = *v4;
      *uint64_t v4 = 0;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = (const void **)(v2 + 56);
    uint64_t v3 = &stru_1F3C7DA90;
  }
  CFRetain(v3);
  uint64_t v5 = *v4;
  *uint64_t v4 = v3;
  if (v5) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  uint64_t v6 = *((void *)this + 2);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(WebView **)(v8 + 8);
  if (!v9) {
    goto LABEL_11;
  }
  if ((*(uint64_t (**)(void))(**((void **)v9->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)v9->super.viewContext.invalidateGStateCallback + 2)))
  {
LABEL_10:
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)v9->super.viewContext.invalidateGStateCallback + 2) + 16));
  uint64_t v9 = Weak;
  if (!Weak)
  {
LABEL_11:
    didChangeLocationWithinPageForFrameFunc = (void (*)(void))qword_1EAD7FF08;
    if (!qword_1EAD7FF08) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  didChangeLocationWithinPageForFrameFunc = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didChangeLocationWithinPageForFrameFunc;
  if (didChangeLocationWithinPageForFrameFunc) {
LABEL_12:
  }
    CallFrameLoadDelegate(didChangeLocationWithinPageForFrameFunc, v9, (objc_selector *)sel_webView_didChangeLocationWithinPageForFrame_, *((objc_object **)this + 2));
LABEL_13:
  id v11 = [(WebView *)v9 _UIKitDelegateForwarder];
  uint64_t v12 = *((void *)this + 2);
  return [v11 webView:v9 didChangeLocationWithinPageForFrame:v12];
}

void (*WebFrameLoaderClient::dispatchDidPushStateWithinPage(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (!*(void *)(*(void *)(*(void *)(v2 + 8) + 296) + 768))
  {
    uint64_t v4 = (const void **)(v2 + 56);
    uint64_t v3 = &stru_1F3C7DA90;
LABEL_16:
    CFRetain(v3);
    uint64_t v5 = *v4;
    *uint64_t v4 = v3;
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  uint64_t v4 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 56);
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v5 = *v4;
  *uint64_t v4 = 0;
  if (v5) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  uint64_t v6 = *((void *)this + 2);
  if (v6
    && (uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8)) != 0
    && (uint64_t v8 = *(void *)(v7 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 48) + 16) + 1368))(*(void *)(*(void *)(v9 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v9 + 48) + 16) + 16));
    uint64_t v10 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didPushStateWithinPageForFrameFunc;
      if (!result) {
        return result;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FF10;
  if (!qword_1EAD7FF10) {
    return result;
  }
LABEL_12:
  uint64_t v12 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didPushStateWithinPageForFrame_, v12);
}

void (*WebFrameLoaderClient::dispatchDidReplaceStateWithinPage(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (!*(void *)(*(void *)(*(void *)(v2 + 8) + 296) + 768))
  {
    uint64_t v4 = (const void **)(v2 + 56);
    uint64_t v3 = &stru_1F3C7DA90;
LABEL_16:
    CFRetain(v3);
    uint64_t v5 = *v4;
    *uint64_t v4 = v3;
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  uint64_t v4 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 56);
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v5 = *v4;
  *uint64_t v4 = 0;
  if (v5) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  uint64_t v6 = *((void *)this + 2);
  if (v6
    && (uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8)) != 0
    && (uint64_t v8 = *(void *)(v7 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 48) + 16) + 1368))(*(void *)(*(void *)(v9 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v9 + 48) + 16) + 16));
    uint64_t v10 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didReplaceStateWithinPageForFrameFunc;
      if (!result) {
        return result;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FF18;
  if (!qword_1EAD7FF18) {
    return result;
  }
LABEL_12:
  uint64_t v12 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didReplaceStateWithinPageForFrame_, v12);
}

void (*WebFrameLoaderClient::dispatchDidPopStateWithinPage(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (!*(void *)(*(void *)(*(void *)(v2 + 8) + 296) + 768))
  {
    uint64_t v4 = (const void **)(v2 + 56);
    uint64_t v3 = &stru_1F3C7DA90;
LABEL_16:
    CFRetain(v3);
    uint64_t v5 = *v4;
    *uint64_t v4 = v3;
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  uint64_t v4 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 56);
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v5 = *v4;
  *uint64_t v4 = 0;
  if (v5) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  uint64_t v6 = *((void *)this + 2);
  if (v6
    && (uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8)) != 0
    && (uint64_t v8 = *(void *)(v7 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 48) + 16) + 1368))(*(void *)(*(void *)(v9 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v9 + 48) + 16) + 16));
    uint64_t v10 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didPopStateWithinPageForFrameFunc;
      if (!result) {
        return result;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FF20;
  if (!qword_1EAD7FF20) {
    return result;
  }
LABEL_12:
  uint64_t v12 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didPopStateWithinPageForFrame_, v12);
}

uint64_t WebFrameLoaderClient::dispatchWillClose(WebFrameLoaderClient *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(WebView **)(v4 + 8);
  if (!v5) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**((void **)v5->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)v5->super.viewContext.invalidateGStateCallback + 2)))
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)v5->super.viewContext.invalidateGStateCallback + 2) + 16));
  uint64_t v5 = Weak;
  if (!Weak)
  {
LABEL_7:
    willCloseFrameFunc = (void (*)(void))qword_1EAD7FF28;
    if (!qword_1EAD7FF28) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  willCloseFrameFunc = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.willCloseFrameFunc;
  if (willCloseFrameFunc) {
LABEL_8:
  }
    CallFrameLoadDelegate(willCloseFrameFunc, v5, (objc_selector *)sel_webView_willCloseFrame_, *((objc_object **)this + 2));
LABEL_9:
  id v7 = [(WebView *)v5 _UIKitDelegateForwarder];
  uint64_t v8 = *((void *)this + 2);
  return [v7 webView:v5 willCloseFrame:v8];
}

void (*WebFrameLoaderClient::dispatchDidStartProvisionalLoad(WebFrameLoaderClient *this))(void)
{
  if (!*(void *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 8) + 280)
                                                                                                + 96)
                                                                                    + 872)))
  {
    uint64_t v3 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 64);
    uint64_t v2 = &stru_1F3C7DA90;
LABEL_14:
    CFRetain(v2);
    uint64_t v4 = *v3;
    *uint64_t v3 = v2;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  uint64_t v3 = (const void **)(*(void *)(*((void *)this + 2) + 8) + 64);
  if (v2) {
    goto LABEL_14;
  }
  uint64_t v4 = *v3;
  *uint64_t v3 = 0;
  if (v4) {
LABEL_4:
  }
    CFRelease(v4);
LABEL_5:
  uint64_t v5 = *((void *)this + 2);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7)
  {
    Weaint k = 0;
    goto LABEL_17;
  }
  Weaint k = *(WebView **)(v7 + 8);
  if (!Weak)
  {
LABEL_17:
    objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didStartProvisionalLoadForFrame:", Weak, *((void *)this + 2));
    goto LABEL_11;
  }
  if ((*(uint64_t (**)(void))(**((void **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2)))
  {
LABEL_10:
    Weaint k = 0;
    objc_msgSend((id)objc_msgSend(0, "_UIKitDelegateForwarder"), "webView:didStartProvisionalLoadForFrame:", 0, *((void *)this + 2));
    goto LABEL_11;
  }
  Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didStartProvisionalLoadForFrame:", Weak, *((void *)this + 2));
  if (Weak)
  {
    uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didStartProvisionalLoadForFrameFunc;
    if (!result) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_11:
  uint64_t result = (void (*)(void))qword_1EAD7FF30;
  if (!qword_1EAD7FF30) {
    return result;
  }
LABEL_19:
  uint64_t v10 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didStartProvisionalLoadForFrame_, v10);
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveTitle(uint64_t result, WTF::StringImpl **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  if (!*a2)
  {
LABEL_4:
    uint64_t v4 = *(void *)(v2 + 16);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (*((_DWORD *)v3 + 1) > 0x3E8u)
  {
    uint64_t result = WTF::StringImpl::substring(*a2);
    uint64_t v3 = v12;
    goto LABEL_4;
  }
  *(_DWORD *)v3 += 2;
  uint64_t v4 = *(void *)(result + 16);
  if (!v4)
  {
LABEL_11:
    uint64_t v7 = 0;
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void **)(v6 + 8);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v7[6] + 16) + 1368))(*(void *)(v7[6] + 16));
  if (result) {
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)objc_loadWeak((id *)(*(void *)(v7[6] + 16) + 16));
  uint64_t v7 = (void *)result;
  if (result)
  {
    if (*(void *)(*(void *)(result + 80) + 536)) {
      goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_12:
  if (qword_1EAD7FF38)
  {
LABEL_13:
    if (v3) {
      uint64_t v8 = (objc_selector *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = (objc_selector *)&stru_1F3C7DA90;
    }
    uint64_t v9 = *(objc_object **)(v2 + 16);
    uint64_t v10 = (WebView *)[v7 _frameLoadDelegateForwarder];
    uint64_t result = CallDelegate((void (*)(void))v7, v10, (objc_object *)sel_webView_didReceiveTitle_forFrame_, v8, v9, v11);
  }
LABEL_17:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      return WTF::StringImpl::destroy(v3, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void sub_1E13D2F8C(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void (*WebFrameLoaderClient::dispatchDidCommitLoad(uint64_t a1))(void)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    goto LABEL_6;
  }
  Weaint k = *(WebView **)(v4 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**((void **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0) {
    Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  [(WebView *)Weak _didCommitLoadForFrame:*(void *)(a1 + 16)];
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v7 = *(void *)(v6 + 64);
  if (v7) {
    CFRetain(*(CFTypeRef *)(v6 + 64));
  }
  uint64_t v8 = *(const void **)(v6 + 56);
  *(void *)(v6 + ++*(_DWORD *)(this + 56) = v7;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v10 = *(const void **)(v9 + 64);
  *(void *)(v9 + 64) = 0;
  if (v10) {
    CFRelease(v10);
  }
  objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didCommitLoadForFrame:", Weak, *(void *)(a1 + 16));
  if (Weak)
  {
    uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didCommitLoadForFrameFunc;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (void (*)(void))qword_1EAD7FF40;
    if (!qword_1EAD7FF40) {
      return result;
    }
  }
  uint64_t v12 = *(objc_object **)(a1 + 16);
  return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didCommitLoadForFrame_, v12);
}

uint64_t WebFrameLoaderClient::dispatchDidFailProvisionalLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v5 = *(const void **)(v4 + 64);
  *(void *)(v4 + 64) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8);
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void **)(v8 + 8);
  if (!v9) {
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v9[6] + 16) + 1368))(*(void *)(v9[6] + 16)))
  {
LABEL_8:
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v9[6] + 16) + 16));
  uint64_t v9 = Weak;
  if (!Weak)
  {
LABEL_9:
    if (!qword_1EAD7FF48) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*(void *)(Weak[10] + 552))
  {
LABEL_10:
    uint64_t v10 = (objc_selector *)MEMORY[0x1E4E49B20](a2);
    id v11 = *(objc_object **)(a1 + 16);
    uint64_t v12 = (WebView *)[v9 _frameLoadDelegateForwarder];
    CallDelegate((void (*)(void))v9, v12, (objc_object *)sel_webView_didFailProvisionalLoadWithError_forFrame_, v10, v11, v13);
  }
LABEL_11:
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void **)(*(void *)(v14 + 8) + 40);
  uint64_t v16 = MEMORY[0x1E4E49B20](a2);
  return [v15 webFrame:v14 didFinishLoadWithError:v16];
}

uint64_t WebFrameLoaderClient::dispatchDidFailLoad(WebFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(void **)(v6 + 8);
  if (!v7) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v7[6] + 16) + 1368))(*(void *)(v7[6] + 16)))
  {
LABEL_6:
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(v7[6] + 16) + 16));
  uint64_t v7 = Weak;
  if (!Weak)
  {
LABEL_7:
    if (!qword_1EAD7FF50) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (*(void *)(Weak[10] + 560))
  {
LABEL_8:
    uint64_t v8 = (objc_selector *)MEMORY[0x1E4E49B20](a2);
    uint64_t v9 = (objc_object *)*((void *)this + 2);
    uint64_t v10 = (WebView *)[v7 _frameLoadDelegateForwarder];
    CallDelegate((void (*)(void))v7, v10, (objc_object *)sel_webView_didFailLoadWithError_forFrame_, v8, v9, v11);
  }
LABEL_9:
  objc_msgSend((id)objc_msgSend(v7, "_UIKitDelegateForwarder"), "webView:didFailLoadWithError:forFrame:", v7, MEMORY[0x1E4E49B20](a2), *((void *)this + 2));
  uint64_t v12 = *((void *)this + 2);
  uint64_t v13 = *(void **)(*(void *)(v12 + 8) + 40);
  uint64_t v14 = MEMORY[0x1E4E49B20](a2);
  return [v13 webFrame:v12 didFinishLoadWithError:v14];
}

void (*WebFrameLoaderClient::dispatchDidFinishDocumentLoad(WebFrameLoaderClient *this))(void)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    goto LABEL_6;
  }
  Weaint k = *(WebView **)(v4 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**((void **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0) {
    Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  id v6 = [(WebView *)Weak _webMailDelegate];
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v6, "_webthread_webView:didFinishDocumentLoadForFrame:", Weak, *((void *)this + 2));
  }
  if (Weak)
  {
    uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didFinishDocumentLoadForFrameFunc;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (void (*)(void))qword_1EAD7FF80;
    if (!qword_1EAD7FF80) {
      return result;
    }
  }
  uint64_t v8 = (objc_object *)*((void *)this + 2);
  return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didFinishDocumentLoadForFrame_, v8);
}

uint64_t WebFrameLoaderClient::dispatchDidFinishLoad(WebFrameLoaderClient *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    goto LABEL_6;
  }
  Weaint k = *(WebView **)(v4 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**((void **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0) {
    Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didFinishLoadForFrame:", Weak, *((void *)this + 2));
  id v6 = [(WebView *)Weak _webMailDelegate];
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v6, "_webthread_webView:didFinishLoadForFrame:", Weak, *((void *)this + 2));
  }
  if (Weak)
  {
    didFinishLoadForFrameFunc = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didFinishLoadForFrameFunc;
    if (!didFinishLoadForFrameFunc) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  didFinishLoadForFrameFunc = (void (*)(void))qword_1EAD7FF58;
  if (qword_1EAD7FF58) {
LABEL_11:
  }
    CallFrameLoadDelegate(didFinishLoadForFrameFunc, Weak, (objc_selector *)sel_webView_didFinishLoadForFrame_, *((objc_object **)this + 2));
LABEL_12:
  uint64_t v8 = *(void **)(*(void *)(*((void *)this + 2) + 8) + 40);
  return objc_msgSend(v8, "webFrame:didFinishLoadWithError:");
}

uint64_t WebFrameLoaderClient::dispatchDidReachLayoutMilestone(uint64_t result, char a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = *(WebView **)(v6 + 8);
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)v7->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)v7->super.viewContext.invalidateGStateCallback + 2));
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)objc_loadWeak((id *)(*((void *)v7->super.viewContext.invalidateGStateCallback + 2) + 16));
    uint64_t v7 = (WebView *)result;
    if (result)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(result + 80) + 416);
      uint64_t v9 = *(uint64_t (**)(uint64_t, char *, WebView *, void))(*(void *)(result + 80) + 648);
      if (!v9) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    uint64_t v7 = 0;
  }
LABEL_7:
  uint64_t v8 = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  uint64_t v9 = (uint64_t (*)(uint64_t, char *, WebView *, void))off_1EAD7FFA8;
  if (!off_1EAD7FFA8) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t result = (uint64_t)v7->_private->frameLoadDelegate;
  if (result) {
    uint64_t result = v9(result, sel_webThreadWebView_didLayout_, v7, a2 & 7);
  }
LABEL_10:
  if ((a2 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v10 = (void (*)(void))v8[20];
  if (v10) {
    CallFrameLoadDelegate(v10, v7, (objc_selector *)sel_webView_didFirstLayoutInFrame_, *(objc_object **)(v3 + 16));
  }
  objc_msgSend(-[WebView _UIKitDelegateForwarder](v7, "_UIKitDelegateForwarder"), "webView:didFirstLayoutInFrame:", v7, *(void *)(v3 + 16));
  id v11 = (void *)[*(id *)(*(void *)(*(void *)(v3 + 16) + 8) + 16) _scrollView];
  uint64_t v12 = *(void *)(v3 + 16);
  if (!v12
    || (uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 8)) == 0
    || (uint64_t v14 = *(void *)(v13 + 24)) == 0
    || (uint64_t v15 = *(void *)(v14 + 8)) == 0
    || ((*(uint64_t (**)(void))(**(void **)(*(void *)(v15 + 48) + 16) + 1368))(*(void *)(*(void *)(v15 + 48) + 16)) & 1) != 0)
  {
    uint64_t result = [0 drawsBackground];
    if (!result) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t result = [objc_loadWeak((id *)(*(void *)(*(void *)(v15 + 48) + 16) + 16)) drawsBackground];
  if (result) {
LABEL_19:
  }
    uint64_t result = [v11 setDrawsBackground:1];
LABEL_20:
  if ((a2 & 2) != 0)
  {
    uint64_t v16 = (void (*)(void))v8[21];
    if (v16) {
      CallFrameLoadDelegate(v16, v7, (objc_selector *)sel_webView_didFirstVisuallyNonEmptyLayoutInFrame_, *(objc_object **)(v3 + 16));
    }
    uint64_t result = [(WebView *)v7 mainFrame];
    if (result == *(void *)(v3 + 16))
    {
      id v17 = [(WebView *)v7 _UIKitDelegateForwarder];
      uint64_t v18 = *(void *)(v3 + 16);
      return [v17 webView:v7 didFirstVisuallyNonEmptyLayoutInFrame:v18];
    }
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchCreatePage(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4
    && (uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8)) != 0
    && (uint64_t v6 = *(void *)(v5 + 24)) != 0
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v7 + 48) + 16) + 1368))(*(void *)(*(void *)(v7 + 48) + 16)) & 1) == 0)
  {
    Weaint k = objc_loadWeak((id *)(*(void *)(*(void *)(v7 + 48) + 16) + 16));
  }
  else
  {
    Weaint k = 0;
  }
  id v9 = objc_alloc_init(MEMORY[0x1E4F1C9E8]);
  uint64_t v10 = objc_msgSend((id)objc_msgSend(Weak, "_UIDelegateForwarder"), "webView:createWebViewWithRequest:windowFeatures:", Weak, 0, v9);
  id v11 = v10;
  if (a3 == 1 && v10)
  {
    [v10 mainFrame];
    WebCore::Frame::setOpenerForWebKitLegacy();
  }
  uint64_t v12 = [v11 mainFrame];
  if (!v12)
  {
    uint64_t v13 = 0;
    if (!v9) {
      return v13;
    }
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 8);
  if (v9) {
LABEL_12:
  }
    CFRelease(v9);
  return v13;
}

void sub_1E13D3A04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::dispatchShow(WebFrameLoaderClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 8);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    goto LABEL_6;
  }
  Weaint k = *(void **)(v3 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0) {
    Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  uint64_t v5 = (void *)[Weak _UIDelegateForwarder];
  return [v5 webViewShow:Weak];
}

void WebFrameLoaderClient::dispatchDecidePolicyForResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 8) + 8);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(v9 + 24);
  if (!v10) {
    goto LABEL_6;
  }
  Weaint k = *(void **)(v10 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0) {
    Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  uint64_t v12 = (void *)[Weak _policyDelegateForwarder];
  if (*(void *)WebCore::ResourceResponseBase::mimeType(a2)) {
    uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v13 = &stru_1F3C7DA90;
  }
  uint64_t v14 = WebCore::ResourceRequest::nsURLRequest();
  uint64_t v15 = *(void *)(a1 + 16);
  [objc_loadWeak((id *)(a1 + 24)) invalidate];
  uint64_t v16 = [WebFramePolicyListener alloc];
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17) {
    uint64_t v17 = *(void *)(*(void *)(v17 + 8) + 8);
  }
  uint64_t v19 = v17;
  uint64_t v18 = [(WebFramePolicyListener *)v16 initWithFrame:&v19 policyFunction:a5 defaultPolicy:0];
  objc_storeWeak((id *)(a1 + 24), v18);
  [v12 webView:Weak decidePolicyForMIMEType:v13 request:v14 frame:v15 decisionListener:v18];
  if (v18) {
    CFRelease(v18);
  }
}

void sub_1E13D3C4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

id WebFrameLoaderClient::setUpPolicyListener(WebFramePolicyListener **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (id *)(a2 + 24);
  [objc_loadWeak((id *)(a2 + 24)) invalidate];
  *a1 = 0;
  if (a4)
  {
    id v11 = [WebFramePolicyListener alloc];
    uint64_t v12 = *(void *)(a2 + 16);
    if (v12) {
      uint64_t v12 = *(void *)(*(void *)(v12 + 8) + 8);
    }
    uint64_t v18 = v12;
    uint64_t v13 = [(WebFramePolicyListener *)v11 initWithFrame:&v18 policyFunction:a3 defaultPolicy:2 appLinkURL:a4 referrerURL:a5];
  }
  else
  {
    uint64_t v14 = [WebFramePolicyListener alloc];
    uint64_t v15 = *(void *)(a2 + 16);
    if (v15) {
      uint64_t v15 = *(void *)(*(void *)(v15 + 8) + 8);
    }
    uint64_t v17 = v15;
    uint64_t v13 = [(WebFramePolicyListener *)v14 initWithFrame:&v17 policyFunction:a3 defaultPolicy:2];
  }
  *a1 = v13;
  return objc_storeWeak(v10, v13);
}

void sub_1E13D3D40(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_1E13D3D48(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13D3D64(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void WebFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = *(void *)(*(void *)(v13 + 8) + 8);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        Weaint k = *(void **)(v15 + 8);
        if (Weak)
        {
          if ((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16))) {
            goto LABEL_6;
          }
          Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
          uint64_t v17 = *(void *)(a2 + 480);
          if (v17) {
            goto LABEL_10;
          }
LABEL_17:
          uint64_t v18 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        Weaint k = 0;
      }
      uint64_t v17 = *(void *)(a2 + 480);
      if (v17) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
LABEL_6:
  Weaint k = 0;
  uint64_t v17 = *(void *)(a2 + 480);
  if (!v17) {
    goto LABEL_17;
  }
LABEL_10:
  if (*(_DWORD *)(v17 + 68) || *(unsigned char *)(v17 + 16) != 1) {
    goto LABEL_17;
  }
  WebCore::ResourceRequestBase::url(this);
  uint64_t v18 = WTF::URL::operator NSURL *();
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)v32, this);
  uint64_t v20 = v32[0];
  if (!v32[0])
  {
LABEL_18:
    uint64_t v22 = 0;
    goto LABEL_19;
  }
  int v21 = *((_DWORD *)v32[0] + 1);
  v32[0] = 0;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::destroy(v20, v19);
    if (!v21) {
      goto LABEL_18;
    }
  }
  else
  {
    *(_DWORD *)v20 -= 2;
    if (!v21) {
      goto LABEL_18;
    }
  }
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v31, this);
  MEMORY[0x1E4E441E0](v32, &v31, 0);
  uint64_t v22 = WTF::URL::operator NSURL *();
  int v29 = v32[0];
  v32[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = v31;
  uint64_t v31 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
LABEL_19:
  unint64_t v23 = objc_msgSend(Weak, "_policyDelegateForwarder", v31);
  uint64_t v24 = WebFrameLoaderClient::actionDictionary(a1, a2, a4);
  uint64_t v25 = WebCore::ResourceRequest::nsURLRequest();
  if (*a5) {
    int8x16_t v26 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int8x16_t v26 = &stru_1F3C7DA90;
  }
  WebFrameLoaderClient::setUpPolicyListener((WebFramePolicyListener **)v32, a1, a7, v18, v22);
  int8x16_t v27 = v32[0];
  [v23 webView:Weak decidePolicyForNewWindowAction:v24 request:v25 newFrameName:v26 decisionListener:v32[0]];
  if (v27) {
    CFRelease(v27);
  }
}

void sub_1E13D3FC8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WTF::URL::~URL(WTF::StringImpl **this, StringImpl *a2)
{
  uint64_t v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

uint64_t WebFrameLoaderClient::actionDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 240));
  uint64_t v6 = *(WTF::StringImpl **)v5;
  if (*(void *)v5) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v22 = v6;
  long long v7 = *(_OWORD *)(v5 + 24);
  long long v23 = *(_OWORD *)(v5 + 8);
  long long v24 = v7;
  uint64_t v9 = WTF::URL::operator NSURL *();
  uint64_t v10 = v22;
  uint64_t v22 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  id v11 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v12 = [NSNumber numberWithInt:*(unsigned __int8 *)(a2 + 868)];
  uint64_t v13 = WebActionNavigationTypeKey;
  uint64_t v14 = [NSNumber numberWithUnsignedInt:0];
  uint64_t v15 = objc_msgSend(v11, "dictionaryWithObjectsAndKeys:", v12, v13, v14, WebActionModifierFlagsKey, v9, WebActionOriginalURLKey, 0);
  long long v16 = *(_OWORD *)(a2 + 464);
  long long v25 = *(_OWORD *)(a2 + 448);
  long long v26 = v16;
  if (BYTE12(v16))
  {
    uint64_t v17 = [WebElementDictionary alloc];
    WebCore::EventHandler::hitTestResultAtPoint();
    uint64_t v18 = [(WebElementDictionary *)v17 initWithHitTestResult:&v22];
    MEMORY[0x1E4E450F0](&v22);
    uint64_t result = [v15 setObject:v18 forKey:WebActionElementKey];
    if (!BYTE12(v26))
    {
      __break(1u);
      return result;
    }
    if ((_BYTE)v25) {
      char v20 = BYTE8(v26);
    }
    else {
      char v20 = -2;
    }
    uint64_t v21 = [NSNumber numberWithChar:v20];
    [v15 setObject:v21 forKey:WebActionButtonKey];
    if (v18) {
      CFRelease(v18);
    }
  }
  if (a3) {
    [v15 setObject:kit(*(WebCore::Node **)(a3 + 32)) forKey:WebActionFormKey[0]];
  }
  return (uint64_t)v15;
}

void sub_1E13D4298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (v16) {
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this, int a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17 = *(void **)(a1 + 16);
  if (!v17)
  {
    Weaint k = 0;
    char v21 = 1;
    uint64_t v22 = *(void *)(a2 + 480);
    if (!v22) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v18 = *(void *)(v17[1] + 8);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 24);
    if (v19)
    {
      Weaint k = *(void **)(v19 + 8);
      if (Weak)
      {
        if ((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16))) {
          goto LABEL_6;
        }
        Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
        uint64_t v17 = *(void **)(a1 + 16);
        if (!v17) {
          goto LABEL_17;
        }
LABEL_12:
        uint64_t v17 = *(void **)(v17[1] + 8);
        if (v17)
        {
          if (*(void **)(v17[16] + 8) != v17) {
            goto LABEL_19;
          }
          char v21 = 0;
          uint64_t v22 = *(void *)(a2 + 480);
          if (!v22) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    else
    {
      Weaint k = 0;
    }
    uint64_t v17 = *(void **)(a1 + 16);
    if (!v17) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
LABEL_6:
  Weaint k = 0;
  uint64_t v17 = *(void **)(a1 + 16);
  if (v17) {
    goto LABEL_12;
  }
LABEL_17:
  char v21 = 1;
  uint64_t v22 = *(void *)(a2 + 480);
  if (!v22)
  {
LABEL_19:
    uint64_t v23 = 0;
LABEL_20:
    uint64_t v24 = 0;
    goto LABEL_21;
  }
LABEL_18:
  if (*(_DWORD *)(v22 + 68)) {
    goto LABEL_19;
  }
  int v30 = *(unsigned __int8 *)(v22 + 16);
  if (v30 != 1) {
    char v21 = 1;
  }
  if (v21)
  {
    if (v30 != 1) {
      goto LABEL_19;
    }
    goto LABEL_144;
  }
  uint64_t v31 = v17[37];
  if (!v31) {
    goto LABEL_144;
  }
  size_t v32 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v31 + 768));
  uint64_t v34 = v33;
  uint64_t v35 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 240));
  int v36 = *(WTF::StringImpl **)v35;
  if (*(void *)v35) {
    *(_DWORD *)v36 += 2;
  }
  CFDictionaryRef v106 = v36;
  long long v37 = *(_OWORD *)(v35 + 24);
  long long v107 = *(_OWORD *)(v35 + 8);
  long long v108 = v37;
  char v38 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)&v106);
  BOOL v43 = v34 == v39 && v32 == v38;
  if (v32 != v38 && v34 == v39)
  {
    if (!v34) {
      goto LABEL_129;
    }
    uint64_t v44 = (int8x16_t *)((unint64_t)v39 & 0xFF00000000);
    uint64_t v45 = v39;
    if ((v34 & 0xFF00000000) != 0)
    {
      if (v44)
      {
        if (v39)
        {
          if (*v32 == *v38)
          {
            unsigned int v41 = v39 - 1;
            if (v39 != 1)
            {
              BOOL v40 = (int8x16_t *)(v32 + 1);
              uint64_t v44 = (int8x16_t *)(v38 + 1);
              unsigned int v42 = v39 - 2;
              if (v39 == 2)
              {
                __int32 v46 = v40->u8[0];
                __int32 v47 = v44->u8[0];
LABEL_76:
                BOOL v43 = v46 == v47;
                goto LABEL_138;
              }
LABEL_74:
              switch(31 - __clz(v42))
              {
                case 0u:
                  goto LABEL_75;
                case 1u:
                  if (v40->u16[0] != v44->u16[0]) {
                    goto LABEL_137;
                  }
                  int v88 = *(unsigned __int16 *)&v32[v39 - 2];
                  int v87 = *(unsigned __int16 *)&v38[v39 - 2];
                  goto LABEL_133;
                case 2u:
                  if (v40->i32[0] != v44->i32[0]) {
                    goto LABEL_137;
                  }
                  goto LABEL_132;
                case 3u:
                  if (v40->i64[0] == v44->i64[0]) {
                    goto LABEL_136;
                  }
                  goto LABEL_137;
                case 4u:
                  uint16x8_t v93 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v32[v39 - 16], *(int8x16_t *)&v38[v39 - 16]), vceqq_s8(*(int8x16_t *)(v32 + 1), *(int8x16_t *)(v38 + 1)));
                  v93.i8[0] = vminvq_u8((uint8x16_t)v93);
                  goto LABEL_158;
                default:
                  uint8x16_t v89 = (uint8x16_t)vceqq_s8(*v40, *v44);
                  v89.i8[0] = vminvq_u8(v89);
                  if (!v89.i32[0]) {
                    goto LABEL_137;
                  }
                  if (v41 < 0x10) {
                    goto LABEL_129;
                  }
                  unsigned int v90 = v41 & 0xF;
                  do
                  {
                    uint8x16_t v91 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v40 + v90), *(int8x16_t *)((char *)v44 + v90));
                    v91.i8[0] = vminvq_u8(v91);
                    BOOL v43 = v91.i32[0] != 0;
                    v90 += 16;
                    if (v91.i32[0]) {
                      BOOL v92 = v90 >= v41;
                    }
                    else {
                      BOOL v92 = 1;
                    }
                  }
                  while (!v92);
                  break;
              }
              goto LABEL_138;
            }
LABEL_129:
            BOOL v43 = 1;
            goto LABEL_138;
          }
          goto LABEL_137;
        }
      }
      else if (v39)
      {
        if (*(_WORD *)v38 == *v32)
        {
          uint64_t v55 = (uint8x8_t *)(v32 + 1);
          unsigned int v56 = v39 - 1;
          __int8 v57 = (int16x8_t *)(v38 + 2);
          if ((v39 - 1) < 8)
          {
            if (v56 >= 4)
            {
              unint64_t v69 = (v55->u32[0] | ((unint64_t)v55->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              BOOL v68 = ((v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL) == v57->i64[0];
              uint64_t v70 = v56 & 3;
              unint64_t v71 = (*(unsigned int *)((char *)v55->u32 + v70) | ((unint64_t)*(unsigned int *)((char *)v55->u32 + v70) << 16)) & 0xFFFF0000FFFFLL;
              uint64_t v72 = (v71 | (v71 << 8)) & 0xFF00FF00FF00FFLL;
              uint64_t v73 = *(uint64_t *)((char *)v57->i64 + 2 * v70);
              BOOL v43 = v68 && v72 == v73;
              goto LABEL_138;
            }
            if (v56 >= 2)
            {
              int v81 = (v55->u16[0] | (v55->u16[0] << 8)) & 0xFF00FF;
              __int32 v82 = v57->i32[0];
              uint64_t v83 = v56 & 1;
              int v84 = (*(unsigned __int16 *)((char *)v55->u16 + v83) | (*(unsigned __int16 *)((char *)v55->u16 + v83) << 8)) & 0xFF00FF;
              int v85 = *(__int32 *)((char *)v57->i32 + 2 * v83);
              BOOL v43 = v81 == v82 && v84 == v85;
              goto LABEL_138;
            }
            if (v39 == 2)
            {
              __int32 v47 = v55->u8[0];
              __int32 v46 = v57->u16[0];
              goto LABEL_76;
            }
            goto LABEL_129;
          }
          uint16x8_t v58 = (uint16x8_t)vceqq_s16(*v57, (int16x8_t)vmovl_u8(*v55));
          v58.i16[0] = vminvq_u16(v58);
          if (v58.i32[0])
          {
            unsigned int v59 = v56 & 7;
            do
            {
              uint16x8_t v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v57 + 2 * v59), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v55 + v59)));
              v60.i16[0] = vminvq_u16(v60);
              BOOL v43 = v60.i32[0] != 0;
              v59 += 8;
              if (v60.i32[0]) {
                BOOL v61 = v59 >= v56;
              }
              else {
                BOOL v61 = 1;
              }
            }
            while (!v61);
            goto LABEL_138;
          }
        }
LABEL_137:
        BOOL v43 = 0;
        goto LABEL_138;
      }
    }
    else if (v44)
    {
      if (v39)
      {
        if (*(_WORD *)v32 == *v38)
        {
          uint64_t v48 = (int16x8_t *)(v32 + 2);
          unsigned int v49 = v39 - 1;
          unsigned long long v50 = (uint8x8_t *)(v38 + 1);
          if ((v39 - 1) < 8)
          {
            if (v49 >= 4)
            {
              unint64_t v63 = (v50->u32[0] | ((unint64_t)v50->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              BOOL v68 = ((v63 | (v63 << 8)) & 0xFF00FF00FF00FFLL) == v48->i64[0];
              uint64_t v64 = v49 & 3;
              unint64_t v65 = (*(unsigned int *)((char *)v50->u32 + v64) | ((unint64_t)*(unsigned int *)((char *)v50->u32 + v64) << 16)) & 0xFFFF0000FFFFLL;
              uint64_t v66 = (v65 | (v65 << 8)) & 0xFF00FF00FF00FFLL;
              uint64_t v67 = *(uint64_t *)((char *)v48->i64 + 2 * v64);
              BOOL v68 = v68 && v66 == v67;
              BOOL v43 = v68;
              goto LABEL_138;
            }
            if (v49 >= 2)
            {
              int v75 = (v50->u16[0] | (v50->u16[0] << 8)) & 0xFF00FF;
              __int32 v76 = v48->i32[0];
              uint64_t v77 = v49 & 1;
              int v78 = (*(unsigned __int16 *)((char *)v50->u16 + v77) | (*(unsigned __int16 *)((char *)v50->u16 + v77) << 8)) & 0xFF00FF;
              int v79 = *(__int32 *)((char *)v48->i32 + 2 * v77);
              BOOL v43 = v75 == v76 && v78 == v79;
              goto LABEL_138;
            }
            if (v39 == 2)
            {
              int v87 = v50->u8[0];
              int v88 = v48->u16[0];
LABEL_133:
              BOOL v43 = v88 == v87;
              goto LABEL_138;
            }
            goto LABEL_129;
          }
          uint16x8_t v51 = (uint16x8_t)vceqq_s16(*v48, (int16x8_t)vmovl_u8(*v50));
          v51.i16[0] = vminvq_u16(v51);
          if (v51.i32[0])
          {
            unsigned int v52 = v49 & 7;
            do
            {
              uint16x8_t v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v48 + 2 * v52), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v50 + v52)));
              v53.i16[0] = vminvq_u16(v53);
              BOOL v43 = v53.i32[0] != 0;
              v52 += 8;
              if (v53.i32[0]) {
                BOOL v54 = v52 >= v49;
              }
              else {
                BOOL v54 = 1;
              }
            }
            while (!v54);
            goto LABEL_138;
          }
        }
        goto LABEL_137;
      }
    }
    else if (v39)
    {
      if (*(unsigned __int16 *)v32 == *(unsigned __int16 *)v38)
      {
        unsigned int v62 = v39 - 1;
        if (v39 != 1)
        {
          BOOL v40 = (int8x16_t *)(v32 + 2);
          uint64_t v44 = (int8x16_t *)(v38 + 2);
          if (v39 != 2)
          {
            switch(31 - __clz(v39 - 2))
            {
              case 0u:
                __int32 v46 = v40->i32[0];
                __int32 v47 = v44->i32[0];
                goto LABEL_76;
              case 1u:
                if (v40->i32[0] != v44->i32[0]) {
                  goto LABEL_137;
                }
                uint64_t v45 = 2 * v39;
LABEL_132:
                int v88 = *(_DWORD *)&v32[v45 - 4];
                int v87 = *(_DWORD *)&v38[v45 - 4];
                goto LABEL_133;
              case 2u:
                if (v40->i64[0] != v44->i64[0]) {
                  goto LABEL_137;
                }
                uint64_t v45 = 2 * v39;
LABEL_136:
                BOOL v43 = *(void *)&v32[v45 - 8] == *(void *)&v38[v45 - 8];
                goto LABEL_138;
              case 3u:
                uint16x8_t v93 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v32[2 * v39 - 16], *(int16x8_t *)&v38[2 * v39 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v32 + 2), *(int16x8_t *)(v38 + 2)));
                v93.i16[0] = vminvq_u16(v93);
LABEL_158:
                BOOL v43 = v93.i32[0] != 0;
                goto LABEL_138;
              default:
                uint16x8_t v94 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v40, *(int16x8_t *)v44);
                v94.i16[0] = vminvq_u16(v94);
                if (!v94.i32[0]) {
                  goto LABEL_137;
                }
                if (v62 < 8) {
                  goto LABEL_129;
                }
                unsigned int v102 = v62 & 7;
                do
                {
                  uint16x8_t v103 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v40 + 2 * v102), *(int16x8_t *)((char *)v44 + 2 * v102));
                  v103.i16[0] = vminvq_u16(v103);
                  BOOL v43 = v103.i32[0] != 0;
                  v102 += 8;
                  if (v103.i32[0]) {
                    BOOL v104 = v102 >= v62;
                  }
                  else {
                    BOOL v104 = 1;
                  }
                }
                while (!v104);
                break;
            }
            goto LABEL_138;
          }
LABEL_75:
          __int32 v46 = v40->u16[0];
          __int32 v47 = v44->u16[0];
          goto LABEL_76;
        }
        goto LABEL_129;
      }
      goto LABEL_137;
    }
    __break(1u);
    goto LABEL_74;
  }
LABEL_138:
  int16x8_t v95 = v106;
  CFDictionaryRef v106 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::destroy(v95, v39);
      if (v43) {
        goto LABEL_19;
      }
      goto LABEL_144;
    }
    *(_DWORD *)v95 -= 2;
  }
  if (v43) {
    goto LABEL_19;
  }
LABEL_144:
  WebCore::ResourceRequestBase::url(this);
  uint64_t v23 = WTF::URL::operator NSURL *();
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v106, this);
  uint64_t v97 = v106;
  if (!v106) {
    goto LABEL_20;
  }
  int v98 = *((_DWORD *)v106 + 1);
  CFDictionaryRef v106 = 0;
  if (*(_DWORD *)v97 == 2)
  {
    WTF::StringImpl::destroy(v97, v96);
    if (!v98) {
      goto LABEL_20;
    }
  }
  else
  {
    *(_DWORD *)v97 -= 2;
    if (!v98) {
      goto LABEL_20;
    }
  }
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v105, this);
  MEMORY[0x1E4E441E0](&v106, &v105, 0);
  uint64_t v24 = WTF::URL::operator NSURL *();
  uint16x8_t v100 = v106;
  CFDictionaryRef v106 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2) {
      WTF::StringImpl::destroy(v100, v99);
    }
    else {
      *(_DWORD *)v100 -= 2;
    }
  }
  uint16x8_t v101 = v105;
  uint8x8_t v105 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2) {
      WTF::StringImpl::destroy(v101, v99);
    }
    else {
      *(_DWORD *)v101 -= 2;
    }
  }
LABEL_21:
  long long v25 = objc_msgSend(Weak, "_policyDelegateForwarder", v105);
  uint64_t v26 = WebFrameLoaderClient::actionDictionary(a1, a2, a5);
  uint64_t v27 = WebCore::ResourceRequest::nsURLRequest();
  uint64_t v28 = *(void *)(a1 + 16);
  WebFrameLoaderClient::setUpPolicyListener((WebFramePolicyListener **)&v106, a1, a13, v23, v24);
  int v29 = v106;
  [v25 webView:Weak decidePolicyForNavigationAction:v26 request:v27 frame:v28 decisionListener:v106];
  if (v29) {
    CFRelease(v29);
  }
}

void sub_1E13D4B54(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id WebFrameLoaderClient::cancelPolicyCheck(id *this)
{
  uint64_t v1 = this + 3;
  id result = objc_loadWeakRetained(this + 3);
  if (result)
  {
    CFRelease(result);
    [objc_loadWeak(v1) invalidate];
    return objc_storeWeak(v1, 0);
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchUnableToImplementPolicy(WebFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    goto LABEL_6;
  }
  Weaint k = *(void **)(v6 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0) {
    Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  uint64_t v8 = (void *)[Weak _policyDelegateForwarder];
  uint64_t v9 = MEMORY[0x1E4E49B20](a2);
  uint64_t v10 = *((void *)this + 2);
  return [v8 webView:Weak unableToImplementPolicyWithError:v9 frame:v10];
}

id WebFrameLoaderClient::dispatchWillSendSubmitEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4
    && (uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8)) != 0
    && (uint64_t v6 = *(void *)(v5 + 24)) != 0
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v7 + 48) + 16) + 1368))(*(void *)(*(void *)(v7 + 48) + 16)) & 1) == 0)
  {
    id result = (id)[objc_loadWeak((id *)(*(void *)(*(void *)(v7 + 48) + 16) + 16)) _formDelegate];
    if (!result) {
      return result;
    }
  }
  else
  {
    id result = (id)[0 _formDelegate];
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = kit(*(WebCore::Node **)(*a2 + 32));
  FormFieldValuesDictionary = (objc_object *)makeFormFieldValuesDictionary(*a2);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11
    && (uint64_t v12 = *(void *)(*(void *)(v11 + 8) + 8)) != 0
    && (uint64_t v13 = *(void *)(v12 + 24)) != 0
    && (uint64_t v14 = *(void *)(v13 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v14 + 48) + 16) + 1368))(*(void *)(*(void *)(v14 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v14 + 48) + 16) + 16));
  }
  else
  {
    Weaint k = 0;
  }
  long long v16 = *(objc_object **)(a1 + 16);
  return CallFormDelegate(Weak, (objc_selector *)sel_willSendSubmitEventToForm_inFrame_withValues_, (objc_object *)v9, v16, FormFieldValuesDictionary);
}

id makeFormFieldValuesDictionary(uint64_t a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:*(unsigned int *)(a1 + 52)];
  uint64_t v3 = *(unsigned int *)(a1 + 52);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (void *)(*(void *)(a1 + 40) + 8);
    do
    {
      if (*v5)
      {
        uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
        if (!*(v5 - 1)) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v6 = &stru_1F3C7DA90;
        if (!*(v5 - 1))
        {
LABEL_7:
          uint64_t v7 = &stru_1F3C7DA90;
          goto LABEL_8;
        }
      }
      uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
LABEL_8:
      [v2 setObject:v6 forKey:v7];
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  uint64_t v8 = (void *)CFMakeCollectable(v2);
  return v8;
}

void sub_1E13D4F88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::dispatchWillSubmitForm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6
    && (uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8)) != 0
    && (uint64_t v8 = *(void *)(v7 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 48) + 16) + 1368))(*(void *)(*(void *)(v9 + 48) + 16)) & 1) == 0)
  {
    if ([objc_loadWeak((id *)(*(void *)(*(void *)(v9 + 48) + 16) + 16)) _formDelegate]) {
      goto LABEL_7;
    }
  }
  else if ([0 _formDelegate])
  {
LABEL_7:
    FormFieldValuesDictionary = (objc_object *)makeFormFieldValuesDictionary(a2);
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v12 = *(void *)(*(void *)(v11 + 8) + 8);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v13 = *(void *)(v12 + 24);
    if (v13)
    {
      Weaint k = *(WebView **)(v13 + 8);
      if (Weak)
      {
        if (((*(uint64_t (**)(void))(**((void **)Weak->super.viewContext.invalidateGStateCallback + 2)
                                                + 1368))(*((void *)Weak->super.viewContext.invalidateGStateCallback
                                                           + 2)) & 1) == 0)
        {
          Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
          uint64_t v15 = *(objc_object **)(a1 + 16);
          uint64_t v16 = *(void *)(*(void *)(a2 + 56) + 544);
          if (!v16) {
            goto LABEL_18;
          }
LABEL_16:
          uint64_t v17 = *(void *)(v16 + 8);
          if (v17)
          {
            uint64_t v18 = *(void **)(*(void *)(v17 + 280) + 16);
            if (((*(uint64_t (**)(void *))(*v18 + 1072))(v18) & 1) == 0)
            {
              uint64_t v19 = (objc_object *)v18[2];
              goto LABEL_19;
            }
          }
LABEL_18:
          uint64_t v19 = 0;
LABEL_19:
          char v20 = kit(*(WebCore::Node **)(a2 + 32));
          uint64_t v21 = *a3;
          *a3 = 0;
          uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v22 = &unk_1F3C7AB90;
          v22[1] = v21;
          int v30 = v22;
          uint64_t v23 = (id *)(a1 + 24);
          [objc_loadWeak((id *)(a1 + 24)) invalidate];
          uint64_t v24 = [WebFramePolicyListener alloc];
          uint64_t v25 = *(void *)(a1 + 16);
          if (v25) {
            uint64_t v25 = *(void *)(*(void *)(v25 + 8) + 8);
          }
          uint64_t v31 = v25;
          uint64_t v26 = [(WebFramePolicyListener *)v24 initWithFrame:&v31 policyFunction:&v30 defaultPolicy:2];
          objc_storeWeak(v23, v26);
          CallFormDelegate(Weak, (objc_selector *)sel_frame_sourceFrame_willSubmitForm_withValues_submissionListener_, v15, v19, (objc_object *)v20, FormFieldValuesDictionary, v26);
          if (v26) {
            CFRelease(v26);
          }
          uint64_t result = (uint64_t)v30;
          int v30 = 0;
          if (result) {
            return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          return result;
        }
LABEL_12:
        Weaint k = 0;
        uint64_t v15 = *(objc_object **)(a1 + 16);
        uint64_t v16 = *(void *)(*(void *)(a2 + 56) + 544);
        if (!v16) {
          goto LABEL_18;
        }
        goto LABEL_16;
      }
    }
    else
    {
      Weaint k = 0;
    }
    uint64_t v15 = *(objc_object **)(a1 + 16);
    uint64_t v16 = *(void *)(*(void *)(a2 + 56) + 544);
    if (!v16) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  uint64_t v28 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
  int v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 8);
  return v29(v28);
}

void sub_1E13D52E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1E13D5314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10 = v9;
  if (v10) {
    CFRelease(v10);
  }
  if (!a9) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::revertToProvisionalState(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2)
{
  if (a2) {
    uint64_t v2 = (void *)*((void *)a2 + 446);
  }
  else {
    uint64_t v2 = 0;
  }
  return [v2 _revertToProvisionalState];
}

uint64_t WebFrameLoaderClient::setMainDocumentError(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceError *a3)
{
  if (a2) {
    uint64_t v3 = (void *)*((void *)a2 + 446);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = MEMORY[0x1E4E49B20](a3);
  return [v3 _setMainDocumentError:v4];
}

uint64_t WebFrameLoaderClient::setMainFrameDocumentReady(WebFrameLoaderClient *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3
    && (uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8)) != 0
    && (uint64_t v5 = *(void *)(v4 + 24)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 48) + 16) + 1368))(*(void *)(*(void *)(v6 + 48) + 16)) & 1) == 0)
  {
    Weaint k = objc_loadWeak((id *)(*(void *)(*(void *)(v6 + 48) + 16) + 16));
    uint64_t v8 = a2;
  }
  else
  {
    Weaint k = 0;
    uint64_t v8 = a2;
  }
  return [Weak setMainFrameDocumentReady:v8];
}

uint64_t WebFrameLoaderClient::startDownload(uint64_t a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    goto LABEL_6;
  }
  Weaint k = *(void **)(v5 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0) {
    Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  WebCore::ResourceRequestBase::url(this);
  uint64_t v7 = WTF::URL::operator NSURL *();
  return [Weak _downloadURL:v7];
}

uint64_t WebFrameLoaderClient::didReplaceMultipartContent(WebFrameLoaderClient *this)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 8) + 288);
  if (result) {
    return MEMORY[0x1F416DAF8]();
  }
  return result;
}

void WebFrameLoaderClient::committedLoad(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::SharedBuffer *a3)
{
  if (a2) {
    uint64_t v3 = (void *)*((void *)a2 + 446);
  }
  else {
    uint64_t v3 = 0;
  }
  WebCore::SharedBuffer::createNSData((uint64_t *)&cf, a3);
  [v3 _receivedData:cf];
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E13D5610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::finishedLoading(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2)
{
  if (a2) {
    uint64_t v2 = (void *)*((void *)a2 + 446);
  }
  else {
    uint64_t v2 = 0;
  }
  return [v2 _finishedLoading];
}

void WebFrameLoaderClient::updateGlobalHistory(WebFrameLoaderClient *this)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 8);
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    goto LABEL_5;
  }
  Weaint k = *(void (**)(void))(v3 + 8);
  if (!Weak) {
    goto LABEL_6;
  }
  if (((*(uint64_t (**)(void))(**(void **)(*((void *)Weak + 6) + 16) + 1368))(*(void *)(*((void *)Weak + 6) + 16)) & 1) == 0) {
    Weaint k = (void (*)(void))objc_loadWeak((id *)(*(void *)(*((void *)Weak + 6) + 16) + 16));
  }
  else {
LABEL_5:
  }
    Weaint k = 0;
LABEL_6:
  uint64_t v5 = *(void **)(*(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 8) + 280) + 88);
  uint64_t v6 = (WTF *)WebCore::DocumentLoader::urlForHistory((uint64_t *)v30, (WebCore::DocumentLoader *)v5);
  uint64_t v7 = (const WTF::StringImpl **)WTF::aboutBlankURL(v6);
  char v10 = WTF::equal(v30[0], *v7, v8);
  uint64_t v11 = v30[0];
  v30[0] = 0;
  if (!v11) {
    goto LABEL_9;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_9:
    if (v10) {
      return;
    }
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v11, v9);
  if (v10) {
    return;
  }
LABEL_12:
  if ([Weak historyDelegate])
  {
    if (Weak)
    {
      if (!*(void *)(*((void *)Weak + 10) + 688)) {
        return;
      }
    }
    else if (!WebViewGetHistoryDelegateImplementations(WebView *)::empty)
    {
      return;
    }
    uint64_t v15 = [WebNavigationData alloc];
    if (*(void *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v5 + 109)))
    {
      uint64_t v16 = (__CFString *)WTF::StringImpl::operator NSString *();
      if (v5[201])
      {
LABEL_22:
        uint64_t v17 = WTF::StringImpl::operator NSString *();
LABEL_25:
        uint64_t v18 = WebCore::ResourceRequest::nsURLRequest();
        uint64_t v19 = WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v5 + 159));
        if (v5[45]) {
          char v20 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
        }
        else {
          char v20 = 0;
        }
        BOOL v21 = v20 != 0;
        uint64_t v22 = (WTF::StringImpl *)v5[340];
        if (v22)
        {
          *(_DWORD *)v22 += 2;
          uint64_t v23 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else
        {
          uint64_t v23 = &stru_1F3C7DA90;
        }
        uint64_t v26 = [(WebNavigationData *)v15 initWithURLString:v16 title:v17 originalRequest:v18 response:v19 hasSubstituteData:v21 clientRedirectSource:v23];
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v24);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        CallDelegate(Weak, *(WebView **)(*((void *)Weak + 10) + 120), (objc_object *)sel_webView_didNavigateWithNavigationData_inFrame_, v26, *((objc_object **)this + 2), v25);
        if (v26) {
          CFRelease(v26);
        }
        return;
      }
    }
    else
    {
      uint64_t v16 = &stru_1F3C7DA90;
      if (v5[201]) {
        goto LABEL_22;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_25;
  }
  uint64_t v12 = +[WebHistory optionalSharedHistory];
  WebCore::DocumentLoader::urlForHistory((uint64_t *)v30, (WebCore::DocumentLoader *)v5);
  uint64_t v13 = WTF::URL::operator NSURL *();
  if (v5[201]) {
    uint64_t v14 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v14 = &stru_1F3C7DA90;
  }
  if (*(void *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(v5 + 84))) {
    uint64_t v27 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v27 = &stru_1F3C7DA90;
  }
  [(WebHistory *)v12 _visitedURL:v13 withTitle:v14 method:v27 wasFailure:WebCore::DocumentLoader::urlForHistoryReflectsFailure((WebCore::DocumentLoader *)v5)];
  int v29 = v30[0];
  v30[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
}

void sub_1E13D5978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    CFRelease(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13D59F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2) {
      JUMPOUT(0x1E13D5A0CLL);
    }
    JUMPOUT(0x1E13D59E4);
  }
  JUMPOUT(0x1E13D59E8);
}

void WebFrameLoaderClient::updateGlobalHistoryRedirectLinks(WebFrameLoaderClient *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        Weaint k = *(void **)(v4 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0)
          {
            Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
            if (![Weak historyDelegate]) {
              goto LABEL_7;
            }
            goto LABEL_10;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weaint k = 0;
      }
      if (![Weak historyDelegate]) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
  }
LABEL_6:
  Weaint k = 0;
  if (![0 historyDelegate])
  {
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_13;
  }
LABEL_10:
  if (Weak) {
    uint64_t v7 = (uint64_t *)(Weak[10] + 688);
  }
  else {
    uint64_t v7 = &WebViewGetHistoryDelegateImplementations(WebView *)::empty;
  }
LABEL_13:
  uint64_t v8 = *(void **)(*(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 8) + 280) + 88);
  uint64_t v9 = (WTF::StringImpl *)v8[340];
  if (!v9) {
    goto LABEL_40;
  }
  int v10 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  if (v10)
  {
    *(_DWORD *)uint64_t v9 = v10;
    if (v7)
    {
LABEL_16:
      if (!v7[1]) {
        goto LABEL_40;
      }
      uint64_t v11 = *(objc_selector **)(*(void *)(*((void *)this + 2) + 8) + 56);
      WebCore::DocumentLoader::urlForHistory((uint64_t *)v43, (WebCore::DocumentLoader *)v8);
      uint64_t v14 = v43[0];
      if (v43[0])
      {
        int v15 = *(_DWORD *)v43[0];
        *(_DWORD *)v43[0] += 2;
        v43[0] = 0;
        if (v15) {
          *(_DWORD *)uint64_t v14 = v15;
        }
        else {
          WTF::StringImpl::destroy(v14, v12);
        }
        uint64_t v22 = (objc_object *)WTF::StringImpl::operator NSString *();
      }
      else
      {
        uint64_t v22 = (objc_object *)&stru_1F3C7DA90;
      }
      CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_didPerformClientRedirectFromURL_toURL_inFrame_, v11, v22, *((objc_object **)this + 2), v13);
      goto LABEL_37;
    }
  }
  else
  {
    WTF::StringImpl::destroy(v9, v6);
    if (v7) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = +[WebHistory optionalSharedHistory];
  uint64_t v17 = (WTF::StringImpl *)v8[340];
  if (v17)
  {
    *(_DWORD *)v17 += 2;
    uint64_t v18 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    uint64_t v18 = &stru_1F3C7DA90;
  }
  uint64_t v19 = [(WebHistory *)v16 _itemForURLString:v18];
  BOOL v21 = (WebHistoryItem *)v19;
  if (!v17) {
    goto LABEL_26;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
LABEL_26:
    if (!v19) {
      goto LABEL_40;
    }
    goto LABEL_32;
  }
  WTF::StringImpl::destroy(v17, v20);
  if (!v21) {
    goto LABEL_40;
  }
LABEL_32:
  WebCore::DocumentLoader::urlForHistory((uint64_t *)v43, (WebCore::DocumentLoader *)v8);
  uint64_t v14 = v43[0];
  if (v43[0])
  {
    int v25 = *(_DWORD *)v43[0];
    *(_DWORD *)v43[0] += 2;
    unsigned int v42 = v14;
    v43[0] = 0;
    if (v25) {
      *(_DWORD *)uint64_t v14 = v25;
    }
    else {
      WTF::StringImpl::destroy(v14, v24);
    }
  }
  else
  {
    unsigned int v42 = 0;
  }
  addRedirectURL(v21, (StringImpl *)&v42);
LABEL_37:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v23);
      WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
      uint64_t v27 = v43[0];
      if (!v43[0]) {
        return;
      }
      goto LABEL_41;
    }
    *(_DWORD *)v14 -= 2;
  }
LABEL_40:
  WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
  uint64_t v27 = v43[0];
  if (!v43[0]) {
    return;
  }
LABEL_41:
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    if (v7) {
      goto LABEL_43;
    }
LABEL_47:
    int v30 = +[WebHistory optionalSharedHistory];
    WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
    uint64_t v31 = v43[0];
    if (v43[0]) {
      size_t v32 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      size_t v32 = &stru_1F3C7DA90;
    }
    uint64_t v38 = [(WebHistory *)v30 _itemForURLString:v32];
    BOOL v40 = (WebHistoryItem *)v38;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v39);
        if (!v40) {
          return;
        }
        goto LABEL_70;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (!v38) {
      return;
    }
LABEL_70:
    unsigned int v41 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 109));
    if (v41) {
      *(_DWORD *)v41 += 2;
    }
    v43[0] = v41;
    addRedirectURL(v40, (StringImpl *)v43);
    if (v41)
    {
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
        return;
      }
      long long v37 = v41;
      goto LABEL_76;
    }
    return;
  }
  WTF::StringImpl::destroy(v27, v26);
  if (!v7) {
    goto LABEL_47;
  }
LABEL_43:
  if (v7[2])
  {
    WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
    uint64_t v28 = v43[0];
    if (v43[0]) {
      int v29 = (objc_selector *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v29 = (objc_selector *)&stru_1F3C7DA90;
    }
    uint64_t v34 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 109));
    if (v34)
    {
      *(_DWORD *)v34 += 2;
      uint64_t v35 = (objc_object *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      uint64_t v35 = (objc_object *)&stru_1F3C7DA90;
    }
    CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_didPerformServerRedirectFromURL_toURL_inFrame_, v29, v35, *((objc_object **)this + 2), v33);
    if (!v34)
    {
LABEL_57:
      if (!v28) {
        return;
      }
      goto LABEL_60;
    }
    if (*(_DWORD *)v34 != 2)
    {
      *(_DWORD *)v34 -= 2;
      goto LABEL_57;
    }
    WTF::StringImpl::destroy(v34, v36);
    if (v28)
    {
LABEL_60:
      if (*(_DWORD *)v28 != 2)
      {
        *(_DWORD *)v28 -= 2;
        return;
      }
      long long v37 = v28;
LABEL_76:
      WTF::StringImpl::destroy(v37, v36);
    }
  }
}

void sub_1E13D5ECC(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13D5F18(uint64_t a1, StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      if (!v3) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    *(_DWORD *)v2 -= 2;
  }
  if (!v3) {
LABEL_9:
  }
    JUMPOUT(0x1E13D5F08);
LABEL_10:
  JUMPOUT(0x1E13D5F6CLL);
}

void sub_1E13D5F50()
{
  if (!v0) {
    JUMPOUT(0x1E13D5F08);
  }
  JUMPOUT(0x1E13D5F6CLL);
}

void sub_1E13D5F5C(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1E13D5F08);
}

void addRedirectURL(WebHistoryItem *a1, StringImpl *a2)
{
  if (!a1->_private->_redirectURLs.__ptr_.__value_)
  {
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v5 = a1->_private;
    value = (WTF *)v5->_redirectURLs.__ptr_.__value_;
    v5->_redirectURLs.__ptr_.__value_ = v4;
    if (value)
    {
      uint64_t v7 = *((unsigned int *)value + 3);
      if (v7)
      {
        uint64_t v8 = *(WTF::StringImpl ***)value;
        uint64_t v9 = 8 * v7;
        do
        {
          int v10 = *v8;
          void *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, a2);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      uint64_t v11 = *(WTF **)value;
      if (*(void *)value)
      {
        *(void *)value = 0;
        *((_DWORD *)value + 2) = 0;
        WTF::fastFree(v11, a2);
      }
      WTF::fastFree(value, a2);
    }
  }
  uint64_t v12 = a1->_private->_redirectURLs.__ptr_.__value_;
  uint64_t v13 = v12[3];
  if (v13)
  {
    if (v13 != 1)
    {
      uint64_t v14 = (WTF::StringImpl **)(*(void *)v12 + 8);
      uint64_t v15 = 8 * v13 - 8;
      do
      {
        uint64_t v16 = *v14;
        WTF::StringImpl *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, a2);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else
  {
    if (!v12[2])
    {
      uint64_t v17 = *(void **)v12;
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x80);
      v12[2] = 16;
      *(void *)uint64_t v12 = v18;
      memcpy(v18, v17, 8 * v13);
      if (v17)
      {
        if (*(void **)v12 == v17)
        {
          *(void *)uint64_t v12 = 0;
          v12[2] = 0;
        }
        WTF::fastFree((WTF *)v17, a2);
      }
    }
    if (*(void *)v12) {
      bzero((void *)(*(void *)v12 + 8 * v12[3]), 8 - 8 * v12[3]);
    }
  }
  v12[3] = 1;
  uint64_t v19 = (WTF::StringImpl ***)a1->_private->_redirectURLs.__ptr_.__value_;
  if (*((_DWORD *)v19 + 3))
  {
    char v20 = *v19;
    BOOL v21 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v22 = *v20;
    StringImpl *v20 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, a2);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

WTF::StringImpl *WebCore::DocumentLoader::serverRedirectSourceForHistory(WebCore::DocumentLoader *this, uint64_t a2)
{
  WebCore::DocumentLoader::urlForHistory((uint64_t *)&v14, (WebCore::DocumentLoader *)a2);
  uint64_t v4 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872));
  if ((WTF::equal(v14, *v4, v5) & 1) != 0
    || (uint64_t v7 = (WTF *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872)),
        uint64_t v8 = (const WTF::StringImpl **)WTF::aboutBlankURL(v7),
        WTF::equal(*(WTF **)v7, *v8, v9))
    || (WebCore::DocumentLoader::urlForHistory((uint64_t *)&v13, (WebCore::DocumentLoader *)a2), (uint64_t v11 = v13) == 0))
  {
    *(void *)this = 0;
  }
  else
  {
    int v12 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    *(void *)this = v11;
    uint64_t v13 = 0;
    if (v12) {
      *(_DWORD *)uint64_t v11 = v12;
    }
    else {
      WTF::StringImpl::destroy(v11, v6);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E13D6288(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::shouldGoToHistoryItem(WebFrameLoaderClient *this, WebCore::HistoryItem *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    goto LABEL_6;
  }
  Weaint k = *(void **)(v5 + 8);
  if (!Weak) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0) {
    Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  else {
LABEL_6:
  }
    Weaint k = 0;
LABEL_7:
  uint64_t v7 = (void *)[Weak _policyDelegateForwarder];
  uint64_t v8 = kit(a2);
  return [v7 webView:Weak shouldGoToHistoryItem:v8];
}

void (*WebFrameLoaderClient::didDisplayInsecureContent(WebFrameLoaderClient *this))(void)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1
    && (uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 8)) != 0
    && (uint64_t v3 = *(void *)(v2 + 24)) != 0
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 48) + 16) + 1368))(*(void *)(*(void *)(v4 + 48) + 16)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v4 + 48) + 16) + 16));
    uint64_t v5 = Weak;
    if (Weak)
    {
      uint64_t result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didDisplayInsecureContentFunc;
      if (!result) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = (void (*)(void))qword_1EAD7FF88;
  if (!qword_1EAD7FF88) {
    return result;
  }
LABEL_8:
  return (void (*)(void))CallFrameLoadDelegate(result, v5, (objc_selector *)sel_webViewDidDisplayInsecureContent_);
}

void WebFrameLoaderClient::didRunInsecureContent(WebFrameLoaderClient *this, WebCore::SecurityOrigin *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(WebView **)(v5 + 8);
  if (!v6) {
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(void))(**((void **)v6->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((void *)v6->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
  {
    Weaint k = (WebView *)objc_loadWeak((id *)(*((void *)v6->super.viewContext.invalidateGStateCallback + 2) + 16));
    uint64_t v6 = Weak;
    if (Weak)
    {
      p_frameLoadDelegateImplementations = (uint64_t *)&Weak->_private->frameLoadDelegateImplementations;
      if (!Weak->_private->frameLoadDelegateImplementations.didRunInsecureContentFunc) {
        return;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = 0;
  }
LABEL_7:
  p_frameLoadDelegateImplementations = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  if (!qword_1EAD7FF90) {
    return;
  }
LABEL_8:
  uint64_t v8 = [[WebSecurityOrigin alloc] _initWithWebCoreSecurityOrigin:a2];
  CallFrameLoadDelegate((void (*)(void))p_frameLoadDelegateImplementations[26], v6, (objc_selector *)sel_webView_didRunInsecureContent_, v8);
  if (v8)
  {
    CFRelease(v8);
  }
}

void sub_1E13D6590(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::cancelledError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = *MEMORY[0x1E4F289A0];
  WebCore::ResourceRequestBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:4294966297 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::blockedError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:103 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::blockedByContentBlockerError()
{
}

void WebFrameLoaderClient::cannotShowURLError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:101 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::interruptedForPolicyChangeError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:102 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::blockedByContentFilterError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:105 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::cannotShowMIMETypeError(WebFrameLoaderClient *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = *MEMORY[0x1E4F289A0];
  WebCore::ResourceResponseBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:100 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::fileDoesNotExistError(WebFrameLoaderClient *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v3 = *MEMORY[0x1E4F289A0];
  WebCore::ResourceResponseBase::url(a2);
  [v2 _webKitErrorWithDomain:v3 code:4294966196 URL:WTF::URL::operator NSURL *()];
  JUMPOUT(0x1E4E451E0);
}

void WebFrameLoaderClient::httpsUpgradeRedirectLoopError()
{
}

void WebFrameLoaderClient::httpNavigationWithHTTPSOnlyError()
{
}

void WebFrameLoaderClient::pluginWillHandleLoadError(WebFrameLoaderClient *this, const WebCore::ResourceResponse *a2)
{
  id v3 = objc_alloc(MEMORY[0x1E4F28C58]);
  WebCore::ResourceResponseBase::url(a2);
  uint64_t v4 = WTF::URL::operator NSURL *();
  if (*(void *)WebCore::ResourceResponseBase::mimeType(a2)) {
    uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1F3C7DA90;
  }
  CFTypeRef v6 = (id)CFMakeCollectable((CFTypeRef)[v3 _initWithPluginErrorCode:204 contentURL:v4 pluginPageURL:0 pluginName:0 MIMEType:v5]);
  JUMPOUT(0x1E4E451E0);
}

BOOL WebFrameLoaderClient::shouldFallBack(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 56) == -999) {
    return 0;
  }
  MEMORY[0x1E4E4A400](a2);
  return *(_DWORD *)(a2 + 56) != 204;
}

BOOL WebFrameLoaderClient::canHandleRequest(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v3 = WebCore::ResourceRequest::nsURLRequest();
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    uint64_t v4 = *(void *)(*(void *)(v4 + 8) + 8);
  }
  BOOL v5 = *(void *)(*(void *)(v4 + 128) + 8) == v4;
  return +[WebView _canHandleRequest:v3 forMainFrame:v5];
}

uint64_t WebFrameLoaderClient::canShowMIMEType(WebFrameLoaderClient *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5)
      {
        Weaint k = *(void **)(v5 + 8);
        if (Weak)
        {
          if ((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16))) {
            goto LABEL_6;
          }
          Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
          if (*(void *)a2) {
            goto LABEL_12;
          }
LABEL_7:
          uint64_t v7 = &stru_1F3C7DA90;
          uint64_t v8 = Weak;
          return [v8 _canShowMIMEType:v7];
        }
      }
      else
      {
        Weaint k = 0;
      }
      if (*(void *)a2) {
        goto LABEL_12;
      }
      goto LABEL_7;
    }
  }
LABEL_6:
  Weaint k = 0;
  if (!*(void *)a2) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  uint64_t v8 = Weak;
  return [v8 _canShowMIMEType:v7];
}

BOOL WebFrameLoaderClient::canShowMIMETypeAsHTML(WebFrameLoaderClient *this, const WTF::String *a2)
{
  if (*(void *)a2)
  {
    uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    uint64_t v2 = &stru_1F3C7DA90;
  }
  return +[WebView canShowMIMETypeAsHTML:v2];
}

BOOL WebFrameLoaderClient::representationExistsForURLScheme(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)v7);
  BOOL v3 = +[WebView _representationExistsForURLScheme:cf];
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1E13D6C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::generatedMIMETypeForURLScheme(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)v6);
  MEMORY[0x1E4E442D0](a3, +[WebView _generatedMIMETypeForURLScheme:cf]);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1E13D6CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::frameLoadCompleted(WebFrameLoaderClient *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2
    && (uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8)) != 0
    && (uint64_t v4 = *(void *)(v3 + 24)) != 0
    && (uint64_t v5 = *(void *)(v4 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 48) + 16) + 1368))(*(void *)(*(void *)(v5 + 48) + 16)) & 1) == 0)
  {
    uint64_t result = [objc_loadWeak((id *)(*(void *)(*(void *)(v5 + 48) + 16) + 16)) drawsBackground];
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = [0 drawsBackground];
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = (void *)[*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) _scrollView];
  return [v7 setDrawsBackground:1];
}

uint64_t WebFrameLoaderClient::saveViewStateToItem(WebFrameLoaderClient *this, WebCore::HistoryItem *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6)
      {
        Weaint k = *(void **)(v6 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0)
          {
            Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
            if (v4 == [Weak mainFrame]) {
              goto LABEL_7;
            }
            goto LABEL_12;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weaint k = 0;
      }
      if (v4 == [Weak mainFrame]) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
LABEL_6:
  Weaint k = 0;
  if (v4 == [0 mainFrame])
  {
LABEL_7:
    uint64_t v8 = (void *)[Weak _UIKitDelegateForwarder];
    uint64_t v9 = kit(a2);
    return [v8 webView:Weak saveStateToHistoryItem:v9 forFrame:v4];
  }
LABEL_12:
  uint64_t v11 = (void *)[*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) documentView];
  uint64_t result = [v11 superview];
  if (result)
  {
    uint64_t result = [v11 conformsToProtocol:&unk_1F3CC3B48];
    if (result)
    {
      uint64_t v12 = [v11 viewState];
      return MEMORY[0x1F416C688](a2, v12);
    }
  }
  return result;
}

uint64_t WebFrameLoaderClient::restoreViewState(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if (!v2)
  {
    uint64_t v4 = *(WebCore::HistoryItem **)(MEMORY[0xB8] + 16);
    if (!v4) {
      return this;
    }
LABEL_9:
    Weaint k = 0;
    if (v2 != [0 mainFrame]) {
      goto LABEL_15;
    }
LABEL_10:
    uint64_t v7 = (void *)[Weak _UIKitDelegateForwarder];
    uint64_t v8 = kit(v4);
    return [v7 webView:Weak restoreStateFromHistoryItem:v8 forFrame:v2 force:0];
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
  uint64_t v4 = *(WebCore::HistoryItem **)(*(void *)(v3 + 184) + 16);
  if (!v4) {
    return this;
  }
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5)
  {
    Weaint k = 0;
LABEL_14:
    if (v2 != [Weak mainFrame]) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  Weaint k = *(void **)(v5 + 8);
  if (!Weak) {
    goto LABEL_14;
  }
  if ((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16))) {
    goto LABEL_9;
  }
  Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  if (v2 == [Weak mainFrame]) {
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v9 = (void *)[*(id *)(*(void *)(*(void *)(v1 + 16) + 8) + 16) documentView];
  this = [v9 conformsToProtocol:&unk_1F3CC3B48];
  if (this)
  {
    this = WebCore::HistoryItem::viewState(v4);
    if (this)
    {
      return [v9 setViewState:this];
    }
  }
  return this;
}

uint64_t WebFrameLoaderClient::provisionalLoadStarted(WebFrameLoaderClient *this)
{
  uint64_t v1 = (void *)[*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) _scrollView];
  return [v1 setDrawsBackground:0];
}

uint64_t WebFrameLoaderClient::didFinishLoad(WebFrameLoaderClient *this)
{
  return objc_msgSend(*(id *)(*(void *)(*((void *)this + 2) + 8) + 40), "webFrame:didFinishLoadWithError:");
}

uint64_t WebFrameLoaderClient::prepareForDataSourceReplacement(id *this)
{
  return [this[2] _dataSource];
}

void WebFrameLoaderClient::createDocumentLoader(WebFrameLoaderClient *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::SubstituteData *a3@<X2>, WebDocumentLoaderMac **a4@<X8>)
{
  uint64_t v8 = (WebDocumentLoaderMac *)WTF::fastMalloc((WTF *)0xE20);
  WebDocumentLoaderMac::WebDocumentLoaderMac(v8, a2, a3);
  uint64_t v9 = [WebDataSource alloc];
  ++*((_DWORD *)v8 + 6);
  uint64_t v17 = v8;
  id v10 = [(WebDataSource *)v9 _initWithDocumentLoader:&v17];
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (!v11)
  {
LABEL_4:
    uint64_t v12 = *((void *)this + 2);
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if (*((_DWORD *)v11 + 6) != 1)
  {
    --*((_DWORD *)v11 + 6);
    goto LABEL_4;
  }
  (*(void (**)(WebDocumentLoaderMac *))(*(void *)v11 + 24))(v11);
  uint64_t v12 = *((void *)this + 2);
  if (!v12) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 8);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 24);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        if (((*(uint64_t (**)(void))(**(void **)(*(void *)(v15 + 48) + 16) + 1368))(*(void *)(*(void *)(v15 + 48) + 16)) & 1) == 0)
        {
          Weaint k = (WebView *)objc_loadWeak((id *)(*(void *)(*(void *)(v15 + 48) + 16) + 16));
          goto LABEL_12;
        }
      }
    }
  }
LABEL_11:
  Weaint k = 0;
LABEL_12:
  WebDocumentLoaderMac::setDataSource(v8, v10, Weak);
  *a4 = v8;
  if (v10) {
    CFRelease(v10);
  }
}

void sub_1E13D728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[6] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 24))(a10);
    }
    else {
      --a10[6];
    }
  }
  if (v10[6] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v10 + 24))(v10);
    _Unwind_Resume(exception_object);
  }
  --v10[6];
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::setTitle(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8)
      {
        Weaint k = *(void **)(v8 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0)
          {
            Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
            uint64_t result = [Weak historyDelegate];
            if (!result) {
              goto LABEL_7;
            }
            goto LABEL_13;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weaint k = 0;
      }
      uint64_t result = [Weak historyDelegate];
      if (!result) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
LABEL_6:
  Weaint k = 0;
  uint64_t result = [0 historyDelegate];
  if (!result)
  {
LABEL_7:
    uint64_t result = objc_msgSend((id)WTF::URL::operator NSURL *(), "_webkit_canonicalize");
    if (result)
    {
      uint64_t v13 = result;
      uint64_t result = objc_msgSend((id)objc_msgSend((id)result, "absoluteString"), "isEqualToString:", @"about:blank");
      if ((result & 1) == 0)
      {
        uint64_t v14 = [+[WebHistory optionalSharedHistory] itemForURL:v13];
        if (*a2) {
          uint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v15 = &stru_1F3C7DA90;
        }
        return [(WebHistoryItem *)v14 setTitle:v15];
      }
    }
    return result;
  }
LABEL_13:
  if (Weak)
  {
    uint64_t v16 = (uint64_t *)(Weak[10] + 688);
    if (*(void *)(Weak[10] + 720)) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = &WebViewGetHistoryDelegateImplementations(WebView *)::empty;
    if (qword_1EAD7FFF0)
    {
LABEL_15:
      if (*a2)
      {
        uint64_t v17 = (objc_selector *)WTF::StringImpl::operator NSString *();
        if (*a3)
        {
LABEL_17:
          uint64_t v18 = (objc_object *)WTF::StringImpl::operator NSString *();
LABEL_26:
          BOOL v21 = *(objc_object **)(a1 + 16);
          uint64_t v22 = *(WebView **)(Weak[10] + 120);
          return CallDelegate((void (*)(void))Weak, v22, (objc_object *)sel_webView_updateHistoryTitle_forURL_inFrame_, v17, v18, v21, v12);
        }
      }
      else
      {
        uint64_t v17 = (objc_selector *)&stru_1F3C7DA90;
        if (*a3) {
          goto LABEL_17;
        }
      }
      uint64_t v18 = (objc_object *)&stru_1F3C7DA90;
      goto LABEL_26;
    }
  }
  if (!v16[3]) {
    return result;
  }
  if (!*a2)
  {
    uint64_t v19 = (objc_selector *)&stru_1F3C7DA90;
    if (*a3) {
      goto LABEL_22;
    }
LABEL_32:
    char v20 = (objc_object *)&stru_1F3C7DA90;
    goto LABEL_33;
  }
  uint64_t v19 = (objc_selector *)WTF::StringImpl::operator NSString *();
  if (!*a3) {
    goto LABEL_32;
  }
LABEL_22:
  char v20 = (objc_object *)WTF::StringImpl::operator NSString *();
LABEL_33:
  uint64_t v23 = *(WebView **)(Weak[10] + 120);
  return CallDelegate((void (*)(void))Weak, v23, (objc_object *)sel_webView_updateHistoryTitle_forURL_, v19, v20, v11);
}

uint64_t WebFrameLoaderClient::savePlatformDataToCachedFrame(WebFrameLoaderClient *this, WebCore::CachedFrame *a2)
{
  uint64_t v3 = (const void *)[*(id *)(*(void *)(*((void *)this + 2) + 8) + 16) documentView];
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1F3C7A8D0;
  v4[1] = v3;
  if (v3) {
    CFRetain(v3);
  }
  WebCore::CachedFrame::setCachedFramePlatformData();
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5
    && (uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v8 + 48) + 16) + 1368))(*(void *)(*(void *)(v8 + 48) + 16)) & 1) == 0)
  {
    return [objc_loadWeak((id *)(*(void *)(*(void *)(v8 + 48) + 16) + 16)) _stopAllPlugInsForPageCache];
  }
  else
  {
    return [0 _stopAllPlugInsForPageCache];
  }
}

void sub_1E13D7724(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13D7738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::transitionToCommittedFromCachedFrame(WebFrameLoaderClient *this, WebCore::CachedFrame *a2)
{
  uint64_t v4 = WebCore::CachedFrame::cachedFramePlatformData(a2);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 3568);
  }
  else {
    uint64_t v7 = 0;
  }
  [*(id *)(v4 + 8) setDataSource:v7];
  uint64_t v8 = *(void **)(*(void *)(*((void *)this + 2) + 8) + 16);
  return [v8 _setDocumentView:v5];
}

uint64_t WebFrameLoaderClient::didRestoreFrameHierarchyForCachedFrame(WebFrameLoaderClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1
    && (uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 8)) != 0
    && (uint64_t v3 = *(void *)(v2 + 24)) != 0
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 48) + 16) + 1368))(*(void *)(*(void *)(v4 + 48) + 16)) & 1) == 0)
  {
    Weaint k = objc_loadWeak((id *)(*(void *)(*(void *)(v4 + 48) + 16) + 16));
  }
  else
  {
    Weaint k = 0;
  }
  return [Weak _restorePlugInsFromCache];
}

void WebFrameLoaderClient::transitionToCommittedForNewPage(uint64_t a1)
{
  uint64_t v2 = (void *)[*(id *)(a1 + 16) _dataSource];
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 _documentLoader];
    uint64_t v4 = v27;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v27 = 0;
  }
  uint64_t v5 = (void *)WebCore::ResourceResponseBase::mimeType((WTF::StringImpl *)((char *)v4 + 1272));
  if (MEMORY[0x1E4E44240](*v5, "text/html", 9))
  {
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v7 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 16) + 8) + 16), "_viewClassForMIMEType:", objc_msgSend(v3, "_responseMIMEType"));
    BOOL v6 = v7 == objc_opt_class();
  }
  if (WebCore::FrameLoaderStateMachine::committingFirstRealLoad((WebCore::FrameLoaderStateMachine *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 8) + 280) + 64))) {
    BOOL v8 = !v6;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 16) + 8) + 16), "documentView"), "setDataSource:", v3);
    return;
  }
  if (v6)
  {
    uint64_t v9 = [WebHTMLView alloc];
    [*(id *)(*(void *)(*(void *)(a1 + 16) + 8) + 16) bounds];
    id v10 = -[WebHTMLView initWithFrame:](v9, "initWithFrame:");
    [*(id *)(*(void *)(*(void *)(a1 + 16) + 8) + 16) _setDocumentView:v10];
    if (!v10) {
      return;
    }
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = (WebHTMLView *)[*(id *)(*(void *)(*(void *)(a1 + 16) + 8) + 16) _makeDocumentViewForDataSource:v3];
    if (!v16) {
      return;
    }
    id v10 = v16;
    CFRetain(v16);
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
LABEL_15:
      uint64_t v12 = *(WebCore::LocalFrameView **)(*(void *)(v11 + 8) + 8);
      uint64_t v13 = *((void *)v12 + 3);
      if (v13) {
        goto LABEL_16;
      }
LABEL_22:
      uint64_t v14 = 0;
      uint64_t v15 = *(WebCore::LocalFrameView **)(*((void *)v12 + 16) + 8);
      if (v15 != v12) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = MEMORY[0x18];
  if (!MEMORY[0x18]) {
    goto LABEL_22;
  }
LABEL_16:
  uint64_t v14 = *(WebCore::FocusController ***)(v13 + 8);
  uint64_t v15 = *(WebCore::LocalFrameView **)(*((void *)v12 + 16) + 8);
  if (v15 != v12) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v17 = (WebCore::ScrollView *)*((void *)v12 + 36);
  if (v17) {
    WebCore::ScrollView::setParentVisible(v17);
  }
LABEL_25:
  WebCore::LocalFrame::setView();
  uint64_t v27 = 0;
  WebCore::LocalFrameView::create((uint64_t *)&v30, v12, v18);
  uint64_t v19 = v30;
  ++*((_DWORD *)v30 + 2);
  uint64_t v27 = v19;
  WebCore::LocalFrame::setView();
  char v20 = v27;
  uint64_t v27 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v20 + 8))(v20);
    }
    else {
      --*((_DWORD *)v20 + 2);
    }
  }
  WebCore::Page::setDelegatesScaling((WebCore::Page *)v14);
  [*(id *)(a1 + 16) _updateBackgroundAndUpdatesWhileOffscreen];
  [*(id *)(*(void *)(*(void *)(a1 + 16) + 8) + 16) _install];
  if (v15 == v12)
  {
    WebCore::ScrollView::setDelegatedScrollingMode();
    WebCore::ScrollView::setParentVisible(v30);
  }
  -[WebHTMLView setDataSource:](v10, "setDataSource:", v3, v27);
  if (!v3
    || ([v3 _documentLoader], !v29)
    || (MEMORY[0x1E4E442D0](&v27, [v3 pageTitle]),
        char v28 = 0,
        WebCore::DocumentLoader::setTitle(),
        uint64_t v22 = v27,
        uint64_t v27 = 0,
        !v22))
  {
LABEL_36:
    uint64_t v23 = *((void *)v12 + 15);
    if (v23) {
      goto LABEL_37;
    }
    goto LABEL_39;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_36;
  }
  WTF::StringImpl::destroy(v22, v21);
  uint64_t v23 = *((void *)v12 + 15);
  if (v23)
  {
LABEL_37:
    uint64_t v24 = *(void *)(v23 + 8);
    if (v24)
    {
      int v25 = (WebCore::LocalFrameView *)*((void *)v12 + 36);
      (*(void (**)(uint64_t))(*(void *)v24 + 1256))(v24);
      WebCore::LocalFrameView::setCanHaveScrollbars(v25);
    }
  }
LABEL_39:
  if (v10 == (WebHTMLView *)objc_msgSend((id)-[WebHTMLView window](v10, "window", v27), "firstResponder"))
  {
    WebCore::FocusController::setFocusedFrame();
    WebCore::FocusController::setFocused(v14[9]);
  }
  uint64_t v26 = v30;
  int v30 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 2) == 1) {
      (*(void (**)(WebCore::ScrollView *))(*(void *)v26 + 8))(v26);
    }
    else {
      --*((_DWORD *)v26 + 2);
    }
  }
  CFRelease(v10);
}

void sub_1E13D7CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  CFRelease(v12);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::didRestoreFromBackForwardCache(WebFrameLoaderClient *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        Weaint k = *(void **)(v4 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0)
          {
            Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
            uint64_t result = [Weak mainFrame];
            if (result != *((void *)this + 2)) {
              return result;
            }
            goto LABEL_7;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weaint k = 0;
      }
      uint64_t result = [Weak mainFrame];
      if (result != *((void *)this + 2)) {
        return result;
      }
      goto LABEL_7;
    }
  }
LABEL_6:
  Weaint k = 0;
  uint64_t result = [0 mainFrame];
  if (result != *((void *)this + 2)) {
    return result;
  }
LABEL_7:
  uint64_t v7 = (void *)[Weak _UIKitDelegateForwarder];
  return [v7 webViewDidRestoreFromPageCache:Weak];
}

uint64_t WebFrameLoaderClient::userAgent@<X0>(uint64_t this@<X0>, const WTF::URL *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(this + 16);
  if (v4
    && (uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8)) != 0
    && (uint64_t v6 = *(void *)(v5 + 24)) != 0
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && (this = (*(uint64_t (**)(void, const WTF::URL *))(**(void **)(*(void *)(v7 + 48) + 16) + 1368))(*(void *)(*(void *)(v7 + 48) + 16), a2), (this & 1) == 0)&& (this = (uint64_t)objc_loadWeak((id *)(*(void *)(*(void *)(v7 + 48) + 16) + 16))) != 0)
  {
    return [(id)this _userAgentString];
  }
  else
  {
    BOOL v8 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v8 += 2;
    }
    *a3 = v8;
  }
  return this;
}

BOOL WebFrameLoaderClient::canCachePage(id *this)
{
  objc_msgSend((id)objc_msgSend(this[2], "_dataSource"), "representation");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (uint64_t v2 = *(void *)(*(void *)(*((void *)this[2] + 1) + 8) + 24)) != 0
    && (uint64_t v3 = *(void *)(v2 + 8)) != 0
    && (uint64_t v4 = *(void *)(*(void *)(v3 + 136) + 16), *(unsigned char *)(v4 + 65)))
  {
    return *(_DWORD *)(v4 + 60) != 0;
  }
  else
  {
    return 0;
  }
}

void WebFrameLoaderClient::createFrame(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 48) + 8) + 544);
  if (!v5 || (v6 = *(void *)(v5 + 8)) == 0 || (uint64_t v7 = *(void *)(v6 + 24)) == 0 || (v8 = *(void *)(v7 + 8)) == 0)
  {
    *a4 = 0;
    return;
  }
  uint64_t v12 = objc_alloc_init(WebFrameView);
  +[WebFrame _createSubframeWithOwnerElement:a3 page:v8 frameName:a2 frameView:v12];
  if (v25
    && (uint64_t v13 = *(void **)(*(void *)(v25 + 280) + 16),
        ((*(uint64_t (**)(void *))(*v13 + 1072))(v13) & 1) == 0))
  {
    uint64_t v14 = (void *)v13[2];
  }
  else
  {
    uint64_t v14 = 0;
  }
  if ([v14 _dataSource])
  {
    uint64_t v15 = (void *)[v14 _dataSource];
    if (v15)
    {
      [v15 _documentLoader];
      uint64_t v16 = v26;
    }
    else
    {
      uint64_t v16 = 0;
    }
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 16), "_dataSource"), "_documentLoader");
    uint64_t v18 = *(_DWORD **)(v24 + 1624);
    if (v18) {
      *v18 += 2;
    }
    uint64_t v19 = *(WTF::StringImpl **)(v16 + 1624);
    *(void *)(v16 + 1624) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v17);
        uint64_t v20 = v25;
        uint64_t v21 = *(void *)(v25 + 24);
        if (!v21) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = v25;
  uint64_t v21 = *(void *)(v25 + 24);
  if (!v21)
  {
LABEL_22:
    *a4 = 0;
    uint64_t v22 = (unsigned int *)(v20 + 8);
    if (atomic_fetch_add((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v23 = &unk_1F3C797F0;
      v23[1] = v22;
      uint64_t v27 = v23;
      WTF::ensureOnMainThread();
      if (v27) {
        (*(void (**)(void *))(*v27 + 8))(v27);
      }
    }
    goto LABEL_23;
  }
LABEL_19:
  if (!*(void *)(v21 + 8)) {
    goto LABEL_22;
  }
  *a4 = v20;
LABEL_23:
  if (v12) {
    CFRelease(v12);
  }
}

void sub_1E13D831C(_Unwind_Exception *a1)
{
}

uint64_t *WTF::Ref<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::~Ref(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  uint64_t v3 = (unsigned int *)(v2 + 8);
  if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, v3);
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1F3C797F0;
  v5[1] = v3;
  uint64_t v6 = v5;
  WTF::ensureOnMainThread();
  if (!v6) {
    return a1;
  }
  (*(void (**)(void *))(*v6 + 8))(v6);
  return a1;
}

void sub_1E13D83F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::objectContentType(WebFrameLoaderClient *this, StringImpl *a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    *(_DWORD *)v4 += 2;
    uint64_t v29 = v4;
    if (*((_DWORD *)v4 + 1)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  uint64_t v20 = objc_msgSend((id)objc_msgSend((id)WTF::URL::operator NSURL *(), "path"), "pathExtension");
  if ([v20 length])
  {
    MEMORY[0x1E4E442D0](&v28, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F290B0], "sharedMappings"), "MIMETypeForExtension:", v20));
    uint64_t v21 = v28;
    char v28 = 0;
    uint64_t v29 = v21;
    if (v4)
    {
      if (*(_DWORD *)v4 != 2)
      {
        *(_DWORD *)v4 -= 2;
        if (!v21)
        {
LABEL_41:
          uint64_t v23 = *((void *)this + 2);
          if (v23
            && (uint64_t v24 = *(void *)(*(void *)(v23 + 8) + 8)) != 0
            && (uint64_t v25 = *(void *)(v24 + 24)) != 0
            && (uint64_t v26 = *(void *)(v25 + 8)) != 0
            && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v26 + 48) + 16) + 1368))(*(void *)(*(void *)(v26 + 48) + 16)) & 1) == 0)
          {
            Weaint k = objc_loadWeak((id *)(*(void *)(*(void *)(v26 + 48) + 16) + 16));
          }
          else
          {
            Weaint k = 0;
          }
          if (objc_msgSend(Weak, "_pluginForExtension:", v20, v28))
          {
            uint64_t v14 = 3;
            uint64_t v29 = 0;
            uint64_t v4 = v21;
            if (!v21) {
              return v14;
            }
LABEL_24:
            int v18 = *(_DWORD *)v4 - 2;
            if (*(_DWORD *)v4 != 2)
            {
LABEL_25:
              *(_DWORD *)uint64_t v4 = v18;
              return v14;
            }
            goto LABEL_54;
          }
          uint64_t v4 = v21;
          goto LABEL_51;
        }
LABEL_38:
        if (*((_DWORD *)v21 + 1))
        {
LABEL_3:
          uint64_t v5 = *((void *)this + 2);
          if (!v5) {
            goto LABEL_8;
          }
          uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
          if (!v6) {
            goto LABEL_8;
          }
          uint64_t v7 = *(void *)(v6 + 24);
          if (!v7) {
            goto LABEL_8;
          }
          uint64_t v8 = *(void **)(v7 + 8);
          if (!v8) {
            goto LABEL_9;
          }
          if (((*(uint64_t (**)(void, StringImpl *))(**(void **)(v8[6] + 16) + 1368))(*(void *)(v8[6] + 16), a2) & 1) == 0)uint64_t v8 = objc_loadWeak((id *)(*(void *)(v8[6] + 16) + 16)); {
          else
          }
LABEL_8:
            uint64_t v8 = 0;
LABEL_9:
          uint64_t v9 = [v8 _pluginForMIMEType:WTF::StringImpl::operator NSString *()];
          int isSupportedImageMIMEType = WebCore::MIMETypeRegistry::isSupportedImageMIMEType((WebCore::MIMETypeRegistry *)&v29, v10);
          if (v9) {
            unsigned int v12 = 3;
          }
          else {
            unsigned int v12 = 0;
          }
          if (v9) {
            char v13 = 1;
          }
          else {
            char v13 = isSupportedImageMIMEType;
          }
          if (isSupportedImageMIMEType) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v12;
          }
          uint64_t v15 = v29;
          if ((v13 & 1) == 0)
          {
            uint64_t v16 = *(void **)(*(void *)(*((void *)this + 2) + 8) + 16);
            if (v29) {
              uint64_t v17 = (__CFString *)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v17 = &stru_1F3C7DA90;
            }
            uint64_t v14 = 2 * (objc_msgSend(v16, "_viewClassForMIMEType:", v17, v28) != 0);
            uint64_t v15 = v29;
          }
          uint64_t v29 = 0;
          uint64_t v4 = v15;
          if (!v15) {
            return v14;
          }
          goto LABEL_24;
        }
        goto LABEL_41;
      }
      WTF::StringImpl::destroy(v4, a2);
      uint64_t v22 = v28;
      char v28 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, a2);
          if (!v21) {
            goto LABEL_41;
          }
          goto LABEL_38;
        }
        *(_DWORD *)v22 -= 2;
      }
    }
    if (!v21) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
LABEL_51:
  if (v4)
  {
    if (!*((_DWORD *)v4 + 1))
    {
      uint64_t v29 = 0;
      uint64_t v14 = 2;
      int v18 = *(_DWORD *)v4 - 2;
      if (*(_DWORD *)v4 != 2) {
        goto LABEL_25;
      }
LABEL_54:
      WTF::StringImpl::destroy(v4, a2);
      return v14;
    }
    goto LABEL_3;
  }
  return 2;
}

uint64_t sub_1E13D8738(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v17 = (int)a2;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (v17 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v19 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v19);
  objc_end_catch();
  return 0;
}

void WebFrameLoaderClient::createPlugin(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v60 = a6;
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 8);
  if (!v11) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    goto LABEL_5;
  }
  Weaint k = *(void **)(v12 + 8);
  if (!Weak) {
    goto LABEL_6;
  }
  if (((*(uint64_t (**)(void))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16)) & 1) == 0) {
    Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  else {
LABEL_5:
  }
    Weaint k = 0;
LABEL_6:
  WTF::URL::operator NSURL *();
  unsigned int v62 = (void *)WTF::URL::operator NSURL *();
  uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a3 + 12)];
  uint64_t v16 = *(unsigned int *)(a3 + 12);
  if (v16)
  {
    int v17 = *(WTF **)a3;
    uint64_t v18 = 8 * v16;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v17, v14);
      if (cf)
      {
        objc_msgSend(v15, "addObject:");
        CFTypeRef v19 = cf;
        CFTypeRef cf = 0;
        if (v19) {
          CFRelease(v19);
        }
      }
      int v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  if (*(void *)a5 && *(_DWORD *)(*(void *)a5 + 4))
  {
    uint64_t v20 = WTF::StringImpl::operator NSString *();
    if (*(void *)a5) {
      uint64_t v21 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v21 = &stru_1F3C7DA90;
    }
    uint64_t v22 = objc_msgSend(Weak, "_pluginForMIMEType:", v21, v60);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v23 = objc_msgSend((id)objc_msgSend(v62, "path", v60), "pathExtension");
  if (v22)
  {
    uint64_t v24 = *(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v24) {
      goto LABEL_24;
    }
LABEL_21:
    if ((*(unsigned char *)(v24 + 45) & 2) != 0) {
      goto LABEL_109;
    }
    if (*(unsigned char *)(v24 + 46) == 7) {
      WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason();
    }
LABEL_24:
    char v25 = 0;
    uint64_t v26 = 203;
    if (*(void *)(a1 + 16)) {
      goto LABEL_25;
    }
LABEL_79:
    uint16x8_t v51 = (WebCore::Widget *)WTF::fastMalloc((WTF *)0x40);
    WebCore::Widget::Widget(v51, 0);
    *(void *)uint16x8_t v51 = &unk_1F3C7A8F8;
    *BOOL v61 = v51;
    if (!v15) {
      return;
    }
    goto LABEL_98;
  }
  uint64_t v27 = v23;
  if ([v23 length])
  {
    uint64_t v22 = (void *)[Weak _pluginForExtension:v27];
    if (v22)
    {
      MEMORY[0x1E4E442D0](&cf, v27);
      uint64_t v29 = (void *)[v22 MIMETypeForExtension:&cf];
      int v30 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v28);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      if ([v29 length]) {
        uint64_t v20 = (uint64_t)v29;
      }
      uint64_t v24 = *(void *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
      if (!v24) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v26 = 200;
  char v25 = 1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_79;
  }
LABEL_25:
  if (Weak)
  {
    if (!*(void *)(Weak[10] + 392)) {
      goto LABEL_97;
    }
  }
  else if (!qword_1EAD7FEA8)
  {
    goto LABEL_97;
  }
  uint64_t v31 = *(unsigned int *)(a3 + 12);
  if (!v31)
  {
LABEL_66:
    uint64_t v44 = (WTF::StringImpl *)*MEMORY[0x1E4F30968];
    if (!*MEMORY[0x1E4F30968]) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  unint64_t v32 = 0;
  int v33 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 112);
  int v34 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 108);
  int v35 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 117);
  int v36 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 103);
  int v37 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 105);
  int v38 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 110);
  int v39 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 115);
  int v40 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 97);
  int v41 = *(unsigned __int8 *)(MEMORY[0x1E4F30990] + 101);
  while (1)
  {
    uint64_t v42 = *(void *)(*(void *)a3 + 8 * v32);
    if (!v42 || *(_DWORD *)(v42 + 4) != 11) {
      goto LABEL_36;
    }
    BOOL v43 = *(unsigned __int16 **)(v42 + 8);
    if ((*(unsigned char *)(v42 + 16) & 4) != 0) {
      break;
    }
    if (v33 == (unsigned __int16)(*v43 | (32 * (*v43 - 65 < 0x1A)))
      && v34 == (unsigned __int16)(v43[1] | (32 * (v43[1] - 65 < 0x1A)))
      && v35 == (unsigned __int16)(v43[2] | (32 * (v43[2] - 65 < 0x1A)))
      && v36 == (unsigned __int16)(v43[3] | (32 * (v43[3] - 65 < 0x1A)))
      && v37 == (unsigned __int16)(v43[4] | (32 * (v43[4] - 65 < 0x1A)))
      && v38 == (unsigned __int16)(v43[5] | (32 * (v43[5] - 65 < 0x1A)))
      && v39 == (unsigned __int16)(v43[6] | (32 * (v43[6] - 65 < 0x1A)))
      && v33 == (unsigned __int16)(v43[7] | (32 * (v43[7] - 65 < 0x1A)))
      && v40 == (unsigned __int16)(v43[8] | (32 * (v43[8] - 65 < 0x1A)))
      && v36 == (unsigned __int16)(v43[9] | (32 * (v43[9] - 65 < 0x1A)))
      && v41 == (unsigned __int16)(v43[10] | (32 * (v43[10] - 65 < 0x1A))))
    {
      goto LABEL_63;
    }
LABEL_36:
    if (v31 == ++v32) {
      goto LABEL_66;
    }
  }
  if (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)v43) != v33
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 1)) != v34
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 2)) != v35
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 3)) != v36
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 4)) != v37
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 5)) != v38
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 6)) != v39
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 7)) != v33
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 8)) != v40
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 9)) != v36
    || *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *((unsigned __int8 *)v43 + 10)) != v41)
  {
    goto LABEL_36;
  }
LABEL_63:
  if (v32 >= *(unsigned int *)(a4 + 12))
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x1E13D8F34);
  }
  uint64_t v44 = *(WTF::StringImpl **)(*(void *)a4 + 8 * v32);
  if (v44) {
LABEL_67:
  }
    *(_DWORD *)v44 += 2;
LABEL_68:
  unint64_t v63 = v44;
  WebCore::Document::completeURL();
  __int32 v46 = v63;
  unint64_t v63 = 0;
  if (!v46) {
    goto LABEL_71;
  }
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::destroy(v46, v45);
    if ((v67 & 2) != 0) {
      goto LABEL_86;
    }
  }
  else
  {
    *(_DWORD *)v46 -= 2;
LABEL_71:
    if ((v67 & 2) != 0)
    {
LABEL_86:
      if (v25) {
        goto LABEL_87;
      }
LABEL_89:
      if (*(void *)[v22 pluginInfo]) {
        unsigned int v52 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        unsigned int v52 = &stru_1F3C7DA90;
      }
      goto LABEL_92;
    }
  }
  unint64_t v63 = 0;
  WTF::URL::invalidate((WTF::URL *)&v63);
  uint64_t v48 = v63;
  unint64_t v63 = 0;
  unsigned int v49 = (WTF::StringImpl *)cf;
  CFTypeRef cf = v48;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::destroy(v49, v47);
      unsigned long long v50 = v63;
    }
    else
    {
      unsigned long long v50 = 0;
      *(_DWORD *)v49 -= 2;
    }
  }
  else
  {
    unsigned long long v50 = 0;
  }
  long long v67 = v64;
  LODWORD(v64) = v64 & 0xFFFFFFFE;
  long long v68 = v65;
  unint64_t v63 = 0;
  if (!v50) {
    goto LABEL_86;
  }
  if (*(_DWORD *)v50 != 2)
  {
    *(_DWORD *)v50 -= 2;
    goto LABEL_86;
  }
  WTF::StringImpl::destroy(v50, v47);
  if ((v25 & 1) == 0) {
    goto LABEL_89;
  }
LABEL_87:
  unsigned int v52 = 0;
LABEL_92:
  uint16x8_t v53 = (objc_selector *)[objc_alloc(MEMORY[0x1E4F28C58]) _initWithPluginErrorCode:v26 contentURL:v62 pluginPageURL:WTF::URL::operator NSURL *() pluginName:v52 MIMEType:v20];
  BOOL v54 = (void *)[*(id *)(a1 + 16) webView];
  uint64_t v55 = (objc_object *)[*(id *)(a1 + 16) _dataSource];
  unsigned int v56 = (WebView *)[v54 _resourceLoadDelegateForwarder];
  CallDelegate((void (*)(void))v54, v56, (objc_object *)sel_webView_plugInFailedWithError_dataSource_, v53, v55, v57);
  if (v53) {
    CFRelease(v53);
  }
  unsigned int v59 = (WTF::StringImpl *)cf;
  CFTypeRef cf = 0;
  if (!v59)
  {
LABEL_97:
    *BOOL v61 = 0;
    if (!v15) {
      return;
    }
    goto LABEL_98;
  }
  if (*(_DWORD *)v59 != 2)
  {
    *(_DWORD *)v59 -= 2;
    goto LABEL_97;
  }
  WTF::StringImpl::destroy(v59, v58);
  *BOOL v61 = 0;
  if (v15) {
LABEL_98:
  }
    CFRelease(v15);
}

void sub_1E13D8F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  if (v16) {
    CFRelease(v16);
  }
  if (a2 == 1)
  {
    CFTypeRef v19 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v19);
    objc_end_catch();
    *a9 = 0;
    JUMPOUT(0x1E13D8EBCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13D9098()
{
  if (!v0) {
    JUMPOUT(0x1E13D9064);
  }
  JUMPOUT(0x1E13D905CLL);
}

uint64_t WebFrameLoaderClient::redirectDataToPlugin(id *this, WebCore::Widget *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(this[2], "_dataSource"), "representation"), "_redirectDataToManualLoader:forPluginView:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(this[2], "frameView"), "documentView"), "_pluginController"), WebCore::Widget::platformWidget(a2));
}

void sub_1E13D9110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

uint64_t WebFrameLoaderClient::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  WebCore::createInternalError();
  long long v21 = *(_OWORD *)v6;
  int v22 = v7;
  int v23 = v8;
  int v24 = v9;
  int v25 = v10;
  int v26 = v11;
  int v27 = v12;
  int v28 = v13;
  int v29 = v14;
  int v30 = v15;
  __int16 v32 = v17;
  int v31 = v16;
  CFTypeRef v33 = cf;
  char v34 = v19;
  int v35 = 1;
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v4 + 16))(v4, &v21);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (v35 != -1) {
    ((void (*)(char *, long long *))off_1F3C7AAA8[v35])(&v20, &v21);
  }
  return 0;
}

void sub_1E13D93B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  uint64_t v23 = *(unsigned int *)(v20 - 48);
  if (v23 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1F3C7AAA8[v23])(v20 - 129, v20 - 128);
  }
  *(_DWORD *)(v20 - 4++*(_DWORD *)(this - 8) = -1;
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&a19, v22);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&a9, v24);
  _Unwind_Resume(a1);
}

WTF::AtomStringImpl *WebFrameLoaderClient::overrideMediaType@<X0>(WebFrameLoaderClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3
    && (uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8)) != 0
    && (uint64_t v5 = *(void *)(v4 + 24)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && ((*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 48) + 16) + 1368))(*(void *)(*(void *)(v6 + 48) + 16)) & 1) == 0)
  {
    uint64_t result = (WTF::AtomStringImpl *)[objc_loadWeak((id *)(*(void *)(*(void *)(v6 + 48) + 16) + 16)) mediaStyle];
    if (result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t result = (WTF::AtomStringImpl *)[0 mediaStyle];
    if (result)
    {
LABEL_7:
      uint64_t result = (WTF::AtomStringImpl *)WTF::AtomStringImpl::add((uint64_t *)&v10, result, v8);
      int v9 = v10;
LABEL_8:
      *a2 = v9;
      return result;
    }
  }
  int v9 = (_DWORD *)*MEMORY[0x1E4F30968];
  if (!*MEMORY[0x1E4F30968]) {
    goto LABEL_8;
  }
  *v9 += 2;
  *a2 = v9;
  return result;
}

WebCore::DOMWrapperWorld *WebFrameLoaderClient::dispatchDidClearWindowObjectInWorld(WebFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 2);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    goto LABEL_6;
  }
  int v7 = *(WebView **)(v6 + 8);
  if (!v7) {
    goto LABEL_7;
  }
  this = (WebFrameLoaderClient *)(*(uint64_t (**)(void))(**((void **)v7->super.viewContext.invalidateGStateCallback
                                                                      + 2)
                                                                   + 1368))(*((void *)v7->super.viewContext.invalidateGStateCallback
                                                                              + 2));
  if ((this & 1) == 0)
  {
    this = (WebFrameLoaderClient *)objc_loadWeak((id *)(*((void *)v7->super.viewContext.invalidateGStateCallback + 2)
                                                      + 16));
    int v7 = (WebView *)this;
    if (this)
    {
      CFStringRef v8 = (uint64_t *)(*((void *)this + 10) + 416);
      if (*(void *)(*((void *)this + 10) + 432)) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else
  {
LABEL_6:
    int v7 = 0;
  }
LABEL_7:
  CFStringRef v8 = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  if (qword_1EAD7FED0)
  {
LABEL_8:
    int v9 = (objc_selector *)*((void *)v3 + 2);
    int v10 = +[WebScriptWorld findOrCreateWorld:a2];
    int v11 = [(WebView *)v7 _frameLoadDelegateForwarder];
    return (WebCore::DOMWrapperWorld *)CallDelegate((void (*)(void))v7, v11, (objc_object *)sel_webView_didClearWindowObjectForFrame_inScriptWorld_, v9, v10, v12);
  }
LABEL_13:
  uint64_t result = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(this);
  if (result != a2) {
    return result;
  }
  int v14 = *(WebCore::ScriptController **)(*(void *)(*(void *)(*((void *)v3 + 2) + 8) + 8) + 304);
  if (*v8)
  {
    uint64_t v15 = sel_webView_didCreateJavaScriptContext_forFrame_;
    uint64_t v16 = WebCore::ScriptController::javaScriptContext(v14);
  }
  else
  {
    if (!v8[1])
    {
      int v22 = (void (*)(void))v8[4];
      if (v22)
      {
        uint64_t v23 = (objc_object *)WebCore::ScriptController::windowScriptObject(v14);
        CallFrameLoadDelegate(v22, v7, (objc_selector *)sel_webView_windowScriptObjectAvailable_, v23);
      }
      goto LABEL_20;
    }
    uint64_t v15 = sel_webView_didClearWindowObject_forFrame_;
    uint64_t v16 = WebCore::ScriptController::windowScriptObject(v14);
  }
  __int16 v17 = (objc_selector *)v16;
  uint64_t v18 = (objc_object *)*((void *)v3 + 2);
  uint64_t v19 = [(WebView *)v7 _frameLoadDelegateForwarder];
  CallDelegate((void (*)(void))v7, v19, (objc_object *)v15, v17, v18, v20);
LABEL_20:
  uint64_t result = [(WebView *)v7 scriptDebugDelegate];
  if (result)
  {
    [*((id *)v3 + 2) _detachScriptDebugger];
    long long v21 = (void *)*((void *)v3 + 2);
    return (WebCore::DOMWrapperWorld *)[v21 _attachScriptDebugger];
  }
  return result;
}

uint64_t WebFrameLoaderClient::createNetworkingContext@<X0>(WebFrameLoaderClient *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + ++*(_DWORD *)(this - 8) = 1;
  *(void *)uint64_t v5 = &unk_1F3C7AAC8;
  if (!v4)
  {
    uint64_t result = 0;
    goto LABEL_11;
  }
  uint64_t result = *(void *)(v4 + 16);
  if (result) {
    goto LABEL_9;
  }
  uint64_t result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + ++*(_DWORD *)(this - 8) = v4;
  CFStringRef v8 = *(unsigned int **)(v4 + 16);
  *(void *)(v4 + 16) = result;
  if (!v8) {
    goto LABEL_9;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
    uint64_t result = *(void *)(v4 + 16);
    if (!result) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t result = *(void *)(v4 + 16);
  if (result) {
LABEL_9:
  }
    atomic_fetch_add((atomic_uint *volatile)result, 1u);
LABEL_11:
  *(void *)(v5 + 16) = result;
  *(void *)uint64_t v5 = &unk_1F3C7CD90;
  *a2 = v5;
  return result;
}

void sub_1E13D981C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::shouldLoadMediaElementURL(WebFrameLoaderClient *this, const WTF::URL *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3 || (uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8)) == 0)
  {
LABEL_6:
    Weaint k = 0;
    uint64_t v7 = [0 policyDelegate];
    if (!v7) {
      return 1;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5)
  {
    Weaint k = 0;
LABEL_9:
    uint64_t v7 = [Weak policyDelegate];
    if (!v7) {
      return 1;
    }
    goto LABEL_10;
  }
  Weaint k = *(void **)(v5 + 8);
  if (!Weak) {
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(void, const WTF::URL *))(**(void **)(Weak[6] + 16) + 1368))(*(void *)(Weak[6] + 16), a2))goto LABEL_6; {
  Weaint k = objc_loadWeak((id *)(*(void *)(Weak[6] + 16) + 16));
  }
  uint64_t v7 = [Weak policyDelegate];
  if (!v7) {
    return 1;
  }
LABEL_10:
  CFStringRef v8 = (void *)v7;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 1;
  }
  uint64_t v9 = WTF::URL::operator NSURL *();
  uint64_t v10 = *((void *)this + 2);
  return [v8 webView:Weak shouldLoadMediaURL:v9 inFrame:v10];
}

const void *WebFrameLoaderClient::createPreviewLoaderClient@<X0>(id *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, uint64_t *a4@<X8>)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(this[2], "webView"), "preferences"), "quickLookDocumentSavingEnabled");
  if (!result) {
    goto LABEL_9;
  }
  if (!*(void *)a2)
  {
    uint64_t result = (const void *)WebCore::createTemporaryFileForQuickLook((WebCore *)&stru_1F3C7DA90, v9);
    if (result) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = (WebCore *)WTF::StringImpl::operator NSString *();
  uint64_t result = (const void *)WebCore::createTemporaryFileForQuickLook(v10, v11);
  if (!result) {
    goto LABEL_9;
  }
LABEL_4:
  int v12 = result;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v13 + ++*(_DWORD *)(this - 8) = 1;
  *(void *)uint64_t v13 = &unk_1F3C7AB28;
  *(void *)(v13 + 16) = v12;
  CFRetain(v12);
  int v14 = (const void *)[MEMORY[0x1E4F28CB0] fileHandleForWritingAtPath:v12];
  *(void *)(v13 + 24) = v14;
  if (v14) {
    CFRetain(v14);
  }
  v17[0] = v12;
  v16[0] = WebQuickLookFileNameKey;
  v16[1] = WebQuickLookUTIKey;
  if (*(void *)a3) {
    uint64_t v15 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v15 = &stru_1F3C7DA90;
  }
  v17[1] = v15;
  objc_msgSend((id)objc_msgSend(this[2], "provisionalDataSource"), "_setQuickLookContent:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  uint64_t result = (const void *)objc_msgSend((id)objc_msgSend(this[2], "provisionalDataSource"), "_setQuickLookPreviewLoaderClient:", v13);
LABEL_12:
  *a4 = v13;
  return result;
}

void sub_1E13D9AD0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13D9AE4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = (const void *)*((void *)v2 + 2);
  *((void *)v2 + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13D9B08(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    _Unwind_Resume(exception_object);
  }
  --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::contentFilterDidBlockLoad(uint64_t a1, long long *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 8) + 280) + 24);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)long long v21 = v4;
  long long v22 = v5;
  long long v23 = a2[2];
  *((_DWORD *)a2 + 4) = v5 & 0xFFFFFFFE;
  uint64_t v6 = (long long *)*((void *)a2 + 9);
  if (!v6)
  {
    int v25 = 0;
    goto LABEL_5;
  }
  if (v6 != a2 + 3)
  {
    int v25 = (void *)*((void *)a2 + 9);
    *((void *)a2 + 9) = 0;
LABEL_5:
    uint64_t v7 = (WTF::StringImpl *)v4;
    goto LABEL_7;
  }
  int v25 = v24;
  (*(void (**)(long long *, void *))(*(void *)v6 + 24))(v6, v24);
  uint64_t v7 = v21[0];
LABEL_7:
  CFStringRef v8 = (const void *)*((void *)a2 + 10);
  *((void *)a2 + 10) = 0;
  char v27 = *((unsigned char *)a2 + 88);
  CFTypeRef cf = v8;
  uint64_t v9 = *(WTF::StringImpl **)(v3 + 32);
  *(void *)(v3 + 32) = v7;
  if (!v9) {
    goto LABEL_10;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_10:
    uint64_t v10 = *(WTF::StringImpl **)(v3 + 40);
    *(WTF::StringImpl **)(v3 + 40) = v21[1];
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v9, (StringImpl *)a2);
  uint64_t v10 = *(WTF::StringImpl **)(v3 + 40);
  *(WTF::StringImpl **)(v3 + 40) = v21[1];
  if (!v10) {
    goto LABEL_16;
  }
LABEL_13:
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, (StringImpl *)a2);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
LABEL_16:
  *(_OWORD *)(v3 + 4++*(_DWORD *)(this - 8) = v22;
  *(_OWORD *)(v3 + 64) = v23;
  uint64_t v11 = v3 + 80;
  uint64_t v12 = *(void *)(v3 + 104);
  *(void *)(v3 + 104) = 0;
  if (v12 == v3 + 80)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 32))(v3 + 80);
    uint64_t v13 = v25;
    if (v25) {
      goto LABEL_20;
    }
LABEL_24:
    CFTypeRef v16 = cf;
    CFTypeRef cf = 0;
    uint64_t v15 = *(const void **)(v3 + 112);
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 112) = v16;
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  uint64_t v13 = v25;
  if (!v25) {
    goto LABEL_24;
  }
LABEL_20:
  if (v13 == v24)
  {
    *(void *)(v3 + 104) = v11;
    (*(void (**)(void *, uint64_t))(v24[0] + 24))(v24, v3 + 80);
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    uint64_t v15 = *(const void **)(v3 + 112);
    *(void *)(v3 + 112) = v19;
    if (!v15) {
      goto LABEL_31;
    }
LABEL_25:
    CFRelease(v15);
    CFTypeRef v17 = cf;
    *(unsigned char *)(v3 + 120) = v27;
    CFTypeRef cf = 0;
    if (v17) {
      CFRelease(v17);
    }
    uint64_t v18 = v25;
    if (v25 == v24) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  *(void *)(v3 + 104) = v13;
  CFTypeRef v14 = cf;
  int v25 = 0;
  CFTypeRef cf = 0;
  uint64_t v15 = *(const void **)(v3 + 112);
  *(void *)(v3 + 112) = v14;
  if (v15) {
    goto LABEL_25;
  }
LABEL_31:
  *(unsigned char *)(v3 + 120) = v27;
  CFTypeRef cf = 0;
  uint64_t v18 = v25;
  if (v25 == v24)
  {
LABEL_32:
    (*(void (**)(void *))(v24[0] + 32))(v24);
    return 0;
  }
LABEL_28:
  if (v18) {
    (*(void (**)(void *))(*v18 + 40))(v18);
  }
  return 0;
}

uint64_t WebFrameLoaderClient::prefetchDNS(WebFrameLoaderClient *this, const WTF::String *a2)
{
  return MEMORY[0x1F416CC38](a2);
}

uint64_t WebFrameLoaderClient::getLoadDecisionForIcons(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void **)(result + 16);
  if (v3) {
    uint64_t v3 = *(void **)(v3[1] + 8);
  }
  if ((*(unsigned char *)(v3[17] + 689) & 0x80) != 0
    && *(void **)(v3[16] + 8) == v3
    && (uint64_t result = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(v3[35] + 88) + 872)),
        (*(unsigned char *)(result + 8) & 2) != 0)
    && (uint64_t result = +[WebView _isIconLoadingEnabled], (result & 1) != 0))
  {
    uint64_t v4 = *(unsigned int *)(a2 + 12);
    if (v4)
    {
      uint64_t v5 = 16 * v4;
      uint64_t v6 = *(void *)a2 + 8;
      do
      {
        v6 += 16;
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v11 = &unk_1F3C7ABE0;
        uint64_t v13 = v11;
        WebCore::DocumentLoader::didGetLoadDecisionForIcon();
        uint64_t result = (uint64_t)v13;
        if (v13) {
          uint64_t result = (*(uint64_t (**)(void *))(*v13 + 8))(v13);
        }
        v5 -= 16;
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = 16 * v7;
      uint64_t v9 = *(void *)a2 + 8;
      do
      {
        v9 += 16;
        uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v10 = &unk_1F3C7ABB8;
        uint64_t v12 = v10;
        WebCore::DocumentLoader::didGetLoadDecisionForIcon();
        uint64_t result = (uint64_t)v12;
        if (v12) {
          uint64_t result = (*(uint64_t (**)(void *))(*v12 + 8))(v12);
        }
        v8 -= 16;
      }
      while (v8);
    }
  }
  return result;
}

void sub_1E13DA078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DA1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DA3EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a15, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E13DA56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DA5A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1E13DA7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DA940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DAAB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DAC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DAF5C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DB370(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DB66C(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DB854(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DBB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    CFRelease(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DBE28(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(_DWORD **)(v9 - 40);
  *(void *)(v9 - 40) = 0;
  if (v11)
  {
    if (v11[6] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 24))(v11);
    }
    else {
      --v11[6];
    }
  }
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)&a9, a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v9 - 240), v12);
  _Unwind_Resume(a1);
}

void sub_1E13DBEA0(_Unwind_Exception *a1, StringImpl *a2)
{
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v2 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_1E13DC1AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a12, a2);
  uint64_t v16 = *(void *)(v13 - 24);
  *(void *)(v13 - 24) = 0;
  if (v16) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v15);
  }
  _Unwind_Resume(a1);
}

void sub_1E13DC4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DC63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, _DWORD *a10)
{
  if (a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 8))(a9);
    }
    else {
      --a9[2];
    }
  }
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DC81C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13DC834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFRelease(v10);
  if (v9) {
    CFRelease(v9);
  }
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E13DCA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 2) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)a9 + 8))(a9);
    }
    else {
      --*((_DWORD *)a9 + 2);
    }
  }
  uint64_t v11 = *(_DWORD **)(v9 - 24);
  *(void *)(v9 - 24) = 0;
  if (v11)
  {
    if (v11[2] != 1)
    {
      --v11[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DCBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vectorForDictationPhrasesArray@<X0>(NSArray *a1@<X0>, unsigned int *a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t result = [(NSArray *)a1 countByEnumeratingWithState:&v51 objects:v56 count:16];
  uint64_t v4 = result;
  if (result)
  {
    uint64_t v42 = 0;
    BOOL v43 = v2;
    unsigned int v5 = 0;
    uint64_t v6 = *(void *)v52;
    int v37 = (char *)&v50 + 4;
    uint64_t v38 = *(void *)v52;
    unint64_t v7 = 0x1E4F29000uLL;
    do
    {
      uint64_t v8 = 0;
      uint64_t v39 = v4;
      do
      {
        if (*(void *)v52 != v6) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void **)(*((void *)&v51 + 1) + 8 * v8);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          if (v5 == v2[2])
          {
            unint64_t v11 = WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v5 + 1, (unint64_t)&v49);
            uint64_t v12 = (WTF *)v2[3];
            uint64_t v42 = *(void *)v2;
            uint64_t v13 = *(void *)v2 + 16 * (void)v12;
            *(void *)uint64_t v13 = 0;
            *(void *)(v13 + ++*(_DWORD *)(this - 8) = 0;
            uint64_t v14 = *(void *)v11;
            *(void *)unint64_t v11 = 0;
            *(void *)uint64_t v13 = v14;
            LODWORD(v14) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + ++*(_DWORD *)(this - 8) = 0;
            *(_DWORD *)(v13 + ++*(_DWORD *)(this - 8) = v14;
            uint64_t v15 = (char *)(v11 + 12);
          }
          else
          {
            uint64_t v13 = v42 + 16 * v5;
            *(void *)uint64_t v13 = 0;
            *(void *)(v13 + ++*(_DWORD *)(this - 8) = 0;
            uint64_t v12 = v49;
            unsigned int v49 = 0;
            *(void *)uint64_t v13 = v12;
            LODWORD(v12) = v50;
            LODWORD(v50) = 0;
            *(_DWORD *)(v13 + ++*(_DWORD *)(this - 8) = v12;
            LODWORD(v12) = v2[3];
            uint64_t v15 = v37;
          }
          int v16 = *(_DWORD *)v15;
          *(_DWORD *)uint64_t v15 = 0;
          *(_DWORD *)(v13 + 12) = v16;
          unsigned int v17 = v12 + 1;
          v2[3] = v12 + 1;
          if (HIDWORD(v50))
          {
            uint64_t v18 = v49;
            uint64_t v19 = 8 * HIDWORD(v50);
            do
            {
              uint64_t v20 = *(WTF::StringImpl **)v18;
              *(void *)uint64_t v18 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2) {
                  WTF::StringImpl::destroy(v20, v10);
                }
                else {
                  *(_DWORD *)v20 -= 2;
                }
              }
              uint64_t v18 = (WTF *)((char *)v18 + 8);
              v19 -= 8;
            }
            while (v19);
          }
          long long v21 = v49;
          if (v49)
          {
            unsigned int v49 = 0;
            LODWORD(v50) = 0;
            WTF::fastFree(v21, v10);
          }
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          uint64_t v22 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v55, 16, v37);
          if (v22)
          {
            uint64_t v23 = *(void *)v46;
            uint64_t v41 = v8;
            uint64_t v42 = *(void *)v2;
            if (v17)
            {
              uint64_t v24 = *(void *)v2 + 16 * v17 - 16;
              unsigned int v44 = v17;
              do
              {
                for (uint64_t i = 0; i != v22; ++i)
                {
                  if (*(void *)v46 != v23) {
                    objc_enumerationMutation(v9);
                  }
                  uint64_t v27 = *(void *)(*((void *)&v45 + 1) + 8 * i);
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    unint64_t v28 = v7;
                    unint64_t v29 = *(unsigned int *)(v24 + 12);
                    if (v29 == *(_DWORD *)(v24 + 8))
                    {
                      unint64_t v30 = v29 + (v29 >> 2);
                      if (v30 >= 0x10) {
                        unint64_t v31 = v30 + 1;
                      }
                      else {
                        unint64_t v31 = 16;
                      }
                      if (v31 <= v29 + 1) {
                        unint64_t v32 = v29 + 1;
                      }
                      else {
                        unint64_t v32 = v31;
                      }
                      if (v32 >> 29) {
                        goto LABEL_56;
                      }
                      CFTypeRef v33 = *(void **)v24;
                      char v34 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
                      *(_DWORD *)(v24 + ++*(_DWORD *)(this - 8) = v32;
                      *(void *)uint64_t v24 = v34;
                      memcpy(v34, v33, 8 * v29);
                      if (v33)
                      {
                        if (*(void **)v24 == v33)
                        {
                          *(void *)uint64_t v24 = 0;
                          *(_DWORD *)(v24 + ++*(_DWORD *)(this - 8) = 0;
                        }
                        WTF::fastFree((WTF *)v33, v35);
                      }
                      uint64_t v26 = *(void *)v24 + 8 * *(unsigned int *)(v24 + 12);
                    }
                    else
                    {
                      uint64_t v26 = *(void *)v24 + 8 * v29;
                    }
                    MEMORY[0x1E4E442D0](v26, v27);
                    ++*(_DWORD *)(v24 + 12);
                    uint64_t v2 = v43;
                    unint64_t v7 = v28;
                    unsigned int v17 = v44;
                  }
                }
                uint64_t v22 = [v9 countByEnumeratingWithState:&v45 objects:v55 count:16];
              }
              while (v22);
              unsigned int v5 = v17;
              uint64_t v6 = v38;
            }
            else
            {
              do
              {
                for (uint64_t j = 0; j != v22; ++j)
                {
                  if (*(void *)v46 != v23) {
                    objc_enumerationMutation(v9);
                  }
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
LABEL_56:
                    __break(0xC471u);
                    JUMPOUT(0x1E13DD1C0);
                  }
                }
                uint64_t v22 = [v9 countByEnumeratingWithState:&v45 objects:v55 count:16];
              }
              while (v22);
              unsigned int v5 = 0;
            }
            uint64_t v4 = v39;
            uint64_t v8 = v41;
          }
          else
          {
            unsigned int v5 = v17;
            uint64_t v4 = v39;
          }
        }
        ++v8;
      }
      while (v8 != v4);
      uint64_t result = [(NSArray *)a1 countByEnumeratingWithState:&v51 objects:v56 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_1E13DD1D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  unint64_t v28 = *(WTF **)v26;
  if (*(void *)v26)
  {
    *(void *)uint64_t v26 = 0;
    *(_DWORD *)(v26 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v28, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF::StringImpl ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      uint64_t v6 = *((unsigned int *)v4 + 3);
      if (v6)
      {
        unint64_t v7 = *(WTF::StringImpl ***)v4;
        uint64_t v8 = 8 * v6;
        do
        {
          uint64_t v9 = *v7;
          WTF *v7 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, a2);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      uint64_t v10 = *(WTF **)v4;
      if (*(void *)v4)
      {
        *(void *)uint64_t v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v10, a2);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1E13DD5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1E13DD7B0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13DD988(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      CFRelease(v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a14 -= 2;
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t createUniqueWebDataURL(void)
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v1 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  CFStringRef v2 = CFUUIDCreateString(v0, v1);
  uint64_t v3 = [MEMORY[0x1E4F1CB10] URLWithString:objc_msgSend(NSString, "stringWithFormat:", @"applewebdata://%@", v2)];
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v3;
}

void sub_1E13DDAC0(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1E13DDC8C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13DE020(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DE49C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13DE630(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *(WTF::StringImpl **)(v3 - 24);
  *(void *)(v3 - 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v5 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DE874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DE888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DE89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DE8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DE8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DE8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DEB6C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 2)
    {
      *(_DWORD *)a10 -= 2;
      MEMORY[0x1E4E43B10](&a12);
      CFRelease(v12);
      _Unwind_Resume(a1);
    }
    WTF::StringImpl::destroy(a10, a2);
    MEMORY[0x1E4E43B10](&a12);
    CFRelease(v12);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1E4E43B10](&a12);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_1E13DEBFC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13DEC10(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13DECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DEDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13DF1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13DF1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1E13DF56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v4 - 64));
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DF588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DF59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E13DF5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E13DF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v7 - 64));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DF5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DF6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13DF7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13DF89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DF9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E13DFC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a16);
  if (v18)
  {
    a17 = 0;
    a18 = 0;
    WTF::fastFree(v18, v20);
  }
  _Unwind_Resume(a1);
}

void sub_1E13DFD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DFECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13DFF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::MutableStyleProperties *a10)
{
  if (a10) {
    WebCore::MutableStyleProperties::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E0064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((WebCore::MutableStyleProperties **)va);
  _Unwind_Resume(a1);
}

WebCore::MutableStyleProperties **WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(WebCore::MutableStyleProperties **a1)
{
  CFStringRef v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::MutableStyleProperties::~MutableStyleProperties(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1E13E01D0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E0298(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13E02AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::fastFree(v10, a2);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&a10, v12);
  _Unwind_Resume(a1);
}

void sub_1E13E02C8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13E041C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a10 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E0710(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::optional<WebCore::SimpleRange>::~optional(&a22);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v22 - 80));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v22 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0758(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 80));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v2 - 56));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E08AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E09BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E0AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0AE0(_Unwind_Exception *a1)
{
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0E14(_Unwind_Exception *a1)
{
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E0E28(_Unwind_Exception *a1)
{
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1E13E1528(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E16B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a10 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E18F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E1A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E1B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E1CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1E13E1CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13E1DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E1EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E2094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E2238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_1E13E2254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13E2268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v14 - 40));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a14);
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

void sub_1E13E2378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E254C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E2620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E27B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va5, a2);
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  uint64_t v7 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v8 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v10 = va_arg(va4, void);
  uint64_t v12 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v13 = va_arg(va5, void);
  uint64_t v15 = va_arg(va5, void);
  uint64_t v16 = va_arg(va5, void);
  uint64_t v17 = va_arg(va5, void);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va5);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va3);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_1E13E28F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13E2BC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(&a9, a2);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  uint64_t v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, StringImpl *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        uint64_t v6 = *(WTF::StringImpl **)v5;
        if (*(void *)v5 != -1)
        {
          uint64_t v7 = *(WTF **)(v5 + 8);
          if (v7)
          {
            *(void *)(v5 + ++*(_DWORD *)(this - 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            WTF::fastFree(v7, a2);
            uint64_t v6 = *(WTF::StringImpl **)v5;
          }
          *(void *)uint64_t v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, a2);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    uint64_t v6 = (uint64_t *)((char *)v4 + 16);
    do
    {
      uint64_t v8 = *v6;
      v6 += 4;
      uint64_t v7 = v8;
      if ((v8 & 0x8000000000000) != 0)
      {
        uint64_t v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v5 -= 32;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1E13E2FA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13E2FBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13E2FD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(&a9, a2);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  uint64_t v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13E3144(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E3228(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E3370(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13E3718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(atomic_uint ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      while (1)
      {
        uint64_t v6 = *v4;
        *uint64_t v4 = 0;
        if (v6)
        {
          if (atomic_fetch_add(v6, 0xFFFFFFFF) == 1) {
            break;
          }
        }
        ++v4;
        v5 -= 8;
        if (!v5) {
          goto LABEL_8;
        }
      }
      atomic_store(1u, (unsigned int *)v6);
      WTF::fastFree((WTF *)v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
LABEL_8:
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1E13E397C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13E3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13E3AF0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E3C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1E13E3EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v13);
      std::optional<WebCore::SimpleRange>::~optional(&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    std::optional<WebCore::SimpleRange>::~optional(&a12);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1E13E4A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v13);
      std::optional<WebCore::SimpleRange>::~optional(&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    std::optional<WebCore::SimpleRange>::~optional(&a12);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1E13E4D30(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E5060(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  MEMORY[0x1E4E43B10](&a11);
  if ((v12 & 1) == 0) {
    CFRelease(v11);
  }
  _Unwind_Resume(a1);
}

void sub_1E13E524C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E5334(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E57D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v13);
      std::optional<WebCore::SimpleRange>::~optional(&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    std::optional<WebCore::SimpleRange>::~optional(&a12);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1E13E59A8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E5C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, WebCore::Node *a11, uint64_t a12, uint64_t a13)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL WebCore::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WebCore::Node **)a1;
  if (*(void *)a1) {
    *((_DWORD *)v2 + 7) += 2;
  }
  uint64_t v14 = v2;
  int v15 = *(_DWORD *)(a1 + 8);
  unsigned __int8 v16 = *(unsigned char *)(a1 + 12);
  uint64_t v3 = *(WebCore::Node **)a2;
  if (*(void *)a2) {
    *((_DWORD *)v3 + 7) += 2;
  }
  unint64_t v11 = v3;
  int v12 = *(_DWORD *)(a2 + 8);
  unsigned __int8 v13 = *(unsigned char *)(a2 + 12);
  if (v2 != v3)
  {
    BOOL v4 = 0;
    unint64_t v11 = 0;
    if (!v3) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  if ((v16 & 8) == 0 && ((int v5 = v16 & 7, v5 == 2) || v5 == 4))
  {
    int v6 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v14);
    unsigned __int8 v7 = v13;
    if ((v13 & 8) != 0) {
      goto LABEL_18;
    }
  }
  else
  {
    int v6 = v15;
    unsigned __int8 v7 = v13;
    if ((v13 & 8) != 0) {
      goto LABEL_18;
    }
  }
  int v8 = v7 & 7;
  if (v8 != 2 && v8 != 4)
  {
LABEL_18:
    if (v6 != v12) {
      goto LABEL_19;
    }
LABEL_17:
    BOOL v4 = ((v13 ^ v16) & 7) == 0;
    goto LABEL_20;
  }
  if (v6 == WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v11)) {
    goto LABEL_17;
  }
LABEL_19:
  BOOL v4 = 0;
LABEL_20:
  uint64_t v3 = v11;
  unint64_t v11 = 0;
  if (!v3) {
    goto LABEL_25;
  }
LABEL_21:
  if (*((_DWORD *)v3 + 7) == 2)
  {
    if ((*((_WORD *)v3 + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(v3);
    }
  }
  else
  {
    *((_DWORD *)v3 + 7) -= 2;
  }
LABEL_25:
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (!v9) {
    return v4;
  }
  if (*((_DWORD *)v9 + 7) != 2)
  {
    *((_DWORD *)v9 + 7) -= 2;
    return v4;
  }
  if ((*((_WORD *)v9 + 17) & 0x400) != 0) {
    return v4;
  }
  WebCore::Node::removedLastRef(v9);
  return v4;
}

void sub_1E13E5E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1E13E5F64(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E6280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 28) == 2)
  {
    if ((*(_WORD *)(v10 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    *(_DWORD *)(v10 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E6444(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E678C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49)
{
  if (a49)
  {
    if (*(_DWORD *)a49 == 2)
    {
      WTF::StringImpl::destroy(a49, a2);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v49 - 232), v51);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a49 -= 2;
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v49 - 232), a2);
    _Unwind_Resume(a1);
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v49 - 232), a2);
  _Unwind_Resume(a1);
}

void sub_1E13E6EFC(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CFTypeRef a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x280]))
  {
    unint64_t v71 = (const void *)STACK[0x278];
    STACK[0x278] = 0;
    if (v71) {
      CFRelease(v71);
    }
  }
  WTF::Box<WebCore::NetworkLoadMetrics>::~Box(v69, a2);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap(v68, v72);
  unint64_t v74 = (WTF::StringImpl *)STACK[0x248];
  STACK[0x248] = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2) {
      WTF::StringImpl::destroy(v74, v73);
    }
    else {
      *(_DWORD *)v74 -= 2;
    }
  }
  int v75 = (WTF::StringImpl *)STACK[0x240];
  STACK[0x240] = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2) {
      WTF::StringImpl::destroy(v75, v73);
    }
    else {
      *(_DWORD *)v75 -= 2;
    }
  }
  __int32 v76 = (WTF::StringImpl *)STACK[0x238];
  STACK[0x238] = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2) {
      WTF::StringImpl::destroy(v76, v73);
    }
    else {
      *(_DWORD *)v76 -= 2;
    }
  }
  uint64_t v77 = (WTF::StringImpl *)STACK[0x228];
  STACK[0x228] = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2) {
      WTF::StringImpl::destroy(v77, v73);
    }
    else {
      *(_DWORD *)v77 -= 2;
    }
  }
  int v78 = (WTF::StringImpl *)STACK[0x200];
  STACK[0x200] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2) {
      WTF::StringImpl::destroy(v78, v73);
    }
    else {
      *(_DWORD *)v78 -= 2;
    }
  }
  int v79 = a68;
  a68 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2) {
      WTF::StringImpl::destroy(v79, v73);
    }
    else {
      *(_DWORD *)v79 -= 2;
    }
  }
  int8x16_t v80 = a67;
  a67 = 0;
  if (v80) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v80, v73);
  }
  int v81 = (WTF::StringImpl *)STACK[0x308];
  STACK[0x308] = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2) {
      WTF::StringImpl::destroy(v81, v73);
    }
    else {
      *(_DWORD *)v81 -= 2;
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, v73);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)&a10, v82);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&a42, v83);
  _Unwind_Resume(a1);
}

void sub_1E13E71DC()
{
  CFAllocatorRef v0 = (_DWORD *)STACK[0x308];
  STACK[0x308] = 0;
  if (v0)
  {
    if (*v0 == 2) {
      JUMPOUT(0x1E13E71F8);
    }
    JUMPOUT(0x1E13E71A0);
  }
  JUMPOUT(0x1E13E71D4);
}

void WebCore::ResourceResponse::~ResourceResponse(WebCore::ResourceResponse *this, StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
}

void sub_1E13E7480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E7600(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E7A9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E7E50(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E8064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13E827C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13E8700(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if ((a9 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalFrameLoaderClient::hasCustomUserAgent(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::LocalFrameLoaderClient::overrideContentSecurityPolicy(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebFrameLoaderClient::accessibilityRemoteObject(WebFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebFrameLoaderClient::accessibilityRemoteFrameOffset(WebFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::dataDetectionReferenceDate(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowScript(WebCore::LocalFrameLoaderClient *this, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isEmptyFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::hasFrameSpecificStorageAccess(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::LocalFrameLoaderClient::loadedSubresourceDomains(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebCore::LocalFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldUsePDFPlugin()
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

WebCore::SubstituteData *WebCore::SubstituteData::SubstituteData(WebCore::SubstituteData *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = 0;
  WTF::URL::invalidate((WebCore::SubstituteData *)((char *)this + 8));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::SubstituteData *)((char *)this + 48));
  *((void *)this + 36) = 0;
  *((unsigned char *)this + 296) = 0;
  *((unsigned char *)this + 186) = *((unsigned char *)this + 186) & 0xF1 | 4;
  *((unsigned char *)this + 304) = 1;
  return this;
}

void sub_1E13E9E18(_Unwind_Exception *a1, StringImpl *a2)
{
  BOOL v4 = v3;
  WTF::URL::~URL(v4, a2);
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
  }
  _Unwind_Resume(a1);
}

void WebCore::SubstituteData::~SubstituteData(WebCore::SubstituteData *this, StringImpl *a2)
{
  uint64_t v3 = (WebCore::SubstituteData *)((char *)this + 48);
  BOOL v4 = (const void *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  int v6 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      uint64_t v7 = *(void *)this;
      *(void *)this = 0;
      if (!v7) {
        return;
      }
      goto LABEL_9;
    }
    *(_DWORD *)v6 -= 2;
  }
  uint64_t v7 = *(void *)this;
  *(void *)this = 0;
  if (!v7) {
    return;
  }
LABEL_9:
  if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7);
    uint64_t v8 = *(unsigned int *)(v7 + 20);
    if (v8)
    {
      uint64_t v9 = 16 * v8;
      uint64_t v10 = (unsigned int **)(*(void *)(v7 + 8) + 8);
      do
      {
        unint64_t v11 = *v10;
        *uint64_t v10 = 0;
        if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
        {
          uint64_t v15 = v9;
          unsigned __int8 v16 = v10;
          atomic_store(1u, v11);
          uint64_t v17 = (WTF *)v11;
          uint64_t v12 = v11[6];
          if (v12 != -1) {
            ((void (*)(char *, unsigned int *))off_1F3C7AB60[v12])(&v18, v11 + 2);
          }
          *((_DWORD *)v17 + 6) = -1;
          WTF::fastFree(v17, v5);
          uint64_t v9 = v15;
          uint64_t v10 = v16;
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    unsigned __int8 v13 = *(WTF **)(v7 + 8);
    if ((WTF *)(v7 + 24) != v13 && v13 != 0)
    {
      *(void *)(v7 + ++*(_DWORD *)(this - 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      WTF::fastFree(v13, v5);
    }
    WTF::fastFree((WTF *)v7, v5);
  }
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(unsigned int *a1, StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    int v5 = (WTF::StringImpl **)(*(void *)a1 + 8);
    do
    {
      int v6 = *v5;
      StringImpl *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCachedFramePlatformData::~WebCachedFramePlatformData(WebCachedFramePlatformData *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1F3C7A8D0;
  *((void *)this + 1) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WebCachedFramePlatformData::~WebCachedFramePlatformData(WebCachedFramePlatformData *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1F3C7A8D0;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::fastFree(this, a2);
}

id WebCachedFramePlatformData::clear(id *this)
{
  return objc_msgSend(this[1], sel_closeIfNotCurrentView);
}

void PluginWidget::~PluginWidget(PluginWidget *this)
{
  WebCore::Widget::~Widget(this);
  WTF::fastFree(v1, v2);
}

uint64_t PluginWidget::invalidateRect(WebCore::Widget *a1)
{
  uint64_t v1 = (void *)WebCore::Widget::platformWidget(a1);
  WebCore::IntRect::operator CGRect();
  return objc_msgSend(v1, "setNeedsDisplayInRect:");
}

uint64_t WebCore::Widget::setParentVisible(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return this;
}

uint64_t WebCore::Widget::isLocalFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isRemoteFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::isPluginViewBase(WebCore::PluginViewBase *this)
{
  return 1;
}

uint64_t WebCore::Widget::isScrollbar(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isScrollView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::transformsAffectFrameRect(WebCore::Widget *this)
{
  return 1;
}

uint64_t WebCore::Widget::accessibilityHitTest(WebCore::Widget *this, const IntPoint *a2)
{
  return 0;
}

uint64_t WebCore::Widget::accessibilityObject(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::layerHostingStrategy(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::platformLayer(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::graphicsLayer(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scroll()
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scrollPositionForTesting(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::horizontalScrollbar(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::verticalScrollbar(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::wantsWheelEvents(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::shouldAllowNavigationFromDrags(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scrollableArea(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::usesAsyncScrolling(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scrollingNodeID(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::accessibilityAssociatedPluginParentForElement(WebCore::PluginViewBase *this, Element *a2)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::sendEditingCommandToPDFForTesting(WebCore::PluginViewBase *this, const WTF::String *a2, const WTF::String *a3)
{
  return 0;
}

void WebCore::PluginViewBase::pdfAnnotationRectsForTesting(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a2 + 48);
  *(void *)(a2 + 4++*(_DWORD *)(this - 8) = 0;
  if (!v4)
  {
LABEL_6:
    int v5 = *(WTF::StringImpl **)(a2 + 8);
    *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, (StringImpl *)a2);
  int v5 = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  if (!v5) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, (StringImpl *)a2);
    uint64_t result = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (!result) {
    return result;
  }
LABEL_14:
  if (*(_DWORD *)result == 2)
  {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
  }
  else
  {
    *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::FrameNetworkingContext::isValid(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  return v1 && *(void *)(v1 + 8) != 0;
}

BOOL WebCore::FrameNetworkingContext::shouldClearReferrerOnHTTPSToHTTPRedirect(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  return !v1
      || (uint64_t v2 = *(void *)(v1 + 8)) == 0
      || (*(unsigned int (**)(void))(*(void *)(*(void *)(v2 + 296) + 208) + 8))() == 2;
}

uint64_t WebCore::NetworkingContext::scheduledRunLoopPairs(WebCore::NetworkingContext *this)
{
  return 0;
}

void WebCore::NetworkingContext::sourceApplicationIdentifier(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

void *WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::~QuickLookDocumentWriter(void *a1)
{
  *a1 = &unk_1F3C7AB28;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "_web_removeFileOnlyAtPath:", a1[2]);
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_1E13EA478(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v3)
  {
    CFRelease(v3);
    uint64_t v4 = *(const void **)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v4 = *(const void **)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    if (!v4) {
      goto LABEL_3;
    }
  }
  CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::~QuickLookDocumentWriter(void *a1)
{
  uint64_t v1 = (WTF *)WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::~QuickLookDocumentWriter(a1);
  return WTF::fastFree(v1, v2);
}

void WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::didReceiveData(uint64_t a1, WebCore::FragmentedSharedBuffer *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  WebCore::FragmentedSharedBuffer::createNSDataArray((uint64_t *)&cf, this);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v3 = (void *)cf;
  uint64_t v4 = [(id)cf countByEnumeratingWithState:&v8 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 24) writeData:*(void *)(*((void *)&v8 + 1) + 8 * v6++)];
      }
      while (v4 != v6);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v13 count:16];
    }
    while (v4);
  }
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1E13EA5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf)
{
  if (!cf) {
    _Unwind_Resume(exception_object);
  }
  CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::didFinishLoading(uint64_t a1)
{
  return [*(id *)(a1 + 24) closeFile];
}

uint64_t WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::didFail(uint64_t a1)
{
  return [*(id *)(a1 + 24) closeFile];
}

uint64_t WebCore::LegacyPreviewLoaderClient::supportsPasswordEntry(WebCore::LegacyPreviewLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LegacyPreviewLoaderClient::didRequestPassword(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)*a2 + 16))(*a2, MEMORY[0x1E4F30980]);
}

uint64_t WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v5 += 2;
  }
  *(void *)a1 = v5;
  long long v6 = *(_OWORD *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this - 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  WTF::URL::invalidate((WTF::URL *)(a1 + 40));
  *(void *)(a1 + ++*(_DWORD *)(this + 80) = *MEMORY[0x1E4FB64E0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)(a1 + 8++*(_DWORD *)(this - 8) = v9;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 96));
  *(void *)(a1 + 12++*(_DWORD *)(this - 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = a3;
  *(_DWORD *)(a1 + 145) = 67109120;
  return a1;
}

void sub_1E13EA714(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v5 = v2[11];
  v2[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WTF::URL::~URL(v3, a2);
  WTF::URL::~URL(v2, v6);
  _Unwind_Resume(a1);
}

void sub_1E13EA75C(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v5 = *v3;
  *uint64_t v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      WTF::URL::~URL(v2, v6);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v5 -= 2;
  }
  WTF::URL::~URL(v2, a2);
  _Unwind_Resume(a1);
}

void *WTF::Box<WebCore::NetworkLoadMetrics>::~Box(void *result, StringImpl *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(_DWORD **)(v3 + 128);
    *(void *)(v3 + 12++*(_DWORD *)(this - 8) = 0;
    if (v4) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4, a2);
    }
    uint64_t v5 = *(WTF::StringImpl **)(v3 + 96);
    *(void *)(v3 + 96) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        WTF::fastFree((WTF *)v3, a2);
        return v2;
      }
      WTF::StringImpl::destroy(v5, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(uint64_t this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = this;
    atomic_store(1u, (unsigned int *)this);
    uint64_t v3 = *(unsigned int *)(this + 20);
    if (v3)
    {
      uint64_t v4 = 16 * v3;
      uint64_t v5 = (unsigned int **)(*(void *)(this + 8) + 8);
      do
      {
        long long v6 = *v5;
        WTF::StringImpl *v5 = 0;
        if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
        {
          uint64_t v10 = v4;
          long long v11 = v5;
          atomic_store(1u, v6);
          uint64_t v12 = (WTF *)v6;
          uint64_t v7 = v6[6];
          if (v7 != -1) {
            ((void (*)(char *, unsigned int *))off_1F3C7AB60[v7])(&v13, v6 + 2);
          }
          *((_DWORD *)v12 + 6) = -1;
          WTF::fastFree(v12, a2);
          uint64_t v4 = v10;
          uint64_t v5 = v11;
        }
        v5 += 2;
        v4 -= 16;
      }
      while (v4);
    }
    long long v8 = *(WTF **)(v2 + 8);
    if ((WTF *)(v2 + 24) != v8 && v8 != 0)
    {
      *(void *)(v2 + ++*(_DWORD *)(this - 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebFrameLoaderClient::dispatchWillSubmitForm(WebCore::FormState &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F3C7AB90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebFrameLoaderClient::dispatchWillSubmitForm(WebCore::FormState &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1F3C7AB90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebFrameLoaderClient::dispatchWillSubmitForm(WebCore::FormState &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this - 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
  return v2(v1);
}

void sub_1E13EAAB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v4 + 16 * v5);
        uint64_t v9 = v4;
        do
        {
          *(void *)unint64_t v7 = 0;
          *((void *)v7 + 1) = 0;
          unint64_t v10 = *(WTF::StringImpl ***)v9;
          *(void *)uint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          void v7[2] = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[3] = v10;
          uint64_t v11 = *((unsigned int *)v9 + 3);
          if (v11)
          {
            uint64_t v12 = *(WTF::StringImpl ***)v9;
            uint64_t v13 = 8 * v11;
            do
            {
              uint64_t v14 = *v12;
              WTF *v12 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2) {
                  WTF::StringImpl::destroy(v14, v6);
                }
                else {
                  *(_DWORD *)v14 -= 2;
                }
              }
              ++v12;
              v13 -= 8;
            }
            while (v13);
          }
          uint64_t result = *(unsigned int **)v9;
          if (*(void *)v9)
          {
            *(void *)uint64_t v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v7 += 4;
          uint64_t v9 = (WTF *)((char *)v9 + 16);
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void sub_1E13EAE18(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *((void *)v2 + 1);
  if (!v4)
  {
    *((void *)v2 + 1) = 0;
    WTF::fastFree(v2, a2);
    _Unwind_Resume(a1);
  }
  *(void *)(v4 + ++*(_DWORD *)(this - 8) = 0;
  uint64_t v5 = (unsigned int *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      WTF::fastFree(v2, v6);
      _Unwind_Resume(a1);
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::MutableStyleProperties *WebCore::MutableStyleProperties::deref(WebCore::MutableStyleProperties *this)
{
  if (*(_DWORD *)this == 1)
  {
    WebCore::MutableStyleProperties::~MutableStyleProperties(this);
    return (WebCore::MutableStyleProperties *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void *WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(void *result, void *a2)
{
  unsigned int v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(unsigned int *)(v3 + 20);
    if (v4)
    {
      uint64_t v5 = 16 * v4;
      uint64_t v6 = (unsigned int **)(*(void *)(v3 + 8) + 8);
      do
      {
        unint64_t v7 = *v6;
        void *v6 = 0;
        if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
        {
          uint64_t v11 = v5;
          uint64_t v12 = v6;
          atomic_store(1u, v7);
          uint64_t v13 = (WTF *)v7;
          uint64_t v8 = v7[6];
          if (v8 != -1) {
            ((void (*)(char *, unsigned int *))off_1F3C7AB60[v8])(&v14, v7 + 2);
          }
          *((_DWORD *)v13 + 6) = -1;
          WTF::fastFree(v13, a2);
          uint64_t v5 = v11;
          uint64_t v6 = v12;
        }
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
    }
    uint64_t v9 = *(WTF **)(v3 + 8);
    if ((WTF *)(v3 + 24) != v9 && v9 != 0)
    {
      *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 40 * v3;
    uint64_t v6 = (char *)v4 + 32;
    while (1)
    {
      if (*v6
        && (uint64_t v7 = *((void *)v6 - 1), (v7 & 0x8000000000000) != 0)
        && (uint64_t v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL),
            atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1))
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
        if (*(v6 - 16))
        {
LABEL_8:
          uint64_t v9 = *((void *)v6 - 3);
          if ((v9 & 0x8000000000000) != 0)
          {
            unint64_t v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, a2);
            }
          }
        }
      }
      else if (*(v6 - 16))
      {
        goto LABEL_8;
      }
      v6 += 40;
      v5 -= 40;
      if (!v5)
      {
        uint64_t v4 = *(WTF **)a1;
        break;
      }
    }
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1E13EB534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13EBC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EBD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EBE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EBF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EC070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13ECA20(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void hardwareKeyboardAvailabilityChangedCallback(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  id location = 0;
  objc_initWeak(&location, a2);
  id v5 = 0;
  objc_copyWeak(&v5, &location);
  WebThreadRun();
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_1E13ECAD8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E13ECAF4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1E13ECBEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13ECE88(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13ECF88(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13ED114(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13ED2C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EDE94(_Unwind_Exception *a1)
{
}

void sub_1E13EE020(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13EE034(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13EE0C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EE3A4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13EE3B8(_Unwind_Exception *a1, StringImpl *a2, WebCore::WindowProxy *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    WTF::RefCounted<WebCore::WindowProxy>::deref(a3);
  }
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E13EE3DC(_Unwind_Exception *exception_object)
{
}

void sub_1E13EE3E8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
      _Unwind_Resume(exception_object);
    }
    --v1[4];
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1E13EE3E0);
}

void sub_1E13EE9B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  *(unsigned char *)(*(void *)(v11 + 8) + 274) = v10;
  if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v11);
    WTF::fastFree((WTF *)v11, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13EEADC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13EEAF0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13EEBA4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E13EEE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::EditingStyle,WTF::RawPtrTraits<WebCore::EditingStyle>,WTF::DefaultRefDerefTraits<WebCore::EditingStyle>>::~Ref((WebCore::EditingStyle **)va);
  _Unwind_Resume(a1);
}

void sub_1E13EEE18(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::EditingStyle **WTF::Ref<WebCore::EditingStyle,WTF::RawPtrTraits<WebCore::EditingStyle>,WTF::DefaultRefDerefTraits<WebCore::EditingStyle>>::~Ref(WebCore::EditingStyle **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::EditingStyle::~EditingStyle(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1E13EFA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13EFE4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(&a9, a2);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  unsigned __int8 v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1E13F0294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    (*(void (**)(WTF::StringImpl *))(*(void *)a14 + 8))(a14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::KeypressCommand::~KeypressCommand(WebCore::KeypressCommand *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      uint64_t v4 = *(WTF::StringImpl **)this;
      *(void *)this = 0;
      if (!v4) {
        return;
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  uint64_t v4 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (!v4) {
    return;
  }
LABEL_7:
  if (*(_DWORD *)v4 == 2) {
    WTF::StringImpl::destroy(v4, a2);
  }
  else {
    *(_DWORD *)v4 -= 2;
  }
}

void sub_1E13F07C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F08B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2) {
      JUMPOUT(0x1E13F08D4);
    }
    JUMPOUT(0x1E13F081CLL);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12 + 8);
  _Unwind_Resume(a1);
}

void sub_1E13F08E8(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1E13F0A90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9) {
    _Unwind_Resume(exception_object);
  }
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1E13F0ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  objc_end_catch();
  WTF::Ref<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E13F0ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1E13F0F20);
}

void sub_1E13F135C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  unsigned __int8 v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E13F15BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9) {
    _Unwind_Resume(exception_object);
  }
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1E13F16EC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F17D0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F1AE0(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

JSC::Debugger *WebScriptDebugger::WebScriptDebugger(JSC::Debugger *a1, uint64_t a2)
{
  uint64_t v4 = JSC::Debugger::Debugger();
  *(void *)uint64_t v4 = &unk_1F3C7AC40;
  *(unsigned char *)(v4 + 232) = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  unint64_t v6 = *(void *)(v5 + 728);
  if (!v6)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 688));
    unint64_t v6 = *(void *)(v5 + 728);
  }
  *(void *)(v5 + 72++*(_DWORD *)(this - 8) = *(void *)v6;
  *(void *)(v6 + 16) = 0;
  *(void *)unint64_t v6 = 0;
  *(void *)(v6 + ++*(_DWORD *)(this - 8) = 0;
  *((void *)a1 + 30) = v6 + 16;
  if (!*(void *)(v6 + 16))
  {
    uint64_t v7 = *(unint64_t **)((v6 & 0xFFFFFFFFFFFFF000) + 0x10);
    unint64_t v8 = v7[3];
    v7 += 3;
    *(void *)unint64_t v6 = v8;
    *(void *)(v6 + ++*(_DWORD *)(this - 8) = v7;
    unint64_t *v7 = v6;
    *(void *)(v8 + ++*(_DWORD *)(this - 8) = v6;
  }
  *(void *)(v6 + 16) = a2;
  JSC::Breakpoint::create();
  uint64_t v10 = *((void *)a1 + 19);
  *((void *)a1 + 19) = v12;
  if (v10) {
    WTF::RefCounted<JSC::Breakpoint>::deref(v10, v9);
  }
  JSC::Debugger::setBreakpointsActivated(a1);
  JSC::Debugger::attach();
  return a1;
}

void sub_1E13F1CAC(_Unwind_Exception *a1)
{
  JSC::Debugger::~Debugger(v1);
  _Unwind_Resume(a1);
}

void sub_1E13F1CC0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)va, a2);
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(v4);
  JSC::Debugger::~Debugger(v3);
  _Unwind_Resume(a1);
}

void sub_1E13F1CE4(_Unwind_Exception *a1)
{
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(v2);
  JSC::Debugger::~Debugger(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = (WTF::StringImpl **)(*(void *)a1 + 8);
    do
    {
      unint64_t v6 = *v5;
      void *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = (uint64_t *)(v1 - 16);
    uint64_t v3 = *(void *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    uint64_t v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      uint64_t v5 = *v2;
      *uint64_t v4 = *v2;
      *(void *)(v5 + ++*(_DWORD *)(this - 8) = v4;
      *uint64_t v2 = 0;
      v2[1] = 0;
    }
    *uint64_t v2 = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = v2;
    *uint64_t result = 0;
  }
  return result;
}

void WebScriptDebugger::sourceParsed(uint64_t a1, uint64_t a2, JSC::SourceProvider *a3, uint64_t a4, uint64_t a5)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 232))
  {
    *(unsigned char *)(a1 + 232) = 1;
    (*(void (**)(JSC::SourceProvider *))(*(void *)a3 + 24))(a3);
    if ((v9 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    uint64_t v11 = v36;
    if (!v36)
    {
      uint64_t v12 = 0;
      goto LABEL_12;
    }
    if (*((_DWORD *)v36 + 1))
    {
      uint64_t v12 = WTF::StringImpl::operator NSString *();
      uint64_t v11 = v36;
      int v13 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 != 2)
      {
LABEL_8:
        *(_DWORD *)uint64_t v11 = v13;
LABEL_12:
        uint64_t v35 = v12;
        char v14 = (void *)WTF::URL::operator NSURL *();
        int v15 = *((_DWORD *)a3 + 26);
        unsigned __int8 v16 = (WebCore::JSDOMWindowBase *)JSC::VM::deprecatedVMEntryGlobalObject();
        uint64_t v17 = WebCore::JSDOMWindowBase::wrapped(v16);
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 104))(v17);
        if (!v18
          || *(unsigned char *)(v18 + 144)
          || (uint64_t v19 = *(void **)(*(void *)(v18 + 280) + 16),
              ((*(uint64_t (**)(void *))(*v19 + 1072))(v19) & 1) != 0))
        {
          uint64_t v20 = 0;
        }
        else
        {
          uint64_t v20 = (void *)v19[2];
        }
        uint64_t v21 = [v20 webView];
        uint64_t v22 = v21;
        if (v21)
        {
          uint64_t v23 = (char *)(*(void *)(v21 + 80) + 656);
          int v24 = v15 + 1;
          if (a4 != -1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v23 = &WebViewGetScriptDebugDelegateImplementations(WebView *)::empty;
          int v24 = v15 + 1;
          if (a4 != -1)
          {
LABEL_18:
            if (*(void *)a5 && *(_DWORD *)(*(void *)a5 + 4))
            {
              v37[0] = @"WebScriptErrorDescription";
              v37[1] = @"WebScriptErrorLineNumber";
              v38[0] = WTF::StringImpl::operator NSString *();
              v38[1] = [NSNumber numberWithInt:a4];
              uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:2];
            }
            else
            {
              uint64_t v39 = @"WebScriptErrorLineNumber";
              v40[0] = [NSNumber numberWithInt:a4];
              uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:&v39 count:1];
            }
            uint64_t v26 = (const void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"WebScriptErrorDomain" code:-100 userInfo:v25];
            uint64_t v27 = (void (*)(uint64_t, char *, uint64_t, uint64_t, void, void *, const void *, void *))*((void *)v23 + 2);
            if (v27)
            {
              uint64_t v28 = *(void *)(*(void *)(v22 + 80) + 112);
              if (v28) {
                v27(v28, sel_webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_, v22, v35, v24, v14, v26, v20);
              }
            }
            if (v26) {
              CFRelease(v26);
            }
LABEL_39:
            *(unsigned char *)(a1 + 232) = 0;
            return;
          }
        }
        unint64_t v29 = (void (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, void, void *))*((void *)v23 + 1);
        if (v29)
        {
          if (*v23)
          {
            unsigned int v30 = *((_DWORD *)a3 + 28);
            if (!v30)
            {
              JSC::SourceProvider::getID(a3);
              unsigned int v30 = *((_DWORD *)a3 + 28);
            }
            uint64_t v31 = *(void *)(*(void *)(v22 + 80) + 112);
            if (v31) {
              ((void (*)(uint64_t, char *, uint64_t, uint64_t, void, void *, void, void *))v29)(v31, sel_webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_, v22, v35, v24, v14, v30, v20);
            }
          }
          else
          {
            uint64_t v32 = [v14 absoluteString];
            unsigned int v33 = *((_DWORD *)a3 + 28);
            if (!v33)
            {
              JSC::SourceProvider::getID(a3);
              unsigned int v33 = *((_DWORD *)a3 + 28);
            }
            uint64_t v34 = *(void *)(*(void *)(v22 + 80) + 112);
            if (v34) {
              v29(v34, sel_webView_didParseSource_fromURL_sourceId_forWebFrame_, v22, v35, v32, v33, v20);
            }
          }
        }
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 != 2) {
        goto LABEL_8;
      }
    }
    WTF::StringImpl::destroy(v11, v10);
    goto LABEL_12;
  }
}

void sub_1E13F21B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a2 == 1)
  {
    uint64_t v12 = (objc_object *)objc_begin_catch(exception_object);
    ReportDiscardedDelegateException(v11, v12);
    objc_end_catch();
    JUMPOUT(0x1E13F2170);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebScriptDebugger::handlePause(WTF::StringImpl *result, WebCore::JSDOMWindowBase *this, int a3)
{
  if (a3 != 1) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  if (*((unsigned char *)result + 232)) {
    return result;
  }
  *((unsigned char *)result + 232) = 1;
  uint64_t v4 = WebCore::JSDOMWindowBase::wrapped(this);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  if (!v5
    || *(unsigned char *)(v5 + 144)
    || (unint64_t v6 = *(void **)(*(void *)(v5 + 280) + 16),
        ((*(uint64_t (**)(void *))(*v6 + 1072))(v6) & 1) != 0))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (void *)v6[2];
  }
  uint64_t v8 = [v7 webView];
  uint64_t v9 = (unsigned int *)JSC::Debugger::currentDebuggerCallFrame((JSC::Debugger *)v3);
  uint64_t v10 = *(void *)(v3 + 56);
  JSC::DebuggerCallFrame::functionName();
  uint64_t v11 = [WebScriptCallFrame alloc];
  uint64_t v12 = WebCore::ScriptController::windowScriptObject(*(WebCore::ScriptController **)(*(void *)(v7[1] + 8) + 304));
  int v13 = v25;
  if (v25) {
    *(_DWORD *)v25 += 2;
  }
  int v24 = v13;
  id v15 = [(WebScriptCallFrame *)v11 _initWithGlobalObject:v12 functionName:&v24 exceptionValue:v10];
  unsigned __int8 v16 = v24;
  int v24 = 0;
  if (!v16)
  {
LABEL_12:
    if (v8) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v16, v14);
  if (v8)
  {
LABEL_13:
    uint64_t v17 = (char *)(*(void *)(v8 + 80) + 656);
    uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t, id, void, void, void *))(*(void *)(v8 + 80) + 680);
    if (!v18) {
      goto LABEL_22;
    }
LABEL_17:
    if (v17[1])
    {
      unsigned int v19 = *(unsigned __int16 *)(v3 + 48);
      unsigned int v20 = JSC::DebuggerCallFrame::sourceID((JSC::DebuggerCallFrame *)v9);
      uint64_t v21 = *(void *)(*(void *)(v8 + 80) + 112);
      if (v21) {
        ((void (*)(uint64_t, char *, uint64_t, id, void, void, void, void *, WTF::StringImpl *))v18)(v21, sel_webView_exceptionWasRaised_hasHandler_sourceId_line_forWebFrame_, v8, v15, (v19 >> 7) & 1, v20, v9[6], v7, v24);
      }
    }
    else
    {
      unsigned int v22 = JSC::DebuggerCallFrame::sourceID((JSC::DebuggerCallFrame *)v9);
      uint64_t v23 = *(void *)(*(void *)(v8 + 80) + 112);
      if (v23) {
        v18(v23, sel_webView_exceptionWasRaised_sourceId_line_forWebFrame_, v8, v15, v22, v9[6], v7);
      }
    }
    goto LABEL_22;
  }
LABEL_16:
  uint64_t v17 = &WebViewGetScriptDebugDelegateImplementations(WebView *)::empty;
  uint64_t v18 = (void (*)(uint64_t, char *, uint64_t, id, void, void, void *))qword_1EAD7FFC8;
  if (qword_1EAD7FFC8) {
    goto LABEL_17;
  }
LABEL_22:
  *(unsigned char *)(v3 + 232) = 0;
  if (v15) {
    CFRelease(v15);
  }
  uint64_t result = v25;
  uint64_t v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1E13F2984(_Unwind_Exception *exception_object, void *a2)
{
  if (*(_DWORD *)v2 == 1)
  {
    WTF::fastFree(v2, a2);
    _Unwind_Resume(exception_object);
  }
  --*(_DWORD *)v2;
  _Unwind_Resume(exception_object);
}

void sub_1E13F2A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10)
{
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD **WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*v2 != 1)
  {
    --*v2;
    return a1;
  }
  uint64_t v4 = (WTF *)MEMORY[0x1E4E45A10]();
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1E13F2D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E13F2FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1E13F2FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void WebScriptDebugger::~WebScriptDebugger(WebScriptDebugger *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(v1 - 16);
    uint64_t v3 = *(void *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    uint64_t v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      uint64_t v5 = *v2;
      *uint64_t v4 = *v2;
      *(void *)(v5 + ++*(_DWORD *)(this - 8) = v4;
      *uint64_t v2 = 0;
      v2[1] = 0;
    }
    *uint64_t v2 = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = v2;
    *((void *)this + 30) = 0;
  }
  JSC::Debugger::~Debugger((JSC::Debugger *)this);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  uint64_t v1 = *((void *)this + 30);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(v1 - 16);
    uint64_t v3 = *(void *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    uint64_t v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      uint64_t v5 = *v2;
      *uint64_t v4 = *v2;
      *(void *)(v5 + ++*(_DWORD *)(this - 8) = v4;
      *uint64_t v2 = 0;
      v2[1] = 0;
    }
    *uint64_t v2 = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = v2;
    *((void *)this + 30) = 0;
  }
  JSC::Debugger::~Debugger((JSC::Debugger *)this);
  WTF::fastFree(v6, v7);
}

uint64_t JSC::Debugger::isContentScript()
{
  return 0;
}

void ___ZL43hardwareKeyboardAvailabilityChangedCallbackP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    uint64_t v3 = [WeakRetained _frame];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
      if (v4) {
        WebCore::EventHandler::capsLockStateMayHaveChanged(*(WebCore::EventHandler **)(v4 + 624));
      }
    }
    CFRelease(v2);
  }
}

void sub_1E13F30F8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c38_ZTSN3WTF11WeakObjCPtrI11WebHTMLViewEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c38_ZTSN3WTF11WeakObjCPtrI11WebHTMLViewEE(uint64_t a1)
{
}

uint64_t *createSelectorExceptionMap(void)
{
  CFAllocatorRef v0 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  uint64_t *v0 = 0;
  uint64_t v3 = "InsertNewline";
  uint64_t v4 = 14;
  uint64_t v5 = sel_insertNewlineIgnoringFieldEditor_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  uint64_t v4 = 14;
  uint64_t v5 = sel_insertParagraphSeparator_;
  uint64_t v3 = "InsertNewline";
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  uint64_t v3 = "InsertTab";
  uint64_t v4 = 10;
  uint64_t v5 = sel_insertTabIgnoringFieldEditor_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  uint64_t v3 = "MovePageDown";
  uint64_t v4 = 13;
  uint64_t v5 = sel_pageDown_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  uint64_t v3 = "MovePageDownAndModifySelection";
  uint64_t v4 = 31;
  uint64_t v5 = sel_pageDownAndModifySelection_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  uint64_t v3 = "MovePageUp";
  uint64_t v4 = 11;
  uint64_t v5 = sel_pageUp_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  uint64_t v3 = "MovePageUpAndModifySelection";
  uint64_t v4 = 29;
  uint64_t v5 = sel_pageUpAndModifySelection_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  return v0;
}

uint64_t *WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(a2, 8u, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = ~(*a3 << 32) + *a3;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned __int8 v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *unsigned __int8 v16 = v11;
    uint64_t v20 = *(void *)(a4 + 8);
    if (v20)
    {
      a2 = (uint64_t *)(v20 - 1);
      if (v20 == 1)
      {
        uint64_t v27 = MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        uint64_t result = (uint64_t *)v16[1];
        v16[1] = v27;
        if (!result) {
          goto LABEL_21;
        }
        goto LABEL_16;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v20 = v28;
    }
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = v20;
    if (!result) {
      goto LABEL_21;
    }
LABEL_16:
    if (*(_DWORD *)result == 2) {
      uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
LABEL_21:
    if (*v6)
    {
      ++*(_DWORD *)(*v6 - 12);
      uint64_t v22 = *v6;
      if (*v6) {
        goto LABEL_23;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v22 = *v6;
      if (*v6)
      {
LABEL_23:
        uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
        unint64_t v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400) {
          goto LABEL_24;
        }
        goto LABEL_30;
      }
    }
    uint64_t v23 = *(unsigned int *)(v22 - 16);
    unint64_t v24 = *(unsigned int *)(v22 - 4);
    if (v24 <= 0x400)
    {
LABEL_24:
      if (3 * v24 > 4 * v23)
      {
LABEL_33:
        uint64_t v25 = v22 + 16 * v24;
        char v26 = 1;
        goto LABEL_38;
      }
      if (!v24)
      {
        uint64_t result = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(v6, 8u, v16);
        unsigned __int8 v16 = result;
        uint64_t v22 = *v6;
        if (!*v6)
        {
LABEL_27:
          unint64_t v24 = 0;
          goto LABEL_33;
        }
LABEL_32:
        unint64_t v24 = *(unsigned int *)(v22 - 4);
        goto LABEL_33;
      }
LABEL_31:
      uint64_t result = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(v6, v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), v16);
      unsigned __int8 v16 = result;
      uint64_t v22 = *v6;
      if (!*v6) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
LABEL_30:
    if (v24 > 2 * v23) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    unsigned __int8 v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        uint64_t *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v11 = *a3;
        unsigned __int8 v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v8 - 4);
  }
  char v26 = 0;
  uint64_t v25 = v8 + 16 * v21;
LABEL_38:
  uint64_t *v7 = (uint64_t)v16;
  v7[1] = v25;
  *((unsigned char *)v7 + 16) = v26;
  return result;
}

uint64_t *WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          char v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (WTF::StringImpl *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v10);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this - 8) = 0;
          v26[1] = v29;
          unsigned int v30 = *(WTF::StringImpl **)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this - 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          unsigned __int8 v16 = *(WTF::StringImpl **)(v15 + 8);
          *(void *)(v15 + ++*(_DWORD *)(this - 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v10);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WebCore::Editor::Command::~Command(WebCore::Editor::Command *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(v2 + 8);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v5 = &unk_1F3C797F0;
      v5[1] = v3;
      uint64_t v6 = v5;
      WTF::ensureOnMainThread();
      if (v6) {
        (*(void (**)(void *))(*v6 + 8))(v6);
      }
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }
}

void sub_1E13F37F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(WebCore::PlatformKeyboardEvent *this, StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = (WTF::StringImpl *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (!v5) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (!v6)
  {
LABEL_16:
    int v7 = (WTF::StringImpl *)*((void *)this + 8);
    *((void *)this + ++*(_DWORD *)(this - 8) = 0;
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_14:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v6, a2);
  int v7 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this - 8) = 0;
  if (!v7) {
    goto LABEL_21;
  }
LABEL_19:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, a2);
    int v8 = (WTF::StringImpl *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (!v8) {
      return;
    }
    goto LABEL_24;
  }
  *(_DWORD *)v7 -= 2;
LABEL_21:
  int v8 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (!v8) {
    return;
  }
LABEL_24:
  if (*(_DWORD *)v8 == 2) {
    WTF::StringImpl::destroy(v8, a2);
  }
  else {
    *(_DWORD *)v8 -= 2;
  }
}

unint64_t WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (unsigned int **)((char *)v4 + 16 * v5);
        uint64_t v9 = (unsigned int **)v4;
        while (1)
        {
          unint64_t v10 = *v9;
          *uint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          unint64_t v11 = v9[1];
          v9[1] = 0;
          *((void *)v7 + 1) = v11;
          unint64_t v12 = (WTF::StringImpl *)v9[1];
          v9[1] = 0;
          if (!v12) {
            goto LABEL_10;
          }
          if (*(_DWORD *)v12 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v12, v6);
          uint64_t result = *v9;
          *uint64_t v9 = 0;
          if (result)
          {
LABEL_13:
            if (*result == 2) {
              uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
LABEL_6:
          v9 += 2;
          v7 += 4;
          if (v9 == v8) {
            goto LABEL_15;
          }
        }
        *(_DWORD *)v12 -= 2;
LABEL_10:
        uint64_t result = *v9;
        *uint64_t v9 = 0;
        if (result) {
          goto LABEL_13;
        }
        goto LABEL_6;
      }
LABEL_15:
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::RefCounted<JSC::Breakpoint>::deref(uint64_t this, StringImpl *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  uint64_t v3 = *(unsigned int *)(this + 52);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = (WTF::StringImpl **)(*(void *)(this + 40) + 8);
    do
    {
      uint64_t v6 = *v5;
      WTF::StringImpl *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  unint64_t v7 = *(WTF **)(v2 + 40);
  if (v7)
  {
    *(void *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 4++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v7, a2);
  }
  unint64_t v8 = *(WTF::StringImpl **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      uint64_t v9 = (WTF *)v2;
      return WTF::fastFree(v9, a2);
    }
    *(_DWORD *)v8 -= 2;
  }
  uint64_t v9 = (WTF *)v2;
  return WTF::fastFree(v9, a2);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WebScriptWorld *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WebScriptWorld *>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WebScriptWorld *,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebScriptWorld *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v10 = (WTF **)(v4 + 16 * i);
      unint64_t v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ~(*((void *)v11 + 1) << 32) + *((void *)v11 + 1);
          unint64_t v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          unint64_t v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          unsigned int v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~(v16 << 27)));
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          unint64_t v21 = (void *)(v12 + 16 * v19);
          void *v21 = 0;
          long long v22 = *(_OWORD *)v10;
          *unint64_t v10 = 0;
          *(_OWORD *)unint64_t v21 = v22;
          int v23 = *v10;
          *unint64_t v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1) {
              WTF::fastFree(v23, v8);
            }
            else {
              --*(_DWORD *)v23;
            }
          }
        }
        else
        {
          *unint64_t v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void sub_1E13F4464(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(a10 + 8), a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F47BC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F4BD4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebCore::UserScript *a9)
{
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a9, a2);
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100]((WebCore::UserScript **)(v9 - 48), v11);
  _Unwind_Resume(a1);
}

void sub_1E13F4BF0(_Unwind_Exception *a1, StringImpl *a2)
{
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100]((WebCore::UserScript **)(v2 - 48), a2);
  _Unwind_Resume(a1);
}

void sub_1E13F4C04(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14)
{
  unsigned int v17 = *(WTF::StringImpl **)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::fastFree(v14, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v19);
  unint64_t v21 = a14;
  a14 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t createLaBanquePostaleQuirksScript(void *a1)
{
  uint64_t v3 = 0;
  uint64_t result = objc_msgSend([NSString alloc], "initWithContentsOfURL:usedEncoding:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleForClass:", objc_opt_class()), "URLForResource:withExtension:", @"LaBanquePostaleQuirks", @"js"), &v3, 0);
  *a1 = result;
  return result;
}

WebCore::UserScript **std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](WebCore::UserScript **a1, StringImpl *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::UserScript::~UserScript(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

void sub_1E13F6704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,CFTypeRef cf,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,WTF::StringImpl *a46,int a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,WTF::StringImpl *a58)
{
  uint64_t v60 = *(void *)(v58 - 112);
  *(void *)(v58 - 112) = 0;
  if (v60)
  {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::~optional(uint64_t a1, StringImpl *a2)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return a1;
  }
  uint64_t v3 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

WebViewGroup **WTF::Ref<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>::~Ref(WebViewGroup **a1, StringImpl *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebViewGroup::~WebViewGroup(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

id **WTF::UniqueRef<WebChromeClientIOS>::~UniqueRef(id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    objc_destroyWeak(v2 + 2);
    WebCore::ChromeClient::~ChromeClient((WebCore::ChromeClient *)v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

WebCore::DummyModelPlayerProvider **WTF::UniqueRef<WebCore::DummyModelPlayerProvider>::~UniqueRef(WebCore::DummyModelPlayerProvider **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::DummyModelPlayerProvider::~DummyModelPlayerProvider(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

WTF **WTF::UniqueRef<WebCore::DummyStorageProvider>::~UniqueRef(WTF **a1, StringImpl *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 2);
    *((void *)v3 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, a2);
        int v5 = (unsigned int *)*((void *)v3 + 1);
        *((void *)v3 + 1) = 0;
        if (!v5)
        {
LABEL_10:
          WTF::fastFree(v3, a2);
          return a1;
        }
LABEL_8:
        if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
        }
        goto LABEL_10;
      }
      *(_DWORD *)v4 -= 2;
    }
    int v5 = (unsigned int *)*((void *)v3 + 1);
    *((void *)v3 + 1) = 0;
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  return a1;
}

WTF **WTF::UniqueRef<WebCore::DummySpeechRecognitionProvider>::~UniqueRef(WTF **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    uint64_t v4 = (_DWORD *)*((void *)v3 + 1);
    *((void *)v3 + 1) = 0;
    if (v4)
    {
      if (v4[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      }
      else {
        --v4[2];
      }
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebEditorClient **WTF::UniqueRef<WebEditorClient>::~UniqueRef(WebEditorClient **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebEditorClient::~WebEditorClient(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

void WebInstallMemoryPressureHandler()
{
  CFAllocatorRef v0 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"WebKitSuppressMemoryPressureHandler");
  if ((v0 & 1) == 0)
  {
    WebCore::registerMemoryReleaseNotifyCallbacks(v0);
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB3A96F8, memory_order_acquire) != -1)
    {
      uint64_t v3 = &v1;
      uint64_t v2 = &v3;
      std::__call_once(&qword_1EB3A96F8, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebInstallMemoryPressureHandler::$_0 &&>>);
    }
  }
}

void sub_1E13F8AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,CFTypeRef cf,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,WTF::StringImpl *a44,int a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,char a56)
{
  uint64_t v58 = *(void *)(v56 - 112);
  *(void *)(v56 - 112) = 0;
  if (v58)
  {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F94B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F95EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1E13F9634(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1E13F9B34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24) {
    WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13F9C24(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1E13FA0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::DragData::~DragData(WebCore::DragData *this, StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 11);
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  uint64_t v4 = *((unsigned int *)this + 11);
  if (!v4) {
    goto LABEL_13;
  }
LABEL_7:
  int v5 = (WTF::StringImpl **)*((void *)this + 4);
  uint64_t v6 = 8 * v4;
  do
  {
    unint64_t v7 = *v5;
    unsigned int *v5 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    ++v5;
    v6 -= 8;
  }
  while (v6);
LABEL_13:
  unint64_t v8 = (WTF *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v8, a2);
  }
}

void sub_1E13FA4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FA774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FA920(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E13FAD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FB4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[4] != 1)
    {
      --a10[4];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FB5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::EditingStyle *a10)
{
  if (a10) {
    WTF::RefCounted<WebCore::EditingStyle>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FBC44(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FBD88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FC1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
    if (!v10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1E13FC504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FCE38(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 != 2)
    {
      *(_DWORD *)a11 -= 2;
      _Unwind_Resume(exception_object);
    }
    WTF::StringImpl::destroy(a11, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::makeVector<WTF::String>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(_DWORD *)(this - 8) = 0;
  uint64_t result = (unsigned int *)[a1 count];
  int v5 = (int)result;
  if (!result) {
    goto LABEL_4;
  }
  if (!((unint64_t)result >> 29))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * (void)result));
    *(_DWORD *)(a2 + ++*(_DWORD *)(this - 8) = v5;
    *(void *)a2 = v6;
LABEL_4:
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v8 = [a1 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (!v8) {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, (StringImpl *)*(unsigned int *)(a2 + 12));
    }
    uint64_t v9 = *(void *)v23;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(a1);
        }
        WTF::makeVectorElement((uint64_t *)&v20, 0, *(const WTF::String **)(*((void *)&v22 + 1) + 8 * i), v7);
        if (v21)
        {
          uint64_t v12 = *(unsigned int *)(a2 + 12);
          if (v12 != *(_DWORD *)(a2 + 8))
          {
            uint64_t v18 = *(void *)a2;
            unsigned int v19 = v20;
            uint64_t v20 = 0;
            *(void *)(v18 + 8 * v12) = v19;
            *(_DWORD *)(a2 + 12) = v12 + 1;
            unsigned int v17 = v20;
            uint64_t v20 = 0;
            if (!v17) {
              continue;
            }
LABEL_17:
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v11);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
            continue;
          }
          int v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v20);
          uint64_t v14 = *(unsigned int *)(a2 + 12);
          uint64_t v15 = *(void *)a2;
          uint64_t v16 = *v13;
          uint64_t *v13 = 0;
          *(void *)(v15 + 8 * v14) = v16;
          LODWORD(v15) = v21;
          *(_DWORD *)(a2 + 12) = v14 + 1;
          if (v15)
          {
            unsigned int v17 = v20;
            uint64_t v20 = 0;
            if (v17) {
              goto LABEL_17;
            }
          }
        }
      }
      uint64_t v8 = [a1 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (!v8) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, (StringImpl *)*(unsigned int *)(a2 + 12));
      }
    }
  }
  __break(0xC471u);
  return result;
}

void sub_1E13FD0B4(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13FD0C8(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13FD0DC(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13FD0F0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::optional<WTF::String>::~optional((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v11);
  _Unwind_Resume(a1);
}

void sub_1E13FD10C(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13FD120(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E13FE460(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FE5E8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FE924(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WebCore::TextResourceDecoder *a15)
{
  unsigned int v17 = *(WTF::StringImpl **)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(&a15);
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

WebCore::TextResourceDecoder **WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(WebCore::TextResourceDecoder **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::TextResourceDecoder::~TextResourceDecoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1E13FED2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FEEB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E13FF934(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

void sub_1E13FFC24(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 == 1) {
    _Unwind_Resume(exception_object);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(exception_object);
}

void sub_1E13FFFC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (!a13) {
    _Unwind_Resume(exception_object);
  }
  WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

void sub_1E140027C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1E14002A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14002BC(_Unwind_Exception *a1)
{
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1E14002D0(_Unwind_Exception *a1)
{
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1E1400560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    (*(void (**)(WTF::StringImpl *))(*(void *)a14 + 8))(a14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1400638()
{
}

void sub_1E1400A58(_Unwind_Exception *exception_object, StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1E1400D88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1400F60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a12, a2);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E14011BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a12, a2);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E1401634(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WebCore::UserScript *a14, WebViewGroup *a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100]((WebCore::UserScript **)&a9, a2);
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a14, v18);
  WTF::Ref<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>::~Ref(&a15, v19);
  unsigned __int8 v21 = a16;
  a16 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E1401708()
{
}

void sub_1E1401710(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  JUMPOUT(0x1E14016D8);
}

void sub_1E140173C()
{
}

void sub_1E1401A1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::UserScript *a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, WebCore::UserScript *a18, WebViewGroup *a19, WTF::StringImpl *a20,WTF::StringImpl *a21)
{
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a11, a2);
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a18, v22);
  WTF::Ref<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>::~Ref(&a19, v23);
  long long v25 = a20;
  a20 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v24);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v25 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E1401AF0()
{
}

void sub_1E1401AF8(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  JUMPOUT(0x1E1401AC0);
}

void sub_1E1401B24()
{
}

void sub_1E1401CA8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1401E8C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1402028(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1402194(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14022E4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14023CC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1402468(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1402508(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1402F2C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1E1403484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14037D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1403930(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14039BC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1403F94(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1404058(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E14048D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E140529C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1405528(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1405A48(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1405CD8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1406260(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1406B54(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E1406F48(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Ref<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1406F5C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WTF::Ref<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::~Ref(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    uint64_t v4 = *(const void **)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)(v3 + 8);
    *(void *)(v3 + ++*(_DWORD *)(this - 8) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WTF::fastFree((WTF *)v3, a2);
    return v2;
  }
  return result;
}

void sub_1E14070E4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Ref<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E14070F8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1E1407550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16)
{
  std::optional<WebCore::SimpleRange>::~optional(&a16);
  std::optional<WebCore::SimpleRange>::~optional(&a10);
  uint64_t v18 = a15;
  a15 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1E14082B8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1E140849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E140870C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1E1408824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1E14090B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((WebCore::MutableStyleProperties **)va);
  _Unwind_Resume(a1);
}

void sub_1E1409864(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1E1409920(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1409934(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *(const void **)(v3 - 24);
  *(void *)(v3 - 24) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E1409F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E140A8A8(_Unwind_Exception *a1)
{
  std::unique_ptr<WebCore::RunLoopObserver>::~unique_ptr[abi:sn180100](v2);
  std::unique_ptr<WebCore::RunLoopObserver>::~unique_ptr[abi:sn180100](v3);
  WeakPtrBase = (WTF *)WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v1, v5);
  WTF::fastFree(WeakPtrBase, v7);
  _Unwind_Resume(a1);
}

void sub_1E140AAF4(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1E140ACBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E140AE04(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1E140B2EC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

WTF **WTF::Ref<WebCore::GeolocationError,WTF::RawPtrTraits<WebCore::GeolocationError>,WTF::DefaultRefDerefTraits<WebCore::GeolocationError>>::~Ref(WTF **result, StringImpl *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, a2);
          WTF::fastFree(v3, v5);
          return v2;
        }
        *(_DWORD *)v4 -= 2;
      }
      WTF::fastFree(v3, a2);
      return v2;
    }
    --*(_DWORD *)v3;
  }
  return result;
}

void sub_1E140B624(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      WTF::RefCounted<WebCore::Page>::deref(v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
    WTF::RefCounted<WebCore::Page>::deref(v12);
    _Unwind_Resume(a1);
  }
  WTF::RefCounted<WebCore::Page>::deref(v12);
  _Unwind_Resume(a1);
}

void sub_1E140B7B8(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1E140B96C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1E140B984(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    CFRelease(v11);
  }
  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  _Unwind_Resume(a1);
}

WebCore::RunLoopObserver **std::unique_ptr<WebCore::RunLoopObserver>::~unique_ptr[abi:sn180100](WebCore::RunLoopObserver **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

void WebViewRenderingUpdateScheduler::~WebViewRenderingUpdateScheduler(WebViewRenderingUpdateScheduler *this, void *a2)
{
  uint64_t v3 = (WebCore::RunLoopObserver *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v3);
    WTF::fastFree(v4, v5);
  }
  uint64_t v6 = (WebCore::RunLoopObserver *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v6);
    WTF::fastFree(v7, v8);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + ++*(_DWORD *)(this - 8) = 0;
    uint64_t v9 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _willStartRenderingUpdateDisplay];
}

uint64_t ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didCompleteRenderingUpdateDisplay];
}

void WebCore::UserScript::~UserScript(WebCore::UserScript *this, StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 19);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)*((void *)this + 8);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = (WTF *)*((void *)this + 8);
  if (v7)
  {
    *((void *)this + ++*(_DWORD *)(this - 8) = 0;
    *((_DWORD *)this + 1++*(_DWORD *)(this - 8) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((unsigned int *)this + 15);
  if (v8)
  {
    uint64_t v9 = (WTF::StringImpl **)*((void *)this + 6);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      *uint64_t v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, a2);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (WTF *)*((void *)this + 6);
  if (v12)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v12, a2);
  }
  int v13 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, a2);
      uint64_t v14 = *(WTF::StringImpl **)this;
      *(void *)this = 0;
      if (!v14) {
        return;
      }
      goto LABEL_25;
    }
    *(_DWORD *)v13 -= 2;
  }
  uint64_t v14 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (!v14) {
    return;
  }
LABEL_25:
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy(v14, a2);
  }
  else {
    *(_DWORD *)v14 -= 2;
  }
}

uint64_t PageStorageSessionProvider::storageSession(PageStorageSessionProvider *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(WebCore::Page **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (NetworkStorageSessionMap *)WebCore::Page::sessionID(v2);
  return NetworkStorageSessionMap::storageSession(v3, v4);
}

void PageStorageSessionProvider::~PageStorageSessionProvider(PageStorageSessionProvider *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  WTF *v4;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    SessionID v4 = this;
  }
  else
  {
    SessionID v4 = this;
  }
  WTF::fastFree(v4, a2);
}

uint64_t WebCore::CacheStorageProvider::createCacheStorageConnection@<X0>(void *a1@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + ++*(_DWORD *)(this - 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1F3C7AD50;
  *a1 = result;
  return result;
}

void WebCore::CacheStorageProvider::DummyCacheStorageConnection::~DummyCacheStorageConnection(WebCore::CacheStorageProvider::DummyCacheStorageConnection *this, void *a2)
{
  *(void *)this = &unk_1F3C7ADD8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F3C7ADD8;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::open@<X0>(uint64_t *a1@<X8>)
{
  v99[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  long long v85 = 0uLL;
  *(void *)&long long v86 = "open";
  *((void *)&v86 + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + ++*(_DWORD *)(this - 8) = 1;
  *(void *)uint64_t v2 = &unk_1F3C7AE60;
  long long v3 = v86;
  *(_OWORD *)(v2 + 16) = v85;
  *(_OWORD *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 4++*(_DWORD *)(this - 8) = 0;
  uint64_t v4 = v2 + 56;
  *(_DWORD *)(v2 + 8++*(_DWORD *)(this - 8) = 0;
  *(void *)(v2 + 96) = v2 + 112;
  *(void *)(v2 + 104) = 1;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 12++*(_DWORD *)(this - 8) = 0;
  *(_WORD *)(v2 + 136) = 0;
  uint64_t v5 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  uint64_t v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    goto LABEL_72;
  }
  WTF::String::String((WTF::String *)&v94, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v93, v2);
  uint64_t v7 = v93;
  if (v94)
  {
    int v8 = *((_DWORD *)v94 + 1);
    if (v93) {
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = 0;
    if (v93)
    {
LABEL_5:
      int v9 = *((_DWORD *)v93 + 1);
      if ((v9 | v8) < 0) {
        goto LABEL_179;
      }
      goto LABEL_9;
    }
  }
  int v9 = 0;
  if (v8 < 0)
  {
LABEL_179:
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x1E140C8E4);
  }
LABEL_9:
  unint64_t v10 = (v8 + v9);
  if (__OFADD__(v8, v9)) {
    goto LABEL_179;
  }
  if (!v94)
  {
    if (!v93)
    {
      int v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v12 = (*((unsigned __int8 *)v93 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v11 = *((_DWORD *)v94 + 4);
  int v12 = (v11 >> 2) & 1;
  if (v93 && (v11 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v94, (uint64_t)v93, &buf);
  int v87 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_179;
  }
  uint16x8_t v93 = 0;
  if (!v7) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_21:
    uint64_t v14 = v94;
    uint16x8_t v94 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v7, v13);
  uint64_t v14 = v94;
  uint16x8_t v94 = 0;
  if (!v14) {
    goto LABEL_26;
  }
LABEL_24:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v13);
    __int32 v82 = a1;
    uint64_t v15 = *((void *)v6 + 4);
    uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v16) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  *(_DWORD *)v14 -= 2;
LABEL_26:
  __int32 v82 = a1;
  uint64_t v15 = *((void *)v6 + 4);
  uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_29:
  WTF::String::utf8();
  if (v89) {
    uint64_t v18 = (char *)v89 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v18;
  _os_log_impl(&dword_1E1345000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  uint64_t v16 = v89;
  uint8x16_t v89 = 0;
  if (!v16)
  {
LABEL_35:
    if (*v6) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_35;
  }
  uint64_t v16 = (WTF *)WTF::fastFree(v16, v17);
  if (*v6)
  {
LABEL_36:
    if (v6[16] >= 4u)
    {
      unsigned int v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v20 = *v19;
        if (v20) {
          goto LABEL_68;
        }
        int v21 = *v19;
        atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v21 != v20);
      uint64_t v22 = WTF::Logger::observers(v16);
      uint64_t v23 = *(unsigned int *)(v22 + 12);
      if (v23)
      {
        long long v24 = *(uint64_t **)v22;
        uint64_t v25 = *(void *)v22 + 8 * v23;
        while (1)
        {
          uint64_t v26 = *v24;
          LODWORD(buf) = 0;
          WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
          int v96 = 0;
          WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v2);
          uint8x16_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
          LODWORD(v90) = 2;
          uint8x16_t v89 = v27;
          uint64_t v28 = HIDWORD(v90);
          *((_DWORD *)v27 + 4 * HIDWORD(v90)) = buf;
          uint64_t v29 = *((void *)&buf + 1);
          if (*((void *)&buf + 1)) {
            **((_DWORD **)&buf + 1) += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v96;
          unsigned int v30 = v97;
          if (v97) {
            *(_DWORD *)v97 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          HIDWORD(v90) = v28 + 2;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, v6, 4, &v89);
          uint64_t v31 = v89;
          if (HIDWORD(v90))
          {
            uint64_t v32 = 16 * HIDWORD(v90);
            unsigned int v33 = (WTF::StringImpl **)((char *)v89 + 8);
            do
            {
              uint64_t v34 = *v33;
              *unsigned int v33 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2) {
                  WTF::StringImpl::destroy(v34, v17);
                }
                else {
                  *(_DWORD *)v34 -= 2;
                }
              }
              v33 += 2;
              v32 -= 16;
            }
            while (v32);
            uint64_t v31 = v89;
          }
          if (v31)
          {
            uint8x16_t v89 = 0;
            LODWORD(v90) = 0;
            WTF::fastFree(v31, v17);
          }
          uint64_t v35 = v97;
          uint64_t v97 = 0;
          if (!v35) {
            goto LABEL_61;
          }
          if (*(_DWORD *)v35 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v35, v17);
          uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v36)
          {
LABEL_64:
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v17);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
LABEL_43:
          if (++v24 == (uint64_t *)v25) {
            goto LABEL_66;
          }
        }
        *(_DWORD *)v35 -= 2;
LABEL_61:
        uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v36) {
          goto LABEL_64;
        }
        goto LABEL_43;
      }
LABEL_66:
      int v37 = 1;
      atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      uint64_t v4 = v2 + 56;
      if (v37 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_68:
  uint64_t v5 = (unsigned __int8 *)v87;
  int v87 = 0;
  a1 = v82;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      uint64_t v5 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v17);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
LABEL_72:
  char v38 = 0;
  *a1 = v2;
  int v87 = (WTF::StringImpl *)(v2 + 48);
  char v88 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v38, 1u, memory_order_acquire, memory_order_acquire);
  if (v38) {
    uint64_t v5 = (unsigned __int8 *)MEMORY[0x1E4E44220](v2 + 48);
  }
  uint64_t v39 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  int v40 = v39;
  if (!*v39 || v39[16] < 4u)
  {
LABEL_168:
    uint64_t v79 = *(unsigned int *)(v2 + 88);
    if (v79 == -1) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v93, (WTF::Logger::LogSiteIdentifier *)&v85);
  WTF::String::String((WTF::String *)&v92, " rejecting ");
  uint64_t v83 = v4;
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v91, v2);
  uint64_t v41 = (WTF::StringImpl *)v91;
  if (v93)
  {
    int v42 = *((_DWORD *)v93 + 1);
    if (v92) {
      goto LABEL_78;
    }
  }
  else
  {
    int v42 = 0;
    if (v92)
    {
LABEL_78:
      int v43 = *((_DWORD *)v92 + 1);
      if (v91) {
        goto LABEL_79;
      }
      goto LABEL_83;
    }
  }
  int v43 = 0;
  if (v91)
  {
LABEL_79:
    int v44 = *(_DWORD *)(v91 + 4);
    if ((v44 | v43) < 0) {
      goto LABEL_178;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v44 = 0;
  if (v43 < 0)
  {
LABEL_178:
    __break(0xC471u);
    goto LABEL_180;
  }
LABEL_84:
  BOOL v45 = __OFADD__(v43, v44);
  int v46 = v43 + v44;
  char v47 = v45;
  if (v42 < 0) {
    goto LABEL_178;
  }
  if (v47) {
    goto LABEL_178;
  }
  unsigned int v48 = v42 + v46;
  if (__OFADD__(v42, v46)) {
    goto LABEL_178;
  }
  if (v93 && (*((unsigned char *)v93 + 16) & 4) == 0)
  {
    int v49 = 0;
    goto LABEL_102;
  }
  if (!v92)
  {
    if (!v91)
    {
      int v49 = 1;
      goto LABEL_102;
    }
LABEL_98:
    int v49 = (*(unsigned __int8 *)(v91 + 16) >> 2) & 1;
    goto LABEL_102;
  }
  unsigned int v50 = *((_DWORD *)v92 + 4);
  int v49 = (v50 >> 2) & 1;
  if (v91 && (v50 & 4) != 0) {
    goto LABEL_98;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v48, v49, (uint64_t)v93, (uint64_t)v92, v91);
  uint16x8_t v94 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_178;
  }
  uint64_t v91 = 0;
  if (!v41) {
    goto LABEL_106;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
LABEL_106:
    long long v52 = v92;
    BOOL v92 = 0;
    uint64_t v4 = v83;
    if (!v52) {
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v41, v51);
  long long v52 = v92;
  BOOL v92 = 0;
  uint64_t v4 = v83;
  if (!v52) {
    goto LABEL_111;
  }
LABEL_109:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::destroy(v52, v51);
    long long v53 = v93;
    uint16x8_t v93 = 0;
    if (!v53) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  *(_DWORD *)v52 -= 2;
LABEL_111:
  long long v53 = v93;
  uint16x8_t v93 = 0;
  if (!v53)
  {
LABEL_116:
    long long v54 = *((void *)v40 + 4);
    uint64_t v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    if (!v55) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_114:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v53, v51);
  long long v54 = *((void *)v40 + 4);
  uint64_t v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
  if (!v55) {
    goto LABEL_125;
  }
LABEL_119:
  WTF::String::utf8();
  if (v89) {
    uint64_t v57 = (char *)v89 + 16;
  }
  else {
    uint64_t v57 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v57;
  _os_log_impl(&dword_1E1345000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  uint64_t v55 = v89;
  uint8x16_t v89 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      uint64_t v55 = (WTF *)WTF::fastFree(v55, v56);
      if (!*v40) {
        goto LABEL_165;
      }
      goto LABEL_126;
    }
    --*(_DWORD *)v55;
  }
LABEL_125:
  if (!*v40) {
    goto LABEL_165;
  }
LABEL_126:
  if (v40[16] >= 4u)
  {
    uint64_t v58 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v59 = *v58;
      if (v59) {
        goto LABEL_165;
      }
      int v60 = *v58;
      atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v60, v59 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v60 != v59);
    uint64_t v61 = WTF::Logger::observers(v55);
    uint64_t v62 = *(unsigned int *)(v61 + 12);
    if (v62)
    {
      unint64_t v63 = *(uint64_t **)v61;
      uint64_t v84 = *(void *)v61 + 8 * v62;
      while (1)
      {
        uint64_t v64 = *v63;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v85);
        int v96 = 0;
        WTF::String::String((WTF::String *)&v97, " rejecting ");
        int v98 = 0;
        WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(v99, v2);
        uint8x16_t v89 = 0;
        uint64_t v90 = 0;
        long long v65 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v90) = 3;
        uint8x16_t v89 = v65;
        uint64_t v66 = HIDWORD(v90);
        *((_DWORD *)v65 + 4 * HIDWORD(v90)) = buf;
        uint64_t v67 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v65 + 2 * v66 + 1) = v67;
        *((_DWORD *)v65 + 4 * (v66 + 1)) = v96;
        long long v68 = v97;
        if (v97) {
          *(_DWORD *)v97 += 2;
        }
        *((void *)v65 + 2 * (v66 + 1) + 1) = v68;
        *((_DWORD *)v65 + 4 * (v66 + 2)) = v98;
        unint64_t v69 = v99[0];
        if (v99[0]) {
          *(_DWORD *)v99[0] += 2;
        }
        *((void *)v65 + 2 * (v66 + 2) + 1) = v69;
        HIDWORD(v90) = v66 + 3;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v64 + 16))(v64, v40, 4, &v89);
        uint64_t v70 = v89;
        if (HIDWORD(v90))
        {
          uint64_t v71 = 16 * HIDWORD(v90);
          uint64_t v72 = (WTF::StringImpl **)((char *)v89 + 8);
          do
          {
            uint64_t v73 = *v72;
            *uint64_t v72 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2) {
                WTF::StringImpl::destroy(v73, v56);
              }
              else {
                *(_DWORD *)v73 -= 2;
              }
            }
            v72 += 2;
            v71 -= 16;
          }
          while (v71);
          uint64_t v70 = v89;
        }
        if (v70)
        {
          uint8x16_t v89 = 0;
          LODWORD(v90) = 0;
          WTF::fastFree(v70, v56);
        }
        unint64_t v74 = v99[0];
        v99[0] = 0;
        if (!v74) {
          goto LABEL_153;
        }
        if (*(_DWORD *)v74 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v74, v56);
        int v75 = v97;
        uint64_t v97 = 0;
        if (!v75) {
          goto LABEL_158;
        }
LABEL_156:
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
LABEL_158:
          __int32 v76 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v76) {
            goto LABEL_161;
          }
          goto LABEL_133;
        }
        WTF::StringImpl::destroy(v75, v56);
        __int32 v76 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v76)
        {
LABEL_161:
          if (*(_DWORD *)v76 == 2) {
            WTF::StringImpl::destroy(v76, v56);
          }
          else {
            *(_DWORD *)v76 -= 2;
          }
        }
LABEL_133:
        if (++v63 == (uint64_t *)v84) {
          goto LABEL_163;
        }
      }
      *(_DWORD *)v74 -= 2;
LABEL_153:
      int v75 = v97;
      uint64_t v97 = 0;
      if (!v75) {
        goto LABEL_158;
      }
      goto LABEL_156;
    }
LABEL_163:
    int v77 = 1;
    atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v77, 0, memory_order_release, memory_order_relaxed);
    uint64_t v4 = v83;
    if (v77 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_165:
  int v78 = v94;
  uint16x8_t v94 = 0;
  if (!v78) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
    goto LABEL_168;
  }
  WTF::StringImpl::destroy(v78, v56);
  uint64_t v79 = *(unsigned int *)(v2 + 88);
  if (v79 != -1) {
LABEL_169:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7AE78[v79])(&buf, v4);
LABEL_170:
  *(unsigned char *)(v2 + ++*(_DWORD *)(this + 56) = 5;
  *(_DWORD *)(v2 + ++*(_DWORD *)(this + 80) = 1;
  *(_DWORD *)(v2 + 8++*(_DWORD *)(this - 8) = 1;
  uint64_t result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (atomic_uchar *volatile *)&v87);
  if (v88)
  {
    uint64_t result = v87;
    int v81 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v87, (unsigned __int8 *)&v81, 0, memory_order_release, memory_order_relaxed);
    if (v81 != 1) {
      return (WTF *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void sub_1E140C8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  void *v31 = 0;
  if (atomic_fetch_add(v30 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v30 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v30 + 16))(v30);
  _Unwind_Resume(exception_object);
}

void sub_1E140CBC4(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((unsigned int *)&a19, a2);
  uint64_t v29 = a28;
  a28 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  unsigned int v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  JUMPOUT(0x1E140CC58);
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::remove@<X0>(uint64_t *a1@<X8>)
{
  v99[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  long long v85 = 0uLL;
  *(void *)&long long v86 = "remove";
  *((void *)&v86 + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v2 + ++*(_DWORD *)(this - 8) = 1;
  *(void *)uint64_t v2 = &unk_1F3C7AF00;
  long long v3 = v86;
  *(_OWORD *)(v2 + 16) = v85;
  *(_OWORD *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 4++*(_DWORD *)(this - 8) = 0;
  uint64_t v4 = v2 + 56;
  *(_DWORD *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = v2 + 88;
  *(void *)(v2 + ++*(_DWORD *)(this + 80) = 1;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = 0;
  *(_WORD *)(v2 + 112) = 0;
  uint64_t v5 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  uint64_t v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    goto LABEL_72;
  }
  WTF::String::String((WTF::String *)&v94, "creating ");
  WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v93, v2);
  uint64_t v7 = v93;
  if (v94)
  {
    int v8 = *((_DWORD *)v94 + 1);
    if (v93) {
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = 0;
    if (v93)
    {
LABEL_5:
      int v9 = *((_DWORD *)v93 + 1);
      if ((v9 | v8) < 0) {
        goto LABEL_179;
      }
      goto LABEL_9;
    }
  }
  int v9 = 0;
  if (v8 < 0)
  {
LABEL_179:
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x1E140D784);
  }
LABEL_9:
  unint64_t v10 = (v8 + v9);
  if (__OFADD__(v8, v9)) {
    goto LABEL_179;
  }
  if (!v94)
  {
    if (!v93)
    {
      int v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v12 = (*((unsigned __int8 *)v93 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v11 = *((_DWORD *)v94 + 4);
  int v12 = (v11 >> 2) & 1;
  if (v93 && (v11 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v94, (uint64_t)v93, &buf);
  int v87 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_179;
  }
  uint16x8_t v93 = 0;
  if (!v7) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_21:
    uint64_t v14 = v94;
    uint16x8_t v94 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v7, v13);
  uint64_t v14 = v94;
  uint16x8_t v94 = 0;
  if (!v14) {
    goto LABEL_26;
  }
LABEL_24:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v13);
    __int32 v82 = a1;
    uint64_t v15 = *((void *)v6 + 4);
    uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v16) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  *(_DWORD *)v14 -= 2;
LABEL_26:
  __int32 v82 = a1;
  uint64_t v15 = *((void *)v6 + 4);
  uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_29:
  WTF::String::utf8();
  if (v89) {
    uint64_t v18 = (char *)v89 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v18;
  _os_log_impl(&dword_1E1345000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  uint64_t v16 = v89;
  uint8x16_t v89 = 0;
  if (!v16)
  {
LABEL_35:
    if (*v6) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_35;
  }
  uint64_t v16 = (WTF *)WTF::fastFree(v16, v17);
  if (*v6)
  {
LABEL_36:
    if (v6[16] >= 4u)
    {
      unsigned int v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v20 = *v19;
        if (v20) {
          goto LABEL_68;
        }
        int v21 = *v19;
        atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v21 != v20);
      uint64_t v22 = WTF::Logger::observers(v16);
      uint64_t v23 = *(unsigned int *)(v22 + 12);
      if (v23)
      {
        long long v24 = *(uint64_t **)v22;
        uint64_t v25 = *(void *)v22 + 8 * v23;
        while (1)
        {
          uint64_t v26 = *v24;
          LODWORD(buf) = 0;
          WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
          int v96 = 0;
          WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v2);
          uint8x16_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
          LODWORD(v90) = 2;
          uint8x16_t v89 = v27;
          uint64_t v28 = HIDWORD(v90);
          *((_DWORD *)v27 + 4 * HIDWORD(v90)) = buf;
          uint64_t v29 = *((void *)&buf + 1);
          if (*((void *)&buf + 1)) {
            **((_DWORD **)&buf + 1) += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v96;
          unsigned int v30 = v97;
          if (v97) {
            *(_DWORD *)v97 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          HIDWORD(v90) = v28 + 2;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, v6, 4, &v89);
          uint64_t v31 = v89;
          if (HIDWORD(v90))
          {
            uint64_t v32 = 16 * HIDWORD(v90);
            unsigned int v33 = (WTF::StringImpl **)((char *)v89 + 8);
            do
            {
              uint64_t v34 = *v33;
              *unsigned int v33 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2) {
                  WTF::StringImpl::destroy(v34, v17);
                }
                else {
                  *(_DWORD *)v34 -= 2;
                }
              }
              v33 += 2;
              v32 -= 16;
            }
            while (v32);
            uint64_t v31 = v89;
          }
          if (v31)
          {
            uint8x16_t v89 = 0;
            LODWORD(v90) = 0;
            WTF::fastFree(v31, v17);
          }
          uint64_t v35 = v97;
          uint64_t v97 = 0;
          if (!v35) {
            goto LABEL_61;
          }
          if (*(_DWORD *)v35 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v35, v17);
          uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v36)
          {
LABEL_64:
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v17);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
LABEL_43:
          if (++v24 == (uint64_t *)v25) {
            goto LABEL_66;
          }
        }
        *(_DWORD *)v35 -= 2;
LABEL_61:
        uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v36) {
          goto LABEL_64;
        }
        goto LABEL_43;
      }
LABEL_66:
      int v37 = 1;
      atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      uint64_t v4 = v2 + 56;
      if (v37 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_68:
  uint64_t v5 = (unsigned __int8 *)v87;
  int v87 = 0;
  a1 = v82;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      uint64_t v5 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v17);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
LABEL_72:
  char v38 = 0;
  *a1 = v2;
  int v87 = (WTF::StringImpl *)(v2 + 48);
  char v88 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v38, 1u, memory_order_acquire, memory_order_acquire);
  if (v38) {
    uint64_t v5 = (unsigned __int8 *)MEMORY[0x1E4E44220](v2 + 48);
  }
  uint64_t v39 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  int v40 = v39;
  if (!*v39 || v39[16] < 4u)
  {
LABEL_168:
    uint64_t v79 = *(unsigned int *)(v2 + 64);
    if (v79 == -1) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v93, (WTF::Logger::LogSiteIdentifier *)&v85);
  WTF::String::String((WTF::String *)&v92, " rejecting ");
  uint64_t v83 = v4;
  WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v91, v2);
  uint64_t v41 = (WTF::StringImpl *)v91;
  if (v93)
  {
    int v42 = *((_DWORD *)v93 + 1);
    if (v92) {
      goto LABEL_78;
    }
  }
  else
  {
    int v42 = 0;
    if (v92)
    {
LABEL_78:
      int v43 = *((_DWORD *)v92 + 1);
      if (v91) {
        goto LABEL_79;
      }
      goto LABEL_83;
    }
  }
  int v43 = 0;
  if (v91)
  {
LABEL_79:
    int v44 = *(_DWORD *)(v91 + 4);
    if ((v44 | v43) < 0) {
      goto LABEL_178;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v44 = 0;
  if (v43 < 0)
  {
LABEL_178:
    __break(0xC471u);
    goto LABEL_180;
  }
LABEL_84:
  BOOL v45 = __OFADD__(v43, v44);
  int v46 = v43 + v44;
  char v47 = v45;
  if (v42 < 0) {
    goto LABEL_178;
  }
  if (v47) {
    goto LABEL_178;
  }
  unsigned int v48 = v42 + v46;
  if (__OFADD__(v42, v46)) {
    goto LABEL_178;
  }
  if (v93 && (*((unsigned char *)v93 + 16) & 4) == 0)
  {
    int v49 = 0;
    goto LABEL_102;
  }
  if (!v92)
  {
    if (!v91)
    {
      int v49 = 1;
      goto LABEL_102;
    }
LABEL_98:
    int v49 = (*(unsigned __int8 *)(v91 + 16) >> 2) & 1;
    goto LABEL_102;
  }
  unsigned int v50 = *((_DWORD *)v92 + 4);
  int v49 = (v50 >> 2) & 1;
  if (v91 && (v50 & 4) != 0) {
    goto LABEL_98;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v48, v49, (uint64_t)v93, (uint64_t)v92, v91);
  uint16x8_t v94 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_178;
  }
  uint64_t v91 = 0;
  if (!v41) {
    goto LABEL_106;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
LABEL_106:
    long long v52 = v92;
    BOOL v92 = 0;
    uint64_t v4 = v83;
    if (!v52) {
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v41, v51);
  long long v52 = v92;
  BOOL v92 = 0;
  uint64_t v4 = v83;
  if (!v52) {
    goto LABEL_111;
  }
LABEL_109:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::destroy(v52, v51);
    long long v53 = v93;
    uint16x8_t v93 = 0;
    if (!v53) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  *(_DWORD *)v52 -= 2;
LABEL_111:
  long long v53 = v93;
  uint16x8_t v93 = 0;
  if (!v53)
  {
LABEL_116:
    long long v54 = *((void *)v40 + 4);
    uint64_t v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    if (!v55) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_114:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v53, v51);
  long long v54 = *((void *)v40 + 4);
  uint64_t v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
  if (!v55) {
    goto LABEL_125;
  }
LABEL_119:
  WTF::String::utf8();
  if (v89) {
    uint64_t v57 = (char *)v89 + 16;
  }
  else {
    uint64_t v57 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v57;
  _os_log_impl(&dword_1E1345000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  uint64_t v55 = v89;
  uint8x16_t v89 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      uint64_t v55 = (WTF *)WTF::fastFree(v55, v56);
      if (!*v40) {
        goto LABEL_165;
      }
      goto LABEL_126;
    }
    --*(_DWORD *)v55;
  }
LABEL_125:
  if (!*v40) {
    goto LABEL_165;
  }
LABEL_126:
  if (v40[16] >= 4u)
  {
    uint64_t v58 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v59 = *v58;
      if (v59) {
        goto LABEL_165;
      }
      int v60 = *v58;
      atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v60, v59 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v60 != v59);
    uint64_t v61 = WTF::Logger::observers(v55);
    uint64_t v62 = *(unsigned int *)(v61 + 12);
    if (v62)
    {
      unint64_t v63 = *(uint64_t **)v61;
      uint64_t v84 = *(void *)v61 + 8 * v62;
      while (1)
      {
        uint64_t v64 = *v63;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v85);
        int v96 = 0;
        WTF::String::String((WTF::String *)&v97, " rejecting ");
        int v98 = 0;
        WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(v99, v2);
        uint8x16_t v89 = 0;
        uint64_t v90 = 0;
        long long v65 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v90) = 3;
        uint8x16_t v89 = v65;
        uint64_t v66 = HIDWORD(v90);
        *((_DWORD *)v65 + 4 * HIDWORD(v90)) = buf;
        uint64_t v67 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v65 + 2 * v66 + 1) = v67;
        *((_DWORD *)v65 + 4 * (v66 + 1)) = v96;
        long long v68 = v97;
        if (v97) {
          *(_DWORD *)v97 += 2;
        }
        *((void *)v65 + 2 * (v66 + 1) + 1) = v68;
        *((_DWORD *)v65 + 4 * (v66 + 2)) = v98;
        unint64_t v69 = v99[0];
        if (v99[0]) {
          *(_DWORD *)v99[0] += 2;
        }
        *((void *)v65 + 2 * (v66 + 2) + 1) = v69;
        HIDWORD(v90) = v66 + 3;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v64 + 16))(v64, v40, 4, &v89);
        uint64_t v70 = v89;
        if (HIDWORD(v90))
        {
          uint64_t v71 = 16 * HIDWORD(v90);
          uint64_t v72 = (WTF::StringImpl **)((char *)v89 + 8);
          do
          {
            uint64_t v73 = *v72;
            *uint64_t v72 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2) {
                WTF::StringImpl::destroy(v73, v56);
              }
              else {
                *(_DWORD *)v73 -= 2;
              }
            }
            v72 += 2;
            v71 -= 16;
          }
          while (v71);
          uint64_t v70 = v89;
        }
        if (v70)
        {
          uint8x16_t v89 = 0;
          LODWORD(v90) = 0;
          WTF::fastFree(v70, v56);
        }
        unint64_t v74 = v99[0];
        v99[0] = 0;
        if (!v74) {
          goto LABEL_153;
        }
        if (*(_DWORD *)v74 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v74, v56);
        int v75 = v97;
        uint64_t v97 = 0;
        if (!v75) {
          goto LABEL_158;
        }
LABEL_156:
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
LABEL_158:
          __int32 v76 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v76) {
            goto LABEL_161;
          }
          goto LABEL_133;
        }
        WTF::StringImpl::destroy(v75, v56);
        __int32 v76 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v76)
        {
LABEL_161:
          if (*(_DWORD *)v76 == 2) {
            WTF::StringImpl::destroy(v76, v56);
          }
          else {
            *(_DWORD *)v76 -= 2;
          }
        }
LABEL_133:
        if (++v63 == (uint64_t *)v84) {
          goto LABEL_163;
        }
      }
      *(_DWORD *)v74 -= 2;
LABEL_153:
      int v75 = v97;
      uint64_t v97 = 0;
      if (!v75) {
        goto LABEL_158;
      }
      goto LABEL_156;
    }
LABEL_163:
    int v77 = 1;
    atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v77, 0, memory_order_release, memory_order_relaxed);
    uint64_t v4 = v83;
    if (v77 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_165:
  int v78 = v94;
  uint16x8_t v94 = 0;
  if (!v78) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
    goto LABEL_168;
  }
  WTF::StringImpl::destroy(v78, v56);
  uint64_t v79 = *(unsigned int *)(v2 + 64);
  if (v79 != -1) {
LABEL_169:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7AF18[v79])(&buf, v4);
LABEL_170:
  *(unsigned char *)(v2 + ++*(_DWORD *)(this + 56) = 5;
  *(void *)(v2 + 60) = 0x100000001;
  uint64_t result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (atomic_uchar *volatile *)&v87);
  if (v88)
  {
    uint64_t result = v87;
    int v81 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v87, (unsigned __int8 *)&v81, 0, memory_order_release, memory_order_relaxed);
    if (v81 != 1) {
      return (WTF *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void sub_1E140D790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  void *v31 = 0;
  if (atomic_fetch_add(v30 + 2, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(exception_object);
  }
  atomic_store(1u, (unsigned int *)v30 + 2);
  (*(void (**)(atomic_uint *))(*(void *)v30 + 16))(v30);
  _Unwind_Resume(exception_object);
}

void sub_1E140DA64(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((unsigned int *)&a19, a2);
  uint64_t v29 = a28;
  a28 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  unsigned int v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  JUMPOUT(0x1E140DAF8);
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::retrieveCaches@<X0>(uint64_t *a1@<X8>)
{
  v99[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  long long v85 = 0uLL;
  *(void *)&long long v86 = "retrieveCaches";
  *((void *)&v86 + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + ++*(_DWORD *)(this - 8) = 1;
  *(void *)uint64_t v2 = &unk_1F3C7AFA0;
  long long v3 = v86;
  *(_OWORD *)(v2 + 16) = v85;
  *(_OWORD *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 4++*(_DWORD *)(this - 8) = 0;
  uint64_t v4 = v2 + 56;
  *(_DWORD *)(v2 + 8++*(_DWORD *)(this - 8) = 0;
  *(void *)(v2 + 96) = v2 + 112;
  *(void *)(v2 + 104) = 1;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 12++*(_DWORD *)(this - 8) = 0;
  *(_WORD *)(v2 + 136) = 0;
  uint64_t v5 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  uint64_t v6 = v5;
  if (!*v5 || v5[16] < 4u) {
    goto LABEL_72;
  }
  WTF::String::String((WTF::String *)&v94, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v93, v2);
  uint64_t v7 = v93;
  if (v94)
  {
    int v8 = *((_DWORD *)v94 + 1);
    if (v93) {
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = 0;
    if (v93)
    {
LABEL_5:
      int v9 = *((_DWORD *)v93 + 1);
      if ((v9 | v8) < 0) {
        goto LABEL_179;
      }
      goto LABEL_9;
    }
  }
  int v9 = 0;
  if (v8 < 0)
  {
LABEL_179:
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x1E140E628);
  }
LABEL_9:
  unint64_t v10 = (v8 + v9);
  if (__OFADD__(v8, v9)) {
    goto LABEL_179;
  }
  if (!v94)
  {
    if (!v93)
    {
      int v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    int v12 = (*((unsigned __int8 *)v93 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  unsigned int v11 = *((_DWORD *)v94 + 4);
  int v12 = (v11 >> 2) & 1;
  if (v93 && (v11 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v94, (uint64_t)v93, &buf);
  int v87 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_179;
  }
  uint16x8_t v93 = 0;
  if (!v7) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_21:
    uint64_t v14 = v94;
    uint16x8_t v94 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v7, v13);
  uint64_t v14 = v94;
  uint16x8_t v94 = 0;
  if (!v14) {
    goto LABEL_26;
  }
LABEL_24:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v13);
    __int32 v82 = a1;
    uint64_t v15 = *((void *)v6 + 4);
    uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (!v16) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  *(_DWORD *)v14 -= 2;
LABEL_26:
  __int32 v82 = a1;
  uint64_t v15 = *((void *)v6 + 4);
  uint64_t v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (!v16) {
    goto LABEL_35;
  }
LABEL_29:
  WTF::String::utf8();
  if (v89) {
    uint64_t v18 = (char *)v89 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v18;
  _os_log_impl(&dword_1E1345000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  uint64_t v16 = v89;
  uint8x16_t v89 = 0;
  if (!v16)
  {
LABEL_35:
    if (*v6) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_35;
  }
  uint64_t v16 = (WTF *)WTF::fastFree(v16, v17);
  if (*v6)
  {
LABEL_36:
    if (v6[16] >= 4u)
    {
      unsigned int v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
      do
      {
        int v20 = *v19;
        if (v20) {
          goto LABEL_68;
        }
        int v21 = *v19;
        atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
      }
      while (v21 != v20);
      uint64_t v22 = WTF::Logger::observers(v16);
      uint64_t v23 = *(unsigned int *)(v22 + 12);
      if (v23)
      {
        long long v24 = *(uint64_t **)v22;
        uint64_t v25 = *(void *)v22 + 8 * v23;
        while (1)
        {
          uint64_t v26 = *v24;
          LODWORD(buf) = 0;
          WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
          int v96 = 0;
          WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v97, v2);
          uint8x16_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
          LODWORD(v90) = 2;
          uint8x16_t v89 = v27;
          uint64_t v28 = HIDWORD(v90);
          *((_DWORD *)v27 + 4 * HIDWORD(v90)) = buf;
          uint64_t v29 = *((void *)&buf + 1);
          if (*((void *)&buf + 1)) {
            **((_DWORD **)&buf + 1) += 2;
          }
          *((void *)v27 + 2 * v28 + 1) = v29;
          *((_DWORD *)v27 + 4 * (v28 + 1)) = v96;
          unsigned int v30 = v97;
          if (v97) {
            *(_DWORD *)v97 += 2;
          }
          *((void *)v27 + 2 * (v28 + 1) + 1) = v30;
          HIDWORD(v90) = v28 + 2;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(void *)v26 + 16))(v26, v6, 4, &v89);
          uint64_t v31 = v89;
          if (HIDWORD(v90))
          {
            uint64_t v32 = 16 * HIDWORD(v90);
            unsigned int v33 = (WTF::StringImpl **)((char *)v89 + 8);
            do
            {
              uint64_t v34 = *v33;
              *unsigned int v33 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2) {
                  WTF::StringImpl::destroy(v34, v17);
                }
                else {
                  *(_DWORD *)v34 -= 2;
                }
              }
              v33 += 2;
              v32 -= 16;
            }
            while (v32);
            uint64_t v31 = v89;
          }
          if (v31)
          {
            uint8x16_t v89 = 0;
            LODWORD(v90) = 0;
            WTF::fastFree(v31, v17);
          }
          uint64_t v35 = v97;
          uint64_t v97 = 0;
          if (!v35) {
            goto LABEL_61;
          }
          if (*(_DWORD *)v35 != 2) {
            break;
          }
          WTF::StringImpl::destroy(v35, v17);
          uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v36)
          {
LABEL_64:
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v17);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
LABEL_43:
          if (++v24 == (uint64_t *)v25) {
            goto LABEL_66;
          }
        }
        *(_DWORD *)v35 -= 2;
LABEL_61:
        uint64_t v36 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v36) {
          goto LABEL_64;
        }
        goto LABEL_43;
      }
LABEL_66:
      int v37 = 1;
      atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      uint64_t v4 = v2 + 56;
      if (v37 != 1) {
        WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
      }
    }
  }
LABEL_68:
  uint64_t v5 = (unsigned __int8 *)v87;
  int v87 = 0;
  a1 = v82;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      uint64_t v5 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v17);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
LABEL_72:
  char v38 = 0;
  *a1 = v2;
  int v87 = (WTF::StringImpl *)(v2 + 48);
  char v88 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v38, 1u, memory_order_acquire, memory_order_acquire);
  if (v38) {
    uint64_t v5 = (unsigned __int8 *)MEMORY[0x1E4E44220](v2 + 48);
  }
  uint64_t v39 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  int v40 = v39;
  if (!*v39 || v39[16] < 4u)
  {
LABEL_168:
    uint64_t v79 = *(unsigned int *)(v2 + 88);
    if (v79 == -1) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v93, (WTF::Logger::LogSiteIdentifier *)&v85);
  WTF::String::String((WTF::String *)&v92, " rejecting ");
  uint64_t v83 = v4;
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v91, v2);
  uint64_t v41 = (WTF::StringImpl *)v91;
  if (v93)
  {
    int v42 = *((_DWORD *)v93 + 1);
    if (v92) {
      goto LABEL_78;
    }
  }
  else
  {
    int v42 = 0;
    if (v92)
    {
LABEL_78:
      int v43 = *((_DWORD *)v92 + 1);
      if (v91) {
        goto LABEL_79;
      }
      goto LABEL_83;
    }
  }
  int v43 = 0;
  if (v91)
  {
LABEL_79:
    int v44 = *(_DWORD *)(v91 + 4);
    if ((v44 | v43) < 0) {
      goto LABEL_178;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v44 = 0;
  if (v43 < 0)
  {
LABEL_178:
    __break(0xC471u);
    goto LABEL_180;
  }
LABEL_84:
  BOOL v45 = __OFADD__(v43, v44);
  int v46 = v43 + v44;
  char v47 = v45;
  if (v42 < 0) {
    goto LABEL_178;
  }
  if (v47) {
    goto LABEL_178;
  }
  unsigned int v48 = v42 + v46;
  if (__OFADD__(v42, v46)) {
    goto LABEL_178;
  }
  if (v93 && (*((unsigned char *)v93 + 16) & 4) == 0)
  {
    int v49 = 0;
    goto LABEL_102;
  }
  if (!v92)
  {
    if (!v91)
    {
      int v49 = 1;
      goto LABEL_102;
    }
LABEL_98:
    int v49 = (*(unsigned __int8 *)(v91 + 16) >> 2) & 1;
    goto LABEL_102;
  }
  unsigned int v50 = *((_DWORD *)v92 + 4);
  int v49 = (v50 >> 2) & 1;
  if (v91 && (v50 & 4) != 0) {
    goto LABEL_98;
  }
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v48, v49, (uint64_t)v93, (uint64_t)v92, v91);
  uint16x8_t v94 = (WTF::StringImpl *)buf;
  if (!(void)buf) {
    goto LABEL_178;
  }
  uint64_t v91 = 0;
  if (!v41) {
    goto LABEL_106;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
LABEL_106:
    long long v52 = v92;
    BOOL v92 = 0;
    uint64_t v4 = v83;
    if (!v52) {
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v41, v51);
  long long v52 = v92;
  BOOL v92 = 0;
  uint64_t v4 = v83;
  if (!v52) {
    goto LABEL_111;
  }
LABEL_109:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::destroy(v52, v51);
    long long v53 = v93;
    uint16x8_t v93 = 0;
    if (!v53) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  *(_DWORD *)v52 -= 2;
LABEL_111:
  long long v53 = v93;
  uint16x8_t v93 = 0;
  if (!v53)
  {
LABEL_116:
    long long v54 = *((void *)v40 + 4);
    uint64_t v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    if (!v55) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_114:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v53, v51);
  long long v54 = *((void *)v40 + 4);
  uint64_t v55 = (WTF *)os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
  if (!v55) {
    goto LABEL_125;
  }
LABEL_119:
  WTF::String::utf8();
  if (v89) {
    uint64_t v57 = (char *)v89 + 16;
  }
  else {
    uint64_t v57 = 0;
  }
  LODWORD(buf) = 136446210;
  *(void *)((char *)&buf + 4) = v57;
  _os_log_impl(&dword_1E1345000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  uint64_t v55 = v89;
  uint8x16_t v89 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      uint64_t v55 = (WTF *)WTF::fastFree(v55, v56);
      if (!*v40) {
        goto LABEL_165;
      }
      goto LABEL_126;
    }
    --*(_DWORD *)v55;
  }
LABEL_125:
  if (!*v40) {
    goto LABEL_165;
  }
LABEL_126:
  if (v40[16] >= 4u)
  {
    uint64_t v58 = (atomic_uchar *)MEMORY[0x1E4F30998];
    do
    {
      int v59 = *v58;
      if (v59) {
        goto LABEL_165;
      }
      int v60 = *v58;
      atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v60, v59 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v60 != v59);
    uint64_t v61 = WTF::Logger::observers(v55);
    uint64_t v62 = *(unsigned int *)(v61 + 12);
    if (v62)
    {
      unint64_t v63 = *(uint64_t **)v61;
      uint64_t v84 = *(void *)v61 + 8 * v62;
      while (1)
      {
        uint64_t v64 = *v63;
        LODWORD(buf) = 0;
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v85);
        int v96 = 0;
        WTF::String::String((WTF::String *)&v97, " rejecting ");
        int v98 = 0;
        WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(v99, v2);
        uint8x16_t v89 = 0;
        uint64_t v90 = 0;
        long long v65 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
        LODWORD(v90) = 3;
        uint8x16_t v89 = v65;
        uint64_t v66 = HIDWORD(v90);
        *((_DWORD *)v65 + 4 * HIDWORD(v90)) = buf;
        uint64_t v67 = *((void *)&buf + 1);
        if (*((void *)&buf + 1)) {
          **((_DWORD **)&buf + 1) += 2;
        }
        *((void *)v65 + 2 * v66 + 1) = v67;
        *((_DWORD *)v65 + 4 * (v66 + 1)) = v96;
        long long v68 = v97;
        if (v97) {
          *(_DWORD *)v97 += 2;
        }
        *((void *)v65 + 2 * (v66 + 1) + 1) = v68;
        *((_DWORD *)v65 + 4 * (v66 + 2)) = v98;
        unint64_t v69 = v99[0];
        if (v99[0]) {
          *(_DWORD *)v99[0] += 2;
        }
        *((void *)v65 + 2 * (v66 + 2) + 1) = v69;
        HIDWORD(v90) = v66 + 3;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::Logger **))(*(void *)v64 + 16))(v64, v40, 4, &v89);
        uint64_t v70 = v89;
        if (HIDWORD(v90))
        {
          uint64_t v71 = 16 * HIDWORD(v90);
          uint64_t v72 = (WTF::StringImpl **)((char *)v89 + 8);
          do
          {
            uint64_t v73 = *v72;
            *uint64_t v72 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2) {
                WTF::StringImpl::destroy(v73, v56);
              }
              else {
                *(_DWORD *)v73 -= 2;
              }
            }
            v72 += 2;
            v71 -= 16;
          }
          while (v71);
          uint64_t v70 = v89;
        }
        if (v70)
        {
          uint8x16_t v89 = 0;
          LODWORD(v90) = 0;
          WTF::fastFree(v70, v56);
        }
        unint64_t v74 = v99[0];
        v99[0] = 0;
        if (!v74) {
          goto LABEL_153;
        }
        if (*(_DWORD *)v74 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v74, v56);
        int v75 = v97;
        uint64_t v97 = 0;
        if (!v75) {
          goto LABEL_158;
        }
LABEL_156:
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
LABEL_158:
          __int32 v76 = (WTF::StringImpl *)*((void *)&buf + 1);
          *((void *)&buf + 1) = 0;
          if (v76) {
            goto LABEL_161;
          }
          goto LABEL_133;
        }
        WTF::StringImpl::destroy(v75, v56);
        __int32 v76 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v76)
        {
LABEL_161:
          if (*(_DWORD *)v76 == 2) {
            WTF::StringImpl::destroy(v76, v56);
          }
          else {
            *(_DWORD *)v76 -= 2;
          }
        }
LABEL_133:
        if (++v63 == (uint64_t *)v84) {
          goto LABEL_163;
        }
      }
      *(_DWORD *)v74 -= 2;
LABEL_153:
      int v75 = v97;
      uint64_t v97 = 0;
      if (!v75) {
        goto LABEL_158;
      }
      goto LABEL_156;
    }
LABEL_163:
    int v77 = 1;
    atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v77, 0, memory_order_release, memory_order_relaxed);
    uint64_t v4 = v83;
    if (v77 != 1) {
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
LABEL_165:
  int v78 = v94;
  uint16x8_t v94 = 0;
  if (!v78) {
    goto LABEL_168;
  }
  if (*(_DWORD *)v78 != 2)
  {
    *(_DWORD *)v78 -= 2;
    goto LABEL_168;
  }
  WTF::StringImpl::destroy(v78, v56);
  uint64_t v79 = *(unsigned int *)(v2 + 88);
  if (v79 != -1) {
LABEL_169:
  }
    ((void (*)(long long *, uint64_t))off_1F3C7AFB8[v79])(&buf, v4);
LABEL_170:
  *(unsigned char *)(v2 + ++*(_DWORD *)(this + 56) = 5;
  *(_DWORD *)(v2 + ++*(_DWORD *)(this + 80) = 1;
  *(_DWORD *)(v2 + 8++*(_DWORD *)(this - 8) = 1;
  uint64_t result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (atomic_uchar *volatile *)&v87);
  if (v88)
  {
    uint64_t result = v87;
    int v81 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v87, (unsigned __int8 *)&v81, 0, memory_order_release, memory_order_relaxed);
    if (v81 != 1) {
      return (WTF *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}